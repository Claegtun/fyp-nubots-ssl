
pcb_fft.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c798  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000133c4  0800ca68  0800ca68  0001ca68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0801fe2c  0801fe2c  0002fe2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0801fe30  0801fe30  0002fe30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .tables_section 0000782e  30000000  30000000  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .tables_section 00003c16  38000000  38000000  00050000  2**2
                  ALLOC
  7 .data         000067ec  24000000  0801fe34  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00001f78  240067f0  08026620  000367f0  2**3
                  ALLOC
  9 ._user_heap_stack 00000600  24008768  08026620  00038768  2**0
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  0004782e  2**0
                  CONTENTS, READONLY
 11 .comment      000000b8  00000000  00000000  0004785c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000326c6  00000000  00000000  00047914  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000073b8  00000000  00000000  00079fda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001510  00000000  00000000  00081398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000371ec  00000000  00000000  000828a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0002c6ab  00000000  00000000  000b9a94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0014c698  00000000  00000000  000e613f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00001ab8  00000000  00000000  002327d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_frame  00004eb0  00000000  00000000  00234290  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_loclists 0000fed9  00000000  00000000  00239140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000089  00000000  00000000  00249019  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    000064fe  00000000  00000000  002490a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 000003f8  00000000  00000000  0024f5a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240067f0 	.word	0x240067f0
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800ca50 	.word	0x0800ca50

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240067f4 	.word	0x240067f4
 800030c:	0800ca50 	.word	0x0800ca50

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <strlen>:
 80003b0:	4603      	mov	r3, r0
 80003b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d1fb      	bne.n	80003b2 <strlen+0x2>
 80003ba:	1a18      	subs	r0, r3, r0
 80003bc:	3801      	subs	r0, #1
 80003be:	4770      	bx	lr

080003c0 <MX_DMA_Init>:
  */
void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80003c0:	4b0c      	ldr	r3, [pc, #48]	; (80003f4 <MX_DMA_Init+0x34>)

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80003c2:	2200      	movs	r2, #0
 80003c4:	2010      	movs	r0, #16
 80003c6:	4611      	mov	r1, r2
{
 80003c8:	b510      	push	{r4, lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 80003ca:	f8d3 40d8 	ldr.w	r4, [r3, #216]	; 0xd8
{
 80003ce:	b082      	sub	sp, #8
  __HAL_RCC_DMA1_CLK_ENABLE();
 80003d0:	f044 0401 	orr.w	r4, r4, #1
 80003d4:	f8c3 40d8 	str.w	r4, [r3, #216]	; 0xd8
 80003d8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80003dc:	f003 0301 	and.w	r3, r3, #1
 80003e0:	9301      	str	r3, [sp, #4]
 80003e2:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80003e4:	f001 fa98 	bl	8001918 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80003e8:	2010      	movs	r0, #16

}
 80003ea:	b002      	add	sp, #8
 80003ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80003f0:	f001 bad0 	b.w	8001994 <HAL_NVIC_EnableIRQ>
 80003f4:	58024400 	.word	0x58024400

080003f8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80003f8:	b500      	push	{lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003fa:	4b1a      	ldr	r3, [pc, #104]	; (8000464 <MX_GPIO_Init+0x6c>)
{
 80003fc:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003fe:	2200      	movs	r2, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ADC_RESET_Pin|LED_0_Pin, GPIO_PIN_RESET);
 8000400:	4819      	ldr	r0, [pc, #100]	; (8000468 <MX_GPIO_Init+0x70>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000402:	e9cd 2202 	strd	r2, r2, [sp, #8]
 8000406:	e9cd 2204 	strd	r2, r2, [sp, #16]
 800040a:	9206      	str	r2, [sp, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800040c:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8000410:	f041 0101 	orr.w	r1, r1, #1
 8000414:	f8c3 10e0 	str.w	r1, [r3, #224]	; 0xe0
 8000418:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 800041c:	f001 0101 	and.w	r1, r1, #1
 8000420:	9100      	str	r1, [sp, #0]
 8000422:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000424:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8000428:	f041 0104 	orr.w	r1, r1, #4
 800042c:	f8c3 10e0 	str.w	r1, [r3, #224]	; 0xe0
  HAL_GPIO_WritePin(GPIOC, ADC_RESET_Pin|LED_0_Pin, GPIO_PIN_RESET);
 8000430:	f44f 61c0 	mov.w	r1, #1536	; 0x600
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000434:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000438:	f003 0304 	and.w	r3, r3, #4
 800043c:	9301      	str	r3, [sp, #4]
 800043e:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_WritePin(GPIOC, ADC_RESET_Pin|LED_0_Pin, GPIO_PIN_RESET);
 8000440:	f002 fc40 	bl	8002cc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ADC_RESET_Pin|LED_0_Pin;
 8000444:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8000448:	2301      	movs	r3, #1
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800044a:	a902      	add	r1, sp, #8
 800044c:	4806      	ldr	r0, [pc, #24]	; (8000468 <MX_GPIO_Init+0x70>)
  GPIO_InitStruct.Pin = ADC_RESET_Pin|LED_0_Pin;
 800044e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8000452:	2200      	movs	r2, #0
 8000454:	2300      	movs	r3, #0
 8000456:	e9cd 2304 	strd	r2, r3, [sp, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800045a:	f002 fb0b 	bl	8002a74 <HAL_GPIO_Init>

}
 800045e:	b009      	add	sp, #36	; 0x24
 8000460:	f85d fb04 	ldr.w	pc, [sp], #4
 8000464:	58024400 	.word	0x58024400
 8000468:	58020800 	.word	0x58020800

0800046c <DMA_TIM8_callback>:
}

/* USER CODE BEGIN 4 */

void DMA_TIM8_callback(DMA_HandleTypeDef* hdma) {
	if (hdma == htim5.hdma[TIM_DMA_ID_CC1]) {
 800046c:	4b04      	ldr	r3, [pc, #16]	; (8000480 <DMA_TIM8_callback+0x14>)
 800046e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000470:	4283      	cmp	r3, r0
 8000472:	d000      	beq.n	8000476 <DMA_TIM8_callback+0xa>
		adc_parallel_dma_flag = 1;
		//HAL_GPIO_TogglePin(SIG_0_GPIO_Port, SIG_0_Pin);
	}
}
 8000474:	4770      	bx	lr
		adc_parallel_dma_flag = 1;
 8000476:	4b03      	ldr	r3, [pc, #12]	; (8000484 <DMA_TIM8_callback+0x18>)
 8000478:	2201      	movs	r2, #1
 800047a:	701a      	strb	r2, [r3, #0]
}
 800047c:	4770      	bx	lr
 800047e:	bf00      	nop
 8000480:	24006970 	.word	0x24006970
 8000484:	2400680c 	.word	0x2400680c

08000488 <SystemClock_Config>:
{
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	b0a5      	sub	sp, #148	; 0x94
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800048c:	224c      	movs	r2, #76	; 0x4c
 800048e:	2100      	movs	r1, #0
  RCC_CRSInitTypeDef RCC_CRSInitStruct = {0};
 8000490:	2400      	movs	r4, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000492:	a811      	add	r0, sp, #68	; 0x44
 8000494:	f00a fafd 	bl	800aa92 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000498:	2220      	movs	r2, #32
 800049a:	2100      	movs	r1, #0
 800049c:	a809      	add	r0, sp, #36	; 0x24
 800049e:	f00a faf8 	bl	800aa92 <memset>
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80004a2:	2002      	movs	r0, #2
  RCC_CRSInitTypeDef RCC_CRSInitStruct = {0};
 80004a4:	e9cd 4402 	strd	r4, r4, [sp, #8]
 80004a8:	e9cd 4404 	strd	r4, r4, [sp, #16]
 80004ac:	e9cd 4406 	strd	r4, r4, [sp, #24]
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80004b0:	f003 fc08 	bl	8003cc4 <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80004b4:	4a2e      	ldr	r2, [pc, #184]	; (8000570 <SystemClock_Config+0xe8>)
 80004b6:	9400      	str	r4, [sp, #0]
 80004b8:	6993      	ldr	r3, [r2, #24]
 80004ba:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80004be:	6193      	str	r3, [r2, #24]
 80004c0:	6993      	ldr	r3, [r2, #24]
 80004c2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80004c6:	9300      	str	r3, [sp, #0]
 80004c8:	9b00      	ldr	r3, [sp, #0]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80004ca:	6993      	ldr	r3, [r2, #24]
 80004cc:	049b      	lsls	r3, r3, #18
 80004ce:	d5fc      	bpl.n	80004ca <SystemClock_Config+0x42>
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80004d0:	2301      	movs	r3, #1
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 80004d2:	2222      	movs	r2, #34	; 0x22
  RCC_OscInitStruct.HSICalibrationValue = 64;
 80004d4:	2440      	movs	r4, #64	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004d6:	a811      	add	r0, sp, #68	; 0x44
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80004d8:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80004da:	9317      	str	r3, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 1;
 80004dc:	931e      	str	r3, [sp, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLFRACN = 3072;
 80004de:	f44f 6340 	mov.w	r3, #3072	; 0xc00
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 80004e2:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 34;
 80004e4:	921d      	str	r2, [sp, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80004e6:	220c      	movs	r2, #12
  RCC_OscInitStruct.PLL.PLLFRACN = 3072;
 80004e8:	9323      	str	r3, [sp, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004ea:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80004ec:	9221      	str	r2, [sp, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80004ee:	2200      	movs	r2, #0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004f0:	931a      	str	r3, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80004f2:	921b      	str	r2, [sp, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80004f4:	9222      	str	r2, [sp, #136]	; 0x88
  RCC_OscInitStruct.HSICalibrationValue = 64;
 80004f6:	9415      	str	r4, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLR = 2;
 80004f8:	e9cd 331f 	strd	r3, r3, [sp, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80004fc:	2304      	movs	r3, #4
 80004fe:	931c      	str	r3, [sp, #112]	; 0x70
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000500:	f003 fc92 	bl	8003e28 <HAL_RCC_OscConfig>
 8000504:	4603      	mov	r3, r0
 8000506:	b108      	cbz	r0, 800050c <SystemClock_Config+0x84>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000508:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800050a:	e7fe      	b.n	800050a <SystemClock_Config+0x82>
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800050c:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800050e:	2308      	movs	r3, #8
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000510:	223f      	movs	r2, #63	; 0x3f
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000512:	2103      	movs	r1, #3
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000514:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000516:	f44f 6380 	mov.w	r3, #1024	; 0x400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800051a:	a809      	add	r0, sp, #36	; 0x24
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800051c:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800051e:	910a      	str	r1, [sp, #40]	; 0x28
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000520:	e9cd 340f 	strd	r3, r4, [sp, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000524:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000528:	f003 ffcc 	bl	80044c4 <HAL_RCC_ClockConfig>
 800052c:	4603      	mov	r3, r0
 800052e:	b108      	cbz	r0, 8000534 <SystemClock_Config+0xac>
 8000530:	b672      	cpsid	i
  while (1)
 8000532:	e7fe      	b.n	8000532 <SystemClock_Config+0xaa>
  __HAL_RCC_CRS_CLK_ENABLE();
 8000534:	4a0f      	ldr	r2, [pc, #60]	; (8000574 <SystemClock_Config+0xec>)
  RCC_CRSInitStruct.Source = RCC_CRS_SYNC_SOURCE_USB2;
 8000536:	f04f 5540 	mov.w	r5, #805306368	; 0x30000000
  RCC_CRSInitStruct.ReloadValue = __HAL_RCC_CRS_RELOADVALUE_CALCULATE(48000000,1000);
 800053a:	f64b 347f 	movw	r4, #47999	; 0xbb7f
  HAL_RCCEx_CRSConfig(&RCC_CRSInitStruct);
 800053e:	a802      	add	r0, sp, #8
  __HAL_RCC_CRS_CLK_ENABLE();
 8000540:	f8d2 10ec 	ldr.w	r1, [r2, #236]	; 0xec
 8000544:	f041 0102 	orr.w	r1, r1, #2
 8000548:	f8c2 10ec 	str.w	r1, [r2, #236]	; 0xec
 800054c:	f8d2 20ec 	ldr.w	r2, [r2, #236]	; 0xec
  RCC_CRSInitStruct.Polarity = RCC_CRS_SYNC_POLARITY_RISING;
 8000550:	9304      	str	r3, [sp, #16]
  __HAL_RCC_CRS_CLK_ENABLE();
 8000552:	f002 0202 	and.w	r2, r2, #2
  RCC_CRSInitStruct.ReloadValue = __HAL_RCC_CRS_RELOADVALUE_CALCULATE(48000000,1000);
 8000556:	9405      	str	r4, [sp, #20]
  __HAL_RCC_CRS_CLK_ENABLE();
 8000558:	9201      	str	r2, [sp, #4]
  RCC_CRSInitStruct.ErrorLimitValue = 34;
 800055a:	2222      	movs	r2, #34	; 0x22
  __HAL_RCC_CRS_CLK_ENABLE();
 800055c:	9901      	ldr	r1, [sp, #4]
  RCC_CRSInitStruct.Prescaler = RCC_CRS_SYNC_DIV1;
 800055e:	e9cd 3502 	strd	r3, r5, [sp, #8]
  RCC_CRSInitStruct.ErrorLimitValue = 34;
 8000562:	2320      	movs	r3, #32
 8000564:	e9cd 2306 	strd	r2, r3, [sp, #24]
  HAL_RCCEx_CRSConfig(&RCC_CRSInitStruct);
 8000568:	f004 ffbc 	bl	80054e4 <HAL_RCCEx_CRSConfig>
}
 800056c:	b025      	add	sp, #148	; 0x94
 800056e:	bd30      	pop	{r4, r5, pc}
 8000570:	58024800 	.word	0x58024800
 8000574:	58024400 	.word	0x58024400

08000578 <main>:
{
 8000578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800057c:	ed2d 8b0a 	vpush	{d8-d12}
 8000580:	f5ad 4d88 	sub.w	sp, sp, #17408	; 0x4400
		for (int j = i+1;  j < 8; j++) {
 8000584:	2501      	movs	r5, #1
{
 8000586:	b081      	sub	sp, #4
  HAL_Init();
 8000588:	f001 f95a 	bl	8001840 <HAL_Init>
  SystemClock_Config();
 800058c:	f7ff ff7c 	bl	8000488 <SystemClock_Config>
		state[i] = 0;
 8000590:	acc0      	add	r4, sp, #768	; 0x300
  MX_GPIO_Init();
 8000592:	f7ff ff31 	bl	80003f8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000596:	f7ff ff13 	bl	80003c0 <MX_DMA_Init>
  MX_TIM3_Init();
 800059a:	f000 ffe1 	bl	8001560 <MX_TIM3_Init>
  MX_TIM4_Init();
 800059e:	f000 fe23 	bl	80011e8 <MX_TIM4_Init>
  MX_TIM5_Init();
 80005a2:	f000 fe69 	bl	8001278 <MX_TIM5_Init>
  MX_TIM8_Init();
 80005a6:	f001 f853 	bl	8001650 <MX_TIM8_Init>
  MX_USB_DEVICE_Init();
 80005aa:	f007 fbd5 	bl	8007d58 <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 80005ae:	f000 fd6b 	bl	8001088 <MX_TIM2_Init>
	volatile uint16_t* buffer_0 = malloc(8*8*1024*2);
 80005b2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80005b6:	f009 fc63 	bl	8009e80 <malloc>
 80005ba:	4603      	mov	r3, r0
  arm_rfft_fast_init_f32(&fft, 1024);
 80005bc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005c0:	a812      	add	r0, sp, #72	; 0x48
	volatile uint16_t* buffer_0 = malloc(8*8*1024*2);
 80005c2:	9306      	str	r3, [sp, #24]
  arm_rfft_fast_init_f32(&fft, 1024);
 80005c4:	f008 f898 	bl	80086f8 <arm_rfft_fast_init_f32>
		state[i] = 0;
 80005c8:	f44f 4282 	mov.w	r2, #16640	; 0x4100
 80005cc:	2100      	movs	r1, #0
 80005ce:	4620      	mov	r0, r4
 80005d0:	f00a fa5f 	bl	800aa92 <memset>
	arm_float_to_q15(coefficients, q_coefficients, 64);
 80005d4:	2240      	movs	r2, #64	; 0x40
 80005d6:	a9a0      	add	r1, sp, #640	; 0x280
 80005d8:	4819      	ldr	r0, [pc, #100]	; (8000640 <main+0xc8>)
 80005da:	f007 ff0f 	bl	80083fc <arm_float_to_q15>
	arm_fir_decimate_init_q15(&fir, 64, 8, q_coefficients, state, 1024);
 80005de:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80005e2:	aba0      	add	r3, sp, #640	; 0x280
 80005e4:	9400      	str	r4, [sp, #0]
 80005e6:	9201      	str	r2, [sp, #4]
 80005e8:	2140      	movs	r1, #64	; 0x40
 80005ea:	2208      	movs	r2, #8
 80005ec:	a80f      	add	r0, sp, #60	; 0x3c
 80005ee:	f008 fec3 	bl	8009378 <arm_fir_decimate_init_q15>
		oversampled[i] = (uint16_t*)(D1_DTCMRAM_BASE + 8*1024*2*i);
 80005f2:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80005f6:	4b13      	ldr	r3, [pc, #76]	; (8000644 <main+0xcc>)
			i_R[i][j] = count++;
 80005f8:	ac48      	add	r4, sp, #288	; 0x120
		oversampled[i] = (uint16_t*)(D1_DTCMRAM_BASE + 8*1024*2*i);
 80005fa:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
 80005fe:	a30a      	add	r3, pc, #40	; (adr r3, 8000628 <main+0xb0>)
 8000600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000604:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
 8000608:	a309      	add	r3, pc, #36	; (adr r3, 8000630 <main+0xb8>)
 800060a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800060e:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
 8000612:	a309      	add	r3, pc, #36	; (adr r3, 8000638 <main+0xc0>)
 8000614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000618:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
 800061c:	2200      	movs	r2, #0
		for (int j = i+1;  j < 8; j++) {
 800061e:	462b      	mov	r3, r5
 8000620:	4610      	mov	r0, r2
 8000622:	e012      	b.n	800064a <main+0xd2>
 8000624:	f3af 8000 	nop.w
 8000628:	20008000 	.word	0x20008000
 800062c:	2000c000 	.word	0x2000c000
 8000630:	20010000 	.word	0x20010000
 8000634:	20014000 	.word	0x20014000
 8000638:	20018000 	.word	0x20018000
 800063c:	2001c000 	.word	0x2001c000
 8000640:	24000000 	.word	0x24000000
 8000644:	20004000 	.word	0x20004000
 8000648:	3201      	adds	r2, #1
			i_R[i][j] = count++;
 800064a:	1821      	adds	r1, r4, r0
 800064c:	54ca      	strb	r2, [r1, r3]
		for (int j = i+1;  j < 8; j++) {
 800064e:	3301      	adds	r3, #1
 8000650:	2b08      	cmp	r3, #8
 8000652:	d1f9      	bne.n	8000648 <main+0xd0>
 8000654:	1c6b      	adds	r3, r5, #1
 8000656:	2d07      	cmp	r5, #7
 8000658:	ea4f 00c5 	mov.w	r0, r5, lsl #3
 800065c:	461d      	mov	r5, r3
 800065e:	d1f3      	bne.n	8000648 <main+0xd0>
	adc_parallel_dma_flag = 0;
 8000660:	4bb3      	ldr	r3, [pc, #716]	; (8000930 <main+0x3b8>)
 8000662:	2400      	movs	r4, #0
  CLEAR_BIT(TIM8->CR1, TIM_CR1_ARPE);
 8000664:	4ab3      	ldr	r2, [pc, #716]	; (8000934 <main+0x3bc>)
 8000666:	f50d 7a80 	add.w	sl, sp, #256	; 0x100
	adc_parallel_dma_flag = 0;
 800066a:	701c      	strb	r4, [r3, #0]
	tau[0] = tau_table_0;
 800066c:	ab68      	add	r3, sp, #416	; 0x1a0
 800066e:	48b2      	ldr	r0, [pc, #712]	; (8000938 <main+0x3c0>)
 8000670:	f50d 7b90 	add.w	fp, sp, #288	; 0x120
  CLEAR_BIT(TIM8->CR1, TIM_CR1_ARPE);
 8000674:	6811      	ldr	r1, [r2, #0]
	tau[0] = tau_table_0;
 8000676:	6018      	str	r0, [r3, #0]
	tau[1] = tau_table_1;
 8000678:	48b0      	ldr	r0, [pc, #704]	; (800093c <main+0x3c4>)
  CLEAR_BIT(TIM8->CR1, TIM_CR1_ARPE);
 800067a:	f021 0180 	bic.w	r1, r1, #128	; 0x80
	__HAL_TIM_ENABLE_DMA(&htim5, TIM_DMA_CC1);
 800067e:	4db0      	ldr	r5, [pc, #704]	; (8000940 <main+0x3c8>)
	tau[1] = tau_table_1;
 8000680:	6058      	str	r0, [r3, #4]
	tau[2] = tau_table_2;
 8000682:	48b0      	ldr	r0, [pc, #704]	; (8000944 <main+0x3cc>)
	htim5.hdma[TIM_DMA_ID_CC1]->XferCpltCallback = DMA_TIM8_callback;
 8000684:	4eb0      	ldr	r6, [pc, #704]	; (8000948 <main+0x3d0>)
	tau[2] = tau_table_2;
 8000686:	6098      	str	r0, [r3, #8]
	tau[3] = tau_table_3;
 8000688:	48b0      	ldr	r0, [pc, #704]	; (800094c <main+0x3d4>)
  		for (int32_t i = 0; i < 8*1024; i ++) {
 800068a:	4fb1      	ldr	r7, [pc, #708]	; (8000950 <main+0x3d8>)
	tau[3] = tau_table_3;
 800068c:	60d8      	str	r0, [r3, #12]
	tau[4] = tau_table_4;
 800068e:	48b1      	ldr	r0, [pc, #708]	; (8000954 <main+0x3dc>)
 8000690:	6118      	str	r0, [r3, #16]
	tau[5] = tau_table_5;
 8000692:	48b1      	ldr	r0, [pc, #708]	; (8000958 <main+0x3e0>)
 8000694:	6158      	str	r0, [r3, #20]
	tau[6] = tau_table_6;
 8000696:	48b1      	ldr	r0, [pc, #708]	; (800095c <main+0x3e4>)
 8000698:	6198      	str	r0, [r3, #24]
	tau[7] = tau_table_7;
 800069a:	48b1      	ldr	r0, [pc, #708]	; (8000960 <main+0x3e8>)
 800069c:	61d8      	str	r0, [r3, #28]
	tau[8] = tau_table_8;
 800069e:	48b1      	ldr	r0, [pc, #708]	; (8000964 <main+0x3ec>)
 80006a0:	6218      	str	r0, [r3, #32]
	tau[9] = tau_table_9;
 80006a2:	48b1      	ldr	r0, [pc, #708]	; (8000968 <main+0x3f0>)
 80006a4:	6258      	str	r0, [r3, #36]	; 0x24
	tau[10] = tau_table_10;
 80006a6:	48b1      	ldr	r0, [pc, #708]	; (800096c <main+0x3f4>)
 80006a8:	6298      	str	r0, [r3, #40]	; 0x28
	tau[11] = tau_table_11;
 80006aa:	48b1      	ldr	r0, [pc, #708]	; (8000970 <main+0x3f8>)
 80006ac:	62d8      	str	r0, [r3, #44]	; 0x2c
	tau[12] = tau_table_12;
 80006ae:	48b1      	ldr	r0, [pc, #708]	; (8000974 <main+0x3fc>)
 80006b0:	6318      	str	r0, [r3, #48]	; 0x30
	tau[13] = tau_table_13;
 80006b2:	48b1      	ldr	r0, [pc, #708]	; (8000978 <main+0x400>)
 80006b4:	6358      	str	r0, [r3, #52]	; 0x34
	tau[14] = tau_table_14;
 80006b6:	48b1      	ldr	r0, [pc, #708]	; (800097c <main+0x404>)
 80006b8:	6398      	str	r0, [r3, #56]	; 0x38
	tau[15] = tau_table_15;
 80006ba:	48b1      	ldr	r0, [pc, #708]	; (8000980 <main+0x408>)
 80006bc:	63d8      	str	r0, [r3, #60]	; 0x3c
	tau[16] = tau_table_16;
 80006be:	48b1      	ldr	r0, [pc, #708]	; (8000984 <main+0x40c>)
 80006c0:	6418      	str	r0, [r3, #64]	; 0x40
	tau[17] = tau_table_17;
 80006c2:	48b1      	ldr	r0, [pc, #708]	; (8000988 <main+0x410>)
 80006c4:	6458      	str	r0, [r3, #68]	; 0x44
	tau[18] = tau_table_18;
 80006c6:	48b1      	ldr	r0, [pc, #708]	; (800098c <main+0x414>)
 80006c8:	6498      	str	r0, [r3, #72]	; 0x48
	tau[19] = tau_table_19;
 80006ca:	48b1      	ldr	r0, [pc, #708]	; (8000990 <main+0x418>)
 80006cc:	64d8      	str	r0, [r3, #76]	; 0x4c
	tau[20] = tau_table_20;
 80006ce:	48b1      	ldr	r0, [pc, #708]	; (8000994 <main+0x41c>)
 80006d0:	6518      	str	r0, [r3, #80]	; 0x50
	tau[21] = tau_table_21;
 80006d2:	48b1      	ldr	r0, [pc, #708]	; (8000998 <main+0x420>)
 80006d4:	6558      	str	r0, [r3, #84]	; 0x54
	tau[22] = tau_table_22;
 80006d6:	48b1      	ldr	r0, [pc, #708]	; (800099c <main+0x424>)
 80006d8:	6598      	str	r0, [r3, #88]	; 0x58
	tau[23] = tau_table_23;
 80006da:	48b1      	ldr	r0, [pc, #708]	; (80009a0 <main+0x428>)
 80006dc:	65d8      	str	r0, [r3, #92]	; 0x5c
	tau[24] = tau_table_24;
 80006de:	48b1      	ldr	r0, [pc, #708]	; (80009a4 <main+0x42c>)
 80006e0:	6618      	str	r0, [r3, #96]	; 0x60
	tau[25] = tau_table_25;
 80006e2:	48b1      	ldr	r0, [pc, #708]	; (80009a8 <main+0x430>)
 80006e4:	6658      	str	r0, [r3, #100]	; 0x64
	tau[26] = tau_table_26;
 80006e6:	48b1      	ldr	r0, [pc, #708]	; (80009ac <main+0x434>)
 80006e8:	6698      	str	r0, [r3, #104]	; 0x68
	tau[27] = tau_table_27;
 80006ea:	48b1      	ldr	r0, [pc, #708]	; (80009b0 <main+0x438>)
 80006ec:	66d8      	str	r0, [r3, #108]	; 0x6c
	TIM8->ARR = 53; //27
 80006ee:	2335      	movs	r3, #53	; 0x35
  CLEAR_BIT(TIM8->CR1, TIM_CR1_ARPE);
 80006f0:	6011      	str	r1, [r2, #0]
	HAL_GPIO_WritePin(ADC_RESET_GPIO_Port, ADC_RESET_Pin, GPIO_PIN_SET);
 80006f2:	f44f 7100 	mov.w	r1, #512	; 0x200
	TIM8->ARR = 53; //27
 80006f6:	62d3      	str	r3, [r2, #44]	; 0x2c
	TIM8->CCR1 = 40; //14
 80006f8:	2328      	movs	r3, #40	; 0x28
	HAL_GPIO_WritePin(ADC_RESET_GPIO_Port, ADC_RESET_Pin, GPIO_PIN_SET);
 80006fa:	48ae      	ldr	r0, [pc, #696]	; (80009b4 <main+0x43c>)
	TIM8->CCR1 = 40; //14
 80006fc:	6353      	str	r3, [r2, #52]	; 0x34
	TIM8->RCR = 7;
 80006fe:	2307      	movs	r3, #7
 8000700:	6313      	str	r3, [r2, #48]	; 0x30
	SET_BIT(TIM8->CR1, TIM_CR1_ARPE);
 8000702:	6813      	ldr	r3, [r2, #0]
 8000704:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000708:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(ADC_RESET_GPIO_Port, ADC_RESET_Pin, GPIO_PIN_SET);
 800070a:	2201      	movs	r2, #1
 800070c:	f002 fada 	bl	8002cc4 <HAL_GPIO_WritePin>
	HAL_Delay(1); // > 3 us
 8000710:	2001      	movs	r0, #1
 8000712:	f001 f8d7 	bl	80018c4 <HAL_Delay>
	HAL_GPIO_WritePin(ADC_RESET_GPIO_Port, ADC_RESET_Pin, GPIO_PIN_RESET);
 8000716:	4622      	mov	r2, r4
 8000718:	f44f 7100 	mov.w	r1, #512	; 0x200
 800071c:	48a5      	ldr	r0, [pc, #660]	; (80009b4 <main+0x43c>)
 800071e:	f002 fad1 	bl	8002cc4 <HAL_GPIO_WritePin>
	HAL_Delay(1); // > 253 us
 8000722:	2001      	movs	r0, #1
 8000724:	f001 f8ce 	bl	80018c4 <HAL_Delay>
	RCC->AHB4ENR |= RCC_AHB4ENR_GPIODEN;
 8000728:	4aa3      	ldr	r2, [pc, #652]	; (80009b8 <main+0x440>)
	WRITE_REG(GPIOD->MODER, 0x00000000UL);
 800072a:	49a4      	ldr	r1, [pc, #656]	; (80009bc <main+0x444>)
	RCC->AHB4ENR |= RCC_AHB4ENR_GPIODEN;
 800072c:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
	htim5.hdma[TIM_DMA_ID_CC1]->XferCpltCallback = DMA_TIM8_callback;
 8000730:	6a68      	ldr	r0, [r5, #36]	; 0x24
	RCC->AHB4ENR |= RCC_AHB4ENR_GPIODEN;
 8000732:	f043 0308 	orr.w	r3, r3, #8
 8000736:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	HAL_DMA_Start_IT(htim5.hdma[TIM_DMA_ID_CC1], (uint32_t)&GPIOD->IDR + 0, (uint32_t)buffer_0, 1024*8*8-1);
 800073a:	f64f 73ff 	movw	r3, #65535	; 0xffff
	WRITE_REG(GPIOD->MODER, 0x00000000UL);
 800073e:	600c      	str	r4, [r1, #0]
	__HAL_TIM_ENABLE_DMA(&htim5, TIM_DMA_CC1);
 8000740:	6829      	ldr	r1, [r5, #0]
 8000742:	68ca      	ldr	r2, [r1, #12]
 8000744:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000748:	60ca      	str	r2, [r1, #12]
	htim5.hdma[TIM_DMA_ID_CC1]->XferCpltCallback = DMA_TIM8_callback;
 800074a:	63c6      	str	r6, [r0, #60]	; 0x3c
	HAL_DMA_Start_IT(htim5.hdma[TIM_DMA_ID_CC1], (uint32_t)&GPIOD->IDR + 0, (uint32_t)buffer_0, 1024*8*8-1);
 800074c:	9e06      	ldr	r6, [sp, #24]
 800074e:	499c      	ldr	r1, [pc, #624]	; (80009c0 <main+0x448>)
 8000750:	4632      	mov	r2, r6
 8000752:	f001 fca9 	bl	80020a8 <HAL_DMA_Start_IT>
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8000756:	4621      	mov	r1, r4
 8000758:	4628      	mov	r0, r5
 800075a:	f005 f8ff 	bl	800595c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 800075e:	4621      	mov	r1, r4
 8000760:	4898      	ldr	r0, [pc, #608]	; (80009c4 <main+0x44c>)
 8000762:	f005 f8fb 	bl	800595c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000766:	4621      	mov	r1, r4
 8000768:	4897      	ldr	r0, [pc, #604]	; (80009c8 <main+0x450>)
 800076a:	f005 f8f7 	bl	800595c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800076e:	4621      	mov	r1, r4
 8000770:	4896      	ldr	r0, [pc, #600]	; (80009cc <main+0x454>)
 8000772:	f005 f8f3 	bl	800595c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000776:	4621      	mov	r1, r4
 8000778:	4895      	ldr	r0, [pc, #596]	; (80009d0 <main+0x458>)
 800077a:	f005 f8ef 	bl	800595c <HAL_TIM_PWM_Start>
 800077e:	1cb2      	adds	r2, r6, #2
 8000780:	4633      	mov	r3, r6
 8000782:	9207      	str	r2, [sp, #28]
 8000784:	1d32      	adds	r2, r6, #4
 8000786:	330e      	adds	r3, #14
 8000788:	9208      	str	r2, [sp, #32]
 800078a:	1db2      	adds	r2, r6, #6
 800078c:	930d      	str	r3, [sp, #52]	; 0x34
 800078e:	9209      	str	r2, [sp, #36]	; 0x24
 8000790:	f106 0208 	add.w	r2, r6, #8
 8000794:	920a      	str	r2, [sp, #40]	; 0x28
 8000796:	f106 020a 	add.w	r2, r6, #10
				decimated[i] = (q15_t*)(D3_SRAM_BASE + 1024*2*i);
 800079a:	ed9f cb5b 	vldr	d12, [pc, #364]	; 8000908 <main+0x390>
 800079e:	ed9f bb5c 	vldr	d11, [pc, #368]	; 8000910 <main+0x398>
				x[i] = (float32_t*)(D1_DTCMRAM_BASE + 1024*4*i);
 80007a2:	ed9f ab5d 	vldr	d10, [pc, #372]	; 8000918 <main+0x3a0>
 80007a6:	ed9f 9b5e 	vldr	d9, [pc, #376]	; 8000920 <main+0x3a8>
				abs_X[i] = (float32_t*)(D1_DTCMRAM_BASE + 0x0001C000 + 512*4*i);
 80007aa:	ed9f 8b5f 	vldr	d8, [pc, #380]	; 8000928 <main+0x3b0>
 80007ae:	920b      	str	r2, [sp, #44]	; 0x2c
 80007b0:	f106 020c 	add.w	r2, r6, #12
 80007b4:	920c      	str	r2, [sp, #48]	; 0x30
  	if (adc_parallel_dma_flag == 1) {
 80007b6:	4b5e      	ldr	r3, [pc, #376]	; (8000930 <main+0x3b8>)
 80007b8:	781b      	ldrb	r3, [r3, #0]
 80007ba:	2b01      	cmp	r3, #1
 80007bc:	d1fb      	bne.n	80007b6 <main+0x23e>
 80007be:	9b06      	ldr	r3, [sp, #24]
 80007c0:	f04f 5400 	mov.w	r4, #536870912	; 0x20000000
  		for (int32_t i = 0; i < 8*1024; i ++) {
 80007c4:	4983      	ldr	r1, [pc, #524]	; (80009d4 <main+0x45c>)
  			oversampled[0][i] = buffer_0[i*8 + 0];
 80007c6:	f833 2b10 	ldrh.w	r2, [r3], #16
 80007ca:	f824 2b02 	strh.w	r2, [r4], #2
  		for (int32_t i = 0; i < 8*1024; i ++) {
 80007ce:	428c      	cmp	r4, r1
 80007d0:	d1f9      	bne.n	80007c6 <main+0x24e>
 80007d2:	9b07      	ldr	r3, [sp, #28]
  		for (int32_t i = 0; i < 8*1024; i ++) {
 80007d4:	4980      	ldr	r1, [pc, #512]	; (80009d8 <main+0x460>)
				oversampled[1][i] = buffer_0[i*8 + 1];
 80007d6:	f833 2b10 	ldrh.w	r2, [r3], #16
 80007da:	f824 2b02 	strh.w	r2, [r4], #2
  		for (int32_t i = 0; i < 8*1024; i ++) {
 80007de:	428c      	cmp	r4, r1
 80007e0:	d1f9      	bne.n	80007d6 <main+0x25e>
 80007e2:	9b08      	ldr	r3, [sp, #32]
  		for (int32_t i = 0; i < 8*1024; i ++) {
 80007e4:	497d      	ldr	r1, [pc, #500]	; (80009dc <main+0x464>)
				oversampled[2][i] = buffer_0[i*8 + 2];
 80007e6:	f833 2b10 	ldrh.w	r2, [r3], #16
 80007ea:	f824 2b02 	strh.w	r2, [r4], #2
  		for (int32_t i = 0; i < 8*1024; i ++) {
 80007ee:	428c      	cmp	r4, r1
 80007f0:	d1f9      	bne.n	80007e6 <main+0x26e>
 80007f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
  		for (int32_t i = 0; i < 8*1024; i ++) {
 80007f4:	497a      	ldr	r1, [pc, #488]	; (80009e0 <main+0x468>)
				oversampled[3][i] = buffer_0[i*8 + 3];
 80007f6:	f833 2b10 	ldrh.w	r2, [r3], #16
 80007fa:	f824 2b02 	strh.w	r2, [r4], #2
  		for (int32_t i = 0; i < 8*1024; i ++) {
 80007fe:	428c      	cmp	r4, r1
 8000800:	d1f9      	bne.n	80007f6 <main+0x27e>
 8000802:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  		for (int32_t i = 0; i < 8*1024; i ++) {
 8000804:	4977      	ldr	r1, [pc, #476]	; (80009e4 <main+0x46c>)
				oversampled[4][i] = buffer_0[i*8 + 4];
 8000806:	f833 2b10 	ldrh.w	r2, [r3], #16
 800080a:	f824 2b02 	strh.w	r2, [r4], #2
  		for (int32_t i = 0; i < 8*1024; i ++) {
 800080e:	428c      	cmp	r4, r1
 8000810:	d1f9      	bne.n	8000806 <main+0x28e>
 8000812:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  		for (int32_t i = 0; i < 8*1024; i ++) {
 8000814:	4974      	ldr	r1, [pc, #464]	; (80009e8 <main+0x470>)
				oversampled[5][i] = buffer_0[i*8 + 5];
 8000816:	f833 2b10 	ldrh.w	r2, [r3], #16
 800081a:	f824 2b02 	strh.w	r2, [r4], #2
  		for (int32_t i = 0; i < 8*1024; i ++) {
 800081e:	428c      	cmp	r4, r1
 8000820:	d1f9      	bne.n	8000816 <main+0x29e>
 8000822:	9b0c      	ldr	r3, [sp, #48]	; 0x30
				oversampled[6][i] = buffer_0[i*8 + 6];
 8000824:	f833 2b10 	ldrh.w	r2, [r3], #16
 8000828:	f824 2b02 	strh.w	r2, [r4], #2
  		for (int32_t i = 0; i < 8*1024; i ++) {
 800082c:	42bc      	cmp	r4, r7
 800082e:	d1f9      	bne.n	8000824 <main+0x2ac>
 8000830:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8000832:	4623      	mov	r3, r4
  		for (int32_t i = 0; i < 8*1024; i ++) {
 8000834:	486d      	ldr	r0, [pc, #436]	; (80009ec <main+0x474>)
				oversampled[7][i] = buffer_0[i*8 + 7];
 8000836:	f832 1b10 	ldrh.w	r1, [r2], #16
 800083a:	f823 1b02 	strh.w	r1, [r3], #2
  		for (int32_t i = 0; i < 8*1024; i ++) {
 800083e:	4283      	cmp	r3, r0
 8000840:	d1f9      	bne.n	8000836 <main+0x2be>
				decimated[i] = (q15_t*)(D3_SRAM_BASE + 1024*2*i);
 8000842:	ae1f      	add	r6, sp, #124	; 0x7c
 8000844:	f04f 5260 	mov.w	r2, #939524096	; 0x38000000
 8000848:	4b69      	ldr	r3, [pc, #420]	; (80009f0 <main+0x478>)
 800084a:	ad17      	add	r5, sp, #92	; 0x5c
 800084c:	46b1      	mov	r9, r6
 800084e:	46b0      	mov	r8, r6
 8000850:	e9cd 2320 	strd	r2, r3, [sp, #128]	; 0x80
 8000854:	4a67      	ldr	r2, [pc, #412]	; (80009f4 <main+0x47c>)
 8000856:	f04f 2338 	mov.w	r3, #939538432	; 0x38003800
 800085a:	ed8d cb22 	vstr	d12, [sp, #136]	; 0x88
 800085e:	ed8d bb24 	vstr	d11, [sp, #144]	; 0x90
 8000862:	e9cd 2326 	strd	r2, r3, [sp, #152]	; 0x98
				arm_fir_decimate_q15(&fir, (q15_t*)oversampled[i], decimated[i], 8192);
 8000866:	f855 1f04 	ldr.w	r1, [r5, #4]!
 800086a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800086e:	f858 2f04 	ldr.w	r2, [r8, #4]!
 8000872:	a80f      	add	r0, sp, #60	; 0x3c
 8000874:	f008 fc0c 	bl	8009090 <arm_fir_decimate_q15>
			for (int8_t i = 0; i < 8; i ++)
 8000878:	45a9      	cmp	r9, r5
 800087a:	d1f4      	bne.n	8000866 <main+0x2ee>
				x[i] = (float32_t*)(D1_DTCMRAM_BASE + 1024*4*i);
 800087c:	ad27      	add	r5, sp, #156	; 0x9c
 800087e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000882:	4b5d      	ldr	r3, [pc, #372]	; (80009f8 <main+0x480>)
 8000884:	46a9      	mov	r9, r5
 8000886:	46a8      	mov	r8, r5
 8000888:	e9cd 2328 	strd	r2, r3, [sp, #160]	; 0xa0
 800088c:	f04f 2220 	mov.w	r2, #536879104	; 0x20002000
 8000890:	4b5a      	ldr	r3, [pc, #360]	; (80009fc <main+0x484>)
 8000892:	ed8d ab2c 	vstr	d10, [sp, #176]	; 0xb0
 8000896:	ed8d 9b2e 	vstr	d9, [sp, #184]	; 0xb8
 800089a:	e9cd 232a 	strd	r2, r3, [sp, #168]	; 0xa8
				arm_q15_to_float(decimated[i], x[i], 1024);
 800089e:	f856 0f04 	ldr.w	r0, [r6, #4]!
 80008a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80008a6:	f858 1f04 	ldr.w	r1, [r8, #4]!
 80008aa:	f007 fd3f 	bl	800832c <arm_q15_to_float>
			for (int8_t i = 0; i < 8; i ++)
 80008ae:	454e      	cmp	r6, r9
 80008b0:	d1f5      	bne.n	800089e <main+0x326>
			char header[3] = "\r\nH\r\n";
 80008b2:	4b53      	ldr	r3, [pc, #332]	; (8000a00 <main+0x488>)
 80008b4:	aa0e      	add	r2, sp, #56	; 0x38
			char str[64] = "";
 80008b6:	2100      	movs	r1, #0
 80008b8:	a859      	add	r0, sp, #356	; 0x164
			char header[3] = "\r\nH\r\n";
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	f10d 08bc 	add.w	r8, sp, #188	; 0xbc
 80008c0:	8013      	strh	r3, [r2, #0]
 80008c2:	0c1b      	lsrs	r3, r3, #16
 80008c4:	f10d 023a 	add.w	r2, sp, #58	; 0x3a
 80008c8:	46c1      	mov	r9, r8
 80008ca:	7013      	strb	r3, [r2, #0]
			char str[64] = "";
 80008cc:	223c      	movs	r2, #60	; 0x3c
 80008ce:	ab58      	add	r3, sp, #352	; 0x160
 80008d0:	6019      	str	r1, [r3, #0]
 80008d2:	f00a f8de 	bl	800aa92 <memset>
				X[i] = (float32_t*)(D1_ITCMRAM_BASE + 0x00000000 + 512*4*2*i);
 80008d6:	2200      	movs	r2, #0
 80008d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008dc:	4646      	mov	r6, r8
 80008de:	e9cd 2330 	strd	r2, r3, [sp, #192]	; 0xc0
 80008e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008e6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80008ea:	e9cd 2332 	strd	r2, r3, [sp, #200]	; 0xc8
 80008ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80008f2:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 80008f6:	e9cd 2334 	strd	r2, r3, [sp, #208]	; 0xd0
 80008fa:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 80008fe:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000902:	e9cd 2336 	strd	r2, r3, [sp, #216]	; 0xd8
 8000906:	e07d      	b.n	8000a04 <main+0x48c>
 8000908:	38001000 	.word	0x38001000
 800090c:	38001800 	.word	0x38001800
 8000910:	38002000 	.word	0x38002000
 8000914:	38002800 	.word	0x38002800
 8000918:	20004000 	.word	0x20004000
 800091c:	20005000 	.word	0x20005000
 8000920:	20006000 	.word	0x20006000
 8000924:	20007000 	.word	0x20007000
 8000928:	2001c000 	.word	0x2001c000
 800092c:	2001c800 	.word	0x2001c800
 8000930:	2400680c 	.word	0x2400680c
 8000934:	40010400 	.word	0x40010400
 8000938:	30006e2c 	.word	0x30006e2c
 800093c:	30006428 	.word	0x30006428
 8000940:	24006970 	.word	0x24006970
 8000944:	30005a24 	.word	0x30005a24
 8000948:	0800046d 	.word	0x0800046d
 800094c:	30005020 	.word	0x30005020
 8000950:	2001c000 	.word	0x2001c000
 8000954:	3000461c 	.word	0x3000461c
 8000958:	30003c18 	.word	0x30003c18
 800095c:	30003214 	.word	0x30003214
 8000960:	30002810 	.word	0x30002810
 8000964:	30001e0c 	.word	0x30001e0c
 8000968:	30001408 	.word	0x30001408
 800096c:	30000a04 	.word	0x30000a04
 8000970:	30000000 	.word	0x30000000
 8000974:	38003214 	.word	0x38003214
 8000978:	38002810 	.word	0x38002810
 800097c:	38001e0c 	.word	0x38001e0c
 8000980:	38001408 	.word	0x38001408
 8000984:	38000a04 	.word	0x38000a04
 8000988:	38000000 	.word	0x38000000
 800098c:	24000108 	.word	0x24000108
 8000990:	24000b0c 	.word	0x24000b0c
 8000994:	24001510 	.word	0x24001510
 8000998:	24001f14 	.word	0x24001f14
 800099c:	24002918 	.word	0x24002918
 80009a0:	2400331c 	.word	0x2400331c
 80009a4:	24003d20 	.word	0x24003d20
 80009a8:	24004724 	.word	0x24004724
 80009ac:	24005128 	.word	0x24005128
 80009b0:	24005b2c 	.word	0x24005b2c
 80009b4:	58020800 	.word	0x58020800
 80009b8:	58024400 	.word	0x58024400
 80009bc:	58020c00 	.word	0x58020c00
 80009c0:	58020c10 	.word	0x58020c10
 80009c4:	240069bc 	.word	0x240069bc
 80009c8:	240068d8 	.word	0x240068d8
 80009cc:	24006924 	.word	0x24006924
 80009d0:	2400688c 	.word	0x2400688c
 80009d4:	20004000 	.word	0x20004000
 80009d8:	20008000 	.word	0x20008000
 80009dc:	2000c000 	.word	0x2000c000
 80009e0:	20010000 	.word	0x20010000
 80009e4:	20014000 	.word	0x20014000
 80009e8:	20018000 	.word	0x20018000
 80009ec:	20020000 	.word	0x20020000
 80009f0:	38000800 	.word	0x38000800
 80009f4:	38003000 	.word	0x38003000
 80009f8:	20001000 	.word	0x20001000
 80009fc:	20003000 	.word	0x20003000
 8000a00:	0800ca6c 	.word	0x0800ca6c
				arm_rfft_fast_f32(&fft, x[i], X[i], 0);
 8000a04:	f855 1f04 	ldr.w	r1, [r5, #4]!
 8000a08:	2300      	movs	r3, #0
 8000a0a:	f856 2f04 	ldr.w	r2, [r6, #4]!
 8000a0e:	a812      	add	r0, sp, #72	; 0x48
 8000a10:	f007 ff58 	bl	80088c4 <arm_rfft_fast_f32>
			for (int i = 0; i < 8; i++)
 8000a14:	454d      	cmp	r5, r9
 8000a16:	d1f5      	bne.n	8000a04 <main+0x48c>
				abs_X[i] = (float32_t*)(D1_DTCMRAM_BASE + 0x0001C000 + 512*4*i);
 8000a18:	ae37      	add	r6, sp, #220	; 0xdc
 8000a1a:	4645      	mov	r5, r8
 8000a1c:	a36b      	add	r3, pc, #428	; (adr r3, 8000bcc <main+0x654>)
 8000a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a22:	46b1      	mov	r9, r6
 8000a24:	e9cd 233a 	strd	r2, r3, [sp, #232]	; 0xe8
 8000a28:	a36a      	add	r3, pc, #424	; (adr r3, 8000bd4 <main+0x65c>)
 8000a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a2e:	ed8d 8b38 	vstr	d8, [sp, #224]	; 0xe0
 8000a32:	e9cd 233c 	strd	r2, r3, [sp, #240]	; 0xf0
 8000a36:	a369      	add	r3, pc, #420	; (adr r3, 8000bdc <main+0x664>)
 8000a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a3c:	e9cd 233e 	strd	r2, r3, [sp, #248]	; 0xf8
				arm_cmplx_mag_f32(X[i], abs_X[i], 512);
 8000a40:	f855 0f04 	ldr.w	r0, [r5, #4]!
 8000a44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a48:	f856 1f04 	ldr.w	r1, [r6, #4]!
 8000a4c:	f008 fd7e 	bl	800954c <arm_cmplx_mag_f32>
			for (int i = 0; i < 8; i++) {
 8000a50:	454d      	cmp	r5, r9
 8000a52:	d1f5      	bne.n	8000a40 <main+0x4c8>
			CDC_Transmit_HS((uint8_t*)header, strlen(header));
 8000a54:	a80e      	add	r0, sp, #56	; 0x38
				sprintf(str, "%f,", abs_X[0][i]);
 8000a56:	4e5a      	ldr	r6, [pc, #360]	; (8000bc0 <main+0x648>)
			CDC_Transmit_HS((uint8_t*)header, strlen(header));
 8000a58:	f7ff fcaa 	bl	80003b0 <strlen>
			for (int i = 0; i < 512; i++) {
 8000a5c:	4d59      	ldr	r5, [pc, #356]	; (8000bc4 <main+0x64c>)
			CDC_Transmit_HS((uint8_t*)header, strlen(header));
 8000a5e:	b281      	uxth	r1, r0
 8000a60:	a80e      	add	r0, sp, #56	; 0x38
 8000a62:	f007 f9df 	bl	8007e24 <CDC_Transmit_HS>
				sprintf(str, "%f,", abs_X[0][i]);
 8000a66:	ecf4 7a01 	vldmia	r4!, {s15}
 8000a6a:	4631      	mov	r1, r6
 8000a6c:	a858      	add	r0, sp, #352	; 0x160
 8000a6e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a72:	ec53 2b17 	vmov	r2, r3, d7
 8000a76:	f009 ffa9 	bl	800a9cc <siprintf>
				CDC_Transmit_HS((uint8_t*)str, strlen(str));
 8000a7a:	a858      	add	r0, sp, #352	; 0x160
 8000a7c:	f7ff fc98 	bl	80003b0 <strlen>
 8000a80:	b281      	uxth	r1, r0
 8000a82:	a858      	add	r0, sp, #352	; 0x160
 8000a84:	f007 f9ce 	bl	8007e24 <CDC_Transmit_HS>
				HAL_Delay(1);
 8000a88:	2001      	movs	r0, #1
 8000a8a:	f000 ff1b 	bl	80018c4 <HAL_Delay>
			for (int i = 0; i < 512; i++) {
 8000a8e:	42ac      	cmp	r4, r5
 8000a90:	d1e9      	bne.n	8000a66 <main+0x4ee>
				conj_X[i] = (float32_t*)(D1_ITCMRAM_BASE + 0x00008000 + 512*4*2*i);
 8000a92:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000a96:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 8000a9a:	f1aa 0404 	sub.w	r4, sl, #4
 8000a9e:	e9ca 2300 	strd	r2, r3, [sl]
 8000aa2:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 8000aa6:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8000aaa:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8000aae:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8000ab2:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8000ab6:	e9ca 2304 	strd	r2, r3, [sl, #16]
 8000aba:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8000abe:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000ac2:	e9ca 2306 	strd	r2, r3, [sl, #24]
				arm_cmplx_conj_f32(X[i], conj_X[i], 512);
 8000ac6:	f858 0f04 	ldr.w	r0, [r8, #4]!
 8000aca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ace:	f854 1f04 	ldr.w	r1, [r4, #4]!
 8000ad2:	f008 fe5f 	bl	8009794 <arm_cmplx_conj_f32>
			for (int i = 0; i < 8; i++) {
 8000ad6:	45c1      	cmp	r9, r8
 8000ad8:	d1f5      	bne.n	8000ac6 <main+0x54e>
 8000ada:	ab84      	add	r3, sp, #528	; 0x210
 8000adc:	aa83      	add	r2, sp, #524	; 0x20c
 8000ade:	f103 016c 	add.w	r1, r3, #108	; 0x6c
 8000ae2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
				R[i] = (float32_t*)(D1_DTCMRAM_BASE + 0x00000000 + 1024*4*i);
 8000ae6:	f842 3f04 	str.w	r3, [r2, #4]!
			for (int16_t i = 0; i < 28; i++)
 8000aea:	428a      	cmp	r2, r1
 8000aec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000af0:	d1f9      	bne.n	8000ae6 <main+0x56e>
					compute_gcc_phat(&fft, R[i_R[i][j]], X[i], X[j], abs_X[i], abs_X[j], conj_X[j]);
 8000af2:	a984      	add	r1, sp, #528	; 0x210
				for (int j = i+1;  j < 8; j++) {
 8000af4:	2301      	movs	r3, #1
 8000af6:	2200      	movs	r2, #0
 8000af8:	f8df c0c8 	ldr.w	ip, [pc, #200]	; 8000bc4 <main+0x64c>
					compute_gcc_phat(&fft, R[i_R[i][j]], X[i], X[j], abs_X[i], abs_X[j], conj_X[j]);
 8000afc:	9104      	str	r1, [sp, #16]
 8000afe:	f50d 6180 	add.w	r1, sp, #1024	; 0x400
				for (int j = i+1;  j < 8; j++) {
 8000b02:	461c      	mov	r4, r3
 8000b04:	4660      	mov	r0, ip
 8000b06:	9305      	str	r3, [sp, #20]
 8000b08:	f44f 4e10 	mov.w	lr, #36864	; 0x9000
 8000b0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
			for (int i = 0; i < 8; i++) {
 8000b10:	4615      	mov	r5, r2
 8000b12:	4690      	mov	r8, r2
					compute_gcc_phat(&fft, R[i_R[i][j]], X[i], X[j], abs_X[i], abs_X[j], conj_X[j]);
 8000b14:	f50d 7990 	add.w	r9, sp, #288	; 0x120
 8000b18:	f5a1 7650 	sub.w	r6, r1, #832	; 0x340
 8000b1c:	46bc      	mov	ip, r7
 8000b1e:	e00a      	b.n	8000b36 <main+0x5be>
 8000b20:	a938      	add	r1, sp, #224	; 0xe0
 8000b22:	f856 2025 	ldr.w	r2, [r6, r5, lsl #2]
 8000b26:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
 8000b2a:	f851 c025 	ldr.w	ip, [r1, r5, lsl #2]
 8000b2e:	f851 0024 	ldr.w	r0, [r1, r4, lsl #2]
 8000b32:	f85a e024 	ldr.w	lr, [sl, r4, lsl #2]
 8000b36:	eb09 0108 	add.w	r1, r9, r8
 8000b3a:	f8cd e008 	str.w	lr, [sp, #8]
 8000b3e:	5d09      	ldrb	r1, [r1, r4]
				for (int j = i+1;  j < 8; j++) {
 8000b40:	3401      	adds	r4, #1
					compute_gcc_phat(&fft, R[i_R[i][j]], X[i], X[j], abs_X[i], abs_X[j], conj_X[j]);
 8000b42:	e9cd c000 	strd	ip, r0, [sp]
 8000b46:	9804      	ldr	r0, [sp, #16]
 8000b48:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 8000b4c:	a812      	add	r0, sp, #72	; 0x48
 8000b4e:	f000 f84b 	bl	8000be8 <compute_gcc_phat>
				for (int j = i+1;  j < 8; j++) {
 8000b52:	2c08      	cmp	r4, #8
 8000b54:	d1e4      	bne.n	8000b20 <main+0x5a8>
 8000b56:	9b05      	ldr	r3, [sp, #20]
 8000b58:	1c5c      	adds	r4, r3, #1
 8000b5a:	2b07      	cmp	r3, #7
 8000b5c:	461d      	mov	r5, r3
 8000b5e:	ea4f 08c3 	mov.w	r8, r3, lsl #3
 8000b62:	9405      	str	r4, [sp, #20]
 8000b64:	d1dc      	bne.n	8000b20 <main+0x5a8>
			CDC_Transmit_HS((uint8_t*)header, strlen(header));
 8000b66:	a80e      	add	r0, sp, #56	; 0x38
			for (int g = 0; g < 2562; g++) {
 8000b68:	2400      	movs	r4, #0
				sprintf(str, "%f,", E);
 8000b6a:	4e15      	ldr	r6, [pc, #84]	; (8000bc0 <main+0x648>)
			for (int g = 0; g < 2562; g++) {
 8000b6c:	f640 2502 	movw	r5, #2562	; 0xa02
			CDC_Transmit_HS((uint8_t*)header, strlen(header));
 8000b70:	f7ff fc1e 	bl	80003b0 <strlen>
 8000b74:	b281      	uxth	r1, r0
 8000b76:	a80e      	add	r0, sp, #56	; 0x38
 8000b78:	f007 f954 	bl	8007e24 <CDC_Transmit_HS>
				E = compute_beam_energy(&fft, g, R, tau, i_R);
 8000b7c:	b2a1      	uxth	r1, r4
 8000b7e:	ab68      	add	r3, sp, #416	; 0x1a0
 8000b80:	aa84      	add	r2, sp, #528	; 0x210
 8000b82:	a812      	add	r0, sp, #72	; 0x48
 8000b84:	f8cd b000 	str.w	fp, [sp]
			for (int g = 0; g < 2562; g++) {
 8000b88:	3401      	adds	r4, #1
				E = compute_beam_energy(&fft, g, R, tau, i_R);
 8000b8a:	f000 f879 	bl	8000c80 <compute_beam_energy>
				sprintf(str, "%f,", E);
 8000b8e:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
 8000b92:	4631      	mov	r1, r6
 8000b94:	a858      	add	r0, sp, #352	; 0x160
 8000b96:	ec53 2b17 	vmov	r2, r3, d7
 8000b9a:	f009 ff17 	bl	800a9cc <siprintf>
				CDC_Transmit_HS((uint8_t*)str, strlen(str));
 8000b9e:	a858      	add	r0, sp, #352	; 0x160
 8000ba0:	f7ff fc06 	bl	80003b0 <strlen>
 8000ba4:	b281      	uxth	r1, r0
 8000ba6:	a858      	add	r0, sp, #352	; 0x160
 8000ba8:	f007 f93c 	bl	8007e24 <CDC_Transmit_HS>
				HAL_Delay(1);
 8000bac:	2001      	movs	r0, #1
 8000bae:	f000 fe89 	bl	80018c4 <HAL_Delay>
			for (int g = 0; g < 2562; g++) {
 8000bb2:	42ac      	cmp	r4, r5
 8000bb4:	d1e2      	bne.n	8000b7c <main+0x604>
			adc_parallel_dma_flag = 1;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	4a03      	ldr	r2, [pc, #12]	; (8000bc8 <main+0x650>)
 8000bba:	7013      	strb	r3, [r2, #0]
 8000bbc:	e5fb      	b.n	80007b6 <main+0x23e>
 8000bbe:	bf00      	nop
 8000bc0:	0800ca68 	.word	0x0800ca68
 8000bc4:	2001c800 	.word	0x2001c800
 8000bc8:	2400680c 	.word	0x2400680c
 8000bcc:	2001d000 	.word	0x2001d000
 8000bd0:	2001d800 	.word	0x2001d800
 8000bd4:	2001e000 	.word	0x2001e000
 8000bd8:	2001e800 	.word	0x2001e800
 8000bdc:	2001f000 	.word	0x2001f000
 8000be0:	2001f800 	.word	0x2001f800

08000be4 <Error_Handler>:
 8000be4:	b672      	cpsid	i
  while (1)
 8000be6:	e7fe      	b.n	8000be6 <Error_Handler+0x2>

08000be8 <compute_gcc_phat>:
		float32_t* X_0,
		float32_t* X_1,
		float32_t* abs_X_0,
		float32_t* abs_X_1,
		float32_t* conj_X_1
) {
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	4606      	mov	r6, r0
	float32_t* divisor = malloc(512*4);
 8000bee:	f44f 6000 	mov.w	r0, #2048	; 0x800
) {
 8000bf2:	4690      	mov	r8, r2
 8000bf4:	9d08      	ldr	r5, [sp, #32]
 8000bf6:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8000bfa:	460f      	mov	r7, r1
 8000bfc:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
	float32_t* divisor = malloc(512*4);
 8000c00:	f009 f93e 	bl	8009e80 <malloc>
 8000c04:	4604      	mov	r4, r0
	SET_TEST();
	arm_mult_f32(abs_X_0, abs_X_1, divisor, 512);
 8000c06:	4651      	mov	r1, sl
 8000c08:	4628      	mov	r0, r5
 8000c0a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c0e:	4622      	mov	r2, r4
 8000c10:	f008 fe1a 	bl	8009848 <arm_mult_f32>
	RESET_TEST();

	float32_t* mult_X = malloc(512*4*2);
 8000c14:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000c18:	f009 f932 	bl	8009e80 <malloc>
 8000c1c:	4605      	mov	r5, r0
	SET_TEST();
	arm_cmplx_mult_cmplx_f32(X_0, conj_X_1, mult_X, 512);
 8000c1e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c22:	4640      	mov	r0, r8
 8000c24:	462a      	mov	r2, r5
 8000c26:	4649      	mov	r1, r9
 8000c28:	f008 fbc6 	bl	80093b8 <arm_cmplx_mult_cmplx_f32>
	RESET_TEST();

	SET_TEST();
	float32_t* chi = malloc(512*4*2);
 8000c2c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000c30:	f009 f926 	bl	8009e80 <malloc>
 8000c34:	462a      	mov	r2, r5
 8000c36:	4680      	mov	r8, r0
	for (int i = 0; i < 2*512; i++) {
 8000c38:	2300      	movs	r3, #0
 8000c3a:	4686      	mov	lr, r0
		chi[i] = mult_X[i] / divisor[i/2];
 8000c3c:	ea4f 0c63 	mov.w	ip, r3, asr #1
 8000c40:	ecf2 6a01 	vldmia	r2!, {s13}
	for (int i = 0; i < 2*512; i++) {
 8000c44:	3301      	adds	r3, #1
		chi[i] = mult_X[i] / divisor[i/2];
 8000c46:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
	for (int i = 0; i < 2*512; i++) {
 8000c4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
		chi[i] = mult_X[i] / divisor[i/2];
 8000c4e:	ed9c 7a00 	vldr	s14, [ip]
 8000c52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c56:	ecee 7a01 	vstmia	lr!, {s15}
	for (int i = 0; i < 2*512; i++) {
 8000c5a:	d1ef      	bne.n	8000c3c <compute_gcc_phat+0x54>
	}
	RESET_TEST();

	SET_TEST();
	arm_rfft_fast_f32(fft, chi, R, 1);
 8000c5c:	463a      	mov	r2, r7
 8000c5e:	4641      	mov	r1, r8
 8000c60:	4630      	mov	r0, r6
 8000c62:	2301      	movs	r3, #1
 8000c64:	f007 fe2e 	bl	80088c4 <arm_rfft_fast_f32>
	RESET_TEST();

	free(divisor);
 8000c68:	4620      	mov	r0, r4
 8000c6a:	f009 f911 	bl	8009e90 <free>
	free(mult_X);
 8000c6e:	4628      	mov	r0, r5
 8000c70:	f009 f90e 	bl	8009e90 <free>
	free(chi);
 8000c74:	4640      	mov	r0, r8
}
 8000c76:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	free(chi);
 8000c7a:	f009 b909 	b.w	8009e90 <free>
 8000c7e:	bf00      	nop

08000c80 <compute_beam_energy>:
		arm_rfft_fast_instance_f32* fft,
		uint16_t g,
		float32_t** R,
		const volatile int8_t** tau,
		uint8_t i_R[8][8]
) {
 8000c80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c82:	9c05      	ldr	r4, [sp, #20]
	float32_t E = 0;
	for (int i = 0; i < 8; i++) {
 8000c84:	2000      	movs	r0, #0
	float32_t E = 0;
 8000c86:	ed9f 0a8c 	vldr	s0, [pc, #560]	; 8000eb8 <compute_beam_energy+0x238>
 8000c8a:	4625      	mov	r5, r4
				];
			} else {
				E += R[
				  i_R[j][i]
				][
					(((uint16_t)tau[ i_R[j][i] ][g] ^ 0xFFFF) + 0x0001) & 0x03FF
 8000c8c:	46a6      	mov	lr, r4
			if (i == j) continue;
 8000c8e:	2800      	cmp	r0, #0
 8000c90:	f000 8099 	beq.w	8000dc6 <compute_beam_energy+0x146>
				E += R[
 8000c94:	f89e 6000 	ldrb.w	r6, [lr]
			if (i == j) continue;
 8000c98:	2801      	cmp	r0, #1
					(((uint16_t)tau[ i_R[j][i] ][g] ^ 0xFFFF) + 0x0001) & 0x03FF
 8000c9a:	f853 7026 	ldr.w	r7, [r3, r6, lsl #2]
				][
 8000c9e:	f852 6026 	ldr.w	r6, [r2, r6, lsl #2]
					(((uint16_t)tau[ i_R[j][i] ][g] ^ 0xFFFF) + 0x0001) & 0x03FF
 8000ca2:	f817 c001 	ldrb.w	ip, [r7, r1]
 8000ca6:	fa4f fc8c 	sxtb.w	ip, ip
 8000caa:	f1cc 0c00 	rsb	ip, ip, #0
 8000cae:	f3cc 0c09 	ubfx	ip, ip, #0, #10
				][
 8000cb2:	eb06 068c 	add.w	r6, r6, ip, lsl #2
				E += R[
 8000cb6:	edd6 7a00 	vldr	s15, [r6]
 8000cba:	ee30 0a27 	vadd.f32	s0, s0, s15
			if (i == j) continue;
 8000cbe:	f000 8092 	beq.w	8000de6 <compute_beam_energy+0x166>
				E += R[
 8000cc2:	f89e 6008 	ldrb.w	r6, [lr, #8]
			if (i == j) continue;
 8000cc6:	2802      	cmp	r0, #2
					(((uint16_t)tau[ i_R[j][i] ][g] ^ 0xFFFF) + 0x0001) & 0x03FF
 8000cc8:	f853 7026 	ldr.w	r7, [r3, r6, lsl #2]
				][
 8000ccc:	f852 6026 	ldr.w	r6, [r2, r6, lsl #2]
					(((uint16_t)tau[ i_R[j][i] ][g] ^ 0xFFFF) + 0x0001) & 0x03FF
 8000cd0:	f817 c001 	ldrb.w	ip, [r7, r1]
 8000cd4:	fa4f fc8c 	sxtb.w	ip, ip
 8000cd8:	f1cc 0c00 	rsb	ip, ip, #0
 8000cdc:	f3cc 0c09 	ubfx	ip, ip, #0, #10
				][
 8000ce0:	eb06 068c 	add.w	r6, r6, ip, lsl #2
				E += R[
 8000ce4:	edd6 7a00 	vldr	s15, [r6]
 8000ce8:	ee30 0a27 	vadd.f32	s0, s0, s15
			if (i == j) continue;
 8000cec:	f000 808b 	beq.w	8000e06 <compute_beam_energy+0x186>
				E += R[
 8000cf0:	f89e 6010 	ldrb.w	r6, [lr, #16]
			if (i == j) continue;
 8000cf4:	2803      	cmp	r0, #3
					(((uint16_t)tau[ i_R[j][i] ][g] ^ 0xFFFF) + 0x0001) & 0x03FF
 8000cf6:	f853 7026 	ldr.w	r7, [r3, r6, lsl #2]
				][
 8000cfa:	f852 6026 	ldr.w	r6, [r2, r6, lsl #2]
					(((uint16_t)tau[ i_R[j][i] ][g] ^ 0xFFFF) + 0x0001) & 0x03FF
 8000cfe:	f817 c001 	ldrb.w	ip, [r7, r1]
 8000d02:	fa4f fc8c 	sxtb.w	ip, ip
 8000d06:	f1cc 0c00 	rsb	ip, ip, #0
 8000d0a:	f3cc 0c09 	ubfx	ip, ip, #0, #10
				][
 8000d0e:	eb06 068c 	add.w	r6, r6, ip, lsl #2
				E += R[
 8000d12:	edd6 7a00 	vldr	s15, [r6]
 8000d16:	ee30 0a27 	vadd.f32	s0, s0, s15
			if (i == j) continue;
 8000d1a:	f000 8084 	beq.w	8000e26 <compute_beam_energy+0x1a6>
				E += R[
 8000d1e:	f89e 6018 	ldrb.w	r6, [lr, #24]
			if (i == j) continue;
 8000d22:	2804      	cmp	r0, #4
					(((uint16_t)tau[ i_R[j][i] ][g] ^ 0xFFFF) + 0x0001) & 0x03FF
 8000d24:	f853 7026 	ldr.w	r7, [r3, r6, lsl #2]
				][
 8000d28:	f852 6026 	ldr.w	r6, [r2, r6, lsl #2]
					(((uint16_t)tau[ i_R[j][i] ][g] ^ 0xFFFF) + 0x0001) & 0x03FF
 8000d2c:	f817 c001 	ldrb.w	ip, [r7, r1]
 8000d30:	fa4f fc8c 	sxtb.w	ip, ip
 8000d34:	f1cc 0c00 	rsb	ip, ip, #0
 8000d38:	f3cc 0c09 	ubfx	ip, ip, #0, #10
				][
 8000d3c:	eb06 068c 	add.w	r6, r6, ip, lsl #2
				E += R[
 8000d40:	edd6 7a00 	vldr	s15, [r6]
 8000d44:	ee30 0a27 	vadd.f32	s0, s0, s15
			if (i == j) continue;
 8000d48:	d07d      	beq.n	8000e46 <compute_beam_energy+0x1c6>
				E += R[
 8000d4a:	f89e 6020 	ldrb.w	r6, [lr, #32]
			if (i == j) continue;
 8000d4e:	2805      	cmp	r0, #5
					(((uint16_t)tau[ i_R[j][i] ][g] ^ 0xFFFF) + 0x0001) & 0x03FF
 8000d50:	f853 7026 	ldr.w	r7, [r3, r6, lsl #2]
				][
 8000d54:	f852 6026 	ldr.w	r6, [r2, r6, lsl #2]
					(((uint16_t)tau[ i_R[j][i] ][g] ^ 0xFFFF) + 0x0001) & 0x03FF
 8000d58:	f817 c001 	ldrb.w	ip, [r7, r1]
 8000d5c:	fa4f fc8c 	sxtb.w	ip, ip
 8000d60:	f1cc 0c00 	rsb	ip, ip, #0
 8000d64:	f3cc 0c09 	ubfx	ip, ip, #0, #10
				][
 8000d68:	eb06 068c 	add.w	r6, r6, ip, lsl #2
				E += R[
 8000d6c:	edd6 7a00 	vldr	s15, [r6]
 8000d70:	ee30 0a27 	vadd.f32	s0, s0, s15
			if (i == j) continue;
 8000d74:	d077      	beq.n	8000e66 <compute_beam_energy+0x1e6>
				E += R[
 8000d76:	f89e 6028 	ldrb.w	r6, [lr, #40]	; 0x28
			if (i == j) continue;
 8000d7a:	2806      	cmp	r0, #6
					(((uint16_t)tau[ i_R[j][i] ][g] ^ 0xFFFF) + 0x0001) & 0x03FF
 8000d7c:	f853 7026 	ldr.w	r7, [r3, r6, lsl #2]
				][
 8000d80:	f852 6026 	ldr.w	r6, [r2, r6, lsl #2]
					(((uint16_t)tau[ i_R[j][i] ][g] ^ 0xFFFF) + 0x0001) & 0x03FF
 8000d84:	f817 c001 	ldrb.w	ip, [r7, r1]
 8000d88:	fa4f fc8c 	sxtb.w	ip, ip
 8000d8c:	f1cc 0c00 	rsb	ip, ip, #0
 8000d90:	f3cc 0c09 	ubfx	ip, ip, #0, #10
				][
 8000d94:	eb06 068c 	add.w	r6, r6, ip, lsl #2
				E += R[
 8000d98:	edd6 7a00 	vldr	s15, [r6]
 8000d9c:	ee30 0a27 	vadd.f32	s0, s0, s15
			if (i == j) continue;
 8000da0:	d071      	beq.n	8000e86 <compute_beam_energy+0x206>
				E += R[
 8000da2:	f89e 0030 	ldrb.w	r0, [lr, #48]	; 0x30
					(((uint16_t)tau[ i_R[j][i] ][g] ^ 0xFFFF) + 0x0001) & 0x03FF
 8000da6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
				][
 8000daa:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
					(((uint16_t)tau[ i_R[j][i] ][g] ^ 0xFFFF) + 0x0001) & 0x03FF
 8000dae:	5c5b      	ldrb	r3, [r3, r1]
 8000db0:	b25b      	sxtb	r3, r3
 8000db2:	425b      	negs	r3, r3
 8000db4:	f3c3 0309 	ubfx	r3, r3, #0, #10
				][
 8000db8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
				E += R[
 8000dbc:	edd3 7a00 	vldr	s15, [r3]
 8000dc0:	ee30 0a27 	vadd.f32	s0, s0, s15
			}
		}
	}

	return E;
}
 8000dc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
				E += R[
 8000dc6:	7866      	ldrb	r6, [r4, #1]
					((uint16_t)tau[ i_R[i][j] ][g]) & 0x03FF
 8000dc8:	f853 c026 	ldr.w	ip, [r3, r6, lsl #2]
				][
 8000dcc:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
					((uint16_t)tau[ i_R[i][j] ][g]) & 0x03FF
 8000dd0:	f81c 6001 	ldrb.w	r6, [ip, r1]
 8000dd4:	b276      	sxtb	r6, r6
 8000dd6:	f3c6 0609 	ubfx	r6, r6, #0, #10
				][
 8000dda:	eb07 0686 	add.w	r6, r7, r6, lsl #2
				E += R[
 8000dde:	edd6 7a00 	vldr	s15, [r6]
 8000de2:	ee30 0a27 	vadd.f32	s0, s0, s15
 8000de6:	78ae      	ldrb	r6, [r5, #2]
					((uint16_t)tau[ i_R[i][j] ][g]) & 0x03FF
 8000de8:	f853 c026 	ldr.w	ip, [r3, r6, lsl #2]
				][
 8000dec:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
					((uint16_t)tau[ i_R[i][j] ][g]) & 0x03FF
 8000df0:	f81c 6001 	ldrb.w	r6, [ip, r1]
 8000df4:	b276      	sxtb	r6, r6
 8000df6:	f3c6 0609 	ubfx	r6, r6, #0, #10
				][
 8000dfa:	eb07 0686 	add.w	r6, r7, r6, lsl #2
				E += R[
 8000dfe:	edd6 7a00 	vldr	s15, [r6]
 8000e02:	ee30 0a27 	vadd.f32	s0, s0, s15
 8000e06:	78ee      	ldrb	r6, [r5, #3]
					((uint16_t)tau[ i_R[i][j] ][g]) & 0x03FF
 8000e08:	f853 c026 	ldr.w	ip, [r3, r6, lsl #2]
				][
 8000e0c:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
					((uint16_t)tau[ i_R[i][j] ][g]) & 0x03FF
 8000e10:	f81c 6001 	ldrb.w	r6, [ip, r1]
 8000e14:	b276      	sxtb	r6, r6
 8000e16:	f3c6 0609 	ubfx	r6, r6, #0, #10
				][
 8000e1a:	eb07 0686 	add.w	r6, r7, r6, lsl #2
				E += R[
 8000e1e:	edd6 7a00 	vldr	s15, [r6]
 8000e22:	ee30 0a27 	vadd.f32	s0, s0, s15
 8000e26:	792e      	ldrb	r6, [r5, #4]
					((uint16_t)tau[ i_R[i][j] ][g]) & 0x03FF
 8000e28:	f853 c026 	ldr.w	ip, [r3, r6, lsl #2]
				][
 8000e2c:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
					((uint16_t)tau[ i_R[i][j] ][g]) & 0x03FF
 8000e30:	f81c 6001 	ldrb.w	r6, [ip, r1]
 8000e34:	b276      	sxtb	r6, r6
 8000e36:	f3c6 0609 	ubfx	r6, r6, #0, #10
				][
 8000e3a:	eb07 0686 	add.w	r6, r7, r6, lsl #2
				E += R[
 8000e3e:	edd6 7a00 	vldr	s15, [r6]
 8000e42:	ee30 0a27 	vadd.f32	s0, s0, s15
 8000e46:	796e      	ldrb	r6, [r5, #5]
					((uint16_t)tau[ i_R[i][j] ][g]) & 0x03FF
 8000e48:	f853 c026 	ldr.w	ip, [r3, r6, lsl #2]
				][
 8000e4c:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
					((uint16_t)tau[ i_R[i][j] ][g]) & 0x03FF
 8000e50:	f81c 6001 	ldrb.w	r6, [ip, r1]
 8000e54:	b276      	sxtb	r6, r6
 8000e56:	f3c6 0609 	ubfx	r6, r6, #0, #10
				][
 8000e5a:	eb07 0686 	add.w	r6, r7, r6, lsl #2
				E += R[
 8000e5e:	edd6 7a00 	vldr	s15, [r6]
 8000e62:	ee30 0a27 	vadd.f32	s0, s0, s15
 8000e66:	79ae      	ldrb	r6, [r5, #6]
					((uint16_t)tau[ i_R[i][j] ][g]) & 0x03FF
 8000e68:	f853 c026 	ldr.w	ip, [r3, r6, lsl #2]
				][
 8000e6c:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
					((uint16_t)tau[ i_R[i][j] ][g]) & 0x03FF
 8000e70:	f81c 6001 	ldrb.w	r6, [ip, r1]
 8000e74:	b276      	sxtb	r6, r6
 8000e76:	f3c6 0609 	ubfx	r6, r6, #0, #10
				][
 8000e7a:	eb07 0686 	add.w	r6, r7, r6, lsl #2
				E += R[
 8000e7e:	edd6 7a00 	vldr	s15, [r6]
 8000e82:	ee30 0a27 	vadd.f32	s0, s0, s15
 8000e86:	79ee      	ldrb	r6, [r5, #7]
	for (int i = 0; i < 8; i++) {
 8000e88:	3001      	adds	r0, #1
 8000e8a:	3508      	adds	r5, #8
 8000e8c:	f10e 0e01 	add.w	lr, lr, #1
					((uint16_t)tau[ i_R[i][j] ][g]) & 0x03FF
 8000e90:	f853 7026 	ldr.w	r7, [r3, r6, lsl #2]
	for (int i = 0; i < 8; i++) {
 8000e94:	2808      	cmp	r0, #8
				][
 8000e96:	f852 6026 	ldr.w	r6, [r2, r6, lsl #2]
					((uint16_t)tau[ i_R[i][j] ][g]) & 0x03FF
 8000e9a:	f817 c001 	ldrb.w	ip, [r7, r1]
 8000e9e:	fa4f fc8c 	sxtb.w	ip, ip
 8000ea2:	f3cc 0c09 	ubfx	ip, ip, #0, #10
				][
 8000ea6:	eb06 0c8c 	add.w	ip, r6, ip, lsl #2
				E += R[
 8000eaa:	eddc 7a00 	vldr	s15, [ip]
 8000eae:	ee30 0a27 	vadd.f32	s0, s0, s15
	for (int i = 0; i < 8; i++) {
 8000eb2:	f47f aeec 	bne.w	8000c8e <compute_beam_energy+0xe>
}
 8000eb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000eb8:	00000000 	.word	0x00000000

08000ebc <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ebc:	4b07      	ldr	r3, [pc, #28]	; (8000edc <HAL_MspInit+0x20>)
{
 8000ebe:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ec0:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8000ec4:	f042 0202 	orr.w	r2, r2, #2
 8000ec8:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8000ecc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ed0:	f003 0302 	and.w	r3, r3, #2
 8000ed4:	9301      	str	r3, [sp, #4]
 8000ed6:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ed8:	b002      	add	sp, #8
 8000eda:	4770      	bx	lr
 8000edc:	58024400 	.word	0x58024400

08000ee0 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ee0:	e7fe      	b.n	8000ee0 <NMI_Handler>
 8000ee2:	bf00      	nop

08000ee4 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ee4:	e7fe      	b.n	8000ee4 <HardFault_Handler>
 8000ee6:	bf00      	nop

08000ee8 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ee8:	e7fe      	b.n	8000ee8 <MemManage_Handler>
 8000eea:	bf00      	nop

08000eec <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eec:	e7fe      	b.n	8000eec <BusFault_Handler>
 8000eee:	bf00      	nop

08000ef0 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ef0:	e7fe      	b.n	8000ef0 <UsageFault_Handler>
 8000ef2:	bf00      	nop

08000ef4 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop

08000ef8 <DebugMon_Handler>:
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop

08000efc <PendSV_Handler>:
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop

08000f00 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f00:	f000 bcce 	b.w	80018a0 <HAL_IncTick>

08000f04 <DMA1_Stream5_IRQHandler>:
void DMA1_Stream5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch1);
 8000f04:	4801      	ldr	r0, [pc, #4]	; (8000f0c <DMA1_Stream5_IRQHandler+0x8>)
 8000f06:	f001 ba67 	b.w	80023d8 <HAL_DMA_IRQHandler>
 8000f0a:	bf00      	nop
 8000f0c:	24006814 	.word	0x24006814

08000f10 <OTG_HS_IRQHandler>:
void OTG_HS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8000f10:	4801      	ldr	r0, [pc, #4]	; (8000f18 <OTG_HS_IRQHandler+0x8>)
 8000f12:	f001 bf93 	b.w	8002e3c <HAL_PCD_IRQHandler>
 8000f16:	bf00      	nop
 8000f18:	24007ef0 	.word	0x24007ef0

08000f1c <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8000f1c:	2001      	movs	r0, #1
 8000f1e:	4770      	bx	lr

08000f20 <_kill>:

int _kill(int pid, int sig)
{
 8000f20:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000f22:	f009 fe19 	bl	800ab58 <__errno>
 8000f26:	2216      	movs	r2, #22
 8000f28:	4603      	mov	r3, r0
  return -1;
}
 8000f2a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  errno = EINVAL;
 8000f2e:	601a      	str	r2, [r3, #0]
}
 8000f30:	bd08      	pop	{r3, pc}
 8000f32:	bf00      	nop

08000f34 <_exit>:

void _exit (int status)
{
 8000f34:	b508      	push	{r3, lr}
  errno = EINVAL;
 8000f36:	f009 fe0f 	bl	800ab58 <__errno>
 8000f3a:	2316      	movs	r3, #22
 8000f3c:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 8000f3e:	e7fe      	b.n	8000f3e <_exit+0xa>

08000f40 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f40:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f42:	1e16      	subs	r6, r2, #0
 8000f44:	dd07      	ble.n	8000f56 <_read+0x16>
 8000f46:	460c      	mov	r4, r1
 8000f48:	198d      	adds	r5, r1, r6
  {
    *ptr++ = __io_getchar();
 8000f4a:	f3af 8000 	nop.w
 8000f4e:	f804 0b01 	strb.w	r0, [r4], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f52:	42a5      	cmp	r5, r4
 8000f54:	d1f9      	bne.n	8000f4a <_read+0xa>
  }

  return len;
}
 8000f56:	4630      	mov	r0, r6
 8000f58:	bd70      	pop	{r4, r5, r6, pc}
 8000f5a:	bf00      	nop

08000f5c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f5c:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f5e:	1e16      	subs	r6, r2, #0
 8000f60:	dd07      	ble.n	8000f72 <_write+0x16>
 8000f62:	460c      	mov	r4, r1
 8000f64:	198d      	adds	r5, r1, r6
  {
    __io_putchar(*ptr++);
 8000f66:	f814 0b01 	ldrb.w	r0, [r4], #1
 8000f6a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f6e:	42ac      	cmp	r4, r5
 8000f70:	d1f9      	bne.n	8000f66 <_write+0xa>
  }
  return len;
}
 8000f72:	4630      	mov	r0, r6
 8000f74:	bd70      	pop	{r4, r5, r6, pc}
 8000f76:	bf00      	nop

08000f78 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8000f78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop

08000f80 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8000f80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  return 0;
}
 8000f84:	2000      	movs	r0, #0
  st->st_mode = S_IFCHR;
 8000f86:	604b      	str	r3, [r1, #4]
}
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8000f8c:	2001      	movs	r0, #1
 8000f8e:	4770      	bx	lr

08000f90 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8000f90:	2000      	movs	r0, #0
 8000f92:	4770      	bx	lr

08000f94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f94:	b538      	push	{r3, r4, r5, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f96:	4c0d      	ldr	r4, [pc, #52]	; (8000fcc <_sbrk+0x38>)
{
 8000f98:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f9a:	490d      	ldr	r1, [pc, #52]	; (8000fd0 <_sbrk+0x3c>)
 8000f9c:	4d0d      	ldr	r5, [pc, #52]	; (8000fd4 <_sbrk+0x40>)
  if (NULL == __sbrk_heap_end)
 8000f9e:	6822      	ldr	r2, [r4, #0]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fa0:	1b49      	subs	r1, r1, r5
  if (NULL == __sbrk_heap_end)
 8000fa2:	b12a      	cbz	r2, 8000fb0 <_sbrk+0x1c>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fa4:	4413      	add	r3, r2
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d808      	bhi.n	8000fbc <_sbrk+0x28>

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8000faa:	4610      	mov	r0, r2
  __sbrk_heap_end += incr;
 8000fac:	6023      	str	r3, [r4, #0]
}
 8000fae:	bd38      	pop	{r3, r4, r5, pc}
    __sbrk_heap_end = &_end;
 8000fb0:	4809      	ldr	r0, [pc, #36]	; (8000fd8 <_sbrk+0x44>)
 8000fb2:	4602      	mov	r2, r0
 8000fb4:	6020      	str	r0, [r4, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8000fb6:	4413      	add	r3, r2
 8000fb8:	428b      	cmp	r3, r1
 8000fba:	d9f6      	bls.n	8000faa <_sbrk+0x16>
    errno = ENOMEM;
 8000fbc:	f009 fdcc 	bl	800ab58 <__errno>
 8000fc0:	230c      	movs	r3, #12
    return (void *)-1;
 8000fc2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    errno = ENOMEM;
 8000fc6:	6003      	str	r3, [r0, #0]
}
 8000fc8:	4610      	mov	r0, r2
 8000fca:	bd38      	pop	{r3, r4, r5, pc}
 8000fcc:	24006810 	.word	0x24006810
 8000fd0:	24050000 	.word	0x24050000
 8000fd4:	00000400 	.word	0x00000400
 8000fd8:	24008768 	.word	0x24008768

08000fdc <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000fdc:	4922      	ldr	r1, [pc, #136]	; (8001068 <SystemInit+0x8c>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000fde:	4a23      	ldr	r2, [pc, #140]	; (800106c <SystemInit+0x90>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000fe0:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8000fe4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
{
 8000fe8:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000fea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000fee:	6813      	ldr	r3, [r2, #0]
 8000ff0:	f003 030f 	and.w	r3, r3, #15
 8000ff4:	2b06      	cmp	r3, #6
 8000ff6:	d805      	bhi.n	8001004 <SystemInit+0x28>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ff8:	6813      	ldr	r3, [r2, #0]
 8000ffa:	f023 030f 	bic.w	r3, r3, #15
 8000ffe:	f043 0307 	orr.w	r3, r3, #7
 8001002:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001004:	4b1a      	ldr	r3, [pc, #104]	; (8001070 <SystemInit+0x94>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001006:	2400      	movs	r4, #0

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001008:	4a1a      	ldr	r2, [pc, #104]	; (8001074 <SystemInit+0x98>)
  RCC->CR |= RCC_CR_HSION;
 800100a:	6819      	ldr	r1, [r3, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800100c:	4817      	ldr	r0, [pc, #92]	; (800106c <SystemInit+0x90>)
  RCC->CR |= RCC_CR_HSION;
 800100e:	f041 0101 	orr.w	r1, r1, #1
 8001012:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00000000;
 8001014:	611c      	str	r4, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 8001016:	6819      	ldr	r1, [r3, #0]
 8001018:	400a      	ands	r2, r1
 800101a:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800101c:	6803      	ldr	r3, [r0, #0]
 800101e:	071b      	lsls	r3, r3, #28
 8001020:	d505      	bpl.n	800102e <SystemInit+0x52>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001022:	6803      	ldr	r3, [r0, #0]
 8001024:	f023 030f 	bic.w	r3, r3, #15
 8001028:	f043 0307 	orr.w	r3, r3, #7
 800102c:	6003      	str	r3, [r0, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800102e:	4b10      	ldr	r3, [pc, #64]	; (8001070 <SystemInit+0x94>)
 8001030:	2200      	movs	r2, #0
  RCC->PLLCKSELR = 0x02020200;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001032:	4911      	ldr	r1, [pc, #68]	; (8001078 <SystemInit+0x9c>)
  RCC->PLLCKSELR = 0x02020200;
 8001034:	4c11      	ldr	r4, [pc, #68]	; (800107c <SystemInit+0xa0>)
  RCC->PLLCFGR = 0x01FF0000;
 8001036:	4812      	ldr	r0, [pc, #72]	; (8001080 <SystemInit+0xa4>)
  RCC->D1CFGR = 0x00000000;
 8001038:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 800103a:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 800103c:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 800103e:	629c      	str	r4, [r3, #40]	; 0x28
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001040:	f243 04d2 	movw	r4, #12498	; 0x30d2
  RCC->PLLCFGR = 0x01FF0000;
 8001044:	62d8      	str	r0, [r3, #44]	; 0x2c
  RCC->PLL1DIVR = 0x01010280;
 8001046:	6319      	str	r1, [r3, #48]	; 0x30
  RCC->PLL1FRACR = 0x00000000;
 8001048:	635a      	str	r2, [r3, #52]	; 0x34
  RCC->PLL2DIVR = 0x01010280;
 800104a:	6399      	str	r1, [r3, #56]	; 0x38
  RCC->PLL2FRACR = 0x00000000;
 800104c:	63da      	str	r2, [r3, #60]	; 0x3c
  RCC->PLL3DIVR = 0x01010280;
 800104e:	6419      	str	r1, [r3, #64]	; 0x40
  RCC->PLL3FRACR = 0x00000000;
 8001050:	645a      	str	r2, [r3, #68]	; 0x44
  RCC->CR &= 0xFFFBFFFFU;
 8001052:	6819      	ldr	r1, [r3, #0]
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001054:	480b      	ldr	r0, [pc, #44]	; (8001084 <SystemInit+0xa8>)
  RCC->CR &= 0xFFFBFFFFU;
 8001056:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 800105a:	6019      	str	r1, [r3, #0]
  RCC->CIER = 0x00000000;
 800105c:	661a      	str	r2, [r3, #96]	; 0x60
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800105e:	6004      	str	r4, [r0, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001060:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	e000ed00 	.word	0xe000ed00
 800106c:	52002000 	.word	0x52002000
 8001070:	58024400 	.word	0x58024400
 8001074:	eaf6ed7f 	.word	0xeaf6ed7f
 8001078:	01010280 	.word	0x01010280
 800107c:	02020200 	.word	0x02020200
 8001080:	01ff0000 	.word	0x01ff0000
 8001084:	52004000 	.word	0x52004000

08001088 <MX_TIM2_Init>:
TIM_HandleTypeDef htim8;
DMA_HandleTypeDef hdma_tim5_ch1;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001088:	b510      	push	{r4, lr}

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800108a:	2300      	movs	r3, #0
  TIM_OC_InitTypeDef sConfigOC = {0};

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800108c:	4c50      	ldr	r4, [pc, #320]	; (80011d0 <MX_TIM2_Init+0x148>)
 800108e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
{
 8001092:	b094      	sub	sp, #80	; 0x50
  htim2.Init.Prescaler = 0;
  htim2.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8001094:	2110      	movs	r1, #16
  htim2.Init.Period = 1431;
 8001096:	f240 5297 	movw	r2, #1431	; 0x597
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800109a:	9303      	str	r3, [sp, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800109c:	930c      	str	r3, [sp, #48]	; 0x30
  htim2.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 800109e:	60a1      	str	r1, [r4, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010a0:	61a3      	str	r3, [r4, #24]
  htim2.Init.Prescaler = 0;
 80010a2:	e9c4 0300 	strd	r0, r3, [r4]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80010a6:	4620      	mov	r0, r4
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010a8:	e9c4 2303 	strd	r2, r3, [r4, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010ac:	e9cd 3304 	strd	r3, r3, [sp, #16]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010b0:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
 80010b4:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
 80010b8:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80010bc:	f004 fb8c 	bl	80057d8 <HAL_TIM_PWM_Init>
 80010c0:	bb30      	cbnz	r0, 8001110 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80010c2:	2220      	movs	r2, #32
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 80010c4:	2380      	movs	r3, #128	; 0x80
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010c6:	a903      	add	r1, sp, #12
 80010c8:	4841      	ldr	r0, [pc, #260]	; (80011d0 <MX_TIM2_Init+0x148>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80010ca:	9203      	str	r2, [sp, #12]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 80010cc:	9305      	str	r3, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010ce:	f004 ffe5 	bl	800609c <HAL_TIMEx_MasterConfigSynchronization>
 80010d2:	bb18      	cbnz	r0, 800111c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 716;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010d4:	2200      	movs	r2, #0
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010d6:	a90c      	add	r1, sp, #48	; 0x30
 80010d8:	483d      	ldr	r0, [pc, #244]	; (80011d0 <MX_TIM2_Init+0x148>)
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010da:	920e      	str	r2, [sp, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010dc:	9210      	str	r2, [sp, #64]	; 0x40
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010de:	ed9f 7b36 	vldr	d7, [pc, #216]	; 80011b8 <MX_TIM2_Init+0x130>
 80010e2:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010e6:	f004 feb9 	bl	8005e5c <HAL_TIM_PWM_ConfigChannel>
 80010ea:	b9a0      	cbnz	r0, 8001116 <MX_TIM2_Init+0x8e>
}
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(timHandle->Instance==TIM2)
 80010ec:	6822      	ldr	r2, [r4, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ee:	2300      	movs	r3, #0
  if(timHandle->Instance==TIM2)
 80010f0:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f4:	930a      	str	r3, [sp, #40]	; 0x28
 80010f6:	e9cd 3306 	strd	r3, r3, [sp, #24]
 80010fa:	e9cd 3308 	strd	r3, r3, [sp, #32]
  if(timHandle->Instance==TIM2)
 80010fe:	d010      	beq.n	8001122 <MX_TIM2_Init+0x9a>

  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }
  else if(timHandle->Instance==TIM3)
 8001100:	4b34      	ldr	r3, [pc, #208]	; (80011d4 <MX_TIM2_Init+0x14c>)
 8001102:	429a      	cmp	r2, r3
 8001104:	d024      	beq.n	8001150 <MX_TIM2_Init+0xc8>

  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }
  else if(timHandle->Instance==TIM8)
 8001106:	4b34      	ldr	r3, [pc, #208]	; (80011d8 <MX_TIM2_Init+0x150>)
 8001108:	429a      	cmp	r2, r3
 800110a:	d03a      	beq.n	8001182 <MX_TIM2_Init+0xfa>
}
 800110c:	b014      	add	sp, #80	; 0x50
 800110e:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001110:	f7ff fd68 	bl	8000be4 <Error_Handler>
 8001114:	e7d5      	b.n	80010c2 <MX_TIM2_Init+0x3a>
    Error_Handler();
 8001116:	f7ff fd65 	bl	8000be4 <Error_Handler>
 800111a:	e7e7      	b.n	80010ec <MX_TIM2_Init+0x64>
    Error_Handler();
 800111c:	f7ff fd62 	bl	8000be4 <Error_Handler>
 8001120:	e7d8      	b.n	80010d4 <MX_TIM2_Init+0x4c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001122:	4b2e      	ldr	r3, [pc, #184]	; (80011dc <MX_TIM2_Init+0x154>)
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001124:	2401      	movs	r4, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001126:	a906      	add	r1, sp, #24
 8001128:	482d      	ldr	r0, [pc, #180]	; (80011e0 <MX_TIM2_Init+0x158>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800112a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800112e:	4322      	orrs	r2, r4
 8001130:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001134:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001138:	940a      	str	r4, [sp, #40]	; 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800113a:	4023      	ands	r3, r4
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800113c:	ed9f 7b20 	vldr	d7, [pc, #128]	; 80011c0 <MX_TIM2_Init+0x138>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001140:	9300      	str	r3, [sp, #0]
 8001142:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001144:	ed8d 7b06 	vstr	d7, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001148:	f001 fc94 	bl	8002a74 <HAL_GPIO_Init>
}
 800114c:	b014      	add	sp, #80	; 0x50
 800114e:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001150:	4b22      	ldr	r3, [pc, #136]	; (80011dc <MX_TIM2_Init+0x154>)
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001152:	2402      	movs	r4, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001154:	a906      	add	r1, sp, #24
 8001156:	4822      	ldr	r0, [pc, #136]	; (80011e0 <MX_TIM2_Init+0x158>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001158:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800115c:	f042 0201 	orr.w	r2, r2, #1
 8001160:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001164:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001168:	940a      	str	r4, [sp, #40]	; 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800116a:	f003 0301 	and.w	r3, r3, #1
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800116e:	ed9f 7b16 	vldr	d7, [pc, #88]	; 80011c8 <MX_TIM2_Init+0x140>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001172:	9301      	str	r3, [sp, #4]
 8001174:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001176:	ed8d 7b06 	vstr	d7, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800117a:	f001 fc7b 	bl	8002a74 <HAL_GPIO_Init>
}
 800117e:	b014      	add	sp, #80	; 0x50
 8001180:	bd10      	pop	{r4, pc}
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001182:	4b16      	ldr	r3, [pc, #88]	; (80011dc <MX_TIM2_Init+0x154>)
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001184:	2403      	movs	r4, #3
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001186:	a906      	add	r1, sp, #24
 8001188:	4816      	ldr	r0, [pc, #88]	; (80011e4 <MX_TIM2_Init+0x15c>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800118a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800118e:	f042 0204 	orr.w	r2, r2, #4
 8001192:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001196:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800119a:	940a      	str	r4, [sp, #40]	; 0x28
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800119c:	f003 0304 	and.w	r3, r3, #4
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80011a0:	ed9f 7b09 	vldr	d7, [pc, #36]	; 80011c8 <MX_TIM2_Init+0x140>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011a4:	9302      	str	r3, [sp, #8]
 80011a6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80011a8:	ed8d 7b06 	vstr	d7, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011ac:	f001 fc62 	bl	8002a74 <HAL_GPIO_Init>
}
 80011b0:	b014      	add	sp, #80	; 0x50
 80011b2:	bd10      	pop	{r4, pc}
 80011b4:	f3af 8000 	nop.w
 80011b8:	00000060 	.word	0x00000060
 80011bc:	000002cc 	.word	0x000002cc
 80011c0:	00000001 	.word	0x00000001
 80011c4:	00000002 	.word	0x00000002
 80011c8:	00000040 	.word	0x00000040
 80011cc:	00000002 	.word	0x00000002
 80011d0:	2400688c 	.word	0x2400688c
 80011d4:	40000400 	.word	0x40000400
 80011d8:	40010400 	.word	0x40010400
 80011dc:	58024400 	.word	0x58024400
 80011e0:	58020000 	.word	0x58020000
 80011e4:	58020800 	.word	0x58020800

080011e8 <MX_TIM4_Init>:
{
 80011e8:	b500      	push	{lr}
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80011ea:	2300      	movs	r3, #0
{
 80011ec:	b08b      	sub	sp, #44	; 0x2c
  htim4.Instance = TIM4;
 80011ee:	4820      	ldr	r0, [pc, #128]	; (8001270 <MX_TIM4_Init+0x88>)
  htim4.Init.Period = 2;
 80011f0:	2202      	movs	r2, #2
  htim4.Instance = TIM4;
 80011f2:	4920      	ldr	r1, [pc, #128]	; (8001274 <MX_TIM4_Init+0x8c>)
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80011f4:	9304      	str	r3, [sp, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011f6:	9301      	str	r3, [sp, #4]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011f8:	6103      	str	r3, [r0, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011fa:	6183      	str	r3, [r0, #24]
  htim4.Init.Prescaler = 0;
 80011fc:	e9c0 1300 	strd	r1, r3, [r0]
  htim4.Init.Period = 2;
 8001200:	e9c0 3202 	strd	r3, r2, [r0, #8]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001204:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8001208:	e9cd 3307 	strd	r3, r3, [sp, #28]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800120c:	e9cd 3302 	strd	r3, r3, [sp, #8]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001210:	f004 fa20 	bl	8005654 <HAL_TIM_Base_Init>
 8001214:	b9c8      	cbnz	r0, 800124a <MX_TIM4_Init+0x62>
  if (HAL_TIM_OnePulse_Init(&htim4, TIM_OPMODE_SINGLE) != HAL_OK)
 8001216:	2108      	movs	r1, #8
 8001218:	4815      	ldr	r0, [pc, #84]	; (8001270 <MX_TIM4_Init+0x88>)
 800121a:	f004 fc65 	bl	8005ae8 <HAL_TIM_OnePulse_Init>
 800121e:	b9e0      	cbnz	r0, 800125a <MX_TIM4_Init+0x72>
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8001220:	2206      	movs	r2, #6
 8001222:	2310      	movs	r3, #16
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8001224:	a904      	add	r1, sp, #16
 8001226:	4812      	ldr	r0, [pc, #72]	; (8001270 <MX_TIM4_Init+0x88>)
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8001228:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 800122c:	f004 fd1a 	bl	8005c64 <HAL_TIM_SlaveConfigSynchro>
 8001230:	b9d8      	cbnz	r0, 800126a <MX_TIM4_Init+0x82>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001232:	2220      	movs	r2, #32
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001234:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001236:	a901      	add	r1, sp, #4
 8001238:	480d      	ldr	r0, [pc, #52]	; (8001270 <MX_TIM4_Init+0x88>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800123a:	9201      	str	r2, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800123c:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800123e:	f004 ff2d 	bl	800609c <HAL_TIMEx_MasterConfigSynchronization>
 8001242:	b968      	cbnz	r0, 8001260 <MX_TIM4_Init+0x78>
}
 8001244:	b00b      	add	sp, #44	; 0x2c
 8001246:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800124a:	f7ff fccb 	bl	8000be4 <Error_Handler>
  if (HAL_TIM_OnePulse_Init(&htim4, TIM_OPMODE_SINGLE) != HAL_OK)
 800124e:	2108      	movs	r1, #8
 8001250:	4807      	ldr	r0, [pc, #28]	; (8001270 <MX_TIM4_Init+0x88>)
 8001252:	f004 fc49 	bl	8005ae8 <HAL_TIM_OnePulse_Init>
 8001256:	2800      	cmp	r0, #0
 8001258:	d0e2      	beq.n	8001220 <MX_TIM4_Init+0x38>
    Error_Handler();
 800125a:	f7ff fcc3 	bl	8000be4 <Error_Handler>
 800125e:	e7df      	b.n	8001220 <MX_TIM4_Init+0x38>
    Error_Handler();
 8001260:	f7ff fcc0 	bl	8000be4 <Error_Handler>
}
 8001264:	b00b      	add	sp, #44	; 0x2c
 8001266:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800126a:	f7ff fcbb 	bl	8000be4 <Error_Handler>
 800126e:	e7e0      	b.n	8001232 <MX_TIM4_Init+0x4a>
 8001270:	24006924 	.word	0x24006924
 8001274:	40000800 	.word	0x40000800

08001278 <MX_TIM5_Init>:
{
 8001278:	b500      	push	{lr}
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800127a:	2300      	movs	r3, #0
{
 800127c:	b093      	sub	sp, #76	; 0x4c
  htim5.Instance = TIM5;
 800127e:	4834      	ldr	r0, [pc, #208]	; (8001350 <MX_TIM5_Init+0xd8>)
  htim5.Init.Period = 17;
 8001280:	2211      	movs	r2, #17
  htim5.Instance = TIM5;
 8001282:	4934      	ldr	r1, [pc, #208]	; (8001354 <MX_TIM5_Init+0xdc>)
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001284:	9304      	str	r3, [sp, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001286:	9301      	str	r3, [sp, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001288:	930a      	str	r3, [sp, #40]	; 0x28
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800128a:	6103      	str	r3, [r0, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800128c:	6183      	str	r3, [r0, #24]
  htim5.Init.Prescaler = 0;
 800128e:	e9c0 1300 	strd	r1, r3, [r0]
  htim5.Init.Period = 17;
 8001292:	e9c0 3202 	strd	r3, r2, [r0, #8]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001296:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800129a:	e9cd 3307 	strd	r3, r3, [sp, #28]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800129e:	e9cd 3302 	strd	r3, r3, [sp, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012a2:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
 80012a6:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
 80012aa:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80012ae:	f004 f9d1 	bl	8005654 <HAL_TIM_Base_Init>
 80012b2:	bb58      	cbnz	r0, 800130c <MX_TIM5_Init+0x94>
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80012b4:	4826      	ldr	r0, [pc, #152]	; (8001350 <MX_TIM5_Init+0xd8>)
 80012b6:	f004 fa8f 	bl	80057d8 <HAL_TIM_PWM_Init>
 80012ba:	2800      	cmp	r0, #0
 80012bc:	d12d      	bne.n	800131a <MX_TIM5_Init+0xa2>
  if (HAL_TIM_OnePulse_Init(&htim5, TIM_OPMODE_SINGLE) != HAL_OK)
 80012be:	2108      	movs	r1, #8
 80012c0:	4823      	ldr	r0, [pc, #140]	; (8001350 <MX_TIM5_Init+0xd8>)
 80012c2:	f004 fc11 	bl	8005ae8 <HAL_TIM_OnePulse_Init>
 80012c6:	2800      	cmp	r0, #0
 80012c8:	d12f      	bne.n	800132a <MX_TIM5_Init+0xb2>
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 80012ca:	2206      	movs	r2, #6
 80012cc:	2310      	movs	r3, #16
  if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK)
 80012ce:	a904      	add	r1, sp, #16
 80012d0:	481f      	ldr	r0, [pc, #124]	; (8001350 <MX_TIM5_Init+0xd8>)
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 80012d2:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK)
 80012d6:	f004 fcc5 	bl	8005c64 <HAL_TIM_SlaveConfigSynchro>
 80012da:	2800      	cmp	r0, #0
 80012dc:	d130      	bne.n	8001340 <MX_TIM5_Init+0xc8>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012de:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80012e0:	a901      	add	r1, sp, #4
 80012e2:	481b      	ldr	r0, [pc, #108]	; (8001350 <MX_TIM5_Init+0xd8>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012e4:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012e6:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80012e8:	f004 fed8 	bl	800609c <HAL_TIMEx_MasterConfigSynchronization>
 80012ec:	bb28      	cbnz	r0, 800133a <MX_TIM5_Init+0xc2>
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012ee:	2200      	movs	r2, #0
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012f0:	a90a      	add	r1, sp, #40	; 0x28
 80012f2:	4817      	ldr	r0, [pc, #92]	; (8001350 <MX_TIM5_Init+0xd8>)
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012f4:	920c      	str	r2, [sp, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012f6:	920e      	str	r2, [sp, #56]	; 0x38
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012f8:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8001348 <MX_TIM5_Init+0xd0>
 80012fc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001300:	f004 fdac 	bl	8005e5c <HAL_TIM_PWM_ConfigChannel>
 8001304:	b9a0      	cbnz	r0, 8001330 <MX_TIM5_Init+0xb8>
}
 8001306:	b013      	add	sp, #76	; 0x4c
 8001308:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800130c:	f7ff fc6a 	bl	8000be4 <Error_Handler>
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001310:	480f      	ldr	r0, [pc, #60]	; (8001350 <MX_TIM5_Init+0xd8>)
 8001312:	f004 fa61 	bl	80057d8 <HAL_TIM_PWM_Init>
 8001316:	2800      	cmp	r0, #0
 8001318:	d0d1      	beq.n	80012be <MX_TIM5_Init+0x46>
    Error_Handler();
 800131a:	f7ff fc63 	bl	8000be4 <Error_Handler>
  if (HAL_TIM_OnePulse_Init(&htim5, TIM_OPMODE_SINGLE) != HAL_OK)
 800131e:	2108      	movs	r1, #8
 8001320:	480b      	ldr	r0, [pc, #44]	; (8001350 <MX_TIM5_Init+0xd8>)
 8001322:	f004 fbe1 	bl	8005ae8 <HAL_TIM_OnePulse_Init>
 8001326:	2800      	cmp	r0, #0
 8001328:	d0cf      	beq.n	80012ca <MX_TIM5_Init+0x52>
    Error_Handler();
 800132a:	f7ff fc5b 	bl	8000be4 <Error_Handler>
 800132e:	e7cc      	b.n	80012ca <MX_TIM5_Init+0x52>
    Error_Handler();
 8001330:	f7ff fc58 	bl	8000be4 <Error_Handler>
}
 8001334:	b013      	add	sp, #76	; 0x4c
 8001336:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800133a:	f7ff fc53 	bl	8000be4 <Error_Handler>
 800133e:	e7d6      	b.n	80012ee <MX_TIM5_Init+0x76>
    Error_Handler();
 8001340:	f7ff fc50 	bl	8000be4 <Error_Handler>
 8001344:	e7cb      	b.n	80012de <MX_TIM5_Init+0x66>
 8001346:	bf00      	nop
 8001348:	00000060 	.word	0x00000060
 800134c:	0000000d 	.word	0x0000000d
 8001350:	24006970 	.word	0x24006970
 8001354:	40000c00 	.word	0x40000c00

08001358 <HAL_TIM_PWM_MspInit>:
  if(tim_pwmHandle->Instance==TIM2)
 8001358:	6803      	ldr	r3, [r0, #0]
 800135a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800135e:	d000      	beq.n	8001362 <HAL_TIM_PWM_MspInit+0xa>
 8001360:	4770      	bx	lr
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001362:	4b08      	ldr	r3, [pc, #32]	; (8001384 <HAL_TIM_PWM_MspInit+0x2c>)
{
 8001364:	b082      	sub	sp, #8
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001366:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 800136a:	f042 0201 	orr.w	r2, r2, #1
 800136e:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8001372:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001376:	f003 0301 	and.w	r3, r3, #1
 800137a:	9301      	str	r3, [sp, #4]
 800137c:	9b01      	ldr	r3, [sp, #4]
}
 800137e:	b002      	add	sp, #8
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	58024400 	.word	0x58024400

08001388 <HAL_TIM_Base_MspInit>:
  if(tim_baseHandle->Instance==TIM3)
 8001388:	4a34      	ldr	r2, [pc, #208]	; (800145c <HAL_TIM_Base_MspInit+0xd4>)
 800138a:	6803      	ldr	r3, [r0, #0]
 800138c:	4293      	cmp	r3, r2
{
 800138e:	b530      	push	{r4, r5, lr}
 8001390:	b085      	sub	sp, #20
  if(tim_baseHandle->Instance==TIM3)
 8001392:	d019      	beq.n	80013c8 <HAL_TIM_Base_MspInit+0x40>
  else if(tim_baseHandle->Instance==TIM4)
 8001394:	4a32      	ldr	r2, [pc, #200]	; (8001460 <HAL_TIM_Base_MspInit+0xd8>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d007      	beq.n	80013aa <HAL_TIM_Base_MspInit+0x22>
  else if(tim_baseHandle->Instance==TIM5)
 800139a:	4a32      	ldr	r2, [pc, #200]	; (8001464 <HAL_TIM_Base_MspInit+0xdc>)
 800139c:	4293      	cmp	r3, r2
 800139e:	d031      	beq.n	8001404 <HAL_TIM_Base_MspInit+0x7c>
  else if(tim_baseHandle->Instance==TIM8)
 80013a0:	4a31      	ldr	r2, [pc, #196]	; (8001468 <HAL_TIM_Base_MspInit+0xe0>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d01f      	beq.n	80013e6 <HAL_TIM_Base_MspInit+0x5e>
}
 80013a6:	b005      	add	sp, #20
 80013a8:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_TIM4_CLK_ENABLE();
 80013aa:	4b30      	ldr	r3, [pc, #192]	; (800146c <HAL_TIM_Base_MspInit+0xe4>)
 80013ac:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 80013b0:	f042 0204 	orr.w	r2, r2, #4
 80013b4:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 80013b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80013bc:	f003 0304 	and.w	r3, r3, #4
 80013c0:	9301      	str	r3, [sp, #4]
 80013c2:	9b01      	ldr	r3, [sp, #4]
}
 80013c4:	b005      	add	sp, #20
 80013c6:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_TIM3_CLK_ENABLE();
 80013c8:	4b28      	ldr	r3, [pc, #160]	; (800146c <HAL_TIM_Base_MspInit+0xe4>)
 80013ca:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 80013ce:	f042 0202 	orr.w	r2, r2, #2
 80013d2:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 80013d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80013da:	f003 0302 	and.w	r3, r3, #2
 80013de:	9300      	str	r3, [sp, #0]
 80013e0:	9b00      	ldr	r3, [sp, #0]
}
 80013e2:	b005      	add	sp, #20
 80013e4:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_TIM8_CLK_ENABLE();
 80013e6:	4b21      	ldr	r3, [pc, #132]	; (800146c <HAL_TIM_Base_MspInit+0xe4>)
 80013e8:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 80013ec:	f042 0202 	orr.w	r2, r2, #2
 80013f0:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 80013f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80013f8:	f003 0302 	and.w	r3, r3, #2
 80013fc:	9303      	str	r3, [sp, #12]
 80013fe:	9b03      	ldr	r3, [sp, #12]
}
 8001400:	b005      	add	sp, #20
 8001402:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001404:	4a19      	ldr	r2, [pc, #100]	; (800146c <HAL_TIM_Base_MspInit+0xe4>)
    hdma_tim5_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001406:	2300      	movs	r3, #0
    hdma_tim5_ch1.Instance = DMA1_Stream5;
 8001408:	4d19      	ldr	r5, [pc, #100]	; (8001470 <HAL_TIM_Base_MspInit+0xe8>)
 800140a:	4604      	mov	r4, r0
    __HAL_RCC_TIM5_CLK_ENABLE();
 800140c:	f8d2 10e8 	ldr.w	r1, [r2, #232]	; 0xe8
    hdma_tim5_ch1.Instance = DMA1_Stream5;
 8001410:	4818      	ldr	r0, [pc, #96]	; (8001474 <HAL_TIM_Base_MspInit+0xec>)
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001412:	f041 0108 	orr.w	r1, r1, #8
    hdma_tim5_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001416:	e9c5 3302 	strd	r3, r3, [r5, #8]
    __HAL_RCC_TIM5_CLK_ENABLE();
 800141a:	f8c2 10e8 	str.w	r1, [r2, #232]	; 0xe8
    hdma_tim5_ch1.Init.Request = DMA_REQUEST_TIM5_CH1;
 800141e:	2137      	movs	r1, #55	; 0x37
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001420:	f8d2 20e8 	ldr.w	r2, [r2, #232]	; 0xe8
    hdma_tim5_ch1.Init.Request = DMA_REQUEST_TIM5_CH1;
 8001424:	6069      	str	r1, [r5, #4]
    hdma_tim5_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001426:	f44f 6180 	mov.w	r1, #1024	; 0x400
    __HAL_RCC_TIM5_CLK_ENABLE();
 800142a:	f002 0208 	and.w	r2, r2, #8
    hdma_tim5_ch1.Instance = DMA1_Stream5;
 800142e:	6028      	str	r0, [r5, #0]
    hdma_tim5_ch1.Init.Mode = DMA_NORMAL;
 8001430:	61eb      	str	r3, [r5, #28]
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001432:	9202      	str	r2, [sp, #8]
    hdma_tim5_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001434:	f44f 6200 	mov.w	r2, #2048	; 0x800
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001438:	9802      	ldr	r0, [sp, #8]
    if (HAL_DMA_Init(&hdma_tim5_ch1) != HAL_OK)
 800143a:	4628      	mov	r0, r5
    hdma_tim5_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800143c:	e9c5 1204 	strd	r1, r2, [r5, #16]
    hdma_tim5_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001440:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    hdma_tim5_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001444:	e9c5 3308 	strd	r3, r3, [r5, #32]
    hdma_tim5_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001448:	61aa      	str	r2, [r5, #24]
    if (HAL_DMA_Init(&hdma_tim5_ch1) != HAL_OK)
 800144a:	f000 fba9 	bl	8001ba0 <HAL_DMA_Init>
 800144e:	b910      	cbnz	r0, 8001456 <HAL_TIM_Base_MspInit+0xce>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim5_ch1);
 8001450:	6265      	str	r5, [r4, #36]	; 0x24
 8001452:	63ac      	str	r4, [r5, #56]	; 0x38
 8001454:	e7a7      	b.n	80013a6 <HAL_TIM_Base_MspInit+0x1e>
      Error_Handler();
 8001456:	f7ff fbc5 	bl	8000be4 <Error_Handler>
 800145a:	e7f9      	b.n	8001450 <HAL_TIM_Base_MspInit+0xc8>
 800145c:	40000400 	.word	0x40000400
 8001460:	40000800 	.word	0x40000800
 8001464:	40000c00 	.word	0x40000c00
 8001468:	40010400 	.word	0x40010400
 800146c:	58024400 	.word	0x58024400
 8001470:	24006814 	.word	0x24006814
 8001474:	40020088 	.word	0x40020088

08001478 <HAL_TIM_MspPostInit>:
  if(timHandle->Instance==TIM2)
 8001478:	6802      	ldr	r2, [r0, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800147a:	2300      	movs	r3, #0
{
 800147c:	b510      	push	{r4, lr}
  if(timHandle->Instance==TIM2)
 800147e:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
{
 8001482:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001484:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8001488:	e9cd 3306 	strd	r3, r3, [sp, #24]
 800148c:	9308      	str	r3, [sp, #32]
  if(timHandle->Instance==TIM2)
 800148e:	d007      	beq.n	80014a0 <HAL_TIM_MspPostInit+0x28>
  else if(timHandle->Instance==TIM3)
 8001490:	4b2d      	ldr	r3, [pc, #180]	; (8001548 <HAL_TIM_MspPostInit+0xd0>)
 8001492:	429a      	cmp	r2, r3
 8001494:	d01b      	beq.n	80014ce <HAL_TIM_MspPostInit+0x56>
  else if(timHandle->Instance==TIM8)
 8001496:	4b2d      	ldr	r3, [pc, #180]	; (800154c <HAL_TIM_MspPostInit+0xd4>)
 8001498:	429a      	cmp	r2, r3
 800149a:	d031      	beq.n	8001500 <HAL_TIM_MspPostInit+0x88>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800149c:	b00a      	add	sp, #40	; 0x28
 800149e:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014a0:	4b2b      	ldr	r3, [pc, #172]	; (8001550 <HAL_TIM_MspPostInit+0xd8>)
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80014a2:	2401      	movs	r4, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014a4:	a904      	add	r1, sp, #16
 80014a6:	482b      	ldr	r0, [pc, #172]	; (8001554 <HAL_TIM_MspPostInit+0xdc>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014a8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80014ac:	4322      	orrs	r2, r4
 80014ae:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80014b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80014b6:	9408      	str	r4, [sp, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014b8:	4023      	ands	r3, r4
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80014ba:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 8001538 <HAL_TIM_MspPostInit+0xc0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014be:	9301      	str	r3, [sp, #4]
 80014c0:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80014c2:	ed8d 7b04 	vstr	d7, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c6:	f001 fad5 	bl	8002a74 <HAL_GPIO_Init>
}
 80014ca:	b00a      	add	sp, #40	; 0x28
 80014cc:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ce:	4b20      	ldr	r3, [pc, #128]	; (8001550 <HAL_TIM_MspPostInit+0xd8>)
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80014d0:	2402      	movs	r4, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d2:	a904      	add	r1, sp, #16
 80014d4:	481f      	ldr	r0, [pc, #124]	; (8001554 <HAL_TIM_MspPostInit+0xdc>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014d6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80014da:	f042 0201 	orr.w	r2, r2, #1
 80014de:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80014e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80014e6:	9408      	str	r4, [sp, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014e8:	f003 0301 	and.w	r3, r3, #1
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80014ec:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8001540 <HAL_TIM_MspPostInit+0xc8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014f0:	9302      	str	r3, [sp, #8]
 80014f2:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80014f4:	ed8d 7b04 	vstr	d7, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014f8:	f001 fabc 	bl	8002a74 <HAL_GPIO_Init>
}
 80014fc:	b00a      	add	sp, #40	; 0x28
 80014fe:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001500:	4b13      	ldr	r3, [pc, #76]	; (8001550 <HAL_TIM_MspPostInit+0xd8>)
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001502:	2403      	movs	r4, #3
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001504:	a904      	add	r1, sp, #16
 8001506:	4814      	ldr	r0, [pc, #80]	; (8001558 <HAL_TIM_MspPostInit+0xe0>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001508:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800150c:	f042 0204 	orr.w	r2, r2, #4
 8001510:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001514:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001518:	9408      	str	r4, [sp, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800151a:	f003 0304 	and.w	r3, r3, #4
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800151e:	ed9f 7b08 	vldr	d7, [pc, #32]	; 8001540 <HAL_TIM_MspPostInit+0xc8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001522:	9303      	str	r3, [sp, #12]
 8001524:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001526:	ed8d 7b04 	vstr	d7, [sp, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800152a:	f001 faa3 	bl	8002a74 <HAL_GPIO_Init>
}
 800152e:	b00a      	add	sp, #40	; 0x28
 8001530:	bd10      	pop	{r4, pc}
 8001532:	bf00      	nop
 8001534:	f3af 8000 	nop.w
 8001538:	00000001 	.word	0x00000001
 800153c:	00000002 	.word	0x00000002
 8001540:	00000040 	.word	0x00000040
 8001544:	00000002 	.word	0x00000002
 8001548:	40000400 	.word	0x40000400
 800154c:	40010400 	.word	0x40010400
 8001550:	58024400 	.word	0x58024400
 8001554:	58020000 	.word	0x58020000
 8001558:	58020800 	.word	0x58020800
 800155c:	00000000 	.word	0x00000000

08001560 <MX_TIM3_Init>:
{
 8001560:	b500      	push	{lr}
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001562:	2300      	movs	r3, #0
{
 8001564:	b093      	sub	sp, #76	; 0x4c
  htim3.Instance = TIM3;
 8001566:	4838      	ldr	r0, [pc, #224]	; (8001648 <MX_TIM3_Init+0xe8>)
  htim3.Init.Period = 479;
 8001568:	f240 12df 	movw	r2, #479	; 0x1df
  htim3.Instance = TIM3;
 800156c:	4937      	ldr	r1, [pc, #220]	; (800164c <MX_TIM3_Init+0xec>)
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800156e:	9304      	str	r3, [sp, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001570:	9301      	str	r3, [sp, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001572:	930a      	str	r3, [sp, #40]	; 0x28
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001574:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001576:	6183      	str	r3, [r0, #24]
  htim3.Init.Prescaler = 0;
 8001578:	e9c0 1300 	strd	r1, r3, [r0]
  htim3.Init.Period = 479;
 800157c:	e9c0 3202 	strd	r3, r2, [r0, #8]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001580:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8001584:	e9cd 3307 	strd	r3, r3, [sp, #28]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001588:	e9cd 3302 	strd	r3, r3, [sp, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800158c:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
 8001590:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
 8001594:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001598:	f004 f85c 	bl	8005654 <HAL_TIM_Base_Init>
 800159c:	2800      	cmp	r0, #0
 800159e:	d12e      	bne.n	80015fe <MX_TIM3_Init+0x9e>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80015a0:	4829      	ldr	r0, [pc, #164]	; (8001648 <MX_TIM3_Init+0xe8>)
 80015a2:	f004 f919 	bl	80057d8 <HAL_TIM_PWM_Init>
 80015a6:	2800      	cmp	r0, #0
 80015a8:	d130      	bne.n	800160c <MX_TIM3_Init+0xac>
  if (HAL_TIM_OnePulse_Init(&htim3, TIM_OPMODE_SINGLE) != HAL_OK)
 80015aa:	2108      	movs	r1, #8
 80015ac:	4826      	ldr	r0, [pc, #152]	; (8001648 <MX_TIM3_Init+0xe8>)
 80015ae:	f004 fa9b 	bl	8005ae8 <HAL_TIM_OnePulse_Init>
 80015b2:	2800      	cmp	r0, #0
 80015b4:	d132      	bne.n	800161c <MX_TIM3_Init+0xbc>
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 80015b6:	2206      	movs	r2, #6
 80015b8:	2310      	movs	r3, #16
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 80015ba:	a904      	add	r1, sp, #16
 80015bc:	4822      	ldr	r0, [pc, #136]	; (8001648 <MX_TIM3_Init+0xe8>)
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 80015be:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 80015c2:	f004 fb4f 	bl	8005c64 <HAL_TIM_SlaveConfigSynchro>
 80015c6:	2800      	cmp	r0, #0
 80015c8:	d136      	bne.n	8001638 <MX_TIM3_Init+0xd8>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015ca:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80015cc:	a901      	add	r1, sp, #4
 80015ce:	481e      	ldr	r0, [pc, #120]	; (8001648 <MX_TIM3_Init+0xe8>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015d0:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015d2:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80015d4:	f004 fd62 	bl	800609c <HAL_TIMEx_MasterConfigSynchronization>
 80015d8:	bb58      	cbnz	r0, 8001632 <MX_TIM3_Init+0xd2>
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015da:	2200      	movs	r2, #0
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015dc:	a90a      	add	r1, sp, #40	; 0x28
 80015de:	481a      	ldr	r0, [pc, #104]	; (8001648 <MX_TIM3_Init+0xe8>)
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015e0:	920c      	str	r2, [sp, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015e2:	920e      	str	r2, [sp, #56]	; 0x38
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015e4:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8001640 <MX_TIM3_Init+0xe0>
 80015e8:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015ec:	f004 fc36 	bl	8005e5c <HAL_TIM_PWM_ConfigChannel>
 80015f0:	b9b8      	cbnz	r0, 8001622 <MX_TIM3_Init+0xc2>
  HAL_TIM_MspPostInit(&htim3);
 80015f2:	4815      	ldr	r0, [pc, #84]	; (8001648 <MX_TIM3_Init+0xe8>)
 80015f4:	f7ff ff40 	bl	8001478 <HAL_TIM_MspPostInit>
}
 80015f8:	b013      	add	sp, #76	; 0x4c
 80015fa:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80015fe:	f7ff faf1 	bl	8000be4 <Error_Handler>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001602:	4811      	ldr	r0, [pc, #68]	; (8001648 <MX_TIM3_Init+0xe8>)
 8001604:	f004 f8e8 	bl	80057d8 <HAL_TIM_PWM_Init>
 8001608:	2800      	cmp	r0, #0
 800160a:	d0ce      	beq.n	80015aa <MX_TIM3_Init+0x4a>
    Error_Handler();
 800160c:	f7ff faea 	bl	8000be4 <Error_Handler>
  if (HAL_TIM_OnePulse_Init(&htim3, TIM_OPMODE_SINGLE) != HAL_OK)
 8001610:	2108      	movs	r1, #8
 8001612:	480d      	ldr	r0, [pc, #52]	; (8001648 <MX_TIM3_Init+0xe8>)
 8001614:	f004 fa68 	bl	8005ae8 <HAL_TIM_OnePulse_Init>
 8001618:	2800      	cmp	r0, #0
 800161a:	d0cc      	beq.n	80015b6 <MX_TIM3_Init+0x56>
    Error_Handler();
 800161c:	f7ff fae2 	bl	8000be4 <Error_Handler>
 8001620:	e7c9      	b.n	80015b6 <MX_TIM3_Init+0x56>
    Error_Handler();
 8001622:	f7ff fadf 	bl	8000be4 <Error_Handler>
  HAL_TIM_MspPostInit(&htim3);
 8001626:	4808      	ldr	r0, [pc, #32]	; (8001648 <MX_TIM3_Init+0xe8>)
 8001628:	f7ff ff26 	bl	8001478 <HAL_TIM_MspPostInit>
}
 800162c:	b013      	add	sp, #76	; 0x4c
 800162e:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001632:	f7ff fad7 	bl	8000be4 <Error_Handler>
 8001636:	e7d0      	b.n	80015da <MX_TIM3_Init+0x7a>
    Error_Handler();
 8001638:	f7ff fad4 	bl	8000be4 <Error_Handler>
 800163c:	e7c5      	b.n	80015ca <MX_TIM3_Init+0x6a>
 800163e:	bf00      	nop
 8001640:	00000060 	.word	0x00000060
 8001644:	00000001 	.word	0x00000001
 8001648:	240068d8 	.word	0x240068d8
 800164c:	40000400 	.word	0x40000400

08001650 <MX_TIM8_Init>:
{
 8001650:	b510      	push	{r4, lr}
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001652:	2400      	movs	r4, #0
{
 8001654:	b0a0      	sub	sp, #128	; 0x80
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001656:	2234      	movs	r2, #52	; 0x34
 8001658:	4621      	mov	r1, r4
 800165a:	a812      	add	r0, sp, #72	; 0x48
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800165c:	9404      	str	r4, [sp, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800165e:	9400      	str	r4, [sp, #0]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001660:	940a      	str	r4, [sp, #40]	; 0x28
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001662:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8001666:	e9cd 4407 	strd	r4, r4, [sp, #28]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800166a:	e9cd 4401 	strd	r4, r4, [sp, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800166e:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 8001672:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
 8001676:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800167a:	f009 fa0a 	bl	800aa92 <memset>
  htim8.Instance = TIM8;
 800167e:	4846      	ldr	r0, [pc, #280]	; (8001798 <MX_TIM8_Init+0x148>)
 8001680:	4b46      	ldr	r3, [pc, #280]	; (800179c <MX_TIM8_Init+0x14c>)
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001682:	6104      	str	r4, [r0, #16]
  htim8.Instance = TIM8;
 8001684:	6003      	str	r3, [r0, #0]
  htim8.Init.Period = 53;
 8001686:	2335      	movs	r3, #53	; 0x35
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001688:	6184      	str	r4, [r0, #24]
  htim8.Init.Period = 53;
 800168a:	60c3      	str	r3, [r0, #12]
  htim8.Init.RepetitionCounter = 7;
 800168c:	2307      	movs	r3, #7
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800168e:	e9c0 4401 	strd	r4, r4, [r0, #4]
  htim8.Init.RepetitionCounter = 7;
 8001692:	6143      	str	r3, [r0, #20]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001694:	f003 ffde 	bl	8005654 <HAL_TIM_Base_Init>
 8001698:	2800      	cmp	r0, #0
 800169a:	d14d      	bne.n	8001738 <MX_TIM8_Init+0xe8>
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800169c:	483e      	ldr	r0, [pc, #248]	; (8001798 <MX_TIM8_Init+0x148>)
 800169e:	f004 f89b 	bl	80057d8 <HAL_TIM_PWM_Init>
 80016a2:	2800      	cmp	r0, #0
 80016a4:	d14f      	bne.n	8001746 <MX_TIM8_Init+0xf6>
  if (HAL_TIM_OnePulse_Init(&htim8, TIM_OPMODE_SINGLE) != HAL_OK)
 80016a6:	2108      	movs	r1, #8
 80016a8:	483b      	ldr	r0, [pc, #236]	; (8001798 <MX_TIM8_Init+0x148>)
 80016aa:	f004 fa1d 	bl	8005ae8 <HAL_TIM_OnePulse_Init>
 80016ae:	2800      	cmp	r0, #0
 80016b0:	d151      	bne.n	8001756 <MX_TIM8_Init+0x106>
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 80016b2:	2206      	movs	r2, #6
 80016b4:	2320      	movs	r3, #32
  if (HAL_TIM_SlaveConfigSynchro(&htim8, &sSlaveConfig) != HAL_OK)
 80016b6:	a904      	add	r1, sp, #16
 80016b8:	4837      	ldr	r0, [pc, #220]	; (8001798 <MX_TIM8_Init+0x148>)
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 80016ba:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim8, &sSlaveConfig) != HAL_OK)
 80016be:	f004 fad1 	bl	8005c64 <HAL_TIM_SlaveConfigSynchro>
 80016c2:	2800      	cmp	r0, #0
 80016c4:	d157      	bne.n	8001776 <MX_TIM8_Init+0x126>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1REF;
 80016c6:	2300      	movs	r3, #0
 80016c8:	2240      	movs	r2, #64	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80016ca:	4669      	mov	r1, sp
 80016cc:	4832      	ldr	r0, [pc, #200]	; (8001798 <MX_TIM8_Init+0x148>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1REF;
 80016ce:	e9cd 2300 	strd	r2, r3, [sp]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016d2:	2300      	movs	r3, #0
 80016d4:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80016d6:	f004 fce1 	bl	800609c <HAL_TIMEx_MasterConfigSynchronization>
 80016da:	2800      	cmp	r0, #0
 80016dc:	d148      	bne.n	8001770 <MX_TIM8_Init+0x120>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016de:	2060      	movs	r0, #96	; 0x60
  sConfigOC.Pulse = 40;
 80016e0:	2328      	movs	r3, #40	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016e2:	2200      	movs	r2, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016e4:	900a      	str	r0, [sp, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016e6:	eb0d 0103 	add.w	r1, sp, r3
 80016ea:	482b      	ldr	r0, [pc, #172]	; (8001798 <MX_TIM8_Init+0x148>)
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80016ec:	920d      	str	r2, [sp, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80016ee:	9210      	str	r2, [sp, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80016f0:	ed9f 7b23 	vldr	d7, [pc, #140]	; 8001780 <MX_TIM8_Init+0x130>
  sConfigOC.Pulse = 40;
 80016f4:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80016f8:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016fc:	f004 fbae 	bl	8005e5c <HAL_TIM_PWM_ConfigChannel>
 8001700:	2800      	cmp	r0, #0
 8001702:	d132      	bne.n	800176a <MX_TIM8_Init+0x11a>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001704:	2300      	movs	r3, #0
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001706:	a912      	add	r1, sp, #72	; 0x48
 8001708:	4823      	ldr	r0, [pc, #140]	; (8001798 <MX_TIM8_Init+0x148>)
  sBreakDeadTimeConfig.BreakFilter = 0;
 800170a:	9318      	str	r3, [sp, #96]	; 0x60
  sBreakDeadTimeConfig.Break2Filter = 0;
 800170c:	931c      	str	r3, [sp, #112]	; 0x70
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800170e:	931e      	str	r3, [sp, #120]	; 0x78
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001710:	ed9f 7b1d 	vldr	d7, [pc, #116]	; 8001788 <MX_TIM8_Init+0x138>
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001714:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
  sBreakDeadTimeConfig.DeadTime = 0;
 8001718:	e9cd 3314 	strd	r3, r3, [sp, #80]	; 0x50
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800171c:	ed8d 7b16 	vstr	d7, [sp, #88]	; 0x58
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001720:	ed9f 7b1b 	vldr	d7, [pc, #108]	; 8001790 <MX_TIM8_Init+0x140>
 8001724:	ed8d 7b1a 	vstr	d7, [sp, #104]	; 0x68
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001728:	f004 fd1c 	bl	8006164 <HAL_TIMEx_ConfigBreakDeadTime>
 800172c:	b9b0      	cbnz	r0, 800175c <MX_TIM8_Init+0x10c>
  HAL_TIM_MspPostInit(&htim8);
 800172e:	481a      	ldr	r0, [pc, #104]	; (8001798 <MX_TIM8_Init+0x148>)
 8001730:	f7ff fea2 	bl	8001478 <HAL_TIM_MspPostInit>
}
 8001734:	b020      	add	sp, #128	; 0x80
 8001736:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001738:	f7ff fa54 	bl	8000be4 <Error_Handler>
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800173c:	4816      	ldr	r0, [pc, #88]	; (8001798 <MX_TIM8_Init+0x148>)
 800173e:	f004 f84b 	bl	80057d8 <HAL_TIM_PWM_Init>
 8001742:	2800      	cmp	r0, #0
 8001744:	d0af      	beq.n	80016a6 <MX_TIM8_Init+0x56>
    Error_Handler();
 8001746:	f7ff fa4d 	bl	8000be4 <Error_Handler>
  if (HAL_TIM_OnePulse_Init(&htim8, TIM_OPMODE_SINGLE) != HAL_OK)
 800174a:	2108      	movs	r1, #8
 800174c:	4812      	ldr	r0, [pc, #72]	; (8001798 <MX_TIM8_Init+0x148>)
 800174e:	f004 f9cb 	bl	8005ae8 <HAL_TIM_OnePulse_Init>
 8001752:	2800      	cmp	r0, #0
 8001754:	d0ad      	beq.n	80016b2 <MX_TIM8_Init+0x62>
    Error_Handler();
 8001756:	f7ff fa45 	bl	8000be4 <Error_Handler>
 800175a:	e7aa      	b.n	80016b2 <MX_TIM8_Init+0x62>
    Error_Handler();
 800175c:	f7ff fa42 	bl	8000be4 <Error_Handler>
  HAL_TIM_MspPostInit(&htim8);
 8001760:	480d      	ldr	r0, [pc, #52]	; (8001798 <MX_TIM8_Init+0x148>)
 8001762:	f7ff fe89 	bl	8001478 <HAL_TIM_MspPostInit>
}
 8001766:	b020      	add	sp, #128	; 0x80
 8001768:	bd10      	pop	{r4, pc}
    Error_Handler();
 800176a:	f7ff fa3b 	bl	8000be4 <Error_Handler>
 800176e:	e7c9      	b.n	8001704 <MX_TIM8_Init+0xb4>
    Error_Handler();
 8001770:	f7ff fa38 	bl	8000be4 <Error_Handler>
 8001774:	e7b3      	b.n	80016de <MX_TIM8_Init+0x8e>
    Error_Handler();
 8001776:	f7ff fa35 	bl	8000be4 <Error_Handler>
 800177a:	e7a4      	b.n	80016c6 <MX_TIM8_Init+0x76>
 800177c:	f3af 8000 	nop.w
 8001780:	00000004 	.word	0x00000004
	...
 800178c:	00002000 	.word	0x00002000
 8001790:	00000000 	.word	0x00000000
 8001794:	02000000 	.word	0x02000000
 8001798:	240069bc 	.word	0x240069bc
 800179c:	40010400 	.word	0x40010400

080017a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80017a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017d8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80017a4:	f7ff fc1a 	bl	8000fdc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017a8:	480c      	ldr	r0, [pc, #48]	; (80017dc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017aa:	490d      	ldr	r1, [pc, #52]	; (80017e0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80017ac:	4a0d      	ldr	r2, [pc, #52]	; (80017e4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80017ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017b0:	e002      	b.n	80017b8 <LoopCopyDataInit>

080017b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017b6:	3304      	adds	r3, #4

080017b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017bc:	d3f9      	bcc.n	80017b2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017be:	4a0a      	ldr	r2, [pc, #40]	; (80017e8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017c0:	4c0a      	ldr	r4, [pc, #40]	; (80017ec <LoopFillZerobss+0x22>)
  movs r3, #0
 80017c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017c4:	e001      	b.n	80017ca <LoopFillZerobss>

080017c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017c8:	3204      	adds	r2, #4

080017ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017cc:	d3fb      	bcc.n	80017c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017ce:	f009 f9c9 	bl	800ab64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017d2:	f7fe fed1 	bl	8000578 <main>
  bx  lr
 80017d6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80017d8:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80017dc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80017e0:	240067ec 	.word	0x240067ec
  ldr r2, =_sidata
 80017e4:	0801fe34 	.word	0x0801fe34
  ldr r2, =_sbss
 80017e8:	240067f0 	.word	0x240067f0
  ldr r4, =_ebss
 80017ec:	24008768 	.word	0x24008768

080017f0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017f0:	e7fe      	b.n	80017f0 <ADC3_IRQHandler>
	...

080017f4 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80017f4:	4b0f      	ldr	r3, [pc, #60]	; (8001834 <HAL_InitTick+0x40>)
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	b90b      	cbnz	r3, 80017fe <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 80017fa:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80017fc:	4770      	bx	lr
{
 80017fe:	b510      	push	{r4, lr}
 8001800:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001802:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001806:	4a0c      	ldr	r2, [pc, #48]	; (8001838 <HAL_InitTick+0x44>)
 8001808:	fbb0 f3f3 	udiv	r3, r0, r3
 800180c:	6810      	ldr	r0, [r2, #0]
 800180e:	fbb0 f0f3 	udiv	r0, r0, r3
 8001812:	f000 f8cd 	bl	80019b0 <HAL_SYSTICK_Config>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001816:	2c0f      	cmp	r4, #15
 8001818:	d800      	bhi.n	800181c <HAL_InitTick+0x28>
 800181a:	b108      	cbz	r0, 8001820 <HAL_InitTick+0x2c>
    return HAL_ERROR;
 800181c:	2001      	movs	r0, #1
}
 800181e:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001820:	2200      	movs	r2, #0
 8001822:	4621      	mov	r1, r4
 8001824:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001828:	f000 f876 	bl	8001918 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800182c:	4b03      	ldr	r3, [pc, #12]	; (800183c <HAL_InitTick+0x48>)
 800182e:	2000      	movs	r0, #0
 8001830:	601c      	str	r4, [r3, #0]
}
 8001832:	bd10      	pop	{r4, pc}
 8001834:	2400652e 	.word	0x2400652e
 8001838:	24000100 	.word	0x24000100
 800183c:	24006530 	.word	0x24006530

08001840 <HAL_Init>:
{
 8001840:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001842:	2003      	movs	r0, #3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001844:	4c12      	ldr	r4, [pc, #72]	; (8001890 <HAL_Init+0x50>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001846:	f000 f855 	bl	80018f4 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800184a:	f002 fd99 	bl	8004380 <HAL_RCC_GetSysClockFreq>
 800184e:	4b11      	ldr	r3, [pc, #68]	; (8001894 <HAL_Init+0x54>)
 8001850:	4911      	ldr	r1, [pc, #68]	; (8001898 <HAL_Init+0x58>)
 8001852:	699a      	ldr	r2, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001854:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001856:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800185a:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800185e:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001860:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001862:	f002 021f 	and.w	r2, r2, #31
  SystemCoreClock = common_system_clock;
 8001866:	490d      	ldr	r1, [pc, #52]	; (800189c <HAL_Init+0x5c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001868:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800186c:	40d0      	lsrs	r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800186e:	fa20 f303 	lsr.w	r3, r0, r3
  SystemCoreClock = common_system_clock;
 8001872:	6008      	str	r0, [r1, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001874:	200f      	movs	r0, #15
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001876:	6023      	str	r3, [r4, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001878:	f7ff ffbc 	bl	80017f4 <HAL_InitTick>
 800187c:	b110      	cbz	r0, 8001884 <HAL_Init+0x44>
    return HAL_ERROR;
 800187e:	2401      	movs	r4, #1
}
 8001880:	4620      	mov	r0, r4
 8001882:	bd10      	pop	{r4, pc}
 8001884:	4604      	mov	r4, r0
  HAL_MspInit();
 8001886:	f7ff fb19 	bl	8000ebc <HAL_MspInit>
}
 800188a:	4620      	mov	r0, r4
 800188c:	bd10      	pop	{r4, pc}
 800188e:	bf00      	nop
 8001890:	24000104 	.word	0x24000104
 8001894:	58024400 	.word	0x58024400
 8001898:	0800ca70 	.word	0x0800ca70
 800189c:	24000100 	.word	0x24000100

080018a0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 80018a0:	4a03      	ldr	r2, [pc, #12]	; (80018b0 <HAL_IncTick+0x10>)
 80018a2:	4b04      	ldr	r3, [pc, #16]	; (80018b4 <HAL_IncTick+0x14>)
 80018a4:	6811      	ldr	r1, [r2, #0]
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	440b      	add	r3, r1
 80018aa:	6013      	str	r3, [r2, #0]
}
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	24006a08 	.word	0x24006a08
 80018b4:	2400652e 	.word	0x2400652e

080018b8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80018b8:	4b01      	ldr	r3, [pc, #4]	; (80018c0 <HAL_GetTick+0x8>)
 80018ba:	6818      	ldr	r0, [r3, #0]
}
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	24006a08 	.word	0x24006a08

080018c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018c4:	b538      	push	{r3, r4, r5, lr}
 80018c6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80018c8:	f7ff fff6 	bl	80018b8 <HAL_GetTick>
 80018cc:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018ce:	1c63      	adds	r3, r4, #1
 80018d0:	d002      	beq.n	80018d8 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80018d2:	4b04      	ldr	r3, [pc, #16]	; (80018e4 <HAL_Delay+0x20>)
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018d8:	f7ff ffee 	bl	80018b8 <HAL_GetTick>
 80018dc:	1b43      	subs	r3, r0, r5
 80018de:	42a3      	cmp	r3, r4
 80018e0:	d3fa      	bcc.n	80018d8 <HAL_Delay+0x14>
  {
  }
}
 80018e2:	bd38      	pop	{r3, r4, r5, pc}
 80018e4:	2400652e 	.word	0x2400652e

080018e8 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 80018e8:	4b01      	ldr	r3, [pc, #4]	; (80018f0 <HAL_GetREVID+0x8>)
 80018ea:	6818      	ldr	r0, [r3, #0]
}
 80018ec:	0c00      	lsrs	r0, r0, #16
 80018ee:	4770      	bx	lr
 80018f0:	5c001000 	.word	0x5c001000

080018f4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018f4:	4906      	ldr	r1, [pc, #24]	; (8001910 <HAL_NVIC_SetPriorityGrouping+0x1c>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018f6:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018fa:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
 80018fc:	4b05      	ldr	r3, [pc, #20]	; (8001914 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018fe:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001900:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001904:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001908:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
 800190a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800190c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800190e:	4770      	bx	lr
 8001910:	e000ed00 	.word	0xe000ed00
 8001914:	05fa0000 	.word	0x05fa0000

08001918 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001918:	4b1b      	ldr	r3, [pc, #108]	; (8001988 <HAL_NVIC_SetPriority+0x70>)
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001920:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001922:	f1c3 0e07 	rsb	lr, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001926:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800192a:	f1be 0f04 	cmp.w	lr, #4
 800192e:	bf28      	it	cs
 8001930:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001934:	f1bc 0f06 	cmp.w	ip, #6
 8001938:	d91a      	bls.n	8001970 <HAL_NVIC_SetPriority+0x58>
 800193a:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800193c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8001940:	fa0c fc03 	lsl.w	ip, ip, r3
 8001944:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001948:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
  if ((int32_t)(IRQn) >= 0)
 800194c:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800194e:	fa0c fc0e 	lsl.w	ip, ip, lr
 8001952:	ea21 010c 	bic.w	r1, r1, ip
 8001956:	fa01 f103 	lsl.w	r1, r1, r3
 800195a:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 800195e:	db0a      	blt.n	8001976 <HAL_NVIC_SetPriority+0x5e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001960:	0109      	lsls	r1, r1, #4
 8001962:	4b0a      	ldr	r3, [pc, #40]	; (800198c <HAL_NVIC_SetPriority+0x74>)
 8001964:	b2c9      	uxtb	r1, r1
 8001966:	4403      	add	r3, r0
 8001968:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800196c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001970:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001972:	4613      	mov	r3, r2
 8001974:	e7e8      	b.n	8001948 <HAL_NVIC_SetPriority+0x30>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001976:	f000 000f 	and.w	r0, r0, #15
 800197a:	0109      	lsls	r1, r1, #4
 800197c:	4b04      	ldr	r3, [pc, #16]	; (8001990 <HAL_NVIC_SetPriority+0x78>)
 800197e:	b2c9      	uxtb	r1, r1
 8001980:	4403      	add	r3, r0
 8001982:	7619      	strb	r1, [r3, #24]
 8001984:	f85d fb04 	ldr.w	pc, [sp], #4
 8001988:	e000ed00 	.word	0xe000ed00
 800198c:	e000e100 	.word	0xe000e100
 8001990:	e000ecfc 	.word	0xe000ecfc

08001994 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001994:	2800      	cmp	r0, #0
 8001996:	db07      	blt.n	80019a8 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001998:	2301      	movs	r3, #1
 800199a:	f000 011f 	and.w	r1, r0, #31
 800199e:	4a03      	ldr	r2, [pc, #12]	; (80019ac <HAL_NVIC_EnableIRQ+0x18>)
 80019a0:	0940      	lsrs	r0, r0, #5
 80019a2:	408b      	lsls	r3, r1
 80019a4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	e000e100 	.word	0xe000e100

080019b0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019b0:	1e43      	subs	r3, r0, #1
 80019b2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019b6:	d20c      	bcs.n	80019d2 <HAL_SYSTICK_Config+0x22>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019b8:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019bc:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019be:	4906      	ldr	r1, [pc, #24]	; (80019d8 <HAL_SYSTICK_Config+0x28>)
 80019c0:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019c4:	6153      	str	r3, [r2, #20]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019c6:	2307      	movs	r3, #7
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019c8:	f881 c023 	strb.w	ip, [r1, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019cc:	6190      	str	r0, [r2, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019ce:	6113      	str	r3, [r2, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019d0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80019d2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop
 80019d8:	e000ed00 	.word	0xe000ed00

080019dc <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80019dc:	6802      	ldr	r2, [r0, #0]
{
 80019de:	4601      	mov	r1, r0
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80019e0:	4b32      	ldr	r3, [pc, #200]	; (8001aac <DMA_CalcBaseAndBitshift+0xd0>)
 80019e2:	4833      	ldr	r0, [pc, #204]	; (8001ab0 <DMA_CalcBaseAndBitshift+0xd4>)
{
 80019e4:	b470      	push	{r4, r5, r6}
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80019e6:	4e33      	ldr	r6, [pc, #204]	; (8001ab4 <DMA_CalcBaseAndBitshift+0xd8>)
 80019e8:	4d33      	ldr	r5, [pc, #204]	; (8001ab8 <DMA_CalcBaseAndBitshift+0xdc>)
 80019ea:	42b2      	cmp	r2, r6
 80019ec:	bf18      	it	ne
 80019ee:	429a      	cmpne	r2, r3
 80019f0:	4c32      	ldr	r4, [pc, #200]	; (8001abc <DMA_CalcBaseAndBitshift+0xe0>)
 80019f2:	bf0c      	ite	eq
 80019f4:	2301      	moveq	r3, #1
 80019f6:	2300      	movne	r3, #0
 80019f8:	42aa      	cmp	r2, r5
 80019fa:	bf08      	it	eq
 80019fc:	f043 0301 	orreq.w	r3, r3, #1
 8001a00:	42a2      	cmp	r2, r4
 8001a02:	bf08      	it	eq
 8001a04:	f043 0301 	orreq.w	r3, r3, #1
 8001a08:	3430      	adds	r4, #48	; 0x30
 8001a0a:	4282      	cmp	r2, r0
 8001a0c:	bf08      	it	eq
 8001a0e:	f043 0301 	orreq.w	r3, r3, #1
 8001a12:	3030      	adds	r0, #48	; 0x30
 8001a14:	42a2      	cmp	r2, r4
 8001a16:	bf08      	it	eq
 8001a18:	f043 0301 	orreq.w	r3, r3, #1
 8001a1c:	3430      	adds	r4, #48	; 0x30
 8001a1e:	4282      	cmp	r2, r0
 8001a20:	bf08      	it	eq
 8001a22:	f043 0301 	orreq.w	r3, r3, #1
 8001a26:	f500 705c 	add.w	r0, r0, #880	; 0x370
 8001a2a:	42a2      	cmp	r2, r4
 8001a2c:	bf08      	it	eq
 8001a2e:	f043 0301 	orreq.w	r3, r3, #1
 8001a32:	f504 745c 	add.w	r4, r4, #880	; 0x370
 8001a36:	4282      	cmp	r2, r0
 8001a38:	bf08      	it	eq
 8001a3a:	f043 0301 	orreq.w	r3, r3, #1
 8001a3e:	3030      	adds	r0, #48	; 0x30
 8001a40:	42a2      	cmp	r2, r4
 8001a42:	bf08      	it	eq
 8001a44:	f043 0301 	orreq.w	r3, r3, #1
 8001a48:	3430      	adds	r4, #48	; 0x30
 8001a4a:	4282      	cmp	r2, r0
 8001a4c:	bf08      	it	eq
 8001a4e:	f043 0301 	orreq.w	r3, r3, #1
 8001a52:	3030      	adds	r0, #48	; 0x30
 8001a54:	42a2      	cmp	r2, r4
 8001a56:	bf08      	it	eq
 8001a58:	f043 0301 	orreq.w	r3, r3, #1
 8001a5c:	3430      	adds	r4, #48	; 0x30
 8001a5e:	4282      	cmp	r2, r0
 8001a60:	bf08      	it	eq
 8001a62:	f043 0301 	orreq.w	r3, r3, #1
 8001a66:	3030      	adds	r0, #48	; 0x30
 8001a68:	42a2      	cmp	r2, r4
 8001a6a:	bf08      	it	eq
 8001a6c:	f043 0301 	orreq.w	r3, r3, #1
 8001a70:	4282      	cmp	r2, r0
 8001a72:	bf08      	it	eq
 8001a74:	f043 0301 	orreq.w	r3, r3, #1
 8001a78:	b913      	cbnz	r3, 8001a80 <DMA_CalcBaseAndBitshift+0xa4>
 8001a7a:	4b11      	ldr	r3, [pc, #68]	; (8001ac0 <DMA_CalcBaseAndBitshift+0xe4>)
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d112      	bne.n	8001aa6 <DMA_CalcBaseAndBitshift+0xca>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8001a80:	b2d3      	uxtb	r3, r2
 8001a82:	4810      	ldr	r0, [pc, #64]	; (8001ac4 <DMA_CalcBaseAndBitshift+0xe8>)

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8001a84:	4c10      	ldr	r4, [pc, #64]	; (8001ac8 <DMA_CalcBaseAndBitshift+0xec>)
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8001a86:	3b10      	subs	r3, #16
 8001a88:	fba0 5003 	umull	r5, r0, r0, r3

    if (stream_number > 3U)
 8001a8c:	2b5f      	cmp	r3, #95	; 0x5f
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8001a8e:	ea4f 1010 	mov.w	r0, r0, lsr #4
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8001a92:	5c20      	ldrb	r0, [r4, r0]
 8001a94:	65c8      	str	r0, [r1, #92]	; 0x5c
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8001a96:	480d      	ldr	r0, [pc, #52]	; (8001acc <DMA_CalcBaseAndBitshift+0xf0>)
 8001a98:	ea00 0002 	and.w	r0, r0, r2
 8001a9c:	bf88      	it	hi
 8001a9e:	3004      	addhi	r0, #4
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8001aa0:	6588      	str	r0, [r1, #88]	; 0x58
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
  }

  return hdma->StreamBaseAddress;
}
 8001aa2:	bc70      	pop	{r4, r5, r6}
 8001aa4:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8001aa6:	f022 00ff 	bic.w	r0, r2, #255	; 0xff
 8001aaa:	e7f9      	b.n	8001aa0 <DMA_CalcBaseAndBitshift+0xc4>
 8001aac:	40020010 	.word	0x40020010
 8001ab0:	40020070 	.word	0x40020070
 8001ab4:	40020028 	.word	0x40020028
 8001ab8:	40020040 	.word	0x40020040
 8001abc:	40020058 	.word	0x40020058
 8001ac0:	400204b8 	.word	0x400204b8
 8001ac4:	aaaaaaab 	.word	0xaaaaaaab
 8001ac8:	0800ca80 	.word	0x0800ca80
 8001acc:	fffffc00 	.word	0xfffffc00

08001ad0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8001ad0:	6803      	ldr	r3, [r0, #0]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001ad2:	4a27      	ldr	r2, [pc, #156]	; (8001b70 <DMA_CalcDMAMUXChannelBaseAndMask+0xa0>)
 8001ad4:	4927      	ldr	r1, [pc, #156]	; (8001b74 <DMA_CalcDMAMUXChannelBaseAndMask+0xa4>)
{
 8001ad6:	b430      	push	{r4, r5}
  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001ad8:	4d27      	ldr	r5, [pc, #156]	; (8001b78 <DMA_CalcDMAMUXChannelBaseAndMask+0xa8>)
 8001ada:	4c28      	ldr	r4, [pc, #160]	; (8001b7c <DMA_CalcDMAMUXChannelBaseAndMask+0xac>)
 8001adc:	42ab      	cmp	r3, r5
 8001ade:	bf18      	it	ne
 8001ae0:	4293      	cmpne	r3, r2
 8001ae2:	bf0c      	ite	eq
 8001ae4:	2201      	moveq	r2, #1
 8001ae6:	2200      	movne	r2, #0
 8001ae8:	428b      	cmp	r3, r1
 8001aea:	bf08      	it	eq
 8001aec:	f042 0201 	orreq.w	r2, r2, #1
 8001af0:	3128      	adds	r1, #40	; 0x28
 8001af2:	42a3      	cmp	r3, r4
 8001af4:	bf08      	it	eq
 8001af6:	f042 0201 	orreq.w	r2, r2, #1
 8001afa:	3428      	adds	r4, #40	; 0x28
 8001afc:	428b      	cmp	r3, r1
 8001afe:	bf08      	it	eq
 8001b00:	f042 0201 	orreq.w	r2, r2, #1
 8001b04:	3128      	adds	r1, #40	; 0x28
 8001b06:	42a3      	cmp	r3, r4
 8001b08:	bf08      	it	eq
 8001b0a:	f042 0201 	orreq.w	r2, r2, #1
 8001b0e:	428b      	cmp	r3, r1
 8001b10:	bf08      	it	eq
 8001b12:	f042 0201 	orreq.w	r2, r2, #1
 8001b16:	b912      	cbnz	r2, 8001b1e <DMA_CalcDMAMUXChannelBaseAndMask+0x4e>
 8001b18:	4a19      	ldr	r2, [pc, #100]	; (8001b80 <DMA_CalcDMAMUXChannelBaseAndMask+0xb0>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d113      	bne.n	8001b46 <DMA_CalcDMAMUXChannelBaseAndMask+0x76>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8001b1e:	b2db      	uxtb	r3, r3
 8001b20:	4918      	ldr	r1, [pc, #96]	; (8001b84 <DMA_CalcDMAMUXChannelBaseAndMask+0xb4>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8001b22:	4a19      	ldr	r2, [pc, #100]	; (8001b88 <DMA_CalcDMAMUXChannelBaseAndMask+0xb8>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8001b24:	3b08      	subs	r3, #8
 8001b26:	4c19      	ldr	r4, [pc, #100]	; (8001b8c <DMA_CalcDMAMUXChannelBaseAndMask+0xbc>)
 8001b28:	fba1 1303 	umull	r1, r3, r1, r3
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8001b2c:	2101      	movs	r1, #1
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8001b2e:	eb02 1213 	add.w	r2, r2, r3, lsr #4
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8001b32:	f3c3 1304 	ubfx	r3, r3, #4, #5
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8001b36:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8001b38:	fa01 f303 	lsl.w	r3, r1, r3
 8001b3c:	6683      	str	r3, [r0, #104]	; 0x68
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8001b3e:	e9c0 2418 	strd	r2, r4, [r0, #96]	; 0x60
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8001b42:	bc30      	pop	{r4, r5}
 8001b44:	4770      	bx	lr
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8001b46:	b2d9      	uxtb	r1, r3
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8001b48:	4a11      	ldr	r2, [pc, #68]	; (8001b90 <DMA_CalcDMAMUXChannelBaseAndMask+0xc0>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8001b4a:	4c12      	ldr	r4, [pc, #72]	; (8001b94 <DMA_CalcDMAMUXChannelBaseAndMask+0xc4>)
 8001b4c:	3910      	subs	r1, #16
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8001b4e:	441a      	add	r2, r3
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8001b50:	fba4 4101 	umull	r4, r1, r4, r1
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8001b54:	2aa8      	cmp	r2, #168	; 0xa8
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8001b56:	ea4f 1111 	mov.w	r1, r1, lsr #4
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8001b5a:	d800      	bhi.n	8001b5e <DMA_CalcDMAMUXChannelBaseAndMask+0x8e>
      stream_number += 8U;
 8001b5c:	3108      	adds	r1, #8
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8001b5e:	4a0e      	ldr	r2, [pc, #56]	; (8001b98 <DMA_CalcDMAMUXChannelBaseAndMask+0xc8>)
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8001b60:	f001 041f 	and.w	r4, r1, #31
 8001b64:	2301      	movs	r3, #1
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8001b66:	440a      	add	r2, r1
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8001b68:	40a3      	lsls	r3, r4
 8001b6a:	4c0c      	ldr	r4, [pc, #48]	; (8001b9c <DMA_CalcDMAMUXChannelBaseAndMask+0xcc>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8001b6c:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8001b6e:	e7e5      	b.n	8001b3c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>
 8001b70:	58025408 	.word	0x58025408
 8001b74:	58025430 	.word	0x58025430
 8001b78:	5802541c 	.word	0x5802541c
 8001b7c:	58025444 	.word	0x58025444
 8001b80:	58025494 	.word	0x58025494
 8001b84:	cccccccd 	.word	0xcccccccd
 8001b88:	16009600 	.word	0x16009600
 8001b8c:	58025880 	.word	0x58025880
 8001b90:	bffdfbf0 	.word	0xbffdfbf0
 8001b94:	aaaaaaab 	.word	0xaaaaaaab
 8001b98:	10008200 	.word	0x10008200
 8001b9c:	40020880 	.word	0x40020880

08001ba0 <HAL_DMA_Init>:
{
 8001ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ba4:	4605      	mov	r5, r0
 8001ba6:	b083      	sub	sp, #12
  uint32_t tickstart = HAL_GetTick();
 8001ba8:	f7ff fe86 	bl	80018b8 <HAL_GetTick>
  if(hdma == NULL)
 8001bac:	2d00      	cmp	r5, #0
 8001bae:	f000 8192 	beq.w	8001ed6 <HAL_DMA_Init+0x336>
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001bb2:	682c      	ldr	r4, [r5, #0]
 8001bb4:	4606      	mov	r6, r0
 8001bb6:	4ba9      	ldr	r3, [pc, #676]	; (8001e5c <HAL_DMA_Init+0x2bc>)
 8001bb8:	429c      	cmp	r4, r3
 8001bba:	d048      	beq.n	8001c4e <HAL_DMA_Init+0xae>
 8001bbc:	3318      	adds	r3, #24
 8001bbe:	429c      	cmp	r4, r3
 8001bc0:	d045      	beq.n	8001c4e <HAL_DMA_Init+0xae>
 8001bc2:	3330      	adds	r3, #48	; 0x30
 8001bc4:	4aa6      	ldr	r2, [pc, #664]	; (8001e60 <HAL_DMA_Init+0x2c0>)
 8001bc6:	4294      	cmp	r4, r2
 8001bc8:	bf18      	it	ne
 8001bca:	429c      	cmpne	r4, r3
 8001bcc:	f102 0230 	add.w	r2, r2, #48	; 0x30
 8001bd0:	bf0c      	ite	eq
 8001bd2:	2301      	moveq	r3, #1
 8001bd4:	2300      	movne	r3, #0
 8001bd6:	4294      	cmp	r4, r2
 8001bd8:	bf08      	it	eq
 8001bda:	f043 0301 	orreq.w	r3, r3, #1
 8001bde:	3218      	adds	r2, #24
 8001be0:	4294      	cmp	r4, r2
 8001be2:	bf08      	it	eq
 8001be4:	f043 0301 	orreq.w	r3, r3, #1
 8001be8:	3218      	adds	r2, #24
 8001bea:	4294      	cmp	r4, r2
 8001bec:	bf08      	it	eq
 8001bee:	f043 0301 	orreq.w	r3, r3, #1
 8001bf2:	3218      	adds	r2, #24
 8001bf4:	4294      	cmp	r4, r2
 8001bf6:	bf08      	it	eq
 8001bf8:	f043 0301 	orreq.w	r3, r3, #1
 8001bfc:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8001c00:	4294      	cmp	r4, r2
 8001c02:	bf08      	it	eq
 8001c04:	f043 0301 	orreq.w	r3, r3, #1
 8001c08:	3218      	adds	r2, #24
 8001c0a:	4294      	cmp	r4, r2
 8001c0c:	bf08      	it	eq
 8001c0e:	f043 0301 	orreq.w	r3, r3, #1
 8001c12:	3218      	adds	r2, #24
 8001c14:	4294      	cmp	r4, r2
 8001c16:	bf08      	it	eq
 8001c18:	f043 0301 	orreq.w	r3, r3, #1
 8001c1c:	3218      	adds	r2, #24
 8001c1e:	4294      	cmp	r4, r2
 8001c20:	bf08      	it	eq
 8001c22:	f043 0301 	orreq.w	r3, r3, #1
 8001c26:	3218      	adds	r2, #24
 8001c28:	4294      	cmp	r4, r2
 8001c2a:	bf08      	it	eq
 8001c2c:	f043 0301 	orreq.w	r3, r3, #1
 8001c30:	3218      	adds	r2, #24
 8001c32:	4294      	cmp	r4, r2
 8001c34:	bf08      	it	eq
 8001c36:	f043 0301 	orreq.w	r3, r3, #1
 8001c3a:	3218      	adds	r2, #24
 8001c3c:	4294      	cmp	r4, r2
 8001c3e:	bf08      	it	eq
 8001c40:	f043 0301 	orreq.w	r3, r3, #1
 8001c44:	b91b      	cbnz	r3, 8001c4e <HAL_DMA_Init+0xae>
 8001c46:	4b87      	ldr	r3, [pc, #540]	; (8001e64 <HAL_DMA_Init+0x2c4>)
 8001c48:	429c      	cmp	r4, r3
 8001c4a:	f040 818c 	bne.w	8001f66 <HAL_DMA_Init+0x3c6>
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c4e:	2302      	movs	r3, #2
 8001c50:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 8001c54:	2300      	movs	r3, #0
 8001c56:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
    __HAL_DMA_DISABLE(hdma);
 8001c5a:	6823      	ldr	r3, [r4, #0]
 8001c5c:	f023 0301 	bic.w	r3, r3, #1
 8001c60:	6023      	str	r3, [r4, #0]
 8001c62:	e006      	b.n	8001c72 <HAL_DMA_Init+0xd2>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c64:	f7ff fe28 	bl	80018b8 <HAL_GetTick>
 8001c68:	1b80      	subs	r0, r0, r6
 8001c6a:	2805      	cmp	r0, #5
 8001c6c:	f200 811f 	bhi.w	8001eae <HAL_DMA_Init+0x30e>
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001c70:	682c      	ldr	r4, [r5, #0]
 8001c72:	6823      	ldr	r3, [r4, #0]
 8001c74:	07df      	lsls	r7, r3, #31
 8001c76:	d4f5      	bmi.n	8001c64 <HAL_DMA_Init+0xc4>
    registerValue |=  hdma->Init.Direction           |
 8001c78:	e9d5 3002 	ldrd	r3, r0, [r5, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c7c:	6929      	ldr	r1, [r5, #16]
    registerValue |=  hdma->Init.Direction           |
 8001c7e:	4303      	orrs	r3, r0
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c80:	69aa      	ldr	r2, [r5, #24]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001c82:	6820      	ldr	r0, [r4, #0]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c84:	430b      	orrs	r3, r1
 8001c86:	6969      	ldr	r1, [r5, #20]
 8001c88:	430b      	orrs	r3, r1
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c8a:	69e9      	ldr	r1, [r5, #28]
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	430b      	orrs	r3, r1
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001c90:	4975      	ldr	r1, [pc, #468]	; (8001e68 <HAL_DMA_Init+0x2c8>)
 8001c92:	4001      	ands	r1, r0
            hdma->Init.Mode                | hdma->Init.Priority;
 8001c94:	6a28      	ldr	r0, [r5, #32]
 8001c96:	4303      	orrs	r3, r0
    registerValue |=  hdma->Init.Direction           |
 8001c98:	430b      	orrs	r3, r1
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c9a:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8001c9c:	2904      	cmp	r1, #4
 8001c9e:	d103      	bne.n	8001ca8 <HAL_DMA_Init+0x108>
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001ca0:	e9d5 060b 	ldrd	r0, r6, [r5, #44]	; 0x2c
 8001ca4:	4330      	orrs	r0, r6
 8001ca6:	4303      	orrs	r3, r0
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001ca8:	6868      	ldr	r0, [r5, #4]
 8001caa:	f1a0 0629 	sub.w	r6, r0, #41	; 0x29
 8001cae:	2e1f      	cmp	r6, #31
 8001cb0:	f240 8106 	bls.w	8001ec0 <HAL_DMA_Init+0x320>
 8001cb4:	f1a0 064f 	sub.w	r6, r0, #79	; 0x4f
 8001cb8:	2e03      	cmp	r6, #3
 8001cba:	f200 8107 	bhi.w	8001ecc <HAL_DMA_Init+0x32c>
        registerValue |= DMA_SxCR_TRBUFF;
 8001cbe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001cc2:	6023      	str	r3, [r4, #0]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001cc4:	2904      	cmp	r1, #4
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001cc6:	6963      	ldr	r3, [r4, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001cc8:	f023 0307 	bic.w	r3, r3, #7
    registerValue |= hdma->Init.FIFOMode;
 8001ccc:	ea43 0301 	orr.w	r3, r3, r1
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001cd0:	d10d      	bne.n	8001cee <HAL_DMA_Init+0x14e>
      registerValue |= hdma->Init.FIFOThreshold;
 8001cd2:	6aa9      	ldr	r1, [r5, #40]	; 0x28
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001cd4:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
      registerValue |= hdma->Init.FIFOThreshold;
 8001cd6:	430b      	orrs	r3, r1
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001cd8:	b148      	cbz	r0, 8001cee <HAL_DMA_Init+0x14e>
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001cda:	2a00      	cmp	r2, #0
 8001cdc:	f040 811d 	bne.w	8001f1a <HAL_DMA_Init+0x37a>
    switch (hdma->Init.FIFOThreshold)
 8001ce0:	2901      	cmp	r1, #1
 8001ce2:	f000 813b 	beq.w	8001f5c <HAL_DMA_Init+0x3bc>
 8001ce6:	f031 0202 	bics.w	r2, r1, #2
 8001cea:	f000 811e 	beq.w	8001f2a <HAL_DMA_Init+0x38a>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001cee:	6163      	str	r3, [r4, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001cf0:	4628      	mov	r0, r5
 8001cf2:	f7ff fe73 	bl	80019dc <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001cf6:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8001cf8:	233f      	movs	r3, #63	; 0x3f
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001cfa:	4958      	ldr	r1, [pc, #352]	; (8001e5c <HAL_DMA_Init+0x2bc>)
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001cfc:	f002 021f 	and.w	r2, r2, #31
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001d00:	4e5a      	ldr	r6, [pc, #360]	; (8001e6c <HAL_DMA_Init+0x2cc>)
 8001d02:	4f5b      	ldr	r7, [pc, #364]	; (8001e70 <HAL_DMA_Init+0x2d0>)
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001d04:	4093      	lsls	r3, r2
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001d06:	4a5b      	ldr	r2, [pc, #364]	; (8001e74 <HAL_DMA_Init+0x2d4>)
 8001d08:	1ba6      	subs	r6, r4, r6
 8001d0a:	1be7      	subs	r7, r4, r7
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001d0c:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001d0e:	eba4 0b02 	sub.w	fp, r4, r2
 8001d12:	4b59      	ldr	r3, [pc, #356]	; (8001e78 <HAL_DMA_Init+0x2d8>)
 8001d14:	fab6 f686 	clz	r6, r6
 8001d18:	fabb fb8b 	clz	fp, fp
 8001d1c:	fab7 f787 	clz	r7, r7
 8001d20:	eba4 0a03 	sub.w	sl, r4, r3
 8001d24:	4b55      	ldr	r3, [pc, #340]	; (8001e7c <HAL_DMA_Init+0x2dc>)
 8001d26:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 8001d2a:	4855      	ldr	r0, [pc, #340]	; (8001e80 <HAL_DMA_Init+0x2e0>)
 8001d2c:	429c      	cmp	r4, r3
 8001d2e:	bf18      	it	ne
 8001d30:	428c      	cmpne	r4, r1
 8001d32:	f103 0318 	add.w	r3, r3, #24
 8001d36:	faba fa8a 	clz	sl, sl
 8001d3a:	ea4f 1656 	mov.w	r6, r6, lsr #5
 8001d3e:	bf0c      	ite	eq
 8001d40:	2101      	moveq	r1, #1
 8001d42:	2100      	movne	r1, #0
 8001d44:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8001d48:	1a22      	subs	r2, r4, r0
 8001d4a:	429c      	cmp	r4, r3
 8001d4c:	bf08      	it	eq
 8001d4e:	f041 0101 	orreq.w	r1, r1, #1
 8001d52:	3318      	adds	r3, #24
 8001d54:	097f      	lsrs	r7, r7, #5
 8001d56:	fab2 f282 	clz	r2, r2
 8001d5a:	429c      	cmp	r4, r3
 8001d5c:	bf08      	it	eq
 8001d5e:	f041 0101 	orreq.w	r1, r1, #1
 8001d62:	3318      	adds	r3, #24
 8001d64:	0952      	lsrs	r2, r2, #5
 8001d66:	429c      	cmp	r4, r3
 8001d68:	bf08      	it	eq
 8001d6a:	f041 0101 	orreq.w	r1, r1, #1
 8001d6e:	3318      	adds	r3, #24
 8001d70:	9201      	str	r2, [sp, #4]
 8001d72:	429c      	cmp	r4, r3
 8001d74:	bf08      	it	eq
 8001d76:	f041 0101 	orreq.w	r1, r1, #1
 8001d7a:	3318      	adds	r3, #24
 8001d7c:	429c      	cmp	r4, r3
 8001d7e:	bf08      	it	eq
 8001d80:	f041 0101 	orreq.w	r1, r1, #1
 8001d84:	3318      	adds	r3, #24
 8001d86:	429c      	cmp	r4, r3
 8001d88:	bf08      	it	eq
 8001d8a:	f041 0101 	orreq.w	r1, r1, #1
 8001d8e:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8001d92:	429c      	cmp	r4, r3
 8001d94:	bf08      	it	eq
 8001d96:	f041 0101 	orreq.w	r1, r1, #1
 8001d9a:	3318      	adds	r3, #24
 8001d9c:	429c      	cmp	r4, r3
 8001d9e:	bf08      	it	eq
 8001da0:	f041 0101 	orreq.w	r1, r1, #1
 8001da4:	3318      	adds	r3, #24
 8001da6:	429c      	cmp	r4, r3
 8001da8:	bf08      	it	eq
 8001daa:	f041 0101 	orreq.w	r1, r1, #1
 8001dae:	3318      	adds	r3, #24
 8001db0:	429c      	cmp	r4, r3
 8001db2:	bf08      	it	eq
 8001db4:	f041 0101 	orreq.w	r1, r1, #1
 8001db8:	3318      	adds	r3, #24
 8001dba:	429c      	cmp	r4, r3
 8001dbc:	bf08      	it	eq
 8001dbe:	f041 0101 	orreq.w	r1, r1, #1
 8001dc2:	3318      	adds	r3, #24
 8001dc4:	429c      	cmp	r4, r3
 8001dc6:	bf08      	it	eq
 8001dc8:	f041 0101 	orreq.w	r1, r1, #1
 8001dcc:	3318      	adds	r3, #24
 8001dce:	429c      	cmp	r4, r3
 8001dd0:	bf08      	it	eq
 8001dd2:	f041 0101 	orreq.w	r1, r1, #1
 8001dd6:	3318      	adds	r3, #24
 8001dd8:	429c      	cmp	r4, r3
 8001dda:	bf08      	it	eq
 8001ddc:	f041 0101 	orreq.w	r1, r1, #1
 8001de0:	4b28      	ldr	r3, [pc, #160]	; (8001e84 <HAL_DMA_Init+0x2e4>)
 8001de2:	ea4b 0101 	orr.w	r1, fp, r1
 8001de6:	eba4 0803 	sub.w	r8, r4, r3
 8001dea:	3314      	adds	r3, #20
 8001dec:	ea4a 0101 	orr.w	r1, sl, r1
 8001df0:	fab8 f888 	clz	r8, r8
 8001df4:	eba4 0903 	sub.w	r9, r4, r3
 8001df8:	3314      	adds	r3, #20
 8001dfa:	4331      	orrs	r1, r6
 8001dfc:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8001e00:	fab9 f989 	clz	r9, r9
 8001e04:	1ae3      	subs	r3, r4, r3
 8001e06:	4339      	orrs	r1, r7
 8001e08:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8001e0c:	fab3 f383 	clz	r3, r3
 8001e10:	ea48 0101 	orr.w	r1, r8, r1
 8001e14:	095b      	lsrs	r3, r3, #5
 8001e16:	ea49 0101 	orr.w	r1, r9, r1
 8001e1a:	4319      	orrs	r1, r3
 8001e1c:	d101      	bne.n	8001e22 <HAL_DMA_Init+0x282>
 8001e1e:	2a00      	cmp	r2, #0
 8001e20:	d03d      	beq.n	8001e9e <HAL_DMA_Init+0x2fe>
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001e22:	4628      	mov	r0, r5
 8001e24:	9300      	str	r3, [sp, #0]
 8001e26:	f7ff fe53 	bl	8001ad0 <DMA_CalcDMAMUXChannelBaseAndMask>
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001e2a:	68a9      	ldr	r1, [r5, #8]
 8001e2c:	9b00      	ldr	r3, [sp, #0]
 8001e2e:	2980      	cmp	r1, #128	; 0x80
 8001e30:	d02a      	beq.n	8001e88 <HAL_DMA_Init+0x2e8>
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001e32:	6868      	ldr	r0, [r5, #4]
 8001e34:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 8001e36:	b2c4      	uxtb	r4, r0
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001e38:	3801      	subs	r0, #1
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001e3a:	e9d5 c119 	ldrd	ip, r1, [r5, #100]	; 0x64
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001e3e:	2807      	cmp	r0, #7
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001e40:	6014      	str	r4, [r2, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001e42:	f8cc 1004 	str.w	r1, [ip, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001e46:	d826      	bhi.n	8001e96 <HAL_DMA_Init+0x2f6>
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8001e48:	1e61      	subs	r1, r4, #1
 8001e4a:	2907      	cmp	r1, #7
 8001e4c:	d947      	bls.n	8001ede <HAL_DMA_Init+0x33e>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001e4e:	6f6a      	ldr	r2, [r5, #116]	; 0x74
 8001e50:	e9d5 301b 	ldrd	r3, r0, [r5, #108]	; 0x6c
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001e54:	2100      	movs	r1, #0
 8001e56:	6019      	str	r1, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001e58:	6042      	str	r2, [r0, #4]
 8001e5a:	e020      	b.n	8001e9e <HAL_DMA_Init+0x2fe>
 8001e5c:	40020010 	.word	0x40020010
 8001e60:	40020040 	.word	0x40020040
 8001e64:	400204b8 	.word	0x400204b8
 8001e68:	fe10803f 	.word	0xfe10803f
 8001e6c:	58025430 	.word	0x58025430
 8001e70:	58025444 	.word	0x58025444
 8001e74:	58025408 	.word	0x58025408
 8001e78:	5802541c 	.word	0x5802541c
 8001e7c:	40020028 	.word	0x40020028
 8001e80:	58025494 	.word	0x58025494
 8001e84:	58025458 	.word	0x58025458
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001e88:	2300      	movs	r3, #0
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001e8a:	6ea9      	ldr	r1, [r5, #104]	; 0x68
 8001e8c:	e9d5 0218 	ldrd	r0, r2, [r5, #96]	; 0x60
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001e90:	606b      	str	r3, [r5, #4]
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001e92:	6003      	str	r3, [r0, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001e94:	6051      	str	r1, [r2, #4]
      hdma->DMAmuxRequestGen = 0U;
 8001e96:	2300      	movs	r3, #0
      hdma->DMAmuxRequestGenStatus = 0U;
 8001e98:	e9c5 331b 	strd	r3, r3, [r5, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001e9c:	676b      	str	r3, [r5, #116]	; 0x74
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e9e:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8001ea0:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ea2:	6568      	str	r0, [r5, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8001ea4:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
}
 8001ea8:	b003      	add	sp, #12
 8001eaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001eae:	2220      	movs	r2, #32
        hdma->State = HAL_DMA_STATE_ERROR;
 8001eb0:	2303      	movs	r3, #3
        return HAL_ERROR;
 8001eb2:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001eb4:	656a      	str	r2, [r5, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 8001eb6:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
}
 8001eba:	b003      	add	sp, #12
 8001ebc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001ec0:	4f6c      	ldr	r7, [pc, #432]	; (8002074 <HAL_DMA_Init+0x4d4>)
 8001ec2:	fa27 f606 	lsr.w	r6, r7, r6
 8001ec6:	07f6      	lsls	r6, r6, #31
 8001ec8:	f53f aef9 	bmi.w	8001cbe <HAL_DMA_Init+0x11e>
 8001ecc:	3874      	subs	r0, #116	; 0x74
 8001ece:	2803      	cmp	r0, #3
 8001ed0:	f63f aef7 	bhi.w	8001cc2 <HAL_DMA_Init+0x122>
 8001ed4:	e6f3      	b.n	8001cbe <HAL_DMA_Init+0x11e>
    return HAL_ERROR;
 8001ed6:	2001      	movs	r0, #1
}
 8001ed8:	b003      	add	sp, #12
 8001eda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001ede:	9a01      	ldr	r2, [sp, #4]
 8001ee0:	431a      	orrs	r2, r3
 8001ee2:	ea49 0902 	orr.w	r9, r9, r2
 8001ee6:	ea48 0809 	orr.w	r8, r8, r9
 8001eea:	ea47 0708 	orr.w	r7, r7, r8
 8001eee:	433e      	orrs	r6, r7
 8001ef0:	ea5a 0606 	orrs.w	r6, sl, r6
 8001ef4:	d107      	bne.n	8001f06 <HAL_DMA_Init+0x366>
 8001ef6:	f1bb 0f00 	cmp.w	fp, #0
 8001efa:	d104      	bne.n	8001f06 <HAL_DMA_Init+0x366>
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001efc:	4b5e      	ldr	r3, [pc, #376]	; (8002078 <HAL_DMA_Init+0x4d8>)

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001efe:	485f      	ldr	r0, [pc, #380]	; (800207c <HAL_DMA_Init+0x4dc>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001f00:	4423      	add	r3, r4
 8001f02:	009b      	lsls	r3, r3, #2
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001f04:	e003      	b.n	8001f0e <HAL_DMA_Init+0x36e>
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8001f06:	4b5e      	ldr	r3, [pc, #376]	; (8002080 <HAL_DMA_Init+0x4e0>)
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8001f08:	485e      	ldr	r0, [pc, #376]	; (8002084 <HAL_DMA_Init+0x4e4>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8001f0a:	4423      	add	r3, r4
 8001f0c:	009b      	lsls	r3, r3, #2
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8001f0e:	2201      	movs	r2, #1
 8001f10:	408a      	lsls	r2, r1
 8001f12:	e9c5 301b 	strd	r3, r0, [r5, #108]	; 0x6c
 8001f16:	676a      	str	r2, [r5, #116]	; 0x74
 8001f18:	e79c      	b.n	8001e54 <HAL_DMA_Init+0x2b4>
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001f1a:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8001f1e:	d00e      	beq.n	8001f3e <HAL_DMA_Init+0x39e>
    switch (hdma->Init.FIFOThreshold)
 8001f20:	2902      	cmp	r1, #2
 8001f22:	d905      	bls.n	8001f30 <HAL_DMA_Init+0x390>
 8001f24:	2903      	cmp	r1, #3
 8001f26:	f47f aee2 	bne.w	8001cee <HAL_DMA_Init+0x14e>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f2a:	01c2      	lsls	r2, r0, #7
 8001f2c:	f57f aedf 	bpl.w	8001cee <HAL_DMA_Init+0x14e>
          hdma->State = HAL_DMA_STATE_READY;
 8001f30:	2301      	movs	r3, #1
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001f32:	2240      	movs	r2, #64	; 0x40
          return HAL_ERROR;
 8001f34:	4618      	mov	r0, r3
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001f36:	656a      	str	r2, [r5, #84]	; 0x54
          hdma->State = HAL_DMA_STATE_READY;
 8001f38:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
          return HAL_ERROR;
 8001f3c:	e7b4      	b.n	8001ea8 <HAL_DMA_Init+0x308>
    switch (hdma->Init.FIFOThreshold)
 8001f3e:	2903      	cmp	r1, #3
 8001f40:	f63f aed5 	bhi.w	8001cee <HAL_DMA_Init+0x14e>
 8001f44:	a201      	add	r2, pc, #4	; (adr r2, 8001f4c <HAL_DMA_Init+0x3ac>)
 8001f46:	f852 f021 	ldr.w	pc, [r2, r1, lsl #2]
 8001f4a:	bf00      	nop
 8001f4c:	08001f31 	.word	0x08001f31
 8001f50:	08001f2b 	.word	0x08001f2b
 8001f54:	08001f31 	.word	0x08001f31
 8001f58:	08001f5d 	.word	0x08001f5d
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001f5c:	f1b0 7fc0 	cmp.w	r0, #25165824	; 0x1800000
 8001f60:	f47f aec5 	bne.w	8001cee <HAL_DMA_Init+0x14e>
 8001f64:	e7e4      	b.n	8001f30 <HAL_DMA_Init+0x390>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001f66:	4a48      	ldr	r2, [pc, #288]	; (8002088 <HAL_DMA_Init+0x4e8>)
 8001f68:	4b48      	ldr	r3, [pc, #288]	; (800208c <HAL_DMA_Init+0x4ec>)
 8001f6a:	eba4 0b02 	sub.w	fp, r4, r2
 8001f6e:	4e48      	ldr	r6, [pc, #288]	; (8002090 <HAL_DMA_Init+0x4f0>)
 8001f70:	eba4 0a03 	sub.w	sl, r4, r3
 8001f74:	4f47      	ldr	r7, [pc, #284]	; (8002094 <HAL_DMA_Init+0x4f4>)
 8001f76:	fabb fb8b 	clz	fp, fp
 8001f7a:	1ba6      	subs	r6, r4, r6
 8001f7c:	faba fa8a 	clz	sl, sl
 8001f80:	333c      	adds	r3, #60	; 0x3c
 8001f82:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 8001f86:	fab6 f686 	clz	r6, r6
 8001f8a:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8001f8e:	1be7      	subs	r7, r4, r7
 8001f90:	eba4 0803 	sub.w	r8, r4, r3
 8001f94:	0976      	lsrs	r6, r6, #5
 8001f96:	3314      	adds	r3, #20
 8001f98:	fab7 f787 	clz	r7, r7
 8001f9c:	ea4b 010a 	orr.w	r1, fp, sl
 8001fa0:	fab8 f888 	clz	r8, r8
 8001fa4:	eba4 0903 	sub.w	r9, r4, r3
 8001fa8:	097f      	lsrs	r7, r7, #5
 8001faa:	4331      	orrs	r1, r6
 8001fac:	3314      	adds	r3, #20
 8001fae:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8001fb2:	fab9 f989 	clz	r9, r9
 8001fb6:	4339      	orrs	r1, r7
 8001fb8:	1ae3      	subs	r3, r4, r3
 8001fba:	4837      	ldr	r0, [pc, #220]	; (8002098 <HAL_DMA_Init+0x4f8>)
 8001fbc:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8001fc0:	ea48 0101 	orr.w	r1, r8, r1
 8001fc4:	fab3 f383 	clz	r3, r3
 8001fc8:	1a22      	subs	r2, r4, r0
 8001fca:	ea49 0101 	orr.w	r1, r9, r1
 8001fce:	095b      	lsrs	r3, r3, #5
 8001fd0:	fab2 f282 	clz	r2, r2
 8001fd4:	4319      	orrs	r1, r3
 8001fd6:	ea4f 1252 	mov.w	r2, r2, lsr #5
 8001fda:	9201      	str	r2, [sp, #4]
 8001fdc:	d101      	bne.n	8001fe2 <HAL_DMA_Init+0x442>
 8001fde:	2a00      	cmp	r2, #0
 8001fe0:	d041      	beq.n	8002066 <HAL_DMA_Init+0x4c6>
    hdma->State = HAL_DMA_STATE_BUSY;
 8001fe2:	2102      	movs	r1, #2
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001fe4:	f8df c0bc 	ldr.w	ip, [pc, #188]	; 80020a4 <HAL_DMA_Init+0x504>
    hdma->State = HAL_DMA_STATE_BUSY;
 8001fe8:	f885 1035 	strb.w	r1, [r5, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 8001fec:	2100      	movs	r1, #0
 8001fee:	f885 1034 	strb.w	r1, [r5, #52]	; 0x34
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001ff2:	6821      	ldr	r1, [r4, #0]
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001ff4:	ea01 0c0c 	and.w	ip, r1, ip
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001ff8:	68a9      	ldr	r1, [r5, #8]
 8001ffa:	2940      	cmp	r1, #64	; 0x40
 8001ffc:	d030      	beq.n	8002060 <HAL_DMA_Init+0x4c0>
 8001ffe:	f1a1 0180 	sub.w	r1, r1, #128	; 0x80
 8002002:	fab1 f181 	clz	r1, r1
 8002006:	0949      	lsrs	r1, r1, #5
 8002008:	ea4f 3e81 	mov.w	lr, r1, lsl #14
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800200c:	6929      	ldr	r1, [r5, #16]
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800200e:	68e8      	ldr	r0, [r5, #12]
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002010:	08c9      	lsrs	r1, r1, #3
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002012:	4a22      	ldr	r2, [pc, #136]	; (800209c <HAL_DMA_Init+0x4fc>)
 8002014:	9300      	str	r3, [sp, #0]
 8002016:	ea41 00d0 	orr.w	r0, r1, r0, lsr #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800201a:	6969      	ldr	r1, [r5, #20]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800201c:	4422      	add	r2, r4
 800201e:	ea40 00d1 	orr.w	r0, r0, r1, lsr #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002022:	69a9      	ldr	r1, [r5, #24]
 8002024:	ea40 00d1 	orr.w	r0, r0, r1, lsr #3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002028:	69e9      	ldr	r1, [r5, #28]
 800202a:	ea40 00d1 	orr.w	r0, r0, r1, lsr #3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800202e:	6a29      	ldr	r1, [r5, #32]
 8002030:	ea40 1111 	orr.w	r1, r0, r1, lsr #4
 8002034:	ea41 010c 	orr.w	r1, r1, ip
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002038:	ea4e 0101 	orr.w	r1, lr, r1
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800203c:	6021      	str	r1, [r4, #0]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800203e:	4918      	ldr	r1, [pc, #96]	; (80020a0 <HAL_DMA_Init+0x500>)
 8002040:	fba1 0102 	umull	r0, r1, r1, r2
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002044:	4628      	mov	r0, r5
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002046:	0909      	lsrs	r1, r1, #4
 8002048:	0089      	lsls	r1, r1, #2
 800204a:	65e9      	str	r1, [r5, #92]	; 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800204c:	f7ff fcc6 	bl	80019dc <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002050:	6de9      	ldr	r1, [r5, #92]	; 0x5c
 8002052:	9b00      	ldr	r3, [sp, #0]
 8002054:	f001 041f 	and.w	r4, r1, #31
 8002058:	2101      	movs	r1, #1
 800205a:	40a1      	lsls	r1, r4
 800205c:	6041      	str	r1, [r0, #4]
 800205e:	e6e0      	b.n	8001e22 <HAL_DMA_Init+0x282>
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002060:	f04f 0e10 	mov.w	lr, #16
 8002064:	e7d2      	b.n	800200c <HAL_DMA_Init+0x46c>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002066:	2240      	movs	r2, #64	; 0x40
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002068:	2303      	movs	r3, #3
    return HAL_ERROR;
 800206a:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800206c:	656a      	str	r2, [r5, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800206e:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
    return HAL_ERROR;
 8002072:	e719      	b.n	8001ea8 <HAL_DMA_Init+0x308>
 8002074:	c3c0003f 	.word	0xc3c0003f
 8002078:	1000823f 	.word	0x1000823f
 800207c:	40020940 	.word	0x40020940
 8002080:	1600963f 	.word	0x1600963f
 8002084:	58025940 	.word	0x58025940
 8002088:	58025408 	.word	0x58025408
 800208c:	5802541c 	.word	0x5802541c
 8002090:	58025430 	.word	0x58025430
 8002094:	58025444 	.word	0x58025444
 8002098:	58025494 	.word	0x58025494
 800209c:	a7fdabf8 	.word	0xa7fdabf8
 80020a0:	cccccccd 	.word	0xcccccccd
 80020a4:	fffe000f 	.word	0xfffe000f

080020a8 <HAL_DMA_Start_IT>:
  if(hdma == NULL)
 80020a8:	2800      	cmp	r0, #0
 80020aa:	f000 8177 	beq.w	800239c <HAL_DMA_Start_IT+0x2f4>
 80020ae:	4684      	mov	ip, r0
  __HAL_LOCK(hdma);
 80020b0:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 80020b4:	2801      	cmp	r0, #1
 80020b6:	f000 8173 	beq.w	80023a0 <HAL_DMA_Start_IT+0x2f8>
 80020ba:	2001      	movs	r0, #1
{
 80020bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if(HAL_DMA_STATE_READY == hdma->State)
 80020c0:	f89c 4035 	ldrb.w	r4, [ip, #53]	; 0x35
  __HAL_LOCK(hdma);
 80020c4:	f88c 0034 	strb.w	r0, [ip, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 80020c8:	4284      	cmp	r4, r0
 80020ca:	d008      	beq.n	80020de <HAL_DMA_Start_IT+0x36>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80020cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
    __HAL_UNLOCK(hdma);
 80020d0:	2300      	movs	r3, #0
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80020d2:	f8cc 2054 	str.w	r2, [ip, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 80020d6:	f88c 3034 	strb.w	r3, [ip, #52]	; 0x34
}
 80020da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 80020de:	2002      	movs	r0, #2
    __HAL_DMA_DISABLE(hdma);
 80020e0:	f8dc 4000 	ldr.w	r4, [ip]
 80020e4:	4d53      	ldr	r5, [pc, #332]	; (8002234 <HAL_DMA_Start_IT+0x18c>)
    hdma->State = HAL_DMA_STATE_BUSY;
 80020e6:	f88c 0035 	strb.w	r0, [ip, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020ea:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 80020ec:	4e52      	ldr	r6, [pc, #328]	; (8002238 <HAL_DMA_Start_IT+0x190>)
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020ee:	f8cc 0054 	str.w	r0, [ip, #84]	; 0x54
    __HAL_DMA_DISABLE(hdma);
 80020f2:	4852      	ldr	r0, [pc, #328]	; (800223c <HAL_DMA_Start_IT+0x194>)
 80020f4:	42ac      	cmp	r4, r5
 80020f6:	bf18      	it	ne
 80020f8:	4284      	cmpne	r4, r0
 80020fa:	f105 0518 	add.w	r5, r5, #24
 80020fe:	bf0c      	ite	eq
 8002100:	2001      	moveq	r0, #1
 8002102:	2000      	movne	r0, #0
 8002104:	42ac      	cmp	r4, r5
 8002106:	bf08      	it	eq
 8002108:	f040 0001 	orreq.w	r0, r0, #1
 800210c:	3518      	adds	r5, #24
 800210e:	42ac      	cmp	r4, r5
 8002110:	bf08      	it	eq
 8002112:	f040 0001 	orreq.w	r0, r0, #1
 8002116:	3518      	adds	r5, #24
 8002118:	42ac      	cmp	r4, r5
 800211a:	bf08      	it	eq
 800211c:	f040 0001 	orreq.w	r0, r0, #1
 8002120:	3518      	adds	r5, #24
 8002122:	42ac      	cmp	r4, r5
 8002124:	bf08      	it	eq
 8002126:	f040 0001 	orreq.w	r0, r0, #1
 800212a:	f505 7556 	add.w	r5, r5, #856	; 0x358
 800212e:	42ac      	cmp	r4, r5
 8002130:	bf08      	it	eq
 8002132:	f040 0001 	orreq.w	r0, r0, #1
 8002136:	3518      	adds	r5, #24
 8002138:	42ac      	cmp	r4, r5
 800213a:	bf08      	it	eq
 800213c:	f040 0001 	orreq.w	r0, r0, #1
 8002140:	3518      	adds	r5, #24
 8002142:	42ac      	cmp	r4, r5
 8002144:	bf08      	it	eq
 8002146:	f040 0001 	orreq.w	r0, r0, #1
 800214a:	3518      	adds	r5, #24
 800214c:	42ac      	cmp	r4, r5
 800214e:	bf08      	it	eq
 8002150:	f040 0001 	orreq.w	r0, r0, #1
 8002154:	3518      	adds	r5, #24
 8002156:	42ac      	cmp	r4, r5
 8002158:	bf08      	it	eq
 800215a:	f040 0001 	orreq.w	r0, r0, #1
 800215e:	3518      	adds	r5, #24
 8002160:	42ac      	cmp	r4, r5
 8002162:	bf08      	it	eq
 8002164:	f040 0001 	orreq.w	r0, r0, #1
 8002168:	3518      	adds	r5, #24
 800216a:	42ac      	cmp	r4, r5
 800216c:	bf08      	it	eq
 800216e:	f040 0001 	orreq.w	r0, r0, #1
 8002172:	3518      	adds	r5, #24
 8002174:	42ac      	cmp	r4, r5
 8002176:	bf14      	ite	ne
 8002178:	4681      	movne	r9, r0
 800217a:	f040 0901 	orreq.w	r9, r0, #1
 800217e:	f5a5 6595 	sub.w	r5, r5, #1192	; 0x4a8
 8002182:	42b4      	cmp	r4, r6
 8002184:	bf18      	it	ne
 8002186:	42ac      	cmpne	r4, r5
 8002188:	bf0c      	ite	eq
 800218a:	2501      	moveq	r5, #1
 800218c:	2500      	movne	r5, #0
 800218e:	d002      	beq.n	8002196 <HAL_DMA_Start_IT+0xee>
 8002190:	f1b9 0f00 	cmp.w	r9, #0
 8002194:	d054      	beq.n	8002240 <HAL_DMA_Start_IT+0x198>
 8002196:	6826      	ldr	r6, [r4, #0]
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002198:	f8dc a058 	ldr.w	sl, [ip, #88]	; 0x58
    __HAL_DMA_DISABLE(hdma);
 800219c:	f026 0601 	bic.w	r6, r6, #1
 80021a0:	6026      	str	r6, [r4, #0]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80021a2:	2d00      	cmp	r5, #0
 80021a4:	d078      	beq.n	8002298 <HAL_DMA_Start_IT+0x1f0>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80021a6:	e9dc 6719 	ldrd	r6, r7, [ip, #100]	; 0x64
 80021aa:	6077      	str	r7, [r6, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 80021ac:	f8dc 706c 	ldr.w	r7, [ip, #108]	; 0x6c
 80021b0:	b117      	cbz	r7, 80021b8 <HAL_DMA_Start_IT+0x110>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80021b2:	e9dc 601c 	ldrd	r6, r0, [ip, #112]	; 0x70
 80021b6:	6070      	str	r0, [r6, #4]
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80021b8:	f8dc 605c 	ldr.w	r6, [ip, #92]	; 0x5c
 80021bc:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
 80021c0:	f006 081f 	and.w	r8, r6, #31
 80021c4:	fa0e fe08 	lsl.w	lr, lr, r8
 80021c8:	f8ca e008 	str.w	lr, [sl, #8]
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80021cc:	6826      	ldr	r6, [r4, #0]
 80021ce:	f426 2680 	bic.w	r6, r6, #262144	; 0x40000
 80021d2:	6026      	str	r6, [r4, #0]
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80021d4:	6063      	str	r3, [r4, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80021d6:	f8dc 3008 	ldr.w	r3, [ip, #8]
 80021da:	2b40      	cmp	r3, #64	; 0x40
 80021dc:	f000 80e2 	beq.w	80023a4 <HAL_DMA_Start_IT+0x2fc>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80021e0:	60a1      	str	r1, [r4, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80021e2:	60e2      	str	r2, [r4, #12]
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80021e4:	b91d      	cbnz	r5, 80021ee <HAL_DMA_Start_IT+0x146>
 80021e6:	f1b9 0f00 	cmp.w	r9, #0
 80021ea:	f000 80e1 	beq.w	80023b0 <HAL_DMA_Start_IT+0x308>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80021ee:	6823      	ldr	r3, [r4, #0]
 80021f0:	f023 031e 	bic.w	r3, r3, #30
 80021f4:	f043 0316 	orr.w	r3, r3, #22
 80021f8:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 80021fa:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
 80021fe:	b11b      	cbz	r3, 8002208 <HAL_DMA_Start_IT+0x160>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002200:	6823      	ldr	r3, [r4, #0]
 8002202:	f043 0308 	orr.w	r3, r3, #8
 8002206:	6023      	str	r3, [r4, #0]
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002208:	f8dc 3060 	ldr.w	r3, [ip, #96]	; 0x60
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	03d2      	lsls	r2, r2, #15
 8002210:	d503      	bpl.n	800221a <HAL_DMA_Start_IT+0x172>
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002218:	601a      	str	r2, [r3, #0]
      if(hdma->DMAmuxRequestGen != 0U)
 800221a:	b11f      	cbz	r7, 8002224 <HAL_DMA_Start_IT+0x17c>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002222:	603b      	str	r3, [r7, #0]
    __HAL_DMA_ENABLE(hdma);
 8002224:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002226:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8002228:	f043 0301 	orr.w	r3, r3, #1
 800222c:	6023      	str	r3, [r4, #0]
}
 800222e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002232:	bf00      	nop
 8002234:	40020058 	.word	0x40020058
 8002238:	40020028 	.word	0x40020028
 800223c:	40020040 	.word	0x40020040
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002240:	4f61      	ldr	r7, [pc, #388]	; (80023c8 <HAL_DMA_Start_IT+0x320>)
 8002242:	4e62      	ldr	r6, [pc, #392]	; (80023cc <HAL_DMA_Start_IT+0x324>)
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002244:	f8dc a058 	ldr.w	sl, [ip, #88]	; 0x58
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002248:	42b4      	cmp	r4, r6
 800224a:	bf18      	it	ne
 800224c:	42bc      	cmpne	r4, r7
 800224e:	f106 0628 	add.w	r6, r6, #40	; 0x28
 8002252:	bf0c      	ite	eq
 8002254:	2701      	moveq	r7, #1
 8002256:	2700      	movne	r7, #0
 8002258:	42b4      	cmp	r4, r6
 800225a:	bf08      	it	eq
 800225c:	f047 0701 	orreq.w	r7, r7, #1
 8002260:	3614      	adds	r6, #20
 8002262:	42b4      	cmp	r4, r6
 8002264:	bf08      	it	eq
 8002266:	f047 0701 	orreq.w	r7, r7, #1
 800226a:	3614      	adds	r6, #20
 800226c:	42b4      	cmp	r4, r6
 800226e:	bf08      	it	eq
 8002270:	f047 0701 	orreq.w	r7, r7, #1
 8002274:	3614      	adds	r6, #20
 8002276:	42b4      	cmp	r4, r6
 8002278:	bf08      	it	eq
 800227a:	f047 0701 	orreq.w	r7, r7, #1
    __HAL_DMA_DISABLE(hdma);
 800227e:	6826      	ldr	r6, [r4, #0]
 8002280:	f026 0601 	bic.w	r6, r6, #1
 8002284:	6026      	str	r6, [r4, #0]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002286:	4e52      	ldr	r6, [pc, #328]	; (80023d0 <HAL_DMA_Start_IT+0x328>)
 8002288:	42b4      	cmp	r4, r6
 800228a:	bf08      	it	eq
 800228c:	f047 0701 	orreq.w	r7, r7, #1
 8002290:	b917      	cbnz	r7, 8002298 <HAL_DMA_Start_IT+0x1f0>
 8002292:	4f50      	ldr	r7, [pc, #320]	; (80023d4 <HAL_DMA_Start_IT+0x32c>)
 8002294:	42bc      	cmp	r4, r7
 8002296:	d10b      	bne.n	80022b0 <HAL_DMA_Start_IT+0x208>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002298:	e9dc 6719 	ldrd	r6, r7, [ip, #100]	; 0x64
 800229c:	6077      	str	r7, [r6, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 800229e:	f8dc 706c 	ldr.w	r7, [ip, #108]	; 0x6c
 80022a2:	b117      	cbz	r7, 80022aa <HAL_DMA_Start_IT+0x202>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80022a4:	e9dc 061c 	ldrd	r0, r6, [ip, #112]	; 0x70
 80022a8:	6046      	str	r6, [r0, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80022aa:	f1b9 0f00 	cmp.w	r9, #0
 80022ae:	d183      	bne.n	80021b8 <HAL_DMA_Start_IT+0x110>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80022b0:	4f46      	ldr	r7, [pc, #280]	; (80023cc <HAL_DMA_Start_IT+0x324>)
 80022b2:	f8df e114 	ldr.w	lr, [pc, #276]	; 80023c8 <HAL_DMA_Start_IT+0x320>
 80022b6:	4574      	cmp	r4, lr
 80022b8:	bf18      	it	ne
 80022ba:	42bc      	cmpne	r4, r7
 80022bc:	f10e 0e14 	add.w	lr, lr, #20
 80022c0:	bf0c      	ite	eq
 80022c2:	2701      	moveq	r7, #1
 80022c4:	2700      	movne	r7, #0
 80022c6:	4574      	cmp	r4, lr
 80022c8:	bf08      	it	eq
 80022ca:	f047 0701 	orreq.w	r7, r7, #1
 80022ce:	f10e 0e14 	add.w	lr, lr, #20
 80022d2:	4574      	cmp	r4, lr
 80022d4:	bf08      	it	eq
 80022d6:	f047 0701 	orreq.w	r7, r7, #1
 80022da:	f10e 0e14 	add.w	lr, lr, #20
 80022de:	4574      	cmp	r4, lr
 80022e0:	bf08      	it	eq
 80022e2:	f047 0701 	orreq.w	r7, r7, #1
 80022e6:	f10e 0e14 	add.w	lr, lr, #20
 80022ea:	4574      	cmp	r4, lr
 80022ec:	bf08      	it	eq
 80022ee:	f047 0701 	orreq.w	r7, r7, #1
 80022f2:	f10e 0e14 	add.w	lr, lr, #20
 80022f6:	4574      	cmp	r4, lr
 80022f8:	bf08      	it	eq
 80022fa:	f047 0701 	orreq.w	r7, r7, #1
 80022fe:	b917      	cbnz	r7, 8002306 <HAL_DMA_Start_IT+0x25e>
 8002300:	4f34      	ldr	r7, [pc, #208]	; (80023d4 <HAL_DMA_Start_IT+0x32c>)
 8002302:	42bc      	cmp	r4, r7
 8002304:	d154      	bne.n	80023b0 <HAL_DMA_Start_IT+0x308>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8002306:	f8dc 005c 	ldr.w	r0, [ip, #92]	; 0x5c
 800230a:	2701      	movs	r7, #1
 800230c:	f000 0e1f 	and.w	lr, r0, #31
 8002310:	fa07 f70e 	lsl.w	r7, r7, lr
 8002314:	f8ca 7004 	str.w	r7, [sl, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8002318:	6063      	str	r3, [r4, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800231a:	f8dc 3008 	ldr.w	r3, [ip, #8]
 800231e:	2b40      	cmp	r3, #64	; 0x40
 8002320:	d043      	beq.n	80023aa <HAL_DMA_Start_IT+0x302>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8002322:	60a1      	str	r1, [r4, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8002324:	60e2      	str	r2, [r4, #12]
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002326:	6823      	ldr	r3, [r4, #0]
 8002328:	f023 030e 	bic.w	r3, r3, #14
 800232c:	f043 030a 	orr.w	r3, r3, #10
 8002330:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8002332:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
 8002336:	2b00      	cmp	r3, #0
 8002338:	d02d      	beq.n	8002396 <HAL_DMA_Start_IT+0x2ee>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800233a:	6823      	ldr	r3, [r4, #0]
 800233c:	f043 0304 	orr.w	r3, r3, #4
 8002340:	6023      	str	r3, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002342:	4b21      	ldr	r3, [pc, #132]	; (80023c8 <HAL_DMA_Start_IT+0x320>)
 8002344:	4a21      	ldr	r2, [pc, #132]	; (80023cc <HAL_DMA_Start_IT+0x324>)
 8002346:	4294      	cmp	r4, r2
 8002348:	bf18      	it	ne
 800234a:	429c      	cmpne	r4, r3
 800234c:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8002350:	bf0c      	ite	eq
 8002352:	2301      	moveq	r3, #1
 8002354:	2300      	movne	r3, #0
 8002356:	4294      	cmp	r4, r2
 8002358:	bf08      	it	eq
 800235a:	f043 0301 	orreq.w	r3, r3, #1
 800235e:	3214      	adds	r2, #20
 8002360:	4294      	cmp	r4, r2
 8002362:	bf08      	it	eq
 8002364:	f043 0301 	orreq.w	r3, r3, #1
 8002368:	3214      	adds	r2, #20
 800236a:	4294      	cmp	r4, r2
 800236c:	bf08      	it	eq
 800236e:	f043 0301 	orreq.w	r3, r3, #1
 8002372:	3214      	adds	r2, #20
 8002374:	4294      	cmp	r4, r2
 8002376:	bf08      	it	eq
 8002378:	f043 0301 	orreq.w	r3, r3, #1
 800237c:	3214      	adds	r2, #20
 800237e:	4294      	cmp	r4, r2
 8002380:	bf08      	it	eq
 8002382:	f043 0301 	orreq.w	r3, r3, #1
 8002386:	3214      	adds	r2, #20
 8002388:	4294      	cmp	r4, r2
 800238a:	bf08      	it	eq
 800238c:	f043 0301 	orreq.w	r3, r3, #1
 8002390:	2b00      	cmp	r3, #0
 8002392:	f43f af47 	beq.w	8002224 <HAL_DMA_Start_IT+0x17c>
 8002396:	f8dc 706c 	ldr.w	r7, [ip, #108]	; 0x6c
 800239a:	e735      	b.n	8002208 <HAL_DMA_Start_IT+0x160>
    return HAL_ERROR;
 800239c:	2001      	movs	r0, #1
 800239e:	4770      	bx	lr
  __HAL_LOCK(hdma);
 80023a0:	2002      	movs	r0, #2
}
 80023a2:	4770      	bx	lr
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80023a4:	60a2      	str	r2, [r4, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80023a6:	60e1      	str	r1, [r4, #12]
 80023a8:	e71c      	b.n	80021e4 <HAL_DMA_Start_IT+0x13c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80023aa:	60a2      	str	r2, [r4, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80023ac:	60e1      	str	r1, [r4, #12]
 80023ae:	e7ba      	b.n	8002326 <HAL_DMA_Start_IT+0x27e>
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80023b0:	6823      	ldr	r3, [r4, #0]
 80023b2:	f023 030e 	bic.w	r3, r3, #14
 80023b6:	f043 030a 	orr.w	r3, r3, #10
 80023ba:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 80023bc:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d1ba      	bne.n	800233a <HAL_DMA_Start_IT+0x292>
 80023c4:	e7bd      	b.n	8002342 <HAL_DMA_Start_IT+0x29a>
 80023c6:	bf00      	nop
 80023c8:	5802541c 	.word	0x5802541c
 80023cc:	58025408 	.word	0x58025408
 80023d0:	58025480 	.word	0x58025480
 80023d4:	58025494 	.word	0x58025494

080023d8 <HAL_DMA_IRQHandler>:
{
 80023d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __IO uint32_t count = 0U;
 80023dc:	2200      	movs	r2, #0
  uint32_t timeout = SystemCoreClock / 9600U;
 80023de:	4b9e      	ldr	r3, [pc, #632]	; (8002658 <HAL_DMA_IRQHandler+0x280>)
{
 80023e0:	b082      	sub	sp, #8
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023e2:	6d84      	ldr	r4, [r0, #88]	; 0x58
{
 80023e4:	4606      	mov	r6, r0
  uint32_t timeout = SystemCoreClock / 9600U;
 80023e6:	681d      	ldr	r5, [r3, #0]
  __IO uint32_t count = 0U;
 80023e8:	9201      	str	r2, [sp, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80023ea:	6803      	ldr	r3, [r0, #0]
 80023ec:	4a9b      	ldr	r2, [pc, #620]	; (800265c <HAL_DMA_IRQHandler+0x284>)
 80023ee:	489c      	ldr	r0, [pc, #624]	; (8002660 <HAL_DMA_IRQHandler+0x288>)
  tmpisr_dma  = regs_dma->ISR;
 80023f0:	6827      	ldr	r7, [r4, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80023f2:	4293      	cmp	r3, r2
 80023f4:	bf18      	it	ne
 80023f6:	4283      	cmpne	r3, r0
  tmpisr_bdma = regs_bdma->ISR;
 80023f8:	6821      	ldr	r1, [r4, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80023fa:	bf0c      	ite	eq
 80023fc:	2001      	moveq	r0, #1
 80023fe:	2000      	movne	r0, #0
 8002400:	d04f      	beq.n	80024a2 <HAL_DMA_IRQHandler+0xca>
 8002402:	3218      	adds	r2, #24
 8002404:	f8df c260 	ldr.w	ip, [pc, #608]	; 8002668 <HAL_DMA_IRQHandler+0x290>
 8002408:	4563      	cmp	r3, ip
 800240a:	bf18      	it	ne
 800240c:	4293      	cmpne	r3, r2
 800240e:	f10c 0c18 	add.w	ip, ip, #24
 8002412:	bf0c      	ite	eq
 8002414:	2201      	moveq	r2, #1
 8002416:	2200      	movne	r2, #0
 8002418:	4563      	cmp	r3, ip
 800241a:	bf08      	it	eq
 800241c:	f042 0201 	orreq.w	r2, r2, #1
 8002420:	f10c 0c18 	add.w	ip, ip, #24
 8002424:	4563      	cmp	r3, ip
 8002426:	bf08      	it	eq
 8002428:	f042 0201 	orreq.w	r2, r2, #1
 800242c:	f10c 0c18 	add.w	ip, ip, #24
 8002430:	4563      	cmp	r3, ip
 8002432:	bf08      	it	eq
 8002434:	f042 0201 	orreq.w	r2, r2, #1
 8002438:	f10c 0c18 	add.w	ip, ip, #24
 800243c:	4563      	cmp	r3, ip
 800243e:	bf08      	it	eq
 8002440:	f042 0201 	orreq.w	r2, r2, #1
 8002444:	f50c 7c56 	add.w	ip, ip, #856	; 0x358
 8002448:	4563      	cmp	r3, ip
 800244a:	bf08      	it	eq
 800244c:	f042 0201 	orreq.w	r2, r2, #1
 8002450:	f10c 0c18 	add.w	ip, ip, #24
 8002454:	4563      	cmp	r3, ip
 8002456:	bf08      	it	eq
 8002458:	f042 0201 	orreq.w	r2, r2, #1
 800245c:	f10c 0c18 	add.w	ip, ip, #24
 8002460:	4563      	cmp	r3, ip
 8002462:	bf08      	it	eq
 8002464:	f042 0201 	orreq.w	r2, r2, #1
 8002468:	f10c 0c18 	add.w	ip, ip, #24
 800246c:	4563      	cmp	r3, ip
 800246e:	bf08      	it	eq
 8002470:	f042 0201 	orreq.w	r2, r2, #1
 8002474:	f10c 0c18 	add.w	ip, ip, #24
 8002478:	4563      	cmp	r3, ip
 800247a:	bf08      	it	eq
 800247c:	f042 0201 	orreq.w	r2, r2, #1
 8002480:	f10c 0c18 	add.w	ip, ip, #24
 8002484:	4563      	cmp	r3, ip
 8002486:	bf08      	it	eq
 8002488:	f042 0201 	orreq.w	r2, r2, #1
 800248c:	f10c 0c18 	add.w	ip, ip, #24
 8002490:	4563      	cmp	r3, ip
 8002492:	bf08      	it	eq
 8002494:	f042 0201 	orreq.w	r2, r2, #1
 8002498:	b91a      	cbnz	r2, 80024a2 <HAL_DMA_IRQHandler+0xca>
 800249a:	4a72      	ldr	r2, [pc, #456]	; (8002664 <HAL_DMA_IRQHandler+0x28c>)
 800249c:	4293      	cmp	r3, r2
 800249e:	f040 824b 	bne.w	8002938 <HAL_DMA_IRQHandler+0x560>
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80024a2:	6df1      	ldr	r1, [r6, #92]	; 0x5c
 80024a4:	2208      	movs	r2, #8
 80024a6:	f001 0c1f 	and.w	ip, r1, #31
 80024aa:	fa02 f20c 	lsl.w	r2, r2, ip
 80024ae:	4217      	tst	r7, r2
 80024b0:	f040 817d 	bne.w	80027ae <HAL_DMA_IRQHandler+0x3d6>
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80024b4:	fa27 f20c 	lsr.w	r2, r7, ip
 80024b8:	07d2      	lsls	r2, r2, #31
 80024ba:	d50a      	bpl.n	80024d2 <HAL_DMA_IRQHandler+0xfa>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80024bc:	695a      	ldr	r2, [r3, #20]
 80024be:	0612      	lsls	r2, r2, #24
 80024c0:	d507      	bpl.n	80024d2 <HAL_DMA_IRQHandler+0xfa>
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80024c2:	2201      	movs	r2, #1
 80024c4:	fa02 f20c 	lsl.w	r2, r2, ip
 80024c8:	60a2      	str	r2, [r4, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80024ca:	6d72      	ldr	r2, [r6, #84]	; 0x54
 80024cc:	f042 0202 	orr.w	r2, r2, #2
 80024d0:	6572      	str	r2, [r6, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80024d2:	f04f 0e04 	mov.w	lr, #4
 80024d6:	fa0e fe0c 	lsl.w	lr, lr, ip
 80024da:	ea1e 0f07 	tst.w	lr, r7
 80024de:	d05a      	beq.n	8002596 <HAL_DMA_IRQHandler+0x1be>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80024e0:	2800      	cmp	r0, #0
 80024e2:	d14f      	bne.n	8002584 <HAL_DMA_IRQHandler+0x1ac>
 80024e4:	4a60      	ldr	r2, [pc, #384]	; (8002668 <HAL_DMA_IRQHandler+0x290>)
 80024e6:	f8df 8184 	ldr.w	r8, [pc, #388]	; 800266c <HAL_DMA_IRQHandler+0x294>
 80024ea:	4543      	cmp	r3, r8
 80024ec:	bf18      	it	ne
 80024ee:	4293      	cmpne	r3, r2
 80024f0:	f108 0830 	add.w	r8, r8, #48	; 0x30
 80024f4:	bf0c      	ite	eq
 80024f6:	2201      	moveq	r2, #1
 80024f8:	2200      	movne	r2, #0
 80024fa:	4543      	cmp	r3, r8
 80024fc:	bf08      	it	eq
 80024fe:	f042 0201 	orreq.w	r2, r2, #1
 8002502:	f108 0818 	add.w	r8, r8, #24
 8002506:	4543      	cmp	r3, r8
 8002508:	bf08      	it	eq
 800250a:	f042 0201 	orreq.w	r2, r2, #1
 800250e:	f108 0818 	add.w	r8, r8, #24
 8002512:	4543      	cmp	r3, r8
 8002514:	bf08      	it	eq
 8002516:	f042 0201 	orreq.w	r2, r2, #1
 800251a:	f108 0818 	add.w	r8, r8, #24
 800251e:	4543      	cmp	r3, r8
 8002520:	bf08      	it	eq
 8002522:	f042 0201 	orreq.w	r2, r2, #1
 8002526:	f508 7856 	add.w	r8, r8, #856	; 0x358
 800252a:	4543      	cmp	r3, r8
 800252c:	bf08      	it	eq
 800252e:	f042 0201 	orreq.w	r2, r2, #1
 8002532:	f108 0818 	add.w	r8, r8, #24
 8002536:	4543      	cmp	r3, r8
 8002538:	bf08      	it	eq
 800253a:	f042 0201 	orreq.w	r2, r2, #1
 800253e:	f108 0818 	add.w	r8, r8, #24
 8002542:	4543      	cmp	r3, r8
 8002544:	bf08      	it	eq
 8002546:	f042 0201 	orreq.w	r2, r2, #1
 800254a:	f108 0818 	add.w	r8, r8, #24
 800254e:	4543      	cmp	r3, r8
 8002550:	bf08      	it	eq
 8002552:	f042 0201 	orreq.w	r2, r2, #1
 8002556:	f108 0818 	add.w	r8, r8, #24
 800255a:	4543      	cmp	r3, r8
 800255c:	bf08      	it	eq
 800255e:	f042 0201 	orreq.w	r2, r2, #1
 8002562:	f108 0818 	add.w	r8, r8, #24
 8002566:	4543      	cmp	r3, r8
 8002568:	bf08      	it	eq
 800256a:	f042 0201 	orreq.w	r2, r2, #1
 800256e:	f108 0818 	add.w	r8, r8, #24
 8002572:	4543      	cmp	r3, r8
 8002574:	bf08      	it	eq
 8002576:	f042 0201 	orreq.w	r2, r2, #1
 800257a:	b91a      	cbnz	r2, 8002584 <HAL_DMA_IRQHandler+0x1ac>
 800257c:	4a39      	ldr	r2, [pc, #228]	; (8002664 <HAL_DMA_IRQHandler+0x28c>)
 800257e:	4293      	cmp	r3, r2
 8002580:	f040 8214 	bne.w	80029ac <HAL_DMA_IRQHandler+0x5d4>
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	0792      	lsls	r2, r2, #30
 8002588:	d505      	bpl.n	8002596 <HAL_DMA_IRQHandler+0x1be>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800258a:	f8c4 e008 	str.w	lr, [r4, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800258e:	6d72      	ldr	r2, [r6, #84]	; 0x54
 8002590:	f042 0204 	orr.w	r2, r2, #4
 8002594:	6572      	str	r2, [r6, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002596:	2210      	movs	r2, #16
 8002598:	fa02 fc0c 	lsl.w	ip, r2, ip
 800259c:	ea1c 0f07 	tst.w	ip, r7
 80025a0:	d069      	beq.n	8002676 <HAL_DMA_IRQHandler+0x29e>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80025a2:	2800      	cmp	r0, #0
 80025a4:	d145      	bne.n	8002632 <HAL_DMA_IRQHandler+0x25a>
 80025a6:	4a30      	ldr	r2, [pc, #192]	; (8002668 <HAL_DMA_IRQHandler+0x290>)
 80025a8:	4830      	ldr	r0, [pc, #192]	; (800266c <HAL_DMA_IRQHandler+0x294>)
 80025aa:	4283      	cmp	r3, r0
 80025ac:	bf18      	it	ne
 80025ae:	4293      	cmpne	r3, r2
 80025b0:	f100 0030 	add.w	r0, r0, #48	; 0x30
 80025b4:	bf0c      	ite	eq
 80025b6:	2201      	moveq	r2, #1
 80025b8:	2200      	movne	r2, #0
 80025ba:	4283      	cmp	r3, r0
 80025bc:	bf08      	it	eq
 80025be:	f042 0201 	orreq.w	r2, r2, #1
 80025c2:	3018      	adds	r0, #24
 80025c4:	4283      	cmp	r3, r0
 80025c6:	bf08      	it	eq
 80025c8:	f042 0201 	orreq.w	r2, r2, #1
 80025cc:	3018      	adds	r0, #24
 80025ce:	4283      	cmp	r3, r0
 80025d0:	bf08      	it	eq
 80025d2:	f042 0201 	orreq.w	r2, r2, #1
 80025d6:	3018      	adds	r0, #24
 80025d8:	4283      	cmp	r3, r0
 80025da:	bf08      	it	eq
 80025dc:	f042 0201 	orreq.w	r2, r2, #1
 80025e0:	f500 7056 	add.w	r0, r0, #856	; 0x358
 80025e4:	4283      	cmp	r3, r0
 80025e6:	bf08      	it	eq
 80025e8:	f042 0201 	orreq.w	r2, r2, #1
 80025ec:	3018      	adds	r0, #24
 80025ee:	4283      	cmp	r3, r0
 80025f0:	bf08      	it	eq
 80025f2:	f042 0201 	orreq.w	r2, r2, #1
 80025f6:	3018      	adds	r0, #24
 80025f8:	4283      	cmp	r3, r0
 80025fa:	bf08      	it	eq
 80025fc:	f042 0201 	orreq.w	r2, r2, #1
 8002600:	3018      	adds	r0, #24
 8002602:	4283      	cmp	r3, r0
 8002604:	bf08      	it	eq
 8002606:	f042 0201 	orreq.w	r2, r2, #1
 800260a:	3018      	adds	r0, #24
 800260c:	4283      	cmp	r3, r0
 800260e:	bf08      	it	eq
 8002610:	f042 0201 	orreq.w	r2, r2, #1
 8002614:	3018      	adds	r0, #24
 8002616:	4283      	cmp	r3, r0
 8002618:	bf08      	it	eq
 800261a:	f042 0201 	orreq.w	r2, r2, #1
 800261e:	3018      	adds	r0, #24
 8002620:	4283      	cmp	r3, r0
 8002622:	bf08      	it	eq
 8002624:	f042 0201 	orreq.w	r2, r2, #1
 8002628:	b91a      	cbnz	r2, 8002632 <HAL_DMA_IRQHandler+0x25a>
 800262a:	4a0e      	ldr	r2, [pc, #56]	; (8002664 <HAL_DMA_IRQHandler+0x28c>)
 800262c:	4293      	cmp	r3, r2
 800262e:	f040 81c5 	bne.w	80029bc <HAL_DMA_IRQHandler+0x5e4>
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	0712      	lsls	r2, r2, #28
 8002636:	d51e      	bpl.n	8002676 <HAL_DMA_IRQHandler+0x29e>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002638:	f8c4 c008 	str.w	ip, [r4, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	0352      	lsls	r2, r2, #13
 8002640:	f100 814e 	bmi.w	80028e0 <HAL_DMA_IRQHandler+0x508>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	05d2      	lsls	r2, r2, #23
 8002648:	d403      	bmi.n	8002652 <HAL_DMA_IRQHandler+0x27a>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	f022 0208 	bic.w	r2, r2, #8
 8002650:	601a      	str	r2, [r3, #0]
          if(hdma->XferHalfCpltCallback != NULL)
 8002652:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8002654:	b17b      	cbz	r3, 8002676 <HAL_DMA_IRQHandler+0x29e>
 8002656:	e00b      	b.n	8002670 <HAL_DMA_IRQHandler+0x298>
 8002658:	24000100 	.word	0x24000100
 800265c:	40020028 	.word	0x40020028
 8002660:	40020010 	.word	0x40020010
 8002664:	400204b8 	.word	0x400204b8
 8002668:	40020058 	.word	0x40020058
 800266c:	40020040 	.word	0x40020040
            hdma->XferHalfCpltCallback(hdma);
 8002670:	4630      	mov	r0, r6
 8002672:	4798      	blx	r3
 8002674:	6df1      	ldr	r1, [r6, #92]	; 0x5c
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002676:	f001 011f 	and.w	r1, r1, #31
 800267a:	2020      	movs	r0, #32
 800267c:	4088      	lsls	r0, r1
 800267e:	4238      	tst	r0, r7
 8002680:	d066      	beq.n	8002750 <HAL_DMA_IRQHandler+0x378>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002682:	6832      	ldr	r2, [r6, #0]
 8002684:	4ba4      	ldr	r3, [pc, #656]	; (8002918 <HAL_DMA_IRQHandler+0x540>)
 8002686:	4fa5      	ldr	r7, [pc, #660]	; (800291c <HAL_DMA_IRQHandler+0x544>)
 8002688:	42ba      	cmp	r2, r7
 800268a:	bf18      	it	ne
 800268c:	429a      	cmpne	r2, r3
 800268e:	f107 0718 	add.w	r7, r7, #24
 8002692:	bf0c      	ite	eq
 8002694:	2301      	moveq	r3, #1
 8002696:	2300      	movne	r3, #0
 8002698:	42ba      	cmp	r2, r7
 800269a:	bf08      	it	eq
 800269c:	f043 0301 	orreq.w	r3, r3, #1
 80026a0:	3718      	adds	r7, #24
 80026a2:	42ba      	cmp	r2, r7
 80026a4:	bf08      	it	eq
 80026a6:	f043 0301 	orreq.w	r3, r3, #1
 80026aa:	3718      	adds	r7, #24
 80026ac:	42ba      	cmp	r2, r7
 80026ae:	bf08      	it	eq
 80026b0:	f043 0301 	orreq.w	r3, r3, #1
 80026b4:	3718      	adds	r7, #24
 80026b6:	42ba      	cmp	r2, r7
 80026b8:	bf08      	it	eq
 80026ba:	f043 0301 	orreq.w	r3, r3, #1
 80026be:	3718      	adds	r7, #24
 80026c0:	42ba      	cmp	r2, r7
 80026c2:	bf08      	it	eq
 80026c4:	f043 0301 	orreq.w	r3, r3, #1
 80026c8:	3718      	adds	r7, #24
 80026ca:	42ba      	cmp	r2, r7
 80026cc:	bf08      	it	eq
 80026ce:	f043 0301 	orreq.w	r3, r3, #1
 80026d2:	f507 7756 	add.w	r7, r7, #856	; 0x358
 80026d6:	42ba      	cmp	r2, r7
 80026d8:	bf08      	it	eq
 80026da:	f043 0301 	orreq.w	r3, r3, #1
 80026de:	3718      	adds	r7, #24
 80026e0:	42ba      	cmp	r2, r7
 80026e2:	bf08      	it	eq
 80026e4:	f043 0301 	orreq.w	r3, r3, #1
 80026e8:	3718      	adds	r7, #24
 80026ea:	42ba      	cmp	r2, r7
 80026ec:	bf08      	it	eq
 80026ee:	f043 0301 	orreq.w	r3, r3, #1
 80026f2:	3718      	adds	r7, #24
 80026f4:	42ba      	cmp	r2, r7
 80026f6:	bf08      	it	eq
 80026f8:	f043 0301 	orreq.w	r3, r3, #1
 80026fc:	3718      	adds	r7, #24
 80026fe:	42ba      	cmp	r2, r7
 8002700:	bf08      	it	eq
 8002702:	f043 0301 	orreq.w	r3, r3, #1
 8002706:	3718      	adds	r7, #24
 8002708:	42ba      	cmp	r2, r7
 800270a:	bf08      	it	eq
 800270c:	f043 0301 	orreq.w	r3, r3, #1
 8002710:	3718      	adds	r7, #24
 8002712:	42ba      	cmp	r2, r7
 8002714:	bf08      	it	eq
 8002716:	f043 0301 	orreq.w	r3, r3, #1
 800271a:	b91b      	cbnz	r3, 8002724 <HAL_DMA_IRQHandler+0x34c>
 800271c:	4b80      	ldr	r3, [pc, #512]	; (8002920 <HAL_DMA_IRQHandler+0x548>)
 800271e:	429a      	cmp	r2, r3
 8002720:	f040 8161 	bne.w	80029e6 <HAL_DMA_IRQHandler+0x60e>
 8002724:	6813      	ldr	r3, [r2, #0]
 8002726:	06df      	lsls	r7, r3, #27
 8002728:	d512      	bpl.n	8002750 <HAL_DMA_IRQHandler+0x378>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800272a:	60a0      	str	r0, [r4, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 800272c:	f896 3035 	ldrb.w	r3, [r6, #53]	; 0x35
 8002730:	2b04      	cmp	r3, #4
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002732:	6813      	ldr	r3, [r2, #0]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 8002734:	f000 80b6 	beq.w	80028a4 <HAL_DMA_IRQHandler+0x4cc>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002738:	f413 2f80 	tst.w	r3, #262144	; 0x40000
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800273c:	6813      	ldr	r3, [r2, #0]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800273e:	f000 80d8 	beq.w	80028f2 <HAL_DMA_IRQHandler+0x51a>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002742:	031f      	lsls	r7, r3, #12
 8002744:	f140 80e3 	bpl.w	800290e <HAL_DMA_IRQHandler+0x536>
          if(hdma->XferCpltCallback != NULL)
 8002748:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 800274a:	b10b      	cbz	r3, 8002750 <HAL_DMA_IRQHandler+0x378>
            hdma->XferCpltCallback(hdma);
 800274c:	4630      	mov	r0, r6
 800274e:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002750:	6d73      	ldr	r3, [r6, #84]	; 0x54
 8002752:	2b00      	cmp	r3, #0
 8002754:	f000 80c1 	beq.w	80028da <HAL_DMA_IRQHandler+0x502>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8002758:	6d73      	ldr	r3, [r6, #84]	; 0x54
 800275a:	07dc      	lsls	r4, r3, #31
 800275c:	d51e      	bpl.n	800279c <HAL_DMA_IRQHandler+0x3c4>
        __HAL_DMA_DISABLE(hdma);
 800275e:	6832      	ldr	r2, [r6, #0]
        hdma->State = HAL_DMA_STATE_ABORT;
 8002760:	2104      	movs	r1, #4
 8002762:	f886 1035 	strb.w	r1, [r6, #53]	; 0x35
  uint32_t timeout = SystemCoreClock / 9600U;
 8002766:	496f      	ldr	r1, [pc, #444]	; (8002924 <HAL_DMA_IRQHandler+0x54c>)
        __HAL_DMA_DISABLE(hdma);
 8002768:	6813      	ldr	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 800276a:	fba1 5105 	umull	r5, r1, r1, r5
        __HAL_DMA_DISABLE(hdma);
 800276e:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 8002772:	0a89      	lsrs	r1, r1, #10
        __HAL_DMA_DISABLE(hdma);
 8002774:	6013      	str	r3, [r2, #0]
 8002776:	e002      	b.n	800277e <HAL_DMA_IRQHandler+0x3a6>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8002778:	6813      	ldr	r3, [r2, #0]
 800277a:	07d8      	lsls	r0, r3, #31
 800277c:	d504      	bpl.n	8002788 <HAL_DMA_IRQHandler+0x3b0>
          if (++count > timeout)
 800277e:	9b01      	ldr	r3, [sp, #4]
 8002780:	3301      	adds	r3, #1
 8002782:	428b      	cmp	r3, r1
 8002784:	9301      	str	r3, [sp, #4]
 8002786:	d9f7      	bls.n	8002778 <HAL_DMA_IRQHandler+0x3a0>
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002788:	6813      	ldr	r3, [r2, #0]
 800278a:	07db      	lsls	r3, r3, #31
          hdma->State = HAL_DMA_STATE_ERROR;
 800278c:	bf4c      	ite	mi
 800278e:	2303      	movmi	r3, #3
          hdma->State = HAL_DMA_STATE_READY;
 8002790:	2301      	movpl	r3, #1
 8002792:	f886 3035 	strb.w	r3, [r6, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 8002796:	2300      	movs	r3, #0
 8002798:	f886 3034 	strb.w	r3, [r6, #52]	; 0x34
      if(hdma->XferErrorCallback != NULL)
 800279c:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
 800279e:	2b00      	cmp	r3, #0
 80027a0:	f000 809b 	beq.w	80028da <HAL_DMA_IRQHandler+0x502>
          hdma->XferCpltCallback(hdma);
 80027a4:	4630      	mov	r0, r6
}
 80027a6:	b002      	add	sp, #8
 80027a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
          hdma->XferCpltCallback(hdma);
 80027ac:	4718      	bx	r3
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80027ae:	f8d3 e000 	ldr.w	lr, [r3]
 80027b2:	f01e 0f04 	tst.w	lr, #4
 80027b6:	d00a      	beq.n	80027ce <HAL_DMA_IRQHandler+0x3f6>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80027b8:	f8d3 e000 	ldr.w	lr, [r3]
 80027bc:	f02e 0e04 	bic.w	lr, lr, #4
 80027c0:	f8c3 e000 	str.w	lr, [r3]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80027c4:	60a2      	str	r2, [r4, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80027c6:	6d72      	ldr	r2, [r6, #84]	; 0x54
 80027c8:	f042 0201 	orr.w	r2, r2, #1
 80027cc:	6572      	str	r2, [r6, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80027ce:	fa27 f20c 	lsr.w	r2, r7, ip
 80027d2:	07d2      	lsls	r2, r2, #31
 80027d4:	f57f ae7d 	bpl.w	80024d2 <HAL_DMA_IRQHandler+0xfa>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80027d8:	4a53      	ldr	r2, [pc, #332]	; (8002928 <HAL_DMA_IRQHandler+0x550>)
 80027da:	f8df e150 	ldr.w	lr, [pc, #336]	; 800292c <HAL_DMA_IRQHandler+0x554>
 80027de:	4573      	cmp	r3, lr
 80027e0:	bf18      	it	ne
 80027e2:	4293      	cmpne	r3, r2
 80027e4:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
 80027e8:	bf0c      	ite	eq
 80027ea:	2201      	moveq	r2, #1
 80027ec:	2200      	movne	r2, #0
 80027ee:	4573      	cmp	r3, lr
 80027f0:	bf08      	it	eq
 80027f2:	f042 0201 	orreq.w	r2, r2, #1
 80027f6:	f10e 0e18 	add.w	lr, lr, #24
 80027fa:	4573      	cmp	r3, lr
 80027fc:	bf08      	it	eq
 80027fe:	f042 0201 	orreq.w	r2, r2, #1
 8002802:	f10e 0e18 	add.w	lr, lr, #24
 8002806:	4573      	cmp	r3, lr
 8002808:	bf08      	it	eq
 800280a:	f042 0201 	orreq.w	r2, r2, #1
 800280e:	f10e 0e18 	add.w	lr, lr, #24
 8002812:	4573      	cmp	r3, lr
 8002814:	bf08      	it	eq
 8002816:	f042 0201 	orreq.w	r2, r2, #1
 800281a:	f50e 7e56 	add.w	lr, lr, #856	; 0x358
 800281e:	4573      	cmp	r3, lr
 8002820:	bf08      	it	eq
 8002822:	f042 0201 	orreq.w	r2, r2, #1
 8002826:	f10e 0e18 	add.w	lr, lr, #24
 800282a:	4573      	cmp	r3, lr
 800282c:	bf08      	it	eq
 800282e:	f042 0201 	orreq.w	r2, r2, #1
 8002832:	f10e 0e18 	add.w	lr, lr, #24
 8002836:	4573      	cmp	r3, lr
 8002838:	bf08      	it	eq
 800283a:	f042 0201 	orreq.w	r2, r2, #1
 800283e:	f10e 0e18 	add.w	lr, lr, #24
 8002842:	4573      	cmp	r3, lr
 8002844:	bf08      	it	eq
 8002846:	f042 0201 	orreq.w	r2, r2, #1
 800284a:	f10e 0e18 	add.w	lr, lr, #24
 800284e:	4573      	cmp	r3, lr
 8002850:	bf08      	it	eq
 8002852:	f042 0201 	orreq.w	r2, r2, #1
 8002856:	f10e 0e18 	add.w	lr, lr, #24
 800285a:	4573      	cmp	r3, lr
 800285c:	bf08      	it	eq
 800285e:	f042 0201 	orreq.w	r2, r2, #1
 8002862:	f10e 0e18 	add.w	lr, lr, #24
 8002866:	4573      	cmp	r3, lr
 8002868:	bf08      	it	eq
 800286a:	f042 0201 	orreq.w	r2, r2, #1
 800286e:	f10e 0e18 	add.w	lr, lr, #24
 8002872:	4573      	cmp	r3, lr
 8002874:	bf08      	it	eq
 8002876:	f042 0201 	orreq.w	r2, r2, #1
 800287a:	2a00      	cmp	r2, #0
 800287c:	f47f ae1e 	bne.w	80024bc <HAL_DMA_IRQHandler+0xe4>
 8002880:	2800      	cmp	r0, #0
 8002882:	f47f ae1b 	bne.w	80024bc <HAL_DMA_IRQHandler+0xe4>
 8002886:	681a      	ldr	r2, [r3, #0]
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002888:	2204      	movs	r2, #4
 800288a:	fa02 f20c 	lsl.w	r2, r2, ip
 800288e:	423a      	tst	r2, r7
 8002890:	f040 808c 	bne.w	80029ac <HAL_DMA_IRQHandler+0x5d4>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002894:	2210      	movs	r2, #16
 8002896:	fa02 fc0c 	lsl.w	ip, r2, ip
 800289a:	ea17 0f0c 	tst.w	r7, ip
 800289e:	f43f aeea 	beq.w	8002676 <HAL_DMA_IRQHandler+0x29e>
 80028a2:	e680      	b.n	80025a6 <HAL_DMA_IRQHandler+0x1ce>
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80028a4:	f023 0316 	bic.w	r3, r3, #22
 80028a8:	6013      	str	r3, [r2, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80028aa:	6953      	ldr	r3, [r2, #20]
 80028ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80028b0:	6153      	str	r3, [r2, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80028b2:	6c33      	ldr	r3, [r6, #64]	; 0x40
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d03b      	beq.n	8002930 <HAL_DMA_IRQHandler+0x558>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80028b8:	6813      	ldr	r3, [r2, #0]
 80028ba:	f023 0308 	bic.w	r3, r3, #8
 80028be:	6013      	str	r3, [r2, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80028c0:	233f      	movs	r3, #63	; 0x3f
          hdma->State = HAL_DMA_STATE_READY;
 80028c2:	2001      	movs	r0, #1
          __HAL_UNLOCK(hdma);
 80028c4:	2200      	movs	r2, #0
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80028c6:	408b      	lsls	r3, r1
 80028c8:	60a3      	str	r3, [r4, #8]
          if(hdma->XferAbortCallback != NULL)
 80028ca:	6d33      	ldr	r3, [r6, #80]	; 0x50
          hdma->State = HAL_DMA_STATE_READY;
 80028cc:	f886 0035 	strb.w	r0, [r6, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 80028d0:	f886 2034 	strb.w	r2, [r6, #52]	; 0x34
          if(hdma->XferAbortCallback != NULL)
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	f47f af65 	bne.w	80027a4 <HAL_DMA_IRQHandler+0x3cc>
}
 80028da:	b002      	add	sp, #8
 80028dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	0318      	lsls	r0, r3, #12
 80028e4:	f57f aeb5 	bpl.w	8002652 <HAL_DMA_IRQHandler+0x27a>
            if(hdma->XferM1HalfCpltCallback != NULL)
 80028e8:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	f47f aec0 	bne.w	8002670 <HAL_DMA_IRQHandler+0x298>
 80028f0:	e6c1      	b.n	8002676 <HAL_DMA_IRQHandler+0x29e>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80028f2:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 80028f6:	f47f af27 	bne.w	8002748 <HAL_DMA_IRQHandler+0x370>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80028fa:	6811      	ldr	r1, [r2, #0]
 80028fc:	f021 0110 	bic.w	r1, r1, #16
 8002900:	6011      	str	r1, [r2, #0]
            hdma->State = HAL_DMA_STATE_READY;
 8002902:	2201      	movs	r2, #1
            __HAL_UNLOCK(hdma);
 8002904:	f886 3034 	strb.w	r3, [r6, #52]	; 0x34
            hdma->State = HAL_DMA_STATE_READY;
 8002908:	f886 2035 	strb.w	r2, [r6, #53]	; 0x35
            __HAL_UNLOCK(hdma);
 800290c:	e71c      	b.n	8002748 <HAL_DMA_IRQHandler+0x370>
            if(hdma->XferM1CpltCallback != NULL)
 800290e:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8002910:	2b00      	cmp	r3, #0
 8002912:	f47f af1b 	bne.w	800274c <HAL_DMA_IRQHandler+0x374>
 8002916:	e71b      	b.n	8002750 <HAL_DMA_IRQHandler+0x378>
 8002918:	40020010 	.word	0x40020010
 800291c:	40020028 	.word	0x40020028
 8002920:	400204b8 	.word	0x400204b8
 8002924:	1b4e81b5 	.word	0x1b4e81b5
 8002928:	40020058 	.word	0x40020058
 800292c:	40020040 	.word	0x40020040
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002930:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 8002932:	2b00      	cmp	r3, #0
 8002934:	d1c0      	bne.n	80028b8 <HAL_DMA_IRQHandler+0x4e0>
 8002936:	e7c3      	b.n	80028c0 <HAL_DMA_IRQHandler+0x4e8>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8002938:	4a4b      	ldr	r2, [pc, #300]	; (8002a68 <HAL_DMA_IRQHandler+0x690>)
 800293a:	484c      	ldr	r0, [pc, #304]	; (8002a6c <HAL_DMA_IRQHandler+0x694>)
 800293c:	4283      	cmp	r3, r0
 800293e:	bf18      	it	ne
 8002940:	4293      	cmpne	r3, r2
 8002942:	f100 0014 	add.w	r0, r0, #20
 8002946:	bf0c      	ite	eq
 8002948:	2201      	moveq	r2, #1
 800294a:	2200      	movne	r2, #0
 800294c:	4283      	cmp	r3, r0
 800294e:	bf08      	it	eq
 8002950:	f042 0201 	orreq.w	r2, r2, #1
 8002954:	3014      	adds	r0, #20
 8002956:	4283      	cmp	r3, r0
 8002958:	bf08      	it	eq
 800295a:	f042 0201 	orreq.w	r2, r2, #1
 800295e:	3014      	adds	r0, #20
 8002960:	4283      	cmp	r3, r0
 8002962:	bf08      	it	eq
 8002964:	f042 0201 	orreq.w	r2, r2, #1
 8002968:	3014      	adds	r0, #20
 800296a:	4283      	cmp	r3, r0
 800296c:	bf08      	it	eq
 800296e:	f042 0201 	orreq.w	r2, r2, #1
 8002972:	3014      	adds	r0, #20
 8002974:	4283      	cmp	r3, r0
 8002976:	bf08      	it	eq
 8002978:	f042 0201 	orreq.w	r2, r2, #1
 800297c:	b912      	cbnz	r2, 8002984 <HAL_DMA_IRQHandler+0x5ac>
 800297e:	4a3c      	ldr	r2, [pc, #240]	; (8002a70 <HAL_DMA_IRQHandler+0x698>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d1aa      	bne.n	80028da <HAL_DMA_IRQHandler+0x502>
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8002984:	6df0      	ldr	r0, [r6, #92]	; 0x5c
 8002986:	2504      	movs	r5, #4
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8002988:	681a      	ldr	r2, [r3, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800298a:	f000 001f 	and.w	r0, r0, #31
 800298e:	4085      	lsls	r5, r0
 8002990:	420d      	tst	r5, r1
 8002992:	d018      	beq.n	80029c6 <HAL_DMA_IRQHandler+0x5ee>
 8002994:	0757      	lsls	r7, r2, #29
 8002996:	d516      	bpl.n	80029c6 <HAL_DMA_IRQHandler+0x5ee>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002998:	0410      	lsls	r0, r2, #16
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800299a:	6065      	str	r5, [r4, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800299c:	d547      	bpl.n	8002a2e <HAL_DMA_IRQHandler+0x656>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800299e:	03d1      	lsls	r1, r2, #15
 80029a0:	d44b      	bmi.n	8002a3a <HAL_DMA_IRQHandler+0x662>
          if(hdma->XferM1HalfCpltCallback != NULL)
 80029a2:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	f47f aefd 	bne.w	80027a4 <HAL_DMA_IRQHandler+0x3cc>
 80029aa:	e796      	b.n	80028da <HAL_DMA_IRQHandler+0x502>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80029ac:	681a      	ldr	r2, [r3, #0]
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80029ae:	2210      	movs	r2, #16
 80029b0:	fa02 fc0c 	lsl.w	ip, r2, ip
 80029b4:	ea17 0f0c 	tst.w	r7, ip
 80029b8:	f43f ae5d 	beq.w	8002676 <HAL_DMA_IRQHandler+0x29e>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	0750      	lsls	r0, r2, #29
 80029c0:	f57f ae59 	bpl.w	8002676 <HAL_DMA_IRQHandler+0x29e>
 80029c4:	e638      	b.n	8002638 <HAL_DMA_IRQHandler+0x260>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80029c6:	2502      	movs	r5, #2
 80029c8:	4085      	lsls	r5, r0
 80029ca:	420d      	tst	r5, r1
 80029cc:	d010      	beq.n	80029f0 <HAL_DMA_IRQHandler+0x618>
 80029ce:	0797      	lsls	r7, r2, #30
 80029d0:	d50e      	bpl.n	80029f0 <HAL_DMA_IRQHandler+0x618>
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80029d2:	6065      	str	r5, [r4, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80029d4:	0414      	lsls	r4, r2, #16
 80029d6:	d535      	bpl.n	8002a44 <HAL_DMA_IRQHandler+0x66c>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80029d8:	03d0      	lsls	r0, r2, #15
 80029da:	d43f      	bmi.n	8002a5c <HAL_DMA_IRQHandler+0x684>
          if(hdma->XferM1CpltCallback != NULL)
 80029dc:	6c73      	ldr	r3, [r6, #68]	; 0x44
 80029de:	2b00      	cmp	r3, #0
 80029e0:	f47f aee0 	bne.w	80027a4 <HAL_DMA_IRQHandler+0x3cc>
 80029e4:	e779      	b.n	80028da <HAL_DMA_IRQHandler+0x502>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80029e6:	6813      	ldr	r3, [r2, #0]
 80029e8:	079b      	lsls	r3, r3, #30
 80029ea:	f57f aeb1 	bpl.w	8002750 <HAL_DMA_IRQHandler+0x378>
 80029ee:	e69c      	b.n	800272a <HAL_DMA_IRQHandler+0x352>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80029f0:	2508      	movs	r5, #8
 80029f2:	4085      	lsls	r5, r0
 80029f4:	420d      	tst	r5, r1
 80029f6:	f43f af70 	beq.w	80028da <HAL_DMA_IRQHandler+0x502>
 80029fa:	0711      	lsls	r1, r2, #28
 80029fc:	f57f af6d 	bpl.w	80028da <HAL_DMA_IRQHandler+0x502>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a00:	681a      	ldr	r2, [r3, #0]
      __HAL_UNLOCK(hdma);
 8002a02:	2100      	movs	r1, #0
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a04:	f022 020e 	bic.w	r2, r2, #14
 8002a08:	601a      	str	r2, [r3, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8002a0a:	2301      	movs	r3, #1
      if (hdma->XferErrorCallback != NULL)
 8002a0c:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8002a0e:	fa03 f000 	lsl.w	r0, r3, r0
 8002a12:	6060      	str	r0, [r4, #4]
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002a14:	6573      	str	r3, [r6, #84]	; 0x54
      __HAL_UNLOCK(hdma);
 8002a16:	f886 1034 	strb.w	r1, [r6, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8002a1a:	f886 3035 	strb.w	r3, [r6, #53]	; 0x35
      if (hdma->XferErrorCallback != NULL)
 8002a1e:	2a00      	cmp	r2, #0
 8002a20:	f43f af5b 	beq.w	80028da <HAL_DMA_IRQHandler+0x502>
        hdma->XferErrorCallback(hdma);
 8002a24:	4630      	mov	r0, r6
}
 8002a26:	b002      	add	sp, #8
 8002a28:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        hdma->XferErrorCallback(hdma);
 8002a2c:	4710      	bx	r2
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002a2e:	0692      	lsls	r2, r2, #26
 8002a30:	d403      	bmi.n	8002a3a <HAL_DMA_IRQHandler+0x662>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	f022 0204 	bic.w	r2, r2, #4
 8002a38:	601a      	str	r2, [r3, #0]
       if(hdma->XferHalfCpltCallback != NULL)
 8002a3a:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	f47f aeb1 	bne.w	80027a4 <HAL_DMA_IRQHandler+0x3cc>
 8002a42:	e74a      	b.n	80028da <HAL_DMA_IRQHandler+0x502>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002a44:	f012 0220 	ands.w	r2, r2, #32
 8002a48:	d108      	bne.n	8002a5c <HAL_DMA_IRQHandler+0x684>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002a4a:	6819      	ldr	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8002a4c:	2001      	movs	r0, #1
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002a4e:	f021 010a 	bic.w	r1, r1, #10
 8002a52:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8002a54:	f886 0035 	strb.w	r0, [r6, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 8002a58:	f886 2034 	strb.w	r2, [r6, #52]	; 0x34
        if(hdma->XferCpltCallback != NULL)
 8002a5c:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	f47f aea0 	bne.w	80027a4 <HAL_DMA_IRQHandler+0x3cc>
 8002a64:	e739      	b.n	80028da <HAL_DMA_IRQHandler+0x502>
 8002a66:	bf00      	nop
 8002a68:	58025408 	.word	0x58025408
 8002a6c:	5802541c 	.word	0x5802541c
 8002a70:	58025494 	.word	0x58025494

08002a74 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002a78:	680c      	ldr	r4, [r1, #0]
{
 8002a7a:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002a7c:	2c00      	cmp	r4, #0
 8002a7e:	f000 80a3 	beq.w	8002bc8 <HAL_GPIO_Init+0x154>
 8002a82:	f04f 0c00 	mov.w	ip, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a86:	4f86      	ldr	r7, [pc, #536]	; (8002ca0 <HAL_GPIO_Init+0x22c>)
  uint32_t position = 0x00U;
 8002a88:	4663      	mov	r3, ip
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	409a      	lsls	r2, r3
    if (iocurrent != 0x00U)
 8002a8e:	ea12 0e04 	ands.w	lr, r2, r4
 8002a92:	f000 8092 	beq.w	8002bba <HAL_GPIO_Init+0x146>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a96:	684d      	ldr	r5, [r1, #4]
 8002a98:	f005 0903 	and.w	r9, r5, #3
 8002a9c:	f109 36ff 	add.w	r6, r9, #4294967295	; 0xffffffff
 8002aa0:	2e01      	cmp	r6, #1
 8002aa2:	f240 8094 	bls.w	8002bce <HAL_GPIO_Init+0x15a>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002aa6:	f1b9 0f03 	cmp.w	r9, #3
 8002aaa:	f040 80ce 	bne.w	8002c4a <HAL_GPIO_Init+0x1d6>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002aae:	fa09 f20c 	lsl.w	r2, r9, ip
 8002ab2:	ea6f 0802 	mvn.w	r8, r2
      temp = GPIOx->MODER;
 8002ab6:	6806      	ldr	r6, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ab8:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002abc:	ea06 0608 	and.w	r6, r6, r8
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ac0:	ea42 0206 	orr.w	r2, r2, r6
      GPIOx->MODER = temp;
 8002ac4:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ac6:	d078      	beq.n	8002bba <HAL_GPIO_Init+0x146>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ac8:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8002acc:	f023 0803 	bic.w	r8, r3, #3

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002ad0:	f003 0903 	and.w	r9, r3, #3
 8002ad4:	260f      	movs	r6, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ad6:	f042 0202 	orr.w	r2, r2, #2
 8002ada:	f108 48b0 	add.w	r8, r8, #1476395008	; 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002ade:	ea4f 0989 	mov.w	r9, r9, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ae2:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8002ae6:	f508 6880 	add.w	r8, r8, #1024	; 0x400
 8002aea:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002aee:	fa06 f609 	lsl.w	r6, r6, r9
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002af2:	f002 0202 	and.w	r2, r2, #2
 8002af6:	9201      	str	r2, [sp, #4]
 8002af8:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8002afa:	f8d8 2008 	ldr.w	r2, [r8, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002afe:	ea22 0206 	bic.w	r2, r2, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002b02:	4e68      	ldr	r6, [pc, #416]	; (8002ca4 <HAL_GPIO_Init+0x230>)
 8002b04:	42b0      	cmp	r0, r6
 8002b06:	d024      	beq.n	8002b52 <HAL_GPIO_Init+0xde>
 8002b08:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8002b0c:	42b0      	cmp	r0, r6
 8002b0e:	f000 80a8 	beq.w	8002c62 <HAL_GPIO_Init+0x1ee>
 8002b12:	4e65      	ldr	r6, [pc, #404]	; (8002ca8 <HAL_GPIO_Init+0x234>)
 8002b14:	42b0      	cmp	r0, r6
 8002b16:	f000 80a9 	beq.w	8002c6c <HAL_GPIO_Init+0x1f8>
 8002b1a:	4e64      	ldr	r6, [pc, #400]	; (8002cac <HAL_GPIO_Init+0x238>)
 8002b1c:	42b0      	cmp	r0, r6
 8002b1e:	f000 809b 	beq.w	8002c58 <HAL_GPIO_Init+0x1e4>
 8002b22:	4e63      	ldr	r6, [pc, #396]	; (8002cb0 <HAL_GPIO_Init+0x23c>)
 8002b24:	42b0      	cmp	r0, r6
 8002b26:	f000 80ab 	beq.w	8002c80 <HAL_GPIO_Init+0x20c>
 8002b2a:	4e62      	ldr	r6, [pc, #392]	; (8002cb4 <HAL_GPIO_Init+0x240>)
 8002b2c:	42b0      	cmp	r0, r6
 8002b2e:	f000 80ac 	beq.w	8002c8a <HAL_GPIO_Init+0x216>
 8002b32:	4e61      	ldr	r6, [pc, #388]	; (8002cb8 <HAL_GPIO_Init+0x244>)
 8002b34:	42b0      	cmp	r0, r6
 8002b36:	f000 809e 	beq.w	8002c76 <HAL_GPIO_Init+0x202>
 8002b3a:	4e60      	ldr	r6, [pc, #384]	; (8002cbc <HAL_GPIO_Init+0x248>)
 8002b3c:	42b0      	cmp	r0, r6
 8002b3e:	f000 80a9 	beq.w	8002c94 <HAL_GPIO_Init+0x220>
 8002b42:	4e5f      	ldr	r6, [pc, #380]	; (8002cc0 <HAL_GPIO_Init+0x24c>)
 8002b44:	42b0      	cmp	r0, r6
 8002b46:	bf0c      	ite	eq
 8002b48:	2609      	moveq	r6, #9
 8002b4a:	260a      	movne	r6, #10
 8002b4c:	fa06 f609 	lsl.w	r6, r6, r9
 8002b50:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b52:	f8c8 2008 	str.w	r2, [r8, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002b56:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b5a:	f415 1f80 	tst.w	r5, #1048576	; 0x100000
        temp &= ~(iocurrent);
 8002b5e:	ea6f 060e 	mvn.w	r6, lr
        temp = EXTI->RTSR1;
 8002b62:	6812      	ldr	r2, [r2, #0]
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 8002b64:	f04f 48b0 	mov.w	r8, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 8002b68:	bf0c      	ite	eq
 8002b6a:	4032      	andeq	r2, r6
          temp |= iocurrent;
 8002b6c:	ea4e 0202 	orrne.w	r2, lr, r2

        temp = EXTI->FTSR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b70:	f415 1f00 	tst.w	r5, #2097152	; 0x200000
        EXTI->RTSR1 = temp;
 8002b74:	f8c8 2000 	str.w	r2, [r8]
        temp = EXTI->FTSR1;
 8002b78:	f8d8 2004 	ldr.w	r2, [r8, #4]
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 8002b7c:	f04f 48b0 	mov.w	r8, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 8002b80:	bf0c      	ite	eq
 8002b82:	4032      	andeq	r2, r6
          temp |= iocurrent;
 8002b84:	ea4e 0202 	orrne.w	r2, lr, r2

        temp = EXTI_CurrentCPU->EMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b88:	f415 3f00 	tst.w	r5, #131072	; 0x20000
        EXTI->FTSR1 = temp;
 8002b8c:	f8c8 2004 	str.w	r2, [r8, #4]
        temp = EXTI_CurrentCPU->EMR1;
 8002b90:	f8d8 2084 	ldr.w	r2, [r8, #132]	; 0x84
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002b94:	f04f 48b0 	mov.w	r8, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 8002b98:	bf0c      	ite	eq
 8002b9a:	4032      	andeq	r2, r6
          temp |= iocurrent;
 8002b9c:	ea4e 0202 	orrne.w	r2, lr, r2

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ba0:	03ed      	lsls	r5, r5, #15
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002ba2:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
        EXTI_CurrentCPU->EMR1 = temp;
 8002ba6:	f8c8 2084 	str.w	r2, [r8, #132]	; 0x84
        temp = EXTI_CurrentCPU->IMR1;
 8002baa:	f8d8 2080 	ldr.w	r2, [r8, #128]	; 0x80
        temp &= ~(iocurrent);
 8002bae:	bf54      	ite	pl
 8002bb0:	4032      	andpl	r2, r6
          temp |= iocurrent;
 8002bb2:	ea4e 0202 	orrmi.w	r2, lr, r2
        EXTI_CurrentCPU->IMR1 = temp;
 8002bb6:	f8c5 2080 	str.w	r2, [r5, #128]	; 0x80
      }
    }

    position++;
 8002bba:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002bbc:	f10c 0c02 	add.w	ip, ip, #2
 8002bc0:	fa34 f203 	lsrs.w	r2, r4, r3
 8002bc4:	f47f af61 	bne.w	8002a8a <HAL_GPIO_Init+0x16>
  }
}
 8002bc8:	b003      	add	sp, #12
 8002bca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002bce:	f04f 0803 	mov.w	r8, #3
        temp = GPIOx->OSPEEDR;
 8002bd2:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002bd4:	fa08 f80c 	lsl.w	r8, r8, ip
 8002bd8:	ea26 0a08 	bic.w	sl, r6, r8
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002bdc:	68ce      	ldr	r6, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002bde:	ea6f 0808 	mvn.w	r8, r8
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002be2:	fa06 f60c 	lsl.w	r6, r6, ip
 8002be6:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OSPEEDR = temp;
 8002bea:	6086      	str	r6, [r0, #8]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002bec:	f3c5 1600 	ubfx	r6, r5, #4, #1
        temp = GPIOx->OTYPER;
 8002bf0:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002bf4:	409e      	lsls	r6, r3
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002bf6:	ea2a 0202 	bic.w	r2, sl, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002bfa:	4332      	orrs	r2, r6
        GPIOx->OTYPER = temp;
 8002bfc:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 8002bfe:	68c2      	ldr	r2, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c00:	f1b9 0f02 	cmp.w	r9, #2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c04:	688e      	ldr	r6, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002c06:	ea02 0208 	and.w	r2, r2, r8
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c0a:	fa06 f60c 	lsl.w	r6, r6, ip
 8002c0e:	ea46 0602 	orr.w	r6, r6, r2
      GPIOx->PUPDR = temp;
 8002c12:	fa09 f20c 	lsl.w	r2, r9, ip
 8002c16:	60c6      	str	r6, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c18:	f47f af4d 	bne.w	8002ab6 <HAL_GPIO_Init+0x42>
        temp = GPIOx->AFR[position >> 3U];
 8002c1c:	ea4f 09d3 	mov.w	r9, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002c20:	f003 0b07 	and.w	fp, r3, #7
 8002c24:	260f      	movs	r6, #15
 8002c26:	eb00 0989 	add.w	r9, r0, r9, lsl #2
 8002c2a:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3U];
 8002c2e:	f8d9 a020 	ldr.w	sl, [r9, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002c32:	fa06 f60b 	lsl.w	r6, r6, fp
 8002c36:	ea2a 0a06 	bic.w	sl, sl, r6
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002c3a:	690e      	ldr	r6, [r1, #16]
 8002c3c:	fa06 f60b 	lsl.w	r6, r6, fp
 8002c40:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->AFR[position >> 3U] = temp;
 8002c44:	f8c9 6020 	str.w	r6, [r9, #32]
 8002c48:	e735      	b.n	8002ab6 <HAL_GPIO_Init+0x42>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002c4a:	f04f 0803 	mov.w	r8, #3
 8002c4e:	fa08 f80c 	lsl.w	r8, r8, ip
 8002c52:	ea6f 0808 	mvn.w	r8, r8
 8002c56:	e7d2      	b.n	8002bfe <HAL_GPIO_Init+0x18a>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002c58:	2603      	movs	r6, #3
 8002c5a:	fa06 f609 	lsl.w	r6, r6, r9
 8002c5e:	4332      	orrs	r2, r6
 8002c60:	e777      	b.n	8002b52 <HAL_GPIO_Init+0xde>
 8002c62:	2601      	movs	r6, #1
 8002c64:	fa06 f609 	lsl.w	r6, r6, r9
 8002c68:	4332      	orrs	r2, r6
 8002c6a:	e772      	b.n	8002b52 <HAL_GPIO_Init+0xde>
 8002c6c:	2602      	movs	r6, #2
 8002c6e:	fa06 f609 	lsl.w	r6, r6, r9
 8002c72:	4332      	orrs	r2, r6
 8002c74:	e76d      	b.n	8002b52 <HAL_GPIO_Init+0xde>
 8002c76:	2606      	movs	r6, #6
 8002c78:	fa06 f609 	lsl.w	r6, r6, r9
 8002c7c:	4332      	orrs	r2, r6
 8002c7e:	e768      	b.n	8002b52 <HAL_GPIO_Init+0xde>
 8002c80:	2604      	movs	r6, #4
 8002c82:	fa06 f609 	lsl.w	r6, r6, r9
 8002c86:	4332      	orrs	r2, r6
 8002c88:	e763      	b.n	8002b52 <HAL_GPIO_Init+0xde>
 8002c8a:	2605      	movs	r6, #5
 8002c8c:	fa06 f609 	lsl.w	r6, r6, r9
 8002c90:	4332      	orrs	r2, r6
 8002c92:	e75e      	b.n	8002b52 <HAL_GPIO_Init+0xde>
 8002c94:	2607      	movs	r6, #7
 8002c96:	fa06 f609 	lsl.w	r6, r6, r9
 8002c9a:	4332      	orrs	r2, r6
 8002c9c:	e759      	b.n	8002b52 <HAL_GPIO_Init+0xde>
 8002c9e:	bf00      	nop
 8002ca0:	58024400 	.word	0x58024400
 8002ca4:	58020000 	.word	0x58020000
 8002ca8:	58020800 	.word	0x58020800
 8002cac:	58020c00 	.word	0x58020c00
 8002cb0:	58021000 	.word	0x58021000
 8002cb4:	58021400 	.word	0x58021400
 8002cb8:	58021800 	.word	0x58021800
 8002cbc:	58021c00 	.word	0x58021c00
 8002cc0:	58022400 	.word	0x58022400

08002cc4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002cc4:	b902      	cbnz	r2, 8002cc8 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002cc6:	0409      	lsls	r1, r1, #16
 8002cc8:	6181      	str	r1, [r0, #24]
  }
}
 8002cca:	4770      	bx	lr

08002ccc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002ccc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cce:	b08b      	sub	sp, #44	; 0x2c
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002cd0:	2800      	cmp	r0, #0
 8002cd2:	f000 8088 	beq.w	8002de6 <HAL_PCD_Init+0x11a>
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002cd6:	f890 34bd 	ldrb.w	r3, [r0, #1213]	; 0x4bd
 8002cda:	4605      	mov	r5, r0
  USBx = hpcd->Instance;
 8002cdc:	6804      	ldr	r4, [r0, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002cde:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d079      	beq.n	8002dda <HAL_PCD_Init+0x10e>
 8002ce6:	4620      	mov	r0, r4
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002ce8:	2303      	movs	r3, #3

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002cea:	462e      	mov	r6, r5
 8002cec:	1d2f      	adds	r7, r5, #4
  hpcd->State = HAL_PCD_STATE_BUSY;
 8002cee:	f885 34bd 	strb.w	r3, [r5, #1213]	; 0x4bd
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002cf2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002cf4:	466c      	mov	r4, sp
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002cf6:	f413 7380 	ands.w	r3, r3, #256	; 0x100
    hpcd->Init.dma_enable = 0U;
 8002cfa:	bf08      	it	eq
 8002cfc:	60eb      	streq	r3, [r5, #12]
  __HAL_PCD_DISABLE(hpcd);
 8002cfe:	f003 fba3 	bl	8006448 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002d02:	f856 eb10 	ldr.w	lr, [r6], #16
 8002d06:	46b4      	mov	ip, r6
 8002d08:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8002d0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002d0e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8002d12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002d14:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8002d18:	e884 0003 	stmia.w	r4, {r0, r1}
 8002d1c:	4670      	mov	r0, lr
 8002d1e:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8002d22:	f003 fa6d 	bl	8006200 <USB_CoreInit>
 8002d26:	4604      	mov	r4, r0
 8002d28:	b130      	cbz	r0, 8002d38 <HAL_PCD_Init+0x6c>

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
    return HAL_ERROR;
 8002d2a:	2401      	movs	r4, #1
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d2c:	2302      	movs	r3, #2
  }

  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 8002d2e:	4620      	mov	r0, r4
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d30:	f885 34bd 	strb.w	r3, [r5, #1213]	; 0x4bd
}
 8002d34:	b00b      	add	sp, #44	; 0x2c
 8002d36:	bdf0      	pop	{r4, r5, r6, r7, pc}
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002d38:	4601      	mov	r1, r0
 8002d3a:	6828      	ldr	r0, [r5, #0]
 8002d3c:	f003 fb8c 	bl	8006458 <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d40:	6868      	ldr	r0, [r5, #4]
 8002d42:	b358      	cbz	r0, 8002d9c <HAL_PCD_Init+0xd0>
 8002d44:	4622      	mov	r2, r4
    hpcd->IN_ep[i].is_in = 1U;
 8002d46:	f04f 0e01 	mov.w	lr, #1
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002d4a:	4621      	mov	r1, r4
    hpcd->IN_ep[i].is_in = 1U;
 8002d4c:	eb02 03c2 	add.w	r3, r2, r2, lsl #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d50:	f102 0c01 	add.w	ip, r2, #1
    hpcd->IN_ep[i].is_in = 1U;
 8002d54:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    hpcd->IN_ep[i].num = i;
 8002d58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002d5c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d60:	fa5f f28c 	uxtb.w	r2, ip
    hpcd->IN_ep[i].is_in = 1U;
 8002d64:	f883 e03d 	strb.w	lr, [r3, #61]	; 0x3d
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d68:	4282      	cmp	r2, r0
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002d6a:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    hpcd->IN_ep[i].xfer_len = 0U;
 8002d6e:	64d9      	str	r1, [r3, #76]	; 0x4c
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002d70:	e9c3 1111 	strd	r1, r1, [r3, #68]	; 0x44
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d74:	d3ea      	bcc.n	8002d4c <HAL_PCD_Init+0x80>
    hpcd->OUT_ep[i].is_in = 0U;
 8002d76:	2200      	movs	r2, #0
 8002d78:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d7c:	1c61      	adds	r1, r4, #1
    hpcd->OUT_ep[i].is_in = 0U;
 8002d7e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    hpcd->OUT_ep[i].num = i;
 8002d82:	f883 427c 	strb.w	r4, [r3, #636]	; 0x27c
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d86:	b2cc      	uxtb	r4, r1
    hpcd->OUT_ep[i].is_in = 0U;
 8002d88:	f883 227d 	strb.w	r2, [r3, #637]	; 0x27d
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d8c:	4284      	cmp	r4, r0
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002d8e:	f883 2280 	strb.w	r2, [r3, #640]	; 0x280
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002d92:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002d96:	e9c3 22a1 	strd	r2, r2, [r3, #644]	; 0x284
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d9a:	d3ed      	bcc.n	8002d78 <HAL_PCD_Init+0xac>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002d9c:	466c      	mov	r4, sp
 8002d9e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002da0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002da2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002da4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002da6:	e896 0003 	ldmia.w	r6, {r0, r1}
 8002daa:	e884 0003 	stmia.w	r4, {r0, r1}
 8002dae:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8002db2:	6828      	ldr	r0, [r5, #0]
 8002db4:	f003 fb86 	bl	80064c4 <USB_DevInit>
 8002db8:	4604      	mov	r4, r0
 8002dba:	2800      	cmp	r0, #0
 8002dbc:	d1b5      	bne.n	8002d2a <HAL_PCD_Init+0x5e>
  hpcd->State = HAL_PCD_STATE_READY;
 8002dbe:	2201      	movs	r2, #1
  if (hpcd->Init.lpm_enable == 1U)
 8002dc0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  hpcd->USB_Address = 0U;
 8002dc2:	f885 0038 	strb.w	r0, [r5, #56]	; 0x38
  if (hpcd->Init.lpm_enable == 1U)
 8002dc6:	4293      	cmp	r3, r2
  hpcd->State = HAL_PCD_STATE_READY;
 8002dc8:	f885 24bd 	strb.w	r2, [r5, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
 8002dcc:	d00f      	beq.n	8002dee <HAL_PCD_Init+0x122>
  (void)USB_DevDisconnect(hpcd->Instance);
 8002dce:	6828      	ldr	r0, [r5, #0]
 8002dd0:	f003 ffba 	bl	8006d48 <USB_DevDisconnect>
}
 8002dd4:	4620      	mov	r0, r4
 8002dd6:	b00b      	add	sp, #44	; 0x2c
 8002dd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hpcd->Lock = HAL_UNLOCKED;
 8002dda:	f880 24bc 	strb.w	r2, [r0, #1212]	; 0x4bc
    HAL_PCD_MspInit(hpcd);
 8002dde:	f005 f90f 	bl	8008000 <HAL_PCD_MspInit>
  __HAL_PCD_DISABLE(hpcd);
 8002de2:	6828      	ldr	r0, [r5, #0]
 8002de4:	e780      	b.n	8002ce8 <HAL_PCD_Init+0x1c>
    return HAL_ERROR;
 8002de6:	2401      	movs	r4, #1
}
 8002de8:	4620      	mov	r0, r4
 8002dea:	b00b      	add	sp, #44	; 0x2c
 8002dec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002dee:	4628      	mov	r0, r5
 8002df0:	f000 ff4e 	bl	8003c90 <HAL_PCDEx_ActivateLPM>
 8002df4:	e7eb      	b.n	8002dce <HAL_PCD_Init+0x102>
 8002df6:	bf00      	nop

08002df8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002df8:	b510      	push	{r4, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;

  __HAL_LOCK(hpcd);
 8002dfa:	f890 34bc 	ldrb.w	r3, [r0, #1212]	; 0x4bc
{
 8002dfe:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e00:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d017      	beq.n	8002e36 <HAL_PCD_Start+0x3e>
 8002e06:	2301      	movs	r3, #1
 8002e08:	f884 34bc 	strb.w	r3, [r4, #1212]	; 0x4bc

  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 8002e0c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8002e0e:	05db      	lsls	r3, r3, #23
 8002e10:	d402      	bmi.n	8002e18 <HAL_PCD_Start+0x20>
 8002e12:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d009      	beq.n	8002e2c <HAL_PCD_Start+0x34>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }

  __HAL_PCD_ENABLE(hpcd);
 8002e18:	f003 fb0e 	bl	8006438 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002e1c:	6820      	ldr	r0, [r4, #0]
 8002e1e:	f003 ff83 	bl	8006d28 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002e22:	2300      	movs	r3, #0

  return HAL_OK;
 8002e24:	4618      	mov	r0, r3
  __HAL_UNLOCK(hpcd);
 8002e26:	f884 34bc 	strb.w	r3, [r4, #1212]	; 0x4bc
}
 8002e2a:	bd10      	pop	{r4, pc}
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002e2c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002e2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e32:	6383      	str	r3, [r0, #56]	; 0x38
 8002e34:	e7f0      	b.n	8002e18 <HAL_PCD_Start+0x20>
  __HAL_LOCK(hpcd);
 8002e36:	2002      	movs	r0, #2
}
 8002e38:	bd10      	pop	{r4, pc}
 8002e3a:	bf00      	nop

08002e3c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002e3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e40:	6805      	ldr	r5, [r0, #0]
{
 8002e42:	b089      	sub	sp, #36	; 0x24
 8002e44:	4604      	mov	r4, r0
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002e46:	4628      	mov	r0, r5
 8002e48:	f003 ffbc 	bl	8006dc4 <USB_GetMode>
 8002e4c:	b110      	cbz	r0, 8002e54 <HAL_PCD_IRQHandler+0x18>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
    }
  }
}
 8002e4e:	b009      	add	sp, #36	; 0x24
 8002e50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002e54:	4683      	mov	fp, r0
 8002e56:	6820      	ldr	r0, [r4, #0]
 8002e58:	f003 ff86 	bl	8006d68 <USB_ReadInterrupts>
 8002e5c:	2800      	cmp	r0, #0
 8002e5e:	d0f6      	beq.n	8002e4e <HAL_PCD_IRQHandler+0x12>
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002e60:	f8d5 3808 	ldr.w	r3, [r5, #2056]	; 0x808
 8002e64:	f505 6200 	add.w	r2, r5, #2048	; 0x800
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002e68:	6820      	ldr	r0, [r4, #0]
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002e6a:	f3c3 230d 	ubfx	r3, r3, #8, #14
 8002e6e:	9202      	str	r2, [sp, #8]
 8002e70:	f8c4 34fc 	str.w	r3, [r4, #1276]	; 0x4fc
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002e74:	f003 ff78 	bl	8006d68 <USB_ReadInterrupts>
 8002e78:	f010 0f02 	tst.w	r0, #2
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002e7c:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002e7e:	d003      	beq.n	8002e88 <HAL_PCD_IRQHandler+0x4c>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002e80:	6943      	ldr	r3, [r0, #20]
 8002e82:	f003 0302 	and.w	r3, r3, #2
 8002e86:	6143      	str	r3, [r0, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002e88:	f003 ff6e 	bl	8006d68 <USB_ReadInterrupts>
 8002e8c:	f010 0f10 	tst.w	r0, #16
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002e90:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002e92:	d012      	beq.n	8002eba <HAL_PCD_IRQHandler+0x7e>
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002e94:	6983      	ldr	r3, [r0, #24]
 8002e96:	f023 0310 	bic.w	r3, r3, #16
 8002e9a:	6183      	str	r3, [r0, #24]
      RegVal = USBx->GRXSTSP;
 8002e9c:	6a2e      	ldr	r6, [r5, #32]
      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002e9e:	f3c6 4343 	ubfx	r3, r6, #17, #4
      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002ea2:	f006 070f 	and.w	r7, r6, #15
      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002ea6:	2b02      	cmp	r3, #2
 8002ea8:	f000 83e5 	beq.w	8003676 <HAL_PCD_IRQHandler+0x83a>
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002eac:	2b06      	cmp	r3, #6
 8002eae:	f000 8323 	beq.w	80034f8 <HAL_PCD_IRQHandler+0x6bc>
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002eb2:	6983      	ldr	r3, [r0, #24]
 8002eb4:	f043 0310 	orr.w	r3, r3, #16
 8002eb8:	6183      	str	r3, [r0, #24]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002eba:	f003 ff55 	bl	8006d68 <USB_ReadInterrupts>
 8002ebe:	0307      	lsls	r7, r0, #12
 8002ec0:	f100 8281 	bmi.w	80033c6 <HAL_PCD_IRQHandler+0x58a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002ec4:	6820      	ldr	r0, [r4, #0]
 8002ec6:	f003 ff4f 	bl	8006d68 <USB_ReadInterrupts>
 8002eca:	0346      	lsls	r6, r0, #13
 8002ecc:	f100 8228 	bmi.w	8003320 <HAL_PCD_IRQHandler+0x4e4>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002ed0:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002ed2:	f003 ff49 	bl	8006d68 <USB_ReadInterrupts>
 8002ed6:	2800      	cmp	r0, #0
 8002ed8:	f2c0 819a 	blt.w	8003210 <HAL_PCD_IRQHandler+0x3d4>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002edc:	6820      	ldr	r0, [r4, #0]
 8002ede:	f003 ff43 	bl	8006d68 <USB_ReadInterrupts>
 8002ee2:	0503      	lsls	r3, r0, #20
 8002ee4:	f100 8157 	bmi.w	8003196 <HAL_PCD_IRQHandler+0x35a>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002ee8:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8002eea:	f003 ff3d 	bl	8006d68 <USB_ReadInterrupts>
 8002eee:	0106      	lsls	r6, r0, #4
 8002ef0:	d514      	bpl.n	8002f1c <HAL_PCD_IRQHandler+0xe0>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8002ef2:	6822      	ldr	r2, [r4, #0]
 8002ef4:	6953      	ldr	r3, [r2, #20]
 8002ef6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002efa:	6153      	str	r3, [r2, #20]
      if (hpcd->LPM_State == LPM_L0)
 8002efc:	f894 34f4 	ldrb.w	r3, [r4, #1268]	; 0x4f4
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	f040 82ac 	bne.w	800345e <HAL_PCD_IRQHandler+0x622>
        hpcd->LPM_State = LPM_L1;
 8002f06:	2101      	movs	r1, #1
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002f08:	4620      	mov	r0, r4
        hpcd->LPM_State = LPM_L1;
 8002f0a:	f884 14f4 	strb.w	r1, [r4, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002f0e:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8002f10:	f3c3 0383 	ubfx	r3, r3, #2, #4
 8002f14:	f8c4 34f8 	str.w	r3, [r4, #1272]	; 0x4f8
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002f18:	f000 fed2 	bl	8003cc0 <HAL_PCDEx_LPM_Callback>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002f1c:	6820      	ldr	r0, [r4, #0]
 8002f1e:	f003 ff23 	bl	8006d68 <USB_ReadInterrupts>
 8002f22:	04c0      	lsls	r0, r0, #19
 8002f24:	f100 819e 	bmi.w	8003264 <HAL_PCD_IRQHandler+0x428>
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002f28:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002f2a:	f003 ff1d 	bl	8006d68 <USB_ReadInterrupts>
 8002f2e:	f410 5f00 	tst.w	r0, #8192	; 0x2000
      (void)USB_ActivateSetup(hpcd->Instance);
 8002f32:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002f34:	f040 817f 	bne.w	8003236 <HAL_PCD_IRQHandler+0x3fa>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002f38:	f003 ff16 	bl	8006d68 <USB_ReadInterrupts>
 8002f3c:	0701      	lsls	r1, r0, #28
 8002f3e:	f100 81e6 	bmi.w	800330e <HAL_PCD_IRQHandler+0x4d2>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002f42:	6820      	ldr	r0, [r4, #0]
 8002f44:	f003 ff10 	bl	8006d68 <USB_ReadInterrupts>
 8002f48:	0602      	lsls	r2, r0, #24
 8002f4a:	d571      	bpl.n	8003030 <HAL_PCD_IRQHandler+0x1f4>
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002f4c:	69aa      	ldr	r2, [r5, #24]
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f4e:	6863      	ldr	r3, [r4, #4]
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002f50:	f022 0280 	bic.w	r2, r2, #128	; 0x80
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f54:	2b01      	cmp	r3, #1
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002f56:	61aa      	str	r2, [r5, #24]
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f58:	d96a      	bls.n	8003030 <HAL_PCD_IRQHandler+0x1f4>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002f5a:	f894 22a3 	ldrb.w	r2, [r4, #675]	; 0x2a3
 8002f5e:	2a01      	cmp	r2, #1
 8002f60:	f000 83ea 	beq.w	8003738 <HAL_PCD_IRQHandler+0x8fc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f64:	2b02      	cmp	r3, #2
 8002f66:	d963      	bls.n	8003030 <HAL_PCD_IRQHandler+0x1f4>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002f68:	f894 22c7 	ldrb.w	r2, [r4, #711]	; 0x2c7
 8002f6c:	2a01      	cmp	r2, #1
 8002f6e:	f000 83fe 	beq.w	800376e <HAL_PCD_IRQHandler+0x932>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f72:	2b03      	cmp	r3, #3
 8002f74:	d95c      	bls.n	8003030 <HAL_PCD_IRQHandler+0x1f4>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002f76:	f894 22eb 	ldrb.w	r2, [r4, #747]	; 0x2eb
 8002f7a:	2a01      	cmp	r2, #1
 8002f7c:	f000 82b5 	beq.w	80034ea <HAL_PCD_IRQHandler+0x6ae>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f80:	2b04      	cmp	r3, #4
 8002f82:	d955      	bls.n	8003030 <HAL_PCD_IRQHandler+0x1f4>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002f84:	f894 230f 	ldrb.w	r2, [r4, #783]	; 0x30f
 8002f88:	2a01      	cmp	r2, #1
 8002f8a:	f000 82c8 	beq.w	800351e <HAL_PCD_IRQHandler+0x6e2>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f8e:	2b05      	cmp	r3, #5
 8002f90:	d94e      	bls.n	8003030 <HAL_PCD_IRQHandler+0x1f4>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002f92:	f894 2333 	ldrb.w	r2, [r4, #819]	; 0x333
 8002f96:	2a01      	cmp	r2, #1
 8002f98:	f000 8426 	beq.w	80037e8 <HAL_PCD_IRQHandler+0x9ac>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f9c:	2b06      	cmp	r3, #6
 8002f9e:	d947      	bls.n	8003030 <HAL_PCD_IRQHandler+0x1f4>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002fa0:	f894 2357 	ldrb.w	r2, [r4, #855]	; 0x357
 8002fa4:	2a01      	cmp	r2, #1
 8002fa6:	f000 8433 	beq.w	8003810 <HAL_PCD_IRQHandler+0x9d4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002faa:	2b07      	cmp	r3, #7
 8002fac:	d940      	bls.n	8003030 <HAL_PCD_IRQHandler+0x1f4>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002fae:	f894 237b 	ldrb.w	r2, [r4, #891]	; 0x37b
 8002fb2:	2a01      	cmp	r2, #1
 8002fb4:	f000 844a 	beq.w	800384c <HAL_PCD_IRQHandler+0xa10>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002fb8:	2b08      	cmp	r3, #8
 8002fba:	d939      	bls.n	8003030 <HAL_PCD_IRQHandler+0x1f4>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002fbc:	f894 239f 	ldrb.w	r2, [r4, #927]	; 0x39f
 8002fc0:	2a01      	cmp	r2, #1
 8002fc2:	f000 8457 	beq.w	8003874 <HAL_PCD_IRQHandler+0xa38>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002fc6:	2b09      	cmp	r3, #9
 8002fc8:	d932      	bls.n	8003030 <HAL_PCD_IRQHandler+0x1f4>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002fca:	f894 23c3 	ldrb.w	r2, [r4, #963]	; 0x3c3
 8002fce:	2a01      	cmp	r2, #1
 8002fd0:	f000 8464 	beq.w	800389c <HAL_PCD_IRQHandler+0xa60>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002fd4:	2b0a      	cmp	r3, #10
 8002fd6:	d92b      	bls.n	8003030 <HAL_PCD_IRQHandler+0x1f4>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002fd8:	f894 23e7 	ldrb.w	r2, [r4, #999]	; 0x3e7
 8002fdc:	2a01      	cmp	r2, #1
 8002fde:	f000 8471 	beq.w	80038c4 <HAL_PCD_IRQHandler+0xa88>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002fe2:	2b0b      	cmp	r3, #11
 8002fe4:	d924      	bls.n	8003030 <HAL_PCD_IRQHandler+0x1f4>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002fe6:	f894 240b 	ldrb.w	r2, [r4, #1035]	; 0x40b
 8002fea:	2a01      	cmp	r2, #1
 8002fec:	f000 847e 	beq.w	80038ec <HAL_PCD_IRQHandler+0xab0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ff0:	2b0c      	cmp	r3, #12
 8002ff2:	d91d      	bls.n	8003030 <HAL_PCD_IRQHandler+0x1f4>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002ff4:	f894 242f 	ldrb.w	r2, [r4, #1071]	; 0x42f
 8002ff8:	2a01      	cmp	r2, #1
 8002ffa:	f000 847f 	beq.w	80038fc <HAL_PCD_IRQHandler+0xac0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ffe:	2b0d      	cmp	r3, #13
 8003000:	d916      	bls.n	8003030 <HAL_PCD_IRQHandler+0x1f4>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003002:	f894 2453 	ldrb.w	r2, [r4, #1107]	; 0x453
 8003006:	2a01      	cmp	r2, #1
 8003008:	f000 849f 	beq.w	800394a <HAL_PCD_IRQHandler+0xb0e>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800300c:	2b0e      	cmp	r3, #14
 800300e:	d90f      	bls.n	8003030 <HAL_PCD_IRQHandler+0x1f4>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003010:	f894 2477 	ldrb.w	r2, [r4, #1143]	; 0x477
 8003014:	2a01      	cmp	r2, #1
 8003016:	f000 84a6 	beq.w	8003966 <HAL_PCD_IRQHandler+0xb2a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800301a:	2b0f      	cmp	r3, #15
 800301c:	d908      	bls.n	8003030 <HAL_PCD_IRQHandler+0x1f4>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800301e:	f894 349b 	ldrb.w	r3, [r4, #1179]	; 0x49b
 8003022:	2b01      	cmp	r3, #1
 8003024:	d104      	bne.n	8003030 <HAL_PCD_IRQHandler+0x1f4>
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003026:	f504 6193 	add.w	r1, r4, #1176	; 0x498
 800302a:	6820      	ldr	r0, [r4, #0]
 800302c:	f003 fd8c 	bl	8006b48 <USB_EPStopXfer>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003030:	6820      	ldr	r0, [r4, #0]
 8003032:	f003 fe99 	bl	8006d68 <USB_ReadInterrupts>
 8003036:	02c3      	lsls	r3, r0, #11
 8003038:	f140 80ab 	bpl.w	8003192 <HAL_PCD_IRQHandler+0x356>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800303c:	6863      	ldr	r3, [r4, #4]
 800303e:	2b01      	cmp	r3, #1
 8003040:	f240 8089 	bls.w	8003156 <HAL_PCD_IRQHandler+0x31a>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003044:	f894 2064 	ldrb.w	r2, [r4, #100]	; 0x64
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003048:	f8d5 1920 	ldr.w	r1, [r5, #2336]	; 0x920
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800304c:	2a01      	cmp	r2, #1
 800304e:	f000 8215 	beq.w	800347c <HAL_PCD_IRQHandler+0x640>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003052:	2b02      	cmp	r3, #2
 8003054:	d97f      	bls.n	8003156 <HAL_PCD_IRQHandler+0x31a>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003056:	f894 2088 	ldrb.w	r2, [r4, #136]	; 0x88
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800305a:	f8d5 1940 	ldr.w	r1, [r5, #2368]	; 0x940
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800305e:	2a01      	cmp	r2, #1
 8003060:	f000 821f 	beq.w	80034a2 <HAL_PCD_IRQHandler+0x666>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003064:	2b03      	cmp	r3, #3
 8003066:	d976      	bls.n	8003156 <HAL_PCD_IRQHandler+0x31a>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003068:	f894 20ac 	ldrb.w	r2, [r4, #172]	; 0xac
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800306c:	f8d5 1960 	ldr.w	r1, [r5, #2400]	; 0x960
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003070:	2a01      	cmp	r2, #1
 8003072:	f000 8222 	beq.w	80034ba <HAL_PCD_IRQHandler+0x67e>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003076:	2b04      	cmp	r3, #4
 8003078:	d96d      	bls.n	8003156 <HAL_PCD_IRQHandler+0x31a>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800307a:	f894 20d0 	ldrb.w	r2, [r4, #208]	; 0xd0
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800307e:	f8d5 1980 	ldr.w	r1, [r5, #2432]	; 0x980
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003082:	2a01      	cmp	r2, #1
 8003084:	f000 8225 	beq.w	80034d2 <HAL_PCD_IRQHandler+0x696>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003088:	2b05      	cmp	r3, #5
 800308a:	d964      	bls.n	8003156 <HAL_PCD_IRQHandler+0x31a>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800308c:	f894 20f4 	ldrb.w	r2, [r4, #244]	; 0xf4
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003090:	f8d5 19a0 	ldr.w	r1, [r5, #2464]	; 0x9a0
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003094:	2a01      	cmp	r2, #1
 8003096:	f000 8343 	beq.w	8003720 <HAL_PCD_IRQHandler+0x8e4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800309a:	2b06      	cmp	r3, #6
 800309c:	d95b      	bls.n	8003156 <HAL_PCD_IRQHandler+0x31a>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800309e:	f894 2118 	ldrb.w	r2, [r4, #280]	; 0x118
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80030a2:	f8d5 19c0 	ldr.w	r1, [r5, #2496]	; 0x9c0
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80030a6:	2a01      	cmp	r2, #1
 80030a8:	f000 8355 	beq.w	8003756 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80030ac:	2b07      	cmp	r3, #7
 80030ae:	d952      	bls.n	8003156 <HAL_PCD_IRQHandler+0x31a>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80030b0:	f894 213c 	ldrb.w	r2, [r4, #316]	; 0x13c
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80030b4:	f8d5 19e0 	ldr.w	r1, [r5, #2528]	; 0x9e0
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80030b8:	2a01      	cmp	r2, #1
 80030ba:	f000 8360 	beq.w	800377e <HAL_PCD_IRQHandler+0x942>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80030be:	2b08      	cmp	r3, #8
 80030c0:	d949      	bls.n	8003156 <HAL_PCD_IRQHandler+0x31a>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80030c2:	f894 2160 	ldrb.w	r2, [r4, #352]	; 0x160
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80030c6:	f8d5 1a00 	ldr.w	r1, [r5, #2560]	; 0xa00
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80030ca:	2a01      	cmp	r2, #1
 80030cc:	f000 8363 	beq.w	8003796 <HAL_PCD_IRQHandler+0x95a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80030d0:	2b09      	cmp	r3, #9
 80030d2:	d940      	bls.n	8003156 <HAL_PCD_IRQHandler+0x31a>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80030d4:	f894 2184 	ldrb.w	r2, [r4, #388]	; 0x184
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80030d8:	f8d5 1a20 	ldr.w	r1, [r5, #2592]	; 0xa20
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80030dc:	2a01      	cmp	r2, #1
 80030de:	f000 8377 	beq.w	80037d0 <HAL_PCD_IRQHandler+0x994>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80030e2:	2b0a      	cmp	r3, #10
 80030e4:	d937      	bls.n	8003156 <HAL_PCD_IRQHandler+0x31a>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80030e6:	f894 21a8 	ldrb.w	r2, [r4, #424]	; 0x1a8
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80030ea:	f8d5 1a40 	ldr.w	r1, [r5, #2624]	; 0xa40
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80030ee:	2a01      	cmp	r2, #1
 80030f0:	f000 8382 	beq.w	80037f8 <HAL_PCD_IRQHandler+0x9bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80030f4:	2b0b      	cmp	r3, #11
 80030f6:	d92e      	bls.n	8003156 <HAL_PCD_IRQHandler+0x31a>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80030f8:	f894 21cc 	ldrb.w	r2, [r4, #460]	; 0x1cc
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80030fc:	f8d5 1a60 	ldr.w	r1, [r5, #2656]	; 0xa60
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003100:	2a01      	cmp	r2, #1
 8003102:	f000 8397 	beq.w	8003834 <HAL_PCD_IRQHandler+0x9f8>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003106:	2b0c      	cmp	r3, #12
 8003108:	d925      	bls.n	8003156 <HAL_PCD_IRQHandler+0x31a>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800310a:	f894 21f0 	ldrb.w	r2, [r4, #496]	; 0x1f0
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800310e:	f8d5 1a80 	ldr.w	r1, [r5, #2688]	; 0xa80
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003112:	2a01      	cmp	r2, #1
 8003114:	f000 83a2 	beq.w	800385c <HAL_PCD_IRQHandler+0xa20>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003118:	2b0d      	cmp	r3, #13
 800311a:	d91c      	bls.n	8003156 <HAL_PCD_IRQHandler+0x31a>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800311c:	f894 2214 	ldrb.w	r2, [r4, #532]	; 0x214
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003120:	f8d5 1aa0 	ldr.w	r1, [r5, #2720]	; 0xaa0
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003124:	2a01      	cmp	r2, #1
 8003126:	f000 83ad 	beq.w	8003884 <HAL_PCD_IRQHandler+0xa48>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800312a:	2b0e      	cmp	r3, #14
 800312c:	d913      	bls.n	8003156 <HAL_PCD_IRQHandler+0x31a>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800312e:	f894 2238 	ldrb.w	r2, [r4, #568]	; 0x238
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003132:	f8d5 1ac0 	ldr.w	r1, [r5, #2752]	; 0xac0
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003136:	2a01      	cmp	r2, #1
 8003138:	f000 83b8 	beq.w	80038ac <HAL_PCD_IRQHandler+0xa70>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800313c:	2b0f      	cmp	r3, #15
 800313e:	d90a      	bls.n	8003156 <HAL_PCD_IRQHandler+0x31a>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003140:	f894 225c 	ldrb.w	r2, [r4, #604]	; 0x25c
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003144:	f8d5 1ae0 	ldr.w	r1, [r5, #2784]	; 0xae0
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003148:	2a01      	cmp	r2, #1
 800314a:	f000 83c3 	beq.w	80038d4 <HAL_PCD_IRQHandler+0xa98>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800314e:	2b10      	cmp	r3, #16
 8003150:	d901      	bls.n	8003156 <HAL_PCD_IRQHandler+0x31a>
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003152:	f8d5 3b00 	ldr.w	r3, [r5, #2816]	; 0xb00
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003156:	6820      	ldr	r0, [r4, #0]
 8003158:	6943      	ldr	r3, [r0, #20]
 800315a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800315e:	6143      	str	r3, [r0, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003160:	f003 fe02 	bl	8006d68 <USB_ReadInterrupts>
 8003164:	0287      	lsls	r7, r0, #10
 8003166:	d421      	bmi.n	80031ac <HAL_PCD_IRQHandler+0x370>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003168:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800316a:	f003 fdfd 	bl	8006d68 <USB_ReadInterrupts>
 800316e:	0040      	lsls	r0, r0, #1
 8003170:	f100 80c4 	bmi.w	80032fc <HAL_PCD_IRQHandler+0x4c0>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003174:	6820      	ldr	r0, [r4, #0]
 8003176:	f003 fdf7 	bl	8006d68 <USB_ReadInterrupts>
 800317a:	0741      	lsls	r1, r0, #29
 800317c:	f57f ae67 	bpl.w	8002e4e <HAL_PCD_IRQHandler+0x12>
      RegVal = hpcd->Instance->GOTGINT;
 8003180:	6823      	ldr	r3, [r4, #0]
 8003182:	685d      	ldr	r5, [r3, #4]
      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003184:	076a      	lsls	r2, r5, #29
 8003186:	f100 8297 	bmi.w	80036b8 <HAL_PCD_IRQHandler+0x87c>
      hpcd->Instance->GOTGINT |= RegVal;
 800318a:	685a      	ldr	r2, [r3, #4]
 800318c:	432a      	orrs	r2, r5
 800318e:	605a      	str	r2, [r3, #4]
 8003190:	e65d      	b.n	8002e4e <HAL_PCD_IRQHandler+0x12>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003192:	6820      	ldr	r0, [r4, #0]
 8003194:	e7e4      	b.n	8003160 <HAL_PCD_IRQHandler+0x324>
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003196:	9b02      	ldr	r3, [sp, #8]
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	07df      	lsls	r7, r3, #31
 800319c:	f100 8288 	bmi.w	80036b0 <HAL_PCD_IRQHandler+0x874>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80031a0:	6820      	ldr	r0, [r4, #0]
 80031a2:	6943      	ldr	r3, [r0, #20]
 80031a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031a8:	6143      	str	r3, [r0, #20]
 80031aa:	e69e      	b.n	8002eea <HAL_PCD_IRQHandler+0xae>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80031ac:	f8d4 c004 	ldr.w	ip, [r4, #4]
 80031b0:	f1bc 0f01 	cmp.w	ip, #1
 80031b4:	d926      	bls.n	8003204 <HAL_PCD_IRQHandler+0x3c8>
 80031b6:	f505 6232 	add.w	r2, r5, #2848	; 0xb20
 80031ba:	4623      	mov	r3, r4
 80031bc:	2101      	movs	r1, #1
 80031be:	e004      	b.n	80031ca <HAL_PCD_IRQHandler+0x38e>
 80031c0:	3101      	adds	r1, #1
 80031c2:	3220      	adds	r2, #32
 80031c4:	3324      	adds	r3, #36	; 0x24
 80031c6:	4561      	cmp	r1, ip
 80031c8:	d01c      	beq.n	8003204 <HAL_PCD_IRQHandler+0x3c8>
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80031ca:	f893 02a4 	ldrb.w	r0, [r3, #676]	; 0x2a4
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80031ce:	6816      	ldr	r6, [r2, #0]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80031d0:	2801      	cmp	r0, #1
 80031d2:	d1f5      	bne.n	80031c0 <HAL_PCD_IRQHandler+0x384>
 80031d4:	2e00      	cmp	r6, #0
 80031d6:	daf3      	bge.n	80031c0 <HAL_PCD_IRQHandler+0x384>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80031d8:	f8d4 74fc 	ldr.w	r7, [r4, #1276]	; 0x4fc
 80031dc:	f406 3680 	and.w	r6, r6, #65536	; 0x10000
 80031e0:	f007 0701 	and.w	r7, r7, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80031e4:	42be      	cmp	r6, r7
 80031e6:	d1eb      	bne.n	80031c0 <HAL_PCD_IRQHandler+0x384>
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80031e8:	f883 02a3 	strb.w	r0, [r3, #675]	; 0x2a3
          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80031ec:	69a8      	ldr	r0, [r5, #24]
 80031ee:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 80031f2:	61a8      	str	r0, [r5, #24]
          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80031f4:	6968      	ldr	r0, [r5, #20]
 80031f6:	0606      	lsls	r6, r0, #24
 80031f8:	d4e2      	bmi.n	80031c0 <HAL_PCD_IRQHandler+0x384>
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80031fa:	9a02      	ldr	r2, [sp, #8]
 80031fc:	6853      	ldr	r3, [r2, #4]
 80031fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003202:	6053      	str	r3, [r2, #4]
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003204:	6820      	ldr	r0, [r4, #0]
 8003206:	6943      	ldr	r3, [r0, #20]
 8003208:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800320c:	6143      	str	r3, [r0, #20]
 800320e:	e7ac      	b.n	800316a <HAL_PCD_IRQHandler+0x32e>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003210:	9a02      	ldr	r2, [sp, #8]
 8003212:	6853      	ldr	r3, [r2, #4]
 8003214:	f023 0301 	bic.w	r3, r3, #1
 8003218:	6053      	str	r3, [r2, #4]
      if (hpcd->LPM_State == LPM_L1)
 800321a:	f894 34f4 	ldrb.w	r3, [r4, #1268]	; 0x4f4
 800321e:	2b01      	cmp	r3, #1
 8003220:	f000 8138 	beq.w	8003494 <HAL_PCD_IRQHandler+0x658>
        HAL_PCD_ResumeCallback(hpcd);
 8003224:	4620      	mov	r0, r4
 8003226:	f004 ff95 	bl	8008154 <HAL_PCD_ResumeCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800322a:	6820      	ldr	r0, [r4, #0]
 800322c:	6943      	ldr	r3, [r0, #20]
 800322e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003232:	6143      	str	r3, [r0, #20]
 8003234:	e653      	b.n	8002ede <HAL_PCD_IRQHandler+0xa2>
      (void)USB_ActivateSetup(hpcd->Instance);
 8003236:	f003 fdc9 	bl	8006dcc <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800323a:	6820      	ldr	r0, [r4, #0]
 800323c:	f003 fa8e 	bl	800675c <USB_GetDevSpeed>
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003240:	6826      	ldr	r6, [r4, #0]
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003242:	6120      	str	r0, [r4, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003244:	f001 fa66 	bl	8004714 <HAL_RCC_GetHCLKFreq>
 8003248:	7c22      	ldrb	r2, [r4, #16]
 800324a:	4601      	mov	r1, r0
 800324c:	4630      	mov	r0, r6
 800324e:	f003 f879 	bl	8006344 <USB_SetTurnaroundTime>
      HAL_PCD_ResetCallback(hpcd);
 8003252:	4620      	mov	r0, r4
 8003254:	f004 ff50 	bl	80080f8 <HAL_PCD_ResetCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003258:	6820      	ldr	r0, [r4, #0]
 800325a:	6943      	ldr	r3, [r0, #20]
 800325c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003260:	6143      	str	r3, [r0, #20]
 8003262:	e669      	b.n	8002f38 <HAL_PCD_IRQHandler+0xfc>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003264:	9a02      	ldr	r2, [sp, #8]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003266:	2110      	movs	r1, #16
 8003268:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800326a:	6853      	ldr	r3, [r2, #4]
 800326c:	f023 0301 	bic.w	r3, r3, #1
 8003270:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003272:	f003 fa49 	bl	8006708 <USB_FlushTxFifo>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003276:	6860      	ldr	r0, [r4, #4]
 8003278:	b1e0      	cbz	r0, 80032b4 <HAL_PCD_IRQHandler+0x478>
 800327a:	f505 6310 	add.w	r3, r5, #2304	; 0x900
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800327e:	f64f 317f 	movw	r1, #64383	; 0xfb7f
 8003282:	6099      	str	r1, [r3, #8]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003284:	f10b 0b01 	add.w	fp, fp, #1
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003288:	681a      	ldr	r2, [r3, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800328a:	3320      	adds	r3, #32
 800328c:	4583      	cmp	fp, r0
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800328e:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8003292:	f843 2c20 	str.w	r2, [r3, #-32]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003296:	f8c3 11e8 	str.w	r1, [r3, #488]	; 0x1e8
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800329a:	f8d3 21e0 	ldr.w	r2, [r3, #480]	; 0x1e0
 800329e:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 80032a2:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80032a6:	f8d3 21e0 	ldr.w	r2, [r3, #480]	; 0x1e0
 80032aa:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 80032ae:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032b2:	d1e6      	bne.n	8003282 <HAL_PCD_IRQHandler+0x446>
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80032b4:	9902      	ldr	r1, [sp, #8]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80032b6:	6b22      	ldr	r2, [r4, #48]	; 0x30
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80032b8:	69cb      	ldr	r3, [r1, #28]
 80032ba:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80032be:	61cb      	str	r3, [r1, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80032c0:	2a00      	cmp	r2, #0
 80032c2:	f040 80d0 	bne.w	8003466 <HAL_PCD_IRQHandler+0x62a>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80032c6:	694a      	ldr	r2, [r1, #20]
 80032c8:	f242 032b 	movw	r3, #8235	; 0x202b
 80032cc:	4313      	orrs	r3, r2
 80032ce:	614b      	str	r3, [r1, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80032d0:	690b      	ldr	r3, [r1, #16]
 80032d2:	f043 030b 	orr.w	r3, r3, #11
 80032d6:	610b      	str	r3, [r1, #16]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80032d8:	f8d5 3800 	ldr.w	r3, [r5, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80032dc:	f204 42c4 	addw	r2, r4, #1220	; 0x4c4
 80032e0:	7b21      	ldrb	r1, [r4, #12]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80032e2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80032e6:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80032e8:	f8c5 3800 	str.w	r3, [r5, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80032ec:	f003 fd84 	bl	8006df8 <USB_EP0_OutStart>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80032f0:	6820      	ldr	r0, [r4, #0]
 80032f2:	6943      	ldr	r3, [r0, #20]
 80032f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032f8:	6143      	str	r3, [r0, #20]
 80032fa:	e616      	b.n	8002f2a <HAL_PCD_IRQHandler+0xee>
      HAL_PCD_ConnectCallback(hpcd);
 80032fc:	4620      	mov	r0, r4
 80032fe:	f004 ff35 	bl	800816c <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003302:	6820      	ldr	r0, [r4, #0]
 8003304:	6943      	ldr	r3, [r0, #20]
 8003306:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800330a:	6143      	str	r3, [r0, #20]
 800330c:	e733      	b.n	8003176 <HAL_PCD_IRQHandler+0x33a>
      HAL_PCD_SOFCallback(hpcd);
 800330e:	4620      	mov	r0, r4
 8003310:	f004 feee 	bl	80080f0 <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003314:	6820      	ldr	r0, [r4, #0]
 8003316:	6943      	ldr	r3, [r0, #20]
 8003318:	f003 0308 	and.w	r3, r3, #8
 800331c:	6143      	str	r3, [r0, #20]
 800331e:	e611      	b.n	8002f44 <HAL_PCD_IRQHandler+0x108>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003320:	6820      	ldr	r0, [r4, #0]
 8003322:	f003 fd2d 	bl	8006d80 <USB_ReadDevAllInEpInterrupt>
      while (ep_intr != 0U)
 8003326:	4680      	mov	r8, r0
 8003328:	2800      	cmp	r0, #0
 800332a:	f43f add1 	beq.w	8002ed0 <HAL_PCD_IRQHandler+0x94>
      epnum = 0U;
 800332e:	f04f 0a00 	mov.w	sl, #0
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003332:	6820      	ldr	r0, [r4, #0]
 8003334:	4627      	mov	r7, r4
 8003336:	f505 6910 	add.w	r9, r5, #2304	; 0x900
              ep->is_iso_incomplete = 0U;
 800333a:	4656      	mov	r6, sl
 800333c:	9503      	str	r5, [sp, #12]
 800333e:	f8cd b010 	str.w	fp, [sp, #16]
 8003342:	e009      	b.n	8003358 <HAL_PCD_IRQHandler+0x51c>
      while (ep_intr != 0U)
 8003344:	ea5f 0858 	movs.w	r8, r8, lsr #1
        epnum++;
 8003348:	f106 0601 	add.w	r6, r6, #1
      while (ep_intr != 0U)
 800334c:	f107 0724 	add.w	r7, r7, #36	; 0x24
 8003350:	f109 0920 	add.w	r9, r9, #32
 8003354:	f000 80ed 	beq.w	8003532 <HAL_PCD_IRQHandler+0x6f6>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003358:	f018 0f01 	tst.w	r8, #1
 800335c:	d0f2      	beq.n	8003344 <HAL_PCD_IRQHandler+0x508>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800335e:	fa5f fa86 	uxtb.w	sl, r6
 8003362:	4651      	mov	r1, sl
 8003364:	f003 fd1e 	bl	8006da4 <USB_ReadDevInEPInterrupt>
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003368:	07c1      	lsls	r1, r0, #31
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800336a:	4605      	mov	r5, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800336c:	d514      	bpl.n	8003398 <HAL_PCD_IRQHandler+0x55c>
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800336e:	9902      	ldr	r1, [sp, #8]
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003370:	2301      	movs	r3, #1
 8003372:	f006 020f 	and.w	r2, r6, #15
 8003376:	fa03 f202 	lsl.w	r2, r3, r2
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800337a:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800337c:	ea23 0302 	bic.w	r3, r3, r2
 8003380:	634b      	str	r3, [r1, #52]	; 0x34
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003382:	2301      	movs	r3, #1
            if (hpcd->Init.dma_enable == 1U)
 8003384:	68e1      	ldr	r1, [r4, #12]
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003386:	f8c9 3008 	str.w	r3, [r9, #8]
            if (hpcd->Init.dma_enable == 1U)
 800338a:	4299      	cmp	r1, r3
 800338c:	f000 8199 	beq.w	80036c2 <HAL_PCD_IRQHandler+0x886>
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003390:	4651      	mov	r1, sl
 8003392:	4620      	mov	r0, r4
 8003394:	f004 fea2 	bl	80080dc <HAL_PCD_DataInStageCallback>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003398:	072a      	lsls	r2, r5, #28
 800339a:	d502      	bpl.n	80033a2 <HAL_PCD_IRQHandler+0x566>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800339c:	2308      	movs	r3, #8
 800339e:	f8c9 3008 	str.w	r3, [r9, #8]
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80033a2:	06eb      	lsls	r3, r5, #27
 80033a4:	d502      	bpl.n	80033ac <HAL_PCD_IRQHandler+0x570>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80033a6:	2310      	movs	r3, #16
 80033a8:	f8c9 3008 	str.w	r3, [r9, #8]
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80033ac:	0668      	lsls	r0, r5, #25
 80033ae:	d502      	bpl.n	80033b6 <HAL_PCD_IRQHandler+0x57a>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80033b0:	2340      	movs	r3, #64	; 0x40
 80033b2:	f8c9 3008 	str.w	r3, [r9, #8]
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80033b6:	07a9      	lsls	r1, r5, #30
 80033b8:	f100 8150 	bmi.w	800365c <HAL_PCD_IRQHandler+0x820>
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80033bc:	062a      	lsls	r2, r5, #24
 80033be:	f100 80f9 	bmi.w	80035b4 <HAL_PCD_IRQHandler+0x778>
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80033c2:	6820      	ldr	r0, [r4, #0]
 80033c4:	e7be      	b.n	8003344 <HAL_PCD_IRQHandler+0x508>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80033c6:	6820      	ldr	r0, [r4, #0]
 80033c8:	f003 fcd2 	bl	8006d70 <USB_ReadDevAllOutEpInterrupt>
      while (ep_intr != 0U)
 80033cc:	4606      	mov	r6, r0
 80033ce:	2800      	cmp	r0, #0
 80033d0:	f43f ad78 	beq.w	8002ec4 <HAL_PCD_IRQHandler+0x88>
 80033d4:	f505 6730 	add.w	r7, r5, #2816	; 0xb00
 80033d8:	46a2      	mov	sl, r4
      epnum = 0U;
 80033da:	f04f 0900 	mov.w	r9, #0
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80033de:	f8cd b00c 	str.w	fp, [sp, #12]
 80033e2:	e008      	b.n	80033f6 <HAL_PCD_IRQHandler+0x5ba>
      while (ep_intr != 0U)
 80033e4:	0876      	lsrs	r6, r6, #1
        epnum++;
 80033e6:	f109 0901 	add.w	r9, r9, #1
      while (ep_intr != 0U)
 80033ea:	f107 0720 	add.w	r7, r7, #32
 80033ee:	f10a 0a24 	add.w	sl, sl, #36	; 0x24
 80033f2:	f000 809b 	beq.w	800352c <HAL_PCD_IRQHandler+0x6f0>
        if ((ep_intr & 0x1U) != 0U)
 80033f6:	07f0      	lsls	r0, r6, #31
 80033f8:	d5f4      	bpl.n	80033e4 <HAL_PCD_IRQHandler+0x5a8>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80033fa:	fa5f fb89 	uxtb.w	fp, r9
 80033fe:	6820      	ldr	r0, [r4, #0]
 8003400:	4659      	mov	r1, fp
 8003402:	f003 fcc5 	bl	8006d90 <USB_ReadDevOutEPInterrupt>
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003406:	f010 0f01 	tst.w	r0, #1
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800340a:	4680      	mov	r8, r0
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800340c:	f040 80b3 	bne.w	8003576 <HAL_PCD_IRQHandler+0x73a>
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003410:	f018 0f08 	tst.w	r8, #8
 8003414:	f040 8090 	bne.w	8003538 <HAL_PCD_IRQHandler+0x6fc>
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003418:	f018 0f10 	tst.w	r8, #16
 800341c:	d001      	beq.n	8003422 <HAL_PCD_IRQHandler+0x5e6>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800341e:	2210      	movs	r2, #16
 8003420:	60ba      	str	r2, [r7, #8]
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003422:	f018 0f02 	tst.w	r8, #2
 8003426:	d00e      	beq.n	8003446 <HAL_PCD_IRQHandler+0x60a>
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003428:	696a      	ldr	r2, [r5, #20]
 800342a:	0610      	lsls	r0, r2, #24
 800342c:	d504      	bpl.n	8003438 <HAL_PCD_IRQHandler+0x5fc>
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800342e:	9b02      	ldr	r3, [sp, #8]
 8003430:	685a      	ldr	r2, [r3, #4]
 8003432:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003436:	605a      	str	r2, [r3, #4]
            if (ep->is_iso_incomplete == 1U)
 8003438:	f89a 227f 	ldrb.w	r2, [sl, #639]	; 0x27f
 800343c:	2a01      	cmp	r2, #1
 800343e:	f000 8182 	beq.w	8003746 <HAL_PCD_IRQHandler+0x90a>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003442:	2302      	movs	r3, #2
 8003444:	60bb      	str	r3, [r7, #8]
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003446:	f018 0f20 	tst.w	r8, #32
 800344a:	d001      	beq.n	8003450 <HAL_PCD_IRQHandler+0x614>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800344c:	2320      	movs	r3, #32
 800344e:	60bb      	str	r3, [r7, #8]
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003450:	f418 5f00 	tst.w	r8, #8192	; 0x2000
 8003454:	d0c6      	beq.n	80033e4 <HAL_PCD_IRQHandler+0x5a8>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003456:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800345a:	60bb      	str	r3, [r7, #8]
 800345c:	e7c2      	b.n	80033e4 <HAL_PCD_IRQHandler+0x5a8>
        HAL_PCD_SuspendCallback(hpcd);
 800345e:	4620      	mov	r0, r4
 8003460:	f004 fe60 	bl	8008124 <HAL_PCD_SuspendCallback>
 8003464:	e55a      	b.n	8002f1c <HAL_PCD_IRQHandler+0xe0>
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003466:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
 800346a:	f043 030b 	orr.w	r3, r3, #11
 800346e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003472:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 8003474:	f043 030b 	orr.w	r3, r3, #11
 8003478:	644b      	str	r3, [r1, #68]	; 0x44
 800347a:	e72d      	b.n	80032d8 <HAL_PCD_IRQHandler+0x49c>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800347c:	2900      	cmp	r1, #0
 800347e:	f6bf ade8 	bge.w	8003052 <HAL_PCD_IRQHandler+0x216>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003482:	4621      	mov	r1, r4
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003484:	f884 2063 	strb.w	r2, [r4, #99]	; 0x63
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003488:	f851 0b60 	ldr.w	r0, [r1], #96
 800348c:	f003 fb5c 	bl	8006b48 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003490:	6863      	ldr	r3, [r4, #4]
 8003492:	e5de      	b.n	8003052 <HAL_PCD_IRQHandler+0x216>
        hpcd->LPM_State = LPM_L0;
 8003494:	2100      	movs	r1, #0
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003496:	4620      	mov	r0, r4
        hpcd->LPM_State = LPM_L0;
 8003498:	f884 14f4 	strb.w	r1, [r4, #1268]	; 0x4f4
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800349c:	f000 fc10 	bl	8003cc0 <HAL_PCDEx_LPM_Callback>
 80034a0:	e6c3      	b.n	800322a <HAL_PCD_IRQHandler+0x3ee>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80034a2:	2900      	cmp	r1, #0
 80034a4:	f6bf adde 	bge.w	8003064 <HAL_PCD_IRQHandler+0x228>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034a8:	4621      	mov	r1, r4
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80034aa:	f884 2087 	strb.w	r2, [r4, #135]	; 0x87
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80034ae:	f851 0b84 	ldr.w	r0, [r1], #132
 80034b2:	f003 fb49 	bl	8006b48 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80034b6:	6863      	ldr	r3, [r4, #4]
 80034b8:	e5d4      	b.n	8003064 <HAL_PCD_IRQHandler+0x228>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80034ba:	2900      	cmp	r1, #0
 80034bc:	f6bf addb 	bge.w	8003076 <HAL_PCD_IRQHandler+0x23a>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034c0:	4621      	mov	r1, r4
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80034c2:	f884 20ab 	strb.w	r2, [r4, #171]	; 0xab
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80034c6:	f851 0ba8 	ldr.w	r0, [r1], #168
 80034ca:	f003 fb3d 	bl	8006b48 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80034ce:	6863      	ldr	r3, [r4, #4]
 80034d0:	e5d1      	b.n	8003076 <HAL_PCD_IRQHandler+0x23a>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80034d2:	2900      	cmp	r1, #0
 80034d4:	f6bf add8 	bge.w	8003088 <HAL_PCD_IRQHandler+0x24c>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034d8:	4621      	mov	r1, r4
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80034da:	f884 20cf 	strb.w	r2, [r4, #207]	; 0xcf
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80034de:	f851 0bcc 	ldr.w	r0, [r1], #204
 80034e2:	f003 fb31 	bl	8006b48 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80034e6:	6863      	ldr	r3, [r4, #4]
 80034e8:	e5ce      	b.n	8003088 <HAL_PCD_IRQHandler+0x24c>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80034ea:	f504 713a 	add.w	r1, r4, #744	; 0x2e8
 80034ee:	6820      	ldr	r0, [r4, #0]
 80034f0:	f003 fb2a 	bl	8006b48 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80034f4:	6863      	ldr	r3, [r4, #4]
 80034f6:	e543      	b.n	8002f80 <HAL_PCD_IRQHandler+0x144>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80034f8:	eb07 07c7 	add.w	r7, r7, r7, lsl #3
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80034fc:	2208      	movs	r2, #8
 80034fe:	f204 41c4 	addw	r1, r4, #1220	; 0x4c4
 8003502:	4628      	mov	r0, r5
 8003504:	f003 fb7a 	bl	8006bfc <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003508:	f3c6 130a 	ubfx	r3, r6, #4, #11
 800350c:	eb04 0287 	add.w	r2, r4, r7, lsl #2
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003510:	6820      	ldr	r0, [r4, #0]
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003512:	f8d2 1290 	ldr.w	r1, [r2, #656]	; 0x290
 8003516:	440b      	add	r3, r1
 8003518:	f8c2 3290 	str.w	r3, [r2, #656]	; 0x290
 800351c:	e4c9      	b.n	8002eb2 <HAL_PCD_IRQHandler+0x76>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800351e:	f504 7143 	add.w	r1, r4, #780	; 0x30c
 8003522:	6820      	ldr	r0, [r4, #0]
 8003524:	f003 fb10 	bl	8006b48 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003528:	6863      	ldr	r3, [r4, #4]
 800352a:	e530      	b.n	8002f8e <HAL_PCD_IRQHandler+0x152>
 800352c:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8003530:	e4c8      	b.n	8002ec4 <HAL_PCD_IRQHandler+0x88>
 8003532:	e9dd 5b03 	ldrd	r5, fp, [sp, #12]
 8003536:	e4cc      	b.n	8002ed2 <HAL_PCD_IRQHandler+0x96>
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003538:	6821      	ldr	r1, [r4, #0]
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800353a:	2208      	movs	r2, #8
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800353c:	4bbb      	ldr	r3, [pc, #748]	; (800382c <HAL_PCD_IRQHandler+0x9f0>)
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800353e:	60ba      	str	r2, [r7, #8]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003540:	f501 6230 	add.w	r2, r1, #2816	; 0xb00
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003544:	6c09      	ldr	r1, [r1, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003546:	eb02 1249 	add.w	r2, r2, r9, lsl #5
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800354a:	4299      	cmp	r1, r3
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800354c:	6890      	ldr	r0, [r2, #8]
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800354e:	f240 80c9 	bls.w	80036e4 <HAL_PCD_IRQHandler+0x8a8>
 8003552:	0403      	lsls	r3, r0, #16
 8003554:	d502      	bpl.n	800355c <HAL_PCD_IRQHandler+0x720>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003556:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800355a:	6091      	str	r1, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800355c:	4620      	mov	r0, r4
 800355e:	f004 fdad 	bl	80080bc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003562:	68e1      	ldr	r1, [r4, #12]
 8003564:	2901      	cmp	r1, #1
 8003566:	f47f af57 	bne.w	8003418 <HAL_PCD_IRQHandler+0x5dc>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800356a:	f204 42c4 	addw	r2, r4, #1220	; 0x4c4
 800356e:	6820      	ldr	r0, [r4, #0]
 8003570:	f003 fc42 	bl	8006df8 <USB_EP0_OutStart>
 8003574:	e750      	b.n	8003418 <HAL_PCD_IRQHandler+0x5dc>
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003576:	6820      	ldr	r0, [r4, #0]
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003578:	2201      	movs	r2, #1
  if (hpcd->Init.dma_enable == 1U)
 800357a:	68e1      	ldr	r1, [r4, #12]
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800357c:	60ba      	str	r2, [r7, #8]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800357e:	f500 6230 	add.w	r2, r0, #2816	; 0xb00
  if (hpcd->Init.dma_enable == 1U)
 8003582:	2901      	cmp	r1, #1
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003584:	f8d0 c040 	ldr.w	ip, [r0, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003588:	eb02 1249 	add.w	r2, r2, r9, lsl #5
 800358c:	6893      	ldr	r3, [r2, #8]
  if (hpcd->Init.dma_enable == 1U)
 800358e:	f000 80ad 	beq.w	80036ec <HAL_PCD_IRQHandler+0x8b0>
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003592:	49a7      	ldr	r1, [pc, #668]	; (8003830 <HAL_PCD_IRQHandler+0x9f4>)
 8003594:	458c      	cmp	ip, r1
 8003596:	f000 810a 	beq.w	80037ae <HAL_PCD_IRQHandler+0x972>
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800359a:	f1b9 0f00 	cmp.w	r9, #0
 800359e:	d104      	bne.n	80035aa <HAL_PCD_IRQHandler+0x76e>
 80035a0:	f8d4 228c 	ldr.w	r2, [r4, #652]	; 0x28c
 80035a4:	2a00      	cmp	r2, #0
 80035a6:	f000 81d8 	beq.w	800395a <HAL_PCD_IRQHandler+0xb1e>
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80035aa:	4659      	mov	r1, fp
 80035ac:	4620      	mov	r0, r4
 80035ae:	f004 fd8b 	bl	80080c8 <HAL_PCD_DataOutStageCallback>
 80035b2:	e72d      	b.n	8003410 <HAL_PCD_IRQHandler+0x5d4>
  if (ep->xfer_count > ep->xfer_len)
 80035b4:	e9d7 5313 	ldrd	r5, r3, [r7, #76]	; 0x4c
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80035b8:	f8d4 b000 	ldr.w	fp, [r4]
  if (ep->xfer_count > ep->xfer_len)
 80035bc:	42ab      	cmp	r3, r5
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80035be:	4658      	mov	r0, fp
  if (ep->xfer_count > ep->xfer_len)
 80035c0:	f63f aec0 	bhi.w	8003344 <HAL_PCD_IRQHandler+0x508>
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80035c4:	f50b 6210 	add.w	r2, fp, #2304	; 0x900
  len32b = (len + 3U) / 4U;
 80035c8:	6c79      	ldr	r1, [r7, #68]	; 0x44
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035ca:	f8cd b01c 	str.w	fp, [sp, #28]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80035ce:	eb02 1246 	add.w	r2, r2, r6, lsl #5
 80035d2:	9205      	str	r2, [sp, #20]
  len = ep->xfer_len - ep->xfer_count;
 80035d4:	1aea      	subs	r2, r5, r3
  len32b = (len + 3U) / 4U;
 80035d6:	428a      	cmp	r2, r1
 80035d8:	bf28      	it	cs
 80035da:	460a      	movcs	r2, r1
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80035dc:	9905      	ldr	r1, [sp, #20]
 80035de:	6989      	ldr	r1, [r1, #24]
  len32b = (len + 3U) / 4U;
 80035e0:	3203      	adds	r2, #3
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80035e2:	b289      	uxth	r1, r1
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80035e4:	ebb1 0f92 	cmp.w	r1, r2, lsr #2
 80035e8:	f0c0 8096 	bcc.w	8003718 <HAL_PCD_IRQHandler+0x8dc>
 80035ec:	4652      	mov	r2, sl
 80035ee:	9606      	str	r6, [sp, #24]
 80035f0:	46ca      	mov	sl, r9
 80035f2:	4626      	mov	r6, r4
 80035f4:	46c1      	mov	r9, r8
 80035f6:	9c05      	ldr	r4, [sp, #20]
 80035f8:	4690      	mov	r8, r2
 80035fa:	e019      	b.n	8003630 <HAL_PCD_IRQHandler+0x7f4>
    len = ep->xfer_len - ep->xfer_count;
 80035fc:	1aed      	subs	r5, r5, r3
 80035fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003600:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003602:	4642      	mov	r2, r8
 8003604:	429d      	cmp	r5, r3
 8003606:	4658      	mov	r0, fp
 8003608:	bf28      	it	cs
 800360a:	461d      	movcs	r5, r3
 800360c:	7b33      	ldrb	r3, [r6, #12]
 800360e:	9300      	str	r3, [sp, #0]
 8003610:	b2ab      	uxth	r3, r5
 8003612:	f003 fadd 	bl	8006bd0 <USB_WritePacket>
    ep->xfer_buff  += len;
 8003616:	6cbb      	ldr	r3, [r7, #72]	; 0x48
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003618:	69a1      	ldr	r1, [r4, #24]
    ep->xfer_buff  += len;
 800361a:	442b      	add	r3, r5
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800361c:	b289      	uxth	r1, r1
    ep->xfer_buff  += len;
 800361e:	64bb      	str	r3, [r7, #72]	; 0x48
    ep->xfer_count += len;
 8003620:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003622:	442b      	add	r3, r5
    len32b = (len + 3U) / 4U;
 8003624:	3503      	adds	r5, #3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003626:	ebb1 0f95 	cmp.w	r1, r5, lsr #2
    ep->xfer_count += len;
 800362a:	653b      	str	r3, [r7, #80]	; 0x50
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800362c:	d36c      	bcc.n	8003708 <HAL_PCD_IRQHandler+0x8cc>
  if (ep->xfer_len <= ep->xfer_count)
 800362e:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003630:	42ab      	cmp	r3, r5
 8003632:	d3e3      	bcc.n	80035fc <HAL_PCD_IRQHandler+0x7c0>
 8003634:	4634      	mov	r4, r6
 8003636:	46c8      	mov	r8, r9
 8003638:	9e06      	ldr	r6, [sp, #24]
 800363a:	46d1      	mov	r9, sl
 800363c:	f8d4 b000 	ldr.w	fp, [r4]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003640:	9b07      	ldr	r3, [sp, #28]
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003642:	f006 020f 	and.w	r2, r6, #15
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003646:	4658      	mov	r0, fp
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003648:	f503 6100 	add.w	r1, r3, #2048	; 0x800
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800364c:	2301      	movs	r3, #1
 800364e:	fa03 f202 	lsl.w	r2, r3, r2
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003652:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8003654:	ea23 0302 	bic.w	r3, r3, r2
 8003658:	634b      	str	r3, [r1, #52]	; 0x34
 800365a:	e673      	b.n	8003344 <HAL_PCD_IRQHandler+0x508>
            (void)USB_FlushTxFifo(USBx, epnum);
 800365c:	4631      	mov	r1, r6
 800365e:	9803      	ldr	r0, [sp, #12]
 8003660:	f003 f852 	bl	8006708 <USB_FlushTxFifo>
            if (ep->is_iso_incomplete == 1U)
 8003664:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003668:	2b01      	cmp	r3, #1
 800366a:	f000 80a8 	beq.w	80037be <HAL_PCD_IRQHandler+0x982>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800366e:	2302      	movs	r3, #2
 8003670:	f8c9 3008 	str.w	r3, [r9, #8]
 8003674:	e6a2      	b.n	80033bc <HAL_PCD_IRQHandler+0x580>
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003676:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800367a:	421e      	tst	r6, r3
 800367c:	f43f ac19 	beq.w	8002eb2 <HAL_PCD_IRQHandler+0x76>
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003680:	eb07 07c7 	add.w	r7, r7, r7, lsl #3
 8003684:	f3c6 120a 	ubfx	r2, r6, #4, #11
 8003688:	4628      	mov	r0, r5
 800368a:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 800368e:	4616      	mov	r6, r2
 8003690:	f8d7 1288 	ldr.w	r1, [r7, #648]	; 0x288
 8003694:	f003 fab2 	bl	8006bfc <USB_ReadPacket>
          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003698:	f8d7 3288 	ldr.w	r3, [r7, #648]	; 0x288
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800369c:	6820      	ldr	r0, [r4, #0]
          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800369e:	4433      	add	r3, r6
 80036a0:	f8c7 3288 	str.w	r3, [r7, #648]	; 0x288
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80036a4:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 80036a8:	4433      	add	r3, r6
 80036aa:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
 80036ae:	e400      	b.n	8002eb2 <HAL_PCD_IRQHandler+0x76>
        HAL_PCD_SuspendCallback(hpcd);
 80036b0:	4620      	mov	r0, r4
 80036b2:	f004 fd37 	bl	8008124 <HAL_PCD_SuspendCallback>
 80036b6:	e573      	b.n	80031a0 <HAL_PCD_IRQHandler+0x364>
        HAL_PCD_DisconnectCallback(hpcd);
 80036b8:	4620      	mov	r0, r4
 80036ba:	f004 fd5b 	bl	8008174 <HAL_PCD_DisconnectCallback>
      hpcd->Instance->GOTGINT |= RegVal;
 80036be:	6823      	ldr	r3, [r4, #0]
 80036c0:	e563      	b.n	800318a <HAL_PCD_IRQHandler+0x34e>
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80036c2:	e9d7 2311 	ldrd	r2, r3, [r7, #68]	; 0x44
 80036c6:	4413      	add	r3, r2
 80036c8:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80036ca:	2e00      	cmp	r6, #0
 80036cc:	f47f ae60 	bne.w	8003390 <HAL_PCD_IRQHandler+0x554>
 80036d0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	f47f ae5c 	bne.w	8003390 <HAL_PCD_IRQHandler+0x554>
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80036d8:	f204 42c4 	addw	r2, r4, #1220	; 0x4c4
 80036dc:	6820      	ldr	r0, [r4, #0]
 80036de:	f003 fb8b 	bl	8006df8 <USB_EP0_OutStart>
 80036e2:	e655      	b.n	8003390 <HAL_PCD_IRQHandler+0x554>
  HAL_PCD_SetupStageCallback(hpcd);
 80036e4:	4620      	mov	r0, r4
 80036e6:	f004 fce9 	bl	80080bc <HAL_PCD_SetupStageCallback>
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80036ea:	e695      	b.n	8003418 <HAL_PCD_IRQHandler+0x5dc>
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80036ec:	0719      	lsls	r1, r3, #28
 80036ee:	f140 8097 	bpl.w	8003820 <HAL_PCD_IRQHandler+0x9e4>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80036f2:	494e      	ldr	r1, [pc, #312]	; (800382c <HAL_PCD_IRQHandler+0x9f0>)
 80036f4:	458c      	cmp	ip, r1
 80036f6:	f67f ae8b 	bls.w	8003410 <HAL_PCD_IRQHandler+0x5d4>
 80036fa:	0418      	lsls	r0, r3, #16
 80036fc:	f57f ae88 	bpl.w	8003410 <HAL_PCD_IRQHandler+0x5d4>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003700:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003704:	6091      	str	r1, [r2, #8]
 8003706:	e683      	b.n	8003410 <HAL_PCD_IRQHandler+0x5d4>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003708:	4634      	mov	r4, r6
 800370a:	46c8      	mov	r8, r9
 800370c:	9e06      	ldr	r6, [sp, #24]
 800370e:	46d1      	mov	r9, sl
 8003710:	f8d4 b000 	ldr.w	fp, [r4]
  if (ep->xfer_len <= ep->xfer_count)
 8003714:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003716:	4658      	mov	r0, fp
  if (ep->xfer_len <= ep->xfer_count)
 8003718:	42ab      	cmp	r3, r5
 800371a:	f4ff ae13 	bcc.w	8003344 <HAL_PCD_IRQHandler+0x508>
 800371e:	e78f      	b.n	8003640 <HAL_PCD_IRQHandler+0x804>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003720:	2900      	cmp	r1, #0
 8003722:	f6bf acba 	bge.w	800309a <HAL_PCD_IRQHandler+0x25e>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003726:	4621      	mov	r1, r4
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003728:	f884 20f3 	strb.w	r2, [r4, #243]	; 0xf3
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800372c:	f851 0bf0 	ldr.w	r0, [r1], #240
 8003730:	f003 fa0a 	bl	8006b48 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003734:	6863      	ldr	r3, [r4, #4]
 8003736:	e4b0      	b.n	800309a <HAL_PCD_IRQHandler+0x25e>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003738:	f504 7128 	add.w	r1, r4, #672	; 0x2a0
 800373c:	6820      	ldr	r0, [r4, #0]
 800373e:	f003 fa03 	bl	8006b48 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003742:	6863      	ldr	r3, [r4, #4]
 8003744:	e40e      	b.n	8002f64 <HAL_PCD_IRQHandler+0x128>
              ep->is_iso_incomplete = 0U;
 8003746:	2300      	movs	r3, #0
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003748:	4659      	mov	r1, fp
 800374a:	4620      	mov	r0, r4
              ep->is_iso_incomplete = 0U;
 800374c:	f88a 327f 	strb.w	r3, [sl, #639]	; 0x27f
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003750:	f004 fd04 	bl	800815c <HAL_PCD_ISOOUTIncompleteCallback>
 8003754:	e675      	b.n	8003442 <HAL_PCD_IRQHandler+0x606>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003756:	2900      	cmp	r1, #0
 8003758:	f6bf aca8 	bge.w	80030ac <HAL_PCD_IRQHandler+0x270>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800375c:	f504 718a 	add.w	r1, r4, #276	; 0x114
 8003760:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003762:	f884 2117 	strb.w	r2, [r4, #279]	; 0x117
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003766:	f003 f9ef 	bl	8006b48 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800376a:	6863      	ldr	r3, [r4, #4]
 800376c:	e49e      	b.n	80030ac <HAL_PCD_IRQHandler+0x270>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800376e:	f504 7131 	add.w	r1, r4, #708	; 0x2c4
 8003772:	6820      	ldr	r0, [r4, #0]
 8003774:	f003 f9e8 	bl	8006b48 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003778:	6863      	ldr	r3, [r4, #4]
 800377a:	f7ff bbfa 	b.w	8002f72 <HAL_PCD_IRQHandler+0x136>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800377e:	2900      	cmp	r1, #0
 8003780:	f6bf ac9d 	bge.w	80030be <HAL_PCD_IRQHandler+0x282>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003784:	f504 719c 	add.w	r1, r4, #312	; 0x138
 8003788:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800378a:	f884 213b 	strb.w	r2, [r4, #315]	; 0x13b
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800378e:	f003 f9db 	bl	8006b48 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003792:	6863      	ldr	r3, [r4, #4]
 8003794:	e493      	b.n	80030be <HAL_PCD_IRQHandler+0x282>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003796:	2900      	cmp	r1, #0
 8003798:	f6bf ac9a 	bge.w	80030d0 <HAL_PCD_IRQHandler+0x294>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800379c:	f504 71ae 	add.w	r1, r4, #348	; 0x15c
 80037a0:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80037a2:	f884 215f 	strb.w	r2, [r4, #351]	; 0x15f
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80037a6:	f003 f9cf 	bl	8006b48 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80037aa:	6863      	ldr	r3, [r4, #4]
 80037ac:	e490      	b.n	80030d0 <HAL_PCD_IRQHandler+0x294>
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80037ae:	0418      	lsls	r0, r3, #16
 80037b0:	d4a6      	bmi.n	8003700 <HAL_PCD_IRQHandler+0x8c4>
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80037b2:	0699      	lsls	r1, r3, #26
 80037b4:	f57f aef9 	bpl.w	80035aa <HAL_PCD_IRQHandler+0x76e>
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80037b8:	2120      	movs	r1, #32
 80037ba:	6091      	str	r1, [r2, #8]
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80037bc:	e6f5      	b.n	80035aa <HAL_PCD_IRQHandler+0x76e>
              ep->is_iso_incomplete = 0U;
 80037be:	f04f 0300 	mov.w	r3, #0
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80037c2:	4651      	mov	r1, sl
 80037c4:	4620      	mov	r0, r4
              ep->is_iso_incomplete = 0U;
 80037c6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80037ca:	f004 fccb 	bl	8008164 <HAL_PCD_ISOINIncompleteCallback>
 80037ce:	e74e      	b.n	800366e <HAL_PCD_IRQHandler+0x832>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80037d0:	2900      	cmp	r1, #0
 80037d2:	f6bf ac86 	bge.w	80030e2 <HAL_PCD_IRQHandler+0x2a6>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80037d6:	f504 71c0 	add.w	r1, r4, #384	; 0x180
 80037da:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80037dc:	f884 2183 	strb.w	r2, [r4, #387]	; 0x183
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80037e0:	f003 f9b2 	bl	8006b48 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80037e4:	6863      	ldr	r3, [r4, #4]
 80037e6:	e47c      	b.n	80030e2 <HAL_PCD_IRQHandler+0x2a6>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80037e8:	f504 714c 	add.w	r1, r4, #816	; 0x330
 80037ec:	6820      	ldr	r0, [r4, #0]
 80037ee:	f003 f9ab 	bl	8006b48 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80037f2:	6863      	ldr	r3, [r4, #4]
 80037f4:	f7ff bbd2 	b.w	8002f9c <HAL_PCD_IRQHandler+0x160>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80037f8:	2900      	cmp	r1, #0
 80037fa:	f6bf ac7b 	bge.w	80030f4 <HAL_PCD_IRQHandler+0x2b8>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80037fe:	f504 71d2 	add.w	r1, r4, #420	; 0x1a4
 8003802:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003804:	f884 21a7 	strb.w	r2, [r4, #423]	; 0x1a7
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003808:	f003 f99e 	bl	8006b48 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800380c:	6863      	ldr	r3, [r4, #4]
 800380e:	e471      	b.n	80030f4 <HAL_PCD_IRQHandler+0x2b8>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003810:	f504 7155 	add.w	r1, r4, #852	; 0x354
 8003814:	6820      	ldr	r0, [r4, #0]
 8003816:	f003 f997 	bl	8006b48 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800381a:	6863      	ldr	r3, [r4, #4]
 800381c:	f7ff bbc5 	b.w	8002faa <HAL_PCD_IRQHandler+0x16e>
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003820:	0699      	lsls	r1, r3, #26
 8003822:	d573      	bpl.n	800390c <HAL_PCD_IRQHandler+0xad0>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003824:	2120      	movs	r1, #32
 8003826:	6091      	str	r1, [r2, #8]
 8003828:	e5f2      	b.n	8003410 <HAL_PCD_IRQHandler+0x5d4>
 800382a:	bf00      	nop
 800382c:	4f54300a 	.word	0x4f54300a
 8003830:	4f54310a 	.word	0x4f54310a
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003834:	2900      	cmp	r1, #0
 8003836:	f6bf ac66 	bge.w	8003106 <HAL_PCD_IRQHandler+0x2ca>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800383a:	f504 71e4 	add.w	r1, r4, #456	; 0x1c8
 800383e:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003840:	f884 21cb 	strb.w	r2, [r4, #459]	; 0x1cb
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003844:	f003 f980 	bl	8006b48 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003848:	6863      	ldr	r3, [r4, #4]
 800384a:	e45c      	b.n	8003106 <HAL_PCD_IRQHandler+0x2ca>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800384c:	f504 715e 	add.w	r1, r4, #888	; 0x378
 8003850:	6820      	ldr	r0, [r4, #0]
 8003852:	f003 f979 	bl	8006b48 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003856:	6863      	ldr	r3, [r4, #4]
 8003858:	f7ff bbae 	b.w	8002fb8 <HAL_PCD_IRQHandler+0x17c>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800385c:	2900      	cmp	r1, #0
 800385e:	f6bf ac5b 	bge.w	8003118 <HAL_PCD_IRQHandler+0x2dc>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003862:	f504 71f6 	add.w	r1, r4, #492	; 0x1ec
 8003866:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003868:	f884 21ef 	strb.w	r2, [r4, #495]	; 0x1ef
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800386c:	f003 f96c 	bl	8006b48 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003870:	6863      	ldr	r3, [r4, #4]
 8003872:	e451      	b.n	8003118 <HAL_PCD_IRQHandler+0x2dc>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003874:	f504 7167 	add.w	r1, r4, #924	; 0x39c
 8003878:	6820      	ldr	r0, [r4, #0]
 800387a:	f003 f965 	bl	8006b48 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800387e:	6863      	ldr	r3, [r4, #4]
 8003880:	f7ff bba1 	b.w	8002fc6 <HAL_PCD_IRQHandler+0x18a>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003884:	2900      	cmp	r1, #0
 8003886:	f6bf ac50 	bge.w	800312a <HAL_PCD_IRQHandler+0x2ee>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800388a:	f504 7104 	add.w	r1, r4, #528	; 0x210
 800388e:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003890:	f884 2213 	strb.w	r2, [r4, #531]	; 0x213
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003894:	f003 f958 	bl	8006b48 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003898:	6863      	ldr	r3, [r4, #4]
 800389a:	e446      	b.n	800312a <HAL_PCD_IRQHandler+0x2ee>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800389c:	f504 7170 	add.w	r1, r4, #960	; 0x3c0
 80038a0:	6820      	ldr	r0, [r4, #0]
 80038a2:	f003 f951 	bl	8006b48 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80038a6:	6863      	ldr	r3, [r4, #4]
 80038a8:	f7ff bb94 	b.w	8002fd4 <HAL_PCD_IRQHandler+0x198>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80038ac:	2900      	cmp	r1, #0
 80038ae:	f6bf ac45 	bge.w	800313c <HAL_PCD_IRQHandler+0x300>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80038b2:	f504 710d 	add.w	r1, r4, #564	; 0x234
 80038b6:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80038b8:	f884 2237 	strb.w	r2, [r4, #567]	; 0x237
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80038bc:	f003 f944 	bl	8006b48 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80038c0:	6863      	ldr	r3, [r4, #4]
 80038c2:	e43b      	b.n	800313c <HAL_PCD_IRQHandler+0x300>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80038c4:	f504 7179 	add.w	r1, r4, #996	; 0x3e4
 80038c8:	6820      	ldr	r0, [r4, #0]
 80038ca:	f003 f93d 	bl	8006b48 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80038ce:	6863      	ldr	r3, [r4, #4]
 80038d0:	f7ff bb87 	b.w	8002fe2 <HAL_PCD_IRQHandler+0x1a6>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80038d4:	2900      	cmp	r1, #0
 80038d6:	f6bf ac3a 	bge.w	800314e <HAL_PCD_IRQHandler+0x312>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80038da:	f504 7116 	add.w	r1, r4, #600	; 0x258
 80038de:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80038e0:	f884 225b 	strb.w	r2, [r4, #603]	; 0x25b
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80038e4:	f003 f930 	bl	8006b48 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80038e8:	6863      	ldr	r3, [r4, #4]
 80038ea:	e430      	b.n	800314e <HAL_PCD_IRQHandler+0x312>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80038ec:	f504 6181 	add.w	r1, r4, #1032	; 0x408
 80038f0:	6820      	ldr	r0, [r4, #0]
 80038f2:	f003 f929 	bl	8006b48 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80038f6:	6863      	ldr	r3, [r4, #4]
 80038f8:	f7ff bb7a 	b.w	8002ff0 <HAL_PCD_IRQHandler+0x1b4>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80038fc:	f204 412c 	addw	r1, r4, #1068	; 0x42c
 8003900:	6820      	ldr	r0, [r4, #0]
 8003902:	f003 f921 	bl	8006b48 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003906:	6863      	ldr	r3, [r4, #4]
 8003908:	f7ff bb79 	b.w	8002ffe <HAL_PCD_IRQHandler+0x1c2>
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800390c:	f013 0f28 	tst.w	r3, #40	; 0x28
 8003910:	f47f ad7e 	bne.w	8003410 <HAL_PCD_IRQHandler+0x5d4>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003914:	491b      	ldr	r1, [pc, #108]	; (8003984 <HAL_PCD_IRQHandler+0xb48>)
 8003916:	458c      	cmp	ip, r1
 8003918:	d902      	bls.n	8003920 <HAL_PCD_IRQHandler+0xae4>
 800391a:	041b      	lsls	r3, r3, #16
 800391c:	f53f aef0 	bmi.w	8003700 <HAL_PCD_IRQHandler+0x8c4>
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003920:	6911      	ldr	r1, [r2, #16]
 8003922:	f8da 229c 	ldr.w	r2, [sl, #668]	; 0x29c
 8003926:	f3c1 0112 	ubfx	r1, r1, #0, #19
 800392a:	1a52      	subs	r2, r2, r1
 800392c:	f8ca 2290 	str.w	r2, [sl, #656]	; 0x290
        if (epnum == 0U)
 8003930:	f1b9 0f00 	cmp.w	r9, #0
 8003934:	f47f ae39 	bne.w	80035aa <HAL_PCD_IRQHandler+0x76e>
          if (ep->xfer_len == 0U)
 8003938:	f8d4 128c 	ldr.w	r1, [r4, #652]	; 0x28c
 800393c:	b1d9      	cbz	r1, 8003976 <HAL_PCD_IRQHandler+0xb3a>
            ep->xfer_buff += ep->xfer_count;
 800393e:	f8d4 1288 	ldr.w	r1, [r4, #648]	; 0x288
 8003942:	4411      	add	r1, r2
 8003944:	f8c4 1288 	str.w	r1, [r4, #648]	; 0x288
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003948:	e62f      	b.n	80035aa <HAL_PCD_IRQHandler+0x76e>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800394a:	f504 618a 	add.w	r1, r4, #1104	; 0x450
 800394e:	6820      	ldr	r0, [r4, #0]
 8003950:	f003 f8fa 	bl	8006b48 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003954:	6863      	ldr	r3, [r4, #4]
 8003956:	f7ff bb59 	b.w	800300c <HAL_PCD_IRQHandler+0x1d0>
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800395a:	f204 42c4 	addw	r2, r4, #1220	; 0x4c4
 800395e:	4649      	mov	r1, r9
 8003960:	f003 fa4a 	bl	8006df8 <USB_EP0_OutStart>
 8003964:	e621      	b.n	80035aa <HAL_PCD_IRQHandler+0x76e>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003966:	f204 4174 	addw	r1, r4, #1140	; 0x474
 800396a:	6820      	ldr	r0, [r4, #0]
 800396c:	f003 f8ec 	bl	8006b48 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003970:	6863      	ldr	r3, [r4, #4]
 8003972:	f7ff bb52 	b.w	800301a <HAL_PCD_IRQHandler+0x1de>
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003976:	f204 42c4 	addw	r2, r4, #1220	; 0x4c4
 800397a:	2101      	movs	r1, #1
 800397c:	f003 fa3c 	bl	8006df8 <USB_EP0_OutStart>
 8003980:	e613      	b.n	80035aa <HAL_PCD_IRQHandler+0x76e>
 8003982:	bf00      	nop
 8003984:	4f54300a 	.word	0x4f54300a

08003988 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 8003988:	f890 24bc 	ldrb.w	r2, [r0, #1212]	; 0x4bc
 800398c:	2a01      	cmp	r2, #1
 800398e:	d00e      	beq.n	80039ae <HAL_PCD_SetAddress+0x26>
 8003990:	2201      	movs	r2, #1
{
 8003992:	b510      	push	{r4, lr}
 8003994:	4604      	mov	r4, r0
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003996:	6800      	ldr	r0, [r0, #0]
  hpcd->USB_Address = address;
 8003998:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
  __HAL_LOCK(hpcd);
 800399c:	f884 24bc 	strb.w	r2, [r4, #1212]	; 0x4bc
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80039a0:	f003 f9b0 	bl	8006d04 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80039a4:	2300      	movs	r3, #0
  return HAL_OK;
 80039a6:	4618      	mov	r0, r3
  __HAL_UNLOCK(hpcd);
 80039a8:	f884 34bc 	strb.w	r3, [r4, #1212]	; 0x4bc
}
 80039ac:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80039ae:	2002      	movs	r0, #2
}
 80039b0:	4770      	bx	lr
 80039b2:	bf00      	nop

080039b4 <HAL_PCD_EP_Open>:
{
 80039b4:	b510      	push	{r4, lr}
 80039b6:	f001 0e0f 	and.w	lr, r1, #15
  if ((ep_addr & 0x80U) == 0x80U)
 80039ba:	0609      	lsls	r1, r1, #24
{
 80039bc:	4604      	mov	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 80039be:	d427      	bmi.n	8003a10 <HAL_PCD_EP_Open+0x5c>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80039c0:	f04f 0c24 	mov.w	ip, #36	; 0x24
 80039c4:	fb0c 0c0e 	mla	ip, ip, lr, r0
 80039c8:	f50c 711f 	add.w	r1, ip, #636	; 0x27c
    ep->is_in = 0U;
 80039cc:	eb0e 0cce 	add.w	ip, lr, lr, lsl #3
 80039d0:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 80039d4:	2000      	movs	r0, #0
 80039d6:	f88c 027d 	strb.w	r0, [ip, #637]	; 0x27d
  ep->maxpacket = ep_mps;
 80039da:	608a      	str	r2, [r1, #8]
  if (ep->is_in != 0U)
 80039dc:	784a      	ldrb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80039de:	f881 e000 	strb.w	lr, [r1]
  ep->type = ep_type;
 80039e2:	710b      	strb	r3, [r1, #4]
  if (ep->is_in != 0U)
 80039e4:	b10a      	cbz	r2, 80039ea <HAL_PCD_EP_Open+0x36>
    ep->tx_fifo_num = ep->num;
 80039e6:	f8a1 e01a 	strh.w	lr, [r1, #26]
  if (ep_type == EP_TYPE_BULK)
 80039ea:	2b02      	cmp	r3, #2
 80039ec:	d101      	bne.n	80039f2 <HAL_PCD_EP_Open+0x3e>
    ep->data_pid_start = 0U;
 80039ee:	2300      	movs	r3, #0
 80039f0:	714b      	strb	r3, [r1, #5]
  __HAL_LOCK(hpcd);
 80039f2:	f894 34bc 	ldrb.w	r3, [r4, #1212]	; 0x4bc
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	d018      	beq.n	8003a2c <HAL_PCD_EP_Open+0x78>
 80039fa:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80039fc:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80039fe:	f884 34bc 	strb.w	r3, [r4, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003a02:	f002 feb7 	bl	8006774 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003a06:	2300      	movs	r3, #0
  return ret;
 8003a08:	4618      	mov	r0, r3
  __HAL_UNLOCK(hpcd);
 8003a0a:	f884 34bc 	strb.w	r3, [r4, #1212]	; 0x4bc
}
 8003a0e:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a10:	2024      	movs	r0, #36	; 0x24
    ep->is_in = 1U;
 8003a12:	f04f 0c01 	mov.w	ip, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a16:	fb00 400e 	mla	r0, r0, lr, r4
 8003a1a:	f100 013c 	add.w	r1, r0, #60	; 0x3c
    ep->is_in = 1U;
 8003a1e:	eb0e 00ce 	add.w	r0, lr, lr, lsl #3
 8003a22:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8003a26:	f880 c03d 	strb.w	ip, [r0, #61]	; 0x3d
 8003a2a:	e7d6      	b.n	80039da <HAL_PCD_EP_Open+0x26>
  __HAL_LOCK(hpcd);
 8003a2c:	2002      	movs	r0, #2
}
 8003a2e:	bd10      	pop	{r4, pc}

08003a30 <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80U) == 0x80U)
 8003a30:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003a34:	f001 030f 	and.w	r3, r1, #15
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a38:	f04f 0124 	mov.w	r1, #36	; 0x24
{
 8003a3c:	b510      	push	{r4, lr}
 8003a3e:	4604      	mov	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 8003a40:	d11a      	bne.n	8003a78 <HAL_PCD_EP_Close+0x48>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a42:	fb01 4103 	mla	r1, r1, r3, r4
    ep->is_in = 0U;
 8003a46:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 8003a4a:	2000      	movs	r0, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a4c:	f501 711f 	add.w	r1, r1, #636	; 0x27c
    ep->is_in = 0U;
 8003a50:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8003a54:	f882 027d 	strb.w	r0, [r2, #637]	; 0x27d
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a58:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 8003a5a:	f894 34bc 	ldrb.w	r3, [r4, #1212]	; 0x4bc
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d019      	beq.n	8003a96 <HAL_PCD_EP_Close+0x66>
 8003a62:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003a64:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8003a66:	f884 34bc 	strb.w	r3, [r4, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003a6a:	f002 fecb 	bl	8006804 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003a6e:	2300      	movs	r3, #0
  return HAL_OK;
 8003a70:	4618      	mov	r0, r3
  __HAL_UNLOCK(hpcd);
 8003a72:	f884 34bc 	strb.w	r3, [r4, #1212]	; 0x4bc
}
 8003a76:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a78:	fb01 4103 	mla	r1, r1, r3, r4
    ep->is_in = 1U;
 8003a7c:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 8003a80:	2001      	movs	r0, #1
 8003a82:	eb04 0282 	add.w	r2, r4, r2, lsl #2
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a86:	313c      	adds	r1, #60	; 0x3c
    ep->is_in = 1U;
 8003a88:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a8c:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 8003a8e:	f894 34bc 	ldrb.w	r3, [r4, #1212]	; 0x4bc
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d1e5      	bne.n	8003a62 <HAL_PCD_EP_Close+0x32>
 8003a96:	2002      	movs	r0, #2
}
 8003a98:	bd10      	pop	{r4, pc}
 8003a9a:	bf00      	nop

08003a9c <HAL_PCD_EP_Receive>:
{
 8003a9c:	b508      	push	{r3, lr}
 8003a9e:	f001 0e0f 	and.w	lr, r1, #15
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003aa2:	2124      	movs	r1, #36	; 0x24
  ep->xfer_buff = pBuf;
 8003aa4:	eb0e 0cce 	add.w	ip, lr, lr, lsl #3
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003aa8:	fb01 010e 	mla	r1, r1, lr, r0
  ep->xfer_buff = pBuf;
 8003aac:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ab0:	f501 711f 	add.w	r1, r1, #636	; 0x27c
  ep->xfer_len = len;
 8003ab4:	f8cc 328c 	str.w	r3, [ip, #652]	; 0x28c
  ep->xfer_count = 0U;
 8003ab8:	2300      	movs	r3, #0
  ep->xfer_buff = pBuf;
 8003aba:	f8cc 2288 	str.w	r2, [ip, #648]	; 0x288
  ep->num = ep_addr & EP_ADDR_MSK;
 8003abe:	f88c e27c 	strb.w	lr, [ip, #636]	; 0x27c
  ep->xfer_count = 0U;
 8003ac2:	f8cc 3290 	str.w	r3, [ip, #656]	; 0x290
  ep->is_in = 0U;
 8003ac6:	f88c 327d 	strb.w	r3, [ip, #637]	; 0x27d
  if (hpcd->Init.dma_enable == 1U)
 8003aca:	68c3      	ldr	r3, [r0, #12]
  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003acc:	6800      	ldr	r0, [r0, #0]
  if (hpcd->Init.dma_enable == 1U)
 8003ace:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;
 8003ad0:	bf08      	it	eq
 8003ad2:	f8cc 2298 	streq.w	r2, [ip, #664]	; 0x298
  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003ad6:	b2da      	uxtb	r2, r3
 8003ad8:	f002 fef2 	bl	80068c0 <USB_EPStartXfer>
}
 8003adc:	2000      	movs	r0, #0
 8003ade:	bd08      	pop	{r3, pc}

08003ae0 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003ae0:	f001 010f 	and.w	r1, r1, #15
 8003ae4:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8003ae8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
}
 8003aec:	f8d0 0290 	ldr.w	r0, [r0, #656]	; 0x290
 8003af0:	4770      	bx	lr
 8003af2:	bf00      	nop

08003af4 <HAL_PCD_EP_Transmit>:
{
 8003af4:	b508      	push	{r3, lr}
 8003af6:	f001 0e0f 	and.w	lr, r1, #15
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003afa:	2124      	movs	r1, #36	; 0x24
  ep->xfer_buff = pBuf;
 8003afc:	eb0e 0cce 	add.w	ip, lr, lr, lsl #3
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b00:	fb01 010e 	mla	r1, r1, lr, r0
  ep->xfer_buff = pBuf;
 8003b04:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b08:	313c      	adds	r1, #60	; 0x3c
  ep->xfer_len = len;
 8003b0a:	f8cc 304c 	str.w	r3, [ip, #76]	; 0x4c
  ep->xfer_count = 0U;
 8003b0e:	2300      	movs	r3, #0
  ep->xfer_buff = pBuf;
 8003b10:	f8cc 2048 	str.w	r2, [ip, #72]	; 0x48
  ep->xfer_count = 0U;
 8003b14:	f8cc 3050 	str.w	r3, [ip, #80]	; 0x50
  ep->is_in = 1U;
 8003b18:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b1a:	f88c e03c 	strb.w	lr, [ip, #60]	; 0x3c
  ep->is_in = 1U;
 8003b1e:	f88c 303d 	strb.w	r3, [ip, #61]	; 0x3d
  if (hpcd->Init.dma_enable == 1U)
 8003b22:	68c3      	ldr	r3, [r0, #12]
  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003b24:	6800      	ldr	r0, [r0, #0]
  if (hpcd->Init.dma_enable == 1U)
 8003b26:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;
 8003b28:	bf08      	it	eq
 8003b2a:	f8cc 2058 	streq.w	r2, [ip, #88]	; 0x58
  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003b2e:	b2da      	uxtb	r2, r3
 8003b30:	f002 fec6 	bl	80068c0 <USB_EPStartXfer>
}
 8003b34:	2000      	movs	r0, #0
 8003b36:	bd08      	pop	{r3, pc}

08003b38 <HAL_PCD_EP_SetStall>:
{
 8003b38:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003b3a:	6843      	ldr	r3, [r0, #4]
 8003b3c:	f001 050f 	and.w	r5, r1, #15
 8003b40:	429d      	cmp	r5, r3
 8003b42:	d834      	bhi.n	8003bae <HAL_PCD_EP_SetStall+0x76>
  if ((0x80U & ep_addr) == 0x80U)
 8003b44:	060b      	lsls	r3, r1, #24
 8003b46:	4604      	mov	r4, r0
 8003b48:	d41d      	bmi.n	8003b86 <HAL_PCD_EP_SetStall+0x4e>
    ep = &hpcd->OUT_ep[ep_addr];
 8003b4a:	2224      	movs	r2, #36	; 0x24
    ep->is_in = 0U;
 8003b4c:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
    ep = &hpcd->OUT_ep[ep_addr];
 8003b50:	fb02 0101 	mla	r1, r2, r1, r0
    ep->is_in = 0U;
 8003b54:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8003b58:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 8003b5a:	f501 711f 	add.w	r1, r1, #636	; 0x27c
    ep->is_in = 0U;
 8003b5e:	f883 227d 	strb.w	r2, [r3, #637]	; 0x27d
  ep->is_stall = 1U;
 8003b62:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b64:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 8003b66:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 8003b68:	f894 24bc 	ldrb.w	r2, [r4, #1212]	; 0x4bc
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d01c      	beq.n	8003baa <HAL_PCD_EP_SetStall+0x72>
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003b70:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8003b72:	f884 34bc 	strb.w	r3, [r4, #1212]	; 0x4bc
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003b76:	f003 f865 	bl	8006c44 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003b7a:	b1d5      	cbz	r5, 8003bb2 <HAL_PCD_EP_SetStall+0x7a>
  __HAL_UNLOCK(hpcd);
 8003b7c:	2300      	movs	r3, #0
  return HAL_OK;
 8003b7e:	4618      	mov	r0, r3
  __HAL_UNLOCK(hpcd);
 8003b80:	f884 34bc 	strb.w	r3, [r4, #1212]	; 0x4bc
}
 8003b84:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b86:	2124      	movs	r1, #36	; 0x24
    ep->is_in = 1U;
 8003b88:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
 8003b8c:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b8e:	fb01 0105 	mla	r1, r1, r5, r0
    ep->is_in = 1U;
 8003b92:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b96:	313c      	adds	r1, #60	; 0x3c
    ep->is_in = 1U;
 8003b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  ep->is_stall = 1U;
 8003b9c:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b9e:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 8003ba0:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 8003ba2:	f894 24bc 	ldrb.w	r2, [r4, #1212]	; 0x4bc
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	d1e2      	bne.n	8003b70 <HAL_PCD_EP_SetStall+0x38>
 8003baa:	2002      	movs	r0, #2
}
 8003bac:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8003bae:	2001      	movs	r0, #1
}
 8003bb0:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003bb2:	f204 42c4 	addw	r2, r4, #1220	; 0x4c4
 8003bb6:	7b21      	ldrb	r1, [r4, #12]
 8003bb8:	6820      	ldr	r0, [r4, #0]
 8003bba:	f003 f91d 	bl	8006df8 <USB_EP0_OutStart>
 8003bbe:	e7dd      	b.n	8003b7c <HAL_PCD_EP_SetStall+0x44>

08003bc0 <HAL_PCD_EP_ClrStall>:
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003bc0:	6842      	ldr	r2, [r0, #4]
{
 8003bc2:	b538      	push	{r3, r4, r5, lr}
 8003bc4:	f001 030f 	and.w	r3, r1, #15
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d832      	bhi.n	8003c32 <HAL_PCD_EP_ClrStall+0x72>
  if ((0x80U & ep_addr) == 0x80U)
 8003bcc:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003bd0:	4604      	mov	r4, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003bd2:	f04f 0124 	mov.w	r1, #36	; 0x24
    ep->is_in = 1U;
 8003bd6:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
  if ((0x80U & ep_addr) == 0x80U)
 8003bda:	d119      	bne.n	8003c10 <HAL_PCD_EP_ClrStall+0x50>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003bdc:	fb01 4103 	mla	r1, r1, r3, r4
    ep->is_in = 0U;
 8003be0:	2000      	movs	r0, #0
 8003be2:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  ep->is_stall = 0U;
 8003be6:	2500      	movs	r5, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003be8:	f501 711f 	add.w	r1, r1, #636	; 0x27c
    ep->is_in = 0U;
 8003bec:	f882 027d 	strb.w	r0, [r2, #637]	; 0x27d
  ep->num = ep_addr & EP_ADDR_MSK;
 8003bf0:	700b      	strb	r3, [r1, #0]
  ep->is_stall = 0U;
 8003bf2:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 8003bf4:	f894 34bc 	ldrb.w	r3, [r4, #1212]	; 0x4bc
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d018      	beq.n	8003c2e <HAL_PCD_EP_ClrStall+0x6e>
 8003bfc:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003bfe:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8003c00:	f884 34bc 	strb.w	r3, [r4, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003c04:	f003 f852 	bl	8006cac <USB_EPClearStall>
  return HAL_OK;
 8003c08:	4628      	mov	r0, r5
  __HAL_UNLOCK(hpcd);
 8003c0a:	f884 54bc 	strb.w	r5, [r4, #1212]	; 0x4bc
}
 8003c0e:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c10:	fb01 4103 	mla	r1, r1, r3, r4
    ep->is_in = 1U;
 8003c14:	2001      	movs	r0, #1
 8003c16:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  ep->is_stall = 0U;
 8003c1a:	2500      	movs	r5, #0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c1c:	313c      	adds	r1, #60	; 0x3c
    ep->is_in = 1U;
 8003c1e:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c22:	700b      	strb	r3, [r1, #0]
  ep->is_stall = 0U;
 8003c24:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 8003c26:	f894 34bc 	ldrb.w	r3, [r4, #1212]	; 0x4bc
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	d1e6      	bne.n	8003bfc <HAL_PCD_EP_ClrStall+0x3c>
 8003c2e:	2002      	movs	r0, #2
}
 8003c30:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8003c32:	2001      	movs	r0, #1
}
 8003c34:	bd38      	pop	{r3, r4, r5, pc}
 8003c36:	bf00      	nop

08003c38 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003c38:	b410      	push	{r4}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003c3a:	6804      	ldr	r4, [r0, #0]
 8003c3c:	6a63      	ldr	r3, [r4, #36]	; 0x24

  if (fifo == 0U)
 8003c3e:	b931      	cbnz	r1, 8003c4e <HAL_PCDEx_SetTxFiFo+0x16>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003c40:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
  }

  return HAL_OK;
}
 8003c44:	2000      	movs	r0, #0
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003c46:	62a3      	str	r3, [r4, #40]	; 0x28
}
 8003c48:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003c4c:	4770      	bx	lr
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003c4e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    for (i = 0U; i < (fifo - 1U); i++)
 8003c50:	3901      	subs	r1, #1
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003c52:	eb03 4c10 	add.w	ip, r3, r0, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8003c56:	d00b      	beq.n	8003c70 <HAL_PCDEx_SetTxFiFo+0x38>
 8003c58:	2300      	movs	r3, #0
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003c5a:	f103 0040 	add.w	r0, r3, #64	; 0x40
    for (i = 0U; i < (fifo - 1U); i++)
 8003c5e:	3301      	adds	r3, #1
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003c60:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    for (i = 0U; i < (fifo - 1U); i++)
 8003c64:	b2db      	uxtb	r3, r3
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003c66:	6840      	ldr	r0, [r0, #4]
    for (i = 0U; i < (fifo - 1U); i++)
 8003c68:	428b      	cmp	r3, r1
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003c6a:	eb0c 4c10 	add.w	ip, ip, r0, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8003c6e:	d3f4      	bcc.n	8003c5a <HAL_PCDEx_SetTxFiFo+0x22>
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003c70:	3140      	adds	r1, #64	; 0x40
 8003c72:	ea4c 4202 	orr.w	r2, ip, r2, lsl #16
}
 8003c76:	2000      	movs	r0, #0
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003c78:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8003c7c:	6062      	str	r2, [r4, #4]
}
 8003c7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003c82:	4770      	bx	lr

08003c84 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003c84:	4603      	mov	r3, r0
  hpcd->Instance->GRXFSIZ = size;

  return HAL_OK;
}
 8003c86:	2000      	movs	r0, #0
  hpcd->Instance->GRXFSIZ = size;
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	6259      	str	r1, [r3, #36]	; 0x24
}
 8003c8c:	4770      	bx	lr
 8003c8e:	bf00      	nop

08003c90 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003c90:	4603      	mov	r3, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;

  hpcd->lpm_active = 1U;
  hpcd->LPM_State = LPM_L0;
 8003c92:	f04f 0c00 	mov.w	ip, #0
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003c96:	4909      	ldr	r1, [pc, #36]	; (8003cbc <HAL_PCDEx_ActivateLPM+0x2c>)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c98:	681a      	ldr	r2, [r3, #0]

  return HAL_OK;
}
 8003c9a:	4660      	mov	r0, ip
{
 8003c9c:	b410      	push	{r4}
  hpcd->lpm_active = 1U;
 8003c9e:	2401      	movs	r4, #1
  hpcd->LPM_State = LPM_L0;
 8003ca0:	f883 c4f4 	strb.w	ip, [r3, #1268]	; 0x4f4
  hpcd->lpm_active = 1U;
 8003ca4:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003ca8:	6993      	ldr	r3, [r2, #24]
}
 8003caa:	f85d 4b04 	ldr.w	r4, [sp], #4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003cae:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003cb2:	6193      	str	r3, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003cb4:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8003cb6:	4319      	orrs	r1, r3
 8003cb8:	6551      	str	r1, [r2, #84]	; 0x54
}
 8003cba:	4770      	bx	lr
 8003cbc:	10000003 	.word	0x10000003

08003cc0 <HAL_PCDEx_LPM_Callback>:
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003cc0:	4770      	bx	lr
 8003cc2:	bf00      	nop

08003cc4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003cc4:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003cc6:	4c10      	ldr	r4, [pc, #64]	; (8003d08 <HAL_PWREx_ConfigSupply+0x44>)
 8003cc8:	68e3      	ldr	r3, [r4, #12]
 8003cca:	f013 0f04 	tst.w	r3, #4
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003cce:	68e3      	ldr	r3, [r4, #12]
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003cd0:	d105      	bne.n	8003cde <HAL_PWREx_ConfigSupply+0x1a>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003cd2:	f003 0307 	and.w	r3, r3, #7
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003cd6:	1a18      	subs	r0, r3, r0
 8003cd8:	bf18      	it	ne
 8003cda:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 8003cdc:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003cde:	f023 0307 	bic.w	r3, r3, #7
 8003ce2:	4303      	orrs	r3, r0
 8003ce4:	60e3      	str	r3, [r4, #12]
  tickstart = HAL_GetTick ();
 8003ce6:	f7fd fde7 	bl	80018b8 <HAL_GetTick>
 8003cea:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003cec:	e005      	b.n	8003cfa <HAL_PWREx_ConfigSupply+0x36>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003cee:	f7fd fde3 	bl	80018b8 <HAL_GetTick>
 8003cf2:	1b40      	subs	r0, r0, r5
 8003cf4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003cf8:	d804      	bhi.n	8003d04 <HAL_PWREx_ConfigSupply+0x40>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003cfa:	6863      	ldr	r3, [r4, #4]
 8003cfc:	049b      	lsls	r3, r3, #18
 8003cfe:	d5f6      	bpl.n	8003cee <HAL_PWREx_ConfigSupply+0x2a>
  return HAL_OK;
 8003d00:	2000      	movs	r0, #0
}
 8003d02:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8003d04:	2001      	movs	r0, #1
}
 8003d06:	bd38      	pop	{r3, r4, r5, pc}
 8003d08:	58024800 	.word	0x58024800

08003d0c <HAL_PWREx_EnableUSBVoltageDetector>:
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8003d0c:	4a02      	ldr	r2, [pc, #8]	; (8003d18 <HAL_PWREx_EnableUSBVoltageDetector+0xc>)
 8003d0e:	68d3      	ldr	r3, [r2, #12]
 8003d10:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d14:	60d3      	str	r3, [r2, #12]
}
 8003d16:	4770      	bx	lr
 8003d18:	58024800 	.word	0x58024800

08003d1c <HAL_RCC_GetSysClockFreq.part.0>:
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003d1c:	4b3c      	ldr	r3, [pc, #240]	; (8003e10 <HAL_RCC_GetSysClockFreq.part.0+0xf4>)
uint32_t HAL_RCC_GetSysClockFreq(void)
 8003d1e:	b430      	push	{r4, r5}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003d20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003d22:	6a9c      	ldr	r4, [r3, #40]	; 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003d24:	6add      	ldr	r5, [r3, #44]	; 0x2c
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));

      if (pllm != 0U)
 8003d26:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003d2a:	6b59      	ldr	r1, [r3, #52]	; 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003d2c:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
 8003d30:	d038      	beq.n	8003da4 <HAL_RCC_GetSysClockFreq.part.0+0x88>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003d32:	f3c1 01cc 	ubfx	r1, r1, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003d36:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003d3a:	f002 0203 	and.w	r2, r2, #3
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003d3e:	fb05 f101 	mul.w	r1, r5, r1
 8003d42:	2a01      	cmp	r2, #1
 8003d44:	ee07 1a90 	vmov	s15, r1
 8003d48:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
      {
        switch (pllsource)
 8003d4c:	d002      	beq.n	8003d54 <HAL_RCC_GetSysClockFreq.part.0+0x38>
 8003d4e:	2a02      	cmp	r2, #2
 8003d50:	d050      	beq.n	8003df4 <HAL_RCC_GetSysClockFreq.part.0+0xd8>
 8003d52:	b34a      	cbz	r2, 8003da8 <HAL_RCC_GetSysClockFreq.part.0+0x8c>
          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            break;

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003d54:	ee07 0a90 	vmov	s15, r0
 8003d58:	ed9f 5a2e 	vldr	s10, [pc, #184]	; 8003e14 <HAL_RCC_GetSysClockFreq.part.0+0xf8>
 8003d5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d62:	eec5 6a27 	vdiv.f32	s13, s10, s15
 8003d66:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 8003e18 <HAL_RCC_GetSysClockFreq.part.0+0xfc>
 8003d6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d6e:	ee07 3a90 	vmov	s15, r3
 8003d72:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8003d76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d7a:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8003d7e:	eee7 7a06 	vfma.f32	s15, s14, s12
 8003d82:	ee66 6aa7 	vmul.f32	s13, s13, s15
            break;
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003d86:	4b22      	ldr	r3, [pc, #136]	; (8003e10 <HAL_RCC_GetSysClockFreq.part.0+0xf4>)
 8003d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d8a:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8003d8e:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003d90:	ee07 3a90 	vmov	s15, r3
 8003d94:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003d98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003da0:	ee17 0a90 	vmov	r0, s15
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
 8003da4:	bc30      	pop	{r4, r5}
 8003da6:	4770      	bx	lr
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	0692      	lsls	r2, r2, #26
 8003dac:	d529      	bpl.n	8003e02 <HAL_RCC_GetSysClockFreq.part.0+0xe6>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003dae:	6819      	ldr	r1, [r3, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003db0:	ee07 0a90 	vmov	s15, r0
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003db4:	4a19      	ldr	r2, [pc, #100]	; (8003e1c <HAL_RCC_GetSysClockFreq.part.0+0x100>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003db6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003dbc:	f3c1 01c1 	ubfx	r1, r1, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003dc0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003dc4:	ed9f 5a14 	vldr	s10, [pc, #80]	; 8003e18 <HAL_RCC_GetSysClockFreq.part.0+0xfc>
 8003dc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003dcc:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003dce:	ee06 3a10 	vmov	s12, r3
 8003dd2:	ee05 2a90 	vmov	s11, r2
 8003dd6:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8003dda:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8003dde:	ee36 6a26 	vadd.f32	s12, s12, s13
 8003de2:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 8003de6:	eef0 7a46 	vmov.f32	s15, s12
 8003dea:	eee7 7a05 	vfma.f32	s15, s14, s10
 8003dee:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003df2:	e7c8      	b.n	8003d86 <HAL_RCC_GetSysClockFreq.part.0+0x6a>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003df4:	ee07 0a90 	vmov	s15, r0
 8003df8:	ed9f 5a09 	vldr	s10, [pc, #36]	; 8003e20 <HAL_RCC_GetSysClockFreq.part.0+0x104>
 8003dfc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e00:	e7ae      	b.n	8003d60 <HAL_RCC_GetSysClockFreq.part.0+0x44>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003e02:	ee07 0a90 	vmov	s15, r0
 8003e06:	ed9f 5a07 	vldr	s10, [pc, #28]	; 8003e24 <HAL_RCC_GetSysClockFreq.part.0+0x108>
 8003e0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e0e:	e7a7      	b.n	8003d60 <HAL_RCC_GetSysClockFreq.part.0+0x44>
 8003e10:	58024400 	.word	0x58024400
 8003e14:	4a742400 	.word	0x4a742400
 8003e18:	39000000 	.word	0x39000000
 8003e1c:	03d09000 	.word	0x03d09000
 8003e20:	4bbebc20 	.word	0x4bbebc20
 8003e24:	4c742400 	.word	0x4c742400

08003e28 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8003e28:	2800      	cmp	r0, #0
 8003e2a:	f000 81bd 	beq.w	80041a8 <HAL_RCC_OscConfig+0x380>
{
 8003e2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e30:	6803      	ldr	r3, [r0, #0]
 8003e32:	4604      	mov	r4, r0
 8003e34:	07d9      	lsls	r1, r3, #31
 8003e36:	d52e      	bpl.n	8003e96 <HAL_RCC_OscConfig+0x6e>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e38:	4993      	ldr	r1, [pc, #588]	; (8004088 <HAL_RCC_OscConfig+0x260>)
 8003e3a:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003e3c:	6a89      	ldr	r1, [r1, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e3e:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003e42:	2a10      	cmp	r2, #16
 8003e44:	f000 80f0 	beq.w	8004028 <HAL_RCC_OscConfig+0x200>
 8003e48:	2a18      	cmp	r2, #24
 8003e4a:	f000 80e8 	beq.w	800401e <HAL_RCC_OscConfig+0x1f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e4e:	6863      	ldr	r3, [r4, #4]
 8003e50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e54:	f000 8108 	beq.w	8004068 <HAL_RCC_OscConfig+0x240>
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	f000 8146 	beq.w	80040ea <HAL_RCC_OscConfig+0x2c2>
 8003e5e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e62:	4b89      	ldr	r3, [pc, #548]	; (8004088 <HAL_RCC_OscConfig+0x260>)
 8003e64:	681a      	ldr	r2, [r3, #0]
 8003e66:	f000 8254 	beq.w	8004312 <HAL_RCC_OscConfig+0x4ea>
 8003e6a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003e6e:	601a      	str	r2, [r3, #0]
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003e76:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003e78:	f7fd fd1e 	bl	80018b8 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003e7c:	4e82      	ldr	r6, [pc, #520]	; (8004088 <HAL_RCC_OscConfig+0x260>)
        tickstart = HAL_GetTick();
 8003e7e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003e80:	e005      	b.n	8003e8e <HAL_RCC_OscConfig+0x66>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e82:	f7fd fd19 	bl	80018b8 <HAL_GetTick>
 8003e86:	1b40      	subs	r0, r0, r5
 8003e88:	2864      	cmp	r0, #100	; 0x64
 8003e8a:	f200 812c 	bhi.w	80040e6 <HAL_RCC_OscConfig+0x2be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003e8e:	6833      	ldr	r3, [r6, #0]
 8003e90:	039b      	lsls	r3, r3, #14
 8003e92:	d5f6      	bpl.n	8003e82 <HAL_RCC_OscConfig+0x5a>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e94:	6823      	ldr	r3, [r4, #0]
 8003e96:	079d      	lsls	r5, r3, #30
 8003e98:	d47e      	bmi.n	8003f98 <HAL_RCC_OscConfig+0x170>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003e9a:	06d9      	lsls	r1, r3, #27
 8003e9c:	d528      	bpl.n	8003ef0 <HAL_RCC_OscConfig+0xc8>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e9e:	497a      	ldr	r1, [pc, #488]	; (8004088 <HAL_RCC_OscConfig+0x260>)
 8003ea0:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003ea2:	6a89      	ldr	r1, [r1, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ea4:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003ea8:	2a08      	cmp	r2, #8
 8003eaa:	f000 80cd 	beq.w	8004048 <HAL_RCC_OscConfig+0x220>
 8003eae:	2a18      	cmp	r2, #24
 8003eb0:	f000 80c5 	beq.w	800403e <HAL_RCC_OscConfig+0x216>
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003eb4:	69e3      	ldr	r3, [r4, #28]
        __HAL_RCC_CSI_ENABLE();
 8003eb6:	4d74      	ldr	r5, [pc, #464]	; (8004088 <HAL_RCC_OscConfig+0x260>)
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	f000 814e 	beq.w	800415a <HAL_RCC_OscConfig+0x332>
        __HAL_RCC_CSI_ENABLE();
 8003ebe:	682b      	ldr	r3, [r5, #0]
 8003ec0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ec4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003ec6:	f7fd fcf7 	bl	80018b8 <HAL_GetTick>
 8003eca:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003ecc:	e005      	b.n	8003eda <HAL_RCC_OscConfig+0xb2>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003ece:	f7fd fcf3 	bl	80018b8 <HAL_GetTick>
 8003ed2:	1b80      	subs	r0, r0, r6
 8003ed4:	2802      	cmp	r0, #2
 8003ed6:	f200 8106 	bhi.w	80040e6 <HAL_RCC_OscConfig+0x2be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003eda:	682b      	ldr	r3, [r5, #0]
 8003edc:	05db      	lsls	r3, r3, #23
 8003ede:	d5f6      	bpl.n	8003ece <HAL_RCC_OscConfig+0xa6>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003ee0:	68eb      	ldr	r3, [r5, #12]
 8003ee2:	6a22      	ldr	r2, [r4, #32]
 8003ee4:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8003ee8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003eec:	60eb      	str	r3, [r5, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003eee:	6823      	ldr	r3, [r4, #0]
 8003ef0:	071d      	lsls	r5, r3, #28
 8003ef2:	d516      	bpl.n	8003f22 <HAL_RCC_OscConfig+0xfa>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003ef4:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 8003ef6:	4d64      	ldr	r5, [pc, #400]	; (8004088 <HAL_RCC_OscConfig+0x260>)
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	f000 810c 	beq.w	8004116 <HAL_RCC_OscConfig+0x2ee>
      __HAL_RCC_LSI_ENABLE();
 8003efe:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8003f00:	f043 0301 	orr.w	r3, r3, #1
 8003f04:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8003f06:	f7fd fcd7 	bl	80018b8 <HAL_GetTick>
 8003f0a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003f0c:	e005      	b.n	8003f1a <HAL_RCC_OscConfig+0xf2>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f0e:	f7fd fcd3 	bl	80018b8 <HAL_GetTick>
 8003f12:	1b80      	subs	r0, r0, r6
 8003f14:	2802      	cmp	r0, #2
 8003f16:	f200 80e6 	bhi.w	80040e6 <HAL_RCC_OscConfig+0x2be>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003f1a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8003f1c:	0798      	lsls	r0, r3, #30
 8003f1e:	d5f6      	bpl.n	8003f0e <HAL_RCC_OscConfig+0xe6>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003f20:	6823      	ldr	r3, [r4, #0]
 8003f22:	069a      	lsls	r2, r3, #26
 8003f24:	d516      	bpl.n	8003f54 <HAL_RCC_OscConfig+0x12c>
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003f26:	69a3      	ldr	r3, [r4, #24]
      __HAL_RCC_HSI48_ENABLE();
 8003f28:	4d57      	ldr	r5, [pc, #348]	; (8004088 <HAL_RCC_OscConfig+0x260>)
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	f000 8104 	beq.w	8004138 <HAL_RCC_OscConfig+0x310>
      __HAL_RCC_HSI48_ENABLE();
 8003f30:	682b      	ldr	r3, [r5, #0]
 8003f32:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003f36:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8003f38:	f7fd fcbe 	bl	80018b8 <HAL_GetTick>
 8003f3c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003f3e:	e005      	b.n	8003f4c <HAL_RCC_OscConfig+0x124>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003f40:	f7fd fcba 	bl	80018b8 <HAL_GetTick>
 8003f44:	1b80      	subs	r0, r0, r6
 8003f46:	2802      	cmp	r0, #2
 8003f48:	f200 80cd 	bhi.w	80040e6 <HAL_RCC_OscConfig+0x2be>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003f4c:	682b      	ldr	r3, [r5, #0]
 8003f4e:	049f      	lsls	r7, r3, #18
 8003f50:	d5f6      	bpl.n	8003f40 <HAL_RCC_OscConfig+0x118>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f52:	6823      	ldr	r3, [r4, #0]
 8003f54:	0759      	lsls	r1, r3, #29
 8003f56:	f100 808d 	bmi.w	8004074 <HAL_RCC_OscConfig+0x24c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f5a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003f5c:	b1d0      	cbz	r0, 8003f94 <HAL_RCC_OscConfig+0x16c>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003f5e:	4d4a      	ldr	r5, [pc, #296]	; (8004088 <HAL_RCC_OscConfig+0x260>)
 8003f60:	692b      	ldr	r3, [r5, #16]
 8003f62:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003f66:	2b18      	cmp	r3, #24
 8003f68:	f000 8185 	beq.w	8004276 <HAL_RCC_OscConfig+0x44e>
        __HAL_RCC_PLL_DISABLE();
 8003f6c:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f6e:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8003f70:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f74:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f76:	f000 8119 	beq.w	80041ac <HAL_RCC_OscConfig+0x384>
        tickstart = HAL_GetTick();
 8003f7a:	f7fd fc9d 	bl	80018b8 <HAL_GetTick>
 8003f7e:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003f80:	e005      	b.n	8003f8e <HAL_RCC_OscConfig+0x166>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f82:	f7fd fc99 	bl	80018b8 <HAL_GetTick>
 8003f86:	1b00      	subs	r0, r0, r4
 8003f88:	2802      	cmp	r0, #2
 8003f8a:	f200 80ac 	bhi.w	80040e6 <HAL_RCC_OscConfig+0x2be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003f8e:	682b      	ldr	r3, [r5, #0]
 8003f90:	019b      	lsls	r3, r3, #6
 8003f92:	d4f6      	bmi.n	8003f82 <HAL_RCC_OscConfig+0x15a>
  return HAL_OK;
 8003f94:	2000      	movs	r0, #0
}
 8003f96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f98:	4a3b      	ldr	r2, [pc, #236]	; (8004088 <HAL_RCC_OscConfig+0x260>)
 8003f9a:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003f9c:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003f9e:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 8003fa2:	d122      	bne.n	8003fea <HAL_RCC_OscConfig+0x1c2>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003fa4:	4b38      	ldr	r3, [pc, #224]	; (8004088 <HAL_RCC_OscConfig+0x260>)
 8003fa6:	68e2      	ldr	r2, [r4, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	0759      	lsls	r1, r3, #29
 8003fac:	d501      	bpl.n	8003fb2 <HAL_RCC_OscConfig+0x18a>
 8003fae:	2a00      	cmp	r2, #0
 8003fb0:	d043      	beq.n	800403a <HAL_RCC_OscConfig+0x212>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003fb2:	4d35      	ldr	r5, [pc, #212]	; (8004088 <HAL_RCC_OscConfig+0x260>)
 8003fb4:	682b      	ldr	r3, [r5, #0]
 8003fb6:	f023 0319 	bic.w	r3, r3, #25
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003fbe:	f7fd fc7b 	bl	80018b8 <HAL_GetTick>
 8003fc2:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003fc4:	e005      	b.n	8003fd2 <HAL_RCC_OscConfig+0x1aa>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fc6:	f7fd fc77 	bl	80018b8 <HAL_GetTick>
 8003fca:	1b80      	subs	r0, r0, r6
 8003fcc:	2802      	cmp	r0, #2
 8003fce:	f200 808a 	bhi.w	80040e6 <HAL_RCC_OscConfig+0x2be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003fd2:	682b      	ldr	r3, [r5, #0]
 8003fd4:	075b      	lsls	r3, r3, #29
 8003fd6:	d5f6      	bpl.n	8003fc6 <HAL_RCC_OscConfig+0x19e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fd8:	686b      	ldr	r3, [r5, #4]
 8003fda:	6922      	ldr	r2, [r4, #16]
 8003fdc:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003fe0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003fe4:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003fe6:	6823      	ldr	r3, [r4, #0]
 8003fe8:	e757      	b.n	8003e9a <HAL_RCC_OscConfig+0x72>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003fea:	2b18      	cmp	r3, #24
 8003fec:	f000 80d8 	beq.w	80041a0 <HAL_RCC_OscConfig+0x378>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003ff0:	4d25      	ldr	r5, [pc, #148]	; (8004088 <HAL_RCC_OscConfig+0x260>)
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003ff2:	68e2      	ldr	r2, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003ff4:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003ff6:	2a00      	cmp	r2, #0
 8003ff8:	f000 80c1 	beq.w	800417e <HAL_RCC_OscConfig+0x356>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003ffc:	f023 0319 	bic.w	r3, r3, #25
 8004000:	4313      	orrs	r3, r2
 8004002:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004004:	f7fd fc58 	bl	80018b8 <HAL_GetTick>
 8004008:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800400a:	e004      	b.n	8004016 <HAL_RCC_OscConfig+0x1ee>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800400c:	f7fd fc54 	bl	80018b8 <HAL_GetTick>
 8004010:	1b80      	subs	r0, r0, r6
 8004012:	2802      	cmp	r0, #2
 8004014:	d867      	bhi.n	80040e6 <HAL_RCC_OscConfig+0x2be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004016:	682b      	ldr	r3, [r5, #0]
 8004018:	075f      	lsls	r7, r3, #29
 800401a:	d5f7      	bpl.n	800400c <HAL_RCC_OscConfig+0x1e4>
 800401c:	e7dc      	b.n	8003fd8 <HAL_RCC_OscConfig+0x1b0>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800401e:	f001 0103 	and.w	r1, r1, #3
 8004022:	2902      	cmp	r1, #2
 8004024:	f47f af13 	bne.w	8003e4e <HAL_RCC_OscConfig+0x26>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004028:	4a17      	ldr	r2, [pc, #92]	; (8004088 <HAL_RCC_OscConfig+0x260>)
 800402a:	6812      	ldr	r2, [r2, #0]
 800402c:	0392      	lsls	r2, r2, #14
 800402e:	f57f af32 	bpl.w	8003e96 <HAL_RCC_OscConfig+0x6e>
 8004032:	6862      	ldr	r2, [r4, #4]
 8004034:	2a00      	cmp	r2, #0
 8004036:	f47f af2e 	bne.w	8003e96 <HAL_RCC_OscConfig+0x6e>
        return HAL_ERROR;
 800403a:	2001      	movs	r0, #1
}
 800403c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800403e:	f001 0103 	and.w	r1, r1, #3
 8004042:	2901      	cmp	r1, #1
 8004044:	f47f af36 	bne.w	8003eb4 <HAL_RCC_OscConfig+0x8c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004048:	4a0f      	ldr	r2, [pc, #60]	; (8004088 <HAL_RCC_OscConfig+0x260>)
 800404a:	6812      	ldr	r2, [r2, #0]
 800404c:	05d2      	lsls	r2, r2, #23
 800404e:	d502      	bpl.n	8004056 <HAL_RCC_OscConfig+0x22e>
 8004050:	69e2      	ldr	r2, [r4, #28]
 8004052:	2a80      	cmp	r2, #128	; 0x80
 8004054:	d1f1      	bne.n	800403a <HAL_RCC_OscConfig+0x212>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004056:	490c      	ldr	r1, [pc, #48]	; (8004088 <HAL_RCC_OscConfig+0x260>)
 8004058:	6a20      	ldr	r0, [r4, #32]
 800405a:	68ca      	ldr	r2, [r1, #12]
 800405c:	f022 527c 	bic.w	r2, r2, #1056964608	; 0x3f000000
 8004060:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8004064:	60ca      	str	r2, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004066:	e743      	b.n	8003ef0 <HAL_RCC_OscConfig+0xc8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004068:	4a07      	ldr	r2, [pc, #28]	; (8004088 <HAL_RCC_OscConfig+0x260>)
 800406a:	6813      	ldr	r3, [r2, #0]
 800406c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004070:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004072:	e701      	b.n	8003e78 <HAL_RCC_OscConfig+0x50>
    PWR->CR1 |= PWR_CR1_DBP;
 8004074:	4d05      	ldr	r5, [pc, #20]	; (800408c <HAL_RCC_OscConfig+0x264>)
 8004076:	682b      	ldr	r3, [r5, #0]
 8004078:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800407c:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 800407e:	f7fd fc1b 	bl	80018b8 <HAL_GetTick>
 8004082:	4606      	mov	r6, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004084:	e009      	b.n	800409a <HAL_RCC_OscConfig+0x272>
 8004086:	bf00      	nop
 8004088:	58024400 	.word	0x58024400
 800408c:	58024800 	.word	0x58024800
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004090:	f7fd fc12 	bl	80018b8 <HAL_GetTick>
 8004094:	1b80      	subs	r0, r0, r6
 8004096:	2864      	cmp	r0, #100	; 0x64
 8004098:	d825      	bhi.n	80040e6 <HAL_RCC_OscConfig+0x2be>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800409a:	682b      	ldr	r3, [r5, #0]
 800409c:	05da      	lsls	r2, r3, #23
 800409e:	d5f7      	bpl.n	8004090 <HAL_RCC_OscConfig+0x268>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040a0:	68a3      	ldr	r3, [r4, #8]
 80040a2:	2b01      	cmp	r3, #1
 80040a4:	f000 815c 	beq.w	8004360 <HAL_RCC_OscConfig+0x538>
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	f000 813a 	beq.w	8004322 <HAL_RCC_OscConfig+0x4fa>
 80040ae:	2b05      	cmp	r3, #5
 80040b0:	4ba8      	ldr	r3, [pc, #672]	; (8004354 <HAL_RCC_OscConfig+0x52c>)
 80040b2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80040b4:	f000 815a 	beq.w	800436c <HAL_RCC_OscConfig+0x544>
 80040b8:	f022 0201 	bic.w	r2, r2, #1
 80040bc:	671a      	str	r2, [r3, #112]	; 0x70
 80040be:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80040c0:	f022 0204 	bic.w	r2, r2, #4
 80040c4:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 80040c6:	f7fd fbf7 	bl	80018b8 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80040ca:	4ea2      	ldr	r6, [pc, #648]	; (8004354 <HAL_RCC_OscConfig+0x52c>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040cc:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80040d0:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80040d2:	e004      	b.n	80040de <HAL_RCC_OscConfig+0x2b6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040d4:	f7fd fbf0 	bl	80018b8 <HAL_GetTick>
 80040d8:	1b40      	subs	r0, r0, r5
 80040da:	42b8      	cmp	r0, r7
 80040dc:	d803      	bhi.n	80040e6 <HAL_RCC_OscConfig+0x2be>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80040de:	6f33      	ldr	r3, [r6, #112]	; 0x70
 80040e0:	079b      	lsls	r3, r3, #30
 80040e2:	d5f7      	bpl.n	80040d4 <HAL_RCC_OscConfig+0x2ac>
 80040e4:	e739      	b.n	8003f5a <HAL_RCC_OscConfig+0x132>
            return HAL_TIMEOUT;
 80040e6:	2003      	movs	r0, #3
}
 80040e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040ea:	4d9a      	ldr	r5, [pc, #616]	; (8004354 <HAL_RCC_OscConfig+0x52c>)
 80040ec:	682b      	ldr	r3, [r5, #0]
 80040ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040f2:	602b      	str	r3, [r5, #0]
 80040f4:	682b      	ldr	r3, [r5, #0]
 80040f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040fa:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80040fc:	f7fd fbdc 	bl	80018b8 <HAL_GetTick>
 8004100:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004102:	e004      	b.n	800410e <HAL_RCC_OscConfig+0x2e6>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004104:	f7fd fbd8 	bl	80018b8 <HAL_GetTick>
 8004108:	1b80      	subs	r0, r0, r6
 800410a:	2864      	cmp	r0, #100	; 0x64
 800410c:	d8eb      	bhi.n	80040e6 <HAL_RCC_OscConfig+0x2be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800410e:	682b      	ldr	r3, [r5, #0]
 8004110:	039f      	lsls	r7, r3, #14
 8004112:	d4f7      	bmi.n	8004104 <HAL_RCC_OscConfig+0x2dc>
 8004114:	e6be      	b.n	8003e94 <HAL_RCC_OscConfig+0x6c>
      __HAL_RCC_LSI_DISABLE();
 8004116:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8004118:	f023 0301 	bic.w	r3, r3, #1
 800411c:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 800411e:	f7fd fbcb 	bl	80018b8 <HAL_GetTick>
 8004122:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004124:	e004      	b.n	8004130 <HAL_RCC_OscConfig+0x308>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004126:	f7fd fbc7 	bl	80018b8 <HAL_GetTick>
 800412a:	1b80      	subs	r0, r0, r6
 800412c:	2802      	cmp	r0, #2
 800412e:	d8da      	bhi.n	80040e6 <HAL_RCC_OscConfig+0x2be>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004130:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8004132:	0799      	lsls	r1, r3, #30
 8004134:	d4f7      	bmi.n	8004126 <HAL_RCC_OscConfig+0x2fe>
 8004136:	e6f3      	b.n	8003f20 <HAL_RCC_OscConfig+0xf8>
      __HAL_RCC_HSI48_DISABLE();
 8004138:	682b      	ldr	r3, [r5, #0]
 800413a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800413e:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8004140:	f7fd fbba 	bl	80018b8 <HAL_GetTick>
 8004144:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004146:	e004      	b.n	8004152 <HAL_RCC_OscConfig+0x32a>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004148:	f7fd fbb6 	bl	80018b8 <HAL_GetTick>
 800414c:	1b80      	subs	r0, r0, r6
 800414e:	2802      	cmp	r0, #2
 8004150:	d8c9      	bhi.n	80040e6 <HAL_RCC_OscConfig+0x2be>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004152:	682b      	ldr	r3, [r5, #0]
 8004154:	0498      	lsls	r0, r3, #18
 8004156:	d4f7      	bmi.n	8004148 <HAL_RCC_OscConfig+0x320>
 8004158:	e6fb      	b.n	8003f52 <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_CSI_DISABLE();
 800415a:	682b      	ldr	r3, [r5, #0]
 800415c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004160:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004162:	f7fd fba9 	bl	80018b8 <HAL_GetTick>
 8004166:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004168:	e004      	b.n	8004174 <HAL_RCC_OscConfig+0x34c>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800416a:	f7fd fba5 	bl	80018b8 <HAL_GetTick>
 800416e:	1b80      	subs	r0, r0, r6
 8004170:	2802      	cmp	r0, #2
 8004172:	d8b8      	bhi.n	80040e6 <HAL_RCC_OscConfig+0x2be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004174:	682b      	ldr	r3, [r5, #0]
 8004176:	05df      	lsls	r7, r3, #23
 8004178:	d4f7      	bmi.n	800416a <HAL_RCC_OscConfig+0x342>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800417a:	6823      	ldr	r3, [r4, #0]
 800417c:	e6b8      	b.n	8003ef0 <HAL_RCC_OscConfig+0xc8>
        __HAL_RCC_HSI_DISABLE();
 800417e:	f023 0301 	bic.w	r3, r3, #1
 8004182:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004184:	f7fd fb98 	bl	80018b8 <HAL_GetTick>
 8004188:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800418a:	e004      	b.n	8004196 <HAL_RCC_OscConfig+0x36e>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800418c:	f7fd fb94 	bl	80018b8 <HAL_GetTick>
 8004190:	1b80      	subs	r0, r0, r6
 8004192:	2802      	cmp	r0, #2
 8004194:	d8a7      	bhi.n	80040e6 <HAL_RCC_OscConfig+0x2be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004196:	682b      	ldr	r3, [r5, #0]
 8004198:	0758      	lsls	r0, r3, #29
 800419a:	d4f7      	bmi.n	800418c <HAL_RCC_OscConfig+0x364>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800419c:	6823      	ldr	r3, [r4, #0]
 800419e:	e67c      	b.n	8003e9a <HAL_RCC_OscConfig+0x72>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80041a0:	0790      	lsls	r0, r2, #30
 80041a2:	f47f af25 	bne.w	8003ff0 <HAL_RCC_OscConfig+0x1c8>
 80041a6:	e6fd      	b.n	8003fa4 <HAL_RCC_OscConfig+0x17c>
    return HAL_ERROR;
 80041a8:	2001      	movs	r0, #1
}
 80041aa:	4770      	bx	lr
        tickstart = HAL_GetTick();
 80041ac:	f7fd fb84 	bl	80018b8 <HAL_GetTick>
 80041b0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80041b2:	e004      	b.n	80041be <HAL_RCC_OscConfig+0x396>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041b4:	f7fd fb80 	bl	80018b8 <HAL_GetTick>
 80041b8:	1b80      	subs	r0, r0, r6
 80041ba:	2802      	cmp	r0, #2
 80041bc:	d893      	bhi.n	80040e6 <HAL_RCC_OscConfig+0x2be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80041be:	682b      	ldr	r3, [r5, #0]
 80041c0:	0199      	lsls	r1, r3, #6
 80041c2:	d4f7      	bmi.n	80041b4 <HAL_RCC_OscConfig+0x38c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80041c4:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 80041c6:	4b64      	ldr	r3, [pc, #400]	; (8004358 <HAL_RCC_OscConfig+0x530>)
 80041c8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80041ca:	400b      	ands	r3, r1
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80041cc:	4963      	ldr	r1, [pc, #396]	; (800435c <HAL_RCC_OscConfig+0x534>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80041ce:	4e61      	ldr	r6, [pc, #388]	; (8004354 <HAL_RCC_OscConfig+0x52c>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80041d0:	4313      	orrs	r3, r2
 80041d2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80041d4:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80041d8:	62ab      	str	r3, [r5, #40]	; 0x28
 80041da:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	; 0x34
 80041de:	3b01      	subs	r3, #1
 80041e0:	3a01      	subs	r2, #1
 80041e2:	025b      	lsls	r3, r3, #9
 80041e4:	0412      	lsls	r2, r2, #16
 80041e6:	b29b      	uxth	r3, r3
 80041e8:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80041ec:	4313      	orrs	r3, r2
 80041ee:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80041f0:	3a01      	subs	r2, #1
 80041f2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80041f6:	4313      	orrs	r3, r2
 80041f8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80041fa:	3a01      	subs	r2, #1
 80041fc:	0612      	lsls	r2, r2, #24
 80041fe:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8004202:	4313      	orrs	r3, r2
 8004204:	632b      	str	r3, [r5, #48]	; 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
 8004206:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004208:	f023 0301 	bic.w	r3, r3, #1
 800420c:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800420e:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8004210:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8004212:	4011      	ands	r1, r2
 8004214:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 8004218:	6369      	str	r1, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800421a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800421c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800421e:	f023 030c 	bic.w	r3, r3, #12
 8004222:	4313      	orrs	r3, r2
 8004224:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004226:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004228:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800422a:	f023 0302 	bic.w	r3, r3, #2
 800422e:	4313      	orrs	r3, r2
 8004230:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004232:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004234:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004238:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800423a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800423c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004240:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004242:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004244:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004248:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
 800424a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800424c:	f043 0301 	orr.w	r3, r3, #1
 8004250:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 8004252:	682b      	ldr	r3, [r5, #0]
 8004254:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004258:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800425a:	f7fd fb2d 	bl	80018b8 <HAL_GetTick>
 800425e:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004260:	e005      	b.n	800426e <HAL_RCC_OscConfig+0x446>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004262:	f7fd fb29 	bl	80018b8 <HAL_GetTick>
 8004266:	1b00      	subs	r0, r0, r4
 8004268:	2802      	cmp	r0, #2
 800426a:	f63f af3c 	bhi.w	80040e6 <HAL_RCC_OscConfig+0x2be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800426e:	6833      	ldr	r3, [r6, #0]
 8004270:	019a      	lsls	r2, r3, #6
 8004272:	d5f6      	bpl.n	8004262 <HAL_RCC_OscConfig+0x43a>
 8004274:	e68e      	b.n	8003f94 <HAL_RCC_OscConfig+0x16c>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004276:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004278:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 800427a:	6b2e      	ldr	r6, [r5, #48]	; 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800427c:	f43f ae8b 	beq.w	8003f96 <HAL_RCC_OscConfig+0x16e>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004280:	f002 0303 	and.w	r3, r2, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004284:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8004286:	428b      	cmp	r3, r1
 8004288:	f47f aed7 	bne.w	800403a <HAL_RCC_OscConfig+0x212>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800428c:	f3c2 1205 	ubfx	r2, r2, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004290:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004292:	429a      	cmp	r2, r3
 8004294:	f47f aed1 	bne.w	800403a <HAL_RCC_OscConfig+0x212>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004298:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800429a:	f3c6 0208 	ubfx	r2, r6, #0, #9
 800429e:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80042a0:	429a      	cmp	r2, r3
 80042a2:	f47f aeca 	bne.w	800403a <HAL_RCC_OscConfig+0x212>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80042a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80042a8:	f3c6 2246 	ubfx	r2, r6, #9, #7
 80042ac:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80042ae:	429a      	cmp	r2, r3
 80042b0:	f47f aec3 	bne.w	800403a <HAL_RCC_OscConfig+0x212>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80042b4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80042b6:	f3c6 4206 	ubfx	r2, r6, #16, #7
 80042ba:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80042bc:	429a      	cmp	r2, r3
 80042be:	f47f aebc 	bne.w	800403a <HAL_RCC_OscConfig+0x212>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80042c2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80042c4:	f3c6 6606 	ubfx	r6, r6, #24, #7
 80042c8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80042ca:	429e      	cmp	r6, r3
 80042cc:	f47f aeb5 	bne.w	800403a <HAL_RCC_OscConfig+0x212>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80042d0:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80042d2:	6ca2      	ldr	r2, [r4, #72]	; 0x48
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80042d4:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80042d8:	429a      	cmp	r2, r3
 80042da:	f43f ae5b 	beq.w	8003f94 <HAL_RCC_OscConfig+0x16c>
          __HAL_RCC_PLLFRACN_DISABLE();
 80042de:	4a1d      	ldr	r2, [pc, #116]	; (8004354 <HAL_RCC_OscConfig+0x52c>)
 80042e0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80042e2:	f023 0301 	bic.w	r3, r3, #1
 80042e6:	62d3      	str	r3, [r2, #44]	; 0x2c
          tickstart = HAL_GetTick();
 80042e8:	f7fd fae6 	bl	80018b8 <HAL_GetTick>
 80042ec:	4605      	mov	r5, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80042ee:	f7fd fae3 	bl	80018b8 <HAL_GetTick>
 80042f2:	42a8      	cmp	r0, r5
 80042f4:	d0fb      	beq.n	80042ee <HAL_RCC_OscConfig+0x4c6>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80042f6:	4a17      	ldr	r2, [pc, #92]	; (8004354 <HAL_RCC_OscConfig+0x52c>)
  return HAL_OK;
 80042f8:	2000      	movs	r0, #0
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80042fa:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80042fc:	4b17      	ldr	r3, [pc, #92]	; (800435c <HAL_RCC_OscConfig+0x534>)
 80042fe:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8004300:	4023      	ands	r3, r4
 8004302:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004306:	6353      	str	r3, [r2, #52]	; 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
 8004308:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800430a:	f043 0301 	orr.w	r3, r3, #1
 800430e:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8004310:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004312:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004316:	601a      	str	r2, [r3, #0]
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800431e:	601a      	str	r2, [r3, #0]
 8004320:	e5aa      	b.n	8003e78 <HAL_RCC_OscConfig+0x50>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004322:	4d0c      	ldr	r5, [pc, #48]	; (8004354 <HAL_RCC_OscConfig+0x52c>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004324:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004328:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800432a:	f023 0301 	bic.w	r3, r3, #1
 800432e:	672b      	str	r3, [r5, #112]	; 0x70
 8004330:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8004332:	f023 0304 	bic.w	r3, r3, #4
 8004336:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8004338:	f7fd fabe 	bl	80018b8 <HAL_GetTick>
 800433c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800433e:	e005      	b.n	800434c <HAL_RCC_OscConfig+0x524>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004340:	f7fd faba 	bl	80018b8 <HAL_GetTick>
 8004344:	1b80      	subs	r0, r0, r6
 8004346:	42b8      	cmp	r0, r7
 8004348:	f63f aecd 	bhi.w	80040e6 <HAL_RCC_OscConfig+0x2be>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800434c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800434e:	0798      	lsls	r0, r3, #30
 8004350:	d4f6      	bmi.n	8004340 <HAL_RCC_OscConfig+0x518>
 8004352:	e602      	b.n	8003f5a <HAL_RCC_OscConfig+0x132>
 8004354:	58024400 	.word	0x58024400
 8004358:	fffffc0c 	.word	0xfffffc0c
 800435c:	ffff0007 	.word	0xffff0007
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004360:	4a06      	ldr	r2, [pc, #24]	; (800437c <HAL_RCC_OscConfig+0x554>)
 8004362:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8004364:	f043 0301 	orr.w	r3, r3, #1
 8004368:	6713      	str	r3, [r2, #112]	; 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800436a:	e6ac      	b.n	80040c6 <HAL_RCC_OscConfig+0x29e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800436c:	f042 0204 	orr.w	r2, r2, #4
 8004370:	671a      	str	r2, [r3, #112]	; 0x70
 8004372:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004374:	f042 0201 	orr.w	r2, r2, #1
 8004378:	671a      	str	r2, [r3, #112]	; 0x70
 800437a:	e6a4      	b.n	80040c6 <HAL_RCC_OscConfig+0x29e>
 800437c:	58024400 	.word	0x58024400

08004380 <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004380:	4a48      	ldr	r2, [pc, #288]	; (80044a4 <HAL_RCC_GetSysClockFreq+0x124>)
 8004382:	6913      	ldr	r3, [r2, #16]
 8004384:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004388:	2b10      	cmp	r3, #16
 800438a:	d004      	beq.n	8004396 <HAL_RCC_GetSysClockFreq+0x16>
 800438c:	2b18      	cmp	r3, #24
 800438e:	d00d      	beq.n	80043ac <HAL_RCC_GetSysClockFreq+0x2c>
 8004390:	b11b      	cbz	r3, 800439a <HAL_RCC_GetSysClockFreq+0x1a>
      sysclockfreq = CSI_VALUE;
 8004392:	4845      	ldr	r0, [pc, #276]	; (80044a8 <HAL_RCC_GetSysClockFreq+0x128>)
 8004394:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004396:	4845      	ldr	r0, [pc, #276]	; (80044ac <HAL_RCC_GetSysClockFreq+0x12c>)
 8004398:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800439a:	6813      	ldr	r3, [r2, #0]
 800439c:	0699      	lsls	r1, r3, #26
 800439e:	d54a      	bpl.n	8004436 <HAL_RCC_GetSysClockFreq+0xb6>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80043a0:	6813      	ldr	r3, [r2, #0]
 80043a2:	4843      	ldr	r0, [pc, #268]	; (80044b0 <HAL_RCC_GetSysClockFreq+0x130>)
 80043a4:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80043a8:	40d8      	lsrs	r0, r3
 80043aa:	4770      	bx	lr
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80043ac:	6a93      	ldr	r3, [r2, #40]	; 0x28
{
 80043ae:	b430      	push	{r4, r5}
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80043b0:	6a94      	ldr	r4, [r2, #40]	; 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80043b2:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
      if (pllm != 0U)
 80043b4:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80043b8:	6b51      	ldr	r1, [r2, #52]	; 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80043ba:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
 80043be:	d038      	beq.n	8004432 <HAL_RCC_GetSysClockFreq+0xb2>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80043c0:	f3c1 01cc 	ubfx	r1, r1, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80043c4:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80043c8:	f003 0303 	and.w	r3, r3, #3
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80043cc:	fb05 f101 	mul.w	r1, r5, r1
 80043d0:	2b01      	cmp	r3, #1
 80043d2:	ee07 1a90 	vmov	s15, r1
 80043d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
        switch (pllsource)
 80043da:	d002      	beq.n	80043e2 <HAL_RCC_GetSysClockFreq+0x62>
 80043dc:	2b02      	cmp	r3, #2
 80043de:	d02c      	beq.n	800443a <HAL_RCC_GetSysClockFreq+0xba>
 80043e0:	b393      	cbz	r3, 8004448 <HAL_RCC_GetSysClockFreq+0xc8>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80043e2:	ee07 0a90 	vmov	s15, r0
 80043e6:	ed9f 5a33 	vldr	s10, [pc, #204]	; 80044b4 <HAL_RCC_GetSysClockFreq+0x134>
 80043ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80043ee:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80043f0:	eec5 6a27 	vdiv.f32	s13, s10, s15
 80043f4:	ed9f 6a30 	vldr	s12, [pc, #192]	; 80044b8 <HAL_RCC_GetSysClockFreq+0x138>
 80043f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043fc:	ee07 3a90 	vmov	s15, r3
 8004400:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8004404:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004408:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800440c:	eee7 7a06 	vfma.f32	s15, s14, s12
 8004410:	ee66 6aa7 	vmul.f32	s13, s13, s15
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004414:	4b23      	ldr	r3, [pc, #140]	; (80044a4 <HAL_RCC_GetSysClockFreq+0x124>)
 8004416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004418:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800441c:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800441e:	ee07 3a90 	vmov	s15, r3
 8004422:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004426:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800442a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800442e:	ee17 0a90 	vmov	r0, s15
}
 8004432:	bc30      	pop	{r4, r5}
 8004434:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004436:	481e      	ldr	r0, [pc, #120]	; (80044b0 <HAL_RCC_GetSysClockFreq+0x130>)
}
 8004438:	4770      	bx	lr
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800443a:	ee07 0a90 	vmov	s15, r0
 800443e:	ed9f 5a1f 	vldr	s10, [pc, #124]	; 80044bc <HAL_RCC_GetSysClockFreq+0x13c>
 8004442:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004446:	e7d2      	b.n	80043ee <HAL_RCC_GetSysClockFreq+0x6e>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004448:	6813      	ldr	r3, [r2, #0]
 800444a:	069b      	lsls	r3, r3, #26
 800444c:	d522      	bpl.n	8004494 <HAL_RCC_GetSysClockFreq+0x114>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800444e:	6814      	ldr	r4, [r2, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004450:	ee07 0a90 	vmov	s15, r0
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004454:	4916      	ldr	r1, [pc, #88]	; (80044b0 <HAL_RCC_GetSysClockFreq+0x130>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004456:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800445a:	6b13      	ldr	r3, [r2, #48]	; 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800445c:	f3c4 04c1 	ubfx	r4, r4, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004460:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004464:	ed9f 5a14 	vldr	s10, [pc, #80]	; 80044b8 <HAL_RCC_GetSysClockFreq+0x138>
 8004468:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800446c:	40e1      	lsrs	r1, r4
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800446e:	ee06 3a10 	vmov	s12, r3
 8004472:	ee05 1a90 	vmov	s11, r1
 8004476:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800447a:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800447e:	ee36 6a26 	vadd.f32	s12, s12, s13
 8004482:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 8004486:	eef0 7a46 	vmov.f32	s15, s12
 800448a:	eee7 7a05 	vfma.f32	s15, s14, s10
 800448e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004492:	e7bf      	b.n	8004414 <HAL_RCC_GetSysClockFreq+0x94>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004494:	ee07 0a90 	vmov	s15, r0
 8004498:	ed9f 5a09 	vldr	s10, [pc, #36]	; 80044c0 <HAL_RCC_GetSysClockFreq+0x140>
 800449c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80044a0:	e7a5      	b.n	80043ee <HAL_RCC_GetSysClockFreq+0x6e>
 80044a2:	bf00      	nop
 80044a4:	58024400 	.word	0x58024400
 80044a8:	003d0900 	.word	0x003d0900
 80044ac:	017d7840 	.word	0x017d7840
 80044b0:	03d09000 	.word	0x03d09000
 80044b4:	4a742400 	.word	0x4a742400
 80044b8:	39000000 	.word	0x39000000
 80044bc:	4bbebc20 	.word	0x4bbebc20
 80044c0:	4c742400 	.word	0x4c742400

080044c4 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80044c4:	2800      	cmp	r0, #0
 80044c6:	f000 810c 	beq.w	80046e2 <HAL_RCC_ClockConfig+0x21e>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80044ca:	4a8c      	ldr	r2, [pc, #560]	; (80046fc <HAL_RCC_ClockConfig+0x238>)
 80044cc:	6813      	ldr	r3, [r2, #0]
 80044ce:	f003 030f 	and.w	r3, r3, #15
 80044d2:	428b      	cmp	r3, r1
{
 80044d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044d8:	4604      	mov	r4, r0
 80044da:	460d      	mov	r5, r1
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80044dc:	d20c      	bcs.n	80044f8 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044de:	6813      	ldr	r3, [r2, #0]
 80044e0:	f023 030f 	bic.w	r3, r3, #15
 80044e4:	430b      	orrs	r3, r1
 80044e6:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044e8:	6813      	ldr	r3, [r2, #0]
 80044ea:	f003 030f 	and.w	r3, r3, #15
 80044ee:	428b      	cmp	r3, r1
 80044f0:	d002      	beq.n	80044f8 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 80044f2:	2001      	movs	r0, #1
}
 80044f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80044f8:	6823      	ldr	r3, [r4, #0]
 80044fa:	075f      	lsls	r7, r3, #29
 80044fc:	d50b      	bpl.n	8004516 <HAL_RCC_ClockConfig+0x52>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80044fe:	4980      	ldr	r1, [pc, #512]	; (8004700 <HAL_RCC_ClockConfig+0x23c>)
 8004500:	6920      	ldr	r0, [r4, #16]
 8004502:	698a      	ldr	r2, [r1, #24]
 8004504:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8004508:	4290      	cmp	r0, r2
 800450a:	d904      	bls.n	8004516 <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800450c:	698a      	ldr	r2, [r1, #24]
 800450e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004512:	4302      	orrs	r2, r0
 8004514:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004516:	071e      	lsls	r6, r3, #28
 8004518:	d50b      	bpl.n	8004532 <HAL_RCC_ClockConfig+0x6e>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800451a:	4979      	ldr	r1, [pc, #484]	; (8004700 <HAL_RCC_ClockConfig+0x23c>)
 800451c:	6960      	ldr	r0, [r4, #20]
 800451e:	69ca      	ldr	r2, [r1, #28]
 8004520:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8004524:	4290      	cmp	r0, r2
 8004526:	d904      	bls.n	8004532 <HAL_RCC_ClockConfig+0x6e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004528:	69ca      	ldr	r2, [r1, #28]
 800452a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800452e:	4302      	orrs	r2, r0
 8004530:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004532:	06d8      	lsls	r0, r3, #27
 8004534:	d50b      	bpl.n	800454e <HAL_RCC_ClockConfig+0x8a>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004536:	4972      	ldr	r1, [pc, #456]	; (8004700 <HAL_RCC_ClockConfig+0x23c>)
 8004538:	69a0      	ldr	r0, [r4, #24]
 800453a:	69ca      	ldr	r2, [r1, #28]
 800453c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8004540:	4290      	cmp	r0, r2
 8004542:	d904      	bls.n	800454e <HAL_RCC_ClockConfig+0x8a>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004544:	69ca      	ldr	r2, [r1, #28]
 8004546:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800454a:	4302      	orrs	r2, r0
 800454c:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800454e:	0699      	lsls	r1, r3, #26
 8004550:	d50b      	bpl.n	800456a <HAL_RCC_ClockConfig+0xa6>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004552:	496b      	ldr	r1, [pc, #428]	; (8004700 <HAL_RCC_ClockConfig+0x23c>)
 8004554:	69e0      	ldr	r0, [r4, #28]
 8004556:	6a0a      	ldr	r2, [r1, #32]
 8004558:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800455c:	4290      	cmp	r0, r2
 800455e:	d904      	bls.n	800456a <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004560:	6a0a      	ldr	r2, [r1, #32]
 8004562:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004566:	4302      	orrs	r2, r0
 8004568:	620a      	str	r2, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800456a:	079a      	lsls	r2, r3, #30
 800456c:	f140 80ab 	bpl.w	80046c6 <HAL_RCC_ClockConfig+0x202>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004570:	4863      	ldr	r0, [pc, #396]	; (8004700 <HAL_RCC_ClockConfig+0x23c>)
 8004572:	68e1      	ldr	r1, [r4, #12]
 8004574:	6982      	ldr	r2, [r0, #24]
 8004576:	f002 020f 	and.w	r2, r2, #15
 800457a:	4291      	cmp	r1, r2
 800457c:	d904      	bls.n	8004588 <HAL_RCC_ClockConfig+0xc4>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800457e:	6982      	ldr	r2, [r0, #24]
 8004580:	f022 020f 	bic.w	r2, r2, #15
 8004584:	430a      	orrs	r2, r1
 8004586:	6182      	str	r2, [r0, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004588:	07d8      	lsls	r0, r3, #31
 800458a:	d530      	bpl.n	80045ee <HAL_RCC_ClockConfig+0x12a>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800458c:	4a5c      	ldr	r2, [pc, #368]	; (8004700 <HAL_RCC_ClockConfig+0x23c>)
 800458e:	68a1      	ldr	r1, [r4, #8]
 8004590:	6993      	ldr	r3, [r2, #24]
 8004592:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004596:	430b      	orrs	r3, r1
 8004598:	6193      	str	r3, [r2, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800459a:	6861      	ldr	r1, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800459c:	6813      	ldr	r3, [r2, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800459e:	2902      	cmp	r1, #2
 80045a0:	f000 80a1 	beq.w	80046e6 <HAL_RCC_ClockConfig+0x222>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80045a4:	2903      	cmp	r1, #3
 80045a6:	f000 8098 	beq.w	80046da <HAL_RCC_ClockConfig+0x216>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80045aa:	2901      	cmp	r1, #1
 80045ac:	f000 80a1 	beq.w	80046f2 <HAL_RCC_ClockConfig+0x22e>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80045b0:	0758      	lsls	r0, r3, #29
 80045b2:	d59e      	bpl.n	80044f2 <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80045b4:	4e52      	ldr	r6, [pc, #328]	; (8004700 <HAL_RCC_ClockConfig+0x23c>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045b6:	f241 3888 	movw	r8, #5000	; 0x1388
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80045ba:	6933      	ldr	r3, [r6, #16]
 80045bc:	f023 0307 	bic.w	r3, r3, #7
 80045c0:	430b      	orrs	r3, r1
 80045c2:	6133      	str	r3, [r6, #16]
    tickstart = HAL_GetTick();
 80045c4:	f7fd f978 	bl	80018b8 <HAL_GetTick>
 80045c8:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045ca:	e005      	b.n	80045d8 <HAL_RCC_ClockConfig+0x114>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045cc:	f7fd f974 	bl	80018b8 <HAL_GetTick>
 80045d0:	1bc0      	subs	r0, r0, r7
 80045d2:	4540      	cmp	r0, r8
 80045d4:	f200 808b 	bhi.w	80046ee <HAL_RCC_ClockConfig+0x22a>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045d8:	6933      	ldr	r3, [r6, #16]
 80045da:	6862      	ldr	r2, [r4, #4]
 80045dc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80045e0:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 80045e4:	d1f2      	bne.n	80045cc <HAL_RCC_ClockConfig+0x108>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045e6:	6823      	ldr	r3, [r4, #0]
 80045e8:	0799      	lsls	r1, r3, #30
 80045ea:	d506      	bpl.n	80045fa <HAL_RCC_ClockConfig+0x136>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80045ec:	68e1      	ldr	r1, [r4, #12]
 80045ee:	4844      	ldr	r0, [pc, #272]	; (8004700 <HAL_RCC_ClockConfig+0x23c>)
 80045f0:	6982      	ldr	r2, [r0, #24]
 80045f2:	f002 020f 	and.w	r2, r2, #15
 80045f6:	428a      	cmp	r2, r1
 80045f8:	d869      	bhi.n	80046ce <HAL_RCC_ClockConfig+0x20a>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80045fa:	4940      	ldr	r1, [pc, #256]	; (80046fc <HAL_RCC_ClockConfig+0x238>)
 80045fc:	680a      	ldr	r2, [r1, #0]
 80045fe:	f002 020f 	and.w	r2, r2, #15
 8004602:	42aa      	cmp	r2, r5
 8004604:	d90a      	bls.n	800461c <HAL_RCC_ClockConfig+0x158>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004606:	680a      	ldr	r2, [r1, #0]
 8004608:	f022 020f 	bic.w	r2, r2, #15
 800460c:	432a      	orrs	r2, r5
 800460e:	600a      	str	r2, [r1, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004610:	680a      	ldr	r2, [r1, #0]
 8004612:	f002 020f 	and.w	r2, r2, #15
 8004616:	42aa      	cmp	r2, r5
 8004618:	f47f af6b 	bne.w	80044f2 <HAL_RCC_ClockConfig+0x2e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800461c:	075a      	lsls	r2, r3, #29
 800461e:	d50b      	bpl.n	8004638 <HAL_RCC_ClockConfig+0x174>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004620:	4937      	ldr	r1, [pc, #220]	; (8004700 <HAL_RCC_ClockConfig+0x23c>)
 8004622:	6920      	ldr	r0, [r4, #16]
 8004624:	698a      	ldr	r2, [r1, #24]
 8004626:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800462a:	4290      	cmp	r0, r2
 800462c:	d204      	bcs.n	8004638 <HAL_RCC_ClockConfig+0x174>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800462e:	698a      	ldr	r2, [r1, #24]
 8004630:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004634:	4302      	orrs	r2, r0
 8004636:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004638:	071f      	lsls	r7, r3, #28
 800463a:	d50b      	bpl.n	8004654 <HAL_RCC_ClockConfig+0x190>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800463c:	4930      	ldr	r1, [pc, #192]	; (8004700 <HAL_RCC_ClockConfig+0x23c>)
 800463e:	6960      	ldr	r0, [r4, #20]
 8004640:	69ca      	ldr	r2, [r1, #28]
 8004642:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8004646:	4290      	cmp	r0, r2
 8004648:	d204      	bcs.n	8004654 <HAL_RCC_ClockConfig+0x190>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800464a:	69ca      	ldr	r2, [r1, #28]
 800464c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004650:	4302      	orrs	r2, r0
 8004652:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004654:	06de      	lsls	r6, r3, #27
 8004656:	d50b      	bpl.n	8004670 <HAL_RCC_ClockConfig+0x1ac>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004658:	4929      	ldr	r1, [pc, #164]	; (8004700 <HAL_RCC_ClockConfig+0x23c>)
 800465a:	69a0      	ldr	r0, [r4, #24]
 800465c:	69ca      	ldr	r2, [r1, #28]
 800465e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8004662:	4290      	cmp	r0, r2
 8004664:	d204      	bcs.n	8004670 <HAL_RCC_ClockConfig+0x1ac>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004666:	69ca      	ldr	r2, [r1, #28]
 8004668:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800466c:	4302      	orrs	r2, r0
 800466e:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004670:	069d      	lsls	r5, r3, #26
 8004672:	d50b      	bpl.n	800468c <HAL_RCC_ClockConfig+0x1c8>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004674:	4a22      	ldr	r2, [pc, #136]	; (8004700 <HAL_RCC_ClockConfig+0x23c>)
 8004676:	69e1      	ldr	r1, [r4, #28]
 8004678:	6a13      	ldr	r3, [r2, #32]
 800467a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800467e:	4299      	cmp	r1, r3
 8004680:	d204      	bcs.n	800468c <HAL_RCC_ClockConfig+0x1c8>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004682:	6a13      	ldr	r3, [r2, #32]
 8004684:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004688:	430b      	orrs	r3, r1
 800468a:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800468c:	f7ff fe78 	bl	8004380 <HAL_RCC_GetSysClockFreq>
 8004690:	4a1b      	ldr	r2, [pc, #108]	; (8004700 <HAL_RCC_ClockConfig+0x23c>)
 8004692:	4603      	mov	r3, r0
 8004694:	481b      	ldr	r0, [pc, #108]	; (8004704 <HAL_RCC_ClockConfig+0x240>)
 8004696:	6991      	ldr	r1, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004698:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800469a:	f3c1 2103 	ubfx	r1, r1, #8, #4
  SystemCoreClock = common_system_clock;
 800469e:	4d1a      	ldr	r5, [pc, #104]	; (8004708 <HAL_RCC_ClockConfig+0x244>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80046a0:	f002 020f 	and.w	r2, r2, #15
 80046a4:	4c19      	ldr	r4, [pc, #100]	; (800470c <HAL_RCC_ClockConfig+0x248>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80046a6:	5c41      	ldrb	r1, [r0, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80046a8:	5c82      	ldrb	r2, [r0, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80046aa:	f001 011f 	and.w	r1, r1, #31
  halstatus = HAL_InitTick(uwTickPrio);
 80046ae:	4818      	ldr	r0, [pc, #96]	; (8004710 <HAL_RCC_ClockConfig+0x24c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80046b0:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80046b4:	40cb      	lsrs	r3, r1
  halstatus = HAL_InitTick(uwTickPrio);
 80046b6:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = common_system_clock;
 80046b8:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80046ba:	40d3      	lsrs	r3, r2
 80046bc:	6023      	str	r3, [r4, #0]
}
 80046be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
 80046c2:	f7fd b897 	b.w	80017f4 <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046c6:	07da      	lsls	r2, r3, #31
 80046c8:	f53f af60 	bmi.w	800458c <HAL_RCC_ClockConfig+0xc8>
 80046cc:	e795      	b.n	80045fa <HAL_RCC_ClockConfig+0x136>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046ce:	6982      	ldr	r2, [r0, #24]
 80046d0:	f022 020f 	bic.w	r2, r2, #15
 80046d4:	430a      	orrs	r2, r1
 80046d6:	6182      	str	r2, [r0, #24]
 80046d8:	e78f      	b.n	80045fa <HAL_RCC_ClockConfig+0x136>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80046da:	019f      	lsls	r7, r3, #6
 80046dc:	f53f af6a 	bmi.w	80045b4 <HAL_RCC_ClockConfig+0xf0>
 80046e0:	e707      	b.n	80044f2 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 80046e2:	2001      	movs	r0, #1
}
 80046e4:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80046e6:	039b      	lsls	r3, r3, #14
 80046e8:	f53f af64 	bmi.w	80045b4 <HAL_RCC_ClockConfig+0xf0>
 80046ec:	e701      	b.n	80044f2 <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 80046ee:	2003      	movs	r0, #3
 80046f0:	e700      	b.n	80044f4 <HAL_RCC_ClockConfig+0x30>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80046f2:	05de      	lsls	r6, r3, #23
 80046f4:	f53f af5e 	bmi.w	80045b4 <HAL_RCC_ClockConfig+0xf0>
 80046f8:	e6fb      	b.n	80044f2 <HAL_RCC_ClockConfig+0x2e>
 80046fa:	bf00      	nop
 80046fc:	52002000 	.word	0x52002000
 8004700:	58024400 	.word	0x58024400
 8004704:	0800ca70 	.word	0x0800ca70
 8004708:	24000100 	.word	0x24000100
 800470c:	24000104 	.word	0x24000104
 8004710:	24006530 	.word	0x24006530

08004714 <HAL_RCC_GetHCLKFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004714:	4a18      	ldr	r2, [pc, #96]	; (8004778 <HAL_RCC_GetHCLKFreq+0x64>)
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004716:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004718:	6913      	ldr	r3, [r2, #16]
 800471a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800471e:	2b10      	cmp	r3, #16
 8004720:	d01a      	beq.n	8004758 <HAL_RCC_GetHCLKFreq+0x44>
 8004722:	2b18      	cmp	r3, #24
 8004724:	d023      	beq.n	800476e <HAL_RCC_GetHCLKFreq+0x5a>
 8004726:	b1cb      	cbz	r3, 800475c <HAL_RCC_GetHCLKFreq+0x48>
      sysclockfreq = CSI_VALUE;
 8004728:	4814      	ldr	r0, [pc, #80]	; (800477c <HAL_RCC_GetHCLKFreq+0x68>)
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800472a:	4b13      	ldr	r3, [pc, #76]	; (8004778 <HAL_RCC_GetHCLKFreq+0x64>)
 800472c:	4914      	ldr	r1, [pc, #80]	; (8004780 <HAL_RCC_GetHCLKFreq+0x6c>)
 800472e:	699a      	ldr	r2, [r3, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004730:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004732:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004736:	4c13      	ldr	r4, [pc, #76]	; (8004784 <HAL_RCC_GetHCLKFreq+0x70>)
 8004738:	f003 030f 	and.w	r3, r3, #15
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800473c:	4d12      	ldr	r5, [pc, #72]	; (8004788 <HAL_RCC_GetHCLKFreq+0x74>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800473e:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004740:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004742:	f002 021f 	and.w	r2, r2, #31
 8004746:	fa20 f202 	lsr.w	r2, r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800474a:	f003 001f 	and.w	r0, r3, #31
 800474e:	fa22 f000 	lsr.w	r0, r2, r0
  SystemCoreClock = common_system_clock;
 8004752:	602a      	str	r2, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004754:	6020      	str	r0, [r4, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 8004756:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004758:	480c      	ldr	r0, [pc, #48]	; (800478c <HAL_RCC_GetHCLKFreq+0x78>)
 800475a:	e7e6      	b.n	800472a <HAL_RCC_GetHCLKFreq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800475c:	6813      	ldr	r3, [r2, #0]
 800475e:	069b      	lsls	r3, r3, #26
 8004760:	d508      	bpl.n	8004774 <HAL_RCC_GetHCLKFreq+0x60>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004762:	6813      	ldr	r3, [r2, #0]
 8004764:	480a      	ldr	r0, [pc, #40]	; (8004790 <HAL_RCC_GetHCLKFreq+0x7c>)
 8004766:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800476a:	40d8      	lsrs	r0, r3
 800476c:	e7dd      	b.n	800472a <HAL_RCC_GetHCLKFreq+0x16>
 800476e:	f7ff fad5 	bl	8003d1c <HAL_RCC_GetSysClockFreq.part.0>
 8004772:	e7da      	b.n	800472a <HAL_RCC_GetHCLKFreq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004774:	4806      	ldr	r0, [pc, #24]	; (8004790 <HAL_RCC_GetHCLKFreq+0x7c>)
 8004776:	e7d8      	b.n	800472a <HAL_RCC_GetHCLKFreq+0x16>
 8004778:	58024400 	.word	0x58024400
 800477c:	003d0900 	.word	0x003d0900
 8004780:	0800ca70 	.word	0x0800ca70
 8004784:	24000104 	.word	0x24000104
 8004788:	24000100 	.word	0x24000100
 800478c:	017d7840 	.word	0x017d7840
 8004790:	03d09000 	.word	0x03d09000

08004794 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004796:	4c3a      	ldr	r4, [pc, #232]	; (8004880 <RCCEx_PLL2_Config+0xec>)
 8004798:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800479a:	f003 0303 	and.w	r3, r3, #3
 800479e:	2b03      	cmp	r3, #3
 80047a0:	d067      	beq.n	8004872 <RCCEx_PLL2_Config+0xde>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80047a2:	6823      	ldr	r3, [r4, #0]
 80047a4:	4606      	mov	r6, r0
 80047a6:	460f      	mov	r7, r1
 80047a8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80047ac:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047ae:	f7fd f883 	bl	80018b8 <HAL_GetTick>
 80047b2:	4605      	mov	r5, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80047b4:	e004      	b.n	80047c0 <RCCEx_PLL2_Config+0x2c>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80047b6:	f7fd f87f 	bl	80018b8 <HAL_GetTick>
 80047ba:	1b43      	subs	r3, r0, r5
 80047bc:	2b02      	cmp	r3, #2
 80047be:	d856      	bhi.n	800486e <RCCEx_PLL2_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80047c0:	6823      	ldr	r3, [r4, #0]
 80047c2:	011a      	lsls	r2, r3, #4
 80047c4:	d4f7      	bmi.n	80047b6 <RCCEx_PLL2_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80047c6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80047c8:	6832      	ldr	r2, [r6, #0]
 80047ca:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80047ce:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 80047d2:	62a3      	str	r3, [r4, #40]	; 0x28
 80047d4:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 80047d8:	3b01      	subs	r3, #1
 80047da:	3a01      	subs	r2, #1
 80047dc:	025b      	lsls	r3, r3, #9
 80047de:	0412      	lsls	r2, r2, #16
 80047e0:	b29b      	uxth	r3, r3
 80047e2:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80047e6:	4313      	orrs	r3, r2
 80047e8:	6872      	ldr	r2, [r6, #4]
 80047ea:	3a01      	subs	r2, #1
 80047ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80047f0:	4313      	orrs	r3, r2
 80047f2:	6932      	ldr	r2, [r6, #16]
 80047f4:	3a01      	subs	r2, #1
 80047f6:	0612      	lsls	r2, r2, #24
 80047f8:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80047fc:	4313      	orrs	r3, r2
 80047fe:	63a3      	str	r3, [r4, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004800:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004802:	6972      	ldr	r2, [r6, #20]
 8004804:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004808:	4313      	orrs	r3, r2
 800480a:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800480c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800480e:	69b3      	ldr	r3, [r6, #24]
 8004810:	f022 0220 	bic.w	r2, r2, #32
 8004814:	431a      	orrs	r2, r3

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004816:	4b1b      	ldr	r3, [pc, #108]	; (8004884 <RCCEx_PLL2_Config+0xf0>)
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004818:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 800481a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800481c:	f022 0210 	bic.w	r2, r2, #16
 8004820:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004822:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8004824:	69f2      	ldr	r2, [r6, #28]
 8004826:	400b      	ands	r3, r1
 8004828:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800482c:	63e3      	str	r3, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800482e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004830:	f043 0310 	orr.w	r3, r3, #16
 8004834:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004836:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 8004838:	b1ef      	cbz	r7, 8004876 <RCCEx_PLL2_Config+0xe2>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800483a:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800483c:	bf0c      	ite	eq
 800483e:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004842:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 8004846:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004848:	4c0d      	ldr	r4, [pc, #52]	; (8004880 <RCCEx_PLL2_Config+0xec>)
 800484a:	6823      	ldr	r3, [r4, #0]
 800484c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004850:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004852:	f7fd f831 	bl	80018b8 <HAL_GetTick>
 8004856:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004858:	e004      	b.n	8004864 <RCCEx_PLL2_Config+0xd0>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800485a:	f7fd f82d 	bl	80018b8 <HAL_GetTick>
 800485e:	1b40      	subs	r0, r0, r5
 8004860:	2802      	cmp	r0, #2
 8004862:	d804      	bhi.n	800486e <RCCEx_PLL2_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004864:	6823      	ldr	r3, [r4, #0]
 8004866:	011b      	lsls	r3, r3, #4
 8004868:	d5f7      	bpl.n	800485a <RCCEx_PLL2_Config+0xc6>
    }

  }


  return status;
 800486a:	2000      	movs	r0, #0
}
 800486c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 800486e:	2003      	movs	r0, #3
}
 8004870:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8004872:	2001      	movs	r0, #1
}
 8004874:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004876:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800487a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800487c:	e7e4      	b.n	8004848 <RCCEx_PLL2_Config+0xb4>
 800487e:	bf00      	nop
 8004880:	58024400 	.word	0x58024400
 8004884:	ffff0007 	.word	0xffff0007

08004888 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800488a:	4c3a      	ldr	r4, [pc, #232]	; (8004974 <RCCEx_PLL3_Config+0xec>)
 800488c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800488e:	f003 0303 	and.w	r3, r3, #3
 8004892:	2b03      	cmp	r3, #3
 8004894:	d067      	beq.n	8004966 <RCCEx_PLL3_Config+0xde>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004896:	6823      	ldr	r3, [r4, #0]
 8004898:	4606      	mov	r6, r0
 800489a:	460f      	mov	r7, r1
 800489c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048a0:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048a2:	f7fd f809 	bl	80018b8 <HAL_GetTick>
 80048a6:	4605      	mov	r5, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80048a8:	e004      	b.n	80048b4 <RCCEx_PLL3_Config+0x2c>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80048aa:	f7fd f805 	bl	80018b8 <HAL_GetTick>
 80048ae:	1b43      	subs	r3, r0, r5
 80048b0:	2b02      	cmp	r3, #2
 80048b2:	d856      	bhi.n	8004962 <RCCEx_PLL3_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80048b4:	6823      	ldr	r3, [r4, #0]
 80048b6:	009a      	lsls	r2, r3, #2
 80048b8:	d4f7      	bmi.n	80048aa <RCCEx_PLL3_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80048ba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80048bc:	6832      	ldr	r2, [r6, #0]
 80048be:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 80048c2:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 80048c6:	62a3      	str	r3, [r4, #40]	; 0x28
 80048c8:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 80048cc:	3b01      	subs	r3, #1
 80048ce:	3a01      	subs	r2, #1
 80048d0:	025b      	lsls	r3, r3, #9
 80048d2:	0412      	lsls	r2, r2, #16
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80048da:	4313      	orrs	r3, r2
 80048dc:	6872      	ldr	r2, [r6, #4]
 80048de:	3a01      	subs	r2, #1
 80048e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80048e4:	4313      	orrs	r3, r2
 80048e6:	6932      	ldr	r2, [r6, #16]
 80048e8:	3a01      	subs	r2, #1
 80048ea:	0612      	lsls	r2, r2, #24
 80048ec:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80048f0:	4313      	orrs	r3, r2
 80048f2:	6423      	str	r3, [r4, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80048f4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80048f6:	6972      	ldr	r2, [r6, #20]
 80048f8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80048fc:	4313      	orrs	r3, r2
 80048fe:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004900:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004902:	69b3      	ldr	r3, [r6, #24]
 8004904:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004908:	431a      	orrs	r2, r3

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800490a:	4b1b      	ldr	r3, [pc, #108]	; (8004978 <RCCEx_PLL3_Config+0xf0>)
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800490c:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 800490e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004910:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004914:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004916:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8004918:	69f2      	ldr	r2, [r6, #28]
 800491a:	400b      	ands	r3, r1
 800491c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8004920:	6463      	str	r3, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004922:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004924:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004928:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800492a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 800492c:	b1ef      	cbz	r7, 800496a <RCCEx_PLL3_Config+0xe2>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800492e:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004930:	bf0c      	ite	eq
 8004932:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004936:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 800493a:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800493c:	4c0d      	ldr	r4, [pc, #52]	; (8004974 <RCCEx_PLL3_Config+0xec>)
 800493e:	6823      	ldr	r3, [r4, #0]
 8004940:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004944:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004946:	f7fc ffb7 	bl	80018b8 <HAL_GetTick>
 800494a:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800494c:	e004      	b.n	8004958 <RCCEx_PLL3_Config+0xd0>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800494e:	f7fc ffb3 	bl	80018b8 <HAL_GetTick>
 8004952:	1b40      	subs	r0, r0, r5
 8004954:	2802      	cmp	r0, #2
 8004956:	d804      	bhi.n	8004962 <RCCEx_PLL3_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004958:	6823      	ldr	r3, [r4, #0]
 800495a:	009b      	lsls	r3, r3, #2
 800495c:	d5f7      	bpl.n	800494e <RCCEx_PLL3_Config+0xc6>
    }

  }


  return status;
 800495e:	2000      	movs	r0, #0
}
 8004960:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8004962:	2003      	movs	r0, #3
}
 8004964:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8004966:	2001      	movs	r0, #1
}
 8004968:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800496a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800496e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004970:	e7e4      	b.n	800493c <RCCEx_PLL3_Config+0xb4>
 8004972:	bf00      	nop
 8004974:	58024400 	.word	0x58024400
 8004978:	ffff0007 	.word	0xffff0007

0800497c <HAL_RCCEx_PeriphCLKConfig>:
{
 800497c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004980:	e9d0 3200 	ldrd	r3, r2, [r0]
{
 8004984:	4604      	mov	r4, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004986:	0118      	lsls	r0, r3, #4
 8004988:	f003 6600 	and.w	r6, r3, #134217728	; 0x8000000
 800498c:	d51e      	bpl.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x50>
    switch (PeriphClkInit->SpdifrxClockSelection)
 800498e:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8004990:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8004994:	f000 84f6 	beq.w	8005384 <HAL_RCCEx_PeriphCLKConfig+0xa08>
 8004998:	d825      	bhi.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800499a:	2900      	cmp	r1, #0
 800499c:	f000 8422 	beq.w	80051e4 <HAL_RCCEx_PeriphCLKConfig+0x868>
 80049a0:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80049a4:	d122      	bne.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0x70>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80049a6:	2102      	movs	r1, #2
 80049a8:	f104 0008 	add.w	r0, r4, #8
 80049ac:	f7ff fef2 	bl	8004794 <RCCEx_PLL2_Config>
 80049b0:	4606      	mov	r6, r0
    if (ret == HAL_OK)
 80049b2:	2e00      	cmp	r6, #0
 80049b4:	f040 8527 	bne.w	8005406 <HAL_RCCEx_PeriphCLKConfig+0xa8a>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80049b8:	6e61      	ldr	r1, [r4, #100]	; 0x64
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80049ba:	e9d4 3200 	ldrd	r3, r2, [r4]
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80049be:	4d9e      	ldr	r5, [pc, #632]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80049c0:	2600      	movs	r6, #0
 80049c2:	6d28      	ldr	r0, [r5, #80]	; 0x50
 80049c4:	f420 1040 	bic.w	r0, r0, #3145728	; 0x300000
 80049c8:	4301      	orrs	r1, r0
 80049ca:	6529      	str	r1, [r5, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80049cc:	05d9      	lsls	r1, r3, #23
 80049ce:	d511      	bpl.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x78>
    switch (PeriphClkInit->Sai1ClockSelection)
 80049d0:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80049d2:	2904      	cmp	r1, #4
 80049d4:	f200 857a 	bhi.w	80054cc <HAL_RCCEx_PeriphCLKConfig+0xb50>
 80049d8:	e8df f011 	tbh	[pc, r1, lsl #1]
 80049dc:	04e504de 	.word	0x04e504de
 80049e0:	02f604ee 	.word	0x02f604ee
 80049e4:	02f6      	.short	0x02f6
    switch (PeriphClkInit->SpdifrxClockSelection)
 80049e6:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
 80049ea:	d0e8      	beq.n	80049be <HAL_RCCEx_PeriphCLKConfig+0x42>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80049ec:	05d9      	lsls	r1, r3, #23
    switch (PeriphClkInit->SpdifrxClockSelection)
 80049ee:	f04f 0601 	mov.w	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80049f2:	d4ed      	bmi.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    switch (PeriphClkInit->Sai1ClockSelection)
 80049f4:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80049f6:	055f      	lsls	r7, r3, #21
 80049f8:	d521      	bpl.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0xc2>
    switch (PeriphClkInit->Sai4AClockSelection)
 80049fa:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 80049fe:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 8004a02:	f000 84f6 	beq.w	80053f2 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8004a06:	f200 80d6 	bhi.w	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x23a>
 8004a0a:	2900      	cmp	r1, #0
 8004a0c:	f000 83fd 	beq.w	800520a <HAL_RCCEx_PeriphCLKConfig+0x88e>
 8004a10:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8004a14:	f040 80d9 	bne.w	8004bca <HAL_RCCEx_PeriphCLKConfig+0x24e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004a18:	2100      	movs	r1, #0
 8004a1a:	f104 0008 	add.w	r0, r4, #8
 8004a1e:	f7ff feb9 	bl	8004794 <RCCEx_PLL2_Config>
 8004a22:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004a24:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004a28:	2d00      	cmp	r5, #0
 8004a2a:	f040 83c3 	bne.w	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x838>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004a2e:	4f82      	ldr	r7, [pc, #520]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004a30:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
 8004a34:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004a36:	f421 0160 	bic.w	r1, r1, #14680064	; 0xe00000
 8004a3a:	4301      	orrs	r1, r0
 8004a3c:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004a3e:	0518      	lsls	r0, r3, #20
 8004a40:	d521      	bpl.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x10a>
    switch (PeriphClkInit->Sai4BClockSelection)
 8004a42:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 8004a46:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 8004a4a:	f000 84be 	beq.w	80053ca <HAL_RCCEx_PeriphCLKConfig+0xa4e>
 8004a4e:	f200 80bf 	bhi.w	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8004a52:	2900      	cmp	r1, #0
 8004a54:	f000 83cd 	beq.w	80051f2 <HAL_RCCEx_PeriphCLKConfig+0x876>
 8004a58:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 8004a5c:	f040 80c2 	bne.w	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x268>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004a60:	2100      	movs	r1, #0
 8004a62:	f104 0008 	add.w	r0, r4, #8
 8004a66:	f7ff fe95 	bl	8004794 <RCCEx_PLL2_Config>
 8004a6a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004a6c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004a70:	2d00      	cmp	r5, #0
 8004a72:	f040 83a3 	bne.w	80051bc <HAL_RCCEx_PeriphCLKConfig+0x840>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004a76:	4f70      	ldr	r7, [pc, #448]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004a78:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
 8004a7c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004a7e:	f021 61e0 	bic.w	r1, r1, #117440512	; 0x7000000
 8004a82:	4301      	orrs	r1, r0
 8004a84:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004a86:	0199      	lsls	r1, r3, #6
 8004a88:	d518      	bpl.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x140>
    switch (PeriphClkInit->OspiClockSelection)
 8004a8a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8004a8c:	2920      	cmp	r1, #32
 8004a8e:	f000 8447 	beq.w	8005320 <HAL_RCCEx_PeriphCLKConfig+0x9a4>
 8004a92:	f200 80aa 	bhi.w	8004bea <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8004a96:	b139      	cbz	r1, 8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
 8004a98:	2910      	cmp	r1, #16
 8004a9a:	f040 80a9 	bne.w	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x274>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a9e:	4866      	ldr	r0, [pc, #408]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004aa0:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8004aa2:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8004aa6:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
 8004aa8:	2d00      	cmp	r5, #0
 8004aaa:	f040 83b6 	bne.w	800521a <HAL_RCCEx_PeriphCLKConfig+0x89e>
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004aae:	4f62      	ldr	r7, [pc, #392]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004ab0:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8004ab2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8004ab4:	f021 0130 	bic.w	r1, r1, #48	; 0x30
 8004ab8:	4301      	orrs	r1, r0
 8004aba:	64f9      	str	r1, [r7, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004abc:	04df      	lsls	r7, r3, #19
 8004abe:	d51f      	bpl.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x184>
    switch (PeriphClkInit->Spi123ClockSelection)
 8004ac0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8004ac2:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 8004ac6:	f000 848a 	beq.w	80053de <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8004aca:	f200 8094 	bhi.w	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x27a>
 8004ace:	2900      	cmp	r1, #0
 8004ad0:	f000 8395 	beq.w	80051fe <HAL_RCCEx_PeriphCLKConfig+0x882>
 8004ad4:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8004ad8:	f040 8095 	bne.w	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x28a>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004adc:	2100      	movs	r1, #0
 8004ade:	f104 0008 	add.w	r0, r4, #8
 8004ae2:	f7ff fe57 	bl	8004794 <RCCEx_PLL2_Config>
 8004ae6:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004ae8:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004aec:	2d00      	cmp	r5, #0
 8004aee:	f040 8363 	bne.w	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x83c>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004af2:	4f51      	ldr	r7, [pc, #324]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004af4:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8004af6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004af8:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 8004afc:	4301      	orrs	r1, r0
 8004afe:	6539      	str	r1, [r7, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004b00:	0498      	lsls	r0, r3, #18
 8004b02:	d51c      	bpl.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    switch (PeriphClkInit->Spi45ClockSelection)
 8004b04:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8004b06:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 8004b0a:	f000 83f3 	beq.w	80052f4 <HAL_RCCEx_PeriphCLKConfig+0x978>
 8004b0e:	d87d      	bhi.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x290>
 8004b10:	b159      	cbz	r1, 8004b2a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8004b12:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8004b16:	f040 8081 	bne.w	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004b1a:	2101      	movs	r1, #1
 8004b1c:	f104 0008 	add.w	r0, r4, #8
 8004b20:	f7ff fe38 	bl	8004794 <RCCEx_PLL2_Config>
 8004b24:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004b26:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004b2a:	2d00      	cmp	r5, #0
 8004b2c:	f040 8385 	bne.w	800523a <HAL_RCCEx_PeriphCLKConfig+0x8be>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004b30:	4f41      	ldr	r7, [pc, #260]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004b32:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8004b34:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004b36:	f421 21e0 	bic.w	r1, r1, #458752	; 0x70000
 8004b3a:	4301      	orrs	r1, r0
 8004b3c:	6539      	str	r1, [r7, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004b3e:	0459      	lsls	r1, r3, #17
 8004b40:	d51d      	bpl.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x202>
    switch (PeriphClkInit->Spi6ClockSelection)
 8004b42:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 8004b46:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8004b4a:	f000 83de 	beq.w	800530a <HAL_RCCEx_PeriphCLKConfig+0x98e>
 8004b4e:	d868      	bhi.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8004b50:	b151      	cbz	r1, 8004b68 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 8004b52:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 8004b56:	d16c      	bne.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004b58:	2101      	movs	r1, #1
 8004b5a:	f104 0008 	add.w	r0, r4, #8
 8004b5e:	f7ff fe19 	bl	8004794 <RCCEx_PLL2_Config>
 8004b62:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004b64:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004b68:	2d00      	cmp	r5, #0
 8004b6a:	f040 8364 	bne.w	8005236 <HAL_RCCEx_PeriphCLKConfig+0x8ba>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004b6e:	4f32      	ldr	r7, [pc, #200]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004b70:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 8004b74:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004b76:	f021 41e0 	bic.w	r1, r1, #1879048192	; 0x70000000
 8004b7a:	4301      	orrs	r1, r0
 8004b7c:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004b7e:	041f      	lsls	r7, r3, #16
 8004b80:	d50d      	bpl.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x222>
    switch (PeriphClkInit->FdcanClockSelection)
 8004b82:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8004b84:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 8004b88:	f000 8386 	beq.w	8005298 <HAL_RCCEx_PeriphCLKConfig+0x91c>
 8004b8c:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8004b90:	f000 823c 	beq.w	800500c <HAL_RCCEx_PeriphCLKConfig+0x690>
 8004b94:	2900      	cmp	r1, #0
 8004b96:	f000 8241 	beq.w	800501c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
 8004b9a:	2601      	movs	r6, #1
 8004b9c:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004b9e:	01d8      	lsls	r0, r3, #7
 8004ba0:	d55b      	bpl.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    switch (PeriphClkInit->FmcClockSelection)
 8004ba2:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8004ba4:	2903      	cmp	r1, #3
 8004ba6:	f200 8494 	bhi.w	80054d2 <HAL_RCCEx_PeriphCLKConfig+0xb56>
 8004baa:	e8df f011 	tbh	[pc, r1, lsl #1]
 8004bae:	004c      	.short	0x004c
 8004bb0:	037d0047 	.word	0x037d0047
 8004bb4:	004c      	.short	0x004c
    switch (PeriphClkInit->Sai4AClockSelection)
 8004bb6:	f421 1000 	bic.w	r0, r1, #2097152	; 0x200000
 8004bba:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8004bbe:	f43f af33 	beq.w	8004a28 <HAL_RCCEx_PeriphCLKConfig+0xac>
 8004bc2:	f5b1 0fc0 	cmp.w	r1, #6291456	; 0x600000
 8004bc6:	f43f af2f 	beq.w	8004a28 <HAL_RCCEx_PeriphCLKConfig+0xac>
 8004bca:	2601      	movs	r6, #1
 8004bcc:	4635      	mov	r5, r6
 8004bce:	e736      	b.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0xc2>
    switch (PeriphClkInit->Sai4BClockSelection)
 8004bd0:	f021 7080 	bic.w	r0, r1, #16777216	; 0x1000000
 8004bd4:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
 8004bd8:	f43f af4a 	beq.w	8004a70 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004bdc:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 8004be0:	f43f af46 	beq.w	8004a70 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004be4:	2601      	movs	r6, #1
 8004be6:	4635      	mov	r5, r6
 8004be8:	e74d      	b.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x10a>
    switch (PeriphClkInit->OspiClockSelection)
 8004bea:	2930      	cmp	r1, #48	; 0x30
 8004bec:	f43f af5c 	beq.w	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
 8004bf0:	2601      	movs	r6, #1
 8004bf2:	4635      	mov	r5, r6
 8004bf4:	e762      	b.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x140>
    switch (PeriphClkInit->Spi123ClockSelection)
 8004bf6:	f5b1 5f40 	cmp.w	r1, #12288	; 0x3000
 8004bfa:	f43f af77 	beq.w	8004aec <HAL_RCCEx_PeriphCLKConfig+0x170>
 8004bfe:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 8004c02:	f43f af73 	beq.w	8004aec <HAL_RCCEx_PeriphCLKConfig+0x170>
 8004c06:	2601      	movs	r6, #1
 8004c08:	4635      	mov	r5, r6
 8004c0a:	e779      	b.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x184>
    switch (PeriphClkInit->Spi45ClockSelection)
 8004c0c:	f421 3080 	bic.w	r0, r1, #65536	; 0x10000
 8004c10:	f5b0 2f80 	cmp.w	r0, #262144	; 0x40000
 8004c14:	d089      	beq.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8004c16:	f5b1 3f40 	cmp.w	r1, #196608	; 0x30000
 8004c1a:	d086      	beq.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8004c1c:	2601      	movs	r6, #1
 8004c1e:	4635      	mov	r5, r6
 8004c20:	e78d      	b.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    switch (PeriphClkInit->Spi6ClockSelection)
 8004c22:	f021 5080 	bic.w	r0, r1, #268435456	; 0x10000000
 8004c26:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004c2a:	d09d      	beq.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 8004c2c:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
 8004c30:	d09a      	beq.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 8004c32:	2601      	movs	r6, #1
 8004c34:	4635      	mov	r5, r6
 8004c36:	e7a2      	b.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x202>
 8004c38:	58024400 	.word	0x58024400
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c3c:	4839      	ldr	r0, [pc, #228]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 8004c3e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8004c40:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8004c44:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
 8004c46:	2d00      	cmp	r5, #0
 8004c48:	f040 82f9 	bne.w	800523e <HAL_RCCEx_PeriphCLKConfig+0x8c2>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004c4c:	4f35      	ldr	r7, [pc, #212]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 8004c4e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8004c50:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8004c52:	f021 0103 	bic.w	r1, r1, #3
 8004c56:	4301      	orrs	r1, r0
 8004c58:	64f9      	str	r1, [r7, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004c5a:	0259      	lsls	r1, r3, #9
 8004c5c:	f100 8210 	bmi.w	8005080 <HAL_RCCEx_PeriphCLKConfig+0x704>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004c60:	07d9      	lsls	r1, r3, #31
 8004c62:	d52f      	bpl.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x348>
    switch (PeriphClkInit->Usart16ClockSelection)
 8004c64:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8004c66:	2928      	cmp	r1, #40	; 0x28
 8004c68:	d82a      	bhi.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8004c6a:	e8df f011 	tbh	[pc, r1, lsl #1]
 8004c6e:	01fe      	.short	0x01fe
 8004c70:	00290029 	.word	0x00290029
 8004c74:	00290029 	.word	0x00290029
 8004c78:	00290029 	.word	0x00290029
 8004c7c:	01f60029 	.word	0x01f60029
 8004c80:	00290029 	.word	0x00290029
 8004c84:	00290029 	.word	0x00290029
 8004c88:	00290029 	.word	0x00290029
 8004c8c:	03e80029 	.word	0x03e80029
 8004c90:	00290029 	.word	0x00290029
 8004c94:	00290029 	.word	0x00290029
 8004c98:	00290029 	.word	0x00290029
 8004c9c:	01fe0029 	.word	0x01fe0029
 8004ca0:	00290029 	.word	0x00290029
 8004ca4:	00290029 	.word	0x00290029
 8004ca8:	00290029 	.word	0x00290029
 8004cac:	01fe0029 	.word	0x01fe0029
 8004cb0:	00290029 	.word	0x00290029
 8004cb4:	00290029 	.word	0x00290029
 8004cb8:	00290029 	.word	0x00290029
 8004cbc:	01fe0029 	.word	0x01fe0029
 8004cc0:	2601      	movs	r6, #1
 8004cc2:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004cc4:	079f      	lsls	r7, r3, #30
 8004cc6:	d51d      	bpl.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x388>
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004cc8:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8004cca:	2905      	cmp	r1, #5
 8004ccc:	f200 83fb 	bhi.w	80054c6 <HAL_RCCEx_PeriphCLKConfig+0xb4a>
 8004cd0:	e8df f011 	tbh	[pc, r1, lsl #1]
 8004cd4:	0006000e 	.word	0x0006000e
 8004cd8:	000e03a9 	.word	0x000e03a9
 8004cdc:	000e000e 	.word	0x000e000e
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004ce0:	2101      	movs	r1, #1
 8004ce2:	f104 0008 	add.w	r0, r4, #8
 8004ce6:	f7ff fd55 	bl	8004794 <RCCEx_PLL2_Config>
 8004cea:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004cec:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004cf0:	2d00      	cmp	r5, #0
 8004cf2:	f040 829c 	bne.w	800522e <HAL_RCCEx_PeriphCLKConfig+0x8b2>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004cf6:	4f0b      	ldr	r7, [pc, #44]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 8004cf8:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8004cfa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004cfc:	f021 0107 	bic.w	r1, r1, #7
 8004d00:	4301      	orrs	r1, r0
 8004d02:	6579      	str	r1, [r7, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004d04:	0758      	lsls	r0, r3, #29
 8004d06:	d522      	bpl.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004d08:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 8004d0c:	2905      	cmp	r1, #5
 8004d0e:	f200 83d7 	bhi.w	80054c0 <HAL_RCCEx_PeriphCLKConfig+0xb44>
 8004d12:	e8df f011 	tbh	[pc, r1, lsl #1]
 8004d16:	0011      	.short	0x0011
 8004d18:	037c0009 	.word	0x037c0009
 8004d1c:	00110011 	.word	0x00110011
 8004d20:	0011      	.short	0x0011
 8004d22:	bf00      	nop
 8004d24:	58024400 	.word	0x58024400
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004d28:	2101      	movs	r1, #1
 8004d2a:	f104 0008 	add.w	r0, r4, #8
 8004d2e:	f7ff fd31 	bl	8004794 <RCCEx_PLL2_Config>
 8004d32:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004d34:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004d38:	2d00      	cmp	r5, #0
 8004d3a:	f040 8276 	bne.w	800522a <HAL_RCCEx_PeriphCLKConfig+0x8ae>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004d3e:	4fa8      	ldr	r7, [pc, #672]	; (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x664>)
 8004d40:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 8004d44:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004d46:	f021 0107 	bic.w	r1, r1, #7
 8004d4a:	4301      	orrs	r1, r0
 8004d4c:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004d4e:	0699      	lsls	r1, r3, #26
 8004d50:	d51f      	bpl.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x416>
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004d52:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8004d56:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8004d5a:	f000 82ee 	beq.w	800533a <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8004d5e:	f200 8100 	bhi.w	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x5e6>
 8004d62:	b159      	cbz	r1, 8004d7c <HAL_RCCEx_PeriphCLKConfig+0x400>
 8004d64:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 8004d68:	f040 8105 	bne.w	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x5fa>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004d6c:	2100      	movs	r1, #0
 8004d6e:	f104 0008 	add.w	r0, r4, #8
 8004d72:	f7ff fd0f 	bl	8004794 <RCCEx_PLL2_Config>
 8004d76:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004d78:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004d7c:	2d00      	cmp	r5, #0
 8004d7e:	f040 8250 	bne.w	8005222 <HAL_RCCEx_PeriphCLKConfig+0x8a6>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004d82:	4f97      	ldr	r7, [pc, #604]	; (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x664>)
 8004d84:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8004d88:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004d8a:	f021 41e0 	bic.w	r1, r1, #1879048192	; 0x70000000
 8004d8e:	4301      	orrs	r1, r0
 8004d90:	6579      	str	r1, [r7, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004d92:	065f      	lsls	r7, r3, #25
 8004d94:	d51f      	bpl.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004d96:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 8004d9a:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8004d9e:	f000 829e 	beq.w	80052de <HAL_RCCEx_PeriphCLKConfig+0x962>
 8004da2:	f200 80eb 	bhi.w	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x600>
 8004da6:	b159      	cbz	r1, 8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x444>
 8004da8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8004dac:	f040 80f0 	bne.w	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x614>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004db0:	2100      	movs	r1, #0
 8004db2:	f104 0008 	add.w	r0, r4, #8
 8004db6:	f7ff fced 	bl	8004794 <RCCEx_PLL2_Config>
 8004dba:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004dbc:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004dc0:	2d00      	cmp	r5, #0
 8004dc2:	f040 8236 	bne.w	8005232 <HAL_RCCEx_PeriphCLKConfig+0x8b6>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004dc6:	4f86      	ldr	r7, [pc, #536]	; (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x664>)
 8004dc8:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
 8004dcc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004dce:	f421 51e0 	bic.w	r1, r1, #7168	; 0x1c00
 8004dd2:	4301      	orrs	r1, r0
 8004dd4:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004dd6:	0618      	lsls	r0, r3, #24
 8004dd8:	d51f      	bpl.n	8004e1a <HAL_RCCEx_PeriphCLKConfig+0x49e>
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004dda:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 8004dde:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 8004de2:	f000 8271 	beq.w	80052c8 <HAL_RCCEx_PeriphCLKConfig+0x94c>
 8004de6:	f200 80d6 	bhi.w	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x61a>
 8004dea:	b159      	cbz	r1, 8004e04 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8004dec:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 8004df0:	f040 80db 	bne.w	8004faa <HAL_RCCEx_PeriphCLKConfig+0x62e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004df4:	2100      	movs	r1, #0
 8004df6:	f104 0008 	add.w	r0, r4, #8
 8004dfa:	f7ff fccb 	bl	8004794 <RCCEx_PLL2_Config>
 8004dfe:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8004e00:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004e04:	2d00      	cmp	r5, #0
 8004e06:	f040 820a 	bne.w	800521e <HAL_RCCEx_PeriphCLKConfig+0x8a2>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004e0a:	4f75      	ldr	r7, [pc, #468]	; (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x664>)
 8004e0c:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
 8004e10:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004e12:	f421 4160 	bic.w	r1, r1, #57344	; 0xe000
 8004e16:	4301      	orrs	r1, r0
 8004e18:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8004e1a:	0719      	lsls	r1, r3, #28
 8004e1c:	d50b      	bpl.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8004e1e:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8004e22:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8004e26:	f000 82a1 	beq.w	800536c <HAL_RCCEx_PeriphCLKConfig+0x9f0>
    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8004e2a:	4f6d      	ldr	r7, [pc, #436]	; (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x664>)
 8004e2c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004e2e:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8004e32:	4301      	orrs	r1, r0
 8004e34:	6579      	str	r1, [r7, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004e36:	06df      	lsls	r7, r3, #27
 8004e38:	d50b      	bpl.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x4d6>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004e3a:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
 8004e3e:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8004e42:	f000 8286 	beq.w	8005352 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004e46:	4f66      	ldr	r7, [pc, #408]	; (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x664>)
 8004e48:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004e4a:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8004e4e:	4301      	orrs	r1, r0
 8004e50:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004e52:	0318      	lsls	r0, r3, #12
 8004e54:	d50e      	bpl.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
    switch (PeriphClkInit->AdcClockSelection)
 8004e56:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 8004e5a:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8004e5e:	f000 80c1 	beq.w	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x668>
 8004e62:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 8004e66:	f000 80c5 	beq.w	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8004e6a:	2900      	cmp	r1, #0
 8004e6c:	f000 8200 	beq.w	8005270 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 8004e70:	2601      	movs	r6, #1
 8004e72:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004e74:	0359      	lsls	r1, r3, #13
 8004e76:	d50f      	bpl.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x51c>
    switch (PeriphClkInit->UsbClockSelection)
 8004e78:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 8004e7c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8004e80:	f000 80d7 	beq.w	8005032 <HAL_RCCEx_PeriphCLKConfig+0x6b6>
 8004e84:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
 8004e88:	f000 80db 	beq.w	8005042 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
 8004e8c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8004e90:	f000 81f8 	beq.w	8005284 <HAL_RCCEx_PeriphCLKConfig+0x908>
 8004e94:	2601      	movs	r6, #1
 8004e96:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004e98:	03df      	lsls	r7, r3, #15
 8004e9a:	d509      	bpl.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x534>
    switch (PeriphClkInit->SdmmcClockSelection)
 8004e9c:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8004e9e:	2900      	cmp	r1, #0
 8004ea0:	f000 81dd 	beq.w	800525e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8004ea4:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8004ea8:	f000 818a 	beq.w	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x844>
 8004eac:	2601      	movs	r6, #1
 8004eae:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004eb0:	0098      	lsls	r0, r3, #2
 8004eb2:	f100 8165 	bmi.w	8005180 <HAL_RCCEx_PeriphCLKConfig+0x804>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004eb6:	0399      	lsls	r1, r3, #14
 8004eb8:	d50b      	bpl.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0x556>
    switch (PeriphClkInit->RngClockSelection)
 8004eba:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8004ebc:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8004ec0:	f000 81c5 	beq.w	800524e <HAL_RCCEx_PeriphCLKConfig+0x8d2>
 8004ec4:	d974      	bls.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x634>
 8004ec6:	f421 7080 	bic.w	r0, r1, #256	; 0x100
 8004eca:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8004ece:	d071      	beq.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x638>
 8004ed0:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004ed2:	02df      	lsls	r7, r3, #11
 8004ed4:	d506      	bpl.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x568>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004ed6:	4842      	ldr	r0, [pc, #264]	; (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x664>)
 8004ed8:	6f25      	ldr	r5, [r4, #112]	; 0x70
 8004eda:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8004edc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8004ee0:	4329      	orrs	r1, r5
 8004ee2:	6501      	str	r1, [r0, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004ee4:	029d      	lsls	r5, r3, #10
 8004ee6:	d506      	bpl.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x57a>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004ee8:	483d      	ldr	r0, [pc, #244]	; (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x664>)
 8004eea:	6ea5      	ldr	r5, [r4, #104]	; 0x68
 8004eec:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8004eee:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8004ef2:	4329      	orrs	r1, r5
 8004ef4:	6501      	str	r1, [r0, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004ef6:	0058      	lsls	r0, r3, #1
 8004ef8:	d509      	bpl.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x592>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004efa:	4939      	ldr	r1, [pc, #228]	; (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x664>)
 8004efc:	6908      	ldr	r0, [r1, #16]
 8004efe:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
 8004f02:	6108      	str	r0, [r1, #16]
 8004f04:	6908      	ldr	r0, [r1, #16]
 8004f06:	f8d4 50b4 	ldr.w	r5, [r4, #180]	; 0xb4
 8004f0a:	4328      	orrs	r0, r5
 8004f0c:	6108      	str	r0, [r1, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	da06      	bge.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0x5a4>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004f12:	4833      	ldr	r0, [pc, #204]	; (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x664>)
 8004f14:	6d65      	ldr	r5, [r4, #84]	; 0x54
 8004f16:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8004f18:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
 8004f1c:	4329      	orrs	r1, r5
 8004f1e:	64c1      	str	r1, [r0, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004f20:	0219      	lsls	r1, r3, #8
 8004f22:	d507      	bpl.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004f24:	492e      	ldr	r1, [pc, #184]	; (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x664>)
 8004f26:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8004f2a:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 8004f2c:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8004f30:	4303      	orrs	r3, r0
 8004f32:	654b      	str	r3, [r1, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004f34:	07d3      	lsls	r3, r2, #31
 8004f36:	f100 80fe 	bmi.w	8005136 <HAL_RCCEx_PeriphCLKConfig+0x7ba>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004f3a:	0797      	lsls	r7, r2, #30
 8004f3c:	f100 8108 	bmi.w	8005150 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004f40:	0755      	lsls	r5, r2, #29
 8004f42:	f100 8112 	bmi.w	800516a <HAL_RCCEx_PeriphCLKConfig+0x7ee>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004f46:	0710      	lsls	r0, r2, #28
 8004f48:	f100 80ea 	bmi.w	8005120 <HAL_RCCEx_PeriphCLKConfig+0x7a4>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004f4c:	06d1      	lsls	r1, r2, #27
 8004f4e:	f100 80d9 	bmi.w	8005104 <HAL_RCCEx_PeriphCLKConfig+0x788>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004f52:	0692      	lsls	r2, r2, #26
 8004f54:	f100 8120 	bmi.w	8005198 <HAL_RCCEx_PeriphCLKConfig+0x81c>
    return HAL_OK;
 8004f58:	1e30      	subs	r0, r6, #0
 8004f5a:	bf18      	it	ne
 8004f5c:	2001      	movne	r0, #1
}
 8004f5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004f62:	f021 5080 	bic.w	r0, r1, #268435456	; 0x10000000
 8004f66:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004f6a:	f43f af07 	beq.w	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x400>
 8004f6e:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
 8004f72:	f43f af03 	beq.w	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x400>
 8004f76:	2601      	movs	r6, #1
 8004f78:	4635      	mov	r5, r6
 8004f7a:	e70a      	b.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x416>
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004f7c:	f421 6080 	bic.w	r0, r1, #1024	; 0x400
 8004f80:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8004f84:	f43f af1c 	beq.w	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x444>
 8004f88:	f5b1 6f40 	cmp.w	r1, #3072	; 0xc00
 8004f8c:	f43f af18 	beq.w	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x444>
 8004f90:	2601      	movs	r6, #1
 8004f92:	4635      	mov	r5, r6
 8004f94:	e71f      	b.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004f96:	f421 5000 	bic.w	r0, r1, #8192	; 0x2000
 8004f9a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8004f9e:	f43f af31 	beq.w	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8004fa2:	f5b1 4fc0 	cmp.w	r1, #24576	; 0x6000
 8004fa6:	f43f af2d 	beq.w	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8004faa:	2601      	movs	r6, #1
 8004fac:	4635      	mov	r5, r6
 8004fae:	e734      	b.n	8004e1a <HAL_RCCEx_PeriphCLKConfig+0x49e>
    switch (PeriphClkInit->RngClockSelection)
 8004fb0:	2900      	cmp	r1, #0
 8004fb2:	d18d      	bne.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x554>
    if (ret == HAL_OK)
 8004fb4:	2d00      	cmp	r5, #0
 8004fb6:	f040 8148 	bne.w	800524a <HAL_RCCEx_PeriphCLKConfig+0x8ce>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004fba:	4d09      	ldr	r5, [pc, #36]	; (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x664>)
 8004fbc:	6d68      	ldr	r0, [r5, #84]	; 0x54
 8004fbe:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8004fc2:	4301      	orrs	r1, r0
 8004fc4:	6569      	str	r1, [r5, #84]	; 0x54
 8004fc6:	e784      	b.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0x556>
    switch (PeriphClkInit->Sai1ClockSelection)
 8004fc8:	4635      	mov	r5, r6
    if (ret == HAL_OK)
 8004fca:	2d00      	cmp	r5, #0
 8004fcc:	f040 80f0 	bne.w	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x834>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004fd0:	4f03      	ldr	r7, [pc, #12]	; (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x664>)
 8004fd2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004fd4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004fd6:	f021 0107 	bic.w	r1, r1, #7
 8004fda:	4301      	orrs	r1, r0
 8004fdc:	6539      	str	r1, [r7, #80]	; 0x50
 8004fde:	e50a      	b.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004fe0:	58024400 	.word	0x58024400
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004fe4:	2102      	movs	r1, #2
 8004fe6:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8004fea:	f7ff fc4d 	bl	8004888 <RCCEx_PLL3_Config>
 8004fee:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004ff0:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004ff4:	2d00      	cmp	r5, #0
 8004ff6:	f040 810e 	bne.w	8005216 <HAL_RCCEx_PeriphCLKConfig+0x89a>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004ffa:	4fb1      	ldr	r7, [pc, #708]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x944>)
 8004ffc:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
 8005000:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005002:	f421 3140 	bic.w	r1, r1, #196608	; 0x30000
 8005006:	4301      	orrs	r1, r0
 8005008:	65b9      	str	r1, [r7, #88]	; 0x58
 800500a:	e733      	b.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800500c:	2101      	movs	r1, #1
 800500e:	f104 0008 	add.w	r0, r4, #8
 8005012:	f7ff fbbf 	bl	8004794 <RCCEx_PLL2_Config>
 8005016:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005018:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800501c:	2d00      	cmp	r5, #0
 800501e:	f040 8112 	bne.w	8005246 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005022:	4fa7      	ldr	r7, [pc, #668]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x944>)
 8005024:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8005026:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005028:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
 800502c:	4301      	orrs	r1, r0
 800502e:	6539      	str	r1, [r7, #80]	; 0x50
 8005030:	e5b5      	b.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x222>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005032:	2101      	movs	r1, #1
 8005034:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8005038:	f7ff fc26 	bl	8004888 <RCCEx_PLL3_Config>
 800503c:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800503e:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005042:	2d00      	cmp	r5, #0
 8005044:	f040 80fd 	bne.w	8005242 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005048:	4f9d      	ldr	r7, [pc, #628]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x944>)
 800504a:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 800504e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005050:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 8005054:	4301      	orrs	r1, r0
 8005056:	6579      	str	r1, [r7, #84]	; 0x54
 8005058:	e71e      	b.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x51c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800505a:	2101      	movs	r1, #1
 800505c:	f104 0008 	add.w	r0, r4, #8
 8005060:	f7ff fb98 	bl	8004794 <RCCEx_PLL2_Config>
 8005064:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005066:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800506a:	2d00      	cmp	r5, #0
 800506c:	f040 80db 	bne.w	8005226 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005070:	4f93      	ldr	r7, [pc, #588]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x944>)
 8005072:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8005074:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005076:	f021 0138 	bic.w	r1, r1, #56	; 0x38
 800507a:	4301      	orrs	r1, r0
 800507c:	6579      	str	r1, [r7, #84]	; 0x54
 800507e:	e621      	b.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x348>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005080:	4f90      	ldr	r7, [pc, #576]	; (80052c4 <HAL_RCCEx_PeriphCLKConfig+0x948>)
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005088:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 800508a:	f7fc fc15 	bl	80018b8 <HAL_GetTick>
 800508e:	4680      	mov	r8, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005090:	e006      	b.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x724>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005092:	f7fc fc11 	bl	80018b8 <HAL_GetTick>
 8005096:	eba0 0008 	sub.w	r0, r0, r8
 800509a:	2864      	cmp	r0, #100	; 0x64
 800509c:	f200 81db 	bhi.w	8005456 <HAL_RCCEx_PeriphCLKConfig+0xada>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	05db      	lsls	r3, r3, #23
 80050a4:	d5f5      	bpl.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x716>
    if (ret == HAL_OK)
 80050a6:	2d00      	cmp	r5, #0
 80050a8:	f040 8205 	bne.w	80054b6 <HAL_RCCEx_PeriphCLKConfig+0xb3a>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80050ac:	4a84      	ldr	r2, [pc, #528]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x944>)
 80050ae:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 80050b2:	6f11      	ldr	r1, [r2, #112]	; 0x70
 80050b4:	4059      	eors	r1, r3
 80050b6:	f411 7f40 	tst.w	r1, #768	; 0x300
 80050ba:	d00b      	beq.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x758>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80050bc:	6f11      	ldr	r1, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 80050be:	6f10      	ldr	r0, [r2, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80050c0:	f421 7140 	bic.w	r1, r1, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 80050c4:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 80050c8:	6710      	str	r0, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80050ca:	6f10      	ldr	r0, [r2, #112]	; 0x70
 80050cc:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 80050d0:	6710      	str	r0, [r2, #112]	; 0x70
        RCC->BDCR = tmpreg;
 80050d2:	6711      	str	r1, [r2, #112]	; 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80050d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050d8:	f000 81cf 	beq.w	800547a <HAL_RCCEx_PeriphCLKConfig+0xafe>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80050dc:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80050e0:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80050e4:	f000 81dd 	beq.w	80054a2 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80050e8:	4975      	ldr	r1, [pc, #468]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x944>)
 80050ea:	690a      	ldr	r2, [r1, #16]
 80050ec:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 80050f0:	610a      	str	r2, [r1, #16]
 80050f2:	4873      	ldr	r0, [pc, #460]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x944>)
 80050f4:	f3c3 010b 	ubfx	r1, r3, #0, #12
 80050f8:	6f07      	ldr	r7, [r0, #112]	; 0x70
 80050fa:	4339      	orrs	r1, r7
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80050fc:	e9d4 3200 	ldrd	r3, r2, [r4]
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005100:	6701      	str	r1, [r0, #112]	; 0x70
 8005102:	e5ad      	b.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005104:	f104 0528 	add.w	r5, r4, #40	; 0x28
 8005108:	2101      	movs	r1, #1
 800510a:	4628      	mov	r0, r5
 800510c:	f7ff fbbc 	bl	8004888 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 8005110:	2800      	cmp	r0, #0
 8005112:	f000 80bf 	beq.w	8005294 <HAL_RCCEx_PeriphCLKConfig+0x918>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005116:	6863      	ldr	r3, [r4, #4]
 8005118:	069b      	lsls	r3, r3, #26
 800511a:	d546      	bpl.n	80051aa <HAL_RCCEx_PeriphCLKConfig+0x82e>
 800511c:	4606      	mov	r6, r0
 800511e:	e03d      	b.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x820>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005120:	2100      	movs	r1, #0
 8005122:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8005126:	f7ff fbaf 	bl	8004888 <RCCEx_PLL3_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800512a:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 800512c:	2800      	cmp	r0, #0
 800512e:	f43f af0d 	beq.w	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005132:	4606      	mov	r6, r0
 8005134:	e70a      	b.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005136:	2100      	movs	r1, #0
 8005138:	f104 0008 	add.w	r0, r4, #8
 800513c:	f7ff fb2a 	bl	8004794 <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005140:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8005142:	2800      	cmp	r0, #0
 8005144:	f43f aef9 	beq.w	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x5be>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005148:	0797      	lsls	r7, r2, #30
 800514a:	4606      	mov	r6, r0
 800514c:	f57f aef8 	bpl.w	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005150:	2101      	movs	r1, #1
 8005152:	f104 0008 	add.w	r0, r4, #8
 8005156:	f7ff fb1d 	bl	8004794 <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800515a:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 800515c:	2800      	cmp	r0, #0
 800515e:	f43f aeef 	beq.w	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005162:	0755      	lsls	r5, r2, #29
 8005164:	4606      	mov	r6, r0
 8005166:	f57f aeee 	bpl.w	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800516a:	2102      	movs	r1, #2
 800516c:	f104 0008 	add.w	r0, r4, #8
 8005170:	f7ff fb10 	bl	8004794 <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005174:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8005176:	2800      	cmp	r0, #0
 8005178:	f43f aee5 	beq.w	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800517c:	4606      	mov	r6, r0
 800517e:	e6e2      	b.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005180:	2102      	movs	r1, #2
 8005182:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8005186:	f7ff fb7f 	bl	8004888 <RCCEx_PLL3_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800518a:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800518e:	2800      	cmp	r0, #0
 8005190:	f43f ae91 	beq.w	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x53a>
      status = HAL_ERROR;
 8005194:	2601      	movs	r6, #1
 8005196:	e68e      	b.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x53a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005198:	f104 0528 	add.w	r5, r4, #40	; 0x28
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800519c:	2102      	movs	r1, #2
 800519e:	4628      	mov	r0, r5
 80051a0:	f7ff fb72 	bl	8004888 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 80051a4:	2800      	cmp	r0, #0
 80051a6:	f43f aed7 	beq.w	8004f58 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
  return HAL_ERROR;
 80051aa:	2001      	movs	r0, #1
}
 80051ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80051b0:	462e      	mov	r6, r5
 80051b2:	e420      	b.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80051b4:	462e      	mov	r6, r5
 80051b6:	e442      	b.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0xc2>
 80051b8:	462e      	mov	r6, r5
 80051ba:	e4a1      	b.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x184>
 80051bc:	462e      	mov	r6, r5
 80051be:	e462      	b.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x10a>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80051c0:	2102      	movs	r1, #2
 80051c2:	f104 0008 	add.w	r0, r4, #8
 80051c6:	f7ff fae5 	bl	8004794 <RCCEx_PLL2_Config>
 80051ca:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80051cc:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80051d0:	2d00      	cmp	r5, #0
 80051d2:	d14b      	bne.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x8f0>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80051d4:	4f3a      	ldr	r7, [pc, #232]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x944>)
 80051d6:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80051d8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80051da:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 80051de:	4301      	orrs	r1, r0
 80051e0:	64f9      	str	r1, [r7, #76]	; 0x4c
 80051e2:	e665      	b.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x534>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051e4:	4d36      	ldr	r5, [pc, #216]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x944>)
 80051e6:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 80051e8:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 80051ec:	62e8      	str	r0, [r5, #44]	; 0x2c
    if (ret == HAL_OK)
 80051ee:	f7ff bbe6 	b.w	80049be <HAL_RCCEx_PeriphCLKConfig+0x42>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051f2:	4833      	ldr	r0, [pc, #204]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x944>)
 80051f4:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80051f6:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 80051fa:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
 80051fc:	e438      	b.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0xf4>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051fe:	4830      	ldr	r0, [pc, #192]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x944>)
 8005200:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8005202:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8005206:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
 8005208:	e470      	b.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x170>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800520a:	482d      	ldr	r0, [pc, #180]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x944>)
 800520c:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800520e:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8005212:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
 8005214:	e408      	b.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0xac>
 8005216:	462e      	mov	r6, r5
 8005218:	e62c      	b.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 800521a:	462e      	mov	r6, r5
 800521c:	e44e      	b.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x140>
 800521e:	462e      	mov	r6, r5
 8005220:	e5fb      	b.n	8004e1a <HAL_RCCEx_PeriphCLKConfig+0x49e>
 8005222:	462e      	mov	r6, r5
 8005224:	e5b5      	b.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8005226:	462e      	mov	r6, r5
 8005228:	e54c      	b.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x348>
 800522a:	462e      	mov	r6, r5
 800522c:	e58f      	b.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 800522e:	462e      	mov	r6, r5
 8005230:	e568      	b.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x388>
 8005232:	462e      	mov	r6, r5
 8005234:	e5cf      	b.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0x45a>
 8005236:	462e      	mov	r6, r5
 8005238:	e4a1      	b.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x202>
 800523a:	462e      	mov	r6, r5
 800523c:	e47f      	b.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 800523e:	462e      	mov	r6, r5
 8005240:	e50b      	b.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8005242:	462e      	mov	r6, r5
 8005244:	e628      	b.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x51c>
 8005246:	462e      	mov	r6, r5
 8005248:	e4a9      	b.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x222>
 800524a:	462e      	mov	r6, r5
 800524c:	e641      	b.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0x556>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800524e:	4f1c      	ldr	r7, [pc, #112]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x944>)
 8005250:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005252:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 8005256:	62f8      	str	r0, [r7, #44]	; 0x2c
    if (ret == HAL_OK)
 8005258:	2d00      	cmp	r5, #0
 800525a:	d1f6      	bne.n	800524a <HAL_RCCEx_PeriphCLKConfig+0x8ce>
 800525c:	e6ad      	b.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0x63e>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800525e:	4818      	ldr	r0, [pc, #96]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x944>)
 8005260:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8005262:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8005266:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
 8005268:	2d00      	cmp	r5, #0
 800526a:	d0b3      	beq.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x858>
 800526c:	462e      	mov	r6, r5
 800526e:	e61f      	b.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x534>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005270:	f104 0008 	add.w	r0, r4, #8
 8005274:	f7ff fa8e 	bl	8004794 <RCCEx_PLL2_Config>
 8005278:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800527a:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800527e:	2d00      	cmp	r5, #0
 8005280:	d1c9      	bne.n	8005216 <HAL_RCCEx_PeriphCLKConfig+0x89a>
 8005282:	e6ba      	b.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0x67e>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005284:	480e      	ldr	r0, [pc, #56]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x944>)
 8005286:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8005288:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 800528c:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
 800528e:	2d00      	cmp	r5, #0
 8005290:	d1d7      	bne.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
 8005292:	e6d9      	b.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005294:	6862      	ldr	r2, [r4, #4]
 8005296:	e65c      	b.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005298:	4809      	ldr	r0, [pc, #36]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x944>)
 800529a:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800529c:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 80052a0:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
 80052a2:	2d00      	cmp	r5, #0
 80052a4:	d1cf      	bne.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
 80052a6:	e6bc      	b.n	8005022 <HAL_RCCEx_PeriphCLKConfig+0x6a6>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80052a8:	2102      	movs	r1, #2
 80052aa:	f104 0008 	add.w	r0, r4, #8
 80052ae:	f7ff fa71 	bl	8004794 <RCCEx_PLL2_Config>
 80052b2:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80052b4:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80052b8:	2d00      	cmp	r5, #0
 80052ba:	d1c0      	bne.n	800523e <HAL_RCCEx_PeriphCLKConfig+0x8c2>
 80052bc:	e4c6      	b.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80052be:	bf00      	nop
 80052c0:	58024400 	.word	0x58024400
 80052c4:	58024800 	.word	0x58024800
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80052c8:	2102      	movs	r1, #2
 80052ca:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80052ce:	f7ff fadb 	bl	8004888 <RCCEx_PLL3_Config>
 80052d2:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80052d4:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80052d8:	2d00      	cmp	r5, #0
 80052da:	d1a0      	bne.n	800521e <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 80052dc:	e595      	b.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x48e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80052de:	2102      	movs	r1, #2
 80052e0:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80052e4:	f7ff fad0 	bl	8004888 <RCCEx_PLL3_Config>
 80052e8:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80052ea:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80052ee:	2d00      	cmp	r5, #0
 80052f0:	d19f      	bne.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0x8b6>
 80052f2:	e568      	b.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80052f4:	2101      	movs	r1, #1
 80052f6:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80052fa:	f7ff fac5 	bl	8004888 <RCCEx_PLL3_Config>
 80052fe:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005300:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005304:	2d00      	cmp	r5, #0
 8005306:	d198      	bne.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x8be>
 8005308:	e412      	b.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800530a:	2101      	movs	r1, #1
 800530c:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8005310:	f7ff faba 	bl	8004888 <RCCEx_PLL3_Config>
 8005314:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005316:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800531a:	2d00      	cmp	r5, #0
 800531c:	d18b      	bne.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0x8ba>
 800531e:	e426      	b.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0x1f2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005320:	2102      	movs	r1, #2
 8005322:	f104 0008 	add.w	r0, r4, #8
 8005326:	f7ff fa35 	bl	8004794 <RCCEx_PLL2_Config>
 800532a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800532c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005330:	2d00      	cmp	r5, #0
 8005332:	f47f af72 	bne.w	800521a <HAL_RCCEx_PeriphCLKConfig+0x89e>
 8005336:	f7ff bbba 	b.w	8004aae <HAL_RCCEx_PeriphCLKConfig+0x132>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800533a:	2102      	movs	r1, #2
 800533c:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8005340:	f7ff faa2 	bl	8004888 <RCCEx_PLL3_Config>
 8005344:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005346:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800534a:	2d00      	cmp	r5, #0
 800534c:	f47f af69 	bne.w	8005222 <HAL_RCCEx_PeriphCLKConfig+0x8a6>
 8005350:	e517      	b.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x406>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005352:	2102      	movs	r1, #2
 8005354:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8005358:	f7ff fa96 	bl	8004888 <RCCEx_PLL3_Config>
 800535c:	2800      	cmp	r0, #0
 800535e:	f040 8086 	bne.w	800546e <HAL_RCCEx_PeriphCLKConfig+0xaf2>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005362:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005366:	e9d4 3200 	ldrd	r3, r2, [r4]
 800536a:	e56c      	b.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800536c:	2102      	movs	r1, #2
 800536e:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8005372:	f7ff fa89 	bl	8004888 <RCCEx_PLL3_Config>
 8005376:	2800      	cmp	r0, #0
 8005378:	d173      	bne.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0xae6>
    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800537a:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800537e:	e9d4 3200 	ldrd	r3, r2, [r4]
 8005382:	e552      	b.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005384:	2102      	movs	r1, #2
 8005386:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800538a:	f7ff fa7d 	bl	8004888 <RCCEx_PLL3_Config>
 800538e:	4606      	mov	r6, r0
    if (ret == HAL_OK)
 8005390:	2e00      	cmp	r6, #0
 8005392:	f43f ab11 	beq.w	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8005396:	e036      	b.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0xa8a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005398:	4850      	ldr	r0, [pc, #320]	; (80054dc <HAL_RCCEx_PeriphCLKConfig+0xb60>)
        break;
 800539a:	4635      	mov	r5, r6
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800539c:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800539e:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 80053a2:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
 80053a4:	e611      	b.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0x64e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80053a6:	2100      	movs	r1, #0
 80053a8:	f104 0008 	add.w	r0, r4, #8
 80053ac:	f7ff f9f2 	bl	8004794 <RCCEx_PLL2_Config>
 80053b0:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80053b2:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 80053b6:	e608      	b.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0x64e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80053b8:	2100      	movs	r1, #0
 80053ba:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80053be:	f7ff fa63 	bl	8004888 <RCCEx_PLL3_Config>
 80053c2:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80053c4:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 80053c8:	e5ff      	b.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0x64e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80053ca:	2100      	movs	r1, #0
 80053cc:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80053d0:	f7ff fa5a 	bl	8004888 <RCCEx_PLL3_Config>
 80053d4:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80053d6:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 80053da:	f7ff bb49 	b.w	8004a70 <HAL_RCCEx_PeriphCLKConfig+0xf4>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80053de:	2100      	movs	r1, #0
 80053e0:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80053e4:	f7ff fa50 	bl	8004888 <RCCEx_PLL3_Config>
 80053e8:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80053ea:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 80053ee:	f7ff bb7d 	b.w	8004aec <HAL_RCCEx_PeriphCLKConfig+0x170>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80053f2:	2100      	movs	r1, #0
 80053f4:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80053f8:	f7ff fa46 	bl	8004888 <RCCEx_PLL3_Config>
 80053fc:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80053fe:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 8005402:	f7ff bb11 	b.w	8004a28 <HAL_RCCEx_PeriphCLKConfig+0xac>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005406:	e9d4 3200 	ldrd	r3, r2, [r4]
 800540a:	f7ff badf 	b.w	80049cc <HAL_RCCEx_PeriphCLKConfig+0x50>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800540e:	2101      	movs	r1, #1
 8005410:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8005414:	f7ff fa38 	bl	8004888 <RCCEx_PLL3_Config>
 8005418:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800541a:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800541e:	2d00      	cmp	r5, #0
 8005420:	f47f af03 	bne.w	800522a <HAL_RCCEx_PeriphCLKConfig+0x8ae>
 8005424:	e48b      	b.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005426:	2101      	movs	r1, #1
 8005428:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800542c:	f7ff fa2c 	bl	8004888 <RCCEx_PLL3_Config>
 8005430:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005432:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005436:	2d00      	cmp	r5, #0
 8005438:	f47f aef9 	bne.w	800522e <HAL_RCCEx_PeriphCLKConfig+0x8b2>
 800543c:	e45b      	b.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800543e:	2101      	movs	r1, #1
 8005440:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8005444:	f7ff fa20 	bl	8004888 <RCCEx_PLL3_Config>
 8005448:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800544a:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800544e:	2d00      	cmp	r5, #0
 8005450:	f47f aee9 	bne.w	8005226 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
 8005454:	e60c      	b.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
        status = ret;
 8005456:	2603      	movs	r6, #3
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005458:	e9d4 3200 	ldrd	r3, r2, [r4]
 800545c:	4635      	mov	r5, r6
 800545e:	f7ff bbff 	b.w	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8005462:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
        status = HAL_ERROR;
 8005466:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005468:	e9d4 3200 	ldrd	r3, r2, [r4]
 800546c:	e4dd      	b.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800546e:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
        status = HAL_ERROR;
 8005472:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005474:	e9d4 3200 	ldrd	r3, r2, [r4]
 8005478:	e4e5      	b.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
        tickstart = HAL_GetTick();
 800547a:	f7fc fa1d 	bl	80018b8 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800547e:	f8df 805c 	ldr.w	r8, [pc, #92]	; 80054dc <HAL_RCCEx_PeriphCLKConfig+0xb60>
        tickstart = HAL_GetTick();
 8005482:	4607      	mov	r7, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005484:	f241 3988 	movw	r9, #5000	; 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005488:	e004      	b.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0xb18>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800548a:	f7fc fa15 	bl	80018b8 <HAL_GetTick>
 800548e:	1bc0      	subs	r0, r0, r7
 8005490:	4548      	cmp	r0, r9
 8005492:	d8e0      	bhi.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0xada>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005494:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 8005498:	0798      	lsls	r0, r3, #30
 800549a:	d5f6      	bpl.n	800548a <HAL_RCCEx_PeriphCLKConfig+0xb0e>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800549c:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 80054a0:	e61c      	b.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x760>
 80054a2:	480e      	ldr	r0, [pc, #56]	; (80054dc <HAL_RCCEx_PeriphCLKConfig+0xb60>)
 80054a4:	4a0e      	ldr	r2, [pc, #56]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0xb64>)
 80054a6:	6901      	ldr	r1, [r0, #16]
 80054a8:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 80054ac:	f421 517c 	bic.w	r1, r1, #16128	; 0x3f00
 80054b0:	430a      	orrs	r2, r1
 80054b2:	6102      	str	r2, [r0, #16]
 80054b4:	e61d      	b.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0x776>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80054b6:	e9d4 3200 	ldrd	r3, r2, [r4]
 80054ba:	462e      	mov	r6, r5
 80054bc:	f7ff bbd0 	b.w	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80054c0:	2601      	movs	r6, #1
 80054c2:	4635      	mov	r5, r6
 80054c4:	e443      	b.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
    switch (PeriphClkInit->Usart234578ClockSelection)
 80054c6:	2601      	movs	r6, #1
 80054c8:	4635      	mov	r5, r6
 80054ca:	e41b      	b.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x388>
    switch (PeriphClkInit->Sai1ClockSelection)
 80054cc:	2601      	movs	r6, #1
 80054ce:	f7ff ba91 	b.w	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x78>
    switch (PeriphClkInit->FmcClockSelection)
 80054d2:	2601      	movs	r6, #1
 80054d4:	4635      	mov	r5, r6
 80054d6:	f7ff bbc0 	b.w	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x2de>
 80054da:	bf00      	nop
 80054dc:	58024400 	.word	0x58024400
 80054e0:	00ffffcf 	.word	0x00ffffcf

080054e4 <HAL_RCCEx_CRSConfig>:
  __HAL_RCC_CRS_FORCE_RESET();
 80054e4:	4b19      	ldr	r3, [pc, #100]	; (800554c <HAL_RCCEx_CRSConfig+0x68>)
 80054e6:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80054ea:	f042 0202 	orr.w	r2, r2, #2
{
 80054ee:	b510      	push	{r4, lr}
  __HAL_RCC_CRS_FORCE_RESET();
 80054f0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
{
 80054f4:	4604      	mov	r4, r0
  __HAL_RCC_CRS_RELEASE_RESET();
 80054f6:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80054fa:	f022 0202 	bic.w	r2, r2, #2
 80054fe:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  if ((HAL_GetREVID() <= REV_ID_Y) && (pInit->Source == RCC_CRS_SYNC_SOURCE_USB2))
 8005502:	f7fc f9f1 	bl	80018e8 <HAL_GetREVID>
 8005506:	f241 0303 	movw	r3, #4099	; 0x1003
 800550a:	4298      	cmp	r0, r3
    value = (pInit->Prescaler | RCC_CRS_SYNC_SOURCE_PIN | pInit->Polarity);
 800550c:	e9d4 1300 	ldrd	r1, r3, [r4]
  if ((HAL_GetREVID() <= REV_ID_Y) && (pInit->Source == RCC_CRS_SYNC_SOURCE_USB2))
 8005510:	d802      	bhi.n	8005518 <HAL_RCCEx_CRSConfig+0x34>
 8005512:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005516:	d015      	beq.n	8005544 <HAL_RCCEx_CRSConfig+0x60>
    value = (pInit->Prescaler | pInit->Source | pInit->Polarity);
 8005518:	68a2      	ldr	r2, [r4, #8]
 800551a:	4311      	orrs	r1, r2
 800551c:	4319      	orrs	r1, r3
  WRITE_REG(CRS->CFGR, value);
 800551e:	4b0c      	ldr	r3, [pc, #48]	; (8005550 <HAL_RCCEx_CRSConfig+0x6c>)
  value |= (pInit->ErrorLimitValue << CRS_CFGR_FELIM_Pos);
 8005520:	e9d4 2003 	ldrd	r2, r0, [r4, #12]
 8005524:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8005528:	430a      	orrs	r2, r1
  WRITE_REG(CRS->CFGR, value);
 800552a:	605a      	str	r2, [r3, #4]
  MODIFY_REG(CRS->CR, CRS_CR_TRIM, (pInit->HSI48CalibrationValue << CRS_CR_TRIM_Pos));
 800552c:	681a      	ldr	r2, [r3, #0]
 800552e:	6961      	ldr	r1, [r4, #20]
 8005530:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8005534:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005538:	601a      	str	r2, [r3, #0]
  SET_BIT(CRS->CR, CRS_CR_AUTOTRIMEN | CRS_CR_CEN);
 800553a:	681a      	ldr	r2, [r3, #0]
 800553c:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8005540:	601a      	str	r2, [r3, #0]
}
 8005542:	bd10      	pop	{r4, pc}
    value = (pInit->Prescaler | RCC_CRS_SYNC_SOURCE_PIN | pInit->Polarity);
 8005544:	68a3      	ldr	r3, [r4, #8]
 8005546:	4319      	orrs	r1, r3
 8005548:	e7e9      	b.n	800551e <HAL_RCCEx_CRSConfig+0x3a>
 800554a:	bf00      	nop
 800554c:	58024400 	.word	0x58024400
 8005550:	40008400 	.word	0x40008400

08005554 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005554:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005556:	4a1b      	ldr	r2, [pc, #108]	; (80055c4 <TIM_OC1_SetConfig+0x70>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005558:	f023 0301 	bic.w	r3, r3, #1
{
 800555c:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800555e:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8005560:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8005562:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8005564:	6985      	ldr	r5, [r0, #24]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005566:	f023 0302 	bic.w	r3, r3, #2
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800556a:	402a      	ands	r2, r5
  tmpccmrx |= OC_Config->OCMode;
 800556c:	680d      	ldr	r5, [r1, #0]
 800556e:	432a      	orrs	r2, r5
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005570:	688d      	ldr	r5, [r1, #8]
 8005572:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005574:	4d14      	ldr	r5, [pc, #80]	; (80055c8 <TIM_OC1_SetConfig+0x74>)
 8005576:	42a8      	cmp	r0, r5
 8005578:	d00e      	beq.n	8005598 <TIM_OC1_SetConfig+0x44>
 800557a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800557e:	42a8      	cmp	r0, r5
 8005580:	d00a      	beq.n	8005598 <TIM_OC1_SetConfig+0x44>
 8005582:	4e12      	ldr	r6, [pc, #72]	; (80055cc <TIM_OC1_SetConfig+0x78>)
 8005584:	f505 4580 	add.w	r5, r5, #16384	; 0x4000
 8005588:	42a8      	cmp	r0, r5
 800558a:	bf18      	it	ne
 800558c:	42b0      	cmpne	r0, r6
 800558e:	d003      	beq.n	8005598 <TIM_OC1_SetConfig+0x44>
 8005590:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005594:	42a8      	cmp	r0, r5
 8005596:	d10d      	bne.n	80055b4 <TIM_OC1_SetConfig+0x60>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005598:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 800559a:	f023 0308 	bic.w	r3, r3, #8
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800559e:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpccer |= OC_Config->OCNPolarity;
 80055a2:	432b      	orrs	r3, r5
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80055a4:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpccer &= ~TIM_CCER_CC1NE;
 80055a8:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 80055ac:	ea46 0c05 	orr.w	ip, r6, r5
 80055b0:	ea4c 0404 	orr.w	r4, ip, r4

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80055b4:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80055b6:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80055b8:	6182      	str	r2, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 80055ba:	6341      	str	r1, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055bc:	6203      	str	r3, [r0, #32]
}
 80055be:	bc70      	pop	{r4, r5, r6}
 80055c0:	4770      	bx	lr
 80055c2:	bf00      	nop
 80055c4:	fffeff8c 	.word	0xfffeff8c
 80055c8:	40010000 	.word	0x40010000
 80055cc:	40014000 	.word	0x40014000

080055d0 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80055d0:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80055d2:	4a1c      	ldr	r2, [pc, #112]	; (8005644 <TIM_OC3_SetConfig+0x74>)
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80055d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
{
 80055d8:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80055da:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80055dc:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80055de:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 80055e0:	69c5      	ldr	r5, [r0, #28]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80055e2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80055e6:	402a      	ands	r2, r5
  tmpccmrx |= OC_Config->OCMode;
 80055e8:	680d      	ldr	r5, [r1, #0]
 80055ea:	432a      	orrs	r2, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80055ec:	688d      	ldr	r5, [r1, #8]
 80055ee:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80055f2:	4d15      	ldr	r5, [pc, #84]	; (8005648 <TIM_OC3_SetConfig+0x78>)
 80055f4:	42a8      	cmp	r0, r5
 80055f6:	d00e      	beq.n	8005616 <TIM_OC3_SetConfig+0x46>
 80055f8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80055fc:	42a8      	cmp	r0, r5
 80055fe:	d00a      	beq.n	8005616 <TIM_OC3_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005600:	4e12      	ldr	r6, [pc, #72]	; (800564c <TIM_OC3_SetConfig+0x7c>)
 8005602:	4d13      	ldr	r5, [pc, #76]	; (8005650 <TIM_OC3_SetConfig+0x80>)
 8005604:	42a8      	cmp	r0, r5
 8005606:	bf18      	it	ne
 8005608:	42b0      	cmpne	r0, r6
 800560a:	d00b      	beq.n	8005624 <TIM_OC3_SetConfig+0x54>
 800560c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005610:	42a8      	cmp	r0, r5
 8005612:	d10f      	bne.n	8005634 <TIM_OC3_SetConfig+0x64>
 8005614:	e006      	b.n	8005624 <TIM_OC3_SetConfig+0x54>
    tmpccer &= ~TIM_CCER_CC3NP;
 8005616:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800561a:	68cd      	ldr	r5, [r1, #12]
 800561c:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8005620:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005624:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005628:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
 800562c:	ea46 0c05 	orr.w	ip, r6, r5
 8005630:	ea44 140c 	orr.w	r4, r4, ip, lsl #4

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005634:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8005636:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8005638:	61c2      	str	r2, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 800563a:	63c1      	str	r1, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800563c:	6203      	str	r3, [r0, #32]
}
 800563e:	bc70      	pop	{r4, r5, r6}
 8005640:	4770      	bx	lr
 8005642:	bf00      	nop
 8005644:	fffeff8c 	.word	0xfffeff8c
 8005648:	40010000 	.word	0x40010000
 800564c:	40014000 	.word	0x40014000
 8005650:	40014400 	.word	0x40014400

08005654 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8005654:	2800      	cmp	r0, #0
 8005656:	f000 80ae 	beq.w	80057b6 <HAL_TIM_Base_Init+0x162>
{
 800565a:	b538      	push	{r3, r4, r5, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 800565c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005660:	4604      	mov	r4, r0
 8005662:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005666:	2b00      	cmp	r3, #0
 8005668:	d07f      	beq.n	800576a <HAL_TIM_Base_Init+0x116>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800566a:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800566c:	2302      	movs	r3, #2
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800566e:	4953      	ldr	r1, [pc, #332]	; (80057bc <HAL_TIM_Base_Init+0x168>)
 8005670:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  htim->State = HAL_TIM_STATE_BUSY;
 8005674:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005678:	eba2 0101 	sub.w	r1, r2, r1
  tmpcr1 = TIMx->CR1;
 800567c:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800567e:	fab1 f181 	clz	r1, r1
 8005682:	ea4f 1151 	mov.w	r1, r1, lsr #5
 8005686:	d04b      	beq.n	8005720 <HAL_TIM_Base_Init+0xcc>
 8005688:	2900      	cmp	r1, #0
 800568a:	d149      	bne.n	8005720 <HAL_TIM_Base_Init+0xcc>
 800568c:	484c      	ldr	r0, [pc, #304]	; (80057c0 <HAL_TIM_Base_Init+0x16c>)
 800568e:	4d4d      	ldr	r5, [pc, #308]	; (80057c4 <HAL_TIM_Base_Init+0x170>)
 8005690:	4282      	cmp	r2, r0
 8005692:	d06f      	beq.n	8005774 <HAL_TIM_Base_Init+0x120>
 8005694:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8005698:	4282      	cmp	r2, r0
 800569a:	d06b      	beq.n	8005774 <HAL_TIM_Base_Init+0x120>
 800569c:	1b55      	subs	r5, r2, r5
 800569e:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 80056a2:	fab5 f585 	clz	r5, r5
 80056a6:	4282      	cmp	r2, r0
 80056a8:	ea4f 1555 	mov.w	r5, r5, lsr #5
 80056ac:	d06b      	beq.n	8005786 <HAL_TIM_Base_Init+0x132>
 80056ae:	2d00      	cmp	r5, #0
 80056b0:	d169      	bne.n	8005786 <HAL_TIM_Base_Init+0x132>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80056b2:	4945      	ldr	r1, [pc, #276]	; (80057c8 <HAL_TIM_Base_Init+0x174>)
 80056b4:	428a      	cmp	r2, r1
 80056b6:	d070      	beq.n	800579a <HAL_TIM_Base_Init+0x146>
 80056b8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80056bc:	428a      	cmp	r2, r1
 80056be:	d06c      	beq.n	800579a <HAL_TIM_Base_Init+0x146>
 80056c0:	4842      	ldr	r0, [pc, #264]	; (80057cc <HAL_TIM_Base_Init+0x178>)
 80056c2:	f5a1 41c8 	sub.w	r1, r1, #25600	; 0x6400
 80056c6:	428a      	cmp	r2, r1
 80056c8:	bf18      	it	ne
 80056ca:	4282      	cmpne	r2, r0
 80056cc:	d065      	beq.n	800579a <HAL_TIM_Base_Init+0x146>
 80056ce:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80056d2:	428a      	cmp	r2, r1
 80056d4:	d061      	beq.n	800579a <HAL_TIM_Base_Init+0x146>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80056d6:	69a0      	ldr	r0, [r4, #24]
 80056d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056dc:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80056de:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 80056e0:	6013      	str	r3, [r2, #0]
  TIMx->PSC = Structure->Prescaler;
 80056e2:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056e4:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80056e6:	6293      	str	r3, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 80056e8:	2301      	movs	r3, #1
  return HAL_OK;
 80056ea:	2000      	movs	r0, #0
  TIMx->EGR = TIM_EGR_UG;
 80056ec:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056ee:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056f2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80056f6:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80056fa:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80056fe:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8005702:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005706:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800570a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800570e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005712:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8005716:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800571a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800571e:	bd38      	pop	{r3, r4, r5, pc}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005720:	4d28      	ldr	r5, [pc, #160]	; (80057c4 <HAL_TIM_Base_Init+0x170>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005722:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005726:	68a0      	ldr	r0, [r4, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005728:	1b55      	subs	r5, r2, r5
    tmpcr1 |= Structure->CounterMode;
 800572a:	4303      	orrs	r3, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800572c:	fab5 f585 	clz	r5, r5
 8005730:	096d      	lsrs	r5, r5, #5
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005732:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8005734:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005738:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800573a:	69a0      	ldr	r0, [r4, #24]
 800573c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005740:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 8005742:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005744:	68e3      	ldr	r3, [r4, #12]
 8005746:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005748:	6863      	ldr	r3, [r4, #4]
 800574a:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800574c:	b951      	cbnz	r1, 8005764 <HAL_TIM_Base_Init+0x110>
 800574e:	b94d      	cbnz	r5, 8005764 <HAL_TIM_Base_Init+0x110>
 8005750:	491d      	ldr	r1, [pc, #116]	; (80057c8 <HAL_TIM_Base_Init+0x174>)
 8005752:	4b1f      	ldr	r3, [pc, #124]	; (80057d0 <HAL_TIM_Base_Init+0x17c>)
 8005754:	429a      	cmp	r2, r3
 8005756:	bf18      	it	ne
 8005758:	428a      	cmpne	r2, r1
 800575a:	d003      	beq.n	8005764 <HAL_TIM_Base_Init+0x110>
 800575c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005760:	429a      	cmp	r2, r3
 8005762:	d1c1      	bne.n	80056e8 <HAL_TIM_Base_Init+0x94>
    TIMx->RCR = Structure->RepetitionCounter;
 8005764:	6963      	ldr	r3, [r4, #20]
 8005766:	6313      	str	r3, [r2, #48]	; 0x30
 8005768:	e7be      	b.n	80056e8 <HAL_TIM_Base_Init+0x94>
    htim->Lock = HAL_UNLOCKED;
 800576a:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800576e:	f7fb fe0b 	bl	8001388 <HAL_TIM_Base_MspInit>
 8005772:	e77a      	b.n	800566a <HAL_TIM_Base_Init+0x16>
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005774:	1b55      	subs	r5, r2, r5
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005776:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800577a:	68a0      	ldr	r0, [r4, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800577c:	fab5 f585 	clz	r5, r5
    tmpcr1 |= Structure->CounterMode;
 8005780:	4303      	orrs	r3, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005782:	096d      	lsrs	r5, r5, #5
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005784:	e7d5      	b.n	8005732 <HAL_TIM_Base_Init+0xde>
    tmpcr1 |= Structure->CounterMode;
 8005786:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005788:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800578c:	4303      	orrs	r3, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800578e:	4811      	ldr	r0, [pc, #68]	; (80057d4 <HAL_TIM_Base_Init+0x180>)
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005790:	4282      	cmp	r2, r0
 8005792:	d0ce      	beq.n	8005732 <HAL_TIM_Base_Init+0xde>
 8005794:	2d00      	cmp	r5, #0
 8005796:	d1cc      	bne.n	8005732 <HAL_TIM_Base_Init+0xde>
 8005798:	e78b      	b.n	80056b2 <HAL_TIM_Base_Init+0x5e>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800579a:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 800579c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80057a0:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80057a2:	4303      	orrs	r3, r0
  TIMx->ARR = (uint32_t)Structure->Period ;
 80057a4:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80057a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057aa:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 80057ac:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 80057ae:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80057b0:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80057b2:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80057b4:	e7cc      	b.n	8005750 <HAL_TIM_Base_Init+0xfc>
    return HAL_ERROR;
 80057b6:	2001      	movs	r0, #1
}
 80057b8:	4770      	bx	lr
 80057ba:	bf00      	nop
 80057bc:	40010000 	.word	0x40010000
 80057c0:	40000400 	.word	0x40000400
 80057c4:	40010400 	.word	0x40010400
 80057c8:	40014000 	.word	0x40014000
 80057cc:	40014800 	.word	0x40014800
 80057d0:	40014400 	.word	0x40014400
 80057d4:	40000c00 	.word	0x40000c00

080057d8 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 80057d8:	2800      	cmp	r0, #0
 80057da:	f000 80ae 	beq.w	800593a <HAL_TIM_PWM_Init+0x162>
{
 80057de:	b538      	push	{r3, r4, r5, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 80057e0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80057e4:	4604      	mov	r4, r0
 80057e6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d07f      	beq.n	80058ee <HAL_TIM_PWM_Init+0x116>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057ee:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80057f0:	2302      	movs	r3, #2
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80057f2:	4953      	ldr	r1, [pc, #332]	; (8005940 <HAL_TIM_PWM_Init+0x168>)
 80057f4:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  htim->State = HAL_TIM_STATE_BUSY;
 80057f8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80057fc:	eba2 0101 	sub.w	r1, r2, r1
  tmpcr1 = TIMx->CR1;
 8005800:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005802:	fab1 f181 	clz	r1, r1
 8005806:	ea4f 1151 	mov.w	r1, r1, lsr #5
 800580a:	d04b      	beq.n	80058a4 <HAL_TIM_PWM_Init+0xcc>
 800580c:	2900      	cmp	r1, #0
 800580e:	d149      	bne.n	80058a4 <HAL_TIM_PWM_Init+0xcc>
 8005810:	484c      	ldr	r0, [pc, #304]	; (8005944 <HAL_TIM_PWM_Init+0x16c>)
 8005812:	4d4d      	ldr	r5, [pc, #308]	; (8005948 <HAL_TIM_PWM_Init+0x170>)
 8005814:	4282      	cmp	r2, r0
 8005816:	d06f      	beq.n	80058f8 <HAL_TIM_PWM_Init+0x120>
 8005818:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800581c:	4282      	cmp	r2, r0
 800581e:	d06b      	beq.n	80058f8 <HAL_TIM_PWM_Init+0x120>
 8005820:	1b55      	subs	r5, r2, r5
 8005822:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8005826:	fab5 f585 	clz	r5, r5
 800582a:	4282      	cmp	r2, r0
 800582c:	ea4f 1555 	mov.w	r5, r5, lsr #5
 8005830:	d06b      	beq.n	800590a <HAL_TIM_PWM_Init+0x132>
 8005832:	2d00      	cmp	r5, #0
 8005834:	d169      	bne.n	800590a <HAL_TIM_PWM_Init+0x132>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005836:	4945      	ldr	r1, [pc, #276]	; (800594c <HAL_TIM_PWM_Init+0x174>)
 8005838:	428a      	cmp	r2, r1
 800583a:	d070      	beq.n	800591e <HAL_TIM_PWM_Init+0x146>
 800583c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005840:	428a      	cmp	r2, r1
 8005842:	d06c      	beq.n	800591e <HAL_TIM_PWM_Init+0x146>
 8005844:	4842      	ldr	r0, [pc, #264]	; (8005950 <HAL_TIM_PWM_Init+0x178>)
 8005846:	f5a1 41c8 	sub.w	r1, r1, #25600	; 0x6400
 800584a:	428a      	cmp	r2, r1
 800584c:	bf18      	it	ne
 800584e:	4282      	cmpne	r2, r0
 8005850:	d065      	beq.n	800591e <HAL_TIM_PWM_Init+0x146>
 8005852:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005856:	428a      	cmp	r2, r1
 8005858:	d061      	beq.n	800591e <HAL_TIM_PWM_Init+0x146>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800585a:	69a0      	ldr	r0, [r4, #24]
 800585c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005860:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005862:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 8005864:	6013      	str	r3, [r2, #0]
  TIMx->PSC = Structure->Prescaler;
 8005866:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005868:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800586a:	6293      	str	r3, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 800586c:	2301      	movs	r3, #1
  return HAL_OK;
 800586e:	2000      	movs	r0, #0
  TIMx->EGR = TIM_EGR_UG;
 8005870:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005872:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005876:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800587a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800587e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8005882:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8005886:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800588a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800588e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8005892:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005896:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800589a:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800589e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 80058a2:	bd38      	pop	{r3, r4, r5, pc}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80058a4:	4d28      	ldr	r5, [pc, #160]	; (8005948 <HAL_TIM_PWM_Init+0x170>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80058a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80058aa:	68a0      	ldr	r0, [r4, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80058ac:	1b55      	subs	r5, r2, r5
    tmpcr1 |= Structure->CounterMode;
 80058ae:	4303      	orrs	r3, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80058b0:	fab5 f585 	clz	r5, r5
 80058b4:	096d      	lsrs	r5, r5, #5
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80058b6:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 80058b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80058bc:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80058be:	69a0      	ldr	r0, [r4, #24]
 80058c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80058c4:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 80058c6:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80058c8:	68e3      	ldr	r3, [r4, #12]
 80058ca:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80058cc:	6863      	ldr	r3, [r4, #4]
 80058ce:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80058d0:	b951      	cbnz	r1, 80058e8 <HAL_TIM_PWM_Init+0x110>
 80058d2:	b94d      	cbnz	r5, 80058e8 <HAL_TIM_PWM_Init+0x110>
 80058d4:	491d      	ldr	r1, [pc, #116]	; (800594c <HAL_TIM_PWM_Init+0x174>)
 80058d6:	4b1f      	ldr	r3, [pc, #124]	; (8005954 <HAL_TIM_PWM_Init+0x17c>)
 80058d8:	429a      	cmp	r2, r3
 80058da:	bf18      	it	ne
 80058dc:	428a      	cmpne	r2, r1
 80058de:	d003      	beq.n	80058e8 <HAL_TIM_PWM_Init+0x110>
 80058e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80058e4:	429a      	cmp	r2, r3
 80058e6:	d1c1      	bne.n	800586c <HAL_TIM_PWM_Init+0x94>
    TIMx->RCR = Structure->RepetitionCounter;
 80058e8:	6963      	ldr	r3, [r4, #20]
 80058ea:	6313      	str	r3, [r2, #48]	; 0x30
 80058ec:	e7be      	b.n	800586c <HAL_TIM_PWM_Init+0x94>
    htim->Lock = HAL_UNLOCKED;
 80058ee:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80058f2:	f7fb fd31 	bl	8001358 <HAL_TIM_PWM_MspInit>
 80058f6:	e77a      	b.n	80057ee <HAL_TIM_PWM_Init+0x16>
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80058f8:	1b55      	subs	r5, r2, r5
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80058fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80058fe:	68a0      	ldr	r0, [r4, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005900:	fab5 f585 	clz	r5, r5
    tmpcr1 |= Structure->CounterMode;
 8005904:	4303      	orrs	r3, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005906:	096d      	lsrs	r5, r5, #5
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005908:	e7d5      	b.n	80058b6 <HAL_TIM_PWM_Init+0xde>
    tmpcr1 |= Structure->CounterMode;
 800590a:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800590c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005910:	4303      	orrs	r3, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005912:	4811      	ldr	r0, [pc, #68]	; (8005958 <HAL_TIM_PWM_Init+0x180>)
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005914:	4282      	cmp	r2, r0
 8005916:	d0ce      	beq.n	80058b6 <HAL_TIM_PWM_Init+0xde>
 8005918:	2d00      	cmp	r5, #0
 800591a:	d1cc      	bne.n	80058b6 <HAL_TIM_PWM_Init+0xde>
 800591c:	e78b      	b.n	8005836 <HAL_TIM_PWM_Init+0x5e>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800591e:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8005920:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005924:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005926:	4303      	orrs	r3, r0
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005928:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800592a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800592e:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8005930:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8005932:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005934:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005936:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005938:	e7cc      	b.n	80058d4 <HAL_TIM_PWM_Init+0xfc>
    return HAL_ERROR;
 800593a:	2001      	movs	r0, #1
}
 800593c:	4770      	bx	lr
 800593e:	bf00      	nop
 8005940:	40010000 	.word	0x40010000
 8005944:	40000400 	.word	0x40000400
 8005948:	40010400 	.word	0x40010400
 800594c:	40014000 	.word	0x40014000
 8005950:	40014800 	.word	0x40014800
 8005954:	40014400 	.word	0x40014400
 8005958:	40000c00 	.word	0x40000c00

0800595c <HAL_TIM_PWM_Start>:
 800595c:	2910      	cmp	r1, #16
 800595e:	d80a      	bhi.n	8005976 <HAL_TIM_PWM_Start+0x1a>
 8005960:	e8df f001 	tbb	[pc, r1]
 8005964:	0909097a 	.word	0x0909097a
 8005968:	09090982 	.word	0x09090982
 800596c:	0909098a 	.word	0x0909098a
 8005970:	09090992 	.word	0x09090992
 8005974:	99          	.byte	0x99
 8005975:	00          	.byte	0x00
 8005976:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 800597a:	2b01      	cmp	r3, #1
 800597c:	f040 8089 	bne.w	8005a92 <HAL_TIM_PWM_Start+0x136>
 8005980:	2910      	cmp	r1, #16
 8005982:	d80a      	bhi.n	800599a <HAL_TIM_PWM_Start+0x3e>
 8005984:	e8df f001 	tbb	[pc, r1]
 8005988:	0909096c 	.word	0x0909096c
 800598c:	09090974 	.word	0x09090974
 8005990:	0909097c 	.word	0x0909097c
 8005994:	0909098d 	.word	0x0909098d
 8005998:	91          	.byte	0x91
 8005999:	00          	.byte	0x00
 800599a:	2302      	movs	r3, #2
 800599c:	f880 3043 	strb.w	r3, [r0, #67]	; 0x43
 80059a0:	6803      	ldr	r3, [r0, #0]
 80059a2:	f001 011f 	and.w	r1, r1, #31
 80059a6:	2201      	movs	r2, #1
 80059a8:	4846      	ldr	r0, [pc, #280]	; (8005ac4 <HAL_TIM_PWM_Start+0x168>)
 80059aa:	b430      	push	{r4, r5}
 80059ac:	408a      	lsls	r2, r1
 80059ae:	6a1c      	ldr	r4, [r3, #32]
 80059b0:	4d45      	ldr	r5, [pc, #276]	; (8005ac8 <HAL_TIM_PWM_Start+0x16c>)
 80059b2:	ea24 0402 	bic.w	r4, r4, r2
 80059b6:	4945      	ldr	r1, [pc, #276]	; (8005acc <HAL_TIM_PWM_Start+0x170>)
 80059b8:	42ab      	cmp	r3, r5
 80059ba:	bf18      	it	ne
 80059bc:	4283      	cmpne	r3, r0
 80059be:	f505 5570 	add.w	r5, r5, #15360	; 0x3c00
 80059c2:	621c      	str	r4, [r3, #32]
 80059c4:	6a1c      	ldr	r4, [r3, #32]
 80059c6:	bf0c      	ite	eq
 80059c8:	2001      	moveq	r0, #1
 80059ca:	2000      	movne	r0, #0
 80059cc:	4322      	orrs	r2, r4
 80059ce:	42ab      	cmp	r3, r5
 80059d0:	bf08      	it	eq
 80059d2:	f040 0001 	orreq.w	r0, r0, #1
 80059d6:	621a      	str	r2, [r3, #32]
 80059d8:	4a3d      	ldr	r2, [pc, #244]	; (8005ad0 <HAL_TIM_PWM_Start+0x174>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	bf18      	it	ne
 80059de:	428b      	cmpne	r3, r1
 80059e0:	d000      	beq.n	80059e4 <HAL_TIM_PWM_Start+0x88>
 80059e2:	b118      	cbz	r0, 80059ec <HAL_TIM_PWM_Start+0x90>
 80059e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80059e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80059ea:	645a      	str	r2, [r3, #68]	; 0x44
 80059ec:	4a39      	ldr	r2, [pc, #228]	; (8005ad4 <HAL_TIM_PWM_Start+0x178>)
 80059ee:	4c3a      	ldr	r4, [pc, #232]	; (8005ad8 <HAL_TIM_PWM_Start+0x17c>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	bf18      	it	ne
 80059f4:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 80059f8:	4938      	ldr	r1, [pc, #224]	; (8005adc <HAL_TIM_PWM_Start+0x180>)
 80059fa:	bf0c      	ite	eq
 80059fc:	2201      	moveq	r2, #1
 80059fe:	2200      	movne	r2, #0
 8005a00:	42a3      	cmp	r3, r4
 8005a02:	bf08      	it	eq
 8005a04:	f042 0201 	orreq.w	r2, r2, #1
 8005a08:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
 8005a0c:	428b      	cmp	r3, r1
 8005a0e:	bf08      	it	eq
 8005a10:	f042 0201 	orreq.w	r2, r2, #1
 8005a14:	f501 4154 	add.w	r1, r1, #54272	; 0xd400
 8005a18:	42a3      	cmp	r3, r4
 8005a1a:	bf08      	it	eq
 8005a1c:	f042 0201 	orreq.w	r2, r2, #1
 8005a20:	428b      	cmp	r3, r1
 8005a22:	bf08      	it	eq
 8005a24:	f042 0201 	orreq.w	r2, r2, #1
 8005a28:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005a2c:	428b      	cmp	r3, r1
 8005a2e:	bf08      	it	eq
 8005a30:	f042 0201 	orreq.w	r2, r2, #1
 8005a34:	b90a      	cbnz	r2, 8005a3a <HAL_TIM_PWM_Start+0xde>
 8005a36:	2800      	cmp	r0, #0
 8005a38:	d03e      	beq.n	8005ab8 <HAL_TIM_PWM_Start+0x15c>
 8005a3a:	6899      	ldr	r1, [r3, #8]
 8005a3c:	4a28      	ldr	r2, [pc, #160]	; (8005ae0 <HAL_TIM_PWM_Start+0x184>)
 8005a3e:	400a      	ands	r2, r1
 8005a40:	2a06      	cmp	r2, #6
 8005a42:	d036      	beq.n	8005ab2 <HAL_TIM_PWM_Start+0x156>
 8005a44:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8005a48:	d033      	beq.n	8005ab2 <HAL_TIM_PWM_Start+0x156>
 8005a4a:	681a      	ldr	r2, [r3, #0]
 8005a4c:	2000      	movs	r0, #0
 8005a4e:	f042 0201 	orr.w	r2, r2, #1
 8005a52:	601a      	str	r2, [r3, #0]
 8005a54:	bc30      	pop	{r4, r5}
 8005a56:	4770      	bx	lr
 8005a58:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8005a5c:	2b01      	cmp	r3, #1
 8005a5e:	d118      	bne.n	8005a92 <HAL_TIM_PWM_Start+0x136>
 8005a60:	2302      	movs	r3, #2
 8005a62:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
 8005a66:	e79b      	b.n	80059a0 <HAL_TIM_PWM_Start+0x44>
 8005a68:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 8005a6c:	2b01      	cmp	r3, #1
 8005a6e:	d110      	bne.n	8005a92 <HAL_TIM_PWM_Start+0x136>
 8005a70:	2302      	movs	r3, #2
 8005a72:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
 8005a76:	e793      	b.n	80059a0 <HAL_TIM_PWM_Start+0x44>
 8005a78:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8005a7c:	2b01      	cmp	r3, #1
 8005a7e:	d108      	bne.n	8005a92 <HAL_TIM_PWM_Start+0x136>
 8005a80:	2302      	movs	r3, #2
 8005a82:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8005a86:	e78b      	b.n	80059a0 <HAL_TIM_PWM_Start+0x44>
 8005a88:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8005a8c:	2b01      	cmp	r3, #1
 8005a8e:	f43f af77 	beq.w	8005980 <HAL_TIM_PWM_Start+0x24>
 8005a92:	2001      	movs	r0, #1
 8005a94:	4770      	bx	lr
 8005a96:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 8005a9a:	2b01      	cmp	r3, #1
 8005a9c:	f43f af70 	beq.w	8005980 <HAL_TIM_PWM_Start+0x24>
 8005aa0:	e7f7      	b.n	8005a92 <HAL_TIM_PWM_Start+0x136>
 8005aa2:	2302      	movs	r3, #2
 8005aa4:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 8005aa8:	e77a      	b.n	80059a0 <HAL_TIM_PWM_Start+0x44>
 8005aaa:	2302      	movs	r3, #2
 8005aac:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
 8005ab0:	e776      	b.n	80059a0 <HAL_TIM_PWM_Start+0x44>
 8005ab2:	2000      	movs	r0, #0
 8005ab4:	bc30      	pop	{r4, r5}
 8005ab6:	4770      	bx	lr
 8005ab8:	681a      	ldr	r2, [r3, #0]
 8005aba:	f042 0201 	orr.w	r2, r2, #1
 8005abe:	601a      	str	r2, [r3, #0]
 8005ac0:	e7c8      	b.n	8005a54 <HAL_TIM_PWM_Start+0xf8>
 8005ac2:	bf00      	nop
 8005ac4:	40010000 	.word	0x40010000
 8005ac8:	40010400 	.word	0x40010400
 8005acc:	40014800 	.word	0x40014800
 8005ad0:	40014400 	.word	0x40014400
 8005ad4:	40000400 	.word	0x40000400
 8005ad8:	40000800 	.word	0x40000800
 8005adc:	40000c00 	.word	0x40000c00
 8005ae0:	00010007 	.word	0x00010007

08005ae4 <HAL_TIM_OnePulse_MspInit>:
 8005ae4:	4770      	bx	lr
 8005ae6:	bf00      	nop

08005ae8 <HAL_TIM_OnePulse_Init>:
  if (htim == NULL)
 8005ae8:	2800      	cmp	r0, #0
 8005aea:	f000 80ab 	beq.w	8005c44 <HAL_TIM_OnePulse_Init+0x15c>
{
 8005aee:	b570      	push	{r4, r5, r6, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8005af0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005af4:	4604      	mov	r4, r0
 8005af6:	460d      	mov	r5, r1
 8005af8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d07a      	beq.n	8005bf6 <HAL_TIM_OnePulse_Init+0x10e>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b00:	6823      	ldr	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8005b02:	2202      	movs	r2, #2
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b04:	4950      	ldr	r1, [pc, #320]	; (8005c48 <HAL_TIM_OnePulse_Init+0x160>)
 8005b06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
  htim->State = HAL_TIM_STATE_BUSY;
 8005b0a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b0e:	eba3 0101 	sub.w	r1, r3, r1
  tmpcr1 = TIMx->CR1;
 8005b12:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b14:	fab1 f181 	clz	r1, r1
 8005b18:	ea4f 1151 	mov.w	r1, r1, lsr #5
 8005b1c:	d046      	beq.n	8005bac <HAL_TIM_OnePulse_Init+0xc4>
 8005b1e:	2900      	cmp	r1, #0
 8005b20:	d144      	bne.n	8005bac <HAL_TIM_OnePulse_Init+0xc4>
 8005b22:	484a      	ldr	r0, [pc, #296]	; (8005c4c <HAL_TIM_OnePulse_Init+0x164>)
 8005b24:	4283      	cmp	r3, r0
 8005b26:	d06b      	beq.n	8005c00 <HAL_TIM_OnePulse_Init+0x118>
 8005b28:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8005b2c:	4283      	cmp	r3, r0
 8005b2e:	d067      	beq.n	8005c00 <HAL_TIM_OnePulse_Init+0x118>
 8005b30:	4e47      	ldr	r6, [pc, #284]	; (8005c50 <HAL_TIM_OnePulse_Init+0x168>)
 8005b32:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8005b36:	1b9e      	subs	r6, r3, r6
 8005b38:	4283      	cmp	r3, r0
 8005b3a:	fab6 f686 	clz	r6, r6
 8005b3e:	ea4f 1656 	mov.w	r6, r6, lsr #5
 8005b42:	d067      	beq.n	8005c14 <HAL_TIM_OnePulse_Init+0x12c>
 8005b44:	2e00      	cmp	r6, #0
 8005b46:	d165      	bne.n	8005c14 <HAL_TIM_OnePulse_Init+0x12c>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b48:	4942      	ldr	r1, [pc, #264]	; (8005c54 <HAL_TIM_OnePulse_Init+0x16c>)
 8005b4a:	428b      	cmp	r3, r1
 8005b4c:	d06c      	beq.n	8005c28 <HAL_TIM_OnePulse_Init+0x140>
 8005b4e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005b52:	428b      	cmp	r3, r1
 8005b54:	d068      	beq.n	8005c28 <HAL_TIM_OnePulse_Init+0x140>
 8005b56:	4840      	ldr	r0, [pc, #256]	; (8005c58 <HAL_TIM_OnePulse_Init+0x170>)
 8005b58:	f5a1 41c8 	sub.w	r1, r1, #25600	; 0x6400
 8005b5c:	428b      	cmp	r3, r1
 8005b5e:	bf18      	it	ne
 8005b60:	4283      	cmpne	r3, r0
 8005b62:	d061      	beq.n	8005c28 <HAL_TIM_OnePulse_Init+0x140>
 8005b64:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005b68:	428b      	cmp	r3, r1
 8005b6a:	d05d      	beq.n	8005c28 <HAL_TIM_OnePulse_Init+0x140>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b6c:	69a1      	ldr	r1, [r4, #24]
 8005b6e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005b72:	430a      	orrs	r2, r1
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b74:	68e1      	ldr	r1, [r4, #12]
  TIMx->CR1 = tmpcr1;
 8005b76:	601a      	str	r2, [r3, #0]
  TIMx->PSC = Structure->Prescaler;
 8005b78:	6862      	ldr	r2, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b7a:	62d9      	str	r1, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005b7c:	629a      	str	r2, [r3, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8005b7e:	2201      	movs	r2, #1
  return HAL_OK;
 8005b80:	2000      	movs	r0, #0
  TIMx->EGR = TIM_EGR_UG;
 8005b82:	615a      	str	r2, [r3, #20]
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8005b84:	6819      	ldr	r1, [r3, #0]
 8005b86:	f021 0108 	bic.w	r1, r1, #8
 8005b8a:	6019      	str	r1, [r3, #0]
  htim->Instance->CR1 |= OnePulseMode;
 8005b8c:	6819      	ldr	r1, [r3, #0]
 8005b8e:	4329      	orrs	r1, r5
 8005b90:	6019      	str	r1, [r3, #0]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b92:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005b96:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005b9a:	f884 203f 	strb.w	r2, [r4, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005b9e:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005ba2:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8005ba6:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
}
 8005baa:	bd70      	pop	{r4, r5, r6, pc}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005bac:	4e28      	ldr	r6, [pc, #160]	; (8005c50 <HAL_TIM_OnePulse_Init+0x168>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005bae:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005bb2:	68a0      	ldr	r0, [r4, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005bb4:	1b9e      	subs	r6, r3, r6
    tmpcr1 |= Structure->CounterMode;
 8005bb6:	4302      	orrs	r2, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005bb8:	fab6 f686 	clz	r6, r6
 8005bbc:	0976      	lsrs	r6, r6, #5
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005bbe:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8005bc0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005bc4:	4302      	orrs	r2, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005bc6:	69a0      	ldr	r0, [r4, #24]
 8005bc8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005bcc:	4302      	orrs	r2, r0
  TIMx->CR1 = tmpcr1;
 8005bce:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005bd0:	68e2      	ldr	r2, [r4, #12]
 8005bd2:	62da      	str	r2, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005bd4:	6862      	ldr	r2, [r4, #4]
 8005bd6:	629a      	str	r2, [r3, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005bd8:	b951      	cbnz	r1, 8005bf0 <HAL_TIM_OnePulse_Init+0x108>
 8005bda:	b94e      	cbnz	r6, 8005bf0 <HAL_TIM_OnePulse_Init+0x108>
 8005bdc:	491d      	ldr	r1, [pc, #116]	; (8005c54 <HAL_TIM_OnePulse_Init+0x16c>)
 8005bde:	4a1f      	ldr	r2, [pc, #124]	; (8005c5c <HAL_TIM_OnePulse_Init+0x174>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	bf18      	it	ne
 8005be4:	428b      	cmpne	r3, r1
 8005be6:	d003      	beq.n	8005bf0 <HAL_TIM_OnePulse_Init+0x108>
 8005be8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d1c6      	bne.n	8005b7e <HAL_TIM_OnePulse_Init+0x96>
    TIMx->RCR = Structure->RepetitionCounter;
 8005bf0:	6962      	ldr	r2, [r4, #20]
 8005bf2:	631a      	str	r2, [r3, #48]	; 0x30
 8005bf4:	e7c3      	b.n	8005b7e <HAL_TIM_OnePulse_Init+0x96>
    htim->Lock = HAL_UNLOCKED;
 8005bf6:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_OnePulse_MspInit(htim);
 8005bfa:	f7ff ff73 	bl	8005ae4 <HAL_TIM_OnePulse_MspInit>
 8005bfe:	e77f      	b.n	8005b00 <HAL_TIM_OnePulse_Init+0x18>
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c00:	4e13      	ldr	r6, [pc, #76]	; (8005c50 <HAL_TIM_OnePulse_Init+0x168>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c02:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005c06:	68a0      	ldr	r0, [r4, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c08:	1b9e      	subs	r6, r3, r6
    tmpcr1 |= Structure->CounterMode;
 8005c0a:	4302      	orrs	r2, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c0c:	fab6 f686 	clz	r6, r6
 8005c10:	0976      	lsrs	r6, r6, #5
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c12:	e7d4      	b.n	8005bbe <HAL_TIM_OnePulse_Init+0xd6>
    tmpcr1 |= Structure->CounterMode;
 8005c14:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c16:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005c1a:	4302      	orrs	r2, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c1c:	4810      	ldr	r0, [pc, #64]	; (8005c60 <HAL_TIM_OnePulse_Init+0x178>)
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c1e:	4283      	cmp	r3, r0
 8005c20:	d0cd      	beq.n	8005bbe <HAL_TIM_OnePulse_Init+0xd6>
 8005c22:	2e00      	cmp	r6, #0
 8005c24:	d1cb      	bne.n	8005bbe <HAL_TIM_OnePulse_Init+0xd6>
 8005c26:	e78f      	b.n	8005b48 <HAL_TIM_OnePulse_Init+0x60>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c28:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c2a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c2e:	430a      	orrs	r2, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c30:	69a1      	ldr	r1, [r4, #24]
 8005c32:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005c36:	430a      	orrs	r2, r1
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c38:	68e1      	ldr	r1, [r4, #12]
  TIMx->CR1 = tmpcr1;
 8005c3a:	601a      	str	r2, [r3, #0]
  TIMx->PSC = Structure->Prescaler;
 8005c3c:	6862      	ldr	r2, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c3e:	62d9      	str	r1, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005c40:	629a      	str	r2, [r3, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c42:	e7cb      	b.n	8005bdc <HAL_TIM_OnePulse_Init+0xf4>
    return HAL_ERROR;
 8005c44:	2001      	movs	r0, #1
}
 8005c46:	4770      	bx	lr
 8005c48:	40010000 	.word	0x40010000
 8005c4c:	40000400 	.word	0x40000400
 8005c50:	40010400 	.word	0x40010400
 8005c54:	40014000 	.word	0x40014000
 8005c58:	40014800 	.word	0x40014800
 8005c5c:	40014400 	.word	0x40014400
 8005c60:	40000c00 	.word	0x40000c00

08005c64 <HAL_TIM_SlaveConfigSynchro>:
  __HAL_LOCK(htim);
 8005c64:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005c68:	2b01      	cmp	r3, #1
 8005c6a:	d078      	beq.n	8005d5e <HAL_TIM_SlaveConfigSynchro+0xfa>
 8005c6c:	4602      	mov	r2, r0
  htim->State = HAL_TIM_STATE_BUSY;
 8005c6e:	2302      	movs	r3, #2
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c70:	6800      	ldr	r0, [r0, #0]
{
 8005c72:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 8005c74:	2401      	movs	r4, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8005c76:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  __HAL_LOCK(htim);
 8005c7a:	f882 403c 	strb.w	r4, [r2, #60]	; 0x3c

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005c7e:	4c50      	ldr	r4, [pc, #320]	; (8005dc0 <HAL_TIM_SlaveConfigSynchro+0x15c>)
  tmpsmcr = htim->Instance->SMCR;
 8005c80:	6883      	ldr	r3, [r0, #8]
  tmpsmcr |= sSlaveConfig->InputTrigger;

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005c82:	680d      	ldr	r5, [r1, #0]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005c84:	401c      	ands	r4, r3
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8005c86:	684b      	ldr	r3, [r1, #4]
 8005c88:	ea44 0c03 	orr.w	ip, r4, r3
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005c8c:	4c4d      	ldr	r4, [pc, #308]	; (8005dc4 <HAL_TIM_SlaveConfigSynchro+0x160>)

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8005c8e:	2b60      	cmp	r3, #96	; 0x60
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005c90:	ea0c 0404 	and.w	r4, ip, r4
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005c94:	ea44 0405 	orr.w	r4, r4, r5
  htim->Instance->SMCR = tmpsmcr;
 8005c98:	6084      	str	r4, [r0, #8]
  switch (sSlaveConfig->InputTrigger)
 8005c9a:	d07e      	beq.n	8005d9a <HAL_TIM_SlaveConfigSynchro+0x136>
 8005c9c:	d826      	bhi.n	8005cec <HAL_TIM_SlaveConfigSynchro+0x88>
 8005c9e:	2b40      	cmp	r3, #64	; 0x40
 8005ca0:	d06b      	beq.n	8005d7a <HAL_TIM_SlaveConfigSynchro+0x116>
 8005ca2:	d933      	bls.n	8005d0c <HAL_TIM_SlaveConfigSynchro+0xa8>
 8005ca4:	2b50      	cmp	r3, #80	; 0x50
 8005ca6:	d13c      	bne.n	8005d22 <HAL_TIM_SlaveConfigSynchro+0xbe>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
                               sSlaveConfig->TriggerPolarity,
 8005ca8:	688b      	ldr	r3, [r1, #8]
                               sSlaveConfig->TriggerFilter);
 8005caa:	690c      	ldr	r4, [r1, #16]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005cac:	6a01      	ldr	r1, [r0, #32]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005cae:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8005cb2:	4319      	orrs	r1, r3
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005cb4:	6a03      	ldr	r3, [r0, #32]
 8005cb6:	f023 0301 	bic.w	r3, r3, #1
 8005cba:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005cbc:	6983      	ldr	r3, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005cbe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005cc2:	ea43 1304 	orr.w	r3, r3, r4, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005cc6:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8005cc8:	6201      	str	r1, [r0, #32]
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8005cca:	68c3      	ldr	r3, [r0, #12]
  __HAL_UNLOCK(htim);
 8005ccc:	2100      	movs	r1, #0
  htim->State = HAL_TIM_STATE_READY;
 8005cce:	2401      	movs	r4, #1
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8005cd0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005cd4:	60c3      	str	r3, [r0, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8005cd6:	68c3      	ldr	r3, [r0, #12]
 8005cd8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005cdc:	60c3      	str	r3, [r0, #12]
  return HAL_OK;
 8005cde:	4608      	mov	r0, r1
  htim->State = HAL_TIM_STATE_READY;
 8005ce0:	f882 403d 	strb.w	r4, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8005ce4:	f882 103c 	strb.w	r1, [r2, #60]	; 0x3c
}
 8005ce8:	bc30      	pop	{r4, r5}
 8005cea:	4770      	bx	lr
  switch (sSlaveConfig->InputTrigger)
 8005cec:	2b70      	cmp	r3, #112	; 0x70
 8005cee:	d038      	beq.n	8005d62 <HAL_TIM_SlaveConfigSynchro+0xfe>
 8005cf0:	2b6f      	cmp	r3, #111	; 0x6f
 8005cf2:	d916      	bls.n	8005d22 <HAL_TIM_SlaveConfigSynchro+0xbe>
 8005cf4:	4934      	ldr	r1, [pc, #208]	; (8005dc8 <HAL_TIM_SlaveConfigSynchro+0x164>)
 8005cf6:	428b      	cmp	r3, r1
 8005cf8:	d0e7      	beq.n	8005cca <HAL_TIM_SlaveConfigSynchro+0x66>
 8005cfa:	d91b      	bls.n	8005d34 <HAL_TIM_SlaveConfigSynchro+0xd0>
 8005cfc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005d00:	d0e3      	beq.n	8005cca <HAL_TIM_SlaveConfigSynchro+0x66>
 8005d02:	d909      	bls.n	8005d18 <HAL_TIM_SlaveConfigSynchro+0xb4>
 8005d04:	4931      	ldr	r1, [pc, #196]	; (8005dcc <HAL_TIM_SlaveConfigSynchro+0x168>)
 8005d06:	428b      	cmp	r3, r1
 8005d08:	d0df      	beq.n	8005cca <HAL_TIM_SlaveConfigSynchro+0x66>
 8005d0a:	e00a      	b.n	8005d22 <HAL_TIM_SlaveConfigSynchro+0xbe>
 8005d0c:	2b20      	cmp	r3, #32
 8005d0e:	d0dc      	beq.n	8005cca <HAL_TIM_SlaveConfigSynchro+0x66>
 8005d10:	d91b      	bls.n	8005d4a <HAL_TIM_SlaveConfigSynchro+0xe6>
 8005d12:	2b30      	cmp	r3, #48	; 0x30
 8005d14:	d105      	bne.n	8005d22 <HAL_TIM_SlaveConfigSynchro+0xbe>
 8005d16:	e7d8      	b.n	8005cca <HAL_TIM_SlaveConfigSynchro+0x66>
 8005d18:	f023 0310 	bic.w	r3, r3, #16
 8005d1c:	492c      	ldr	r1, [pc, #176]	; (8005dd0 <HAL_TIM_SlaveConfigSynchro+0x16c>)
 8005d1e:	428b      	cmp	r3, r1
 8005d20:	d0d3      	beq.n	8005cca <HAL_TIM_SlaveConfigSynchro+0x66>
    htim->State = HAL_TIM_STATE_READY;
 8005d22:	2301      	movs	r3, #1
    __HAL_UNLOCK(htim);
 8005d24:	2100      	movs	r1, #0
    return HAL_ERROR;
 8005d26:	4618      	mov	r0, r3
    htim->State = HAL_TIM_STATE_READY;
 8005d28:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8005d2c:	f882 103c 	strb.w	r1, [r2, #60]	; 0x3c
}
 8005d30:	bc30      	pop	{r4, r5}
 8005d32:	4770      	bx	lr
  switch (sSlaveConfig->InputTrigger)
 8005d34:	3930      	subs	r1, #48	; 0x30
 8005d36:	428b      	cmp	r3, r1
 8005d38:	d0c7      	beq.n	8005cca <HAL_TIM_SlaveConfigSynchro+0x66>
 8005d3a:	d90a      	bls.n	8005d52 <HAL_TIM_SlaveConfigSynchro+0xee>
 8005d3c:	4925      	ldr	r1, [pc, #148]	; (8005dd4 <HAL_TIM_SlaveConfigSynchro+0x170>)
 8005d3e:	428b      	cmp	r3, r1
 8005d40:	d0c3      	beq.n	8005cca <HAL_TIM_SlaveConfigSynchro+0x66>
 8005d42:	3110      	adds	r1, #16
 8005d44:	428b      	cmp	r3, r1
 8005d46:	d0c0      	beq.n	8005cca <HAL_TIM_SlaveConfigSynchro+0x66>
 8005d48:	e7eb      	b.n	8005d22 <HAL_TIM_SlaveConfigSynchro+0xbe>
 8005d4a:	f033 0310 	bics.w	r3, r3, #16
 8005d4e:	d1e8      	bne.n	8005d22 <HAL_TIM_SlaveConfigSynchro+0xbe>
 8005d50:	e7bb      	b.n	8005cca <HAL_TIM_SlaveConfigSynchro+0x66>
 8005d52:	f023 0310 	bic.w	r3, r3, #16
 8005d56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d5a:	d1e2      	bne.n	8005d22 <HAL_TIM_SlaveConfigSynchro+0xbe>
 8005d5c:	e7b5      	b.n	8005cca <HAL_TIM_SlaveConfigSynchro+0x66>
  __HAL_LOCK(htim);
 8005d5e:	2002      	movs	r0, #2
}
 8005d60:	4770      	bx	lr

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005d62:	e9d1 5302 	ldrd	r5, r3, [r1, #8]
  tmpsmcr = TIMx->SMCR;
 8005d66:	6884      	ldr	r4, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005d68:	432b      	orrs	r3, r5
 8005d6a:	690d      	ldr	r5, [r1, #16]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d6c:	f424 417f 	bic.w	r1, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005d70:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8005d74:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d76:	6083      	str	r3, [r0, #8]
 8005d78:	e7a7      	b.n	8005cca <HAL_TIM_SlaveConfigSynchro+0x66>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8005d7a:	2d05      	cmp	r5, #5
 8005d7c:	d0d1      	beq.n	8005d22 <HAL_TIM_SlaveConfigSynchro+0xbe>
      tmpccer = htim->Instance->CCER;
 8005d7e:	6a04      	ldr	r4, [r0, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8005d80:	6a03      	ldr	r3, [r0, #32]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8005d82:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8005d84:	f023 0301 	bic.w	r3, r3, #1
 8005d88:	6203      	str	r3, [r0, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8005d8a:	6983      	ldr	r3, [r0, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d8c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8005d90:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 8005d94:	6183      	str	r3, [r0, #24]
      htim->Instance->CCER = tmpccer;
 8005d96:	6204      	str	r4, [r0, #32]
      break;
 8005d98:	e797      	b.n	8005cca <HAL_TIM_SlaveConfigSynchro+0x66>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d9a:	6a03      	ldr	r3, [r0, #32]
                               sSlaveConfig->TriggerPolarity,
 8005d9c:	688c      	ldr	r4, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d9e:	f023 0310 	bic.w	r3, r3, #16
                               sSlaveConfig->TriggerFilter);
 8005da2:	690d      	ldr	r5, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005da4:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005da6:	6981      	ldr	r1, [r0, #24]
  tmpccer = TIMx->CCER;
 8005da8:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005daa:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005dae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005db2:	ea41 3105 	orr.w	r1, r1, r5, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 8005db6:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 8005dba:	6181      	str	r1, [r0, #24]
  TIMx->CCER = tmpccer;
 8005dbc:	6203      	str	r3, [r0, #32]
 8005dbe:	e784      	b.n	8005cca <HAL_TIM_SlaveConfigSynchro+0x66>
 8005dc0:	ffcfff8f 	.word	0xffcfff8f
 8005dc4:	fffefff8 	.word	0xfffefff8
 8005dc8:	00100050 	.word	0x00100050
 8005dcc:	00200010 	.word	0x00200010
 8005dd0:	00100060 	.word	0x00100060
 8005dd4:	00100030 	.word	0x00100030

08005dd8 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005dd8:	6a03      	ldr	r3, [r0, #32]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005dda:	4a1c      	ldr	r2, [pc, #112]	; (8005e4c <TIM_OC2_SetConfig+0x74>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ddc:	f023 0310 	bic.w	r3, r3, #16
{
 8005de0:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005de2:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8005de4:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8005de6:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8005de8:	6985      	ldr	r5, [r0, #24]
  tmpccer &= ~TIM_CCER_CC2P;
 8005dea:	f023 0320 	bic.w	r3, r3, #32
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005dee:	402a      	ands	r2, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005df0:	680d      	ldr	r5, [r1, #0]
 8005df2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005df6:	688d      	ldr	r5, [r1, #8]
 8005df8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005dfc:	4d14      	ldr	r5, [pc, #80]	; (8005e50 <TIM_OC2_SetConfig+0x78>)
 8005dfe:	42a8      	cmp	r0, r5
 8005e00:	d00e      	beq.n	8005e20 <TIM_OC2_SetConfig+0x48>
 8005e02:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005e06:	42a8      	cmp	r0, r5
 8005e08:	d00a      	beq.n	8005e20 <TIM_OC2_SetConfig+0x48>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e0a:	4e12      	ldr	r6, [pc, #72]	; (8005e54 <TIM_OC2_SetConfig+0x7c>)
 8005e0c:	4d12      	ldr	r5, [pc, #72]	; (8005e58 <TIM_OC2_SetConfig+0x80>)
 8005e0e:	42a8      	cmp	r0, r5
 8005e10:	bf18      	it	ne
 8005e12:	42b0      	cmpne	r0, r6
 8005e14:	d00b      	beq.n	8005e2e <TIM_OC2_SetConfig+0x56>
 8005e16:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005e1a:	42a8      	cmp	r0, r5
 8005e1c:	d10f      	bne.n	8005e3e <TIM_OC2_SetConfig+0x66>
 8005e1e:	e006      	b.n	8005e2e <TIM_OC2_SetConfig+0x56>
    tmpccer &= ~TIM_CCER_CC2NP;
 8005e20:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005e24:	68cd      	ldr	r5, [r1, #12]
 8005e26:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8005e2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005e2e:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005e32:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
 8005e36:	ea46 0c05 	orr.w	ip, r6, r5
 8005e3a:	ea44 048c 	orr.w	r4, r4, ip, lsl #2
  TIMx->CCR2 = OC_Config->Pulse;
 8005e3e:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8005e40:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8005e42:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8005e44:	6381      	str	r1, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8005e46:	6203      	str	r3, [r0, #32]
}
 8005e48:	bc70      	pop	{r4, r5, r6}
 8005e4a:	4770      	bx	lr
 8005e4c:	feff8cff 	.word	0xfeff8cff
 8005e50:	40010000 	.word	0x40010000
 8005e54:	40014000 	.word	0x40014000
 8005e58:	40014400 	.word	0x40014400

08005e5c <HAL_TIM_PWM_ConfigChannel>:
{
 8005e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8005e5e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005e62:	2b01      	cmp	r3, #1
 8005e64:	f000 810d 	beq.w	8006082 <HAL_TIM_PWM_ConfigChannel+0x226>
 8005e68:	2301      	movs	r3, #1
 8005e6a:	4604      	mov	r4, r0
 8005e6c:	460d      	mov	r5, r1
 8005e6e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8005e72:	2a14      	cmp	r2, #20
 8005e74:	d816      	bhi.n	8005ea4 <HAL_TIM_PWM_ConfigChannel+0x48>
 8005e76:	e8df f012 	tbh	[pc, r2, lsl #1]
 8005e7a:	0058      	.short	0x0058
 8005e7c:	00150015 	.word	0x00150015
 8005e80:	00690015 	.word	0x00690015
 8005e84:	00150015 	.word	0x00150015
 8005e88:	007b0015 	.word	0x007b0015
 8005e8c:	00150015 	.word	0x00150015
 8005e90:	008c0015 	.word	0x008c0015
 8005e94:	00150015 	.word	0x00150015
 8005e98:	00c90015 	.word	0x00c90015
 8005e9c:	00150015 	.word	0x00150015
 8005ea0:	001b0015 	.word	0x001b0015
 8005ea4:	2201      	movs	r2, #1
  __HAL_UNLOCK(htim);
 8005ea6:	2300      	movs	r3, #0
}
 8005ea8:	4610      	mov	r0, r2
  __HAL_UNLOCK(htim);
 8005eaa:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8005eae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005eb0:	6803      	ldr	r3, [r0, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005eb2:	4975      	ldr	r1, [pc, #468]	; (8006088 <HAL_TIM_PWM_ConfigChannel+0x22c>)
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005eb4:	6a1a      	ldr	r2, [r3, #32]
 8005eb6:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8005eba:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8005ebc:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8005ebe:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 8005ec0:	6d5e      	ldr	r6, [r3, #84]	; 0x54
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005ec2:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005ec6:	4031      	ands	r1, r6
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ec8:	682e      	ldr	r6, [r5, #0]
 8005eca:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005ece:	68ae      	ldr	r6, [r5, #8]
 8005ed0:	ea42 5206 	orr.w	r2, r2, r6, lsl #20
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ed4:	4e6d      	ldr	r6, [pc, #436]	; (800608c <HAL_TIM_PWM_ConfigChannel+0x230>)
 8005ed6:	42b3      	cmp	r3, r6
 8005ed8:	d00e      	beq.n	8005ef8 <HAL_TIM_PWM_ConfigChannel+0x9c>
 8005eda:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8005ede:	42b3      	cmp	r3, r6
 8005ee0:	d00a      	beq.n	8005ef8 <HAL_TIM_PWM_ConfigChannel+0x9c>
 8005ee2:	4f6b      	ldr	r7, [pc, #428]	; (8006090 <HAL_TIM_PWM_ConfigChannel+0x234>)
 8005ee4:	f506 4680 	add.w	r6, r6, #16384	; 0x4000
 8005ee8:	42b3      	cmp	r3, r6
 8005eea:	bf18      	it	ne
 8005eec:	42bb      	cmpne	r3, r7
 8005eee:	d003      	beq.n	8005ef8 <HAL_TIM_PWM_ConfigChannel+0x9c>
 8005ef0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8005ef4:	42b3      	cmp	r3, r6
 8005ef6:	d104      	bne.n	8005f02 <HAL_TIM_PWM_ConfigChannel+0xa6>
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005ef8:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005efc:	696e      	ldr	r6, [r5, #20]
 8005efe:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
  TIMx->CR2 = tmpcr2;
 8005f02:	6058      	str	r0, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 8005f04:	6559      	str	r1, [r3, #84]	; 0x54
  TIMx->CCR6 = OC_Config->Pulse;
 8005f06:	6869      	ldr	r1, [r5, #4]
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005f08:	6928      	ldr	r0, [r5, #16]
  TIMx->CCR6 = OC_Config->Pulse;
 8005f0a:	65d9      	str	r1, [r3, #92]	; 0x5c
  TIMx->CCER = tmpccer;
 8005f0c:	621a      	str	r2, [r3, #32]
  HAL_StatusTypeDef status = HAL_OK;
 8005f0e:	2200      	movs	r2, #0
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005f10:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005f12:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8005f16:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005f18:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005f1a:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8005f1e:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005f20:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005f22:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 8005f26:	6559      	str	r1, [r3, #84]	; 0x54
      break;
 8005f28:	e7bd      	b.n	8005ea6 <HAL_TIM_PWM_ConfigChannel+0x4a>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005f2a:	6800      	ldr	r0, [r0, #0]
 8005f2c:	f7ff fb12 	bl	8005554 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005f30:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005f32:	6983      	ldr	r3, [r0, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8005f34:	2200      	movs	r2, #0
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005f36:	f043 0308 	orr.w	r3, r3, #8
 8005f3a:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005f3c:	6983      	ldr	r3, [r0, #24]
 8005f3e:	f023 0304 	bic.w	r3, r3, #4
 8005f42:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005f44:	6983      	ldr	r3, [r0, #24]
 8005f46:	430b      	orrs	r3, r1
 8005f48:	6183      	str	r3, [r0, #24]
      break;
 8005f4a:	e7ac      	b.n	8005ea6 <HAL_TIM_PWM_ConfigChannel+0x4a>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005f4c:	6800      	ldr	r0, [r0, #0]
 8005f4e:	f7ff ff43 	bl	8005dd8 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005f52:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005f54:	6983      	ldr	r3, [r0, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8005f56:	2200      	movs	r2, #0
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005f58:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005f5c:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005f5e:	6983      	ldr	r3, [r0, #24]
 8005f60:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005f64:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005f66:	6983      	ldr	r3, [r0, #24]
 8005f68:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005f6c:	6183      	str	r3, [r0, #24]
      break;
 8005f6e:	e79a      	b.n	8005ea6 <HAL_TIM_PWM_ConfigChannel+0x4a>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005f70:	6800      	ldr	r0, [r0, #0]
 8005f72:	f7ff fb2d 	bl	80055d0 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005f76:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005f78:	69c3      	ldr	r3, [r0, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8005f7a:	2200      	movs	r2, #0
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005f7c:	f043 0308 	orr.w	r3, r3, #8
 8005f80:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005f82:	69c3      	ldr	r3, [r0, #28]
 8005f84:	f023 0304 	bic.w	r3, r3, #4
 8005f88:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005f8a:	69c3      	ldr	r3, [r0, #28]
 8005f8c:	430b      	orrs	r3, r1
 8005f8e:	61c3      	str	r3, [r0, #28]
      break;
 8005f90:	e789      	b.n	8005ea6 <HAL_TIM_PWM_ConfigChannel+0x4a>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005f92:	6803      	ldr	r3, [r0, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005f94:	493f      	ldr	r1, [pc, #252]	; (8006094 <HAL_TIM_PWM_ConfigChannel+0x238>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005f96:	6a1a      	ldr	r2, [r3, #32]
 8005f98:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005f9c:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8005f9e:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8005fa0:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8005fa2:	69de      	ldr	r6, [r3, #28]
  tmpccer &= ~TIM_CCER_CC4P;
 8005fa4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005fa8:	4031      	ands	r1, r6
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005faa:	682e      	ldr	r6, [r5, #0]
 8005fac:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005fb0:	68ae      	ldr	r6, [r5, #8]
 8005fb2:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fb6:	4e35      	ldr	r6, [pc, #212]	; (800608c <HAL_TIM_PWM_ConfigChannel+0x230>)
 8005fb8:	42b3      	cmp	r3, r6
 8005fba:	d00e      	beq.n	8005fda <HAL_TIM_PWM_ConfigChannel+0x17e>
 8005fbc:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8005fc0:	42b3      	cmp	r3, r6
 8005fc2:	d00a      	beq.n	8005fda <HAL_TIM_PWM_ConfigChannel+0x17e>
 8005fc4:	4f32      	ldr	r7, [pc, #200]	; (8006090 <HAL_TIM_PWM_ConfigChannel+0x234>)
 8005fc6:	f506 4680 	add.w	r6, r6, #16384	; 0x4000
 8005fca:	42b3      	cmp	r3, r6
 8005fcc:	bf18      	it	ne
 8005fce:	42bb      	cmpne	r3, r7
 8005fd0:	d003      	beq.n	8005fda <HAL_TIM_PWM_ConfigChannel+0x17e>
 8005fd2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8005fd6:	42b3      	cmp	r3, r6
 8005fd8:	d104      	bne.n	8005fe4 <HAL_TIM_PWM_ConfigChannel+0x188>
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005fda:	f420 4080 	bic.w	r0, r0, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005fde:	696e      	ldr	r6, [r5, #20]
 8005fe0:	ea40 1086 	orr.w	r0, r0, r6, lsl #6
  TIMx->CR2 = tmpcr2;
 8005fe4:	6058      	str	r0, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 8005fe6:	61d9      	str	r1, [r3, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8005fe8:	6869      	ldr	r1, [r5, #4]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005fea:	6928      	ldr	r0, [r5, #16]
  TIMx->CCR4 = OC_Config->Pulse;
 8005fec:	6419      	str	r1, [r3, #64]	; 0x40
  TIMx->CCER = tmpccer;
 8005fee:	621a      	str	r2, [r3, #32]
  HAL_StatusTypeDef status = HAL_OK;
 8005ff0:	2200      	movs	r2, #0
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005ff2:	69d9      	ldr	r1, [r3, #28]
 8005ff4:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8005ff8:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005ffa:	69d9      	ldr	r1, [r3, #28]
 8005ffc:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8006000:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006002:	69d9      	ldr	r1, [r3, #28]
 8006004:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 8006008:	61d9      	str	r1, [r3, #28]
      break;
 800600a:	e74c      	b.n	8005ea6 <HAL_TIM_PWM_ConfigChannel+0x4a>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800600c:	6803      	ldr	r3, [r0, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800600e:	4922      	ldr	r1, [pc, #136]	; (8006098 <HAL_TIM_PWM_ConfigChannel+0x23c>)
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006010:	6a1a      	ldr	r2, [r3, #32]
 8006012:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006016:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8006018:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 800601a:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 800601c:	6d5e      	ldr	r6, [r3, #84]	; 0x54
  tmpccer &= ~TIM_CCER_CC5P;
 800601e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006022:	4031      	ands	r1, r6
  tmpccmrx |= OC_Config->OCMode;
 8006024:	682e      	ldr	r6, [r5, #0]
 8006026:	4331      	orrs	r1, r6
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006028:	68ae      	ldr	r6, [r5, #8]
 800602a:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800602e:	4e17      	ldr	r6, [pc, #92]	; (800608c <HAL_TIM_PWM_ConfigChannel+0x230>)
 8006030:	42b3      	cmp	r3, r6
 8006032:	d00e      	beq.n	8006052 <HAL_TIM_PWM_ConfigChannel+0x1f6>
 8006034:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8006038:	42b3      	cmp	r3, r6
 800603a:	d00a      	beq.n	8006052 <HAL_TIM_PWM_ConfigChannel+0x1f6>
 800603c:	4f14      	ldr	r7, [pc, #80]	; (8006090 <HAL_TIM_PWM_ConfigChannel+0x234>)
 800603e:	f506 4680 	add.w	r6, r6, #16384	; 0x4000
 8006042:	42b3      	cmp	r3, r6
 8006044:	bf18      	it	ne
 8006046:	42bb      	cmpne	r3, r7
 8006048:	d003      	beq.n	8006052 <HAL_TIM_PWM_ConfigChannel+0x1f6>
 800604a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800604e:	42b3      	cmp	r3, r6
 8006050:	d104      	bne.n	800605c <HAL_TIM_PWM_ConfigChannel+0x200>
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006052:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006056:	696e      	ldr	r6, [r5, #20]
 8006058:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
  TIMx->CR2 = tmpcr2;
 800605c:	6058      	str	r0, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 800605e:	6559      	str	r1, [r3, #84]	; 0x54
  TIMx->CCR5 = OC_Config->Pulse;
 8006060:	6869      	ldr	r1, [r5, #4]
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006062:	6928      	ldr	r0, [r5, #16]
  TIMx->CCR5 = OC_Config->Pulse;
 8006064:	6599      	str	r1, [r3, #88]	; 0x58
  TIMx->CCER = tmpccer;
 8006066:	621a      	str	r2, [r3, #32]
  HAL_StatusTypeDef status = HAL_OK;
 8006068:	2200      	movs	r2, #0
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800606a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800606c:	f041 0108 	orr.w	r1, r1, #8
 8006070:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006072:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006074:	f021 0104 	bic.w	r1, r1, #4
 8006078:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800607a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800607c:	4301      	orrs	r1, r0
 800607e:	6559      	str	r1, [r3, #84]	; 0x54
      break;
 8006080:	e711      	b.n	8005ea6 <HAL_TIM_PWM_ConfigChannel+0x4a>
  __HAL_LOCK(htim);
 8006082:	2202      	movs	r2, #2
}
 8006084:	4610      	mov	r0, r2
 8006086:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006088:	feff8fff 	.word	0xfeff8fff
 800608c:	40010000 	.word	0x40010000
 8006090:	40014000 	.word	0x40014000
 8006094:	feff8cff 	.word	0xfeff8cff
 8006098:	fffeff8f 	.word	0xfffeff8f

0800609c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800609c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80060a0:	2b01      	cmp	r3, #1
 80060a2:	d053      	beq.n	800614c <HAL_TIMEx_MasterConfigSynchronization+0xb0>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80060a4:	6803      	ldr	r3, [r0, #0]
 80060a6:	4602      	mov	r2, r0
  htim->State = HAL_TIM_STATE_BUSY;
 80060a8:	2002      	movs	r0, #2
{
 80060aa:	b470      	push	{r4, r5, r6}

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80060ac:	4d28      	ldr	r5, [pc, #160]	; (8006150 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
  htim->State = HAL_TIM_STATE_BUSY;
 80060ae:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80060b2:	42ab      	cmp	r3, r5
  tmpcr2 = htim->Instance->CR2;
 80060b4:	6858      	ldr	r0, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 80060b6:	689c      	ldr	r4, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80060b8:	d03e      	beq.n	8006138 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80060ba:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80060be:	42ab      	cmp	r3, r5
 80060c0:	d03a      	beq.n	8006138 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80060c2:	f020 0570 	bic.w	r5, r0, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060c6:	4823      	ldr	r0, [pc, #140]	; (8006154 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80060c8:	4e23      	ldr	r6, [pc, #140]	; (8006158 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 80060ca:	4283      	cmp	r3, r0
 80060cc:	bf18      	it	ne
 80060ce:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 80060d2:	bf0c      	ite	eq
 80060d4:	2001      	moveq	r0, #1
 80060d6:	2000      	movne	r0, #0
 80060d8:	42b3      	cmp	r3, r6
 80060da:	bf08      	it	eq
 80060dc:	f040 0001 	orreq.w	r0, r0, #1
 80060e0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80060e4:	42b3      	cmp	r3, r6
 80060e6:	bf08      	it	eq
 80060e8:	f040 0001 	orreq.w	r0, r0, #1
 80060ec:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 80060f0:	42b3      	cmp	r3, r6
 80060f2:	bf08      	it	eq
 80060f4:	f040 0001 	orreq.w	r0, r0, #1
 80060f8:	f506 3694 	add.w	r6, r6, #75776	; 0x12800
 80060fc:	42b3      	cmp	r3, r6
 80060fe:	bf08      	it	eq
 8006100:	f040 0001 	orreq.w	r0, r0, #1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006104:	680e      	ldr	r6, [r1, #0]
 8006106:	4335      	orrs	r5, r6
  htim->Instance->CR2 = tmpcr2;
 8006108:	605d      	str	r5, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800610a:	4d14      	ldr	r5, [pc, #80]	; (800615c <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 800610c:	42ab      	cmp	r3, r5
 800610e:	bf08      	it	eq
 8006110:	f040 0001 	orreq.w	r0, r0, #1
 8006114:	b910      	cbnz	r0, 800611c <HAL_TIMEx_MasterConfigSynchronization+0x80>
 8006116:	4812      	ldr	r0, [pc, #72]	; (8006160 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006118:	4283      	cmp	r3, r0
 800611a:	d104      	bne.n	8006126 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800611c:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800611e:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006122:	430c      	orrs	r4, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006124:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8006126:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8006128:	2101      	movs	r1, #1

  return HAL_OK;
 800612a:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;
 800612c:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8006130:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
}
 8006134:	bc70      	pop	{r4, r5, r6}
 8006136:	4770      	bx	lr
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006138:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 800613a:	f420 0070 	bic.w	r0, r0, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800613e:	4328      	orrs	r0, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006140:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8006142:	f020 0070 	bic.w	r0, r0, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006146:	4328      	orrs	r0, r5
  htim->Instance->CR2 = tmpcr2;
 8006148:	6058      	str	r0, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800614a:	e7e7      	b.n	800611c <HAL_TIMEx_MasterConfigSynchronization+0x80>
  __HAL_LOCK(htim);
 800614c:	2002      	movs	r0, #2
}
 800614e:	4770      	bx	lr
 8006150:	40010000 	.word	0x40010000
 8006154:	40000400 	.word	0x40000400
 8006158:	40000800 	.word	0x40000800
 800615c:	4000e000 	.word	0x4000e000
 8006160:	4000e400 	.word	0x4000e400

08006164 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006164:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006168:	2b01      	cmp	r3, #1
 800616a:	d045      	beq.n	80061f8 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800616c:	4602      	mov	r2, r0
 800616e:	6848      	ldr	r0, [r1, #4]
{
 8006170:	b410      	push	{r4}
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006172:	e9d1 4302 	ldrd	r4, r3, [r1, #8]
 8006176:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800617a:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800617c:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800617e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006182:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006184:	6908      	ldr	r0, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006186:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800618a:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800618c:	694c      	ldr	r4, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800618e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006192:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006194:	6b08      	ldr	r0, [r1, #48]	; 0x30
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006196:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800619a:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800619c:	698c      	ldr	r4, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800619e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80061a2:	4303      	orrs	r3, r0

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80061a4:	6810      	ldr	r0, [r2, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80061a6:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 80061aa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80061ae:	4c13      	ldr	r4, [pc, #76]	; (80061fc <HAL_TIMEx_ConfigBreakDeadTime+0x98>)
 80061b0:	42a0      	cmp	r0, r4
 80061b2:	d00b      	beq.n	80061cc <HAL_TIMEx_ConfigBreakDeadTime+0x68>
 80061b4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80061b8:	42a0      	cmp	r0, r4
 80061ba:	d007      	beq.n	80061cc <HAL_TIMEx_ConfigBreakDeadTime+0x68>
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;

  __HAL_UNLOCK(htim);
 80061bc:	2100      	movs	r1, #0
  htim->Instance->BDTR = tmpbdtr;
 80061be:	6443      	str	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(htim);
 80061c0:	f882 103c 	strb.w	r1, [r2, #60]	; 0x3c

  return HAL_OK;
 80061c4:	4608      	mov	r0, r1
}
 80061c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80061ca:	4770      	bx	lr
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80061cc:	69cc      	ldr	r4, [r1, #28]
 80061ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80061d2:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80061d4:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 80061d6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80061da:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80061de:	6a0c      	ldr	r4, [r1, #32]
 80061e0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80061e4:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80061e6:	6a4c      	ldr	r4, [r1, #36]	; 0x24
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80061e8:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80061ea:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80061ee:	4323      	orrs	r3, r4
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80061f0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80061f4:	430b      	orrs	r3, r1
 80061f6:	e7e1      	b.n	80061bc <HAL_TIMEx_ConfigBreakDeadTime+0x58>
  __HAL_LOCK(htim);
 80061f8:	2002      	movs	r0, #2
}
 80061fa:	4770      	bx	lr
 80061fc:	40010000 	.word	0x40010000

08006200 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006200:	b084      	sub	sp, #16
 8006202:	4684      	mov	ip, r0
 8006204:	b500      	push	{lr}
 8006206:	b083      	sub	sp, #12
 8006208:	f10d 0e14 	add.w	lr, sp, #20
 800620c:	e88e 000e 	stmia.w	lr, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006210:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006212:	2b01      	cmp	r3, #1
 8006214:	d13e      	bne.n	8006294 <USB_CoreInit+0x94>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006216:	6b82      	ldr	r2, [r0, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006218:	f1a3 1342 	sub.w	r3, r3, #4325442	; 0x420042

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
    if (cfg.use_external_vbus == 1U)
 800621c:	9911      	ldr	r1, [sp, #68]	; 0x44
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800621e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    if (cfg.use_external_vbus == 1U)
 8006222:	2901      	cmp	r1, #1
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006224:	6382      	str	r2, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006226:	68c2      	ldr	r2, [r0, #12]
 8006228:	ea03 0302 	and.w	r3, r3, r2
 800622c:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800622e:	68c3      	ldr	r3, [r0, #12]
 8006230:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006234:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 8006236:	d07c      	beq.n	8006332 <USB_CoreInit+0x132>
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
  __IO uint32_t count = 0U;
 8006238:	2300      	movs	r3, #0
  /* Wait for AHB master IDLE state. */
  do
  {
    count++;

    if (count > 200000U)
 800623a:	4a40      	ldr	r2, [pc, #256]	; (800633c <USB_CoreInit+0x13c>)
  __IO uint32_t count = 0U;
 800623c:	9300      	str	r3, [sp, #0]
 800623e:	e003      	b.n	8006248 <USB_CoreInit+0x48>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006240:	f8dc 3010 	ldr.w	r3, [ip, #16]
 8006244:	2b00      	cmp	r3, #0
 8006246:	db41      	blt.n	80062cc <USB_CoreInit+0xcc>
    count++;
 8006248:	9b00      	ldr	r3, [sp, #0]
 800624a:	3301      	adds	r3, #1
 800624c:	9300      	str	r3, [sp, #0]
    if (count > 200000U)
 800624e:	9b00      	ldr	r3, [sp, #0]
 8006250:	4293      	cmp	r3, r2
 8006252:	d9f5      	bls.n	8006240 <USB_CoreInit+0x40>
      return HAL_TIMEOUT;
 8006254:	2003      	movs	r0, #3
  if (cfg.dma_enable == 1U)
 8006256:	9b07      	ldr	r3, [sp, #28]
 8006258:	2b01      	cmp	r3, #1
 800625a:	d116      	bne.n	800628a <USB_CoreInit+0x8a>
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800625c:	f8dc 205c 	ldr.w	r2, [ip, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8006260:	4b37      	ldr	r3, [pc, #220]	; (8006340 <USB_CoreInit+0x140>)
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8006262:	b292      	uxth	r2, r2
 8006264:	f8cc 205c 	str.w	r2, [ip, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8006268:	f8dc 205c 	ldr.w	r2, [ip, #92]	; 0x5c
 800626c:	4313      	orrs	r3, r2
 800626e:	f8cc 305c 	str.w	r3, [ip, #92]	; 0x5c
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006272:	f8dc 3008 	ldr.w	r3, [ip, #8]
 8006276:	f043 0306 	orr.w	r3, r3, #6
 800627a:	f8cc 3008 	str.w	r3, [ip, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800627e:	f8dc 3008 	ldr.w	r3, [ip, #8]
 8006282:	f043 0320 	orr.w	r3, r3, #32
 8006286:	f8cc 3008 	str.w	r3, [ip, #8]
}
 800628a:	b003      	add	sp, #12
 800628c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006290:	b004      	add	sp, #16
 8006292:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006294:	68c3      	ldr	r3, [r0, #12]
  __IO uint32_t count = 0U;
 8006296:	2100      	movs	r1, #0
    if (count > 200000U)
 8006298:	4a28      	ldr	r2, [pc, #160]	; (800633c <USB_CoreInit+0x13c>)
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800629a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800629e:	60c3      	str	r3, [r0, #12]
  __IO uint32_t count = 0U;
 80062a0:	9101      	str	r1, [sp, #4]
 80062a2:	e003      	b.n	80062ac <USB_CoreInit+0xac>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80062a4:	f8dc 3010 	ldr.w	r3, [ip, #16]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	db2c      	blt.n	8006306 <USB_CoreInit+0x106>
    count++;
 80062ac:	9b01      	ldr	r3, [sp, #4]
 80062ae:	3301      	adds	r3, #1
 80062b0:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 80062b2:	9b01      	ldr	r3, [sp, #4]
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d9f5      	bls.n	80062a4 <USB_CoreInit+0xa4>
      return HAL_TIMEOUT;
 80062b8:	2003      	movs	r0, #3
    if (cfg.battery_charging_enable == 0U)
 80062ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80062bc:	b9e3      	cbnz	r3, 80062f8 <USB_CoreInit+0xf8>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80062be:	f8dc 3038 	ldr.w	r3, [ip, #56]	; 0x38
 80062c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062c6:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
 80062ca:	e7c4      	b.n	8006256 <USB_CoreInit+0x56>

  /* Core Soft Reset */
  count = 0U;
 80062cc:	2300      	movs	r3, #0

  do
  {
    count++;

    if (count > 200000U)
 80062ce:	4a1b      	ldr	r2, [pc, #108]	; (800633c <USB_CoreInit+0x13c>)
  count = 0U;
 80062d0:	9300      	str	r3, [sp, #0]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80062d2:	f8dc 3010 	ldr.w	r3, [ip, #16]
 80062d6:	f043 0301 	orr.w	r3, r3, #1
 80062da:	f8cc 3010 	str.w	r3, [ip, #16]
 80062de:	e004      	b.n	80062ea <USB_CoreInit+0xea>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80062e0:	f8dc 0010 	ldr.w	r0, [ip, #16]
 80062e4:	f010 0001 	ands.w	r0, r0, #1
 80062e8:	d0b5      	beq.n	8006256 <USB_CoreInit+0x56>
    count++;
 80062ea:	9b00      	ldr	r3, [sp, #0]
 80062ec:	3301      	adds	r3, #1
 80062ee:	9300      	str	r3, [sp, #0]
    if (count > 200000U)
 80062f0:	9b00      	ldr	r3, [sp, #0]
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d9f4      	bls.n	80062e0 <USB_CoreInit+0xe0>
 80062f6:	e7ad      	b.n	8006254 <USB_CoreInit+0x54>
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80062f8:	f8dc 3038 	ldr.w	r3, [ip, #56]	; 0x38
 80062fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006300:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
 8006304:	e7a7      	b.n	8006256 <USB_CoreInit+0x56>
  count = 0U;
 8006306:	2300      	movs	r3, #0
    if (count > 200000U)
 8006308:	4a0c      	ldr	r2, [pc, #48]	; (800633c <USB_CoreInit+0x13c>)
  count = 0U;
 800630a:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800630c:	f8dc 3010 	ldr.w	r3, [ip, #16]
 8006310:	f043 0301 	orr.w	r3, r3, #1
 8006314:	f8cc 3010 	str.w	r3, [ip, #16]
 8006318:	e004      	b.n	8006324 <USB_CoreInit+0x124>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800631a:	f8dc 0010 	ldr.w	r0, [ip, #16]
 800631e:	f010 0001 	ands.w	r0, r0, #1
 8006322:	d0ca      	beq.n	80062ba <USB_CoreInit+0xba>
    count++;
 8006324:	9b01      	ldr	r3, [sp, #4]
 8006326:	3301      	adds	r3, #1
 8006328:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 800632a:	9b01      	ldr	r3, [sp, #4]
 800632c:	4293      	cmp	r3, r2
 800632e:	d9f4      	bls.n	800631a <USB_CoreInit+0x11a>
 8006330:	e7c2      	b.n	80062b8 <USB_CoreInit+0xb8>
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006332:	68c3      	ldr	r3, [r0, #12]
 8006334:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006338:	60c3      	str	r3, [r0, #12]
 800633a:	e77d      	b.n	8006238 <USB_CoreInit+0x38>
 800633c:	00030d40 	.word	0x00030d40
 8006340:	03ee0000 	.word	0x03ee0000

08006344 <USB_SetTurnaroundTime>:
  if (speed == USBD_FS_SPEED)
 8006344:	2a02      	cmp	r2, #2
{
 8006346:	4603      	mov	r3, r0
  if (speed == USBD_FS_SPEED)
 8006348:	d00a      	beq.n	8006360 <USB_SetTurnaroundTime+0x1c>
 800634a:	f44f 5110 	mov.w	r1, #9216	; 0x2400
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800634e:	68da      	ldr	r2, [r3, #12]
}
 8006350:	2000      	movs	r0, #0
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006352:	f422 5270 	bic.w	r2, r2, #15360	; 0x3c00
 8006356:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006358:	68da      	ldr	r2, [r3, #12]
 800635a:	430a      	orrs	r2, r1
 800635c:	60da      	str	r2, [r3, #12]
}
 800635e:	4770      	bx	lr
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006360:	4a23      	ldr	r2, [pc, #140]	; (80063f0 <USB_SetTurnaroundTime+0xac>)
 8006362:	4824      	ldr	r0, [pc, #144]	; (80063f4 <USB_SetTurnaroundTime+0xb0>)
 8006364:	440a      	add	r2, r1
 8006366:	4282      	cmp	r2, r0
 8006368:	d92c      	bls.n	80063c4 <USB_SetTurnaroundTime+0x80>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800636a:	4a23      	ldr	r2, [pc, #140]	; (80063f8 <USB_SetTurnaroundTime+0xb4>)
 800636c:	4823      	ldr	r0, [pc, #140]	; (80063fc <USB_SetTurnaroundTime+0xb8>)
 800636e:	440a      	add	r2, r1
 8006370:	4282      	cmp	r2, r0
 8006372:	d92a      	bls.n	80063ca <USB_SetTurnaroundTime+0x86>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006374:	4a22      	ldr	r2, [pc, #136]	; (8006400 <USB_SetTurnaroundTime+0xbc>)
 8006376:	4823      	ldr	r0, [pc, #140]	; (8006404 <USB_SetTurnaroundTime+0xc0>)
 8006378:	440a      	add	r2, r1
 800637a:	4282      	cmp	r2, r0
 800637c:	d928      	bls.n	80063d0 <USB_SetTurnaroundTime+0x8c>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800637e:	4a22      	ldr	r2, [pc, #136]	; (8006408 <USB_SetTurnaroundTime+0xc4>)
 8006380:	4822      	ldr	r0, [pc, #136]	; (800640c <USB_SetTurnaroundTime+0xc8>)
 8006382:	440a      	add	r2, r1
 8006384:	4282      	cmp	r2, r0
 8006386:	d326      	bcc.n	80063d6 <USB_SetTurnaroundTime+0x92>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006388:	4a21      	ldr	r2, [pc, #132]	; (8006410 <USB_SetTurnaroundTime+0xcc>)
 800638a:	4822      	ldr	r0, [pc, #136]	; (8006414 <USB_SetTurnaroundTime+0xd0>)
 800638c:	440a      	add	r2, r1
 800638e:	4282      	cmp	r2, r0
 8006390:	d924      	bls.n	80063dc <USB_SetTurnaroundTime+0x98>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006392:	4a21      	ldr	r2, [pc, #132]	; (8006418 <USB_SetTurnaroundTime+0xd4>)
 8006394:	4821      	ldr	r0, [pc, #132]	; (800641c <USB_SetTurnaroundTime+0xd8>)
 8006396:	440a      	add	r2, r1
 8006398:	4282      	cmp	r2, r0
 800639a:	d322      	bcc.n	80063e2 <USB_SetTurnaroundTime+0x9e>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800639c:	4a20      	ldr	r2, [pc, #128]	; (8006420 <USB_SetTurnaroundTime+0xdc>)
 800639e:	4821      	ldr	r0, [pc, #132]	; (8006424 <USB_SetTurnaroundTime+0xe0>)
 80063a0:	440a      	add	r2, r1
 80063a2:	4282      	cmp	r2, r0
 80063a4:	d3d1      	bcc.n	800634a <USB_SetTurnaroundTime+0x6>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80063a6:	4a20      	ldr	r2, [pc, #128]	; (8006428 <USB_SetTurnaroundTime+0xe4>)
 80063a8:	4820      	ldr	r0, [pc, #128]	; (800642c <USB_SetTurnaroundTime+0xe8>)
 80063aa:	440a      	add	r2, r1
 80063ac:	4282      	cmp	r2, r0
 80063ae:	d31b      	bcc.n	80063e8 <USB_SetTurnaroundTime+0xa4>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80063b0:	4a1f      	ldr	r2, [pc, #124]	; (8006430 <USB_SetTurnaroundTime+0xec>)
 80063b2:	4820      	ldr	r0, [pc, #128]	; (8006434 <USB_SetTurnaroundTime+0xf0>)
 80063b4:	440a      	add	r2, r1
 80063b6:	4282      	cmp	r2, r0
 80063b8:	bf34      	ite	cc
 80063ba:	f44f 51e0 	movcc.w	r1, #7168	; 0x1c00
 80063be:	f44f 51c0 	movcs.w	r1, #6144	; 0x1800
 80063c2:	e7c4      	b.n	800634e <USB_SetTurnaroundTime+0xa>
 80063c4:	f44f 5170 	mov.w	r1, #15360	; 0x3c00
 80063c8:	e7c1      	b.n	800634e <USB_SetTurnaroundTime+0xa>
 80063ca:	f44f 5160 	mov.w	r1, #14336	; 0x3800
 80063ce:	e7be      	b.n	800634e <USB_SetTurnaroundTime+0xa>
 80063d0:	f44f 5150 	mov.w	r1, #13312	; 0x3400
 80063d4:	e7bb      	b.n	800634e <USB_SetTurnaroundTime+0xa>
 80063d6:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80063da:	e7b8      	b.n	800634e <USB_SetTurnaroundTime+0xa>
 80063dc:	f44f 5130 	mov.w	r1, #11264	; 0x2c00
 80063e0:	e7b5      	b.n	800634e <USB_SetTurnaroundTime+0xa>
 80063e2:	f44f 5120 	mov.w	r1, #10240	; 0x2800
 80063e6:	e7b2      	b.n	800634e <USB_SetTurnaroundTime+0xa>
 80063e8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80063ec:	e7af      	b.n	800634e <USB_SetTurnaroundTime+0xa>
 80063ee:	bf00      	nop
 80063f0:	ff275340 	.word	0xff275340
 80063f4:	000c34ff 	.word	0x000c34ff
 80063f8:	ff1b1e40 	.word	0xff1b1e40
 80063fc:	000f423f 	.word	0x000f423f
 8006400:	ff0bdc00 	.word	0xff0bdc00
 8006404:	00124f7f 	.word	0x00124f7f
 8006408:	fef98c80 	.word	0xfef98c80
 800640c:	0013d620 	.word	0x0013d620
 8006410:	fee5b660 	.word	0xfee5b660
 8006414:	0016e35f 	.word	0x0016e35f
 8006418:	feced300 	.word	0xfeced300
 800641c:	001b7740 	.word	0x001b7740
 8006420:	feb35bc0 	.word	0xfeb35bc0
 8006424:	002191c0 	.word	0x002191c0
 8006428:	fe91ca00 	.word	0xfe91ca00
 800642c:	00387520 	.word	0x00387520
 8006430:	fe5954e0 	.word	0xfe5954e0
 8006434:	00419ce0 	.word	0x00419ce0

08006438 <USB_EnableGlobalInt>:
{
 8006438:	4603      	mov	r3, r0
}
 800643a:	2000      	movs	r0, #0
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800643c:	689a      	ldr	r2, [r3, #8]
 800643e:	f042 0201 	orr.w	r2, r2, #1
 8006442:	609a      	str	r2, [r3, #8]
}
 8006444:	4770      	bx	lr
 8006446:	bf00      	nop

08006448 <USB_DisableGlobalInt>:
{
 8006448:	4603      	mov	r3, r0
}
 800644a:	2000      	movs	r0, #0
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800644c:	689a      	ldr	r2, [r3, #8]
 800644e:	f022 0201 	bic.w	r2, r2, #1
 8006452:	609a      	str	r2, [r3, #8]
}
 8006454:	4770      	bx	lr
 8006456:	bf00      	nop

08006458 <USB_SetCurrentMode>:
{
 8006458:	b538      	push	{r3, r4, r5, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800645a:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 800645c:	2901      	cmp	r1, #1
{
 800645e:	4605      	mov	r5, r0
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006460:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006464:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8006466:	d017      	beq.n	8006498 <USB_SetCurrentMode+0x40>
  else if (mode == USB_DEVICE_MODE)
 8006468:	b9a1      	cbnz	r1, 8006494 <USB_SetCurrentMode+0x3c>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800646a:	68c3      	ldr	r3, [r0, #12]
  uint32_t ms = 0U;
 800646c:	460c      	mov	r4, r1
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800646e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006472:	60c3      	str	r3, [r0, #12]
 8006474:	e001      	b.n	800647a <USB_SetCurrentMode+0x22>
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006476:	2c32      	cmp	r4, #50	; 0x32
 8006478:	d00c      	beq.n	8006494 <USB_SetCurrentMode+0x3c>
      HAL_Delay(1U);
 800647a:	2001      	movs	r0, #1
      ms++;
 800647c:	4404      	add	r4, r0
      HAL_Delay(1U);
 800647e:	f7fb fa21 	bl	80018c4 <HAL_Delay>
  return ((USBx->GINTSTS) & 0x1U);
 8006482:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006484:	07db      	lsls	r3, r3, #31
 8006486:	d4f6      	bmi.n	8006476 <USB_SetCurrentMode+0x1e>
    return HAL_ERROR;
 8006488:	f1a4 0032 	sub.w	r0, r4, #50	; 0x32
 800648c:	fab0 f080 	clz	r0, r0
 8006490:	0940      	lsrs	r0, r0, #5
}
 8006492:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8006494:	2001      	movs	r0, #1
}
 8006496:	bd38      	pop	{r3, r4, r5, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006498:	68c3      	ldr	r3, [r0, #12]
  uint32_t ms = 0U;
 800649a:	2400      	movs	r4, #0
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800649c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80064a0:	60c3      	str	r3, [r0, #12]
 80064a2:	e001      	b.n	80064a8 <USB_SetCurrentMode+0x50>
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80064a4:	2c32      	cmp	r4, #50	; 0x32
 80064a6:	d0f5      	beq.n	8006494 <USB_SetCurrentMode+0x3c>
      HAL_Delay(1U);
 80064a8:	2001      	movs	r0, #1
      ms++;
 80064aa:	4404      	add	r4, r0
      HAL_Delay(1U);
 80064ac:	f7fb fa0a 	bl	80018c4 <HAL_Delay>
  return ((USBx->GINTSTS) & 0x1U);
 80064b0:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80064b2:	07da      	lsls	r2, r3, #31
 80064b4:	d5f6      	bpl.n	80064a4 <USB_SetCurrentMode+0x4c>
    return HAL_ERROR;
 80064b6:	f1a4 0032 	sub.w	r0, r4, #50	; 0x32
 80064ba:	fab0 f080 	clz	r0, r0
 80064be:	0940      	lsrs	r0, r0, #5
 80064c0:	e7e7      	b.n	8006492 <USB_SetCurrentMode+0x3a>
 80064c2:	bf00      	nop

080064c4 <USB_DevInit>:
{
 80064c4:	b084      	sub	sp, #16
 80064c6:	4684      	mov	ip, r0
 80064c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80064cc:	b083      	sub	sp, #12
 80064ce:	ac0b      	add	r4, sp, #44	; 0x2c
 80064d0:	e884 000e 	stmia.w	r4, {r1, r2, r3}
    USBx->DIEPTXF[i] = 0U;
 80064d4:	2300      	movs	r3, #0
 80064d6:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80064d8:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
 80064dc:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
 80064e0:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
 80064e4:	f8c0 3110 	str.w	r3, [r0, #272]	; 0x110
 80064e8:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
 80064ec:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
 80064f0:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
 80064f4:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
 80064f8:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
 80064fc:	f8c0 3128 	str.w	r3, [r0, #296]	; 0x128
 8006500:	f8c0 312c 	str.w	r3, [r0, #300]	; 0x12c
 8006504:	f8c0 3130 	str.w	r3, [r0, #304]	; 0x130
 8006508:	f8c0 3134 	str.w	r3, [r0, #308]	; 0x134
 800650c:	f8c0 3138 	str.w	r3, [r0, #312]	; 0x138
 8006510:	f8c0 313c 	str.w	r3, [r0, #316]	; 0x13c
  if (cfg.vbus_sensing_enable == 0U)
 8006514:	2c00      	cmp	r4, #0
 8006516:	f040 80b3 	bne.w	8006680 <USB_DevInit+0x1bc>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800651a:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 800651e:	f500 6e00 	add.w	lr, r0, #2048	; 0x800
 8006522:	f043 0302 	orr.w	r3, r3, #2
 8006526:	f8ce 3004 	str.w	r3, [lr, #4]
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800652a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800652c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006530:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006532:	6803      	ldr	r3, [r0, #0]
 8006534:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006538:	6003      	str	r3, [r0, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800653a:	6803      	ldr	r3, [r0, #0]
 800653c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006540:	6003      	str	r3, [r0, #0]
  USBx_PCGCCTL = 0U;
 8006542:	2300      	movs	r3, #0
 8006544:	f8cc 3e00 	str.w	r3, [ip, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006548:	f8de 3000 	ldr.w	r3, [lr]
 800654c:	f8ce 3000 	str.w	r3, [lr]
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006550:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006552:	2b01      	cmp	r3, #1
 8006554:	f000 80c3 	beq.w	80066de <USB_DevInit+0x21a>
  USBx_DEVICE->DCFG |= speed;
 8006558:	f8de 3000 	ldr.w	r3, [lr]
 800655c:	f043 0303 	orr.w	r3, r3, #3
 8006560:	f8ce 3000 	str.w	r3, [lr]
  __IO uint32_t count = 0U;
 8006564:	2300      	movs	r3, #0
    if (count > 200000U)
 8006566:	4a65      	ldr	r2, [pc, #404]	; (80066fc <USB_DevInit+0x238>)
  __IO uint32_t count = 0U;
 8006568:	9300      	str	r3, [sp, #0]
 800656a:	e004      	b.n	8006576 <USB_DevInit+0xb2>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800656c:	f8dc 3010 	ldr.w	r3, [ip, #16]
 8006570:	2b00      	cmp	r3, #0
 8006572:	f2c0 809f 	blt.w	80066b4 <USB_DevInit+0x1f0>
    count++;
 8006576:	9b00      	ldr	r3, [sp, #0]
 8006578:	3301      	adds	r3, #1
 800657a:	9300      	str	r3, [sp, #0]
    if (count > 200000U)
 800657c:	9b00      	ldr	r3, [sp, #0]
 800657e:	4293      	cmp	r3, r2
 8006580:	d9f4      	bls.n	800656c <USB_DevInit+0xa8>
    ret = HAL_ERROR;
 8006582:	2001      	movs	r0, #1
  __IO uint32_t count = 0U;
 8006584:	2300      	movs	r3, #0
    if (count > 200000U)
 8006586:	4a5d      	ldr	r2, [pc, #372]	; (80066fc <USB_DevInit+0x238>)
  __IO uint32_t count = 0U;
 8006588:	9301      	str	r3, [sp, #4]
 800658a:	e003      	b.n	8006594 <USB_DevInit+0xd0>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800658c:	f8dc 3010 	ldr.w	r3, [ip, #16]
 8006590:	2b00      	cmp	r3, #0
 8006592:	db7c      	blt.n	800668e <USB_DevInit+0x1ca>
    count++;
 8006594:	9b01      	ldr	r3, [sp, #4]
 8006596:	3301      	adds	r3, #1
 8006598:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 800659a:	9b01      	ldr	r3, [sp, #4]
 800659c:	4293      	cmp	r3, r2
 800659e:	d9f5      	bls.n	800658c <USB_DevInit+0xc8>
    ret = HAL_ERROR;
 80065a0:	2001      	movs	r0, #1
  USBx_DEVICE->DIEPMSK = 0U;
 80065a2:	2200      	movs	r2, #0
 80065a4:	f8ce 2010 	str.w	r2, [lr, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80065a8:	f8ce 2014 	str.w	r2, [lr, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80065ac:	f8ce 201c 	str.w	r2, [lr, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80065b0:	b1d1      	cbz	r1, 80065e8 <USB_DevInit+0x124>
 80065b2:	f50c 6310 	add.w	r3, ip, #2304	; 0x900
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80065b6:	f04f 4890 	mov.w	r8, #1207959552	; 0x48000000
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80065ba:	f04f 6900 	mov.w	r9, #134217728	; 0x8000000
      USBx_INEP(i)->DIEPCTL = 0U;
 80065be:	4616      	mov	r6, r2
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80065c0:	f64f 377f 	movw	r7, #64383	; 0xfb7f
 80065c4:	e006      	b.n	80065d4 <USB_DevInit+0x110>
      USBx_INEP(i)->DIEPCTL = 0U;
 80065c6:	601e      	str	r6, [r3, #0]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80065c8:	3201      	adds	r2, #1
    USBx_INEP(i)->DIEPTSIZ = 0U;
 80065ca:	611e      	str	r6, [r3, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80065cc:	609f      	str	r7, [r3, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80065ce:	3320      	adds	r3, #32
 80065d0:	4291      	cmp	r1, r2
 80065d2:	d039      	beq.n	8006648 <USB_DevInit+0x184>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80065d4:	681d      	ldr	r5, [r3, #0]
 80065d6:	2d00      	cmp	r5, #0
 80065d8:	daf5      	bge.n	80065c6 <USB_DevInit+0x102>
      if (i == 0U)
 80065da:	b112      	cbz	r2, 80065e2 <USB_DevInit+0x11e>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80065dc:	f8c3 8000 	str.w	r8, [r3]
 80065e0:	e7f2      	b.n	80065c8 <USB_DevInit+0x104>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80065e2:	f8c3 9000 	str.w	r9, [r3]
 80065e6:	e7ef      	b.n	80065c8 <USB_DevInit+0x104>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80065e8:	f8de 3010 	ldr.w	r3, [lr, #16]
  USBx->GINTMSK = 0U;
 80065ec:	2200      	movs	r2, #0
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80065ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80065f2:	f8ce 3010 	str.w	r3, [lr, #16]
  USBx->GINTSTS = 0xBFFFFFFFU;
 80065f6:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
  USBx->GINTMSK = 0U;
 80065fa:	f8cc 2018 	str.w	r2, [ip, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 80065fe:	f8cc 3014 	str.w	r3, [ip, #20]
  if (cfg.dma_enable == 0U)
 8006602:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006604:	b92b      	cbnz	r3, 8006612 <USB_DevInit+0x14e>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006606:	f8dc 3018 	ldr.w	r3, [ip, #24]
 800660a:	f043 0310 	orr.w	r3, r3, #16
 800660e:	f8cc 3018 	str.w	r3, [ip, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006612:	f8dc 2018 	ldr.w	r2, [ip, #24]
 8006616:	4b3a      	ldr	r3, [pc, #232]	; (8006700 <USB_DevInit+0x23c>)
 8006618:	4313      	orrs	r3, r2
  if (cfg.Sof_enable != 0U)
 800661a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800661c:	f8cc 3018 	str.w	r3, [ip, #24]
  if (cfg.Sof_enable != 0U)
 8006620:	b12a      	cbz	r2, 800662e <USB_DevInit+0x16a>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006622:	f8dc 3018 	ldr.w	r3, [ip, #24]
 8006626:	f043 0308 	orr.w	r3, r3, #8
 800662a:	f8cc 3018 	str.w	r3, [ip, #24]
  if (cfg.vbus_sensing_enable == 1U)
 800662e:	2c01      	cmp	r4, #1
 8006630:	d105      	bne.n	800663e <USB_DevInit+0x17a>
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006632:	f8dc 2018 	ldr.w	r2, [ip, #24]
 8006636:	4b33      	ldr	r3, [pc, #204]	; (8006704 <USB_DevInit+0x240>)
 8006638:	4313      	orrs	r3, r2
 800663a:	f8cc 3018 	str.w	r3, [ip, #24]
}
 800663e:	b003      	add	sp, #12
 8006640:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006644:	b004      	add	sp, #16
 8006646:	4770      	bx	lr
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006648:	2200      	movs	r2, #0
 800664a:	f50c 6330 	add.w	r3, ip, #2816	; 0xb00
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800664e:	f04f 4890 	mov.w	r8, #1207959552	; 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006652:	f04f 6900 	mov.w	r9, #134217728	; 0x8000000
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006656:	4616      	mov	r6, r2
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006658:	f64f 377f 	movw	r7, #64383	; 0xfb7f
 800665c:	e006      	b.n	800666c <USB_DevInit+0x1a8>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800665e:	601e      	str	r6, [r3, #0]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006660:	3201      	adds	r2, #1
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006662:	611e      	str	r6, [r3, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006664:	609f      	str	r7, [r3, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006666:	3320      	adds	r3, #32
 8006668:	4291      	cmp	r1, r2
 800666a:	d0bd      	beq.n	80065e8 <USB_DevInit+0x124>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800666c:	681d      	ldr	r5, [r3, #0]
 800666e:	2d00      	cmp	r5, #0
 8006670:	daf5      	bge.n	800665e <USB_DevInit+0x19a>
      if (i == 0U)
 8006672:	b112      	cbz	r2, 800667a <USB_DevInit+0x1b6>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006674:	f8c3 8000 	str.w	r8, [r3]
 8006678:	e7f2      	b.n	8006660 <USB_DevInit+0x19c>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800667a:	f8c3 9000 	str.w	r9, [r3]
 800667e:	e7ef      	b.n	8006660 <USB_DevInit+0x19c>
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006680:	6b83      	ldr	r3, [r0, #56]	; 0x38
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006682:	f500 6e00 	add.w	lr, r0, #2048	; 0x800
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006686:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800668a:	6383      	str	r3, [r0, #56]	; 0x38
 800668c:	e759      	b.n	8006542 <USB_DevInit+0x7e>
  count = 0U;
 800668e:	2300      	movs	r3, #0
    if (count > 200000U)
 8006690:	4a1a      	ldr	r2, [pc, #104]	; (80066fc <USB_DevInit+0x238>)
  count = 0U;
 8006692:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006694:	2310      	movs	r3, #16
 8006696:	f8cc 3010 	str.w	r3, [ip, #16]
 800669a:	e004      	b.n	80066a6 <USB_DevInit+0x1e2>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800669c:	f8dc 3010 	ldr.w	r3, [ip, #16]
 80066a0:	06db      	lsls	r3, r3, #27
 80066a2:	f57f af7e 	bpl.w	80065a2 <USB_DevInit+0xde>
    count++;
 80066a6:	9b01      	ldr	r3, [sp, #4]
 80066a8:	3301      	adds	r3, #1
 80066aa:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 80066ac:	9b01      	ldr	r3, [sp, #4]
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d9f4      	bls.n	800669c <USB_DevInit+0x1d8>
 80066b2:	e775      	b.n	80065a0 <USB_DevInit+0xdc>
  count = 0U;
 80066b4:	2300      	movs	r3, #0
    if (count > 200000U)
 80066b6:	4a11      	ldr	r2, [pc, #68]	; (80066fc <USB_DevInit+0x238>)
  count = 0U;
 80066b8:	9300      	str	r3, [sp, #0]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80066ba:	f44f 6384 	mov.w	r3, #1056	; 0x420
 80066be:	f8cc 3010 	str.w	r3, [ip, #16]
 80066c2:	e005      	b.n	80066d0 <USB_DevInit+0x20c>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80066c4:	f8dc 0010 	ldr.w	r0, [ip, #16]
 80066c8:	f010 0020 	ands.w	r0, r0, #32
 80066cc:	f43f af5a 	beq.w	8006584 <USB_DevInit+0xc0>
    count++;
 80066d0:	9b00      	ldr	r3, [sp, #0]
 80066d2:	3301      	adds	r3, #1
 80066d4:	9300      	str	r3, [sp, #0]
    if (count > 200000U)
 80066d6:	9b00      	ldr	r3, [sp, #0]
 80066d8:	4293      	cmp	r3, r2
 80066da:	d9f3      	bls.n	80066c4 <USB_DevInit+0x200>
 80066dc:	e751      	b.n	8006582 <USB_DevInit+0xbe>
    if (cfg.speed == USBD_HS_SPEED)
 80066de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80066e0:	b923      	cbnz	r3, 80066ec <USB_DevInit+0x228>
  USBx_DEVICE->DCFG |= speed;
 80066e2:	f8de 3000 	ldr.w	r3, [lr]
 80066e6:	f8ce 3000 	str.w	r3, [lr]
  return HAL_OK;
 80066ea:	e73b      	b.n	8006564 <USB_DevInit+0xa0>
  USBx_DEVICE->DCFG |= speed;
 80066ec:	f8de 3000 	ldr.w	r3, [lr]
 80066f0:	f043 0301 	orr.w	r3, r3, #1
 80066f4:	f8ce 3000 	str.w	r3, [lr]
  return HAL_OK;
 80066f8:	e734      	b.n	8006564 <USB_DevInit+0xa0>
 80066fa:	bf00      	nop
 80066fc:	00030d40 	.word	0x00030d40
 8006700:	803c3800 	.word	0x803c3800
 8006704:	40000004 	.word	0x40000004

08006708 <USB_FlushTxFifo>:
{
 8006708:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 800670a:	2300      	movs	r3, #0
    if (count > 200000U)
 800670c:	4a12      	ldr	r2, [pc, #72]	; (8006758 <USB_FlushTxFifo+0x50>)
  __IO uint32_t count = 0U;
 800670e:	9301      	str	r3, [sp, #4]
 8006710:	e002      	b.n	8006718 <USB_FlushTxFifo+0x10>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006712:	6903      	ldr	r3, [r0, #16]
 8006714:	2b00      	cmp	r3, #0
 8006716:	db08      	blt.n	800672a <USB_FlushTxFifo+0x22>
    count++;
 8006718:	9b01      	ldr	r3, [sp, #4]
 800671a:	3301      	adds	r3, #1
 800671c:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 800671e:	9b01      	ldr	r3, [sp, #4]
 8006720:	4293      	cmp	r3, r2
 8006722:	d9f6      	bls.n	8006712 <USB_FlushTxFifo+0xa>
      return HAL_TIMEOUT;
 8006724:	2003      	movs	r0, #3
}
 8006726:	b002      	add	sp, #8
 8006728:	4770      	bx	lr
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800672a:	0189      	lsls	r1, r1, #6
  count = 0U;
 800672c:	2300      	movs	r3, #0
    if (count > 200000U)
 800672e:	4a0a      	ldr	r2, [pc, #40]	; (8006758 <USB_FlushTxFifo+0x50>)
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006730:	f041 0120 	orr.w	r1, r1, #32
  count = 0U;
 8006734:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006736:	6101      	str	r1, [r0, #16]
 8006738:	e003      	b.n	8006742 <USB_FlushTxFifo+0x3a>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800673a:	6903      	ldr	r3, [r0, #16]
 800673c:	f013 0320 	ands.w	r3, r3, #32
 8006740:	d006      	beq.n	8006750 <USB_FlushTxFifo+0x48>
    count++;
 8006742:	9b01      	ldr	r3, [sp, #4]
 8006744:	3301      	adds	r3, #1
 8006746:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8006748:	9b01      	ldr	r3, [sp, #4]
 800674a:	4293      	cmp	r3, r2
 800674c:	d9f5      	bls.n	800673a <USB_FlushTxFifo+0x32>
 800674e:	e7e9      	b.n	8006724 <USB_FlushTxFifo+0x1c>
  return HAL_OK;
 8006750:	4618      	mov	r0, r3
}
 8006752:	b002      	add	sp, #8
 8006754:	4770      	bx	lr
 8006756:	bf00      	nop
 8006758:	00030d40 	.word	0x00030d40

0800675c <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800675c:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006760:	f013 0006 	ands.w	r0, r3, #6
 8006764:	d004      	beq.n	8006770 <USB_GetDevSpeed+0x14>
    speed = 0xFU;
 8006766:	f013 0f02 	tst.w	r3, #2
 800676a:	bf14      	ite	ne
 800676c:	2002      	movne	r0, #2
 800676e:	200f      	moveq	r0, #15
}
 8006770:	4770      	bx	lr
 8006772:	bf00      	nop

08006774 <USB_ActivateEndpoint>:
{
 8006774:	b430      	push	{r4, r5}
  if (ep->is_in == 1U)
 8006776:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8006778:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in == 1U)
 800677a:	2b01      	cmp	r3, #1
 800677c:	d020      	beq.n	80067c0 <USB_ActivateEndpoint+0x4c>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800677e:	f002 0c0f 	and.w	ip, r2, #15
 8006782:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006786:	f8d0 481c 	ldr.w	r4, [r0, #2076]	; 0x81c
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800678a:	eb00 1242 	add.w	r2, r0, r2, lsl #5
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800678e:	fa03 f30c 	lsl.w	r3, r3, ip
 8006792:	4323      	orrs	r3, r4
 8006794:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006798:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
 800679c:	041b      	lsls	r3, r3, #16
 800679e:	d40c      	bmi.n	80067ba <USB_ActivateEndpoint+0x46>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80067a0:	688b      	ldr	r3, [r1, #8]
 80067a2:	f8d2 4b00 	ldr.w	r4, [r2, #2816]	; 0xb00
 80067a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80067aa:	7908      	ldrb	r0, [r1, #4]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80067ac:	4914      	ldr	r1, [pc, #80]	; (8006800 <USB_ActivateEndpoint+0x8c>)
 80067ae:	4323      	orrs	r3, r4
 80067b0:	ea43 4380 	orr.w	r3, r3, r0, lsl #18
 80067b4:	4319      	orrs	r1, r3
 80067b6:	f8c2 1b00 	str.w	r1, [r2, #2816]	; 0xb00
}
 80067ba:	2000      	movs	r0, #0
 80067bc:	bc30      	pop	{r4, r5}
 80067be:	4770      	bx	lr
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80067c0:	f500 6400 	add.w	r4, r0, #2048	; 0x800
 80067c4:	f002 050f 	and.w	r5, r2, #15
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80067c8:	eb00 1042 	add.w	r0, r0, r2, lsl #5
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80067cc:	40ab      	lsls	r3, r5
 80067ce:	69e5      	ldr	r5, [r4, #28]
 80067d0:	432b      	orrs	r3, r5
 80067d2:	61e3      	str	r3, [r4, #28]
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80067d4:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 80067d8:	041c      	lsls	r4, r3, #16
 80067da:	d4ee      	bmi.n	80067ba <USB_ActivateEndpoint+0x46>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80067dc:	688b      	ldr	r3, [r1, #8]
 80067de:	f8d0 5900 	ldr.w	r5, [r0, #2304]	; 0x900
 80067e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80067e6:	790c      	ldrb	r4, [r1, #4]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80067e8:	4905      	ldr	r1, [pc, #20]	; (8006800 <USB_ActivateEndpoint+0x8c>)
 80067ea:	432b      	orrs	r3, r5
 80067ec:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
 80067f0:	ea43 5382 	orr.w	r3, r3, r2, lsl #22
 80067f4:	4319      	orrs	r1, r3
}
 80067f6:	bc30      	pop	{r4, r5}
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80067f8:	f8c0 1900 	str.w	r1, [r0, #2304]	; 0x900
}
 80067fc:	2000      	movs	r0, #0
 80067fe:	4770      	bx	lr
 8006800:	10008000 	.word	0x10008000

08006804 <USB_DeactivateEndpoint>:
  if (ep->is_in == 1U)
 8006804:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8006806:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8006808:	2a01      	cmp	r2, #1
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800680a:	eb00 1c43 	add.w	ip, r0, r3, lsl #5
  if (ep->is_in == 1U)
 800680e:	d02a      	beq.n	8006866 <USB_DeactivateEndpoint+0x62>
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006810:	f8dc 2b00 	ldr.w	r2, [ip, #2816]	; 0xb00
 8006814:	2a00      	cmp	r2, #0
 8006816:	db19      	blt.n	800684c <USB_DeactivateEndpoint+0x48>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006818:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800681c:	f003 030f 	and.w	r3, r3, #15
 8006820:	f8d0 183c 	ldr.w	r1, [r0, #2108]	; 0x83c
 8006824:	fa02 f303 	lsl.w	r3, r2, r3
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006828:	4a23      	ldr	r2, [pc, #140]	; (80068b8 <USB_DeactivateEndpoint+0xb4>)
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800682a:	ea21 0103 	bic.w	r1, r1, r3
 800682e:	f8c0 183c 	str.w	r1, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006832:	f8d0 181c 	ldr.w	r1, [r0, #2076]	; 0x81c
 8006836:	ea21 0303 	bic.w	r3, r1, r3
 800683a:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
}
 800683e:	2000      	movs	r0, #0
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006840:	f8dc 3b00 	ldr.w	r3, [ip, #2816]	; 0xb00
 8006844:	401a      	ands	r2, r3
 8006846:	f8cc 2b00 	str.w	r2, [ip, #2816]	; 0xb00
}
 800684a:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800684c:	f8dc 2b00 	ldr.w	r2, [ip, #2816]	; 0xb00
 8006850:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8006854:	f8cc 2b00 	str.w	r2, [ip, #2816]	; 0xb00
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006858:	f8dc 2b00 	ldr.w	r2, [ip, #2816]	; 0xb00
 800685c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006860:	f8cc 2b00 	str.w	r2, [ip, #2816]	; 0xb00
 8006864:	e7d8      	b.n	8006818 <USB_DeactivateEndpoint+0x14>
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006866:	f8dc 2900 	ldr.w	r2, [ip, #2304]	; 0x900
 800686a:	2a00      	cmp	r2, #0
 800686c:	da0b      	bge.n	8006886 <USB_DeactivateEndpoint+0x82>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800686e:	f8dc 2900 	ldr.w	r2, [ip, #2304]	; 0x900
 8006872:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8006876:	f8cc 2900 	str.w	r2, [ip, #2304]	; 0x900
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800687a:	f8dc 2900 	ldr.w	r2, [ip, #2304]	; 0x900
 800687e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006882:	f8cc 2900 	str.w	r2, [ip, #2304]	; 0x900
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006886:	f003 020f 	and.w	r2, r3, #15
 800688a:	2301      	movs	r3, #1
 800688c:	f8d0 183c 	ldr.w	r1, [r0, #2108]	; 0x83c
 8006890:	4093      	lsls	r3, r2
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006892:	4a0a      	ldr	r2, [pc, #40]	; (80068bc <USB_DeactivateEndpoint+0xb8>)
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006894:	ea21 0103 	bic.w	r1, r1, r3
 8006898:	f8c0 183c 	str.w	r1, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800689c:	f8d0 181c 	ldr.w	r1, [r0, #2076]	; 0x81c
 80068a0:	ea21 0303 	bic.w	r3, r1, r3
 80068a4:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
}
 80068a8:	2000      	movs	r0, #0
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80068aa:	f8dc 3900 	ldr.w	r3, [ip, #2304]	; 0x900
 80068ae:	401a      	ands	r2, r3
 80068b0:	f8cc 2900 	str.w	r2, [ip, #2304]	; 0x900
}
 80068b4:	4770      	bx	lr
 80068b6:	bf00      	nop
 80068b8:	eff37800 	.word	0xeff37800
 80068bc:	ec337800 	.word	0xec337800

080068c0 <USB_EPStartXfer>:
{
 80068c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (ep->is_in == 1U)
 80068c4:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 80068c6:	780c      	ldrb	r4, [r1, #0]
  if (ep->is_in == 1U)
 80068c8:	2b01      	cmp	r3, #1
 80068ca:	d045      	beq.n	8006958 <USB_EPStartXfer+0x98>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80068cc:	eb00 1344 	add.w	r3, r0, r4, lsl #5
 80068d0:	4e9a      	ldr	r6, [pc, #616]	; (8006b3c <USB_EPStartXfer+0x27c>)
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80068d2:	4d9b      	ldr	r5, [pc, #620]	; (8006b40 <USB_EPStartXfer+0x280>)
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80068d4:	f8d3 7b10 	ldr.w	r7, [r3, #2832]	; 0xb10
 80068d8:	f503 6c30 	add.w	ip, r3, #2816	; 0xb00
 80068dc:	403e      	ands	r6, r7
 80068de:	f8c3 6b10 	str.w	r6, [r3, #2832]	; 0xb10
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80068e2:	f8d3 6b10 	ldr.w	r6, [r3, #2832]	; 0xb10
 80068e6:	4035      	ands	r5, r6
 80068e8:	f8c3 5b10 	str.w	r5, [r3, #2832]	; 0xb10
    if (epnum == 0U)
 80068ec:	bb7c      	cbnz	r4, 800694e <USB_EPStartXfer+0x8e>
      if (ep->xfer_len > 0U)
 80068ee:	690c      	ldr	r4, [r1, #16]
 80068f0:	2c00      	cmp	r4, #0
 80068f2:	f040 8093 	bne.w	8006a1c <USB_EPStartXfer+0x15c>
        if (ep->xfer_len > ep->maxpacket)
 80068f6:	688c      	ldr	r4, [r1, #8]
      ep->xfer_size = ep->maxpacket;
 80068f8:	620c      	str	r4, [r1, #32]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80068fa:	f8dc 5010 	ldr.w	r5, [ip, #16]
 80068fe:	f3c4 0412 	ubfx	r4, r4, #0, #19
    if (dma == 1U)
 8006902:	2a01      	cmp	r2, #1
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006904:	ea44 0405 	orr.w	r4, r4, r5
 8006908:	f8cc 4010 	str.w	r4, [ip, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800690c:	f8dc 4010 	ldr.w	r4, [ip, #16]
 8006910:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8006914:	f8cc 4010 	str.w	r4, [ip, #16]
    if (dma == 1U)
 8006918:	f000 80a1 	beq.w	8006a5e <USB_EPStartXfer+0x19e>
    if (ep->type == EP_TYPE_ISOC)
 800691c:	790a      	ldrb	r2, [r1, #4]
 800691e:	2a01      	cmp	r2, #1
 8006920:	d10c      	bne.n	800693c <USB_EPStartXfer+0x7c>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006922:	f8d0 2808 	ldr.w	r2, [r0, #2056]	; 0x808
 8006926:	f412 7f80 	tst.w	r2, #256	; 0x100
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800692a:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 800692e:	bf0c      	ite	eq
 8006930:	f042 5200 	orreq.w	r2, r2, #536870912	; 0x20000000
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006934:	f042 5280 	orrne.w	r2, r2, #268435456	; 0x10000000
 8006938:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800693c:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
}
 8006940:	2000      	movs	r0, #0
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006942:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8006946:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
}
 800694a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (ep->xfer_len == 0U)
 800694e:	690c      	ldr	r4, [r1, #16]
 8006950:	2c00      	cmp	r4, #0
 8006952:	d166      	bne.n	8006a22 <USB_EPStartXfer+0x162>
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006954:	688c      	ldr	r4, [r1, #8]
 8006956:	e7d0      	b.n	80068fa <USB_EPStartXfer+0x3a>
    if (ep->xfer_len == 0U)
 8006958:	690b      	ldr	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800695a:	eb00 1644 	add.w	r6, r0, r4, lsl #5
    if (ep->xfer_len == 0U)
 800695e:	bb2b      	cbnz	r3, 80069ac <USB_EPStartXfer+0xec>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006960:	f8d6 c910 	ldr.w	ip, [r6, #2320]	; 0x910
    if (dma == 1U)
 8006964:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006966:	4f76      	ldr	r7, [pc, #472]	; (8006b40 <USB_EPStartXfer+0x280>)
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006968:	4d74      	ldr	r5, [pc, #464]	; (8006b3c <USB_EPStartXfer+0x27c>)
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800696a:	ea0c 0707 	and.w	r7, ip, r7
 800696e:	f8c6 7910 	str.w	r7, [r6, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006972:	f8d6 7910 	ldr.w	r7, [r6, #2320]	; 0x910
 8006976:	f447 2700 	orr.w	r7, r7, #524288	; 0x80000
 800697a:	f8c6 7910 	str.w	r7, [r6, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800697e:	f8d6 7910 	ldr.w	r7, [r6, #2320]	; 0x910
 8006982:	ea05 0507 	and.w	r5, r5, r7
 8006986:	f8c6 5910 	str.w	r5, [r6, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800698a:	f506 6510 	add.w	r5, r6, #2304	; 0x900
      if (ep->type == EP_TYPE_ISOC)
 800698e:	790f      	ldrb	r7, [r1, #4]
    if (dma == 1U)
 8006990:	f000 80b1 	beq.w	8006af6 <USB_EPStartXfer+0x236>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006994:	f8d6 c900 	ldr.w	ip, [r6, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 8006998:	2f01      	cmp	r7, #1
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800699a:	f04c 4c04 	orr.w	ip, ip, #2214592512	; 0x84000000
 800699e:	f8c6 c900 	str.w	ip, [r6, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 80069a2:	f000 8088 	beq.w	8006ab6 <USB_EPStartXfer+0x1f6>
}
 80069a6:	2000      	movs	r0, #0
 80069a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80069ac:	f8d6 c910 	ldr.w	ip, [r6, #2320]	; 0x910
 80069b0:	4f62      	ldr	r7, [pc, #392]	; (8006b3c <USB_EPStartXfer+0x27c>)
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80069b2:	4d63      	ldr	r5, [pc, #396]	; (8006b40 <USB_EPStartXfer+0x280>)
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80069b4:	ea0c 0707 	and.w	r7, ip, r7
 80069b8:	f8c6 7910 	str.w	r7, [r6, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80069bc:	f8d6 7910 	ldr.w	r7, [r6, #2320]	; 0x910
 80069c0:	403d      	ands	r5, r7
 80069c2:	f8c6 5910 	str.w	r5, [r6, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80069c6:	f506 6510 	add.w	r5, r6, #2304	; 0x900
      if (epnum == 0U)
 80069ca:	2c00      	cmp	r4, #0
 80069cc:	d14e      	bne.n	8006a6c <USB_EPStartXfer+0x1ac>
        if (ep->xfer_len > ep->maxpacket)
 80069ce:	688f      	ldr	r7, [r1, #8]
 80069d0:	42bb      	cmp	r3, r7
 80069d2:	f200 80a0 	bhi.w	8006b16 <USB_EPStartXfer+0x256>
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80069d6:	692f      	ldr	r7, [r5, #16]
 80069d8:	f447 2700 	orr.w	r7, r7, #524288	; 0x80000
 80069dc:	612f      	str	r7, [r5, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80069de:	f8d5 c010 	ldr.w	ip, [r5, #16]
 80069e2:	f3c3 0712 	ubfx	r7, r3, #0, #19
 80069e6:	ea47 070c 	orr.w	r7, r7, ip
 80069ea:	612f      	str	r7, [r5, #16]
      if (ep->type == EP_TYPE_ISOC)
 80069ec:	790f      	ldrb	r7, [r1, #4]
 80069ee:	2f01      	cmp	r7, #1
 80069f0:	d04d      	beq.n	8006a8e <USB_EPStartXfer+0x1ce>
    if (dma == 1U)
 80069f2:	2a01      	cmp	r2, #1
 80069f4:	f000 808a 	beq.w	8006b0c <USB_EPStartXfer+0x24c>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80069f8:	f8d6 2900 	ldr.w	r2, [r6, #2304]	; 0x900
 80069fc:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8006a00:	f8c6 2900 	str.w	r2, [r6, #2304]	; 0x900
        if (ep->xfer_len > 0U)
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d0ce      	beq.n	80069a6 <USB_EPStartXfer+0xe6>
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006a08:	f004 040f 	and.w	r4, r4, #15
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	f8d0 2834 	ldr.w	r2, [r0, #2100]	; 0x834
 8006a12:	40a3      	lsls	r3, r4
 8006a14:	4313      	orrs	r3, r2
 8006a16:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
 8006a1a:	e7c4      	b.n	80069a6 <USB_EPStartXfer+0xe6>
        ep->xfer_len = ep->maxpacket;
 8006a1c:	688c      	ldr	r4, [r1, #8]
 8006a1e:	610c      	str	r4, [r1, #16]
 8006a20:	e76a      	b.n	80068f8 <USB_EPStartXfer+0x38>
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006a22:	688d      	ldr	r5, [r1, #8]
    if (dma == 1U)
 8006a24:	2a01      	cmp	r2, #1
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006a26:	4e47      	ldr	r6, [pc, #284]	; (8006b44 <USB_EPStartXfer+0x284>)
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006a28:	442c      	add	r4, r5
 8006a2a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8006a2e:	fbb4 f4f5 	udiv	r4, r4, r5
 8006a32:	b2a4      	uxth	r4, r4
        ep->xfer_size = ep->maxpacket * pktcnt;
 8006a34:	fb04 f505 	mul.w	r5, r4, r5
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006a38:	ea06 44c4 	and.w	r4, r6, r4, lsl #19
 8006a3c:	f8dc 6010 	ldr.w	r6, [ip, #16]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8006a40:	620d      	str	r5, [r1, #32]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006a42:	f3c5 0512 	ubfx	r5, r5, #0, #19
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006a46:	ea44 0406 	orr.w	r4, r4, r6
 8006a4a:	f8cc 4010 	str.w	r4, [ip, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006a4e:	f8dc 4010 	ldr.w	r4, [ip, #16]
 8006a52:	ea45 0504 	orr.w	r5, r5, r4
 8006a56:	f8cc 5010 	str.w	r5, [ip, #16]
    if (dma == 1U)
 8006a5a:	f47f af5f 	bne.w	800691c <USB_EPStartXfer+0x5c>
      if ((uint32_t)ep->xfer_buff != 0U)
 8006a5e:	68ca      	ldr	r2, [r1, #12]
 8006a60:	2a00      	cmp	r2, #0
 8006a62:	f43f af5b 	beq.w	800691c <USB_EPStartXfer+0x5c>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006a66:	f8cc 2014 	str.w	r2, [ip, #20]
 8006a6a:	e757      	b.n	800691c <USB_EPStartXfer+0x5c>
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006a6c:	f8d1 e008 	ldr.w	lr, [r1, #8]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006a70:	4f34      	ldr	r7, [pc, #208]	; (8006b44 <USB_EPStartXfer+0x284>)
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006a72:	eb03 0c0e 	add.w	ip, r3, lr
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006a76:	f8d5 8010 	ldr.w	r8, [r5, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006a7a:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8006a7e:	fbbc fcfe 	udiv	ip, ip, lr
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006a82:	ea07 47cc 	and.w	r7, r7, ip, lsl #19
 8006a86:	ea47 0708 	orr.w	r7, r7, r8
 8006a8a:	612f      	str	r7, [r5, #16]
 8006a8c:	e7a7      	b.n	80069de <USB_EPStartXfer+0x11e>
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006a8e:	f8d5 c010 	ldr.w	ip, [r5, #16]
    if (dma == 1U)
 8006a92:	2a01      	cmp	r2, #1
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006a94:	f02c 4cc0 	bic.w	ip, ip, #1610612736	; 0x60000000
 8006a98:	f8c5 c010 	str.w	ip, [r5, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006a9c:	f8d5 c010 	ldr.w	ip, [r5, #16]
 8006aa0:	f04c 5c00 	orr.w	ip, ip, #536870912	; 0x20000000
 8006aa4:	f8c5 c010 	str.w	ip, [r5, #16]
    if (dma == 1U)
 8006aa8:	d038      	beq.n	8006b1c <USB_EPStartXfer+0x25c>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006aaa:	f8d6 7900 	ldr.w	r7, [r6, #2304]	; 0x900
 8006aae:	f047 4704 	orr.w	r7, r7, #2214592512	; 0x84000000
 8006ab2:	f8c6 7900 	str.w	r7, [r6, #2304]	; 0x900
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006ab6:	f8d0 6808 	ldr.w	r6, [r0, #2056]	; 0x808
 8006aba:	f416 7f80 	tst.w	r6, #256	; 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006abe:	682e      	ldr	r6, [r5, #0]
 8006ac0:	bf0c      	ite	eq
 8006ac2:	f046 5600 	orreq.w	r6, r6, #536870912	; 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006ac6:	f046 5680 	orrne.w	r6, r6, #268435456	; 0x10000000
 8006aca:	602e      	str	r6, [r5, #0]
  if (dma == 0U)
 8006acc:	2a00      	cmp	r2, #0
 8006ace:	f47f af6a 	bne.w	80069a6 <USB_EPStartXfer+0xe6>
    count32b = ((uint32_t)len + 3U) / 4U;
 8006ad2:	b29b      	uxth	r3, r3
 8006ad4:	3303      	adds	r3, #3
    for (i = 0U; i < count32b; i++)
 8006ad6:	089a      	lsrs	r2, r3, #2
 8006ad8:	f43f af65 	beq.w	80069a6 <USB_EPStartXfer+0xe6>
        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006adc:	68cb      	ldr	r3, [r1, #12]
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006ade:	eb00 3404 	add.w	r4, r0, r4, lsl #12
 8006ae2:	eb03 0182 	add.w	r1, r3, r2, lsl #2
 8006ae6:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
 8006aea:	f853 2b04 	ldr.w	r2, [r3], #4
    for (i = 0U; i < count32b; i++)
 8006aee:	4299      	cmp	r1, r3
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006af0:	6022      	str	r2, [r4, #0]
    for (i = 0U; i < count32b; i++)
 8006af2:	d1fa      	bne.n	8006aea <USB_EPStartXfer+0x22a>
 8006af4:	e757      	b.n	80069a6 <USB_EPStartXfer+0xe6>
      if ((uint32_t)ep->dma_addr != 0U)
 8006af6:	69cb      	ldr	r3, [r1, #28]
 8006af8:	b95b      	cbnz	r3, 8006b12 <USB_EPStartXfer+0x252>
      if (ep->type == EP_TYPE_ISOC)
 8006afa:	2f01      	cmp	r7, #1
 8006afc:	d011      	beq.n	8006b22 <USB_EPStartXfer+0x262>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006afe:	682b      	ldr	r3, [r5, #0]
}
 8006b00:	2000      	movs	r0, #0
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006b02:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006b06:	602b      	str	r3, [r5, #0]
}
 8006b08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((uint32_t)ep->dma_addr != 0U)
 8006b0c:	69cb      	ldr	r3, [r1, #28]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d0f5      	beq.n	8006afe <USB_EPStartXfer+0x23e>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006b12:	616b      	str	r3, [r5, #20]
 8006b14:	e7f1      	b.n	8006afa <USB_EPStartXfer+0x23a>
          ep->xfer_len = ep->maxpacket;
 8006b16:	463b      	mov	r3, r7
 8006b18:	610f      	str	r7, [r1, #16]
 8006b1a:	e75c      	b.n	80069d6 <USB_EPStartXfer+0x116>
      if ((uint32_t)ep->dma_addr != 0U)
 8006b1c:	69cb      	ldr	r3, [r1, #28]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d1f7      	bne.n	8006b12 <USB_EPStartXfer+0x252>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006b22:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 8006b26:	f413 7f80 	tst.w	r3, #256	; 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006b2a:	682b      	ldr	r3, [r5, #0]
 8006b2c:	bf0c      	ite	eq
 8006b2e:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006b32:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 8006b36:	602b      	str	r3, [r5, #0]
 8006b38:	e7e1      	b.n	8006afe <USB_EPStartXfer+0x23e>
 8006b3a:	bf00      	nop
 8006b3c:	fff80000 	.word	0xfff80000
 8006b40:	e007ffff 	.word	0xe007ffff
 8006b44:	1ff80000 	.word	0x1ff80000

08006b48 <USB_EPStopXfer>:
  __IO uint32_t count = 0U;
 8006b48:	2300      	movs	r3, #0
{
 8006b4a:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8006b4c:	9301      	str	r3, [sp, #4]
  if (ep->is_in == 1U)
 8006b4e:	784b      	ldrb	r3, [r1, #1]
 8006b50:	2b01      	cmp	r3, #1
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006b52:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8006b54:	d020      	beq.n	8006b98 <USB_EPStopXfer+0x50>
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006b56:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
 8006b5a:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8006b5e:	6803      	ldr	r3, [r0, #0]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	db02      	blt.n	8006b6a <USB_EPStopXfer+0x22>
  HAL_StatusTypeDef ret = HAL_OK;
 8006b64:	2000      	movs	r0, #0
}
 8006b66:	b002      	add	sp, #8
 8006b68:	4770      	bx	lr
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006b6a:	6803      	ldr	r3, [r0, #0]
        if (count > 10000U)
 8006b6c:	f242 7210 	movw	r2, #10000	; 0x2710
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006b70:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006b74:	6003      	str	r3, [r0, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006b76:	6803      	ldr	r3, [r0, #0]
 8006b78:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006b7c:	6003      	str	r3, [r0, #0]
 8006b7e:	e002      	b.n	8006b86 <USB_EPStopXfer+0x3e>
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006b80:	6803      	ldr	r3, [r0, #0]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	daee      	bge.n	8006b64 <USB_EPStopXfer+0x1c>
        count++;
 8006b86:	9b01      	ldr	r3, [sp, #4]
 8006b88:	3301      	adds	r3, #1
 8006b8a:	9301      	str	r3, [sp, #4]
        if (count > 10000U)
 8006b8c:	9b01      	ldr	r3, [sp, #4]
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d9f6      	bls.n	8006b80 <USB_EPStopXfer+0x38>
          ret = HAL_ERROR;
 8006b92:	2001      	movs	r0, #1
}
 8006b94:	b002      	add	sp, #8
 8006b96:	4770      	bx	lr
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006b98:	f500 6010 	add.w	r0, r0, #2304	; 0x900
 8006b9c:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8006ba0:	681a      	ldr	r2, [r3, #0]
 8006ba2:	2a00      	cmp	r2, #0
 8006ba4:	dade      	bge.n	8006b64 <USB_EPStopXfer+0x1c>
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006ba6:	681a      	ldr	r2, [r3, #0]
        if (count > 10000U)
 8006ba8:	f242 7110 	movw	r1, #10000	; 0x2710
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006bac:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8006bb0:	601a      	str	r2, [r3, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006bb2:	681a      	ldr	r2, [r3, #0]
 8006bb4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006bb8:	601a      	str	r2, [r3, #0]
 8006bba:	e002      	b.n	8006bc2 <USB_EPStopXfer+0x7a>
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006bbc:	681a      	ldr	r2, [r3, #0]
 8006bbe:	2a00      	cmp	r2, #0
 8006bc0:	dad0      	bge.n	8006b64 <USB_EPStopXfer+0x1c>
        count++;
 8006bc2:	9a01      	ldr	r2, [sp, #4]
 8006bc4:	3201      	adds	r2, #1
 8006bc6:	9201      	str	r2, [sp, #4]
        if (count > 10000U)
 8006bc8:	9a01      	ldr	r2, [sp, #4]
 8006bca:	428a      	cmp	r2, r1
 8006bcc:	d9f6      	bls.n	8006bbc <USB_EPStopXfer+0x74>
 8006bce:	e7e0      	b.n	8006b92 <USB_EPStopXfer+0x4a>

08006bd0 <USB_WritePacket>:
{
 8006bd0:	b410      	push	{r4}
 8006bd2:	f89d 4004 	ldrb.w	r4, [sp, #4]
  if (dma == 0U)
 8006bd6:	b964      	cbnz	r4, 8006bf2 <USB_WritePacket+0x22>
    count32b = ((uint32_t)len + 3U) / 4U;
 8006bd8:	3303      	adds	r3, #3
    for (i = 0U; i < count32b; i++)
 8006bda:	089b      	lsrs	r3, r3, #2
 8006bdc:	d009      	beq.n	8006bf2 <USB_WritePacket+0x22>
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006bde:	3201      	adds	r2, #1
 8006be0:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8006be4:	eb00 3002 	add.w	r0, r0, r2, lsl #12
 8006be8:	f851 2b04 	ldr.w	r2, [r1], #4
    for (i = 0U; i < count32b; i++)
 8006bec:	428b      	cmp	r3, r1
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006bee:	6002      	str	r2, [r0, #0]
    for (i = 0U; i < count32b; i++)
 8006bf0:	d1fa      	bne.n	8006be8 <USB_WritePacket+0x18>
}
 8006bf2:	2000      	movs	r0, #0
 8006bf4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006bf8:	4770      	bx	lr
 8006bfa:	bf00      	nop

08006bfc <USB_ReadPacket>:
{
 8006bfc:	b530      	push	{r4, r5, lr}
  for (i = 0U; i < count32b; i++)
 8006bfe:	ea5f 0e92 	movs.w	lr, r2, lsr #2
  uint16_t remaining_bytes = len % 4U;
 8006c02:	f002 0503 	and.w	r5, r2, #3
  for (i = 0U; i < count32b; i++)
 8006c06:	d00b      	beq.n	8006c20 <USB_ReadPacket+0x24>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006c08:	f500 5480 	add.w	r4, r0, #4096	; 0x1000
  uint8_t *pDest = dest;
 8006c0c:	468c      	mov	ip, r1
  for (i = 0U; i < count32b; i++)
 8006c0e:	2300      	movs	r3, #0
 8006c10:	3301      	adds	r3, #1
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006c12:	6822      	ldr	r2, [r4, #0]
  for (i = 0U; i < count32b; i++)
 8006c14:	459e      	cmp	lr, r3
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006c16:	f84c 2b04 	str.w	r2, [ip], #4
  for (i = 0U; i < count32b; i++)
 8006c1a:	d1f9      	bne.n	8006c10 <USB_ReadPacket+0x14>
    pDest++;
 8006c1c:	eb01 018e 	add.w	r1, r1, lr, lsl #2
  if (remaining_bytes != 0U)
 8006c20:	b16d      	cbz	r5, 8006c3e <USB_ReadPacket+0x42>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006c22:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
      remaining_bytes--;
 8006c26:	1e6b      	subs	r3, r5, #1
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006c28:	6802      	ldr	r2, [r0, #0]
      remaining_bytes--;
 8006c2a:	b29b      	uxth	r3, r3
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006c2c:	700a      	strb	r2, [r1, #0]
    } while (remaining_bytes != 0U);
 8006c2e:	b12b      	cbz	r3, 8006c3c <USB_ReadPacket+0x40>
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006c30:	0a10      	lsrs	r0, r2, #8
    } while (remaining_bytes != 0U);
 8006c32:	2b01      	cmp	r3, #1
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006c34:	7048      	strb	r0, [r1, #1]
    } while (remaining_bytes != 0U);
 8006c36:	d001      	beq.n	8006c3c <USB_ReadPacket+0x40>
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006c38:	0c12      	lsrs	r2, r2, #16
 8006c3a:	708a      	strb	r2, [r1, #2]
      pDest++;
 8006c3c:	4429      	add	r1, r5
}
 8006c3e:	4608      	mov	r0, r1
 8006c40:	bd30      	pop	{r4, r5, pc}
 8006c42:	bf00      	nop

08006c44 <USB_EPSetStall>:
  if (ep->is_in == 1U)
 8006c44:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8006c46:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8006c48:	2a01      	cmp	r2, #1
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006c4a:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  if (ep->is_in == 1U)
 8006c4e:	d00c      	beq.n	8006c6a <USB_EPSetStall+0x26>
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006c50:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 8006c54:	b10b      	cbz	r3, 8006c5a <USB_EPSetStall+0x16>
 8006c56:	2a00      	cmp	r2, #0
 8006c58:	da14      	bge.n	8006c84 <USB_EPSetStall+0x40>
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006c5a:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8006c5e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006c62:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 8006c66:	2000      	movs	r0, #0
 8006c68:	4770      	bx	lr
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006c6a:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 8006c6e:	2a00      	cmp	r2, #0
 8006c70:	db00      	blt.n	8006c74 <USB_EPSetStall+0x30>
 8006c72:	b973      	cbnz	r3, 8006c92 <USB_EPSetStall+0x4e>
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006c74:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8006c78:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006c7c:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 8006c80:	2000      	movs	r0, #0
 8006c82:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006c84:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8006c88:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006c8c:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 8006c90:	e7e3      	b.n	8006c5a <USB_EPSetStall+0x16>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006c92:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8006c96:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006c9a:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006c9e:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8006ca2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006ca6:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 8006caa:	e7e9      	b.n	8006c80 <USB_EPSetStall+0x3c>

08006cac <USB_EPClearStall>:
  if (ep->is_in == 1U)
 8006cac:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8006cae:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8006cb0:	2a01      	cmp	r2, #1
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006cb2:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  if (ep->is_in == 1U)
 8006cb6:	d013      	beq.n	8006ce0 <USB_EPClearStall+0x34>
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006cb8:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8006cbc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006cc0:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006cc4:	790b      	ldrb	r3, [r1, #4]
 8006cc6:	3b02      	subs	r3, #2
 8006cc8:	2b01      	cmp	r3, #1
 8006cca:	d901      	bls.n	8006cd0 <USB_EPClearStall+0x24>
}
 8006ccc:	2000      	movs	r0, #0
 8006cce:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006cd0:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8006cd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006cd8:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 8006cdc:	2000      	movs	r0, #0
 8006cde:	4770      	bx	lr
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006ce0:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8006ce4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006ce8:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006cec:	790b      	ldrb	r3, [r1, #4]
 8006cee:	3b02      	subs	r3, #2
 8006cf0:	2b01      	cmp	r3, #1
 8006cf2:	d8eb      	bhi.n	8006ccc <USB_EPClearStall+0x20>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006cf4:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8006cf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006cfc:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 8006d00:	2000      	movs	r0, #0
 8006d02:	4770      	bx	lr

08006d04 <USB_SetDevAddress>:
{
 8006d04:	4603      	mov	r3, r0
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006d06:	0109      	lsls	r1, r1, #4
}
 8006d08:	2000      	movs	r0, #0
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006d0a:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006d0e:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006d12:	f422 62fe 	bic.w	r2, r2, #2032	; 0x7f0
 8006d16:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006d1a:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 8006d1e:	4311      	orrs	r1, r2
 8006d20:	f8c3 1800 	str.w	r1, [r3, #2048]	; 0x800
}
 8006d24:	4770      	bx	lr
 8006d26:	bf00      	nop

08006d28 <USB_DevConnect>:
{
 8006d28:	4603      	mov	r3, r0
}
 8006d2a:	2000      	movs	r0, #0
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006d2c:	f8d3 2e00 	ldr.w	r2, [r3, #3584]	; 0xe00
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006d30:	f503 6100 	add.w	r1, r3, #2048	; 0x800
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006d34:	f022 0203 	bic.w	r2, r2, #3
 8006d38:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006d3c:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 8006d40:	f023 0302 	bic.w	r3, r3, #2
 8006d44:	604b      	str	r3, [r1, #4]
}
 8006d46:	4770      	bx	lr

08006d48 <USB_DevDisconnect>:
{
 8006d48:	4603      	mov	r3, r0
}
 8006d4a:	2000      	movs	r0, #0
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006d4c:	f8d3 2e00 	ldr.w	r2, [r3, #3584]	; 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006d50:	f503 6100 	add.w	r1, r3, #2048	; 0x800
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006d54:	f022 0203 	bic.w	r2, r2, #3
 8006d58:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006d5c:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 8006d60:	f043 0302 	orr.w	r3, r3, #2
 8006d64:	604b      	str	r3, [r1, #4]
}
 8006d66:	4770      	bx	lr

08006d68 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 8006d68:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 8006d6a:	6980      	ldr	r0, [r0, #24]
}
 8006d6c:	4010      	ands	r0, r2
 8006d6e:	4770      	bx	lr

08006d70 <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8006d70:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006d74:	f8d0 081c 	ldr.w	r0, [r0, #2076]	; 0x81c
 8006d78:	4018      	ands	r0, r3
}
 8006d7a:	0c00      	lsrs	r0, r0, #16
 8006d7c:	4770      	bx	lr
 8006d7e:	bf00      	nop

08006d80 <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8006d80:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006d84:	f8d0 081c 	ldr.w	r0, [r0, #2076]	; 0x81c
 8006d88:	4018      	ands	r0, r3
}
 8006d8a:	b280      	uxth	r0, r0
 8006d8c:	4770      	bx	lr
 8006d8e:	bf00      	nop

08006d90 <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006d90:	eb00 1141 	add.w	r1, r0, r1, lsl #5
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006d94:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006d98:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	; 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006d9c:	6940      	ldr	r0, [r0, #20]
}
 8006d9e:	4010      	ands	r0, r2
 8006da0:	4770      	bx	lr
 8006da2:	bf00      	nop

08006da4 <USB_ReadDevInEPInterrupt>:
  msk = USBx_DEVICE->DIEPMSK;
 8006da4:	f8d0 2810 	ldr.w	r2, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006da8:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006dac:	eb00 1041 	add.w	r0, r0, r1, lsl #5
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006db0:	f001 010f 	and.w	r1, r1, #15
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006db4:	f8d0 0908 	ldr.w	r0, [r0, #2312]	; 0x908
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006db8:	40cb      	lsrs	r3, r1
 8006dba:	01db      	lsls	r3, r3, #7
 8006dbc:	b2db      	uxtb	r3, r3
 8006dbe:	4313      	orrs	r3, r2
}
 8006dc0:	4018      	ands	r0, r3
 8006dc2:	4770      	bx	lr

08006dc4 <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 8006dc4:	6940      	ldr	r0, [r0, #20]
}
 8006dc6:	f000 0001 	and.w	r0, r0, #1
 8006dca:	4770      	bx	lr

08006dcc <USB_ActivateSetup>:
{
 8006dcc:	4603      	mov	r3, r0
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006dce:	4a09      	ldr	r2, [pc, #36]	; (8006df4 <USB_ActivateSetup+0x28>)
}
 8006dd0:	2000      	movs	r0, #0
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006dd2:	f503 6100 	add.w	r1, r3, #2048	; 0x800
{
 8006dd6:	b410      	push	{r4}
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006dd8:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
 8006ddc:	4022      	ands	r2, r4
}
 8006dde:	f85d 4b04 	ldr.w	r4, [sp], #4
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006de2:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006de6:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 8006dea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006dee:	604b      	str	r3, [r1, #4]
}
 8006df0:	4770      	bx	lr
 8006df2:	bf00      	nop
 8006df4:	fffff800 	.word	0xfffff800

08006df8 <USB_EP0_OutStart>:
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006df8:	4b14      	ldr	r3, [pc, #80]	; (8006e4c <USB_EP0_OutStart+0x54>)
{
 8006dfa:	b410      	push	{r4}
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006dfc:	6c04      	ldr	r4, [r0, #64]	; 0x40
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006dfe:	429c      	cmp	r4, r3
 8006e00:	d81a      	bhi.n	8006e38 <USB_EP0_OutStart+0x40>
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006e02:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006e06:	2300      	movs	r3, #0
  if (dma == 1U)
 8006e08:	2901      	cmp	r1, #1
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006e0a:	6103      	str	r3, [r0, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006e0c:	6903      	ldr	r3, [r0, #16]
 8006e0e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006e12:	6103      	str	r3, [r0, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006e14:	6903      	ldr	r3, [r0, #16]
 8006e16:	f043 0318 	orr.w	r3, r3, #24
 8006e1a:	6103      	str	r3, [r0, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006e1c:	6903      	ldr	r3, [r0, #16]
 8006e1e:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006e22:	6103      	str	r3, [r0, #16]
  if (dma == 1U)
 8006e24:	d104      	bne.n	8006e30 <USB_EP0_OutStart+0x38>
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006e26:	6142      	str	r2, [r0, #20]
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006e28:	6803      	ldr	r3, [r0, #0]
 8006e2a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006e2e:	6003      	str	r3, [r0, #0]
}
 8006e30:	2000      	movs	r0, #0
 8006e32:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006e36:	4770      	bx	lr
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006e38:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8006e3c:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	dae0      	bge.n	8006e06 <USB_EP0_OutStart+0xe>
}
 8006e44:	2000      	movs	r0, #0
 8006e46:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006e4a:	4770      	bx	lr
 8006e4c:	4f54300a 	.word	0x4f54300a

08006e50 <USBD_CDC_EP0_RxReady>:
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006e50:	f8d0 32d4 	ldr.w	r3, [r0, #724]	; 0x2d4
 8006e54:	eb00 0083 	add.w	r0, r0, r3, lsl #2
{
 8006e58:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006e5a:	f8d0 42c0 	ldr.w	r4, [r0, #704]	; 0x2c0

  if (hcdc == NULL)
 8006e5e:	b194      	cbz	r4, 8006e86 <USBD_CDC_EP0_RxReady+0x36>
  {
    return (uint8_t)USBD_FAIL;
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006e60:	f8d0 32c4 	ldr.w	r3, [r0, #708]	; 0x2c4
 8006e64:	b16b      	cbz	r3, 8006e82 <USBD_CDC_EP0_RxReady+0x32>
 8006e66:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8006e6a:	28ff      	cmp	r0, #255	; 0xff
 8006e6c:	d009      	beq.n	8006e82 <USBD_CDC_EP0_RxReady+0x32>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006e6e:	689b      	ldr	r3, [r3, #8]
 8006e70:	4621      	mov	r1, r4
 8006e72:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 8006e76:	4798      	blx	r3
                                                                     (uint8_t *)hcdc->data,
                                                                     (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 8006e78:	23ff      	movs	r3, #255	; 0xff
  }

  return (uint8_t)USBD_OK;
 8006e7a:	2000      	movs	r0, #0
    hcdc->CmdOpCode = 0xFFU;
 8006e7c:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
}
 8006e80:	bd10      	pop	{r4, pc}
  return (uint8_t)USBD_OK;
 8006e82:	2000      	movs	r0, #0
}
 8006e84:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 8006e86:	2003      	movs	r0, #3
}
 8006e88:	bd10      	pop	{r4, pc}
 8006e8a:	bf00      	nop

08006e8c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006e8c:	4603      	mov	r3, r0
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006e8e:	220a      	movs	r2, #10

  return USBD_CDC_DeviceQualifierDesc;
}
 8006e90:	4801      	ldr	r0, [pc, #4]	; (8006e98 <USBD_CDC_GetDeviceQualifierDescriptor+0xc>)
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006e92:	801a      	strh	r2, [r3, #0]
}
 8006e94:	4770      	bx	lr
 8006e96:	bf00      	nop
 8006e98:	240065b0 	.word	0x240065b0

08006e9c <USBD_CDC_GetFSCfgDesc>:
{
 8006e9c:	b570      	push	{r4, r5, r6, lr}
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006e9e:	2182      	movs	r1, #130	; 0x82
{
 8006ea0:	4606      	mov	r6, r0
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006ea2:	480f      	ldr	r0, [pc, #60]	; (8006ee0 <USBD_CDC_GetFSCfgDesc+0x44>)
 8006ea4:	f000 fc02 	bl	80076ac <USBD_GetEpDesc>
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006ea8:	2101      	movs	r1, #1
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006eaa:	4605      	mov	r5, r0
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006eac:	480c      	ldr	r0, [pc, #48]	; (8006ee0 <USBD_CDC_GetFSCfgDesc+0x44>)
 8006eae:	f000 fbfd 	bl	80076ac <USBD_GetEpDesc>
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006eb2:	2181      	movs	r1, #129	; 0x81
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006eb4:	4604      	mov	r4, r0
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006eb6:	480a      	ldr	r0, [pc, #40]	; (8006ee0 <USBD_CDC_GetFSCfgDesc+0x44>)
 8006eb8:	f000 fbf8 	bl	80076ac <USBD_GetEpDesc>
  if (pEpCmdDesc != NULL)
 8006ebc:	b10d      	cbz	r5, 8006ec2 <USBD_CDC_GetFSCfgDesc+0x26>
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006ebe:	2210      	movs	r2, #16
 8006ec0:	71aa      	strb	r2, [r5, #6]
  if (pEpOutDesc != NULL)
 8006ec2:	b11c      	cbz	r4, 8006ecc <USBD_CDC_GetFSCfgDesc+0x30>
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006ec4:	2100      	movs	r1, #0
 8006ec6:	2240      	movs	r2, #64	; 0x40
 8006ec8:	7161      	strb	r1, [r4, #5]
 8006eca:	7122      	strb	r2, [r4, #4]
  if (pEpInDesc != NULL)
 8006ecc:	b118      	cbz	r0, 8006ed6 <USBD_CDC_GetFSCfgDesc+0x3a>
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006ece:	2100      	movs	r1, #0
 8006ed0:	2240      	movs	r2, #64	; 0x40
 8006ed2:	7141      	strb	r1, [r0, #5]
 8006ed4:	7102      	strb	r2, [r0, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006ed6:	2343      	movs	r3, #67	; 0x43
}
 8006ed8:	4801      	ldr	r0, [pc, #4]	; (8006ee0 <USBD_CDC_GetFSCfgDesc+0x44>)
  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006eda:	8033      	strh	r3, [r6, #0]
}
 8006edc:	bd70      	pop	{r4, r5, r6, pc}
 8006ede:	bf00      	nop
 8006ee0:	2400656c 	.word	0x2400656c

08006ee4 <USBD_CDC_GetHSCfgDesc>:
{
 8006ee4:	b570      	push	{r4, r5, r6, lr}
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006ee6:	2182      	movs	r1, #130	; 0x82
{
 8006ee8:	4606      	mov	r6, r0
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006eea:	480f      	ldr	r0, [pc, #60]	; (8006f28 <USBD_CDC_GetHSCfgDesc+0x44>)
 8006eec:	f000 fbde 	bl	80076ac <USBD_GetEpDesc>
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006ef0:	2101      	movs	r1, #1
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006ef2:	4605      	mov	r5, r0
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006ef4:	480c      	ldr	r0, [pc, #48]	; (8006f28 <USBD_CDC_GetHSCfgDesc+0x44>)
 8006ef6:	f000 fbd9 	bl	80076ac <USBD_GetEpDesc>
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006efa:	2181      	movs	r1, #129	; 0x81
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006efc:	4604      	mov	r4, r0
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006efe:	480a      	ldr	r0, [pc, #40]	; (8006f28 <USBD_CDC_GetHSCfgDesc+0x44>)
 8006f00:	f000 fbd4 	bl	80076ac <USBD_GetEpDesc>
  if (pEpCmdDesc != NULL)
 8006f04:	b10d      	cbz	r5, 8006f0a <USBD_CDC_GetHSCfgDesc+0x26>
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006f06:	2210      	movs	r2, #16
 8006f08:	71aa      	strb	r2, [r5, #6]
  if (pEpOutDesc != NULL)
 8006f0a:	b11c      	cbz	r4, 8006f14 <USBD_CDC_GetHSCfgDesc+0x30>
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006f0c:	2100      	movs	r1, #0
 8006f0e:	2202      	movs	r2, #2
 8006f10:	7121      	strb	r1, [r4, #4]
 8006f12:	7162      	strb	r2, [r4, #5]
  if (pEpInDesc != NULL)
 8006f14:	b118      	cbz	r0, 8006f1e <USBD_CDC_GetHSCfgDesc+0x3a>
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006f16:	2100      	movs	r1, #0
 8006f18:	2202      	movs	r2, #2
 8006f1a:	7101      	strb	r1, [r0, #4]
 8006f1c:	7142      	strb	r2, [r0, #5]
  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006f1e:	2343      	movs	r3, #67	; 0x43
}
 8006f20:	4801      	ldr	r0, [pc, #4]	; (8006f28 <USBD_CDC_GetHSCfgDesc+0x44>)
  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006f22:	8033      	strh	r3, [r6, #0]
}
 8006f24:	bd70      	pop	{r4, r5, r6, pc}
 8006f26:	bf00      	nop
 8006f28:	2400656c 	.word	0x2400656c

08006f2c <USBD_CDC_DataOut>:
{
 8006f2c:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006f2e:	f8d0 32d4 	ldr.w	r3, [r0, #724]	; 0x2d4
 8006f32:	33b0      	adds	r3, #176	; 0xb0
 8006f34:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006f38:	b195      	cbz	r5, 8006f60 <USBD_CDC_DataOut+0x34>
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006f3a:	4604      	mov	r4, r0
 8006f3c:	f001 f9ec 	bl	8008318 <USBD_LL_GetRxDataSize>
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006f40:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 8006f44:	f8d4 32d4 	ldr.w	r3, [r4, #724]	; 0x2d4
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006f48:	f8c5 020c 	str.w	r0, [r5, #524]	; 0x20c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006f4c:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8006f50:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 8006f54:	f8d4 32c4 	ldr.w	r3, [r4, #708]	; 0x2c4
 8006f58:	68db      	ldr	r3, [r3, #12]
 8006f5a:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 8006f5c:	2000      	movs	r0, #0
}
 8006f5e:	bd38      	pop	{r3, r4, r5, pc}
    return (uint8_t)USBD_FAIL;
 8006f60:	2003      	movs	r0, #3
}
 8006f62:	bd38      	pop	{r3, r4, r5, pc}

08006f64 <USBD_CDC_DataIn>:
{
 8006f64:	b570      	push	{r4, r5, r6, lr}
 8006f66:	f8d0 42d4 	ldr.w	r4, [r0, #724]	; 0x2d4
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006f6a:	f8d0 62c8 	ldr.w	r6, [r0, #712]	; 0x2c8
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006f6e:	eb00 0e84 	add.w	lr, r0, r4, lsl #2
 8006f72:	f8de 52c0 	ldr.w	r5, [lr, #704]	; 0x2c0
 8006f76:	b365      	cbz	r5, 8006fd2 <USBD_CDC_DataIn+0x6e>
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006f78:	f001 040f 	and.w	r4, r1, #15
 8006f7c:	460a      	mov	r2, r1
 8006f7e:	eb04 0c84 	add.w	ip, r4, r4, lsl #2
 8006f82:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 8006f86:	f8dc 3018 	ldr.w	r3, [ip, #24]
 8006f8a:	b96b      	cbnz	r3, 8006fa8 <USBD_CDC_DataIn+0x44>
    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006f8c:	f8de 32c4 	ldr.w	r3, [lr, #708]	; 0x2c4
    hcdc->TxState = 0U;
 8006f90:	2400      	movs	r4, #0
    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006f92:	691b      	ldr	r3, [r3, #16]
    hcdc->TxState = 0U;
 8006f94:	f8c5 4214 	str.w	r4, [r5, #532]	; 0x214
    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006f98:	b1cb      	cbz	r3, 8006fce <USBD_CDC_DataIn+0x6a>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006f9a:	f505 7104 	add.w	r1, r5, #528	; 0x210
 8006f9e:	f8d5 0208 	ldr.w	r0, [r5, #520]	; 0x208
 8006fa2:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 8006fa4:	4620      	mov	r0, r4
}
 8006fa6:	bd70      	pop	{r4, r5, r6, pc}
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006fa8:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
 8006fac:	eb06 0684 	add.w	r6, r6, r4, lsl #2
 8006fb0:	6c74      	ldr	r4, [r6, #68]	; 0x44
 8006fb2:	fbb3 f6f4 	udiv	r6, r3, r4
 8006fb6:	fb04 3416 	mls	r4, r4, r6, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006fba:	2c00      	cmp	r4, #0
 8006fbc:	d1e6      	bne.n	8006f8c <USBD_CDC_DataIn+0x28>
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006fbe:	4623      	mov	r3, r4
 8006fc0:	4622      	mov	r2, r4
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006fc2:	f8cc 4018 	str.w	r4, [ip, #24]
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006fc6:	f001 f98b 	bl	80082e0 <USBD_LL_Transmit>
  return (uint8_t)USBD_OK;
 8006fca:	4620      	mov	r0, r4
}
 8006fcc:	bd70      	pop	{r4, r5, r6, pc}
  return (uint8_t)USBD_OK;
 8006fce:	4618      	mov	r0, r3
}
 8006fd0:	bd70      	pop	{r4, r5, r6, pc}
    return (uint8_t)USBD_FAIL;
 8006fd2:	2003      	movs	r0, #3
}
 8006fd4:	bd70      	pop	{r4, r5, r6, pc}
 8006fd6:	bf00      	nop

08006fd8 <USBD_CDC_Setup>:
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006fd8:	f8d0 32d4 	ldr.w	r3, [r0, #724]	; 0x2d4
 8006fdc:	eb00 0383 	add.w	r3, r0, r3, lsl #2
{
 8006fe0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006fe2:	4604      	mov	r4, r0
 8006fe4:	b083      	sub	sp, #12
  uint8_t ifalt = 0U;
 8006fe6:	2000      	movs	r0, #0
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006fe8:	f8d3 72c0 	ldr.w	r7, [r3, #704]	; 0x2c0
  uint8_t ifalt = 0U;
 8006fec:	f88d 0005 	strb.w	r0, [sp, #5]
  uint16_t status_info = 0U;
 8006ff0:	f8ad 0006 	strh.w	r0, [sp, #6]
  if (hcdc == NULL)
 8006ff4:	2f00      	cmp	r7, #0
 8006ff6:	d066      	beq.n	80070c6 <USBD_CDC_Setup+0xee>
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ff8:	f891 c000 	ldrb.w	ip, [r1]
 8006ffc:	460d      	mov	r5, r1
 8006ffe:	f01c 0660 	ands.w	r6, ip, #96	; 0x60
 8007002:	d01d      	beq.n	8007040 <USBD_CDC_Setup+0x68>
 8007004:	2e20      	cmp	r6, #32
 8007006:	d007      	beq.n	8007018 <USBD_CDC_Setup+0x40>
          USBD_CtlError(pdev, req);
 8007008:	4629      	mov	r1, r5
 800700a:	4620      	mov	r0, r4
          ret = USBD_FAIL;
 800700c:	2603      	movs	r6, #3
          USBD_CtlError(pdev, req);
 800700e:	f000 fe25 	bl	8007c5c <USBD_CtlError>
}
 8007012:	4630      	mov	r0, r6
 8007014:	b003      	add	sp, #12
 8007016:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (req->wLength != 0U)
 8007018:	88ca      	ldrh	r2, [r1, #6]
 800701a:	b37a      	cbz	r2, 800707c <USBD_CDC_Setup+0xa4>
        if ((req->bmRequest & 0x80U) != 0U)
 800701c:	f01c 0f80 	tst.w	ip, #128	; 0x80
 8007020:	d155      	bne.n	80070ce <USBD_CDC_Setup+0xf6>
          hcdc->CmdOpCode = req->bRequest;
 8007022:	784b      	ldrb	r3, [r1, #1]
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007024:	2a3f      	cmp	r2, #63	; 0x3f
          hcdc->CmdOpCode = req->bRequest;
 8007026:	f887 3200 	strb.w	r3, [r7, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800702a:	d960      	bls.n	80070ee <USBD_CDC_Setup+0x116>
 800702c:	2340      	movs	r3, #64	; 0x40
 800702e:	461a      	mov	r2, r3
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007030:	4639      	mov	r1, r7
 8007032:	4620      	mov	r0, r4
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007034:	f887 3201 	strb.w	r3, [r7, #513]	; 0x201
  USBD_StatusTypeDef ret = USBD_OK;
 8007038:	2600      	movs	r6, #0
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800703a:	f000 fe5d 	bl	8007cf8 <USBD_CtlPrepareRx>
 800703e:	e7e8      	b.n	8007012 <USBD_CDC_Setup+0x3a>
      switch (req->bRequest)
 8007040:	784b      	ldrb	r3, [r1, #1]
 8007042:	2b0b      	cmp	r3, #11
 8007044:	d8e0      	bhi.n	8007008 <USBD_CDC_Setup+0x30>
 8007046:	a201      	add	r2, pc, #4	; (adr r2, 800704c <USBD_CDC_Setup+0x74>)
 8007048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800704c:	080070af 	.word	0x080070af
 8007050:	08007013 	.word	0x08007013
 8007054:	08007009 	.word	0x08007009
 8007058:	08007009 	.word	0x08007009
 800705c:	08007009 	.word	0x08007009
 8007060:	08007009 	.word	0x08007009
 8007064:	08007009 	.word	0x08007009
 8007068:	08007009 	.word	0x08007009
 800706c:	08007009 	.word	0x08007009
 8007070:	08007009 	.word	0x08007009
 8007074:	08007099 	.word	0x08007099
 8007078:	0800708f 	.word	0x0800708f
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800707c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
  USBD_StatusTypeDef ret = USBD_OK;
 8007080:	4616      	mov	r6, r2
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007082:	7848      	ldrb	r0, [r1, #1]
 8007084:	689b      	ldr	r3, [r3, #8]
 8007086:	4798      	blx	r3
}
 8007088:	4630      	mov	r0, r6
 800708a:	b003      	add	sp, #12
 800708c:	bdf0      	pop	{r4, r5, r6, r7, pc}
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800708e:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8007092:	2b03      	cmp	r3, #3
 8007094:	d0bd      	beq.n	8007012 <USBD_CDC_Setup+0x3a>
 8007096:	e7b7      	b.n	8007008 <USBD_CDC_Setup+0x30>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007098:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 800709c:	2b03      	cmp	r3, #3
 800709e:	d1b3      	bne.n	8007008 <USBD_CDC_Setup+0x30>
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80070a0:	2201      	movs	r2, #1
 80070a2:	f10d 0105 	add.w	r1, sp, #5
 80070a6:	4620      	mov	r0, r4
 80070a8:	f000 fe0e 	bl	8007cc8 <USBD_CtlSendData>
 80070ac:	e7b1      	b.n	8007012 <USBD_CDC_Setup+0x3a>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070ae:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
 80070b2:	2a03      	cmp	r2, #3
 80070b4:	d1a8      	bne.n	8007008 <USBD_CDC_Setup+0x30>
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80070b6:	2202      	movs	r2, #2
 80070b8:	f10d 0106 	add.w	r1, sp, #6
 80070bc:	4620      	mov	r0, r4
  USBD_StatusTypeDef ret = USBD_OK;
 80070be:	461e      	mov	r6, r3
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80070c0:	f000 fe02 	bl	8007cc8 <USBD_CtlSendData>
 80070c4:	e7a5      	b.n	8007012 <USBD_CDC_Setup+0x3a>
    return (uint8_t)USBD_FAIL;
 80070c6:	2603      	movs	r6, #3
}
 80070c8:	4630      	mov	r0, r6
 80070ca:	b003      	add	sp, #12
 80070cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80070ce:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80070d2:	4639      	mov	r1, r7
  USBD_StatusTypeDef ret = USBD_OK;
 80070d4:	4606      	mov	r6, r0
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80070d6:	7868      	ldrb	r0, [r5, #1]
 80070d8:	689b      	ldr	r3, [r3, #8]
 80070da:	4798      	blx	r3
          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80070dc:	88ea      	ldrh	r2, [r5, #6]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80070de:	4639      	mov	r1, r7
 80070e0:	4620      	mov	r0, r4
 80070e2:	2a07      	cmp	r2, #7
 80070e4:	bf28      	it	cs
 80070e6:	2207      	movcs	r2, #7
 80070e8:	f000 fdee 	bl	8007cc8 <USBD_CtlSendData>
 80070ec:	e791      	b.n	8007012 <USBD_CDC_Setup+0x3a>
 80070ee:	b2d3      	uxtb	r3, r2
 80070f0:	e79e      	b.n	8007030 <USBD_CDC_Setup+0x58>
 80070f2:	bf00      	nop

080070f4 <USBD_CDC_DeInit>:
{
 80070f4:	b538      	push	{r3, r4, r5, lr}
 80070f6:	4604      	mov	r4, r0
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80070f8:	2500      	movs	r5, #0
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80070fa:	2181      	movs	r1, #129	; 0x81
 80070fc:	f001 f8a4 	bl	8008248 <USBD_LL_CloseEP>
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8007100:	2101      	movs	r1, #1
 8007102:	4620      	mov	r0, r4
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007104:	8725      	strh	r5, [r4, #56]	; 0x38
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8007106:	f001 f89f 	bl	8008248 <USBD_LL_CloseEP>
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800710a:	2182      	movs	r1, #130	; 0x82
 800710c:	4620      	mov	r0, r4
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800710e:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8007112:	f001 f899 	bl	8008248 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007116:	f8d4 32d4 	ldr.w	r3, [r4, #724]	; 0x2d4
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800711a:	64e5      	str	r5, [r4, #76]	; 0x4c
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800711c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007120:	f8d3 22c0 	ldr.w	r2, [r3, #704]	; 0x2c0
 8007124:	b18a      	cbz	r2, 800714a <USBD_CDC_DeInit+0x56>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007126:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800712a:	685b      	ldr	r3, [r3, #4]
 800712c:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800712e:	f8d4 32d4 	ldr.w	r3, [r4, #724]	; 0x2d4
 8007132:	33b0      	adds	r3, #176	; 0xb0
 8007134:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 8007138:	f001 f8f6 	bl	8008328 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800713c:	f8d4 32d4 	ldr.w	r3, [r4, #724]	; 0x2d4
 8007140:	33b0      	adds	r3, #176	; 0xb0
 8007142:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
    pdev->pClassData = NULL;
 8007146:	f8c4 52bc 	str.w	r5, [r4, #700]	; 0x2bc
}
 800714a:	2000      	movs	r0, #0
 800714c:	bd38      	pop	{r3, r4, r5, pc}
 800714e:	bf00      	nop

08007150 <USBD_CDC_Init>:
{
 8007150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007154:	4604      	mov	r4, r0
  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007156:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800715a:	f001 f8e1 	bl	8008320 <USBD_static_malloc>
  if (hcdc == NULL)
 800715e:	4605      	mov	r5, r0
 8007160:	2800      	cmp	r0, #0
 8007162:	d061      	beq.n	8007228 <USBD_CDC_Init+0xd8>
  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007164:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8007168:	2100      	movs	r1, #0
 800716a:	f003 fc92 	bl	800aa92 <memset>
  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800716e:	f8d4 32d4 	ldr.w	r3, [r4, #724]	; 0x2d4
 8007172:	33b0      	adds	r3, #176	; 0xb0
 8007174:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007178:	7c23      	ldrb	r3, [r4, #16]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800717a:	f8c4 52bc 	str.w	r5, [r4, #700]	; 0x2bc
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800717e:	b3d3      	cbz	r3, 80071f6 <USBD_CDC_Init+0xa6>
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007180:	2340      	movs	r3, #64	; 0x40
 8007182:	2202      	movs	r2, #2
 8007184:	2181      	movs	r1, #129	; 0x81
 8007186:	4620      	mov	r0, r4
 8007188:	f001 f84c 	bl	8008224 <USBD_LL_OpenEP>
    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800718c:	2101      	movs	r1, #1
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800718e:	2340      	movs	r3, #64	; 0x40
 8007190:	2202      	movs	r2, #2
 8007192:	4620      	mov	r0, r4
    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007194:	8721      	strh	r1, [r4, #56]	; 0x38
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007196:	f001 f845 	bl	8008224 <USBD_LL_OpenEP>
    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800719a:	2701      	movs	r7, #1
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800719c:	2210      	movs	r2, #16
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800719e:	2308      	movs	r3, #8
 80071a0:	2182      	movs	r1, #130	; 0x82
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80071a2:	f8a4 204e 	strh.w	r2, [r4, #78]	; 0x4e
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80071a6:	4620      	mov	r0, r4
 80071a8:	2203      	movs	r2, #3
    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80071aa:	f8a4 7178 	strh.w	r7, [r4, #376]	; 0x178
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80071ae:	f001 f839 	bl	8008224 <USBD_LL_OpenEP>
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80071b2:	f8d4 32d4 	ldr.w	r3, [r4, #724]	; 0x2d4
  hcdc->RxBuffer = NULL;
 80071b6:	2600      	movs	r6, #0
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80071b8:	f8a4 704c 	strh.w	r7, [r4, #76]	; 0x4c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80071bc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
  hcdc->RxBuffer = NULL;
 80071c0:	f8c5 6204 	str.w	r6, [r5, #516]	; 0x204
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80071c4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	4798      	blx	r3
  if (hcdc->RxBuffer == NULL)
 80071cc:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
  hcdc->TxState = 0U;
 80071d0:	f8c5 6214 	str.w	r6, [r5, #532]	; 0x214
  hcdc->RxState = 0U;
 80071d4:	f8c5 6218 	str.w	r6, [r5, #536]	; 0x218
  if (hcdc->RxBuffer == NULL)
 80071d8:	b382      	cbz	r2, 800723c <USBD_CDC_Init+0xec>
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80071da:	f894 8010 	ldrb.w	r8, [r4, #16]
 80071de:	f1b8 0f00 	cmp.w	r8, #0
 80071e2:	d118      	bne.n	8007216 <USBD_CDC_Init+0xc6>
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80071e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80071e8:	4639      	mov	r1, r7
 80071ea:	4620      	mov	r0, r4
 80071ec:	f001 f886 	bl	80082fc <USBD_LL_PrepareReceive>
}
 80071f0:	4640      	mov	r0, r8
 80071f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80071f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80071fa:	2202      	movs	r2, #2
 80071fc:	2181      	movs	r1, #129	; 0x81
 80071fe:	4620      	mov	r0, r4
 8007200:	f001 f810 	bl	8008224 <USBD_LL_OpenEP>
    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007204:	2101      	movs	r1, #1
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007206:	f44f 7300 	mov.w	r3, #512	; 0x200
 800720a:	2202      	movs	r2, #2
 800720c:	4620      	mov	r0, r4
    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800720e:	8721      	strh	r1, [r4, #56]	; 0x38
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007210:	f001 f808 	bl	8008224 <USBD_LL_OpenEP>
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007214:	e7c1      	b.n	800719a <USBD_CDC_Init+0x4a>
  return (uint8_t)USBD_OK;
 8007216:	46b0      	mov	r8, r6
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007218:	2340      	movs	r3, #64	; 0x40
 800721a:	4639      	mov	r1, r7
 800721c:	4620      	mov	r0, r4
 800721e:	f001 f86d 	bl	80082fc <USBD_LL_PrepareReceive>
}
 8007222:	4640      	mov	r0, r8
 8007224:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007228:	f8d4 32d4 	ldr.w	r3, [r4, #724]	; 0x2d4
    return (uint8_t)USBD_EMEM;
 800722c:	f04f 0802 	mov.w	r8, #2
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007230:	33b0      	adds	r3, #176	; 0xb0
 8007232:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
}
 8007236:	4640      	mov	r0, r8
 8007238:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return (uint8_t)USBD_EMEM;
 800723c:	f04f 0802 	mov.w	r8, #2
 8007240:	e7d6      	b.n	80071f0 <USBD_CDC_Init+0xa0>
 8007242:	bf00      	nop

08007244 <USBD_CDC_GetOtherSpeedCfgDesc>:
 8007244:	b570      	push	{r4, r5, r6, lr}
 8007246:	2182      	movs	r1, #130	; 0x82
 8007248:	4606      	mov	r6, r0
 800724a:	480f      	ldr	r0, [pc, #60]	; (8007288 <USBD_CDC_GetOtherSpeedCfgDesc+0x44>)
 800724c:	f000 fa2e 	bl	80076ac <USBD_GetEpDesc>
 8007250:	2101      	movs	r1, #1
 8007252:	4605      	mov	r5, r0
 8007254:	480c      	ldr	r0, [pc, #48]	; (8007288 <USBD_CDC_GetOtherSpeedCfgDesc+0x44>)
 8007256:	f000 fa29 	bl	80076ac <USBD_GetEpDesc>
 800725a:	2181      	movs	r1, #129	; 0x81
 800725c:	4604      	mov	r4, r0
 800725e:	480a      	ldr	r0, [pc, #40]	; (8007288 <USBD_CDC_GetOtherSpeedCfgDesc+0x44>)
 8007260:	f000 fa24 	bl	80076ac <USBD_GetEpDesc>
 8007264:	b10d      	cbz	r5, 800726a <USBD_CDC_GetOtherSpeedCfgDesc+0x26>
 8007266:	2210      	movs	r2, #16
 8007268:	71aa      	strb	r2, [r5, #6]
 800726a:	b11c      	cbz	r4, 8007274 <USBD_CDC_GetOtherSpeedCfgDesc+0x30>
 800726c:	2100      	movs	r1, #0
 800726e:	2240      	movs	r2, #64	; 0x40
 8007270:	7161      	strb	r1, [r4, #5]
 8007272:	7122      	strb	r2, [r4, #4]
 8007274:	b118      	cbz	r0, 800727e <USBD_CDC_GetOtherSpeedCfgDesc+0x3a>
 8007276:	2100      	movs	r1, #0
 8007278:	2240      	movs	r2, #64	; 0x40
 800727a:	7141      	strb	r1, [r0, #5]
 800727c:	7102      	strb	r2, [r0, #4]
 800727e:	2343      	movs	r3, #67	; 0x43
 8007280:	4801      	ldr	r0, [pc, #4]	; (8007288 <USBD_CDC_GetOtherSpeedCfgDesc+0x44>)
 8007282:	8033      	strh	r3, [r6, #0]
 8007284:	bd70      	pop	{r4, r5, r6, pc}
 8007286:	bf00      	nop
 8007288:	2400656c 	.word	0x2400656c

0800728c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800728c:	4603      	mov	r3, r0
  if (fops == NULL)
 800728e:	b139      	cbz	r1, 80072a0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
  }

  pdev->pUserData[pdev->classId] = fops;
 8007290:	f8d0 22d4 	ldr.w	r2, [r0, #724]	; 0x2d4

  return (uint8_t)USBD_OK;
 8007294:	2000      	movs	r0, #0
  pdev->pUserData[pdev->classId] = fops;
 8007296:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800729a:	f8c3 12c4 	str.w	r1, [r3, #708]	; 0x2c4
  return (uint8_t)USBD_OK;
 800729e:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 80072a0:	2003      	movs	r0, #3
}
 80072a2:	4770      	bx	lr

080072a4 <USBD_CDC_SetTxBuffer>:
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80072a4:	f8d0 32d4 	ldr.w	r3, [r0, #724]	; 0x2d4
 80072a8:	33b0      	adds	r3, #176	; 0xb0
 80072aa:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80072ae:	b12b      	cbz	r3, 80072bc <USBD_CDC_SetTxBuffer+0x18>
  }

  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;

  return (uint8_t)USBD_OK;
 80072b0:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 80072b2:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80072b6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  return (uint8_t)USBD_OK;
 80072ba:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 80072bc:	2003      	movs	r0, #3
}
 80072be:	4770      	bx	lr

080072c0 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80072c0:	f8d0 32d4 	ldr.w	r3, [r0, #724]	; 0x2d4
 80072c4:	33b0      	adds	r3, #176	; 0xb0
 80072c6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]

  if (hcdc == NULL)
 80072ca:	b11b      	cbz	r3, 80072d4 <USBD_CDC_SetRxBuffer+0x14>
    return (uint8_t)USBD_FAIL;
  }

  hcdc->RxBuffer = pbuff;

  return (uint8_t)USBD_OK;
 80072cc:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 80072ce:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
  return (uint8_t)USBD_OK;
 80072d2:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 80072d4:	2003      	movs	r0, #3
}
 80072d6:	4770      	bx	lr

080072d8 <USBD_CDC_TransmitPacket>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80072d8:	f8d0 32d4 	ldr.w	r3, [r0, #724]	; 0x2d4
 80072dc:	33b0      	adds	r3, #176	; 0xb0
 80072de:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80072e2:	b192      	cbz	r2, 800730a <USBD_CDC_TransmitPacket+0x32>
{
 80072e4:	b510      	push	{r4, lr}
  {
    return (uint8_t)USBD_FAIL;
  }

  if (hcdc->TxState == 0U)
 80072e6:	f8d2 4214 	ldr.w	r4, [r2, #532]	; 0x214
 80072ea:	b10c      	cbz	r4, 80072f0 <USBD_CDC_TransmitPacket+0x18>
  USBD_StatusTypeDef ret = USBD_BUSY;
 80072ec:	2001      	movs	r0, #1

    ret = USBD_OK;
  }

  return (uint8_t)ret;
}
 80072ee:	bd10      	pop	{r4, pc}
    hcdc->TxState = 1U;
 80072f0:	2301      	movs	r3, #1
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80072f2:	2181      	movs	r1, #129	; 0x81
    hcdc->TxState = 1U;
 80072f4:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80072f8:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80072fc:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8007300:	62c3      	str	r3, [r0, #44]	; 0x2c
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8007302:	f000 ffed 	bl	80082e0 <USBD_LL_Transmit>
    ret = USBD_OK;
 8007306:	4620      	mov	r0, r4
}
 8007308:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 800730a:	2003      	movs	r0, #3
}
 800730c:	4770      	bx	lr
 800730e:	bf00      	nop

08007310 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007310:	f8d0 22d4 	ldr.w	r2, [r0, #724]	; 0x2d4
 8007314:	32b0      	adds	r2, #176	; 0xb0
 8007316:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
{
 800731a:	b510      	push	{r4, lr}
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800731c:	b19a      	cbz	r2, 8007346 <USBD_CDC_ReceivePacket+0x36>
  {
    return (uint8_t)USBD_FAIL;
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800731e:	7c04      	ldrb	r4, [r0, #16]
 8007320:	b144      	cbz	r4, 8007334 <USBD_CDC_ReceivePacket+0x24>
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007322:	2400      	movs	r4, #0
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007324:	2340      	movs	r3, #64	; 0x40
 8007326:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 800732a:	2101      	movs	r1, #1
 800732c:	f000 ffe6 	bl	80082fc <USBD_LL_PrepareReceive>
}
 8007330:	4620      	mov	r0, r4
 8007332:	bd10      	pop	{r4, pc}
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007334:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007338:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 800733c:	2101      	movs	r1, #1
 800733e:	f000 ffdd 	bl	80082fc <USBD_LL_PrepareReceive>
}
 8007342:	4620      	mov	r0, r4
 8007344:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 8007346:	2403      	movs	r4, #3
}
 8007348:	4620      	mov	r0, r4
 800734a:	bd10      	pop	{r4, pc}

0800734c <USBD_Init>:
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800734c:	b178      	cbz	r0, 800736e <USBD_Init+0x22>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800734e:	2300      	movs	r3, #0
 8007350:	f8c0 32b8 	str.w	r3, [r0, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8007354:	f8c0 32c4 	str.w	r3, [r0, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007358:	f8c0 32d0 	str.w	r3, [r0, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800735c:	b109      	cbz	r1, 8007362 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 800735e:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007362:	2301      	movs	r3, #1
  pdev->id = id;
 8007364:	7002      	strb	r2, [r0, #0]
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007366:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800736a:	f000 bf09 	b.w	8008180 <USBD_LL_Init>

  return ret;
}
 800736e:	2003      	movs	r0, #3
 8007370:	4770      	bx	lr
 8007372:	bf00      	nop

08007374 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007374:	b510      	push	{r4, lr}
  uint16_t len = 0U;
 8007376:	2300      	movs	r3, #0
{
 8007378:	b082      	sub	sp, #8
  uint16_t len = 0U;
 800737a:	f8ad 3006 	strh.w	r3, [sp, #6]

  if (pclass == NULL)
 800737e:	b189      	cbz	r1, 80073a4 <USBD_RegisterClass+0x30>
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007380:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8007382:	4604      	mov	r4, r0
  pdev->pClass[0] = pclass;
 8007384:	f8c0 12b8 	str.w	r1, [r0, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007388:	b123      	cbz	r3, 8007394 <USBD_RegisterClass+0x20>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800738a:	f10d 0006 	add.w	r0, sp, #6
 800738e:	4798      	blx	r3
 8007390:	f8c4 02d0 	str.w	r0, [r4, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007394:	f8d4 32d8 	ldr.w	r3, [r4, #728]	; 0x2d8

  return USBD_OK;
 8007398:	2000      	movs	r0, #0
  pdev->NumClasses ++;
 800739a:	3301      	adds	r3, #1
 800739c:	f8c4 32d8 	str.w	r3, [r4, #728]	; 0x2d8
}
 80073a0:	b002      	add	sp, #8
 80073a2:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 80073a4:	2003      	movs	r0, #3
}
 80073a6:	b002      	add	sp, #8
 80073a8:	bd10      	pop	{r4, pc}
 80073aa:	bf00      	nop

080073ac <USBD_Start>:
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80073ac:	f000 bf2c 	b.w	8008208 <USBD_LL_Start>

080073b0 <USBD_SetClassConfig>:
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80073b0:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80073b4:	b10b      	cbz	r3, 80073ba <USBD_SetClassConfig+0xa>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	4718      	bx	r3
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 80073ba:	4618      	mov	r0, r3
 80073bc:	4770      	bx	lr
 80073be:	bf00      	nop

080073c0 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80073c0:	b508      	push	{r3, lr}
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80073c2:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80073c6:	685b      	ldr	r3, [r3, #4]
 80073c8:	4798      	blx	r3
  {
    ret = USBD_FAIL;
 80073ca:	2800      	cmp	r0, #0
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 80073cc:	bf18      	it	ne
 80073ce:	2003      	movne	r0, #3
 80073d0:	bd08      	pop	{r3, pc}
 80073d2:	bf00      	nop

080073d4 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80073d4:	b538      	push	{r3, r4, r5, lr}
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80073d6:	f200 25aa 	addw	r5, r0, #682	; 0x2aa
{
 80073da:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80073dc:	4628      	mov	r0, r5
 80073de:	f000 fc31 	bl	8007c44 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;

  pdev->ep0_data_len = pdev->request.wLength;
 80073e2:	f8b4 32b0 	ldrh.w	r3, [r4, #688]	; 0x2b0

  switch (pdev->request.bmRequest & 0x1FU)
 80073e6:	f894 12aa 	ldrb.w	r1, [r4, #682]	; 0x2aa
  pdev->ep0_state = USBD_EP0_SETUP;
 80073ea:	2201      	movs	r2, #1
  pdev->ep0_data_len = pdev->request.wLength;
 80073ec:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
 80073f0:	f001 031f 	and.w	r3, r1, #31
  pdev->ep0_state = USBD_EP0_SETUP;
 80073f4:	f8c4 2294 	str.w	r2, [r4, #660]	; 0x294
  switch (pdev->request.bmRequest & 0x1FU)
 80073f8:	4293      	cmp	r3, r2
 80073fa:	d009      	beq.n	8007410 <USBD_LL_SetupStage+0x3c>
 80073fc:	2b02      	cmp	r3, #2
 80073fe:	d013      	beq.n	8007428 <USBD_LL_SetupStage+0x54>
 8007400:	b163      	cbz	r3, 800741c <USBD_LL_SetupStage+0x48>
    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007402:	4620      	mov	r0, r4
 8007404:	f001 0180 	and.w	r1, r1, #128	; 0x80
      break;
  }

  return ret;
}
 8007408:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800740c:	f000 bf2a 	b.w	8008264 <USBD_LL_StallEP>
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007410:	4629      	mov	r1, r5
 8007412:	4620      	mov	r0, r4
}
 8007414:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007418:	f000 bb24 	b.w	8007a64 <USBD_StdItfReq>
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800741c:	4629      	mov	r1, r5
 800741e:	4620      	mov	r0, r4
}
 8007420:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007424:	f000 b958 	b.w	80076d8 <USBD_StdDevReq>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007428:	4629      	mov	r1, r5
 800742a:	4620      	mov	r0, r4
}
 800742c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007430:	f000 bb5a 	b.w	8007ae8 <USBD_StdEPReq>

08007434 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007434:	b570      	push	{r4, r5, r6, lr}
 8007436:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
  uint8_t idx;

  if (epnum == 0U)
 8007438:	b931      	cbnz	r1, 8007448 <USBD_LL_DataOutStage+0x14>
 800743a:	460b      	mov	r3, r1
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800743c:	f8d0 1294 	ldr.w	r1, [r0, #660]	; 0x294
 8007440:	2903      	cmp	r1, #3
 8007442:	d010      	beq.n	8007466 <USBD_LL_DataOutStage+0x32>
      }
    }
  }

  return USBD_OK;
}
 8007444:	2000      	movs	r0, #0
 8007446:	bd70      	pop	{r4, r5, r6, pc}
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007448:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800744c:	2b03      	cmp	r3, #3
 800744e:	d1f9      	bne.n	8007444 <USBD_LL_DataOutStage+0x10>
        if (pdev->pClass[idx]->DataOut != NULL)
 8007450:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8007454:	699b      	ldr	r3, [r3, #24]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d0f4      	beq.n	8007444 <USBD_LL_DataOutStage+0x10>
          pdev->classId = idx;
 800745a:	2200      	movs	r2, #0
}
 800745c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
          pdev->classId = idx;
 8007460:	f8c0 22d4 	str.w	r2, [r0, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007464:	4718      	bx	r3
      if (pep->rem_length > pep->maxpacket)
 8007466:	e9d0 1557 	ldrd	r1, r5, [r0, #348]	; 0x15c
 800746a:	42a9      	cmp	r1, r5
 800746c:	d808      	bhi.n	8007480 <USBD_LL_DataOutStage+0x4c>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800746e:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8007472:	2a03      	cmp	r2, #3
 8007474:	d00f      	beq.n	8007496 <USBD_LL_DataOutStage+0x62>
        (void)USBD_CtlSendStatus(pdev);
 8007476:	4620      	mov	r0, r4
 8007478:	f000 fc56 	bl	8007d28 <USBD_CtlSendStatus>
}
 800747c:	2000      	movs	r0, #0
 800747e:	bd70      	pop	{r4, r5, r6, pc}
        pep->rem_length -= pep->maxpacket;
 8007480:	1b4b      	subs	r3, r1, r5
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007482:	4611      	mov	r1, r2
 8007484:	462a      	mov	r2, r5
 8007486:	429d      	cmp	r5, r3
        pep->rem_length -= pep->maxpacket;
 8007488:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800748c:	bf28      	it	cs
 800748e:	461a      	movcs	r2, r3
 8007490:	f000 fc40 	bl	8007d14 <USBD_CtlContinueRx>
 8007494:	e7d6      	b.n	8007444 <USBD_LL_DataOutStage+0x10>
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007496:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
 800749a:	6912      	ldr	r2, [r2, #16]
 800749c:	2a00      	cmp	r2, #0
 800749e:	d0ea      	beq.n	8007476 <USBD_LL_DataOutStage+0x42>
              pdev->classId = idx;
 80074a0:	f8c0 32d4 	str.w	r3, [r0, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80074a4:	4790      	blx	r2
 80074a6:	e7e6      	b.n	8007476 <USBD_LL_DataOutStage+0x42>

080074a8 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80074a8:	b570      	push	{r4, r5, r6, lr}
 80074aa:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80074ac:	b959      	cbnz	r1, 80074c6 <USBD_LL_DataInStage+0x1e>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80074ae:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 80074b2:	2b02      	cmp	r3, #2
 80074b4:	d016      	beq.n	80074e4 <USBD_LL_DataInStage+0x3c>
          (void)USBD_CtlReceiveStatus(pdev);
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80074b6:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 80074ba:	b113      	cbz	r3, 80074c2 <USBD_LL_DataInStage+0x1a>
    {
      (void)USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 80074bc:	2300      	movs	r3, #0
 80074be:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
      }
    }
  }

  return USBD_OK;
}
 80074c2:	2000      	movs	r0, #0
 80074c4:	bd70      	pop	{r4, r5, r6, pc}
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074c6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80074ca:	2b03      	cmp	r3, #3
 80074cc:	d1f9      	bne.n	80074c2 <USBD_LL_DataInStage+0x1a>
        if (pdev->pClass[idx]->DataIn != NULL)
 80074ce:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80074d2:	695b      	ldr	r3, [r3, #20]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d0f4      	beq.n	80074c2 <USBD_LL_DataInStage+0x1a>
          pdev->classId = idx;
 80074d8:	2200      	movs	r2, #0
}
 80074da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
          pdev->classId = idx;
 80074de:	f8c0 22d4 	str.w	r2, [r0, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80074e2:	4718      	bx	r3
      if (pep->rem_length > pep->maxpacket)
 80074e4:	e9d0 3607 	ldrd	r3, r6, [r0, #28]
 80074e8:	460d      	mov	r5, r1
 80074ea:	42b3      	cmp	r3, r6
 80074ec:	d810      	bhi.n	8007510 <USBD_LL_DataInStage+0x68>
        if ((pep->maxpacket == pep->rem_length) &&
 80074ee:	d01c      	beq.n	800752a <USBD_LL_DataInStage+0x82>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074f0:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 80074f4:	2b03      	cmp	r3, #3
 80074f6:	d02b      	beq.n	8007550 <USBD_LL_DataInStage+0xa8>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80074f8:	2180      	movs	r1, #128	; 0x80
 80074fa:	4620      	mov	r0, r4
 80074fc:	f000 feb2 	bl	8008264 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007500:	4620      	mov	r0, r4
 8007502:	f000 fc1d 	bl	8007d40 <USBD_CtlReceiveStatus>
    if (pdev->dev_test_mode != 0U)
 8007506:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 800750a:	2b00      	cmp	r3, #0
 800750c:	d0d9      	beq.n	80074c2 <USBD_LL_DataInStage+0x1a>
 800750e:	e7d5      	b.n	80074bc <USBD_LL_DataInStage+0x14>
        pep->rem_length -= pep->maxpacket;
 8007510:	1b9b      	subs	r3, r3, r6
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007512:	4611      	mov	r1, r2
        pep->rem_length -= pep->maxpacket;
 8007514:	61c3      	str	r3, [r0, #28]
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007516:	461a      	mov	r2, r3
 8007518:	f000 fbe4 	bl	8007ce4 <USBD_CtlContinueSendData>
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800751c:	462b      	mov	r3, r5
 800751e:	462a      	mov	r2, r5
 8007520:	4629      	mov	r1, r5
 8007522:	4620      	mov	r0, r4
 8007524:	f000 feea 	bl	80082fc <USBD_LL_PrepareReceive>
 8007528:	e7c5      	b.n	80074b6 <USBD_LL_DataInStage+0xe>
            (pep->total_length >= pep->maxpacket) &&
 800752a:	6982      	ldr	r2, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 800752c:	4293      	cmp	r3, r2
 800752e:	d8df      	bhi.n	80074f0 <USBD_LL_DataInStage+0x48>
            (pep->total_length >= pep->maxpacket) &&
 8007530:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
 8007534:	429a      	cmp	r2, r3
 8007536:	d2db      	bcs.n	80074f0 <USBD_LL_DataInStage+0x48>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007538:	460a      	mov	r2, r1
 800753a:	f000 fbd3 	bl	8007ce4 <USBD_CtlContinueSendData>
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800753e:	462b      	mov	r3, r5
 8007540:	462a      	mov	r2, r5
 8007542:	4629      	mov	r1, r5
 8007544:	4620      	mov	r0, r4
          pdev->ep0_data_len = 0U;
 8007546:	f8c4 5298 	str.w	r5, [r4, #664]	; 0x298
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800754a:	f000 fed7 	bl	80082fc <USBD_LL_PrepareReceive>
 800754e:	e7b2      	b.n	80074b6 <USBD_LL_DataInStage+0xe>
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007550:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8007554:	68db      	ldr	r3, [r3, #12]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d0ce      	beq.n	80074f8 <USBD_LL_DataInStage+0x50>
              pdev->classId = 0U;
 800755a:	2200      	movs	r2, #0
              pdev->pClass[0]->EP0_TxSent(pdev);
 800755c:	4620      	mov	r0, r4
              pdev->classId = 0U;
 800755e:	f8c4 22d4 	str.w	r2, [r4, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007562:	4798      	blx	r3
 8007564:	e7c8      	b.n	80074f8 <USBD_LL_DataInStage+0x50>
 8007566:	bf00      	nop

08007568 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBD_StatusTypeDef ret = USBD_OK;

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
 800756a:	2100      	movs	r1, #0
  pdev->dev_state = USBD_STATE_DEFAULT;
 800756c:	2201      	movs	r2, #1
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800756e:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
{
 8007572:	4604      	mov	r4, r0
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007574:	f880 229c 	strb.w	r2, [r0, #668]	; 0x29c
  pdev->dev_config = 0U;
 8007578:	6041      	str	r1, [r0, #4]
  pdev->ep0_state = USBD_EP0_IDLE;
 800757a:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
  pdev->dev_remote_wakeup = 0U;
 800757e:	f8c0 12a4 	str.w	r1, [r0, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8007582:	f880 12a0 	strb.w	r1, [r0, #672]	; 0x2a0
  if (pdev->pClass[0] != NULL)
 8007586:	b11b      	cbz	r3, 8007590 <USBD_LL_Reset+0x28>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007588:	685b      	ldr	r3, [r3, #4]
 800758a:	b10b      	cbz	r3, 8007590 <USBD_LL_Reset+0x28>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800758c:	4798      	blx	r3
 800758e:	b9b0      	cbnz	r0, 80075be <USBD_LL_Reset+0x56>
  USBD_StatusTypeDef ret = USBD_OK;
 8007590:	2700      	movs	r7, #0
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007592:	2340      	movs	r3, #64	; 0x40
 8007594:	2200      	movs	r2, #0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007596:	2601      	movs	r6, #1
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007598:	4620      	mov	r0, r4

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800759a:	461d      	mov	r5, r3
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800759c:	4611      	mov	r1, r2
 800759e:	f000 fe41 	bl	8008224 <USBD_LL_OpenEP>

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80075a2:	2200      	movs	r2, #0
 80075a4:	462b      	mov	r3, r5
 80075a6:	2180      	movs	r1, #128	; 0x80
 80075a8:	4620      	mov	r0, r4
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80075aa:	f8a4 6164 	strh.w	r6, [r4, #356]	; 0x164
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80075ae:	f8c4 5160 	str.w	r5, [r4, #352]	; 0x160
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80075b2:	f000 fe37 	bl	8008224 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;

  return ret;
}
 80075b6:	4638      	mov	r0, r7
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80075b8:	84a6      	strh	r6, [r4, #36]	; 0x24
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80075ba:	6225      	str	r5, [r4, #32]
}
 80075bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ret = USBD_FAIL;
 80075be:	2703      	movs	r7, #3
 80075c0:	e7e7      	b.n	8007592 <USBD_LL_Reset+0x2a>
 80075c2:	bf00      	nop

080075c4 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80075c4:	4603      	mov	r3, r0
  pdev->dev_speed = speed;

  return USBD_OK;
}
 80075c6:	2000      	movs	r0, #0
  pdev->dev_speed = speed;
 80075c8:	7419      	strb	r1, [r3, #16]
}
 80075ca:	4770      	bx	lr

080075cc <USBD_LL_Suspend>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80075cc:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
{
 80075d0:	4603      	mov	r3, r0
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80075d2:	2a04      	cmp	r2, #4
 80075d4:	d004      	beq.n	80075e0 <USBD_LL_Suspend+0x14>
  {
    pdev->dev_old_state = pdev->dev_state;
 80075d6:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 80075da:	b2d2      	uxtb	r2, r2
 80075dc:	f880 229d 	strb.w	r2, [r0, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80075e0:	2204      	movs	r2, #4

  return USBD_OK;
}
 80075e2:	2000      	movs	r0, #0
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80075e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
}
 80075e8:	4770      	bx	lr
 80075ea:	bf00      	nop

080075ec <USBD_LL_Resume>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80075ec:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80075f0:	2b04      	cmp	r3, #4
 80075f2:	d104      	bne.n	80075fe <USBD_LL_Resume+0x12>
  {
    pdev->dev_state = pdev->dev_old_state;
 80075f4:	f890 329d 	ldrb.w	r3, [r0, #669]	; 0x29d
 80075f8:	b2db      	uxtb	r3, r3
 80075fa:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 80075fe:	2000      	movs	r0, #0
 8007600:	4770      	bx	lr
 8007602:	bf00      	nop

08007604 <USBD_LL_SOF>:
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007604:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8007608:	2a03      	cmp	r2, #3
 800760a:	d001      	beq.n	8007610 <USBD_LL_SOF+0xc>
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
}
 800760c:	2000      	movs	r0, #0
 800760e:	4770      	bx	lr
{
 8007610:	b508      	push	{r3, lr}
    if (pdev->pClass[0] != NULL)
 8007612:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8007616:	b113      	cbz	r3, 800761e <USBD_LL_SOF+0x1a>
      if (pdev->pClass[0]->SOF != NULL)
 8007618:	69db      	ldr	r3, [r3, #28]
 800761a:	b103      	cbz	r3, 800761e <USBD_LL_SOF+0x1a>
        (void)pdev->pClass[0]->SOF(pdev);
 800761c:	4798      	blx	r3
}
 800761e:	2000      	movs	r0, #0
 8007620:	bd08      	pop	{r3, pc}
 8007622:	bf00      	nop

08007624 <USBD_LL_IsoINIncomplete>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
  if (pdev->pClass[pdev->classId] == NULL)
 8007624:	f8d0 22d4 	ldr.w	r2, [r0, #724]	; 0x2d4
 8007628:	32ae      	adds	r2, #174	; 0xae
 800762a:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 800762e:	b15a      	cbz	r2, 8007648 <USBD_LL_IsoINIncomplete+0x24>
{
 8007630:	b508      	push	{r3, lr}
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007632:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8007636:	2b03      	cmp	r3, #3
 8007638:	d001      	beq.n	800763e <USBD_LL_IsoINIncomplete+0x1a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 800763a:	2000      	movs	r0, #0
}
 800763c:	bd08      	pop	{r3, pc}
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800763e:	6a13      	ldr	r3, [r2, #32]
 8007640:	b123      	cbz	r3, 800764c <USBD_LL_IsoINIncomplete+0x28>
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007642:	4798      	blx	r3
  return USBD_OK;
 8007644:	2000      	movs	r0, #0
}
 8007646:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8007648:	2003      	movs	r0, #3
}
 800764a:	4770      	bx	lr
  return USBD_OK;
 800764c:	4618      	mov	r0, r3
}
 800764e:	bd08      	pop	{r3, pc}

08007650 <USBD_LL_IsoOUTIncomplete>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
  if (pdev->pClass[pdev->classId] == NULL)
 8007650:	f8d0 22d4 	ldr.w	r2, [r0, #724]	; 0x2d4
 8007654:	32ae      	adds	r2, #174	; 0xae
 8007656:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 800765a:	b15a      	cbz	r2, 8007674 <USBD_LL_IsoOUTIncomplete+0x24>
{
 800765c:	b508      	push	{r3, lr}
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800765e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8007662:	2b03      	cmp	r3, #3
 8007664:	d001      	beq.n	800766a <USBD_LL_IsoOUTIncomplete+0x1a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 8007666:	2000      	movs	r0, #0
}
 8007668:	bd08      	pop	{r3, pc}
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800766a:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800766c:	b123      	cbz	r3, 8007678 <USBD_LL_IsoOUTIncomplete+0x28>
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800766e:	4798      	blx	r3
  return USBD_OK;
 8007670:	2000      	movs	r0, #0
}
 8007672:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8007674:	2003      	movs	r0, #3
}
 8007676:	4770      	bx	lr
  return USBD_OK;
 8007678:	4618      	mov	r0, r3
}
 800767a:	bd08      	pop	{r3, pc}

0800767c <USBD_LL_DevConnected>:
 800767c:	2000      	movs	r0, #0
 800767e:	4770      	bx	lr

08007680 <USBD_LL_DevDisconnected>:
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
  USBD_StatusTypeDef   ret = USBD_OK;

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007680:	2101      	movs	r1, #1
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007682:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007686:	f880 129c 	strb.w	r1, [r0, #668]	; 0x29c
  if (pdev->pClass[0] != NULL)
 800768a:	b142      	cbz	r2, 800769e <USBD_LL_DevDisconnected+0x1e>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800768c:	6852      	ldr	r2, [r2, #4]
 800768e:	7901      	ldrb	r1, [r0, #4]
{
 8007690:	b508      	push	{r3, lr}
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007692:	4790      	blx	r2
 8007694:	b908      	cbnz	r0, 800769a <USBD_LL_DevDisconnected+0x1a>
  USBD_StatusTypeDef   ret = USBD_OK;
 8007696:	2000      	movs	r0, #0
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 8007698:	bd08      	pop	{r3, pc}
      ret = USBD_FAIL;
 800769a:	2003      	movs	r0, #3
}
 800769c:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef   ret = USBD_OK;
 800769e:	2000      	movs	r0, #0
}
 80076a0:	4770      	bx	lr
 80076a2:	bf00      	nop

080076a4 <USBD_CoreFindIF>:
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
#endif /* USE_USBD_COMPOSITE */
}
 80076a4:	2000      	movs	r0, #0
 80076a6:	4770      	bx	lr

080076a8 <USBD_CoreFindEP>:
 80076a8:	2000      	movs	r0, #0
 80076aa:	4770      	bx	lr

080076ac <USBD_GetEpDesc>:
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
  USBD_EpDescTypeDef *pEpDesc = NULL;
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80076ac:	7802      	ldrb	r2, [r0, #0]
 80076ae:	f8b0 c002 	ldrh.w	ip, [r0, #2]
 80076b2:	b293      	uxth	r3, r2
 80076b4:	4594      	cmp	ip, r2
 80076b6:	d803      	bhi.n	80076c0 <USBD_GetEpDesc+0x14>
 80076b8:	e00c      	b.n	80076d4 <USBD_GetEpDesc+0x28>
  {
    ptr = desc->bLength;

    while (ptr < desc->wTotalLength)
 80076ba:	459c      	cmp	ip, r3
 80076bc:	d90a      	bls.n	80076d4 <USBD_GetEpDesc+0x28>
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;

  *ptr += pnext->bLength;
 80076be:	7802      	ldrb	r2, [r0, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80076c0:	4410      	add	r0, r2
  *ptr += pnext->bLength;
 80076c2:	4413      	add	r3, r2
      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80076c4:	7842      	ldrb	r2, [r0, #1]
  *ptr += pnext->bLength;
 80076c6:	b29b      	uxth	r3, r3
      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80076c8:	2a05      	cmp	r2, #5
 80076ca:	d1f6      	bne.n	80076ba <USBD_GetEpDesc+0xe>
        if (pEpDesc->bEndpointAddress == EpAddr)
 80076cc:	7882      	ldrb	r2, [r0, #2]
 80076ce:	428a      	cmp	r2, r1
 80076d0:	d1f3      	bne.n	80076ba <USBD_GetEpDesc+0xe>
}
 80076d2:	4770      	bx	lr
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80076d4:	2000      	movs	r0, #0
}
 80076d6:	4770      	bx	lr

080076d8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80076da:	780c      	ldrb	r4, [r1, #0]
 80076dc:	b083      	sub	sp, #12
 80076de:	460e      	mov	r6, r1
 80076e0:	4605      	mov	r5, r0
  USBD_StatusTypeDef ret = USBD_OK;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80076e2:	f004 0460 	and.w	r4, r4, #96	; 0x60
 80076e6:	2c20      	cmp	r4, #32
 80076e8:	d00e      	beq.n	8007708 <USBD_StdDevReq+0x30>
 80076ea:	2c40      	cmp	r4, #64	; 0x40
 80076ec:	d00c      	beq.n	8007708 <USBD_StdDevReq+0x30>
 80076ee:	b1bc      	cbz	r4, 8007720 <USBD_StdDevReq+0x48>
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80076f0:	2180      	movs	r1, #128	; 0x80
 80076f2:	4628      	mov	r0, r5
 80076f4:	f000 fdb6 	bl	8008264 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80076f8:	2100      	movs	r1, #0
 80076fa:	4628      	mov	r0, r5
  USBD_StatusTypeDef ret = USBD_OK;
 80076fc:	460c      	mov	r4, r1
  (void)USBD_LL_StallEP(pdev, 0U);
 80076fe:	f000 fdb1 	bl	8008264 <USBD_LL_StallEP>
}
 8007702:	4620      	mov	r0, r4
 8007704:	b003      	add	sp, #12
 8007706:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007708:	f8d5 32d4 	ldr.w	r3, [r5, #724]	; 0x2d4
 800770c:	4631      	mov	r1, r6
 800770e:	4628      	mov	r0, r5
 8007710:	33ae      	adds	r3, #174	; 0xae
 8007712:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8007716:	689b      	ldr	r3, [r3, #8]
}
 8007718:	b003      	add	sp, #12
 800771a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800771e:	4718      	bx	r3
      switch (req->bRequest)
 8007720:	784b      	ldrb	r3, [r1, #1]
 8007722:	2b09      	cmp	r3, #9
 8007724:	d8e4      	bhi.n	80076f0 <USBD_StdDevReq+0x18>
 8007726:	a201      	add	r2, pc, #4	; (adr r2, 800772c <USBD_StdDevReq+0x54>)
 8007728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800772c:	0800778d 	.word	0x0800778d
 8007730:	080077b7 	.word	0x080077b7
 8007734:	080076f1 	.word	0x080076f1
 8007738:	080077d5 	.word	0x080077d5
 800773c:	080076f1 	.word	0x080076f1
 8007740:	080077f7 	.word	0x080077f7
 8007744:	0800782f 	.word	0x0800782f
 8007748:	080076f1 	.word	0x080076f1
 800774c:	08007881 	.word	0x08007881
 8007750:	08007755 	.word	0x08007755
  cfgidx = (uint8_t)(req->wValue);
 8007754:	7889      	ldrb	r1, [r1, #2]
 8007756:	4eb5      	ldr	r6, [pc, #724]	; (8007a2c <USBD_StdDevReq+0x354>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007758:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 800775a:	7031      	strb	r1, [r6, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800775c:	f200 8168 	bhi.w	8007a30 <USBD_StdDevReq+0x358>
  switch (pdev->dev_state)
 8007760:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8007764:	2b02      	cmp	r3, #2
 8007766:	b2df      	uxtb	r7, r3
 8007768:	f000 8123 	beq.w	80079b2 <USBD_StdDevReq+0x2da>
 800776c:	2f03      	cmp	r7, #3
 800776e:	f000 8134 	beq.w	80079da <USBD_StdDevReq+0x302>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007772:	2180      	movs	r1, #128	; 0x80
      ret = USBD_FAIL;
 8007774:	2403      	movs	r4, #3
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007776:	f000 fd75 	bl	8008264 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800777a:	2100      	movs	r1, #0
 800777c:	4628      	mov	r0, r5
 800777e:	f000 fd71 	bl	8008264 <USBD_LL_StallEP>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007782:	7831      	ldrb	r1, [r6, #0]
 8007784:	4628      	mov	r0, r5
 8007786:	f7ff fe1b 	bl	80073c0 <USBD_ClrClassConfig>
      break;
 800778a:	e7ba      	b.n	8007702 <USBD_StdDevReq+0x2a>
  switch (pdev->dev_state)
 800778c:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8007790:	3a01      	subs	r2, #1
 8007792:	2a02      	cmp	r2, #2
 8007794:	d824      	bhi.n	80077e0 <USBD_StdDevReq+0x108>
      if (req->wLength != 0x2U)
 8007796:	88ca      	ldrh	r2, [r1, #6]
 8007798:	2a02      	cmp	r2, #2
 800779a:	d121      	bne.n	80077e0 <USBD_StdDevReq+0x108>
      if (pdev->dev_remote_wakeup != 0U)
 800779c:	f8d0 42a4 	ldr.w	r4, [r0, #676]	; 0x2a4
 80077a0:	4601      	mov	r1, r0
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80077a2:	2c00      	cmp	r4, #0
  USBD_StatusTypeDef ret = USBD_OK;
 80077a4:	461c      	mov	r4, r3
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80077a6:	bf14      	ite	ne
 80077a8:	2303      	movne	r3, #3
 80077aa:	2301      	moveq	r3, #1
 80077ac:	f841 3f0c 	str.w	r3, [r1, #12]!
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80077b0:	f000 fa8a 	bl	8007cc8 <USBD_CtlSendData>
      break;
 80077b4:	e7a5      	b.n	8007702 <USBD_StdDevReq+0x2a>
  switch (pdev->dev_state)
 80077b6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80077ba:	3b01      	subs	r3, #1
 80077bc:	2b02      	cmp	r3, #2
 80077be:	d80f      	bhi.n	80077e0 <USBD_StdDevReq+0x108>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80077c0:	884b      	ldrh	r3, [r1, #2]
 80077c2:	2b01      	cmp	r3, #1
 80077c4:	d19d      	bne.n	8007702 <USBD_StdDevReq+0x2a>
        pdev->dev_remote_wakeup = 0U;
 80077c6:	2300      	movs	r3, #0
        (void)USBD_CtlSendStatus(pdev);
 80077c8:	4628      	mov	r0, r5
        pdev->dev_remote_wakeup = 0U;
 80077ca:	f8c5 32a4 	str.w	r3, [r5, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80077ce:	f000 faab 	bl	8007d28 <USBD_CtlSendStatus>
 80077d2:	e796      	b.n	8007702 <USBD_StdDevReq+0x2a>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80077d4:	884b      	ldrh	r3, [r1, #2]
 80077d6:	2b01      	cmp	r3, #1
 80077d8:	d0f6      	beq.n	80077c8 <USBD_StdDevReq+0xf0>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80077da:	2b02      	cmp	r3, #2
 80077dc:	f000 811e 	beq.w	8007a1c <USBD_StdDevReq+0x344>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 80077e0:	2180      	movs	r1, #128	; 0x80
 80077e2:	4628      	mov	r0, r5
 80077e4:	f000 fd3e 	bl	8008264 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80077e8:	2100      	movs	r1, #0
 80077ea:	4628      	mov	r0, r5
 80077ec:	f000 fd3a 	bl	8008264 <USBD_LL_StallEP>
}
 80077f0:	4620      	mov	r0, r4
 80077f2:	b003      	add	sp, #12
 80077f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80077f6:	888b      	ldrh	r3, [r1, #4]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d1f1      	bne.n	80077e0 <USBD_StdDevReq+0x108>
 80077fc:	88cb      	ldrh	r3, [r1, #6]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d1ee      	bne.n	80077e0 <USBD_StdDevReq+0x108>
 8007802:	884e      	ldrh	r6, [r1, #2]
 8007804:	2e7f      	cmp	r6, #127	; 0x7f
 8007806:	d8eb      	bhi.n	80077e0 <USBD_StdDevReq+0x108>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007808:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800780c:	2b03      	cmp	r3, #3
 800780e:	d0e7      	beq.n	80077e0 <USBD_StdDevReq+0x108>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007810:	b2f1      	uxtb	r1, r6
      pdev->dev_address = dev_addr;
 8007812:	f880 129e 	strb.w	r1, [r0, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007816:	f000 fd55 	bl	80082c4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800781a:	4628      	mov	r0, r5
 800781c:	f000 fa84 	bl	8007d28 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8007820:	2e00      	cmp	r6, #0
 8007822:	f040 80f7 	bne.w	8007a14 <USBD_StdDevReq+0x33c>
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007826:	2301      	movs	r3, #1
 8007828:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 800782c:	e769      	b.n	8007702 <USBD_StdDevReq+0x2a>
  uint16_t len = 0U;
 800782e:	2300      	movs	r3, #0
  switch (req->wValue >> 8)
 8007830:	884a      	ldrh	r2, [r1, #2]
  uint16_t len = 0U;
 8007832:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 8007836:	0a13      	lsrs	r3, r2, #8
 8007838:	3b01      	subs	r3, #1
 800783a:	2b0e      	cmp	r3, #14
 800783c:	d8d0      	bhi.n	80077e0 <USBD_StdDevReq+0x108>
 800783e:	a101      	add	r1, pc, #4	; (adr r1, 8007844 <USBD_StdDevReq+0x16c>)
 8007840:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007844:	08007937 	.word	0x08007937
 8007848:	0800791d 	.word	0x0800791d
 800784c:	0800790b 	.word	0x0800790b
 8007850:	080077e1 	.word	0x080077e1
 8007854:	080077e1 	.word	0x080077e1
 8007858:	080078f5 	.word	0x080078f5
 800785c:	080078db 	.word	0x080078db
 8007860:	080077e1 	.word	0x080077e1
 8007864:	080077e1 	.word	0x080077e1
 8007868:	080077e1 	.word	0x080077e1
 800786c:	080077e1 	.word	0x080077e1
 8007870:	080077e1 	.word	0x080077e1
 8007874:	080077e1 	.word	0x080077e1
 8007878:	080077e1 	.word	0x080077e1
 800787c:	080078a7 	.word	0x080078a7
  if (req->wLength != 1U)
 8007880:	88ca      	ldrh	r2, [r1, #6]
 8007882:	2a01      	cmp	r2, #1
 8007884:	d1ac      	bne.n	80077e0 <USBD_StdDevReq+0x108>
    switch (pdev->dev_state)
 8007886:	f890 129c 	ldrb.w	r1, [r0, #668]	; 0x29c
 800788a:	2902      	cmp	r1, #2
 800788c:	b2cb      	uxtb	r3, r1
 800788e:	f200 8089 	bhi.w	80079a4 <USBD_StdDevReq+0x2cc>
 8007892:	2b00      	cmp	r3, #0
 8007894:	f43f af2c 	beq.w	80076f0 <USBD_StdDevReq+0x18>
        pdev->dev_default_config = 0U;
 8007898:	4601      	mov	r1, r0
 800789a:	2300      	movs	r3, #0
 800789c:	f841 3f08 	str.w	r3, [r1, #8]!
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80078a0:	f000 fa12 	bl	8007cc8 <USBD_CtlSendData>
        break;
 80078a4:	e72d      	b.n	8007702 <USBD_StdDevReq+0x2a>
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80078a6:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80078aa:	69db      	ldr	r3, [r3, #28]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d097      	beq.n	80077e0 <USBD_StdDevReq+0x108>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80078b0:	f10d 0106 	add.w	r1, sp, #6
 80078b4:	7c28      	ldrb	r0, [r5, #16]
 80078b6:	4798      	blx	r3
  if (req->wLength != 0U)
 80078b8:	88f2      	ldrh	r2, [r6, #6]
 80078ba:	2a00      	cmp	r2, #0
 80078bc:	d06e      	beq.n	800799c <USBD_StdDevReq+0x2c4>
    if (len != 0U)
 80078be:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d08c      	beq.n	80077e0 <USBD_StdDevReq+0x108>
      len = MIN(len, req->wLength);
 80078c6:	429a      	cmp	r2, r3
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80078c8:	4601      	mov	r1, r0
 80078ca:	4628      	mov	r0, r5
      len = MIN(len, req->wLength);
 80078cc:	bf28      	it	cs
 80078ce:	461a      	movcs	r2, r3
 80078d0:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80078d4:	f000 f9f8 	bl	8007cc8 <USBD_CtlSendData>
 80078d8:	e713      	b.n	8007702 <USBD_StdDevReq+0x2a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80078da:	7c03      	ldrb	r3, [r0, #16]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	f47f af7f 	bne.w	80077e0 <USBD_StdDevReq+0x108>
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80078e2:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80078e6:	f10d 0006 	add.w	r0, sp, #6
 80078ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078ec:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80078ee:	2307      	movs	r3, #7
 80078f0:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 80078f2:	e7e1      	b.n	80078b8 <USBD_StdDevReq+0x1e0>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80078f4:	7c03      	ldrb	r3, [r0, #16]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	f47f af72 	bne.w	80077e0 <USBD_StdDevReq+0x108>
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80078fc:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8007900:	f10d 0006 	add.w	r0, sp, #6
 8007904:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007906:	4798      	blx	r3
  if (err != 0U)
 8007908:	e7d6      	b.n	80078b8 <USBD_StdDevReq+0x1e0>
      switch ((uint8_t)(req->wValue))
 800790a:	b2d2      	uxtb	r2, r2
 800790c:	2a05      	cmp	r2, #5
 800790e:	f63f af67 	bhi.w	80077e0 <USBD_StdDevReq+0x108>
 8007912:	e8df f002 	tbb	[pc, r2]
 8007916:	3036      	.short	0x3036
 8007918:	181e242a 	.word	0x181e242a
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800791c:	7c03      	ldrb	r3, [r0, #16]
 800791e:	2b00      	cmp	r3, #0
 8007920:	f040 808f 	bne.w	8007a42 <USBD_StdDevReq+0x36a>
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007924:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8007928:	f10d 0006 	add.w	r0, sp, #6
 800792c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800792e:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007930:	2302      	movs	r3, #2
 8007932:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8007934:	e7c0      	b.n	80078b8 <USBD_StdDevReq+0x1e0>
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007936:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800793a:	f10d 0106 	add.w	r1, sp, #6
 800793e:	7c00      	ldrb	r0, [r0, #16]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	4798      	blx	r3
  if (err != 0U)
 8007944:	e7b8      	b.n	80078b8 <USBD_StdDevReq+0x1e0>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007946:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800794a:	699b      	ldr	r3, [r3, #24]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d1af      	bne.n	80078b0 <USBD_StdDevReq+0x1d8>
 8007950:	e746      	b.n	80077e0 <USBD_StdDevReq+0x108>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007952:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8007956:	695b      	ldr	r3, [r3, #20]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d1a9      	bne.n	80078b0 <USBD_StdDevReq+0x1d8>
 800795c:	e740      	b.n	80077e0 <USBD_StdDevReq+0x108>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800795e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8007962:	691b      	ldr	r3, [r3, #16]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d1a3      	bne.n	80078b0 <USBD_StdDevReq+0x1d8>
 8007968:	e73a      	b.n	80077e0 <USBD_StdDevReq+0x108>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800796a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800796e:	68db      	ldr	r3, [r3, #12]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d19d      	bne.n	80078b0 <USBD_StdDevReq+0x1d8>
 8007974:	e734      	b.n	80077e0 <USBD_StdDevReq+0x108>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007976:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800797a:	689b      	ldr	r3, [r3, #8]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d197      	bne.n	80078b0 <USBD_StdDevReq+0x1d8>
 8007980:	e72e      	b.n	80077e0 <USBD_StdDevReq+0x108>
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007982:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8007986:	685b      	ldr	r3, [r3, #4]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d191      	bne.n	80078b0 <USBD_StdDevReq+0x1d8>
 800798c:	e728      	b.n	80077e0 <USBD_StdDevReq+0x108>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800798e:	2302      	movs	r3, #2
        pdev->dev_config = cfgidx;
 8007990:	6041      	str	r1, [r0, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007992:	460c      	mov	r4, r1
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007994:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007998:	f7ff fd12 	bl	80073c0 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800799c:	4628      	mov	r0, r5
 800799e:	f000 f9c3 	bl	8007d28 <USBD_CtlSendStatus>
 80079a2:	e6ae      	b.n	8007702 <USBD_StdDevReq+0x2a>
    switch (pdev->dev_state)
 80079a4:	2b03      	cmp	r3, #3
 80079a6:	f47f aea3 	bne.w	80076f0 <USBD_StdDevReq+0x18>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80079aa:	1d01      	adds	r1, r0, #4
 80079ac:	f000 f98c 	bl	8007cc8 <USBD_CtlSendData>
        break;
 80079b0:	e6a7      	b.n	8007702 <USBD_StdDevReq+0x2a>
      if (cfgidx != 0U)
 80079b2:	2900      	cmp	r1, #0
 80079b4:	d0f2      	beq.n	800799c <USBD_StdDevReq+0x2c4>
        pdev->dev_config = cfgidx;
 80079b6:	2101      	movs	r1, #1
 80079b8:	6041      	str	r1, [r0, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80079ba:	f7ff fcf9 	bl	80073b0 <USBD_SetClassConfig>
        if (ret != USBD_OK)
 80079be:	4604      	mov	r4, r0
 80079c0:	2800      	cmp	r0, #0
 80079c2:	d047      	beq.n	8007a54 <USBD_StdDevReq+0x37c>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 80079c4:	2180      	movs	r1, #128	; 0x80
 80079c6:	4628      	mov	r0, r5
 80079c8:	f000 fc4c 	bl	8008264 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80079cc:	2100      	movs	r1, #0
 80079ce:	4628      	mov	r0, r5
 80079d0:	f000 fc48 	bl	8008264 <USBD_LL_StallEP>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80079d4:	f885 729c 	strb.w	r7, [r5, #668]	; 0x29c
 80079d8:	e693      	b.n	8007702 <USBD_StdDevReq+0x2a>
      if (cfgidx == 0U)
 80079da:	2900      	cmp	r1, #0
 80079dc:	d0d7      	beq.n	800798e <USBD_StdDevReq+0x2b6>
      else if (cfgidx != pdev->dev_config)
 80079de:	6841      	ldr	r1, [r0, #4]
 80079e0:	2901      	cmp	r1, #1
 80079e2:	d0db      	beq.n	800799c <USBD_StdDevReq+0x2c4>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80079e4:	b2c9      	uxtb	r1, r1
 80079e6:	f7ff fceb 	bl	80073c0 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80079ea:	7831      	ldrb	r1, [r6, #0]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80079ec:	4628      	mov	r0, r5
        pdev->dev_config = cfgidx;
 80079ee:	6069      	str	r1, [r5, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80079f0:	f7ff fcde 	bl	80073b0 <USBD_SetClassConfig>
        if (ret != USBD_OK)
 80079f4:	4606      	mov	r6, r0
 80079f6:	2800      	cmp	r0, #0
 80079f8:	d0d0      	beq.n	800799c <USBD_StdDevReq+0x2c4>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 80079fa:	2180      	movs	r1, #128	; 0x80
 80079fc:	4628      	mov	r0, r5
 80079fe:	f000 fc31 	bl	8008264 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007a02:	2100      	movs	r1, #0
 8007a04:	4628      	mov	r0, r5
 8007a06:	4634      	mov	r4, r6
 8007a08:	f000 fc2c 	bl	8008264 <USBD_LL_StallEP>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007a0c:	7929      	ldrb	r1, [r5, #4]
 8007a0e:	4628      	mov	r0, r5
 8007a10:	f7ff fcd6 	bl	80073c0 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007a14:	2302      	movs	r3, #2
 8007a16:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 8007a1a:	e672      	b.n	8007702 <USBD_StdDevReq+0x2a>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8007a1c:	888b      	ldrh	r3, [r1, #4]
 8007a1e:	0a1b      	lsrs	r3, r3, #8
 8007a20:	f880 32a0 	strb.w	r3, [r0, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007a24:	f000 f980 	bl	8007d28 <USBD_CtlSendStatus>
 8007a28:	e66b      	b.n	8007702 <USBD_StdDevReq+0x2a>
 8007a2a:	bf00      	nop
 8007a2c:	24006a0c 	.word	0x24006a0c
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007a30:	2180      	movs	r1, #128	; 0x80
    return USBD_FAIL;
 8007a32:	2403      	movs	r4, #3
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007a34:	f000 fc16 	bl	8008264 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007a38:	2100      	movs	r1, #0
 8007a3a:	4628      	mov	r0, r5
 8007a3c:	f000 fc12 	bl	8008264 <USBD_LL_StallEP>
    return USBD_FAIL;
 8007a40:	e65f      	b.n	8007702 <USBD_StdDevReq+0x2a>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007a42:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8007a46:	f10d 0006 	add.w	r0, sp, #6
 8007a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a4c:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007a4e:	2302      	movs	r3, #2
 8007a50:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8007a52:	e731      	b.n	80078b8 <USBD_StdDevReq+0x1e0>
          (void)USBD_CtlSendStatus(pdev);
 8007a54:	4628      	mov	r0, r5
 8007a56:	f000 f967 	bl	8007d28 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007a5a:	2303      	movs	r3, #3
 8007a5c:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 8007a60:	e64f      	b.n	8007702 <USBD_StdDevReq+0x2a>
 8007a62:	bf00      	nop

08007a64 <USBD_StdItfReq>:
{
 8007a64:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007a66:	780b      	ldrb	r3, [r1, #0]
{
 8007a68:	460d      	mov	r5, r1
 8007a6a:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007a6c:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8007a70:	2a40      	cmp	r2, #64	; 0x40
 8007a72:	d00b      	beq.n	8007a8c <USBD_StdItfReq+0x28>
 8007a74:	065b      	lsls	r3, r3, #25
 8007a76:	d509      	bpl.n	8007a8c <USBD_StdItfReq+0x28>
  USBD_StatusTypeDef ret = USBD_OK;
 8007a78:	2500      	movs	r5, #0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007a7a:	2180      	movs	r1, #128	; 0x80
 8007a7c:	f000 fbf2 	bl	8008264 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007a80:	4620      	mov	r0, r4
 8007a82:	4629      	mov	r1, r5
 8007a84:	f000 fbee 	bl	8008264 <USBD_LL_StallEP>
}
 8007a88:	4628      	mov	r0, r5
 8007a8a:	bd38      	pop	{r3, r4, r5, pc}
      switch (pdev->dev_state)
 8007a8c:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8007a90:	3b01      	subs	r3, #1
 8007a92:	2b02      	cmp	r3, #2
 8007a94:	d802      	bhi.n	8007a9c <USBD_StdItfReq+0x38>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007a96:	7929      	ldrb	r1, [r5, #4]
 8007a98:	2901      	cmp	r1, #1
 8007a9a:	d90a      	bls.n	8007ab2 <USBD_StdItfReq+0x4e>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007a9c:	2180      	movs	r1, #128	; 0x80
 8007a9e:	4620      	mov	r0, r4
 8007aa0:	f000 fbe0 	bl	8008264 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007aa4:	2100      	movs	r1, #0
 8007aa6:	4620      	mov	r0, r4
  USBD_StatusTypeDef ret = USBD_OK;
 8007aa8:	460d      	mov	r5, r1
  (void)USBD_LL_StallEP(pdev, 0U);
 8007aaa:	f000 fbdb 	bl	8008264 <USBD_LL_StallEP>
}
 8007aae:	4628      	mov	r0, r5
 8007ab0:	bd38      	pop	{r3, r4, r5, pc}
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007ab2:	4620      	mov	r0, r4
 8007ab4:	f7ff fdf6 	bl	80076a4 <USBD_CoreFindIF>
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007ab8:	b990      	cbnz	r0, 8007ae0 <USBD_StdItfReq+0x7c>
              if (pdev->pClass[idx]->Setup != NULL)
 8007aba:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8007abe:	689b      	ldr	r3, [r3, #8]
 8007ac0:	b173      	cbz	r3, 8007ae0 <USBD_StdItfReq+0x7c>
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007ac2:	4629      	mov	r1, r5
                pdev->classId = idx;
 8007ac4:	f8c4 02d4 	str.w	r0, [r4, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007ac8:	4620      	mov	r0, r4
 8007aca:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007acc:	88eb      	ldrh	r3, [r5, #6]
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007ace:	4605      	mov	r5, r0
            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d1d9      	bne.n	8007a88 <USBD_StdItfReq+0x24>
 8007ad4:	2800      	cmp	r0, #0
 8007ad6:	d1d7      	bne.n	8007a88 <USBD_StdItfReq+0x24>
              (void)USBD_CtlSendStatus(pdev);
 8007ad8:	4620      	mov	r0, r4
 8007ada:	f000 f925 	bl	8007d28 <USBD_CtlSendStatus>
 8007ade:	e7d3      	b.n	8007a88 <USBD_StdItfReq+0x24>
              ret = USBD_FAIL;
 8007ae0:	2503      	movs	r5, #3
}
 8007ae2:	4628      	mov	r0, r5
 8007ae4:	bd38      	pop	{r3, r4, r5, pc}
 8007ae6:	bf00      	nop

08007ae8 <USBD_StdEPReq>:
{
 8007ae8:	b530      	push	{r4, r5, lr}
 8007aea:	460c      	mov	r4, r1
  ep_addr = LOBYTE(req->wIndex);
 8007aec:	888a      	ldrh	r2, [r1, #4]
{
 8007aee:	b083      	sub	sp, #12
 8007af0:	4605      	mov	r5, r0
  ep_addr = LOBYTE(req->wIndex);
 8007af2:	7823      	ldrb	r3, [r4, #0]
 8007af4:	b2d1      	uxtb	r1, r2
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007af6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007afa:	2b20      	cmp	r3, #32
 8007afc:	d01e      	beq.n	8007b3c <USBD_StdEPReq+0x54>
 8007afe:	2b40      	cmp	r3, #64	; 0x40
 8007b00:	d01c      	beq.n	8007b3c <USBD_StdEPReq+0x54>
 8007b02:	b36b      	cbz	r3, 8007b60 <USBD_StdEPReq+0x78>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007b04:	2180      	movs	r1, #128	; 0x80
 8007b06:	4628      	mov	r0, r5
 8007b08:	f000 fbac 	bl	8008264 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007b0c:	2100      	movs	r1, #0
 8007b0e:	4628      	mov	r0, r5
 8007b10:	f000 fba8 	bl	8008264 <USBD_LL_StallEP>
}
 8007b14:	2000      	movs	r0, #0
 8007b16:	b003      	add	sp, #12
 8007b18:	bd30      	pop	{r4, r5, pc}
          switch (pdev->dev_state)
 8007b1a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8007b1e:	2b02      	cmp	r3, #2
 8007b20:	b2da      	uxtb	r2, r3
 8007b22:	d059      	beq.n	8007bd8 <USBD_StdEPReq+0xf0>
 8007b24:	2a03      	cmp	r2, #3
 8007b26:	d1ed      	bne.n	8007b04 <USBD_StdEPReq+0x1c>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007b28:	8863      	ldrh	r3, [r4, #2]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d1f2      	bne.n	8007b14 <USBD_StdEPReq+0x2c>
                if ((ep_addr & 0x7FU) != 0x00U)
 8007b2e:	064b      	lsls	r3, r1, #25
 8007b30:	d17f      	bne.n	8007c32 <USBD_StdEPReq+0x14a>
                (void)USBD_CtlSendStatus(pdev);
 8007b32:	4628      	mov	r0, r5
 8007b34:	9101      	str	r1, [sp, #4]
 8007b36:	f000 f8f7 	bl	8007d28 <USBD_CtlSendStatus>
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007b3a:	9901      	ldr	r1, [sp, #4]
 8007b3c:	4628      	mov	r0, r5
 8007b3e:	f7ff fdb3 	bl	80076a8 <USBD_CoreFindEP>
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007b42:	2800      	cmp	r0, #0
 8007b44:	d1e6      	bne.n	8007b14 <USBD_StdEPReq+0x2c>
                  if (pdev->pClass[idx]->Setup != NULL)
 8007b46:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
                  pdev->classId = idx;
 8007b4a:	f8c5 02d4 	str.w	r0, [r5, #724]	; 0x2d4
                  if (pdev->pClass[idx]->Setup != NULL)
 8007b4e:	689b      	ldr	r3, [r3, #8]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d0df      	beq.n	8007b14 <USBD_StdEPReq+0x2c>
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007b54:	4621      	mov	r1, r4
 8007b56:	4628      	mov	r0, r5
}
 8007b58:	b003      	add	sp, #12
 8007b5a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007b5e:	4718      	bx	r3
      switch (req->bRequest)
 8007b60:	7863      	ldrb	r3, [r4, #1]
 8007b62:	2b01      	cmp	r3, #1
 8007b64:	d0d9      	beq.n	8007b1a <USBD_StdEPReq+0x32>
 8007b66:	2b03      	cmp	r3, #3
 8007b68:	d024      	beq.n	8007bb4 <USBD_StdEPReq+0xcc>
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d1ca      	bne.n	8007b04 <USBD_StdEPReq+0x1c>
          switch (pdev->dev_state)
 8007b6e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8007b72:	2b02      	cmp	r3, #2
 8007b74:	b2d8      	uxtb	r0, r3
 8007b76:	d038      	beq.n	8007bea <USBD_StdEPReq+0x102>
 8007b78:	2803      	cmp	r0, #3
 8007b7a:	d1c3      	bne.n	8007b04 <USBD_StdEPReq+0x1c>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007b7c:	f001 030f 	and.w	r3, r1, #15
              if ((ep_addr & 0x80U) == 0x80U)
 8007b80:	0612      	lsls	r2, r2, #24
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007b82:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007b86:	eb05 0383 	add.w	r3, r5, r3, lsl #2
              if ((ep_addr & 0x80U) == 0x80U)
 8007b8a:	d43f      	bmi.n	8007c0c <USBD_StdEPReq+0x124>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007b8c:	f8b3 3164 	ldrh.w	r3, [r3, #356]	; 0x164
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d0b7      	beq.n	8007b04 <USBD_StdEPReq+0x1c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b94:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 8007b98:	2414      	movs	r4, #20
 8007b9a:	fb04 5403 	mla	r4, r4, r3, r5
 8007b9e:	f504 74aa 	add.w	r4, r4, #340	; 0x154
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d13e      	bne.n	8007c24 <USBD_StdEPReq+0x13c>
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007ba6:	2202      	movs	r2, #2
 8007ba8:	4621      	mov	r1, r4
 8007baa:	4628      	mov	r0, r5
                pep->status = 0x0000U;
 8007bac:	6023      	str	r3, [r4, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007bae:	f000 f88b 	bl	8007cc8 <USBD_CtlSendData>
              break;
 8007bb2:	e7af      	b.n	8007b14 <USBD_StdEPReq+0x2c>
          switch (pdev->dev_state)
 8007bb4:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8007bb8:	2b02      	cmp	r3, #2
 8007bba:	b2da      	uxtb	r2, r3
 8007bbc:	d00c      	beq.n	8007bd8 <USBD_StdEPReq+0xf0>
 8007bbe:	2a03      	cmp	r2, #3
 8007bc0:	d1a0      	bne.n	8007b04 <USBD_StdEPReq+0x1c>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007bc2:	8863      	ldrh	r3, [r4, #2]
 8007bc4:	b923      	cbnz	r3, 8007bd0 <USBD_StdEPReq+0xe8>
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007bc6:	0648      	lsls	r0, r1, #25
 8007bc8:	d002      	beq.n	8007bd0 <USBD_StdEPReq+0xe8>
 8007bca:	88e3      	ldrh	r3, [r4, #6]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d035      	beq.n	8007c3c <USBD_StdEPReq+0x154>
              (void)USBD_CtlSendStatus(pdev);
 8007bd0:	4628      	mov	r0, r5
 8007bd2:	f000 f8a9 	bl	8007d28 <USBD_CtlSendStatus>
              break;
 8007bd6:	e79d      	b.n	8007b14 <USBD_StdEPReq+0x2c>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007bd8:	064a      	lsls	r2, r1, #25
 8007bda:	d093      	beq.n	8007b04 <USBD_StdEPReq+0x1c>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007bdc:	f000 fb42 	bl	8008264 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007be0:	2180      	movs	r1, #128	; 0x80
 8007be2:	4628      	mov	r0, r5
 8007be4:	f000 fb3e 	bl	8008264 <USBD_LL_StallEP>
 8007be8:	e794      	b.n	8007b14 <USBD_StdEPReq+0x2c>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007bea:	0648      	lsls	r0, r1, #25
 8007bec:	d18a      	bne.n	8007b04 <USBD_StdEPReq+0x1c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007bee:	0611      	lsls	r1, r2, #24
              pep->status = 0x0000U;
 8007bf0:	f04f 0300 	mov.w	r3, #0
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007bf4:	f04f 0202 	mov.w	r2, #2
 8007bf8:	4628      	mov	r0, r5
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007bfa:	bf4c      	ite	mi
 8007bfc:	f105 0114 	addmi.w	r1, r5, #20
 8007c00:	f505 71aa 	addpl.w	r1, r5, #340	; 0x154
              pep->status = 0x0000U;
 8007c04:	600b      	str	r3, [r1, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007c06:	f000 f85f 	bl	8007cc8 <USBD_CtlSendData>
              break;
 8007c0a:	e783      	b.n	8007b14 <USBD_StdEPReq+0x2c>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007c0c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	f43f af78 	beq.w	8007b04 <USBD_StdEPReq+0x1c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007c14:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 8007c18:	1c5c      	adds	r4, r3, #1
 8007c1a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8007c1e:	eb05 0484 	add.w	r4, r5, r4, lsl #2
 8007c22:	e7be      	b.n	8007ba2 <USBD_StdEPReq+0xba>
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007c24:	4628      	mov	r0, r5
 8007c26:	f000 fb39 	bl	800829c <USBD_LL_IsStallEP>
 8007c2a:	1e03      	subs	r3, r0, #0
 8007c2c:	bf18      	it	ne
 8007c2e:	2301      	movne	r3, #1
 8007c30:	e7b9      	b.n	8007ba6 <USBD_StdEPReq+0xbe>
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007c32:	9101      	str	r1, [sp, #4]
 8007c34:	f000 fb24 	bl	8008280 <USBD_LL_ClearStallEP>
 8007c38:	9901      	ldr	r1, [sp, #4]
 8007c3a:	e77a      	b.n	8007b32 <USBD_StdEPReq+0x4a>
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007c3c:	4628      	mov	r0, r5
 8007c3e:	f000 fb11 	bl	8008264 <USBD_LL_StallEP>
 8007c42:	e7c5      	b.n	8007bd0 <USBD_StdEPReq+0xe8>

08007c44 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 8007c44:	780b      	ldrb	r3, [r1, #0]
 8007c46:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 8007c48:	784b      	ldrb	r3, [r1, #1]
 8007c4a:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pbuff);
 8007c4c:	884b      	ldrh	r3, [r1, #2]
 8007c4e:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pbuff);
 8007c50:	888b      	ldrh	r3, [r1, #4]
 8007c52:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pbuff);
 8007c54:	88cb      	ldrh	r3, [r1, #6]
 8007c56:	80c3      	strh	r3, [r0, #6]
}
 8007c58:	4770      	bx	lr
 8007c5a:	bf00      	nop

08007c5c <USBD_CtlError>:
{
 8007c5c:	b510      	push	{r4, lr}
 8007c5e:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007c60:	2180      	movs	r1, #128	; 0x80
 8007c62:	f000 faff 	bl	8008264 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007c66:	2100      	movs	r1, #0
 8007c68:	4620      	mov	r0, r4
}
 8007c6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  (void)USBD_LL_StallEP(pdev, 0U);
 8007c6e:	f000 baf9 	b.w	8008264 <USBD_LL_StallEP>
 8007c72:	bf00      	nop

08007c74 <USBD_GetString>:
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
  uint8_t idx = 0U;
  uint8_t *pdesc;

  if (desc == NULL)
 8007c74:	b318      	cbz	r0, 8007cbe <USBD_GetString+0x4a>
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 8007c76:	7803      	ldrb	r3, [r0, #0]
{
 8007c78:	b430      	push	{r4, r5}
  while (*pbuff != (uint8_t)'\0')
 8007c7a:	b30b      	cbz	r3, 8007cc0 <USBD_GetString+0x4c>
 8007c7c:	4604      	mov	r4, r0
 8007c7e:	f1c0 0c01 	rsb	ip, r0, #1
  {
    len++;
 8007c82:	eb04 030c 	add.w	r3, r4, ip
  while (*pbuff != (uint8_t)'\0')
 8007c86:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 8007c8a:	b2db      	uxtb	r3, r3
 8007c8c:	2d00      	cmp	r5, #0
 8007c8e:	d1f8      	bne.n	8007c82 <USBD_GetString+0xe>
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007c90:	3301      	adds	r3, #1
 8007c92:	005b      	lsls	r3, r3, #1
 8007c94:	b2dc      	uxtb	r4, r3
 8007c96:	8013      	strh	r3, [r2, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007c98:	2303      	movs	r3, #3
  unicode[idx] = *(uint8_t *)len;
 8007c9a:	700c      	strb	r4, [r1, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007c9c:	704b      	strb	r3, [r1, #1]
  while (*pdesc != (uint8_t)'\0')
 8007c9e:	7804      	ldrb	r4, [r0, #0]
 8007ca0:	b15c      	cbz	r4, 8007cba <USBD_GetString+0x46>
  idx++;
 8007ca2:	2302      	movs	r3, #2
    unicode[idx] = 0U;
 8007ca4:	2500      	movs	r5, #0
    idx++;
 8007ca6:	1c5a      	adds	r2, r3, #1
    unicode[idx] = *pdesc;
 8007ca8:	54cc      	strb	r4, [r1, r3]
    idx++;
 8007caa:	3302      	adds	r3, #2
    unicode[idx] = 0U;
 8007cac:	b2d2      	uxtb	r2, r2
    idx++;
 8007cae:	b2db      	uxtb	r3, r3
    unicode[idx] = 0U;
 8007cb0:	548d      	strb	r5, [r1, r2]
  while (*pdesc != (uint8_t)'\0')
 8007cb2:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 8007cb6:	2c00      	cmp	r4, #0
 8007cb8:	d1f5      	bne.n	8007ca6 <USBD_GetString+0x32>
}
 8007cba:	bc30      	pop	{r4, r5}
 8007cbc:	4770      	bx	lr
 8007cbe:	4770      	bx	lr
  while (*pbuff != (uint8_t)'\0')
 8007cc0:	2402      	movs	r4, #2
 8007cc2:	4623      	mov	r3, r4
 8007cc4:	e7e7      	b.n	8007c96 <USBD_GetString+0x22>
 8007cc6:	bf00      	nop

08007cc8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007cc8:	b510      	push	{r4, lr}
 8007cca:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007ccc:	2402      	movs	r4, #2
{
 8007cce:	460a      	mov	r2, r1
#else
  pdev->ep_in[0].rem_length = len;
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007cd0:	2100      	movs	r1, #0
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007cd2:	f8c0 4294 	str.w	r4, [r0, #660]	; 0x294
  pdev->ep_in[0].rem_length = len;
 8007cd6:	e9c0 3306 	strd	r3, r3, [r0, #24]
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007cda:	f000 fb01 	bl	80082e0 <USBD_LL_Transmit>

  return USBD_OK;
}
 8007cde:	2000      	movs	r0, #0
 8007ce0:	bd10      	pop	{r4, pc}
 8007ce2:	bf00      	nop

08007ce4 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007ce4:	468c      	mov	ip, r1
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007ce6:	2100      	movs	r1, #0
{
 8007ce8:	b508      	push	{r3, lr}
 8007cea:	4613      	mov	r3, r2
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007cec:	4662      	mov	r2, ip
 8007cee:	f000 faf7 	bl	80082e0 <USBD_LL_Transmit>

  return USBD_OK;
}
 8007cf2:	2000      	movs	r0, #0
 8007cf4:	bd08      	pop	{r3, pc}
 8007cf6:	bf00      	nop

08007cf8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007cf8:	b510      	push	{r4, lr}
 8007cfa:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007cfc:	2403      	movs	r4, #3
{
 8007cfe:	460a      	mov	r2, r1
#else
  pdev->ep_out[0].rem_length = len;
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007d00:	2100      	movs	r1, #0
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007d02:	f8c0 4294 	str.w	r4, [r0, #660]	; 0x294
  pdev->ep_out[0].rem_length = len;
 8007d06:	e9c0 3356 	strd	r3, r3, [r0, #344]	; 0x158
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007d0a:	f000 faf7 	bl	80082fc <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8007d0e:	2000      	movs	r0, #0
 8007d10:	bd10      	pop	{r4, pc}
 8007d12:	bf00      	nop

08007d14 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007d14:	468c      	mov	ip, r1
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007d16:	2100      	movs	r1, #0
{
 8007d18:	b508      	push	{r3, lr}
 8007d1a:	4613      	mov	r3, r2
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007d1c:	4662      	mov	r2, ip
 8007d1e:	f000 faed 	bl	80082fc <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8007d22:	2000      	movs	r0, #0
 8007d24:	bd08      	pop	{r3, pc}
 8007d26:	bf00      	nop

08007d28 <USBD_CtlSendStatus>:
{
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007d28:	2300      	movs	r3, #0
{
 8007d2a:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007d2c:	2404      	movs	r4, #4
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007d2e:	461a      	mov	r2, r3
 8007d30:	4619      	mov	r1, r3
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007d32:	f8c0 4294 	str.w	r4, [r0, #660]	; 0x294
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007d36:	f000 fad3 	bl	80082e0 <USBD_LL_Transmit>

  return USBD_OK;
}
 8007d3a:	2000      	movs	r0, #0
 8007d3c:	bd10      	pop	{r4, pc}
 8007d3e:	bf00      	nop

08007d40 <USBD_CtlReceiveStatus>:
{
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007d40:	2300      	movs	r3, #0
{
 8007d42:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007d44:	2405      	movs	r4, #5
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007d46:	461a      	mov	r2, r3
 8007d48:	4619      	mov	r1, r3
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007d4a:	f8c0 4294 	str.w	r4, [r0, #660]	; 0x294
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007d4e:	f000 fad5 	bl	80082fc <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8007d52:	2000      	movs	r0, #0
 8007d54:	bd10      	pop	{r4, pc}
 8007d56:	bf00      	nop

08007d58 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007d58:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 8007d5a:	2201      	movs	r2, #1
 8007d5c:	4919      	ldr	r1, [pc, #100]	; (8007dc4 <MX_USB_DEVICE_Init+0x6c>)
 8007d5e:	481a      	ldr	r0, [pc, #104]	; (8007dc8 <MX_USB_DEVICE_Init+0x70>)
 8007d60:	f7ff faf4 	bl	800734c <USBD_Init>
 8007d64:	b988      	cbnz	r0, 8007d8a <MX_USB_DEVICE_Init+0x32>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 8007d66:	4919      	ldr	r1, [pc, #100]	; (8007dcc <MX_USB_DEVICE_Init+0x74>)
 8007d68:	4817      	ldr	r0, [pc, #92]	; (8007dc8 <MX_USB_DEVICE_Init+0x70>)
 8007d6a:	f7ff fb03 	bl	8007374 <USBD_RegisterClass>
 8007d6e:	b9a0      	cbnz	r0, 8007d9a <MX_USB_DEVICE_Init+0x42>
  {
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 8007d70:	4917      	ldr	r1, [pc, #92]	; (8007dd0 <MX_USB_DEVICE_Init+0x78>)
 8007d72:	4815      	ldr	r0, [pc, #84]	; (8007dc8 <MX_USB_DEVICE_Init+0x70>)
 8007d74:	f7ff fa8a 	bl	800728c <USBD_CDC_RegisterInterface>
 8007d78:	b9b8      	cbnz	r0, 8007daa <MX_USB_DEVICE_Init+0x52>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 8007d7a:	4813      	ldr	r0, [pc, #76]	; (8007dc8 <MX_USB_DEVICE_Init+0x70>)
 8007d7c:	f7ff fb16 	bl	80073ac <USBD_Start>
 8007d80:	b9d0      	cbnz	r0, 8007db8 <MX_USB_DEVICE_Init+0x60>

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007d82:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_PWREx_EnableUSBVoltageDetector();
 8007d86:	f7fb bfc1 	b.w	8003d0c <HAL_PWREx_EnableUSBVoltageDetector>
    Error_Handler();
 8007d8a:	f7f8 ff2b 	bl	8000be4 <Error_Handler>
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 8007d8e:	490f      	ldr	r1, [pc, #60]	; (8007dcc <MX_USB_DEVICE_Init+0x74>)
 8007d90:	480d      	ldr	r0, [pc, #52]	; (8007dc8 <MX_USB_DEVICE_Init+0x70>)
 8007d92:	f7ff faef 	bl	8007374 <USBD_RegisterClass>
 8007d96:	2800      	cmp	r0, #0
 8007d98:	d0ea      	beq.n	8007d70 <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 8007d9a:	f7f8 ff23 	bl	8000be4 <Error_Handler>
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 8007d9e:	490c      	ldr	r1, [pc, #48]	; (8007dd0 <MX_USB_DEVICE_Init+0x78>)
 8007da0:	4809      	ldr	r0, [pc, #36]	; (8007dc8 <MX_USB_DEVICE_Init+0x70>)
 8007da2:	f7ff fa73 	bl	800728c <USBD_CDC_RegisterInterface>
 8007da6:	2800      	cmp	r0, #0
 8007da8:	d0e7      	beq.n	8007d7a <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 8007daa:	f7f8 ff1b 	bl	8000be4 <Error_Handler>
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 8007dae:	4806      	ldr	r0, [pc, #24]	; (8007dc8 <MX_USB_DEVICE_Init+0x70>)
 8007db0:	f7ff fafc 	bl	80073ac <USBD_Start>
 8007db4:	2800      	cmp	r0, #0
 8007db6:	d0e4      	beq.n	8007d82 <MX_USB_DEVICE_Init+0x2a>
    Error_Handler();
 8007db8:	f7f8 ff14 	bl	8000be4 <Error_Handler>
}
 8007dbc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_PWREx_EnableUSBVoltageDetector();
 8007dc0:	f7fb bfa4 	b.w	8003d0c <HAL_PWREx_EnableUSBVoltageDetector>
 8007dc4:	240065d0 	.word	0x240065d0
 8007dc8:	24006a10 	.word	0x24006a10
 8007dcc:	24006534 	.word	0x24006534
 8007dd0:	240065bc 	.word	0x240065bc

08007dd4 <CDC_DeInit_HS>:
static int8_t CDC_DeInit_HS(void)
{
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
  /* USER CODE END 9 */
}
 8007dd4:	2000      	movs	r0, #0
 8007dd6:	4770      	bx	lr

08007dd8 <CDC_Control_HS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 10 */
}
 8007dd8:	2000      	movs	r0, #0
 8007dda:	4770      	bx	lr

08007ddc <CDC_TransmitCplt_HS>:
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
}
 8007ddc:	2000      	movs	r0, #0
 8007dde:	4770      	bx	lr

08007de0 <CDC_Receive_HS>:
{
 8007de0:	b510      	push	{r4, lr}
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 8007de2:	4c05      	ldr	r4, [pc, #20]	; (8007df8 <CDC_Receive_HS+0x18>)
{
 8007de4:	4601      	mov	r1, r0
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 8007de6:	4620      	mov	r0, r4
 8007de8:	f7ff fa6a 	bl	80072c0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 8007dec:	4620      	mov	r0, r4
 8007dee:	f7ff fa8f 	bl	8007310 <USBD_CDC_ReceivePacket>
}
 8007df2:	2000      	movs	r0, #0
 8007df4:	bd10      	pop	{r4, pc}
 8007df6:	bf00      	nop
 8007df8:	24006a10 	.word	0x24006a10

08007dfc <CDC_Init_HS>:
{
 8007dfc:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 8007dfe:	4c06      	ldr	r4, [pc, #24]	; (8007e18 <CDC_Init_HS+0x1c>)
 8007e00:	2200      	movs	r2, #0
 8007e02:	4906      	ldr	r1, [pc, #24]	; (8007e1c <CDC_Init_HS+0x20>)
 8007e04:	4620      	mov	r0, r4
 8007e06:	f7ff fa4d 	bl	80072a4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 8007e0a:	4905      	ldr	r1, [pc, #20]	; (8007e20 <CDC_Init_HS+0x24>)
 8007e0c:	4620      	mov	r0, r4
 8007e0e:	f7ff fa57 	bl	80072c0 <USBD_CDC_SetRxBuffer>
}
 8007e12:	2000      	movs	r0, #0
 8007e14:	bd10      	pop	{r4, pc}
 8007e16:	bf00      	nop
 8007e18:	24006a10 	.word	0x24006a10
 8007e1c:	240074ec 	.word	0x240074ec
 8007e20:	24006cec 	.word	0x24006cec

08007e24 <CDC_Transmit_HS>:
{
 8007e24:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 8007e26:	4c09      	ldr	r4, [pc, #36]	; (8007e4c <CDC_Transmit_HS+0x28>)
 8007e28:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
  if (hcdc->TxState != 0){
 8007e2c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007e30:	b10b      	cbz	r3, 8007e36 <CDC_Transmit_HS+0x12>
}
 8007e32:	2001      	movs	r0, #1
 8007e34:	bd10      	pop	{r4, pc}
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 8007e36:	460a      	mov	r2, r1
 8007e38:	4601      	mov	r1, r0
 8007e3a:	4620      	mov	r0, r4
 8007e3c:	f7ff fa32 	bl	80072a4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 8007e40:	4620      	mov	r0, r4
}
 8007e42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 8007e46:	f7ff ba47 	b.w	80072d8 <USBD_CDC_TransmitPacket>
 8007e4a:	bf00      	nop
 8007e4c:	24006a10 	.word	0x24006a10

08007e50 <USBD_HS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 8007e50:	2312      	movs	r3, #18
  return USBD_HS_DeviceDesc;
}
 8007e52:	4801      	ldr	r0, [pc, #4]	; (8007e58 <USBD_HS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_HS_DeviceDesc);
 8007e54:	800b      	strh	r3, [r1, #0]
}
 8007e56:	4770      	bx	lr
 8007e58:	240065f0 	.word	0x240065f0

08007e5c <USBD_HS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007e5c:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 8007e5e:	4801      	ldr	r0, [pc, #4]	; (8007e64 <USBD_HS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 8007e60:	800b      	strh	r3, [r1, #0]
}
 8007e62:	4770      	bx	lr
 8007e64:	24006604 	.word	0x24006604

08007e68 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e68:	b510      	push	{r4, lr}
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007e6a:	4c04      	ldr	r4, [pc, #16]	; (8007e7c <USBD_HS_ManufacturerStrDescriptor+0x14>)
{
 8007e6c:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007e6e:	4804      	ldr	r0, [pc, #16]	; (8007e80 <USBD_HS_ManufacturerStrDescriptor+0x18>)
 8007e70:	4621      	mov	r1, r4
 8007e72:	f7ff feff 	bl	8007c74 <USBD_GetString>
  return USBD_StrDesc;
}
 8007e76:	4620      	mov	r0, r4
 8007e78:	bd10      	pop	{r4, pc}
 8007e7a:	bf00      	nop
 8007e7c:	24007cec 	.word	0x24007cec
 8007e80:	0800ca88 	.word	0x0800ca88

08007e84 <USBD_HS_ProductStrDescriptor>:
{
 8007e84:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8007e86:	4c04      	ldr	r4, [pc, #16]	; (8007e98 <USBD_HS_ProductStrDescriptor+0x14>)
{
 8007e88:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8007e8a:	4804      	ldr	r0, [pc, #16]	; (8007e9c <USBD_HS_ProductStrDescriptor+0x18>)
 8007e8c:	4621      	mov	r1, r4
 8007e8e:	f7ff fef1 	bl	8007c74 <USBD_GetString>
}
 8007e92:	4620      	mov	r0, r4
 8007e94:	bd10      	pop	{r4, pc}
 8007e96:	bf00      	nop
 8007e98:	24007cec 	.word	0x24007cec
 8007e9c:	0800ca9c 	.word	0x0800ca9c

08007ea0 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ea0:	b510      	push	{r4, lr}
  if(speed == USBD_SPEED_HIGH)
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8007ea2:	4c04      	ldr	r4, [pc, #16]	; (8007eb4 <USBD_HS_ConfigStrDescriptor+0x14>)
{
 8007ea4:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8007ea6:	4804      	ldr	r0, [pc, #16]	; (8007eb8 <USBD_HS_ConfigStrDescriptor+0x18>)
 8007ea8:	4621      	mov	r1, r4
 8007eaa:	f7ff fee3 	bl	8007c74 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 8007eae:	4620      	mov	r0, r4
 8007eb0:	bd10      	pop	{r4, pc}
 8007eb2:	bf00      	nop
 8007eb4:	24007cec 	.word	0x24007cec
 8007eb8:	0800cab4 	.word	0x0800cab4

08007ebc <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ebc:	b510      	push	{r4, lr}
  if(speed == 0)
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8007ebe:	4c04      	ldr	r4, [pc, #16]	; (8007ed0 <USBD_HS_InterfaceStrDescriptor+0x14>)
{
 8007ec0:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8007ec2:	4804      	ldr	r0, [pc, #16]	; (8007ed4 <USBD_HS_InterfaceStrDescriptor+0x18>)
 8007ec4:	4621      	mov	r1, r4
 8007ec6:	f7ff fed5 	bl	8007c74 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 8007eca:	4620      	mov	r0, r4
 8007ecc:	bd10      	pop	{r4, pc}
 8007ece:	bf00      	nop
 8007ed0:	24007cec 	.word	0x24007cec
 8007ed4:	0800cac0 	.word	0x0800cac0

08007ed8 <USBD_HS_SerialStrDescriptor>:
{
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007ed8:	4a46      	ldr	r2, [pc, #280]	; (8007ff4 <USBD_HS_SerialStrDescriptor+0x11c>)
  *length = USB_SIZ_STRING_SERIAL;
 8007eda:	f04f 0c1a 	mov.w	ip, #26
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007ede:	f8d2 3800 	ldr.w	r3, [r2, #2048]	; 0x800
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
  deviceserial2 = *(uint32_t *) DEVICE_ID3;

  deviceserial0 += deviceserial2;
 8007ee2:	f8d2 0808 	ldr.w	r0, [r2, #2056]	; 0x808
  *length = USB_SIZ_STRING_SERIAL;
 8007ee6:	f8a1 c000 	strh.w	ip, [r1]

  if (deviceserial0 != 0)
 8007eea:	181b      	adds	r3, r3, r0
 8007eec:	d101      	bne.n	8007ef2 <USBD_HS_SerialStrDescriptor+0x1a>
}
 8007eee:	4842      	ldr	r0, [pc, #264]	; (8007ff8 <USBD_HS_SerialStrDescriptor+0x120>)
 8007ef0:	4770      	bx	lr
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
  {
    if (((value >> 28)) < 0xA)
 8007ef2:	0f18      	lsrs	r0, r3, #28
 8007ef4:	f1b3 4f20 	cmp.w	r3, #2684354560	; 0xa0000000
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007ef8:	f8d2 1804 	ldr.w	r1, [r2, #2052]	; 0x804
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 8007efc:	f04f 0c00 	mov.w	ip, #0
      pbuf[2 * idx] = (value >> 28) + '0';
 8007f00:	4a3d      	ldr	r2, [pc, #244]	; (8007ff8 <USBD_HS_SerialStrDescriptor+0x120>)
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007f02:	bf2c      	ite	cs
 8007f04:	3037      	addcs	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8007f06:	3030      	addcc	r0, #48	; 0x30
    pbuf[2 * idx + 1] = 0;
 8007f08:	f882 c003 	strb.w	ip, [r2, #3]
 8007f0c:	f04f 0c00 	mov.w	ip, #0
      pbuf[2 * idx] = (value >> 28) + '0';
 8007f10:	7090      	strb	r0, [r2, #2]
    if (((value >> 28)) < 0xA)
 8007f12:	f3c3 6003 	ubfx	r0, r3, #24, #4
    pbuf[2 * idx + 1] = 0;
 8007f16:	f882 c005 	strb.w	ip, [r2, #5]
 8007f1a:	f04f 0c00 	mov.w	ip, #0
    if (((value >> 28)) < 0xA)
 8007f1e:	2809      	cmp	r0, #9
    pbuf[2 * idx + 1] = 0;
 8007f20:	f882 c007 	strb.w	ip, [r2, #7]
 8007f24:	f04f 0c00 	mov.w	ip, #0
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007f28:	bf8c      	ite	hi
 8007f2a:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8007f2c:	3030      	addls	r0, #48	; 0x30
    pbuf[2 * idx + 1] = 0;
 8007f2e:	f882 c009 	strb.w	ip, [r2, #9]
 8007f32:	f04f 0c00 	mov.w	ip, #0
      pbuf[2 * idx] = (value >> 28) + '0';
 8007f36:	7110      	strb	r0, [r2, #4]
    if (((value >> 28)) < 0xA)
 8007f38:	f3c3 5003 	ubfx	r0, r3, #20, #4
    pbuf[2 * idx + 1] = 0;
 8007f3c:	f882 c00b 	strb.w	ip, [r2, #11]
 8007f40:	f04f 0c00 	mov.w	ip, #0
    if (((value >> 28)) < 0xA)
 8007f44:	2809      	cmp	r0, #9
    pbuf[2 * idx + 1] = 0;
 8007f46:	f882 c00d 	strb.w	ip, [r2, #13]
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007f4a:	bf8c      	ite	hi
 8007f4c:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8007f4e:	3030      	addls	r0, #48	; 0x30
 8007f50:	7190      	strb	r0, [r2, #6]
    if (((value >> 28)) < 0xA)
 8007f52:	f3c3 4003 	ubfx	r0, r3, #16, #4
 8007f56:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007f58:	bf8c      	ite	hi
 8007f5a:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8007f5c:	3030      	addls	r0, #48	; 0x30
 8007f5e:	7210      	strb	r0, [r2, #8]
    if (((value >> 28)) < 0xA)
 8007f60:	f3c3 3003 	ubfx	r0, r3, #12, #4
 8007f64:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007f66:	bf8c      	ite	hi
 8007f68:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8007f6a:	3030      	addls	r0, #48	; 0x30
 8007f6c:	7290      	strb	r0, [r2, #10]
    if (((value >> 28)) < 0xA)
 8007f6e:	f3c3 2003 	ubfx	r0, r3, #8, #4
 8007f72:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007f74:	bf8c      	ite	hi
 8007f76:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8007f78:	3030      	addls	r0, #48	; 0x30
 8007f7a:	7310      	strb	r0, [r2, #12]
    if (((value >> 28)) < 0xA)
 8007f7c:	f3c3 1003 	ubfx	r0, r3, #4, #4
 8007f80:	f003 030f 	and.w	r3, r3, #15
 8007f84:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007f86:	bf8c      	ite	hi
 8007f88:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8007f8a:	3030      	addls	r0, #48	; 0x30
    if (((value >> 28)) < 0xA)
 8007f8c:	2b09      	cmp	r3, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 8007f8e:	7390      	strb	r0, [r2, #14]
    pbuf[2 * idx + 1] = 0;
 8007f90:	f04f 0000 	mov.w	r0, #0
      pbuf[2 * idx] = (value >> 28) + '0';
 8007f94:	bf94      	ite	ls
 8007f96:	3330      	addls	r3, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007f98:	3337      	addhi	r3, #55	; 0x37
    if (((value >> 28)) < 0xA)
 8007f9a:	f1b1 4f20 	cmp.w	r1, #2684354560	; 0xa0000000
    pbuf[2 * idx + 1] = 0;
 8007f9e:	73d0      	strb	r0, [r2, #15]
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007fa0:	7413      	strb	r3, [r2, #16]
    if (((value >> 28)) < 0xA)
 8007fa2:	ea4f 7311 	mov.w	r3, r1, lsr #28
    pbuf[2 * idx + 1] = 0;
 8007fa6:	f04f 0000 	mov.w	r0, #0
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007faa:	bf2c      	ite	cs
 8007fac:	3337      	addcs	r3, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8007fae:	3330      	addcc	r3, #48	; 0x30
    pbuf[2 * idx + 1] = 0;
 8007fb0:	7450      	strb	r0, [r2, #17]
 8007fb2:	2000      	movs	r0, #0
      pbuf[2 * idx] = (value >> 28) + '0';
 8007fb4:	7493      	strb	r3, [r2, #18]
    if (((value >> 28)) < 0xA)
 8007fb6:	f3c1 6303 	ubfx	r3, r1, #24, #4
    pbuf[2 * idx + 1] = 0;
 8007fba:	74d0      	strb	r0, [r2, #19]
 8007fbc:	2000      	movs	r0, #0
    if (((value >> 28)) < 0xA)
 8007fbe:	2b09      	cmp	r3, #9
    pbuf[2 * idx + 1] = 0;
 8007fc0:	7550      	strb	r0, [r2, #21]
 8007fc2:	f04f 0000 	mov.w	r0, #0
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007fc6:	bf8c      	ite	hi
 8007fc8:	3337      	addhi	r3, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8007fca:	3330      	addls	r3, #48	; 0x30
    pbuf[2 * idx + 1] = 0;
 8007fcc:	75d0      	strb	r0, [r2, #23]
      pbuf[2 * idx] = (value >> 28) + '0';
 8007fce:	7513      	strb	r3, [r2, #20]
    if (((value >> 28)) < 0xA)
 8007fd0:	f3c1 5303 	ubfx	r3, r1, #20, #4
}
 8007fd4:	4808      	ldr	r0, [pc, #32]	; (8007ff8 <USBD_HS_SerialStrDescriptor+0x120>)
    if (((value >> 28)) < 0xA)
 8007fd6:	2b09      	cmp	r3, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007fd8:	bf8c      	ite	hi
 8007fda:	3337      	addhi	r3, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8007fdc:	3330      	addls	r3, #48	; 0x30
 8007fde:	7593      	strb	r3, [r2, #22]
    if (((value >> 28)) < 0xA)
 8007fe0:	f3c1 4303 	ubfx	r3, r1, #16, #4
 8007fe4:	2b09      	cmp	r3, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 8007fe6:	bf94      	ite	ls
 8007fe8:	3330      	addls	r3, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007fea:	3337      	addhi	r3, #55	; 0x37
 8007fec:	7613      	strb	r3, [r2, #24]
    pbuf[2 * idx + 1] = 0;
 8007fee:	2300      	movs	r3, #0
 8007ff0:	7653      	strb	r3, [r2, #25]
}
 8007ff2:	4770      	bx	lr
 8007ff4:	1ff1e000 	.word	0x1ff1e000
 8007ff8:	24006608 	.word	0x24006608
 8007ffc:	00000000 	.word	0x00000000

08008000 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008000:	b530      	push	{r4, r5, lr}
 8008002:	b0b7      	sub	sp, #220	; 0xdc
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008004:	2100      	movs	r1, #0
{
 8008006:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8008008:	22b8      	movs	r2, #184	; 0xb8
 800800a:	a808      	add	r0, sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800800c:	9106      	str	r1, [sp, #24]
 800800e:	e9cd 1102 	strd	r1, r1, [sp, #8]
 8008012:	e9cd 1104 	strd	r1, r1, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8008016:	f002 fd3c 	bl	800aa92 <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 800801a:	4b25      	ldr	r3, [pc, #148]	; (80080b0 <HAL_PCD_MspInit+0xb0>)
 800801c:	6822      	ldr	r2, [r4, #0]
 800801e:	429a      	cmp	r2, r3
 8008020:	d001      	beq.n	8008026 <HAL_PCD_MspInit+0x26>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8008022:	b037      	add	sp, #220	; 0xdc
 8008024:	bd30      	pop	{r4, r5, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8008026:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 800802a:	2500      	movs	r5, #0
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800802c:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008030:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8008032:	e9cd 4508 	strd	r4, r5, [sp, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8008036:	9329      	str	r3, [sp, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008038:	f7fc fca0 	bl	800497c <HAL_RCCEx_PeriphCLKConfig>
 800803c:	bb70      	cbnz	r0, 800809c <HAL_PCD_MspInit+0x9c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800803e:	4c1d      	ldr	r4, [pc, #116]	; (80080b4 <HAL_PCD_MspInit+0xb4>)
    HAL_PWREx_EnableUSBVoltageDetector();
 8008040:	f7fb fe64 	bl	8003d0c <HAL_PWREx_EnableUSBVoltageDetector>
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008044:	2500      	movs	r5, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008046:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008048:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800804c:	481a      	ldr	r0, [pc, #104]	; (80080b8 <HAL_PCD_MspInit+0xb8>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800804e:	f043 0301 	orr.w	r3, r3, #1
 8008052:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8008056:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800805a:	9504      	str	r5, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800805c:	f003 0301 	and.w	r3, r3, #1
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8008060:	ed9f 7b11 	vldr	d7, [pc, #68]	; 80080a8 <HAL_PCD_MspInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008064:	9300      	str	r3, [sp, #0]
 8008066:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8008068:	ed8d 7b02 	vstr	d7, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800806c:	f7fa fd02 	bl	8002a74 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8008070:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 8008074:	462a      	mov	r2, r5
 8008076:	4629      	mov	r1, r5
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8008078:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 800807c:	204d      	movs	r0, #77	; 0x4d
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800807e:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
 8008082:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 8008086:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800808a:	9301      	str	r3, [sp, #4]
 800808c:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 800808e:	f7f9 fc43 	bl	8001918 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8008092:	204d      	movs	r0, #77	; 0x4d
 8008094:	f7f9 fc7e 	bl	8001994 <HAL_NVIC_EnableIRQ>
}
 8008098:	b037      	add	sp, #220	; 0xdc
 800809a:	bd30      	pop	{r4, r5, pc}
      Error_Handler();
 800809c:	f7f8 fda2 	bl	8000be4 <Error_Handler>
 80080a0:	e7cd      	b.n	800803e <HAL_PCD_MspInit+0x3e>
 80080a2:	bf00      	nop
 80080a4:	f3af 8000 	nop.w
 80080a8:	00000200 	.word	0x00000200
 80080ac:	00000000 	.word	0x00000000
 80080b0:	40040000 	.word	0x40040000
 80080b4:	58024400 	.word	0x58024400
 80080b8:	58020000 	.word	0x58020000

080080bc <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80080bc:	f200 41c4 	addw	r1, r0, #1220	; 0x4c4
 80080c0:	f8d0 0508 	ldr.w	r0, [r0, #1288]	; 0x508
 80080c4:	f7ff b986 	b.w	80073d4 <USBD_LL_SetupStage>

080080c8 <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80080c8:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 80080cc:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80080d0:	f8d0 0508 	ldr.w	r0, [r0, #1288]	; 0x508
 80080d4:	f8d3 2288 	ldr.w	r2, [r3, #648]	; 0x288
 80080d8:	f7ff b9ac 	b.w	8007434 <USBD_LL_DataOutStage>

080080dc <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80080dc:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 80080e0:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80080e4:	f8d0 0508 	ldr.w	r0, [r0, #1288]	; 0x508
 80080e8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80080ea:	f7ff b9dd 	b.w	80074a8 <USBD_LL_DataInStage>
 80080ee:	bf00      	nop

080080f0 <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80080f0:	f8d0 0508 	ldr.w	r0, [r0, #1288]	; 0x508
 80080f4:	f7ff ba86 	b.w	8007604 <USBD_LL_SOF>

080080f8 <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80080f8:	6901      	ldr	r1, [r0, #16]
{
 80080fa:	b510      	push	{r4, lr}
 80080fc:	4604      	mov	r4, r0
  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80080fe:	b111      	cbz	r1, 8008106 <HAL_PCD_ResetCallback+0xe>
  {
    speed = USBD_SPEED_HIGH;
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008100:	2902      	cmp	r1, #2
 8008102:	d10a      	bne.n	800811a <HAL_PCD_ResetCallback+0x22>
  {
    speed = USBD_SPEED_FULL;
 8008104:	2101      	movs	r1, #1
  else
  {
    Error_Handler();
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008106:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
 800810a:	f7ff fa5b 	bl	80075c4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800810e:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
}
 8008112:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008116:	f7ff ba27 	b.w	8007568 <USBD_LL_Reset>
    Error_Handler();
 800811a:	f7f8 fd63 	bl	8000be4 <Error_Handler>
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800811e:	2101      	movs	r1, #1
 8008120:	e7f1      	b.n	8008106 <HAL_PCD_ResetCallback+0xe>
 8008122:	bf00      	nop

08008124 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008124:	b510      	push	{r4, lr}
 8008126:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008128:	f8d0 0508 	ldr.w	r0, [r0, #1288]	; 0x508
 800812c:	f7ff fa4e 	bl	80075cc <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008130:	6822      	ldr	r2, [r4, #0]
 8008132:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 8008136:	f043 0301 	orr.w	r3, r3, #1
 800813a:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800813e:	6a23      	ldr	r3, [r4, #32]
 8008140:	b123      	cbz	r3, 800814c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008142:	4a03      	ldr	r2, [pc, #12]	; (8008150 <HAL_PCD_SuspendCallback+0x2c>)
 8008144:	6913      	ldr	r3, [r2, #16]
 8008146:	f043 0306 	orr.w	r3, r3, #6
 800814a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800814c:	bd10      	pop	{r4, pc}
 800814e:	bf00      	nop
 8008150:	e000ed00 	.word	0xe000ed00

08008154 <HAL_PCD_ResumeCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008154:	f8d0 0508 	ldr.w	r0, [r0, #1288]	; 0x508
 8008158:	f7ff ba48 	b.w	80075ec <USBD_LL_Resume>

0800815c <HAL_PCD_ISOOUTIncompleteCallback>:
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800815c:	f8d0 0508 	ldr.w	r0, [r0, #1288]	; 0x508
 8008160:	f7ff ba76 	b.w	8007650 <USBD_LL_IsoOUTIncomplete>

08008164 <HAL_PCD_ISOINIncompleteCallback>:
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008164:	f8d0 0508 	ldr.w	r0, [r0, #1288]	; 0x508
 8008168:	f7ff ba5c 	b.w	8007624 <USBD_LL_IsoINIncomplete>

0800816c <HAL_PCD_ConnectCallback>:
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800816c:	f8d0 0508 	ldr.w	r0, [r0, #1288]	; 0x508
 8008170:	f7ff ba84 	b.w	800767c <USBD_LL_DevConnected>

08008174 <HAL_PCD_DisconnectCallback>:
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008174:	f8d0 0508 	ldr.w	r0, [r0, #1288]	; 0x508
 8008178:	f7ff ba82 	b.w	8007680 <USBD_LL_DevDisconnected>
 800817c:	0000      	movs	r0, r0
	...

08008180 <USBD_LL_Init>:
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 8008180:	7802      	ldrb	r2, [r0, #0]
 8008182:	2a01      	cmp	r2, #1
 8008184:	d001      	beq.n	800818a <USBD_LL_Init+0xa>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
}
 8008186:	2000      	movs	r0, #0
 8008188:	4770      	bx	lr
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800818a:	ed9f 7b19 	vldr	d7, [pc, #100]	; 80081f0 <USBD_LL_Init+0x70>
  hpcd_USB_OTG_HS.pData = pdev;
 800818e:	4b1c      	ldr	r3, [pc, #112]	; (8008200 <USBD_LL_Init+0x80>)
  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8008190:	491c      	ldr	r1, [pc, #112]	; (8008204 <USBD_LL_Init+0x84>)
{
 8008192:	b510      	push	{r4, lr}
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8008194:	ed83 7b06 	vstr	d7, [r3, #24]
 8008198:	ed9f 7b17 	vldr	d7, [pc, #92]	; 80081f8 <USBD_LL_Init+0x78>
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 800819c:	2409      	movs	r4, #9
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = ENABLE;
 800819e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 80081a0:	6019      	str	r1, [r3, #0]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 80081a2:	2200      	movs	r2, #0
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 80081a4:	2102      	movs	r1, #2
  hpcd_USB_OTG_HS.pData = pdev;
 80081a6:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_HS;
 80081aa:	f8c0 32c8 	str.w	r3, [r0, #712]	; 0x2c8
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 80081ae:	4618      	mov	r0, r3
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 80081b0:	605c      	str	r4, [r3, #4]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 80081b2:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 80081b4:	635a      	str	r2, [r3, #52]	; 0x34
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 80081b6:	ed83 7b08 	vstr	d7, [r3, #32]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 80081ba:	e9c3 2103 	strd	r2, r1, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 80081be:	f7fa fd85 	bl	8002ccc <HAL_PCD_Init>
 80081c2:	b988      	cbnz	r0, 80081e8 <USBD_LL_Init+0x68>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 80081c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80081c8:	480d      	ldr	r0, [pc, #52]	; (8008200 <USBD_LL_Init+0x80>)
 80081ca:	f7fb fd5b 	bl	8003c84 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 80081ce:	2280      	movs	r2, #128	; 0x80
 80081d0:	2100      	movs	r1, #0
 80081d2:	480b      	ldr	r0, [pc, #44]	; (8008200 <USBD_LL_Init+0x80>)
 80081d4:	f7fb fd30 	bl	8003c38 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 80081d8:	f44f 72ba 	mov.w	r2, #372	; 0x174
 80081dc:	2101      	movs	r1, #1
 80081de:	4808      	ldr	r0, [pc, #32]	; (8008200 <USBD_LL_Init+0x80>)
 80081e0:	f7fb fd2a 	bl	8003c38 <HAL_PCDEx_SetTxFiFo>
}
 80081e4:	2000      	movs	r0, #0
 80081e6:	bd10      	pop	{r4, pc}
    Error_Handler( );
 80081e8:	f7f8 fcfc 	bl	8000be4 <Error_Handler>
 80081ec:	e7ea      	b.n	80081c4 <USBD_LL_Init+0x44>
 80081ee:	bf00      	nop
 80081f0:	00000002 	.word	0x00000002
	...
 8008200:	24007ef0 	.word	0x24007ef0
 8008204:	40040000 	.word	0x40040000

08008208 <USBD_LL_Start>:
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_Start(pdev->pData);
 8008208:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
{
 800820c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 800820e:	f7fa fdf3 	bl	8002df8 <HAL_PCD_Start>
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 8008212:	2803      	cmp	r0, #3
 8008214:	d802      	bhi.n	800821c <USBD_LL_Start+0x14>
 8008216:	4b02      	ldr	r3, [pc, #8]	; (8008220 <USBD_LL_Start+0x18>)
 8008218:	5c18      	ldrb	r0, [r3, r0]
}
 800821a:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_Start(pdev->pData);
 800821c:	2003      	movs	r0, #3
}
 800821e:	bd08      	pop	{r3, pc}
 8008220:	0800cad0 	.word	0x0800cad0

08008224 <USBD_LL_OpenEP>:
{
 8008224:	4694      	mov	ip, r2
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008226:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
{
 800822a:	461a      	mov	r2, r3
 800822c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800822e:	4663      	mov	r3, ip
 8008230:	f7fb fbc0 	bl	80039b4 <HAL_PCD_EP_Open>
  switch (hal_status)
 8008234:	2803      	cmp	r0, #3
 8008236:	d802      	bhi.n	800823e <USBD_LL_OpenEP+0x1a>
 8008238:	4b02      	ldr	r3, [pc, #8]	; (8008244 <USBD_LL_OpenEP+0x20>)
 800823a:	5c18      	ldrb	r0, [r3, r0]
}
 800823c:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800823e:	2003      	movs	r0, #3
}
 8008240:	bd08      	pop	{r3, pc}
 8008242:	bf00      	nop
 8008244:	0800cad0 	.word	0x0800cad0

08008248 <USBD_LL_CloseEP>:
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008248:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
{
 800824c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800824e:	f7fb fbef 	bl	8003a30 <HAL_PCD_EP_Close>
  switch (hal_status)
 8008252:	2803      	cmp	r0, #3
 8008254:	d802      	bhi.n	800825c <USBD_LL_CloseEP+0x14>
 8008256:	4b02      	ldr	r3, [pc, #8]	; (8008260 <USBD_LL_CloseEP+0x18>)
 8008258:	5c18      	ldrb	r0, [r3, r0]
}
 800825a:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800825c:	2003      	movs	r0, #3
}
 800825e:	bd08      	pop	{r3, pc}
 8008260:	0800cad0 	.word	0x0800cad0

08008264 <USBD_LL_StallEP>:
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008264:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
{
 8008268:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800826a:	f7fb fc65 	bl	8003b38 <HAL_PCD_EP_SetStall>
  switch (hal_status)
 800826e:	2803      	cmp	r0, #3
 8008270:	d802      	bhi.n	8008278 <USBD_LL_StallEP+0x14>
 8008272:	4b02      	ldr	r3, [pc, #8]	; (800827c <USBD_LL_StallEP+0x18>)
 8008274:	5c18      	ldrb	r0, [r3, r0]
}
 8008276:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008278:	2003      	movs	r0, #3
}
 800827a:	bd08      	pop	{r3, pc}
 800827c:	0800cad0 	.word	0x0800cad0

08008280 <USBD_LL_ClearStallEP>:
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008280:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
{
 8008284:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008286:	f7fb fc9b 	bl	8003bc0 <HAL_PCD_EP_ClrStall>
  switch (hal_status)
 800828a:	2803      	cmp	r0, #3
 800828c:	d802      	bhi.n	8008294 <USBD_LL_ClearStallEP+0x14>
 800828e:	4b02      	ldr	r3, [pc, #8]	; (8008298 <USBD_LL_ClearStallEP+0x18>)
 8008290:	5c18      	ldrb	r0, [r3, r0]
}
 8008292:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008294:	2003      	movs	r0, #3
}
 8008296:	bd08      	pop	{r3, pc}
 8008298:	0800cad0 	.word	0x0800cad0

0800829c <USBD_LL_IsStallEP>:
  if((ep_addr & 0x80) == 0x80)
 800829c:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800829e:	f8d0 32c8 	ldr.w	r3, [r0, #712]	; 0x2c8
  if((ep_addr & 0x80) == 0x80)
 80082a2:	d406      	bmi.n	80082b2 <USBD_LL_IsStallEP+0x16>
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80082a4:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 80082a8:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80082ac:	f893 027e 	ldrb.w	r0, [r3, #638]	; 0x27e
}
 80082b0:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80082b2:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 80082b6:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 80082ba:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80082be:	f893 003e 	ldrb.w	r0, [r3, #62]	; 0x3e
 80082c2:	4770      	bx	lr

080082c4 <USBD_LL_SetUSBAddress>:
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80082c4:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
{
 80082c8:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80082ca:	f7fb fb5d 	bl	8003988 <HAL_PCD_SetAddress>
  switch (hal_status)
 80082ce:	2803      	cmp	r0, #3
 80082d0:	d802      	bhi.n	80082d8 <USBD_LL_SetUSBAddress+0x14>
 80082d2:	4b02      	ldr	r3, [pc, #8]	; (80082dc <USBD_LL_SetUSBAddress+0x18>)
 80082d4:	5c18      	ldrb	r0, [r3, r0]
}
 80082d6:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80082d8:	2003      	movs	r0, #3
}
 80082da:	bd08      	pop	{r3, pc}
 80082dc:	0800cad0 	.word	0x0800cad0

080082e0 <USBD_LL_Transmit>:
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80082e0:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
{
 80082e4:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80082e6:	f7fb fc05 	bl	8003af4 <HAL_PCD_EP_Transmit>
  switch (hal_status)
 80082ea:	2803      	cmp	r0, #3
 80082ec:	d802      	bhi.n	80082f4 <USBD_LL_Transmit+0x14>
 80082ee:	4b02      	ldr	r3, [pc, #8]	; (80082f8 <USBD_LL_Transmit+0x18>)
 80082f0:	5c18      	ldrb	r0, [r3, r0]
}
 80082f2:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80082f4:	2003      	movs	r0, #3
}
 80082f6:	bd08      	pop	{r3, pc}
 80082f8:	0800cad0 	.word	0x0800cad0

080082fc <USBD_LL_PrepareReceive>:
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80082fc:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
{
 8008300:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008302:	f7fb fbcb 	bl	8003a9c <HAL_PCD_EP_Receive>
  switch (hal_status)
 8008306:	2803      	cmp	r0, #3
 8008308:	d802      	bhi.n	8008310 <USBD_LL_PrepareReceive+0x14>
 800830a:	4b02      	ldr	r3, [pc, #8]	; (8008314 <USBD_LL_PrepareReceive+0x18>)
 800830c:	5c18      	ldrb	r0, [r3, r0]
}
 800830e:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008310:	2003      	movs	r0, #3
}
 8008312:	bd08      	pop	{r3, pc}
 8008314:	0800cad0 	.word	0x0800cad0

08008318 <USBD_LL_GetRxDataSize>:
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008318:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
 800831c:	f7fb bbe0 	b.w	8003ae0 <HAL_PCD_EP_GetRxCount>

08008320 <USBD_static_malloc>:
}
 8008320:	4800      	ldr	r0, [pc, #0]	; (8008324 <USBD_static_malloc+0x4>)
 8008322:	4770      	bx	lr
 8008324:	240083fc 	.word	0x240083fc

08008328 <USBD_static_free>:
}
 8008328:	4770      	bx	lr
 800832a:	bf00      	nop

0800832c <arm_q15_to_float>:
 800832c:	b470      	push	{r4, r5, r6}
 800832e:	0896      	lsrs	r6, r2, #2
 8008330:	d038      	beq.n	80083a4 <arm_q15_to_float+0x78>
 8008332:	f100 0408 	add.w	r4, r0, #8
 8008336:	f101 0310 	add.w	r3, r1, #16
 800833a:	4635      	mov	r5, r6
 800833c:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 80083f8 <arm_q15_to_float+0xcc>
 8008340:	f934 cc08 	ldrsh.w	ip, [r4, #-8]
 8008344:	3d01      	subs	r5, #1
 8008346:	f104 0408 	add.w	r4, r4, #8
 800834a:	f103 0310 	add.w	r3, r3, #16
 800834e:	ee07 ca90 	vmov	s15, ip
 8008352:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008356:	ee67 7a87 	vmul.f32	s15, s15, s14
 800835a:	ed43 7a08 	vstr	s15, [r3, #-32]	; 0xffffffe0
 800835e:	f934 cc0e 	ldrsh.w	ip, [r4, #-14]
 8008362:	ee07 ca90 	vmov	s15, ip
 8008366:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800836a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800836e:	ed43 7a07 	vstr	s15, [r3, #-28]	; 0xffffffe4
 8008372:	f934 cc0c 	ldrsh.w	ip, [r4, #-12]
 8008376:	ee07 ca90 	vmov	s15, ip
 800837a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800837e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008382:	ed43 7a06 	vstr	s15, [r3, #-24]	; 0xffffffe8
 8008386:	f934 cc0a 	ldrsh.w	ip, [r4, #-10]
 800838a:	ee07 ca90 	vmov	s15, ip
 800838e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008392:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008396:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 800839a:	d1d1      	bne.n	8008340 <arm_q15_to_float+0x14>
 800839c:	eb01 1106 	add.w	r1, r1, r6, lsl #4
 80083a0:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
 80083a4:	f012 0203 	ands.w	r2, r2, #3
 80083a8:	d023      	beq.n	80083f2 <arm_q15_to_float+0xc6>
 80083aa:	f9b0 3000 	ldrsh.w	r3, [r0]
 80083ae:	3a01      	subs	r2, #1
 80083b0:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80083f8 <arm_q15_to_float+0xcc>
 80083b4:	ee07 3a90 	vmov	s15, r3
 80083b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80083bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80083c0:	edc1 7a00 	vstr	s15, [r1]
 80083c4:	d015      	beq.n	80083f2 <arm_q15_to_float+0xc6>
 80083c6:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 80083ca:	2a01      	cmp	r2, #1
 80083cc:	ee07 3a90 	vmov	s15, r3
 80083d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80083d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80083d8:	edc1 7a01 	vstr	s15, [r1, #4]
 80083dc:	d009      	beq.n	80083f2 <arm_q15_to_float+0xc6>
 80083de:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80083e2:	ee07 3a90 	vmov	s15, r3
 80083e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80083ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80083ee:	edc1 7a02 	vstr	s15, [r1, #8]
 80083f2:	bc70      	pop	{r4, r5, r6}
 80083f4:	4770      	bx	lr
 80083f6:	bf00      	nop
 80083f8:	38000000 	.word	0x38000000

080083fc <arm_float_to_q15>:
 80083fc:	b4f0      	push	{r4, r5, r6, r7}
 80083fe:	0897      	lsrs	r7, r2, #2
 8008400:	d063      	beq.n	80084ca <arm_float_to_q15+0xce>
 8008402:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8008406:	f100 0410 	add.w	r4, r0, #16
 800840a:	eefe 5a00 	vmov.f32	s11, #224	; 0xbf000000 -0.5
 800840e:	f101 0508 	add.w	r5, r1, #8
 8008412:	463e      	mov	r6, r7
 8008414:	eddf 6a51 	vldr	s13, [pc, #324]	; 800855c <arm_float_to_q15+0x160>
 8008418:	ed54 7a04 	vldr	s15, [r4, #-16]
 800841c:	3508      	adds	r5, #8
 800841e:	3410      	adds	r4, #16
 8008420:	ee27 7aa6 	vmul.f32	s14, s15, s13
 8008424:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8008428:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800842c:	fe76 7a25 	vselgt.f32	s15, s12, s11
 8008430:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008434:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008438:	ee17 3a90 	vmov	r3, s15
 800843c:	f303 030f 	ssat	r3, #16, r3
 8008440:	f825 3c10 	strh.w	r3, [r5, #-16]
 8008444:	ed54 7a07 	vldr	s15, [r4, #-28]	; 0xffffffe4
 8008448:	ee27 7aa6 	vmul.f32	s14, s15, s13
 800844c:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8008450:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008454:	fe76 7a25 	vselgt.f32	s15, s12, s11
 8008458:	ee77 7a87 	vadd.f32	s15, s15, s14
 800845c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008460:	ee17 3a90 	vmov	r3, s15
 8008464:	f303 030f 	ssat	r3, #16, r3
 8008468:	f825 3c0e 	strh.w	r3, [r5, #-14]
 800846c:	ed54 7a06 	vldr	s15, [r4, #-24]	; 0xffffffe8
 8008470:	ee27 7aa6 	vmul.f32	s14, s15, s13
 8008474:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8008478:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800847c:	fe76 7a25 	vselgt.f32	s15, s12, s11
 8008480:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008484:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008488:	ee17 3a90 	vmov	r3, s15
 800848c:	f303 030f 	ssat	r3, #16, r3
 8008490:	f825 3c0c 	strh.w	r3, [r5, #-12]
 8008494:	ed54 7a05 	vldr	s15, [r4, #-20]	; 0xffffffec
 8008498:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800849c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80084a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084a4:	bfcc      	ite	gt
 80084a6:	ee77 7a86 	vaddgt.f32	s15, s15, s12
 80084aa:	ee77 7ac6 	vsuble.f32	s15, s15, s12
 80084ae:	3e01      	subs	r6, #1
 80084b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80084b4:	ee17 3a90 	vmov	r3, s15
 80084b8:	f303 030f 	ssat	r3, #16, r3
 80084bc:	f825 3c0a 	strh.w	r3, [r5, #-10]
 80084c0:	d1aa      	bne.n	8008418 <arm_float_to_q15+0x1c>
 80084c2:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 80084c6:	eb00 1007 	add.w	r0, r0, r7, lsl #4
 80084ca:	f012 0203 	ands.w	r2, r2, #3
 80084ce:	d042      	beq.n	8008556 <arm_float_to_q15+0x15a>
 80084d0:	edd0 7a00 	vldr	s15, [r0]
 80084d4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80084d8:	eddf 5a20 	vldr	s11, [pc, #128]	; 800855c <arm_float_to_q15+0x160>
 80084dc:	eebe 6a00 	vmov.f32	s12, #224	; 0xbf000000 -0.5
 80084e0:	ee67 6aa5 	vmul.f32	s13, s15, s11
 80084e4:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 80084e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084ec:	fe77 7a06 	vselgt.f32	s15, s14, s12
 80084f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084f4:	3a01      	subs	r2, #1
 80084f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80084fa:	ee17 3a90 	vmov	r3, s15
 80084fe:	f303 030f 	ssat	r3, #16, r3
 8008502:	800b      	strh	r3, [r1, #0]
 8008504:	d027      	beq.n	8008556 <arm_float_to_q15+0x15a>
 8008506:	edd0 7a01 	vldr	s15, [r0, #4]
 800850a:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800850e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008512:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008516:	fe77 6a06 	vselgt.f32	s13, s14, s12
 800851a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800851e:	2a01      	cmp	r2, #1
 8008520:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008524:	ee17 3a90 	vmov	r3, s15
 8008528:	f303 030f 	ssat	r3, #16, r3
 800852c:	804b      	strh	r3, [r1, #2]
 800852e:	d012      	beq.n	8008556 <arm_float_to_q15+0x15a>
 8008530:	edd0 7a02 	vldr	s15, [r0, #8]
 8008534:	ee67 5aa5 	vmul.f32	s11, s15, s11
 8008538:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 800853c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008540:	fe37 7a06 	vselgt.f32	s14, s14, s12
 8008544:	ee37 7a25 	vadd.f32	s14, s14, s11
 8008548:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800854c:	ee17 3a10 	vmov	r3, s14
 8008550:	f303 030f 	ssat	r3, #16, r3
 8008554:	808b      	strh	r3, [r1, #4]
 8008556:	bcf0      	pop	{r4, r5, r6, r7}
 8008558:	4770      	bx	lr
 800855a:	bf00      	nop
 800855c:	47000000 	.word	0x47000000

08008560 <arm_rfft_32_fast_init_f32>:
 8008560:	b180      	cbz	r0, 8008584 <arm_rfft_32_fast_init_f32+0x24>
 8008562:	4603      	mov	r3, r0
 8008564:	2220      	movs	r2, #32
 8008566:	2010      	movs	r0, #16
 8008568:	4908      	ldr	r1, [pc, #32]	; (800858c <arm_rfft_32_fast_init_f32+0x2c>)
 800856a:	b430      	push	{r4, r5}
 800856c:	2514      	movs	r5, #20
 800856e:	4c08      	ldr	r4, [pc, #32]	; (8008590 <arm_rfft_32_fast_init_f32+0x30>)
 8008570:	821a      	strh	r2, [r3, #16]
 8008572:	4a08      	ldr	r2, [pc, #32]	; (8008594 <arm_rfft_32_fast_init_f32+0x34>)
 8008574:	8018      	strh	r0, [r3, #0]
 8008576:	2000      	movs	r0, #0
 8008578:	819d      	strh	r5, [r3, #12]
 800857a:	615a      	str	r2, [r3, #20]
 800857c:	e9c3 1401 	strd	r1, r4, [r3, #4]
 8008580:	bc30      	pop	{r4, r5}
 8008582:	4770      	bx	lr
 8008584:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008588:	4770      	bx	lr
 800858a:	bf00      	nop
 800858c:	080123bc 	.word	0x080123bc
 8008590:	0800da84 	.word	0x0800da84
 8008594:	0801b13c 	.word	0x0801b13c

08008598 <arm_rfft_64_fast_init_f32>:
 8008598:	b180      	cbz	r0, 80085bc <arm_rfft_64_fast_init_f32+0x24>
 800859a:	4603      	mov	r3, r0
 800859c:	2240      	movs	r2, #64	; 0x40
 800859e:	2020      	movs	r0, #32
 80085a0:	4908      	ldr	r1, [pc, #32]	; (80085c4 <arm_rfft_64_fast_init_f32+0x2c>)
 80085a2:	b430      	push	{r4, r5}
 80085a4:	2530      	movs	r5, #48	; 0x30
 80085a6:	4c08      	ldr	r4, [pc, #32]	; (80085c8 <arm_rfft_64_fast_init_f32+0x30>)
 80085a8:	821a      	strh	r2, [r3, #16]
 80085aa:	4a08      	ldr	r2, [pc, #32]	; (80085cc <arm_rfft_64_fast_init_f32+0x34>)
 80085ac:	8018      	strh	r0, [r3, #0]
 80085ae:	2000      	movs	r0, #0
 80085b0:	819d      	strh	r5, [r3, #12]
 80085b2:	615a      	str	r2, [r3, #20]
 80085b4:	e9c3 1401 	strd	r1, r4, [r3, #4]
 80085b8:	bc30      	pop	{r4, r5}
 80085ba:	4770      	bx	lr
 80085bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80085c0:	4770      	bx	lr
 80085c2:	bf00      	nop
 80085c4:	08016c3c 	.word	0x08016c3c
 80085c8:	0800fbdc 	.word	0x0800fbdc
 80085cc:	0801f9bc 	.word	0x0801f9bc

080085d0 <arm_rfft_256_fast_init_f32>:
 80085d0:	b188      	cbz	r0, 80085f6 <arm_rfft_256_fast_init_f32+0x26>
 80085d2:	4603      	mov	r3, r0
 80085d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80085d8:	2080      	movs	r0, #128	; 0x80
 80085da:	4908      	ldr	r1, [pc, #32]	; (80085fc <arm_rfft_256_fast_init_f32+0x2c>)
 80085dc:	b430      	push	{r4, r5}
 80085de:	25d0      	movs	r5, #208	; 0xd0
 80085e0:	4c07      	ldr	r4, [pc, #28]	; (8008600 <arm_rfft_256_fast_init_f32+0x30>)
 80085e2:	821a      	strh	r2, [r3, #16]
 80085e4:	4a07      	ldr	r2, [pc, #28]	; (8008604 <arm_rfft_256_fast_init_f32+0x34>)
 80085e6:	8018      	strh	r0, [r3, #0]
 80085e8:	2000      	movs	r0, #0
 80085ea:	819d      	strh	r5, [r3, #12]
 80085ec:	615a      	str	r2, [r3, #20]
 80085ee:	e9c3 1401 	strd	r1, r4, [r3, #4]
 80085f2:	bc30      	pop	{r4, r5}
 80085f4:	4770      	bx	lr
 80085f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80085fa:	4770      	bx	lr
 80085fc:	08011fbc 	.word	0x08011fbc
 8008600:	0800d8e4 	.word	0x0800d8e4
 8008604:	0801ad3c 	.word	0x0801ad3c

08008608 <arm_rfft_512_fast_init_f32>:
 8008608:	b198      	cbz	r0, 8008632 <arm_rfft_512_fast_init_f32+0x2a>
 800860a:	4603      	mov	r3, r0
 800860c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008610:	f44f 7080 	mov.w	r0, #256	; 0x100
 8008614:	4908      	ldr	r1, [pc, #32]	; (8008638 <arm_rfft_512_fast_init_f32+0x30>)
 8008616:	b430      	push	{r4, r5}
 8008618:	f44f 75dc 	mov.w	r5, #440	; 0x1b8
 800861c:	4c07      	ldr	r4, [pc, #28]	; (800863c <arm_rfft_512_fast_init_f32+0x34>)
 800861e:	821a      	strh	r2, [r3, #16]
 8008620:	4a07      	ldr	r2, [pc, #28]	; (8008640 <arm_rfft_512_fast_init_f32+0x38>)
 8008622:	8018      	strh	r0, [r3, #0]
 8008624:	2000      	movs	r0, #0
 8008626:	819d      	strh	r5, [r3, #12]
 8008628:	615a      	str	r2, [r3, #20]
 800862a:	e9c3 1401 	strd	r1, r4, [r3, #4]
 800862e:	bc30      	pop	{r4, r5}
 8008630:	4770      	bx	lr
 8008632:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008636:	4770      	bx	lr
 8008638:	0801643c 	.word	0x0801643c
 800863c:	0800f86c 	.word	0x0800f86c
 8008640:	0801f1bc 	.word	0x0801f1bc

08008644 <arm_rfft_1024_fast_init_f32>:
 8008644:	b198      	cbz	r0, 800866e <arm_rfft_1024_fast_init_f32+0x2a>
 8008646:	4603      	mov	r3, r0
 8008648:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800864c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8008650:	4908      	ldr	r1, [pc, #32]	; (8008674 <arm_rfft_1024_fast_init_f32+0x30>)
 8008652:	b430      	push	{r4, r5}
 8008654:	f44f 75e0 	mov.w	r5, #448	; 0x1c0
 8008658:	4c07      	ldr	r4, [pc, #28]	; (8008678 <arm_rfft_1024_fast_init_f32+0x34>)
 800865a:	821a      	strh	r2, [r3, #16]
 800865c:	4a07      	ldr	r2, [pc, #28]	; (800867c <arm_rfft_1024_fast_init_f32+0x38>)
 800865e:	8018      	strh	r0, [r3, #0]
 8008660:	2000      	movs	r0, #0
 8008662:	819d      	strh	r5, [r3, #12]
 8008664:	615a      	str	r2, [r3, #20]
 8008666:	e9c3 1401 	strd	r1, r4, [r3, #4]
 800866a:	bc30      	pop	{r4, r5}
 800866c:	4770      	bx	lr
 800866e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008672:	4770      	bx	lr
 8008674:	08016d3c 	.word	0x08016d3c
 8008678:	0800fc3c 	.word	0x0800fc3c
 800867c:	08017d3c 	.word	0x08017d3c

08008680 <arm_rfft_2048_fast_init_f32>:
 8008680:	b198      	cbz	r0, 80086aa <arm_rfft_2048_fast_init_f32+0x2a>
 8008682:	4603      	mov	r3, r0
 8008684:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008688:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800868c:	4908      	ldr	r1, [pc, #32]	; (80086b0 <arm_rfft_2048_fast_init_f32+0x30>)
 800868e:	b430      	push	{r4, r5}
 8008690:	f44f 65e1 	mov.w	r5, #1800	; 0x708
 8008694:	4c07      	ldr	r4, [pc, #28]	; (80086b4 <arm_rfft_2048_fast_init_f32+0x34>)
 8008696:	821a      	strh	r2, [r3, #16]
 8008698:	4a07      	ldr	r2, [pc, #28]	; (80086b8 <arm_rfft_2048_fast_init_f32+0x38>)
 800869a:	8018      	strh	r0, [r3, #0]
 800869c:	2000      	movs	r0, #0
 800869e:	819d      	strh	r5, [r3, #12]
 80086a0:	615a      	str	r2, [r3, #20]
 80086a2:	e9c3 1401 	strd	r1, r4, [r3, #4]
 80086a6:	bc30      	pop	{r4, r5}
 80086a8:	4770      	bx	lr
 80086aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80086ae:	4770      	bx	lr
 80086b0:	0800ffbc 	.word	0x0800ffbc
 80086b4:	0800cad4 	.word	0x0800cad4
 80086b8:	08018d3c 	.word	0x08018d3c

080086bc <arm_rfft_4096_fast_init_f32>:
 80086bc:	b198      	cbz	r0, 80086e6 <arm_rfft_4096_fast_init_f32+0x2a>
 80086be:	4603      	mov	r3, r0
 80086c0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80086c4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80086c8:	4908      	ldr	r1, [pc, #32]	; (80086ec <arm_rfft_4096_fast_init_f32+0x30>)
 80086ca:	b430      	push	{r4, r5}
 80086cc:	f44f 656e 	mov.w	r5, #3808	; 0xee0
 80086d0:	4c07      	ldr	r4, [pc, #28]	; (80086f0 <arm_rfft_4096_fast_init_f32+0x34>)
 80086d2:	821a      	strh	r2, [r3, #16]
 80086d4:	4a07      	ldr	r2, [pc, #28]	; (80086f4 <arm_rfft_4096_fast_init_f32+0x38>)
 80086d6:	8018      	strh	r0, [r3, #0]
 80086d8:	2000      	movs	r0, #0
 80086da:	819d      	strh	r5, [r3, #12]
 80086dc:	615a      	str	r2, [r3, #20]
 80086de:	e9c3 1401 	strd	r1, r4, [r3, #4]
 80086e2:	bc30      	pop	{r4, r5}
 80086e4:	4770      	bx	lr
 80086e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80086ea:	4770      	bx	lr
 80086ec:	0801243c 	.word	0x0801243c
 80086f0:	0800daac 	.word	0x0800daac
 80086f4:	0801b1bc 	.word	0x0801b1bc

080086f8 <arm_rfft_fast_init_f32>:
 80086f8:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80086fc:	d01f      	beq.n	800873e <arm_rfft_fast_init_f32+0x46>
 80086fe:	d90b      	bls.n	8008718 <arm_rfft_fast_init_f32+0x20>
 8008700:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8008704:	d019      	beq.n	800873a <arm_rfft_fast_init_f32+0x42>
 8008706:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800870a:	d012      	beq.n	8008732 <arm_rfft_fast_init_f32+0x3a>
 800870c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008710:	d00d      	beq.n	800872e <arm_rfft_fast_init_f32+0x36>
 8008712:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008716:	4770      	bx	lr
 8008718:	2940      	cmp	r1, #64	; 0x40
 800871a:	d00c      	beq.n	8008736 <arm_rfft_fast_init_f32+0x3e>
 800871c:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8008720:	d003      	beq.n	800872a <arm_rfft_fast_init_f32+0x32>
 8008722:	2920      	cmp	r1, #32
 8008724:	d1f5      	bne.n	8008712 <arm_rfft_fast_init_f32+0x1a>
 8008726:	4b07      	ldr	r3, [pc, #28]	; (8008744 <arm_rfft_fast_init_f32+0x4c>)
 8008728:	4718      	bx	r3
 800872a:	4b07      	ldr	r3, [pc, #28]	; (8008748 <arm_rfft_fast_init_f32+0x50>)
 800872c:	4718      	bx	r3
 800872e:	4b07      	ldr	r3, [pc, #28]	; (800874c <arm_rfft_fast_init_f32+0x54>)
 8008730:	4718      	bx	r3
 8008732:	4b07      	ldr	r3, [pc, #28]	; (8008750 <arm_rfft_fast_init_f32+0x58>)
 8008734:	4718      	bx	r3
 8008736:	4b07      	ldr	r3, [pc, #28]	; (8008754 <arm_rfft_fast_init_f32+0x5c>)
 8008738:	e7f6      	b.n	8008728 <arm_rfft_fast_init_f32+0x30>
 800873a:	4b07      	ldr	r3, [pc, #28]	; (8008758 <arm_rfft_fast_init_f32+0x60>)
 800873c:	e7f4      	b.n	8008728 <arm_rfft_fast_init_f32+0x30>
 800873e:	4b07      	ldr	r3, [pc, #28]	; (800875c <arm_rfft_fast_init_f32+0x64>)
 8008740:	e7f2      	b.n	8008728 <arm_rfft_fast_init_f32+0x30>
 8008742:	bf00      	nop
 8008744:	08008561 	.word	0x08008561
 8008748:	080085d1 	.word	0x080085d1
 800874c:	08008645 	.word	0x08008645
 8008750:	080086bd 	.word	0x080086bd
 8008754:	08008599 	.word	0x08008599
 8008758:	08008681 	.word	0x08008681
 800875c:	08008609 	.word	0x08008609

08008760 <stage_rfft_f32>:
 8008760:	b470      	push	{r4, r5, r6}
 8008762:	edd1 7a00 	vldr	s15, [r1]
 8008766:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800876a:	ed91 7a01 	vldr	s14, [r1, #4]
 800876e:	f101 0510 	add.w	r5, r1, #16
 8008772:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8008776:	8806      	ldrh	r6, [r0, #0]
 8008778:	ee37 7a07 	vadd.f32	s14, s14, s14
 800877c:	6943      	ldr	r3, [r0, #20]
 800877e:	1e70      	subs	r0, r6, #1
 8008780:	eeb0 4a46 	vmov.f32	s8, s12
 8008784:	f102 0410 	add.w	r4, r2, #16
 8008788:	3310      	adds	r3, #16
 800878a:	ee77 6a87 	vadd.f32	s13, s15, s14
 800878e:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8008792:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008796:	3908      	subs	r1, #8
 8008798:	ee26 7a86 	vmul.f32	s14, s13, s12
 800879c:	ee67 7a86 	vmul.f32	s15, s15, s12
 80087a0:	ed82 7a00 	vstr	s14, [r2]
 80087a4:	edc2 7a01 	vstr	s15, [r2, #4]
 80087a8:	ed15 6a02 	vldr	s12, [r5, #-8]
 80087ac:	3801      	subs	r0, #1
 80087ae:	ed91 7a02 	vldr	s14, [r1, #8]
 80087b2:	f105 0508 	add.w	r5, r5, #8
 80087b6:	ed53 6a02 	vldr	s13, [r3, #-8]
 80087ba:	f1a1 0108 	sub.w	r1, r1, #8
 80087be:	ee77 5a46 	vsub.f32	s11, s14, s12
 80087c2:	edd1 4a05 	vldr	s9, [r1, #20]
 80087c6:	ed55 7a03 	vldr	s15, [r5, #-12]
 80087ca:	ee37 7a06 	vadd.f32	s14, s14, s12
 80087ce:	ed13 6a01 	vldr	s12, [r3, #-4]
 80087d2:	f104 0408 	add.w	r4, r4, #8
 80087d6:	ee66 3aa5 	vmul.f32	s7, s13, s11
 80087da:	f103 0308 	add.w	r3, r3, #8
 80087de:	ee34 5aa7 	vadd.f32	s10, s9, s15
 80087e2:	ee66 5a25 	vmul.f32	s11, s12, s11
 80087e6:	ee77 7ae4 	vsub.f32	s15, s15, s9
 80087ea:	ee37 7a23 	vadd.f32	s14, s14, s7
 80087ee:	ee66 6a85 	vmul.f32	s13, s13, s10
 80087f2:	ee26 6a05 	vmul.f32	s12, s12, s10
 80087f6:	ee77 7aa5 	vadd.f32	s15, s15, s11
 80087fa:	ee37 7a06 	vadd.f32	s14, s14, s12
 80087fe:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008802:	ee27 7a04 	vmul.f32	s14, s14, s8
 8008806:	ee67 7a84 	vmul.f32	s15, s15, s8
 800880a:	ed04 7a04 	vstr	s14, [r4, #-16]
 800880e:	ed44 7a03 	vstr	s15, [r4, #-12]
 8008812:	d1c9      	bne.n	80087a8 <stage_rfft_f32+0x48>
 8008814:	bc70      	pop	{r4, r5, r6}
 8008816:	4770      	bx	lr

08008818 <merge_rfft_f32>:
 8008818:	b410      	push	{r4}
 800881a:	edd1 7a00 	vldr	s15, [r1]
 800881e:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 8008822:	edd1 6a01 	vldr	s13, [r1, #4]
 8008826:	8804      	ldrh	r4, [r0, #0]
 8008828:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800882c:	6940      	ldr	r0, [r0, #20]
 800882e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008832:	3c01      	subs	r4, #1
 8008834:	ee27 7a04 	vmul.f32	s14, s14, s8
 8008838:	ee67 7a84 	vmul.f32	s15, s15, s8
 800883c:	ed82 7a00 	vstr	s14, [r2]
 8008840:	edc2 7a01 	vstr	s15, [r2, #4]
 8008844:	b3dc      	cbz	r4, 80088be <merge_rfft_f32+0xa6>
 8008846:	00e3      	lsls	r3, r4, #3
 8008848:	3010      	adds	r0, #16
 800884a:	3210      	adds	r2, #16
 800884c:	3b08      	subs	r3, #8
 800884e:	440b      	add	r3, r1
 8008850:	3110      	adds	r1, #16
 8008852:	ed11 6a02 	vldr	s12, [r1, #-8]
 8008856:	3c01      	subs	r4, #1
 8008858:	ed93 7a02 	vldr	s14, [r3, #8]
 800885c:	f101 0108 	add.w	r1, r1, #8
 8008860:	ed50 6a02 	vldr	s13, [r0, #-8]
 8008864:	f1a3 0308 	sub.w	r3, r3, #8
 8008868:	ee76 5a47 	vsub.f32	s11, s12, s14
 800886c:	edd3 4a05 	vldr	s9, [r3, #20]
 8008870:	ed51 7a03 	vldr	s15, [r1, #-12]
 8008874:	ee37 7a06 	vadd.f32	s14, s14, s12
 8008878:	ed10 6a01 	vldr	s12, [r0, #-4]
 800887c:	f102 0208 	add.w	r2, r2, #8
 8008880:	ee66 3aa5 	vmul.f32	s7, s13, s11
 8008884:	f100 0008 	add.w	r0, r0, #8
 8008888:	ee34 5aa7 	vadd.f32	s10, s9, s15
 800888c:	ee66 5a25 	vmul.f32	s11, s12, s11
 8008890:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8008894:	ee37 7a63 	vsub.f32	s14, s14, s7
 8008898:	ee66 6a85 	vmul.f32	s13, s13, s10
 800889c:	ee26 6a05 	vmul.f32	s12, s12, s10
 80088a0:	ee77 7aa5 	vadd.f32	s15, s15, s11
 80088a4:	ee37 7a46 	vsub.f32	s14, s14, s12
 80088a8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80088ac:	ee27 7a04 	vmul.f32	s14, s14, s8
 80088b0:	ee67 7a84 	vmul.f32	s15, s15, s8
 80088b4:	ed02 7a04 	vstr	s14, [r2, #-16]
 80088b8:	ed42 7a03 	vstr	s15, [r2, #-12]
 80088bc:	d1c9      	bne.n	8008852 <merge_rfft_f32+0x3a>
 80088be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80088c2:	4770      	bx	lr

080088c4 <arm_rfft_fast_f32>:
 80088c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088c8:	8a05      	ldrh	r5, [r0, #16]
 80088ca:	4604      	mov	r4, r0
 80088cc:	4617      	mov	r7, r2
 80088ce:	461e      	mov	r6, r3
 80088d0:	086d      	lsrs	r5, r5, #1
 80088d2:	8005      	strh	r5, [r0, #0]
 80088d4:	b14b      	cbz	r3, 80088ea <arm_rfft_fast_f32+0x26>
 80088d6:	f7ff ff9f 	bl	8008818 <merge_rfft_f32>
 80088da:	4632      	mov	r2, r6
 80088dc:	4639      	mov	r1, r7
 80088de:	4620      	mov	r0, r4
 80088e0:	2301      	movs	r3, #1
 80088e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80088e6:	f000 bb35 	b.w	8008f54 <arm_cfft_f32>
 80088ea:	4688      	mov	r8, r1
 80088ec:	461a      	mov	r2, r3
 80088ee:	2301      	movs	r3, #1
 80088f0:	f000 fb30 	bl	8008f54 <arm_cfft_f32>
 80088f4:	463a      	mov	r2, r7
 80088f6:	4641      	mov	r1, r8
 80088f8:	4620      	mov	r0, r4
 80088fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80088fe:	f7ff bf2f 	b.w	8008760 <stage_rfft_f32>
 8008902:	bf00      	nop

08008904 <arm_cfft_radix8by2_f32>:
 8008904:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008908:	4607      	mov	r7, r0
 800890a:	4608      	mov	r0, r1
 800890c:	ed2d 8b06 	vpush	{d8-d10}
 8008910:	f8b7 c000 	ldrh.w	ip, [r7]
 8008914:	687a      	ldr	r2, [r7, #4]
 8008916:	ea4f 015c 	mov.w	r1, ip, lsr #1
 800891a:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 800891e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8008922:	f000 80ac 	beq.w	8008a7e <arm_cfft_radix8by2_f32+0x17a>
 8008926:	008c      	lsls	r4, r1, #2
 8008928:	f100 0310 	add.w	r3, r0, #16
 800892c:	3210      	adds	r2, #16
 800892e:	f108 0610 	add.w	r6, r8, #16
 8008932:	3410      	adds	r4, #16
 8008934:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 8008938:	1905      	adds	r5, r0, r4
 800893a:	4444      	add	r4, r8
 800893c:	ed16 7a04 	vldr	s14, [r6, #-16]
 8008940:	3310      	adds	r3, #16
 8008942:	ed53 4a08 	vldr	s9, [r3, #-32]	; 0xffffffe0
 8008946:	3510      	adds	r5, #16
 8008948:	ed56 0a03 	vldr	s1, [r6, #-12]
 800894c:	3210      	adds	r2, #16
 800894e:	ee74 9a87 	vadd.f32	s19, s9, s14
 8008952:	ed56 7a02 	vldr	s15, [r6, #-8]
 8008956:	ed56 2a01 	vldr	s5, [r6, #-4]
 800895a:	ee74 4ac7 	vsub.f32	s9, s9, s14
 800895e:	ed54 5a04 	vldr	s11, [r4, #-16]
 8008962:	3610      	adds	r6, #16
 8008964:	ed14 5a03 	vldr	s10, [r4, #-12]
 8008968:	3410      	adds	r4, #16
 800896a:	ed14 3a06 	vldr	s6, [r4, #-24]	; 0xffffffe8
 800896e:	ed13 2a05 	vldr	s4, [r3, #-20]	; 0xffffffec
 8008972:	ed55 6a08 	vldr	s13, [r5, #-32]	; 0xffffffe0
 8008976:	ed55 3a06 	vldr	s7, [r5, #-24]	; 0xffffffe8
 800897a:	ed15 4a05 	vldr	s8, [r5, #-20]	; 0xffffffec
 800897e:	ee36 9aa5 	vadd.f32	s18, s13, s11
 8008982:	ed14 6a05 	vldr	s12, [r4, #-20]	; 0xffffffec
 8008986:	ee33 8a83 	vadd.f32	s16, s7, s6
 800898a:	ed13 7a07 	vldr	s14, [r3, #-28]	; 0xffffffe4
 800898e:	ee75 5ae6 	vsub.f32	s11, s11, s13
 8008992:	ed53 1a06 	vldr	s3, [r3, #-24]	; 0xffffffe8
 8008996:	ee34 0a06 	vadd.f32	s0, s8, s12
 800899a:	ed15 1a07 	vldr	s2, [r5, #-28]	; 0xffffffe4
 800899e:	ee77 aa20 	vadd.f32	s21, s14, s1
 80089a2:	ed43 9a08 	vstr	s19, [r3, #-32]	; 0xffffffe0
 80089a6:	ee31 aaa7 	vadd.f32	s20, s3, s15
 80089aa:	ee72 9a22 	vadd.f32	s19, s4, s5
 80089ae:	ee71 8a05 	vadd.f32	s17, s2, s10
 80089b2:	ed43 aa07 	vstr	s21, [r3, #-28]	; 0xffffffe4
 80089b6:	ee37 7a60 	vsub.f32	s14, s14, s1
 80089ba:	ed03 aa06 	vstr	s20, [r3, #-24]	; 0xffffffe8
 80089be:	ee35 5a41 	vsub.f32	s10, s10, s2
 80089c2:	ed43 9a05 	vstr	s19, [r3, #-20]	; 0xffffffec
 80089c6:	ee36 6a44 	vsub.f32	s12, s12, s8
 80089ca:	ed05 9a08 	vstr	s18, [r5, #-32]	; 0xffffffe0
 80089ce:	ed45 8a07 	vstr	s17, [r5, #-28]	; 0xffffffe4
 80089d2:	ee71 1ae7 	vsub.f32	s3, s3, s15
 80089d6:	ed05 8a06 	vstr	s16, [r5, #-24]	; 0xffffffe8
 80089da:	ee72 7a62 	vsub.f32	s15, s4, s5
 80089de:	ed05 0a05 	vstr	s0, [r5, #-20]	; 0xffffffec
 80089e2:	ee73 2a63 	vsub.f32	s5, s6, s7
 80089e6:	ed12 4a08 	vldr	s8, [r2, #-32]	; 0xffffffe0
 80089ea:	4563      	cmp	r3, ip
 80089ec:	ed52 6a07 	vldr	s13, [r2, #-28]	; 0xffffffe4
 80089f0:	ee24 3a84 	vmul.f32	s6, s9, s8
 80089f4:	ee27 2a26 	vmul.f32	s4, s14, s13
 80089f8:	ee64 4aa6 	vmul.f32	s9, s9, s13
 80089fc:	ee65 3aa6 	vmul.f32	s7, s11, s13
 8008a00:	ee27 7a04 	vmul.f32	s14, s14, s8
 8008a04:	ee65 5a84 	vmul.f32	s11, s11, s8
 8008a08:	ee65 6a26 	vmul.f32	s13, s10, s13
 8008a0c:	ee25 5a04 	vmul.f32	s10, s10, s8
 8008a10:	ee37 7a64 	vsub.f32	s14, s14, s9
 8008a14:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8008a18:	ee33 4a02 	vadd.f32	s8, s6, s4
 8008a1c:	ee33 5ac5 	vsub.f32	s10, s7, s10
 8008a20:	ed06 7a07 	vstr	s14, [r6, #-28]	; 0xffffffe4
 8008a24:	ed06 4a08 	vstr	s8, [r6, #-32]	; 0xffffffe0
 8008a28:	ed04 5a08 	vstr	s10, [r4, #-32]	; 0xffffffe0
 8008a2c:	ed44 6a07 	vstr	s13, [r4, #-28]	; 0xffffffe4
 8008a30:	ed52 6a06 	vldr	s13, [r2, #-24]	; 0xffffffe8
 8008a34:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
 8008a38:	ee61 4aa6 	vmul.f32	s9, s3, s13
 8008a3c:	ee27 4a87 	vmul.f32	s8, s15, s14
 8008a40:	ee61 5a87 	vmul.f32	s11, s3, s14
 8008a44:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008a48:	ee22 5a87 	vmul.f32	s10, s5, s14
 8008a4c:	ee26 7a07 	vmul.f32	s14, s12, s14
 8008a50:	ee26 6a26 	vmul.f32	s12, s12, s13
 8008a54:	ee62 6aa6 	vmul.f32	s13, s5, s13
 8008a58:	ee74 4a84 	vadd.f32	s9, s9, s8
 8008a5c:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8008a60:	ee35 6a46 	vsub.f32	s12, s10, s12
 8008a64:	ee37 7a26 	vadd.f32	s14, s14, s13
 8008a68:	ed46 4a06 	vstr	s9, [r6, #-24]	; 0xffffffe8
 8008a6c:	ed46 7a05 	vstr	s15, [r6, #-20]	; 0xffffffec
 8008a70:	ed04 6a06 	vstr	s12, [r4, #-24]	; 0xffffffe8
 8008a74:	ed04 7a05 	vstr	s14, [r4, #-20]	; 0xffffffec
 8008a78:	f47f af60 	bne.w	800893c <arm_cfft_radix8by2_f32+0x38>
 8008a7c:	687a      	ldr	r2, [r7, #4]
 8008a7e:	b28c      	uxth	r4, r1
 8008a80:	2302      	movs	r3, #2
 8008a82:	4621      	mov	r1, r4
 8008a84:	f000 ff3a 	bl	80098fc <arm_radix8_butterfly_f32>
 8008a88:	4621      	mov	r1, r4
 8008a8a:	687a      	ldr	r2, [r7, #4]
 8008a8c:	4640      	mov	r0, r8
 8008a8e:	2302      	movs	r3, #2
 8008a90:	ecbd 8b06 	vpop	{d8-d10}
 8008a94:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a98:	f000 bf30 	b.w	80098fc <arm_radix8_butterfly_f32>

08008a9c <arm_cfft_radix8by4_f32>:
 8008a9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008aa0:	ed2d 8b04 	vpush	{d8-d9}
 8008aa4:	8804      	ldrh	r4, [r0, #0]
 8008aa6:	b08d      	sub	sp, #52	; 0x34
 8008aa8:	6842      	ldr	r2, [r0, #4]
 8008aaa:	460d      	mov	r5, r1
 8008aac:	0864      	lsrs	r4, r4, #1
 8008aae:	edd1 7a00 	vldr	s15, [r1]
 8008ab2:	edd1 5a01 	vldr	s11, [r1, #4]
 8008ab6:	00a3      	lsls	r3, r4, #2
 8008ab8:	18ce      	adds	r6, r1, r3
 8008aba:	18f7      	adds	r7, r6, r3
 8008abc:	ed96 7a00 	vldr	s14, [r6]
 8008ac0:	ed96 4a01 	vldr	s8, [r6, #4]
 8008ac4:	ed97 6a00 	vldr	s12, [r7]
 8008ac8:	edd7 4a01 	vldr	s9, [r7, #4]
 8008acc:	ee77 6a86 	vadd.f32	s13, s15, s12
 8008ad0:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8008ad4:	ee35 6aa4 	vadd.f32	s12, s11, s9
 8008ad8:	ee77 2a26 	vadd.f32	s5, s14, s13
 8008adc:	ee75 5ae4 	vsub.f32	s11, s11, s9
 8008ae0:	ee74 3a27 	vadd.f32	s7, s8, s15
 8008ae4:	ee76 4a44 	vsub.f32	s9, s12, s8
 8008ae8:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8008aec:	ee77 7ac4 	vsub.f32	s15, s15, s8
 8008af0:	ee35 4ac7 	vsub.f32	s8, s11, s14
 8008af4:	ee37 7a25 	vadd.f32	s14, s14, s11
 8008af8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008afc:	0860      	lsrs	r0, r4, #1
 8008afe:	f102 0408 	add.w	r4, r2, #8
 8008b02:	9405      	str	r4, [sp, #20]
 8008b04:	f102 0410 	add.w	r4, r2, #16
 8008b08:	9009      	str	r0, [sp, #36]	; 0x24
 8008b0a:	f1a0 0902 	sub.w	r9, r0, #2
 8008b0e:	9403      	str	r4, [sp, #12]
 8008b10:	18fc      	adds	r4, r7, r3
 8008b12:	f102 0018 	add.w	r0, r2, #24
 8008b16:	ed94 5a00 	vldr	s10, [r4]
 8008b1a:	ed94 3a01 	vldr	s6, [r4, #4]
 8008b1e:	ee72 2a85 	vadd.f32	s5, s5, s10
 8008b22:	9004      	str	r0, [sp, #16]
 8008b24:	ee73 3ac3 	vsub.f32	s7, s7, s6
 8008b28:	4620      	mov	r0, r4
 8008b2a:	ee76 6ac5 	vsub.f32	s13, s13, s10
 8008b2e:	9408      	str	r4, [sp, #32]
 8008b30:	ee12 ca90 	vmov	ip, s5
 8008b34:	ee74 5ac3 	vsub.f32	s11, s9, s6
 8008b38:	ee77 7a83 	vadd.f32	s15, s15, s6
 8008b3c:	f845 cb08 	str.w	ip, [r5], #8
 8008b40:	ee13 ca90 	vmov	ip, s7
 8008b44:	ed96 2a01 	vldr	s4, [r6, #4]
 8008b48:	ee74 4a05 	vadd.f32	s9, s8, s10
 8008b4c:	edd4 2a01 	vldr	s5, [r4, #4]
 8008b50:	ee37 7a45 	vsub.f32	s14, s14, s10
 8008b54:	ee36 6a02 	vadd.f32	s12, s12, s4
 8008b58:	9500      	str	r5, [sp, #0]
 8008b5a:	460d      	mov	r5, r1
 8008b5c:	ee36 6a22 	vadd.f32	s12, s12, s5
 8008b60:	ed81 6a01 	vstr	s12, [r1, #4]
 8008b64:	4631      	mov	r1, r6
 8008b66:	f841 cb08 	str.w	ip, [r1], #8
 8008b6a:	ee16 ca90 	vmov	ip, s13
 8008b6e:	9106      	str	r1, [sp, #24]
 8008b70:	4639      	mov	r1, r7
 8008b72:	edc6 4a01 	vstr	s9, [r6, #4]
 8008b76:	f841 cb08 	str.w	ip, [r1], #8
 8008b7a:	9102      	str	r1, [sp, #8]
 8008b7c:	ee17 1a90 	vmov	r1, s15
 8008b80:	edc7 5a01 	vstr	s11, [r7, #4]
 8008b84:	f840 1b08 	str.w	r1, [r0], #8
 8008b88:	ea5f 0159 	movs.w	r1, r9, lsr #1
 8008b8c:	9001      	str	r0, [sp, #4]
 8008b8e:	ed84 7a01 	vstr	s14, [r4, #4]
 8008b92:	9107      	str	r1, [sp, #28]
 8008b94:	f000 8135 	beq.w	8008e02 <arm_cfft_radix8by4_f32+0x366>
 8008b98:	3b0c      	subs	r3, #12
 8008b9a:	f102 0920 	add.w	r9, r2, #32
 8008b9e:	f102 0830 	add.w	r8, r2, #48	; 0x30
 8008ba2:	4622      	mov	r2, r4
 8008ba4:	468b      	mov	fp, r1
 8008ba6:	f105 0e10 	add.w	lr, r5, #16
 8008baa:	4423      	add	r3, r4
 8008bac:	f1a6 0c0c 	sub.w	ip, r6, #12
 8008bb0:	f8dd a00c 	ldr.w	sl, [sp, #12]
 8008bb4:	f106 0010 	add.w	r0, r6, #16
 8008bb8:	f1a7 010c 	sub.w	r1, r7, #12
 8008bbc:	f107 0510 	add.w	r5, r7, #16
 8008bc0:	3c0c      	subs	r4, #12
 8008bc2:	3210      	adds	r2, #16
 8008bc4:	ed15 7a02 	vldr	s14, [r5, #-8]
 8008bc8:	f1bb 0b01 	subs.w	fp, fp, #1
 8008bcc:	ed5e 7a02 	vldr	s15, [lr, #-8]
 8008bd0:	f1ac 0c08 	sub.w	ip, ip, #8
 8008bd4:	ed50 6a02 	vldr	s13, [r0, #-8]
 8008bd8:	f10e 0e08 	add.w	lr, lr, #8
 8008bdc:	ee77 1a87 	vadd.f32	s3, s15, s14
 8008be0:	ed52 4a02 	vldr	s9, [r2, #-8]
 8008be4:	ed55 5a01 	vldr	s11, [r5, #-4]
 8008be8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008bec:	ed1e 7a03 	vldr	s14, [lr, #-12]
 8008bf0:	f10a 0a08 	add.w	sl, sl, #8
 8008bf4:	ee36 6aa1 	vadd.f32	s12, s13, s3
 8008bf8:	ed10 3a01 	vldr	s6, [r0, #-4]
 8008bfc:	ee37 4a25 	vadd.f32	s8, s14, s11
 8008c00:	ed52 3a01 	vldr	s7, [r2, #-4]
 8008c04:	ee37 7a65 	vsub.f32	s14, s14, s11
 8008c08:	f100 0008 	add.w	r0, r0, #8
 8008c0c:	ee36 6a24 	vadd.f32	s12, s12, s9
 8008c10:	f1a1 0108 	sub.w	r1, r1, #8
 8008c14:	ee73 2a27 	vadd.f32	s5, s6, s15
 8008c18:	f109 0910 	add.w	r9, r9, #16
 8008c1c:	ee77 7ac3 	vsub.f32	s15, s15, s6
 8008c20:	f105 0508 	add.w	r5, r5, #8
 8008c24:	ed0e 6a04 	vstr	s12, [lr, #-16]
 8008c28:	ee37 5a66 	vsub.f32	s10, s14, s13
 8008c2c:	ed50 5a03 	vldr	s11, [r0, #-12]
 8008c30:	ee71 1ae6 	vsub.f32	s3, s3, s13
 8008c34:	ed12 6a01 	vldr	s12, [r2, #-4]
 8008c38:	ee36 7a87 	vadd.f32	s14, s13, s14
 8008c3c:	ee74 5a25 	vadd.f32	s11, s8, s11
 8008c40:	f1a4 0408 	sub.w	r4, r4, #8
 8008c44:	ee34 4a43 	vsub.f32	s8, s8, s6
 8008c48:	f108 0818 	add.w	r8, r8, #24
 8008c4c:	ee32 0ae3 	vsub.f32	s0, s5, s7
 8008c50:	f102 0208 	add.w	r2, r2, #8
 8008c54:	ee75 5a86 	vadd.f32	s11, s11, s12
 8008c58:	f1a3 0308 	sub.w	r3, r3, #8
 8008c5c:	ee34 6a63 	vsub.f32	s12, s8, s7
 8008c60:	ee77 3aa3 	vadd.f32	s7, s15, s7
 8008c64:	ed4e 5a03 	vstr	s11, [lr, #-12]
 8008c68:	ee35 5a24 	vadd.f32	s10, s10, s9
 8008c6c:	ed94 4a04 	vldr	s8, [r4, #16]
 8008c70:	ee71 1ae4 	vsub.f32	s3, s3, s9
 8008c74:	ed9c 3a04 	vldr	s6, [ip, #16]
 8008c78:	ee37 7a64 	vsub.f32	s14, s14, s9
 8008c7c:	edd1 7a04 	vldr	s15, [r1, #16]
 8008c80:	ee73 6a04 	vadd.f32	s13, s6, s8
 8008c84:	ed93 8a04 	vldr	s16, [r3, #16]
 8008c88:	edd4 5a03 	vldr	s11, [r4, #12]
 8008c8c:	ee33 3a44 	vsub.f32	s6, s6, s8
 8008c90:	ed9c 2a03 	vldr	s4, [ip, #12]
 8008c94:	ee77 8ac8 	vsub.f32	s17, s15, s16
 8008c98:	ee77 0aa6 	vadd.f32	s1, s15, s13
 8008c9c:	ed91 1a03 	vldr	s2, [r1, #12]
 8008ca0:	ee32 4a25 	vadd.f32	s8, s4, s11
 8008ca4:	edd3 2a03 	vldr	s5, [r3, #12]
 8008ca8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8008cac:	ee70 0a88 	vadd.f32	s1, s1, s16
 8008cb0:	ee73 4a41 	vsub.f32	s9, s6, s2
 8008cb4:	ee32 2a65 	vsub.f32	s4, s4, s11
 8008cb8:	edcc 0a04 	vstr	s1, [ip, #16]
 8008cbc:	ee74 0a41 	vsub.f32	s1, s8, s2
 8008cc0:	edd1 6a03 	vldr	s13, [r1, #12]
 8008cc4:	ee74 4aa2 	vadd.f32	s9, s9, s5
 8008cc8:	ed93 9a03 	vldr	s18, [r3, #12]
 8008ccc:	ee78 5a82 	vadd.f32	s11, s17, s4
 8008cd0:	ee34 4a26 	vadd.f32	s8, s8, s13
 8008cd4:	ee70 0ae2 	vsub.f32	s1, s1, s5
 8008cd8:	ee72 2ac1 	vsub.f32	s5, s5, s2
 8008cdc:	ee34 4a09 	vadd.f32	s8, s8, s18
 8008ce0:	ee77 7ac8 	vsub.f32	s15, s15, s16
 8008ce4:	ee32 3ac3 	vsub.f32	s6, s5, s6
 8008ce8:	ed8c 4a03 	vstr	s8, [ip, #12]
 8008cec:	ee38 2ac2 	vsub.f32	s4, s17, s4
 8008cf0:	ed1a 1a03 	vldr	s2, [sl, #-12]
 8008cf4:	ed1a 4a04 	vldr	s8, [sl, #-16]
 8008cf8:	ee60 2a01 	vmul.f32	s5, s0, s2
 8008cfc:	ee64 6a81 	vmul.f32	s13, s9, s2
 8008d00:	ee20 8a04 	vmul.f32	s16, s0, s8
 8008d04:	ee64 4a84 	vmul.f32	s9, s9, s8
 8008d08:	ee25 0a01 	vmul.f32	s0, s10, s2
 8008d0c:	ee25 5a04 	vmul.f32	s10, s10, s8
 8008d10:	ee25 4a84 	vmul.f32	s8, s11, s8
 8008d14:	ee65 5a81 	vmul.f32	s11, s11, s2
 8008d18:	ee35 5a62 	vsub.f32	s10, s10, s5
 8008d1c:	ee36 4ac4 	vsub.f32	s8, s13, s8
 8008d20:	ee75 5aa4 	vadd.f32	s11, s11, s9
 8008d24:	ee38 1a00 	vadd.f32	s2, s16, s0
 8008d28:	ed00 5a03 	vstr	s10, [r0, #-12]
 8008d2c:	ed00 1a04 	vstr	s2, [r0, #-16]
 8008d30:	ed81 4a04 	vstr	s8, [r1, #16]
 8008d34:	edc1 5a03 	vstr	s11, [r1, #12]
 8008d38:	ed19 5a08 	vldr	s10, [r9, #-32]	; 0xffffffe0
 8008d3c:	ed59 5a07 	vldr	s11, [r9, #-28]	; 0xffffffe4
 8008d40:	ee67 4ac5 	vnmul.f32	s9, s15, s10
 8008d44:	ee66 2a25 	vmul.f32	s5, s12, s11
 8008d48:	ee67 6aa5 	vmul.f32	s13, s15, s11
 8008d4c:	ee21 4a85 	vmul.f32	s8, s3, s10
 8008d50:	ee60 7a85 	vmul.f32	s15, s1, s10
 8008d54:	ee61 1aa5 	vmul.f32	s3, s3, s11
 8008d58:	ee26 6a05 	vmul.f32	s12, s12, s10
 8008d5c:	ee60 5aa5 	vmul.f32	s11, s1, s11
 8008d60:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8008d64:	ee34 5a22 	vadd.f32	s10, s8, s5
 8008d68:	ee36 6a61 	vsub.f32	s12, s12, s3
 8008d6c:	ee74 5ae5 	vsub.f32	s11, s9, s11
 8008d70:	ed05 5a04 	vstr	s10, [r5, #-16]
 8008d74:	ed05 6a03 	vstr	s12, [r5, #-12]
 8008d78:	edc4 5a04 	vstr	s11, [r4, #16]
 8008d7c:	edc4 6a03 	vstr	s13, [r4, #12]
 8008d80:	ed58 2a0c 	vldr	s5, [r8, #-48]	; 0xffffffd0
 8008d84:	ed58 7a0b 	vldr	s15, [r8, #-44]	; 0xffffffd4
 8008d88:	ee23 6aa2 	vmul.f32	s12, s7, s5
 8008d8c:	ee67 5a27 	vmul.f32	s11, s14, s15
 8008d90:	ee63 6a27 	vmul.f32	s13, s6, s15
 8008d94:	ee63 3aa7 	vmul.f32	s7, s7, s15
 8008d98:	ee27 7a22 	vmul.f32	s14, s14, s5
 8008d9c:	ee62 7a27 	vmul.f32	s15, s4, s15
 8008da0:	ee23 3a22 	vmul.f32	s6, s6, s5
 8008da4:	ee22 2a22 	vmul.f32	s4, s4, s5
 8008da8:	ee36 6a25 	vadd.f32	s12, s12, s11
 8008dac:	ee37 7a63 	vsub.f32	s14, s14, s7
 8008db0:	ee36 2ac2 	vsub.f32	s4, s13, s4
 8008db4:	ee77 7a83 	vadd.f32	s15, s15, s6
 8008db8:	ed02 6a04 	vstr	s12, [r2, #-16]
 8008dbc:	ed02 7a03 	vstr	s14, [r2, #-12]
 8008dc0:	ed83 2a04 	vstr	s4, [r3, #16]
 8008dc4:	edc3 7a03 	vstr	s15, [r3, #12]
 8008dc8:	f47f aefc 	bne.w	8008bc4 <arm_cfft_radix8by4_f32+0x128>
 8008dcc:	9907      	ldr	r1, [sp, #28]
 8008dce:	9803      	ldr	r0, [sp, #12]
 8008dd0:	00cb      	lsls	r3, r1, #3
 8008dd2:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8008dd6:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8008dda:	9103      	str	r1, [sp, #12]
 8008ddc:	9900      	ldr	r1, [sp, #0]
 8008dde:	4419      	add	r1, r3
 8008de0:	9100      	str	r1, [sp, #0]
 8008de2:	9905      	ldr	r1, [sp, #20]
 8008de4:	4419      	add	r1, r3
 8008de6:	9105      	str	r1, [sp, #20]
 8008de8:	9906      	ldr	r1, [sp, #24]
 8008dea:	4419      	add	r1, r3
 8008dec:	9106      	str	r1, [sp, #24]
 8008dee:	9902      	ldr	r1, [sp, #8]
 8008df0:	4419      	add	r1, r3
 8008df2:	9102      	str	r1, [sp, #8]
 8008df4:	9901      	ldr	r1, [sp, #4]
 8008df6:	4419      	add	r1, r3
 8008df8:	9b04      	ldr	r3, [sp, #16]
 8008dfa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008dfe:	9101      	str	r1, [sp, #4]
 8008e00:	9304      	str	r3, [sp, #16]
 8008e02:	9b00      	ldr	r3, [sp, #0]
 8008e04:	9902      	ldr	r1, [sp, #8]
 8008e06:	ed93 7a00 	vldr	s14, [r3]
 8008e0a:	edd1 7a00 	vldr	s15, [r1]
 8008e0e:	9a06      	ldr	r2, [sp, #24]
 8008e10:	ee37 6a27 	vadd.f32	s12, s14, s15
 8008e14:	9d01      	ldr	r5, [sp, #4]
 8008e16:	edd2 6a00 	vldr	s13, [r2]
 8008e1a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008e1e:	9b02      	ldr	r3, [sp, #8]
 8008e20:	ee76 3a86 	vadd.f32	s7, s13, s12
 8008e24:	ed95 3a00 	vldr	s6, [r5]
 8008e28:	ed93 5a01 	vldr	s10, [r3, #4]
 8008e2c:	ee36 6a66 	vsub.f32	s12, s12, s13
 8008e30:	9b00      	ldr	r3, [sp, #0]
 8008e32:	ee73 3a83 	vadd.f32	s7, s7, s6
 8008e36:	edd5 2a01 	vldr	s5, [r5, #4]
 8008e3a:	ed93 4a01 	vldr	s8, [r3, #4]
 8008e3e:	ee36 6a43 	vsub.f32	s12, s12, s6
 8008e42:	9b00      	ldr	r3, [sp, #0]
 8008e44:	ee74 5a05 	vadd.f32	s11, s8, s10
 8008e48:	edd2 7a01 	vldr	s15, [r2, #4]
 8008e4c:	edc3 3a00 	vstr	s7, [r3]
 8008e50:	ee34 4a45 	vsub.f32	s8, s8, s10
 8008e54:	edd2 3a01 	vldr	s7, [r2, #4]
 8008e58:	ee77 4a87 	vadd.f32	s9, s15, s14
 8008e5c:	ed95 2a01 	vldr	s4, [r5, #4]
 8008e60:	ee75 3aa3 	vadd.f32	s7, s11, s7
 8008e64:	9d05      	ldr	r5, [sp, #20]
 8008e66:	ee34 5a66 	vsub.f32	s10, s8, s13
 8008e6a:	9b00      	ldr	r3, [sp, #0]
 8008e6c:	ee74 4ae2 	vsub.f32	s9, s9, s5
 8008e70:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 8008e74:	ee73 3a82 	vadd.f32	s7, s7, s4
 8008e78:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8008e7a:	ee35 5a03 	vadd.f32	s10, s10, s6
 8008e7e:	4621      	mov	r1, r4
 8008e80:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8008e84:	edc3 3a01 	vstr	s7, [r3, #4]
 8008e88:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008e8c:	edd5 3a00 	vldr	s7, [r5]
 8008e90:	ee76 6a84 	vadd.f32	s13, s13, s8
 8008e94:	ed95 7a01 	vldr	s14, [r5, #4]
 8008e98:	ee75 5ae2 	vsub.f32	s11, s11, s5
 8008e9c:	ee24 4aa3 	vmul.f32	s8, s9, s7
 8008ea0:	2304      	movs	r3, #4
 8008ea2:	ee64 4a87 	vmul.f32	s9, s9, s14
 8008ea6:	ee25 7a07 	vmul.f32	s14, s10, s14
 8008eaa:	ee25 5a23 	vmul.f32	s10, s10, s7
 8008eae:	ee77 7aa2 	vadd.f32	s15, s15, s5
 8008eb2:	ee34 7a07 	vadd.f32	s14, s8, s14
 8008eb6:	ee35 5a64 	vsub.f32	s10, s10, s9
 8008eba:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8008ebe:	ed82 7a00 	vstr	s14, [r2]
 8008ec2:	ed82 5a01 	vstr	s10, [r2, #4]
 8008ec6:	9a03      	ldr	r2, [sp, #12]
 8008ec8:	edd2 4a01 	vldr	s9, [r2, #4]
 8008ecc:	ed92 7a00 	vldr	s14, [r2]
 8008ed0:	9a02      	ldr	r2, [sp, #8]
 8008ed2:	ee26 5a07 	vmul.f32	s10, s12, s14
 8008ed6:	ee26 6a24 	vmul.f32	s12, s12, s9
 8008eda:	ee25 7a87 	vmul.f32	s14, s11, s14
 8008ede:	ee65 5aa4 	vmul.f32	s11, s11, s9
 8008ee2:	ee37 6a46 	vsub.f32	s12, s14, s12
 8008ee6:	ee75 5a25 	vadd.f32	s11, s10, s11
 8008eea:	edc2 5a00 	vstr	s11, [r2]
 8008eee:	ed82 6a01 	vstr	s12, [r2, #4]
 8008ef2:	9a04      	ldr	r2, [sp, #16]
 8008ef4:	9d01      	ldr	r5, [sp, #4]
 8008ef6:	edd2 5a01 	vldr	s11, [r2, #4]
 8008efa:	ed92 7a00 	vldr	s14, [r2]
 8008efe:	ee27 6a87 	vmul.f32	s12, s15, s14
 8008f02:	ee26 7a87 	vmul.f32	s14, s13, s14
 8008f06:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8008f0a:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8008f0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008f12:	ee76 6a26 	vadd.f32	s13, s12, s13
 8008f16:	edc5 7a01 	vstr	s15, [r5, #4]
 8008f1a:	edc5 6a00 	vstr	s13, [r5]
 8008f1e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8008f20:	686a      	ldr	r2, [r5, #4]
 8008f22:	f000 fceb 	bl	80098fc <arm_radix8_butterfly_f32>
 8008f26:	4630      	mov	r0, r6
 8008f28:	4621      	mov	r1, r4
 8008f2a:	686a      	ldr	r2, [r5, #4]
 8008f2c:	2304      	movs	r3, #4
 8008f2e:	f000 fce5 	bl	80098fc <arm_radix8_butterfly_f32>
 8008f32:	4638      	mov	r0, r7
 8008f34:	4621      	mov	r1, r4
 8008f36:	686a      	ldr	r2, [r5, #4]
 8008f38:	2304      	movs	r3, #4
 8008f3a:	f000 fcdf 	bl	80098fc <arm_radix8_butterfly_f32>
 8008f3e:	4621      	mov	r1, r4
 8008f40:	686a      	ldr	r2, [r5, #4]
 8008f42:	2304      	movs	r3, #4
 8008f44:	9808      	ldr	r0, [sp, #32]
 8008f46:	b00d      	add	sp, #52	; 0x34
 8008f48:	ecbd 8b04 	vpop	{d8-d9}
 8008f4c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f50:	f000 bcd4 	b.w	80098fc <arm_radix8_butterfly_f32>

08008f54 <arm_cfft_f32>:
 8008f54:	2a01      	cmp	r2, #1
 8008f56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f5a:	4606      	mov	r6, r0
 8008f5c:	4617      	mov	r7, r2
 8008f5e:	460c      	mov	r4, r1
 8008f60:	4698      	mov	r8, r3
 8008f62:	8805      	ldrh	r5, [r0, #0]
 8008f64:	d055      	beq.n	8009012 <arm_cfft_f32+0xbe>
 8008f66:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8008f6a:	d061      	beq.n	8009030 <arm_cfft_f32+0xdc>
 8008f6c:	d916      	bls.n	8008f9c <arm_cfft_f32+0x48>
 8008f6e:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8008f72:	d01a      	beq.n	8008faa <arm_cfft_f32+0x56>
 8008f74:	d946      	bls.n	8009004 <arm_cfft_f32+0xb0>
 8008f76:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8008f7a:	d059      	beq.n	8009030 <arm_cfft_f32+0xdc>
 8008f7c:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 8008f80:	d105      	bne.n	8008f8e <arm_cfft_f32+0x3a>
 8008f82:	2301      	movs	r3, #1
 8008f84:	6872      	ldr	r2, [r6, #4]
 8008f86:	4629      	mov	r1, r5
 8008f88:	4620      	mov	r0, r4
 8008f8a:	f000 fcb7 	bl	80098fc <arm_radix8_butterfly_f32>
 8008f8e:	f1b8 0f00 	cmp.w	r8, #0
 8008f92:	d111      	bne.n	8008fb8 <arm_cfft_f32+0x64>
 8008f94:	2f01      	cmp	r7, #1
 8008f96:	d016      	beq.n	8008fc6 <arm_cfft_f32+0x72>
 8008f98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f9c:	2d20      	cmp	r5, #32
 8008f9e:	d047      	beq.n	8009030 <arm_cfft_f32+0xdc>
 8008fa0:	d934      	bls.n	800900c <arm_cfft_f32+0xb8>
 8008fa2:	2d40      	cmp	r5, #64	; 0x40
 8008fa4:	d0ed      	beq.n	8008f82 <arm_cfft_f32+0x2e>
 8008fa6:	2d80      	cmp	r5, #128	; 0x80
 8008fa8:	d1f1      	bne.n	8008f8e <arm_cfft_f32+0x3a>
 8008faa:	4621      	mov	r1, r4
 8008fac:	4630      	mov	r0, r6
 8008fae:	f7ff fca9 	bl	8008904 <arm_cfft_radix8by2_f32>
 8008fb2:	f1b8 0f00 	cmp.w	r8, #0
 8008fb6:	d0ed      	beq.n	8008f94 <arm_cfft_f32+0x40>
 8008fb8:	68b2      	ldr	r2, [r6, #8]
 8008fba:	4620      	mov	r0, r4
 8008fbc:	89b1      	ldrh	r1, [r6, #12]
 8008fbe:	f000 f83f 	bl	8009040 <arm_bitreversal_32>
 8008fc2:	2f01      	cmp	r7, #1
 8008fc4:	d1e8      	bne.n	8008f98 <arm_cfft_f32+0x44>
 8008fc6:	ee07 5a90 	vmov	s15, r5
 8008fca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008fce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fd2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8008fd6:	2d00      	cmp	r5, #0
 8008fd8:	d0de      	beq.n	8008f98 <arm_cfft_f32+0x44>
 8008fda:	f104 0108 	add.w	r1, r4, #8
 8008fde:	2300      	movs	r3, #0
 8008fe0:	ed11 7a02 	vldr	s14, [r1, #-8]
 8008fe4:	3301      	adds	r3, #1
 8008fe6:	ed51 7a01 	vldr	s15, [r1, #-4]
 8008fea:	3108      	adds	r1, #8
 8008fec:	429d      	cmp	r5, r3
 8008fee:	ee27 7a26 	vmul.f32	s14, s14, s13
 8008ff2:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8008ff6:	ed01 7a04 	vstr	s14, [r1, #-16]
 8008ffa:	ed41 7a03 	vstr	s15, [r1, #-12]
 8008ffe:	d1ef      	bne.n	8008fe0 <arm_cfft_f32+0x8c>
 8009000:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009004:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8009008:	d0bb      	beq.n	8008f82 <arm_cfft_f32+0x2e>
 800900a:	e7c0      	b.n	8008f8e <arm_cfft_f32+0x3a>
 800900c:	2d10      	cmp	r5, #16
 800900e:	d0cc      	beq.n	8008faa <arm_cfft_f32+0x56>
 8009010:	e7bd      	b.n	8008f8e <arm_cfft_f32+0x3a>
 8009012:	b195      	cbz	r5, 800903a <arm_cfft_f32+0xe6>
 8009014:	f101 030c 	add.w	r3, r1, #12
 8009018:	2200      	movs	r2, #0
 800901a:	ed53 7a02 	vldr	s15, [r3, #-8]
 800901e:	3201      	adds	r2, #1
 8009020:	3308      	adds	r3, #8
 8009022:	eef1 7a67 	vneg.f32	s15, s15
 8009026:	4295      	cmp	r5, r2
 8009028:	ed43 7a04 	vstr	s15, [r3, #-16]
 800902c:	d1f5      	bne.n	800901a <arm_cfft_f32+0xc6>
 800902e:	e79a      	b.n	8008f66 <arm_cfft_f32+0x12>
 8009030:	4621      	mov	r1, r4
 8009032:	4630      	mov	r0, r6
 8009034:	f7ff fd32 	bl	8008a9c <arm_cfft_radix8by4_f32>
 8009038:	e7a9      	b.n	8008f8e <arm_cfft_f32+0x3a>
 800903a:	2b00      	cmp	r3, #0
 800903c:	d0ac      	beq.n	8008f98 <arm_cfft_f32+0x44>
 800903e:	e7bb      	b.n	8008fb8 <arm_cfft_f32+0x64>

08009040 <arm_bitreversal_32>:
 8009040:	b321      	cbz	r1, 800908c <arm_bitreversal_32+0x4c>
 8009042:	f102 0c02 	add.w	ip, r2, #2
 8009046:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800904a:	4690      	mov	r8, r2
 800904c:	2500      	movs	r5, #0
 800904e:	f838 4015 	ldrh.w	r4, [r8, r5, lsl #1]
 8009052:	f83c 3015 	ldrh.w	r3, [ip, r5, lsl #1]
 8009056:	3502      	adds	r5, #2
 8009058:	08a4      	lsrs	r4, r4, #2
 800905a:	089b      	lsrs	r3, r3, #2
 800905c:	428d      	cmp	r5, r1
 800905e:	ea4f 0784 	mov.w	r7, r4, lsl #2
 8009062:	f850 e024 	ldr.w	lr, [r0, r4, lsl #2]
 8009066:	ea4f 0683 	mov.w	r6, r3, lsl #2
 800906a:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 800906e:	f107 0704 	add.w	r7, r7, #4
 8009072:	f106 0604 	add.w	r6, r6, #4
 8009076:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 800907a:	f840 e023 	str.w	lr, [r0, r3, lsl #2]
 800907e:	59c4      	ldr	r4, [r0, r7]
 8009080:	5983      	ldr	r3, [r0, r6]
 8009082:	51c3      	str	r3, [r0, r7]
 8009084:	5184      	str	r4, [r0, r6]
 8009086:	d3e2      	bcc.n	800904e <arm_bitreversal_32+0xe>
 8009088:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800908c:	4770      	bx	lr
 800908e:	bf00      	nop

08009090 <arm_fir_decimate_q15>:
 8009090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009094:	4604      	mov	r4, r0
 8009096:	b08f      	sub	sp, #60	; 0x3c
 8009098:	4617      	mov	r7, r2
 800909a:	8866      	ldrh	r6, [r4, #2]
 800909c:	9002      	str	r0, [sp, #8]
 800909e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 80090a2:	920b      	str	r2, [sp, #44]	; 0x2c
 80090a4:	7822      	ldrb	r2, [r4, #0]
 80090a6:	4430      	add	r0, r6
 80090a8:	f8d4 9008 	ldr.w	r9, [r4, #8]
 80090ac:	6864      	ldr	r4, [r4, #4]
 80090ae:	eb09 0040 	add.w	r0, r9, r0, lsl #1
 80090b2:	960a      	str	r6, [sp, #40]	; 0x28
 80090b4:	9406      	str	r4, [sp, #24]
 80090b6:	9001      	str	r0, [sp, #4]
 80090b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80090bc:	f003 0001 	and.w	r0, r3, #1
 80090c0:	085b      	lsrs	r3, r3, #1
 80090c2:	900c      	str	r0, [sp, #48]	; 0x30
 80090c4:	930d      	str	r3, [sp, #52]	; 0x34
 80090c6:	f000 8096 	beq.w	80091f6 <arm_fir_decimate_q15+0x166>
 80090ca:	f006 0503 	and.w	r5, r6, #3
 80090ce:	08b0      	lsrs	r0, r6, #2
 80090d0:	9508      	str	r5, [sp, #32]
 80090d2:	463d      	mov	r5, r7
 80090d4:	9007      	str	r0, [sp, #28]
 80090d6:	3504      	adds	r5, #4
 80090d8:	e9cd 3503 	strd	r3, r5, [sp, #12]
 80090dc:	00c3      	lsls	r3, r0, #3
 80090de:	eb04 0803 	add.w	r8, r4, r3
 80090e2:	9309      	str	r3, [sp, #36]	; 0x24
 80090e4:	9c01      	ldr	r4, [sp, #4]
 80090e6:	1d08      	adds	r0, r1, #4
 80090e8:	2702      	movs	r7, #2
 80090ea:	1d23      	adds	r3, r4, #4
 80090ec:	4625      	mov	r5, r4
 80090ee:	fb12 f607 	smulbb	r6, r2, r7
 80090f2:	4299      	cmp	r1, r3
 80090f4:	bf38      	it	cc
 80090f6:	4284      	cmpcc	r4, r0
 80090f8:	d36d      	bcc.n	80091d6 <arm_fir_decimate_q15+0x146>
 80090fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80090fe:	fb17 0202 	smlabb	r2, r7, r2, r0
 8009102:	2a09      	cmp	r2, #9
 8009104:	d967      	bls.n	80091d6 <arm_fir_decimate_q15+0x146>
 8009106:	1eb2      	subs	r2, r6, #2
 8009108:	460c      	mov	r4, r1
 800910a:	4628      	mov	r0, r5
 800910c:	2300      	movs	r3, #0
 800910e:	0852      	lsrs	r2, r2, #1
 8009110:	3201      	adds	r2, #1
 8009112:	3301      	adds	r3, #1
 8009114:	f854 5b04 	ldr.w	r5, [r4], #4
 8009118:	429a      	cmp	r2, r3
 800911a:	f840 5b04 	str.w	r5, [r0], #4
 800911e:	d8f8      	bhi.n	8009112 <arm_fir_decimate_q15+0x82>
 8009120:	9b02      	ldr	r3, [sp, #8]
 8009122:	0076      	lsls	r6, r6, #1
 8009124:	9a01      	ldr	r2, [sp, #4]
 8009126:	781b      	ldrb	r3, [r3, #0]
 8009128:	4431      	add	r1, r6
 800912a:	4432      	add	r2, r6
 800912c:	9305      	str	r3, [sp, #20]
 800912e:	eb09 0e43 	add.w	lr, r9, r3, lsl #1
 8009132:	9b07      	ldr	r3, [sp, #28]
 8009134:	9201      	str	r2, [sp, #4]
 8009136:	2b00      	cmp	r3, #0
 8009138:	f000 80f6 	beq.w	8009328 <arm_fir_decimate_q15+0x298>
 800913c:	2300      	movs	r3, #0
 800913e:	46f4      	mov	ip, lr
 8009140:	464f      	mov	r7, r9
 8009142:	9d06      	ldr	r5, [sp, #24]
 8009144:	461c      	mov	r4, r3
 8009146:	461a      	mov	r2, r3
 8009148:	4618      	mov	r0, r3
 800914a:	682e      	ldr	r6, [r5, #0]
 800914c:	f8d7 b000 	ldr.w	fp, [r7]
 8009150:	f8dc a000 	ldr.w	sl, [ip]
 8009154:	fbcb 20c6 	smlald	r2, r0, fp, r6
 8009158:	fbca 34c6 	smlald	r3, r4, sl, r6
 800915c:	686e      	ldr	r6, [r5, #4]
 800915e:	3708      	adds	r7, #8
 8009160:	f857 bc04 	ldr.w	fp, [r7, #-4]
 8009164:	3508      	adds	r5, #8
 8009166:	f8dc a004 	ldr.w	sl, [ip, #4]
 800916a:	f10c 0c08 	add.w	ip, ip, #8
 800916e:	fbcb 20c6 	smlald	r2, r0, fp, r6
 8009172:	fbca 34c6 	smlald	r3, r4, sl, r6
 8009176:	45a8      	cmp	r8, r5
 8009178:	d1e7      	bne.n	800914a <arm_fir_decimate_q15+0xba>
 800917a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800917c:	44b6      	add	lr, r6
 800917e:	eb09 0a06 	add.w	sl, r9, r6
 8009182:	9e08      	ldr	r6, [sp, #32]
 8009184:	b166      	cbz	r6, 80091a0 <arm_fir_decimate_q15+0x110>
 8009186:	4637      	mov	r7, r6
 8009188:	f93e cb02 	ldrsh.w	ip, [lr], #2
 800918c:	f93a bb02 	ldrsh.w	fp, [sl], #2
 8009190:	f935 6b02 	ldrsh.w	r6, [r5], #2
 8009194:	fbcb 20c6 	smlald	r2, r0, fp, r6
 8009198:	fbcc 34c6 	smlald	r3, r4, ip, r6
 800919c:	3f01      	subs	r7, #1
 800919e:	d1f3      	bne.n	8009188 <arm_fir_decimate_q15+0xf8>
 80091a0:	0bd2      	lsrs	r2, r2, #15
 80091a2:	0bdb      	lsrs	r3, r3, #15
 80091a4:	ea42 4240 	orr.w	r2, r2, r0, lsl #17
 80091a8:	9804      	ldr	r0, [sp, #16]
 80091aa:	ea43 4344 	orr.w	r3, r3, r4, lsl #17
 80091ae:	f303 030f 	ssat	r3, #16, r3
 80091b2:	f820 3c02 	strh.w	r3, [r0, #-2]
 80091b6:	1d03      	adds	r3, r0, #4
 80091b8:	f302 020f 	ssat	r2, #16, r2
 80091bc:	9304      	str	r3, [sp, #16]
 80091be:	9b03      	ldr	r3, [sp, #12]
 80091c0:	f820 2c04 	strh.w	r2, [r0, #-4]
 80091c4:	3b01      	subs	r3, #1
 80091c6:	9a05      	ldr	r2, [sp, #20]
 80091c8:	9303      	str	r3, [sp, #12]
 80091ca:	eb09 0982 	add.w	r9, r9, r2, lsl #2
 80091ce:	d00d      	beq.n	80091ec <arm_fir_decimate_q15+0x15c>
 80091d0:	9b02      	ldr	r3, [sp, #8]
 80091d2:	781a      	ldrb	r2, [r3, #0]
 80091d4:	e786      	b.n	80090e4 <arm_fir_decimate_q15+0x54>
 80091d6:	9b01      	ldr	r3, [sp, #4]
 80091d8:	460a      	mov	r2, r1
 80091da:	1e98      	subs	r0, r3, #2
 80091dc:	4633      	mov	r3, r6
 80091de:	f932 4b02 	ldrsh.w	r4, [r2], #2
 80091e2:	3b01      	subs	r3, #1
 80091e4:	f820 4f02 	strh.w	r4, [r0, #2]!
 80091e8:	d1f9      	bne.n	80091de <arm_fir_decimate_q15+0x14e>
 80091ea:	e799      	b.n	8009120 <arm_fir_decimate_q15+0x90>
 80091ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80091ee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80091f0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80091f4:	930b      	str	r3, [sp, #44]	; 0x2c
 80091f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d056      	beq.n	80092aa <arm_fir_decimate_q15+0x21a>
 80091fc:	9801      	ldr	r0, [sp, #4]
 80091fe:	1d0b      	adds	r3, r1, #4
 8009200:	9c02      	ldr	r4, [sp, #8]
 8009202:	1d02      	adds	r2, r0, #4
 8009204:	7825      	ldrb	r5, [r4, #0]
 8009206:	4298      	cmp	r0, r3
 8009208:	bf38      	it	cc
 800920a:	4291      	cmpcc	r1, r2
 800920c:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8009210:	f0c0 8090 	bcc.w	8009334 <arm_fir_decimate_q15+0x2a4>
 8009214:	2a09      	cmp	r2, #9
 8009216:	f240 808d 	bls.w	8009334 <arm_fir_decimate_q15+0x2a4>
 800921a:	1eab      	subs	r3, r5, #2
 800921c:	460c      	mov	r4, r1
 800921e:	2200      	movs	r2, #0
 8009220:	085b      	lsrs	r3, r3, #1
 8009222:	3301      	adds	r3, #1
 8009224:	3201      	adds	r2, #1
 8009226:	f854 6b04 	ldr.w	r6, [r4], #4
 800922a:	4293      	cmp	r3, r2
 800922c:	f840 6b04 	str.w	r6, [r0], #4
 8009230:	d8f8      	bhi.n	8009224 <arm_fir_decimate_q15+0x194>
 8009232:	ebb5 0f43 	cmp.w	r5, r3, lsl #1
 8009236:	d004      	beq.n	8009242 <arm_fir_decimate_q15+0x1b2>
 8009238:	f931 2023 	ldrsh.w	r2, [r1, r3, lsl #2]
 800923c:	9901      	ldr	r1, [sp, #4]
 800923e:	f821 2023 	strh.w	r2, [r1, r3, lsl #2]
 8009242:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009244:	089a      	lsrs	r2, r3, #2
 8009246:	f000 8083 	beq.w	8009350 <arm_fir_decimate_q15+0x2c0>
 800924a:	00d5      	lsls	r5, r2, #3
 800924c:	2200      	movs	r2, #0
 800924e:	9806      	ldr	r0, [sp, #24]
 8009250:	4649      	mov	r1, r9
 8009252:	eb09 0405 	add.w	r4, r9, r5
 8009256:	4613      	mov	r3, r2
 8009258:	f8d0 c000 	ldr.w	ip, [r0]
 800925c:	3008      	adds	r0, #8
 800925e:	f850 7c04 	ldr.w	r7, [r0, #-4]
 8009262:	680e      	ldr	r6, [r1, #0]
 8009264:	fbc6 23cc 	smlald	r2, r3, r6, ip
 8009268:	684e      	ldr	r6, [r1, #4]
 800926a:	3108      	adds	r1, #8
 800926c:	fbc6 23c7 	smlald	r2, r3, r6, r7
 8009270:	428c      	cmp	r4, r1
 8009272:	d1f1      	bne.n	8009258 <arm_fir_decimate_q15+0x1c8>
 8009274:	9806      	ldr	r0, [sp, #24]
 8009276:	4428      	add	r0, r5
 8009278:	9006      	str	r0, [sp, #24]
 800927a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800927c:	f010 0003 	ands.w	r0, r0, #3
 8009280:	d008      	beq.n	8009294 <arm_fir_decimate_q15+0x204>
 8009282:	9e06      	ldr	r6, [sp, #24]
 8009284:	f931 4b02 	ldrsh.w	r4, [r1], #2
 8009288:	f936 5b02 	ldrsh.w	r5, [r6], #2
 800928c:	fbc4 23c5 	smlald	r2, r3, r4, r5
 8009290:	3801      	subs	r0, #1
 8009292:	d1f7      	bne.n	8009284 <arm_fir_decimate_q15+0x1f4>
 8009294:	9902      	ldr	r1, [sp, #8]
 8009296:	0bd2      	lsrs	r2, r2, #15
 8009298:	7809      	ldrb	r1, [r1, #0]
 800929a:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
 800929e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80092a0:	eb09 0941 	add.w	r9, r9, r1, lsl #1
 80092a4:	f302 020f 	ssat	r2, #16, r2
 80092a8:	801a      	strh	r2, [r3, #0]
 80092aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092ac:	1e5e      	subs	r6, r3, #1
 80092ae:	9b02      	ldr	r3, [sp, #8]
 80092b0:	08b0      	lsrs	r0, r6, #2
 80092b2:	689f      	ldr	r7, [r3, #8]
 80092b4:	d025      	beq.n	8009302 <arm_fir_decimate_q15+0x272>
 80092b6:	f109 0208 	add.w	r2, r9, #8
 80092ba:	f107 0408 	add.w	r4, r7, #8
 80092be:	1e43      	subs	r3, r0, #1
 80092c0:	4611      	mov	r1, r2
 80092c2:	4622      	mov	r2, r4
 80092c4:	45a1      	cmp	r9, r4
 80092c6:	bf38      	it	cc
 80092c8:	428f      	cmpcc	r7, r1
 80092ca:	bf2c      	ite	cs
 80092cc:	2201      	movcs	r2, #1
 80092ce:	2200      	movcc	r2, #0
 80092d0:	2b04      	cmp	r3, #4
 80092d2:	bf94      	ite	ls
 80092d4:	2300      	movls	r3, #0
 80092d6:	f002 0301 	andhi.w	r3, r2, #1
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d03b      	beq.n	8009356 <arm_fir_decimate_q15+0x2c6>
 80092de:	ea47 0309 	orr.w	r3, r7, r9
 80092e2:	075b      	lsls	r3, r3, #29
 80092e4:	d137      	bne.n	8009356 <arm_fir_decimate_q15+0x2c6>
 80092e6:	f1a9 0108 	sub.w	r1, r9, #8
 80092ea:	463a      	mov	r2, r7
 80092ec:	2300      	movs	r3, #0
 80092ee:	3301      	adds	r3, #1
 80092f0:	e9f1 4502 	ldrd	r4, r5, [r1, #8]!
 80092f4:	4298      	cmp	r0, r3
 80092f6:	e8e2 4502 	strd	r4, r5, [r2], #8
 80092fa:	d1f8      	bne.n	80092ee <arm_fir_decimate_q15+0x25e>
 80092fc:	00c0      	lsls	r0, r0, #3
 80092fe:	4407      	add	r7, r0
 8009300:	4481      	add	r9, r0
 8009302:	f016 0603 	ands.w	r6, r6, #3
 8009306:	d00c      	beq.n	8009322 <arm_fir_decimate_q15+0x292>
 8009308:	f9b9 3000 	ldrsh.w	r3, [r9]
 800930c:	3e01      	subs	r6, #1
 800930e:	803b      	strh	r3, [r7, #0]
 8009310:	d007      	beq.n	8009322 <arm_fir_decimate_q15+0x292>
 8009312:	f9b9 3002 	ldrsh.w	r3, [r9, #2]
 8009316:	2e01      	cmp	r6, #1
 8009318:	807b      	strh	r3, [r7, #2]
 800931a:	d002      	beq.n	8009322 <arm_fir_decimate_q15+0x292>
 800931c:	f9b9 3004 	ldrsh.w	r3, [r9, #4]
 8009320:	80bb      	strh	r3, [r7, #4]
 8009322:	b00f      	add	sp, #60	; 0x3c
 8009324:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009328:	4618      	mov	r0, r3
 800932a:	46ca      	mov	sl, r9
 800932c:	9d06      	ldr	r5, [sp, #24]
 800932e:	461c      	mov	r4, r3
 8009330:	461a      	mov	r2, r3
 8009332:	e726      	b.n	8009182 <arm_fir_decimate_q15+0xf2>
 8009334:	9b01      	ldr	r3, [sp, #4]
 8009336:	3b02      	subs	r3, #2
 8009338:	e000      	b.n	800933c <arm_fir_decimate_q15+0x2ac>
 800933a:	3a01      	subs	r2, #1
 800933c:	f931 0b02 	ldrsh.w	r0, [r1], #2
 8009340:	f823 0f02 	strh.w	r0, [r3, #2]!
 8009344:	2a00      	cmp	r2, #0
 8009346:	d1f8      	bne.n	800933a <arm_fir_decimate_q15+0x2aa>
 8009348:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800934a:	089a      	lsrs	r2, r3, #2
 800934c:	f47f af7d 	bne.w	800924a <arm_fir_decimate_q15+0x1ba>
 8009350:	4649      	mov	r1, r9
 8009352:	4613      	mov	r3, r2
 8009354:	e791      	b.n	800927a <arm_fir_decimate_q15+0x1ea>
 8009356:	463a      	mov	r2, r7
 8009358:	464b      	mov	r3, r9
 800935a:	4601      	mov	r1, r0
 800935c:	681c      	ldr	r4, [r3, #0]
 800935e:	3901      	subs	r1, #1
 8009360:	f103 0308 	add.w	r3, r3, #8
 8009364:	f102 0208 	add.w	r2, r2, #8
 8009368:	f842 4c08 	str.w	r4, [r2, #-8]
 800936c:	f853 4c04 	ldr.w	r4, [r3, #-4]
 8009370:	f842 4c04 	str.w	r4, [r2, #-4]
 8009374:	d1f2      	bne.n	800935c <arm_fir_decimate_q15+0x2cc>
 8009376:	e7c1      	b.n	80092fc <arm_fir_decimate_q15+0x26c>

08009378 <arm_fir_decimate_init_q15>:
 8009378:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800937c:	e9dd 8c06 	ldrd	r8, ip, [sp, #24]
 8009380:	fbbc f4f2 	udiv	r4, ip, r2
 8009384:	fb02 c414 	mls	r4, r2, r4, ip
 8009388:	b99c      	cbnz	r4, 80093b2 <arm_fir_decimate_init_q15+0x3a>
 800938a:	460f      	mov	r7, r1
 800938c:	4616      	mov	r6, r2
 800938e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8009392:	4605      	mov	r5, r0
 8009394:	443a      	add	r2, r7
 8009396:	8069      	strh	r1, [r5, #2]
 8009398:	6043      	str	r3, [r0, #4]
 800939a:	4621      	mov	r1, r4
 800939c:	4462      	add	r2, ip
 800939e:	4640      	mov	r0, r8
 80093a0:	0052      	lsls	r2, r2, #1
 80093a2:	f001 fb76 	bl	800aa92 <memset>
 80093a6:	4620      	mov	r0, r4
 80093a8:	f8c5 8008 	str.w	r8, [r5, #8]
 80093ac:	702e      	strb	r6, [r5, #0]
 80093ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093b2:	f06f 0001 	mvn.w	r0, #1
 80093b6:	e7fa      	b.n	80093ae <arm_fir_decimate_init_q15+0x36>

080093b8 <arm_cmplx_mult_cmplx_f32>:
 80093b8:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 80093bc:	b4f0      	push	{r4, r5, r6, r7}
 80093be:	d073      	beq.n	80094a8 <arm_cmplx_mult_cmplx_f32+0xf0>
 80093c0:	f100 0620 	add.w	r6, r0, #32
 80093c4:	f101 0520 	add.w	r5, r1, #32
 80093c8:	f102 0420 	add.w	r4, r2, #32
 80093cc:	4667      	mov	r7, ip
 80093ce:	ed55 5a07 	vldr	s11, [r5, #-28]	; 0xffffffe4
 80093d2:	3f01      	subs	r7, #1
 80093d4:	ed56 7a08 	vldr	s15, [r6, #-32]	; 0xffffffe0
 80093d8:	f105 0520 	add.w	r5, r5, #32
 80093dc:	ed15 7a10 	vldr	s14, [r5, #-64]	; 0xffffffc0
 80093e0:	f106 0620 	add.w	r6, r6, #32
 80093e4:	ed56 6a0f 	vldr	s13, [r6, #-60]	; 0xffffffc4
 80093e8:	f104 0420 	add.w	r4, r4, #32
 80093ec:	ee27 6a87 	vmul.f32	s12, s15, s14
 80093f0:	ee26 7a87 	vmul.f32	s14, s13, s14
 80093f4:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80093f8:	ee66 6aa5 	vmul.f32	s13, s13, s11
 80093fc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009400:	ee76 6a66 	vsub.f32	s13, s12, s13
 8009404:	ed44 7a0f 	vstr	s15, [r4, #-60]	; 0xffffffc4
 8009408:	ed44 6a10 	vstr	s13, [r4, #-64]	; 0xffffffc0
 800940c:	ed55 5a0d 	vldr	s11, [r5, #-52]	; 0xffffffcc
 8009410:	ed56 7a0e 	vldr	s15, [r6, #-56]	; 0xffffffc8
 8009414:	ed15 7a0e 	vldr	s14, [r5, #-56]	; 0xffffffc8
 8009418:	ed56 6a0d 	vldr	s13, [r6, #-52]	; 0xffffffcc
 800941c:	ee27 6a87 	vmul.f32	s12, s15, s14
 8009420:	ee26 7a87 	vmul.f32	s14, s13, s14
 8009424:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8009428:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800942c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009430:	ee76 6a66 	vsub.f32	s13, s12, s13
 8009434:	ed44 7a0d 	vstr	s15, [r4, #-52]	; 0xffffffcc
 8009438:	ed44 6a0e 	vstr	s13, [r4, #-56]	; 0xffffffc8
 800943c:	ed55 5a0b 	vldr	s11, [r5, #-44]	; 0xffffffd4
 8009440:	ed56 7a0c 	vldr	s15, [r6, #-48]	; 0xffffffd0
 8009444:	ed15 7a0c 	vldr	s14, [r5, #-48]	; 0xffffffd0
 8009448:	ed56 6a0b 	vldr	s13, [r6, #-44]	; 0xffffffd4
 800944c:	ee27 6a87 	vmul.f32	s12, s15, s14
 8009450:	ee26 7a87 	vmul.f32	s14, s13, s14
 8009454:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8009458:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800945c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009460:	ee76 6a66 	vsub.f32	s13, s12, s13
 8009464:	ed44 7a0b 	vstr	s15, [r4, #-44]	; 0xffffffd4
 8009468:	ed44 6a0c 	vstr	s13, [r4, #-48]	; 0xffffffd0
 800946c:	ed56 7a0a 	vldr	s15, [r6, #-40]	; 0xffffffd8
 8009470:	ed15 7a0a 	vldr	s14, [r5, #-40]	; 0xffffffd8
 8009474:	ed56 6a09 	vldr	s13, [r6, #-36]	; 0xffffffdc
 8009478:	ed55 5a09 	vldr	s11, [r5, #-36]	; 0xffffffdc
 800947c:	ee27 6a87 	vmul.f32	s12, s15, s14
 8009480:	ee26 7a87 	vmul.f32	s14, s13, s14
 8009484:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8009488:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800948c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009490:	ee76 6a66 	vsub.f32	s13, s12, s13
 8009494:	ed44 7a09 	vstr	s15, [r4, #-36]	; 0xffffffdc
 8009498:	ed44 6a0a 	vstr	s13, [r4, #-40]	; 0xffffffd8
 800949c:	d197      	bne.n	80093ce <arm_cmplx_mult_cmplx_f32+0x16>
 800949e:	ea4f 144c 	mov.w	r4, ip, lsl #5
 80094a2:	4420      	add	r0, r4
 80094a4:	4421      	add	r1, r4
 80094a6:	4422      	add	r2, r4
 80094a8:	f013 0303 	ands.w	r3, r3, #3
 80094ac:	d04b      	beq.n	8009546 <arm_cmplx_mult_cmplx_f32+0x18e>
 80094ae:	edd0 5a00 	vldr	s11, [r0]
 80094b2:	3b01      	subs	r3, #1
 80094b4:	edd1 7a00 	vldr	s15, [r1]
 80094b8:	edd0 6a01 	vldr	s13, [r0, #4]
 80094bc:	ed91 7a01 	vldr	s14, [r1, #4]
 80094c0:	ee27 6aa5 	vmul.f32	s12, s15, s11
 80094c4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80094c8:	ee67 6a26 	vmul.f32	s13, s14, s13
 80094cc:	ee27 7a25 	vmul.f32	s14, s14, s11
 80094d0:	ee76 6a66 	vsub.f32	s13, s12, s13
 80094d4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80094d8:	edc2 6a00 	vstr	s13, [r2]
 80094dc:	edc2 7a01 	vstr	s15, [r2, #4]
 80094e0:	d031      	beq.n	8009546 <arm_cmplx_mult_cmplx_f32+0x18e>
 80094e2:	edd0 7a02 	vldr	s15, [r0, #8]
 80094e6:	2b01      	cmp	r3, #1
 80094e8:	ed91 7a02 	vldr	s14, [r1, #8]
 80094ec:	edd0 6a03 	vldr	s13, [r0, #12]
 80094f0:	edd1 5a03 	vldr	s11, [r1, #12]
 80094f4:	ee27 6a87 	vmul.f32	s12, s15, s14
 80094f8:	ee26 7a87 	vmul.f32	s14, s13, s14
 80094fc:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8009500:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8009504:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009508:	ee76 6a66 	vsub.f32	s13, s12, s13
 800950c:	edc2 7a03 	vstr	s15, [r2, #12]
 8009510:	edc2 6a02 	vstr	s13, [r2, #8]
 8009514:	d017      	beq.n	8009546 <arm_cmplx_mult_cmplx_f32+0x18e>
 8009516:	edd0 7a04 	vldr	s15, [r0, #16]
 800951a:	ed91 7a04 	vldr	s14, [r1, #16]
 800951e:	edd0 6a05 	vldr	s13, [r0, #20]
 8009522:	edd1 5a05 	vldr	s11, [r1, #20]
 8009526:	ee27 6a87 	vmul.f32	s12, s15, s14
 800952a:	ee26 7a87 	vmul.f32	s14, s13, s14
 800952e:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8009532:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8009536:	ee77 7a87 	vadd.f32	s15, s15, s14
 800953a:	ee76 6a66 	vsub.f32	s13, s12, s13
 800953e:	edc2 7a05 	vstr	s15, [r2, #20]
 8009542:	edc2 6a04 	vstr	s13, [r2, #16]
 8009546:	bcf0      	pop	{r4, r5, r6, r7}
 8009548:	4770      	bx	lr
 800954a:	bf00      	nop

0800954c <arm_cmplx_mag_f32>:
 800954c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009550:	0897      	lsrs	r7, r2, #2
 8009552:	ed2d 8b02 	vpush	{d8}
 8009556:	b084      	sub	sp, #16
 8009558:	d077      	beq.n	800964a <arm_cmplx_mag_f32+0xfe>
 800955a:	f100 0420 	add.w	r4, r0, #32
 800955e:	f101 0510 	add.w	r5, r1, #16
 8009562:	463e      	mov	r6, r7
 8009564:	f04f 0800 	mov.w	r8, #0
 8009568:	ed14 0a08 	vldr	s0, [r4, #-32]	; 0xffffffe0
 800956c:	ed54 7a07 	vldr	s15, [r4, #-28]	; 0xffffffe4
 8009570:	ee20 0a00 	vmul.f32	s0, s0, s0
 8009574:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009578:	ee30 0a27 	vadd.f32	s0, s0, s15
 800957c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8009580:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009584:	f2c0 80c1 	blt.w	800970a <arm_cmplx_mag_f32+0x1be>
 8009588:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800958c:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8009590:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009594:	f100 80d4 	bmi.w	8009740 <arm_cmplx_mag_f32+0x1f4>
 8009598:	ed05 8a04 	vstr	s16, [r5, #-16]
 800959c:	ed14 0a06 	vldr	s0, [r4, #-24]	; 0xffffffe8
 80095a0:	ed54 7a05 	vldr	s15, [r4, #-20]	; 0xffffffec
 80095a4:	ee20 0a00 	vmul.f32	s0, s0, s0
 80095a8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80095ac:	ee30 0a27 	vadd.f32	s0, s0, s15
 80095b0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80095b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095b8:	f2c0 80a4 	blt.w	8009704 <arm_cmplx_mag_f32+0x1b8>
 80095bc:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80095c0:	eeb1 8ac0 	vsqrt.f32	s16, s0
 80095c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095c8:	f100 80a8 	bmi.w	800971c <arm_cmplx_mag_f32+0x1d0>
 80095cc:	ed05 8a03 	vstr	s16, [r5, #-12]
 80095d0:	ed14 0a04 	vldr	s0, [r4, #-16]
 80095d4:	ed54 7a03 	vldr	s15, [r4, #-12]
 80095d8:	ee20 0a00 	vmul.f32	s0, s0, s0
 80095dc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80095e0:	ee30 0a27 	vadd.f32	s0, s0, s15
 80095e4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80095e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095ec:	f2c0 8087 	blt.w	80096fe <arm_cmplx_mag_f32+0x1b2>
 80095f0:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80095f4:	eeb1 8ac0 	vsqrt.f32	s16, s0
 80095f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095fc:	f100 8097 	bmi.w	800972e <arm_cmplx_mag_f32+0x1e2>
 8009600:	ed05 8a02 	vstr	s16, [r5, #-8]
 8009604:	ed14 0a02 	vldr	s0, [r4, #-8]
 8009608:	ed54 7a01 	vldr	s15, [r4, #-4]
 800960c:	ee20 0a00 	vmul.f32	s0, s0, s0
 8009610:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009614:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009618:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800961c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009620:	db6a      	blt.n	80096f8 <arm_cmplx_mag_f32+0x1ac>
 8009622:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8009626:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800962a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800962e:	f100 8090 	bmi.w	8009752 <arm_cmplx_mag_f32+0x206>
 8009632:	ed05 8a01 	vstr	s16, [r5, #-4]
 8009636:	3e01      	subs	r6, #1
 8009638:	f104 0420 	add.w	r4, r4, #32
 800963c:	f105 0510 	add.w	r5, r5, #16
 8009640:	d192      	bne.n	8009568 <arm_cmplx_mag_f32+0x1c>
 8009642:	eb00 1047 	add.w	r0, r0, r7, lsl #5
 8009646:	eb01 1107 	add.w	r1, r1, r7, lsl #4
 800964a:	f012 0203 	ands.w	r2, r2, #3
 800964e:	d04e      	beq.n	80096ee <arm_cmplx_mag_f32+0x1a2>
 8009650:	ed90 0a00 	vldr	s0, [r0]
 8009654:	2300      	movs	r3, #0
 8009656:	edd0 7a01 	vldr	s15, [r0, #4]
 800965a:	ee20 0a00 	vmul.f32	s0, s0, s0
 800965e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009662:	ee37 0a80 	vadd.f32	s0, s15, s0
 8009666:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800966a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800966e:	db4f      	blt.n	8009710 <arm_cmplx_mag_f32+0x1c4>
 8009670:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8009674:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8009678:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800967c:	d472      	bmi.n	8009764 <arm_cmplx_mag_f32+0x218>
 800967e:	ed81 8a00 	vstr	s16, [r1]
 8009682:	3a01      	subs	r2, #1
 8009684:	d033      	beq.n	80096ee <arm_cmplx_mag_f32+0x1a2>
 8009686:	ed90 0a02 	vldr	s0, [r0, #8]
 800968a:	2300      	movs	r3, #0
 800968c:	edd0 7a03 	vldr	s15, [r0, #12]
 8009690:	ee20 0a00 	vmul.f32	s0, s0, s0
 8009694:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009698:	ee37 0a80 	vadd.f32	s0, s15, s0
 800969c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80096a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096a4:	db36      	blt.n	8009714 <arm_cmplx_mag_f32+0x1c8>
 80096a6:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80096aa:	eeb1 8ac0 	vsqrt.f32	s16, s0
 80096ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096b2:	d460      	bmi.n	8009776 <arm_cmplx_mag_f32+0x22a>
 80096b4:	ed81 8a01 	vstr	s16, [r1, #4]
 80096b8:	2a01      	cmp	r2, #1
 80096ba:	d018      	beq.n	80096ee <arm_cmplx_mag_f32+0x1a2>
 80096bc:	ed90 0a04 	vldr	s0, [r0, #16]
 80096c0:	2300      	movs	r3, #0
 80096c2:	edd0 7a05 	vldr	s15, [r0, #20]
 80096c6:	ee20 0a00 	vmul.f32	s0, s0, s0
 80096ca:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80096ce:	ee30 0a27 	vadd.f32	s0, s0, s15
 80096d2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80096d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096da:	db1d      	blt.n	8009718 <arm_cmplx_mag_f32+0x1cc>
 80096dc:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80096e0:	eeb1 8ac0 	vsqrt.f32	s16, s0
 80096e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096e8:	d44e      	bmi.n	8009788 <arm_cmplx_mag_f32+0x23c>
 80096ea:	ed81 8a02 	vstr	s16, [r1, #8]
 80096ee:	b004      	add	sp, #16
 80096f0:	ecbd 8b02 	vpop	{d8}
 80096f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096f8:	f845 8c04 	str.w	r8, [r5, #-4]
 80096fc:	e79b      	b.n	8009636 <arm_cmplx_mag_f32+0xea>
 80096fe:	f845 8c08 	str.w	r8, [r5, #-8]
 8009702:	e77f      	b.n	8009604 <arm_cmplx_mag_f32+0xb8>
 8009704:	f845 8c0c 	str.w	r8, [r5, #-12]
 8009708:	e762      	b.n	80095d0 <arm_cmplx_mag_f32+0x84>
 800970a:	f845 8c10 	str.w	r8, [r5, #-16]
 800970e:	e745      	b.n	800959c <arm_cmplx_mag_f32+0x50>
 8009710:	600b      	str	r3, [r1, #0]
 8009712:	e7b6      	b.n	8009682 <arm_cmplx_mag_f32+0x136>
 8009714:	604b      	str	r3, [r1, #4]
 8009716:	e7cf      	b.n	80096b8 <arm_cmplx_mag_f32+0x16c>
 8009718:	608b      	str	r3, [r1, #8]
 800971a:	e7e8      	b.n	80096ee <arm_cmplx_mag_f32+0x1a2>
 800971c:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8009720:	9001      	str	r0, [sp, #4]
 8009722:	f003 f973 	bl	800ca0c <sqrtf>
 8009726:	9801      	ldr	r0, [sp, #4]
 8009728:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800972c:	e74e      	b.n	80095cc <arm_cmplx_mag_f32+0x80>
 800972e:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8009732:	9001      	str	r0, [sp, #4]
 8009734:	f003 f96a 	bl	800ca0c <sqrtf>
 8009738:	9801      	ldr	r0, [sp, #4]
 800973a:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800973e:	e75f      	b.n	8009600 <arm_cmplx_mag_f32+0xb4>
 8009740:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8009744:	9001      	str	r0, [sp, #4]
 8009746:	f003 f961 	bl	800ca0c <sqrtf>
 800974a:	9801      	ldr	r0, [sp, #4]
 800974c:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8009750:	e722      	b.n	8009598 <arm_cmplx_mag_f32+0x4c>
 8009752:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8009756:	9001      	str	r0, [sp, #4]
 8009758:	f003 f958 	bl	800ca0c <sqrtf>
 800975c:	9801      	ldr	r0, [sp, #4]
 800975e:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8009762:	e766      	b.n	8009632 <arm_cmplx_mag_f32+0xe6>
 8009764:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009768:	9201      	str	r2, [sp, #4]
 800976a:	f003 f94f 	bl	800ca0c <sqrtf>
 800976e:	9903      	ldr	r1, [sp, #12]
 8009770:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 8009774:	e783      	b.n	800967e <arm_cmplx_mag_f32+0x132>
 8009776:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800977a:	9201      	str	r2, [sp, #4]
 800977c:	f003 f946 	bl	800ca0c <sqrtf>
 8009780:	9903      	ldr	r1, [sp, #12]
 8009782:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 8009786:	e795      	b.n	80096b4 <arm_cmplx_mag_f32+0x168>
 8009788:	9101      	str	r1, [sp, #4]
 800978a:	f003 f93f 	bl	800ca0c <sqrtf>
 800978e:	9901      	ldr	r1, [sp, #4]
 8009790:	e7ab      	b.n	80096ea <arm_cmplx_mag_f32+0x19e>
 8009792:	bf00      	nop

08009794 <arm_cmplx_conj_f32>:
 8009794:	b4f0      	push	{r4, r5, r6, r7}
 8009796:	0897      	lsrs	r7, r2, #2
 8009798:	d035      	beq.n	8009806 <arm_cmplx_conj_f32+0x72>
 800979a:	f100 0420 	add.w	r4, r0, #32
 800979e:	f101 0320 	add.w	r3, r1, #32
 80097a2:	463d      	mov	r5, r7
 80097a4:	f854 6c20 	ldr.w	r6, [r4, #-32]
 80097a8:	3d01      	subs	r5, #1
 80097aa:	f104 0420 	add.w	r4, r4, #32
 80097ae:	f103 0320 	add.w	r3, r3, #32
 80097b2:	f843 6c40 	str.w	r6, [r3, #-64]
 80097b6:	ed54 7a0f 	vldr	s15, [r4, #-60]	; 0xffffffc4
 80097ba:	eef1 7a67 	vneg.f32	s15, s15
 80097be:	ed43 7a0f 	vstr	s15, [r3, #-60]	; 0xffffffc4
 80097c2:	f854 6c38 	ldr.w	r6, [r4, #-56]
 80097c6:	f843 6c38 	str.w	r6, [r3, #-56]
 80097ca:	ed54 7a0d 	vldr	s15, [r4, #-52]	; 0xffffffcc
 80097ce:	eef1 7a67 	vneg.f32	s15, s15
 80097d2:	ed43 7a0d 	vstr	s15, [r3, #-52]	; 0xffffffcc
 80097d6:	f854 6c30 	ldr.w	r6, [r4, #-48]
 80097da:	f843 6c30 	str.w	r6, [r3, #-48]
 80097de:	ed54 7a0b 	vldr	s15, [r4, #-44]	; 0xffffffd4
 80097e2:	eef1 7a67 	vneg.f32	s15, s15
 80097e6:	ed43 7a0b 	vstr	s15, [r3, #-44]	; 0xffffffd4
 80097ea:	f854 6c28 	ldr.w	r6, [r4, #-40]
 80097ee:	f843 6c28 	str.w	r6, [r3, #-40]
 80097f2:	ed54 7a09 	vldr	s15, [r4, #-36]	; 0xffffffdc
 80097f6:	eef1 7a67 	vneg.f32	s15, s15
 80097fa:	ed43 7a09 	vstr	s15, [r3, #-36]	; 0xffffffdc
 80097fe:	d1d1      	bne.n	80097a4 <arm_cmplx_conj_f32+0x10>
 8009800:	017f      	lsls	r7, r7, #5
 8009802:	4438      	add	r0, r7
 8009804:	4439      	add	r1, r7
 8009806:	f012 0203 	ands.w	r2, r2, #3
 800980a:	d01b      	beq.n	8009844 <arm_cmplx_conj_f32+0xb0>
 800980c:	6803      	ldr	r3, [r0, #0]
 800980e:	3a01      	subs	r2, #1
 8009810:	600b      	str	r3, [r1, #0]
 8009812:	edd0 7a01 	vldr	s15, [r0, #4]
 8009816:	eef1 7a67 	vneg.f32	s15, s15
 800981a:	edc1 7a01 	vstr	s15, [r1, #4]
 800981e:	d011      	beq.n	8009844 <arm_cmplx_conj_f32+0xb0>
 8009820:	6883      	ldr	r3, [r0, #8]
 8009822:	2a01      	cmp	r2, #1
 8009824:	608b      	str	r3, [r1, #8]
 8009826:	edd0 7a03 	vldr	s15, [r0, #12]
 800982a:	eef1 7a67 	vneg.f32	s15, s15
 800982e:	edc1 7a03 	vstr	s15, [r1, #12]
 8009832:	d007      	beq.n	8009844 <arm_cmplx_conj_f32+0xb0>
 8009834:	6903      	ldr	r3, [r0, #16]
 8009836:	610b      	str	r3, [r1, #16]
 8009838:	edd0 7a05 	vldr	s15, [r0, #20]
 800983c:	eef1 7a67 	vneg.f32	s15, s15
 8009840:	edc1 7a05 	vstr	s15, [r1, #20]
 8009844:	bcf0      	pop	{r4, r5, r6, r7}
 8009846:	4770      	bx	lr

08009848 <arm_mult_f32>:
 8009848:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 800984c:	b4f0      	push	{r4, r5, r6, r7}
 800984e:	d033      	beq.n	80098b8 <arm_mult_f32+0x70>
 8009850:	f100 0610 	add.w	r6, r0, #16
 8009854:	f101 0510 	add.w	r5, r1, #16
 8009858:	f102 0410 	add.w	r4, r2, #16
 800985c:	4667      	mov	r7, ip
 800985e:	ed15 7a04 	vldr	s14, [r5, #-16]
 8009862:	3f01      	subs	r7, #1
 8009864:	ed56 7a04 	vldr	s15, [r6, #-16]
 8009868:	f105 0510 	add.w	r5, r5, #16
 800986c:	f106 0610 	add.w	r6, r6, #16
 8009870:	f104 0410 	add.w	r4, r4, #16
 8009874:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009878:	ed44 7a08 	vstr	s15, [r4, #-32]	; 0xffffffe0
 800987c:	ed15 7a07 	vldr	s14, [r5, #-28]	; 0xffffffe4
 8009880:	ed56 7a07 	vldr	s15, [r6, #-28]	; 0xffffffe4
 8009884:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009888:	ed44 7a07 	vstr	s15, [r4, #-28]	; 0xffffffe4
 800988c:	ed15 7a06 	vldr	s14, [r5, #-24]	; 0xffffffe8
 8009890:	ed56 7a06 	vldr	s15, [r6, #-24]	; 0xffffffe8
 8009894:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009898:	ed44 7a06 	vstr	s15, [r4, #-24]	; 0xffffffe8
 800989c:	ed56 7a05 	vldr	s15, [r6, #-20]	; 0xffffffec
 80098a0:	ed15 7a05 	vldr	s14, [r5, #-20]	; 0xffffffec
 80098a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80098a8:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 80098ac:	d1d7      	bne.n	800985e <arm_mult_f32+0x16>
 80098ae:	ea4f 140c 	mov.w	r4, ip, lsl #4
 80098b2:	4420      	add	r0, r4
 80098b4:	4421      	add	r1, r4
 80098b6:	4422      	add	r2, r4
 80098b8:	f013 0303 	ands.w	r3, r3, #3
 80098bc:	d01b      	beq.n	80098f6 <arm_mult_f32+0xae>
 80098be:	edd1 7a00 	vldr	s15, [r1]
 80098c2:	3b01      	subs	r3, #1
 80098c4:	ed90 7a00 	vldr	s14, [r0]
 80098c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80098cc:	edc2 7a00 	vstr	s15, [r2]
 80098d0:	d011      	beq.n	80098f6 <arm_mult_f32+0xae>
 80098d2:	edd0 7a01 	vldr	s15, [r0, #4]
 80098d6:	2b01      	cmp	r3, #1
 80098d8:	ed91 7a01 	vldr	s14, [r1, #4]
 80098dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80098e0:	edc2 7a01 	vstr	s15, [r2, #4]
 80098e4:	d007      	beq.n	80098f6 <arm_mult_f32+0xae>
 80098e6:	edd0 7a02 	vldr	s15, [r0, #8]
 80098ea:	ed91 7a02 	vldr	s14, [r1, #8]
 80098ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80098f2:	edc2 7a02 	vstr	s15, [r2, #8]
 80098f6:	bcf0      	pop	{r4, r5, r6, r7}
 80098f8:	4770      	bx	lr
 80098fa:	bf00      	nop

080098fc <arm_radix8_butterfly_f32>:
 80098fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009900:	ed2d 8b10 	vpush	{d8-d15}
 8009904:	b095      	sub	sp, #84	; 0x54
 8009906:	468a      	mov	sl, r1
 8009908:	468b      	mov	fp, r1
 800990a:	eddf 8abb 	vldr	s17, [pc, #748]	; 8009bf8 <arm_radix8_butterfly_f32+0x2fc>
 800990e:	9012      	str	r0, [sp, #72]	; 0x48
 8009910:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 8009914:	4603      	mov	r3, r0
 8009916:	3304      	adds	r3, #4
 8009918:	9313      	str	r3, [sp, #76]	; 0x4c
 800991a:	ea4f 02db 	mov.w	r2, fp, lsr #3
 800991e:	9912      	ldr	r1, [sp, #72]	; 0x48
 8009920:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009924:	f8dd c04c 	ldr.w	ip, [sp, #76]	; 0x4c
 8009928:	ea4f 09c2 	mov.w	r9, r2, lsl #3
 800992c:	920f      	str	r2, [sp, #60]	; 0x3c
 800992e:	9303      	str	r3, [sp, #12]
 8009930:	0153      	lsls	r3, r2, #5
 8009932:	0114      	lsls	r4, r2, #4
 8009934:	eba9 0002 	sub.w	r0, r9, r2
 8009938:	18ce      	adds	r6, r1, r3
 800993a:	9302      	str	r3, [sp, #8]
 800993c:	0097      	lsls	r7, r2, #2
 800993e:	4613      	mov	r3, r2
 8009940:	eb06 0509 	add.w	r5, r6, r9
 8009944:	9004      	str	r0, [sp, #16]
 8009946:	eb03 0843 	add.w	r8, r3, r3, lsl #1
 800994a:	1bd2      	subs	r2, r2, r7
 800994c:	eb05 0109 	add.w	r1, r5, r9
 8009950:	441f      	add	r7, r3
 8009952:	9405      	str	r4, [sp, #20]
 8009954:	f109 0004 	add.w	r0, r9, #4
 8009958:	9101      	str	r1, [sp, #4]
 800995a:	1d21      	adds	r1, r4, #4
 800995c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800995e:	f04f 0e00 	mov.w	lr, #0
 8009962:	9c01      	ldr	r4, [sp, #4]
 8009964:	4418      	add	r0, r3
 8009966:	4419      	add	r1, r3
 8009968:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 800996c:	9b02      	ldr	r3, [sp, #8]
 800996e:	00fc      	lsls	r4, r7, #3
 8009970:	18d7      	adds	r7, r2, r3
 8009972:	9b04      	ldr	r3, [sp, #16]
 8009974:	9406      	str	r4, [sp, #24]
 8009976:	00db      	lsls	r3, r3, #3
 8009978:	9c01      	ldr	r4, [sp, #4]
 800997a:	9307      	str	r3, [sp, #28]
 800997c:	ea4f 1308 	mov.w	r3, r8, lsl #4
 8009980:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8009984:	9304      	str	r3, [sp, #16]
 8009986:	9b03      	ldr	r3, [sp, #12]
 8009988:	edd6 6a00 	vldr	s13, [r6]
 800998c:	44de      	add	lr, fp
 800998e:	ed5c 7a01 	vldr	s15, [ip, #-4]
 8009992:	ed94 7a00 	vldr	s14, [r4]
 8009996:	45f2      	cmp	sl, lr
 8009998:	ed10 6a01 	vldr	s12, [r0, #-4]
 800999c:	ee37 2aa6 	vadd.f32	s4, s15, s13
 80099a0:	edd5 2a00 	vldr	s5, [r5]
 80099a4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80099a8:	edd7 3a00 	vldr	s7, [r7]
 80099ac:	ed11 5a01 	vldr	s10, [r1, #-4]
 80099b0:	ee36 3a22 	vadd.f32	s6, s12, s5
 80099b4:	edd2 6a00 	vldr	s13, [r2]
 80099b8:	ee75 5a07 	vadd.f32	s11, s10, s14
 80099bc:	ee36 4aa3 	vadd.f32	s8, s13, s7
 80099c0:	ee76 6ae3 	vsub.f32	s13, s13, s7
 80099c4:	ee72 4a25 	vadd.f32	s9, s4, s11
 80099c8:	ee73 3a04 	vadd.f32	s7, s6, s8
 80099cc:	ee35 5a47 	vsub.f32	s10, s10, s14
 80099d0:	ee36 7a62 	vsub.f32	s14, s12, s5
 80099d4:	ee32 2a65 	vsub.f32	s4, s4, s11
 80099d8:	ee74 5aa3 	vadd.f32	s11, s9, s7
 80099dc:	ee74 4ae3 	vsub.f32	s9, s9, s7
 80099e0:	ee37 6a66 	vsub.f32	s12, s14, s13
 80099e4:	ed4c 5a01 	vstr	s11, [ip, #-4]
 80099e8:	ee33 3a44 	vsub.f32	s6, s6, s8
 80099ec:	edc6 4a00 	vstr	s9, [r6]
 80099f0:	ee37 7a26 	vadd.f32	s14, s14, s13
 80099f4:	ed97 4a01 	vldr	s8, [r7, #4]
 80099f8:	ee66 6a28 	vmul.f32	s13, s12, s17
 80099fc:	edd0 5a00 	vldr	s11, [r0]
 8009a00:	ed95 6a01 	vldr	s12, [r5, #4]
 8009a04:	ee27 7a28 	vmul.f32	s14, s14, s17
 8009a08:	edd2 3a01 	vldr	s7, [r2, #4]
 8009a0c:	ee77 2aa6 	vadd.f32	s5, s15, s13
 8009a10:	ee75 4ac6 	vsub.f32	s9, s11, s12
 8009a14:	ed96 1a01 	vldr	s2, [r6, #4]
 8009a18:	ee33 0ac4 	vsub.f32	s0, s7, s8
 8009a1c:	edd4 0a01 	vldr	s1, [r4, #4]
 8009a20:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009a24:	eddc 6a00 	vldr	s13, [ip]
 8009a28:	ee75 5a86 	vadd.f32	s11, s11, s12
 8009a2c:	ed91 6a00 	vldr	s12, [r1]
 8009a30:	ee73 3a84 	vadd.f32	s7, s7, s8
 8009a34:	ee74 1a80 	vadd.f32	s3, s9, s0
 8009a38:	ee36 4a81 	vadd.f32	s8, s13, s2
 8009a3c:	ee74 4ac0 	vsub.f32	s9, s9, s0
 8009a40:	ee76 6ac1 	vsub.f32	s13, s13, s2
 8009a44:	ee36 1a20 	vadd.f32	s2, s12, s1
 8009a48:	ee61 1aa8 	vmul.f32	s3, s3, s17
 8009a4c:	ee36 6a60 	vsub.f32	s12, s12, s1
 8009a50:	ee64 4aa8 	vmul.f32	s9, s9, s17
 8009a54:	ee75 0aa3 	vadd.f32	s1, s11, s7
 8009a58:	ee75 5ae3 	vsub.f32	s11, s11, s7
 8009a5c:	ee74 3a01 	vadd.f32	s7, s8, s2
 8009a60:	ee34 4a41 	vsub.f32	s8, s8, s2
 8009a64:	ee36 1a21 	vadd.f32	s2, s12, s3
 8009a68:	ee33 0aa0 	vadd.f32	s0, s7, s1
 8009a6c:	ee36 6a61 	vsub.f32	s12, s12, s3
 8009a70:	ee73 3ae0 	vsub.f32	s7, s7, s1
 8009a74:	ee76 1aa4 	vadd.f32	s3, s13, s9
 8009a78:	ed8c 0a00 	vstr	s0, [ip]
 8009a7c:	ee76 6ae4 	vsub.f32	s13, s13, s9
 8009a80:	449c      	add	ip, r3
 8009a82:	ee75 4a07 	vadd.f32	s9, s10, s14
 8009a86:	edc6 3a01 	vstr	s7, [r6, #4]
 8009a8a:	ee35 7a47 	vsub.f32	s14, s10, s14
 8009a8e:	441e      	add	r6, r3
 8009a90:	ee32 5a25 	vadd.f32	s10, s4, s11
 8009a94:	ee72 5a65 	vsub.f32	s11, s4, s11
 8009a98:	ee72 3a81 	vadd.f32	s7, s5, s2
 8009a9c:	ed01 5a01 	vstr	s10, [r1, #-4]
 8009aa0:	ee34 2a43 	vsub.f32	s4, s8, s6
 8009aa4:	edc4 5a00 	vstr	s11, [r4]
 8009aa8:	ee37 5a86 	vadd.f32	s10, s15, s12
 8009aac:	ee71 5ae4 	vsub.f32	s11, s3, s9
 8009ab0:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8009ab4:	ed81 2a00 	vstr	s4, [r1]
 8009ab8:	ee36 6ac7 	vsub.f32	s12, s13, s14
 8009abc:	4419      	add	r1, r3
 8009abe:	ee33 4a04 	vadd.f32	s8, s6, s8
 8009ac2:	ee72 2ac1 	vsub.f32	s5, s5, s2
 8009ac6:	ee74 4aa1 	vadd.f32	s9, s9, s3
 8009aca:	ee37 7a26 	vadd.f32	s14, s14, s13
 8009ace:	ed84 4a01 	vstr	s8, [r4, #4]
 8009ad2:	ed40 3a01 	vstr	s7, [r0, #-4]
 8009ad6:	441c      	add	r4, r3
 8009ad8:	edc7 2a00 	vstr	s5, [r7]
 8009adc:	ed85 5a00 	vstr	s10, [r5]
 8009ae0:	edc2 7a00 	vstr	s15, [r2]
 8009ae4:	edc0 5a00 	vstr	s11, [r0]
 8009ae8:	4418      	add	r0, r3
 8009aea:	edc7 4a01 	vstr	s9, [r7, #4]
 8009aee:	441f      	add	r7, r3
 8009af0:	ed85 6a01 	vstr	s12, [r5, #4]
 8009af4:	441d      	add	r5, r3
 8009af6:	ed82 7a01 	vstr	s14, [r2, #4]
 8009afa:	441a      	add	r2, r3
 8009afc:	f63f af44 	bhi.w	8009988 <arm_radix8_butterfly_f32+0x8c>
 8009b00:	469c      	mov	ip, r3
 8009b02:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009b04:	2b07      	cmp	r3, #7
 8009b06:	f240 81b6 	bls.w	8009e76 <arm_radix8_butterfly_f32+0x57a>
 8009b0a:	9a02      	ldr	r2, [sp, #8]
 8009b0c:	f109 0608 	add.w	r6, r9, #8
 8009b10:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009b12:	f108 0408 	add.w	r4, r8, #8
 8009b16:	3208      	adds	r2, #8
 8009b18:	9f06      	ldr	r7, [sp, #24]
 8009b1a:	9d04      	ldr	r5, [sp, #16]
 8009b1c:	189a      	adds	r2, r3, r2
 8009b1e:	3708      	adds	r7, #8
 8009b20:	3508      	adds	r5, #8
 8009b22:	9807      	ldr	r0, [sp, #28]
 8009b24:	920c      	str	r2, [sp, #48]	; 0x30
 8009b26:	199a      	adds	r2, r3, r6
 8009b28:	9905      	ldr	r1, [sp, #20]
 8009b2a:	3008      	adds	r0, #8
 8009b2c:	920b      	str	r2, [sp, #44]	; 0x2c
 8009b2e:	19da      	adds	r2, r3, r7
 8009b30:	310c      	adds	r1, #12
 8009b32:	920a      	str	r2, [sp, #40]	; 0x28
 8009b34:	195a      	adds	r2, r3, r5
 8009b36:	9209      	str	r2, [sp, #36]	; 0x24
 8009b38:	191a      	adds	r2, r3, r4
 8009b3a:	9208      	str	r2, [sp, #32]
 8009b3c:	181a      	adds	r2, r3, r0
 8009b3e:	9207      	str	r2, [sp, #28]
 8009b40:	185a      	adds	r2, r3, r1
 8009b42:	330c      	adds	r3, #12
 8009b44:	9205      	str	r2, [sp, #20]
 8009b46:	9306      	str	r3, [sp, #24]
 8009b48:	2301      	movs	r3, #1
 8009b4a:	9304      	str	r3, [sp, #16]
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	930d      	str	r3, [sp, #52]	; 0x34
 8009b50:	4663      	mov	r3, ip
 8009b52:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009b54:	9910      	ldr	r1, [sp, #64]	; 0x40
 8009b56:	f8dd c014 	ldr.w	ip, [sp, #20]
 8009b5a:	440a      	add	r2, r1
 8009b5c:	9f06      	ldr	r7, [sp, #24]
 8009b5e:	9e07      	ldr	r6, [sp, #28]
 8009b60:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 8009b64:	920d      	str	r2, [sp, #52]	; 0x34
 8009b66:	eba2 0e82 	sub.w	lr, r2, r2, lsl #2
 8009b6a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009b6c:	9d08      	ldr	r5, [sp, #32]
 8009b6e:	4442      	add	r2, r8
 8009b70:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8009b72:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009b74:	eb02 0108 	add.w	r1, r2, r8
 8009b78:	ed92 ea00 	vldr	s28, [r2]
 8009b7c:	eb01 0208 	add.w	r2, r1, r8
 8009b80:	edd1 da00 	vldr	s27, [r1]
 8009b84:	eb02 0108 	add.w	r1, r2, r8
 8009b88:	ed92 da00 	vldr	s26, [r2]
 8009b8c:	eb01 0208 	add.w	r2, r1, r8
 8009b90:	edd1 ca00 	vldr	s25, [r1]
 8009b94:	eb02 0108 	add.w	r1, r2, r8
 8009b98:	ed92 ca00 	vldr	s24, [r2]
 8009b9c:	eb01 0208 	add.w	r2, r1, r8
 8009ba0:	edd1 ba00 	vldr	s23, [r1]
 8009ba4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009ba6:	eb02 1e0e 	add.w	lr, r2, lr, lsl #4
 8009baa:	ed92 ba00 	vldr	s22, [r2]
 8009bae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009bb0:	eb0e 0908 	add.w	r9, lr, r8
 8009bb4:	910e      	str	r1, [sp, #56]	; 0x38
 8009bb6:	9201      	str	r2, [sp, #4]
 8009bb8:	eb09 0208 	add.w	r2, r9, r8
 8009bbc:	ed99 aa01 	vldr	s20, [r9, #4]
 8009bc0:	edde aa01 	vldr	s21, [lr, #4]
 8009bc4:	eb02 0908 	add.w	r9, r2, r8
 8009bc8:	edd2 9a01 	vldr	s19, [r2, #4]
 8009bcc:	f8dd e010 	ldr.w	lr, [sp, #16]
 8009bd0:	eb09 0208 	add.w	r2, r9, r8
 8009bd4:	ed99 9a01 	vldr	s18, [r9, #4]
 8009bd8:	eb02 0908 	add.w	r9, r2, r8
 8009bdc:	ed92 8a01 	vldr	s16, [r2, #4]
 8009be0:	9a01      	ldr	r2, [sp, #4]
 8009be2:	edd9 7a01 	vldr	s15, [r9, #4]
 8009be6:	44c8      	add	r8, r9
 8009be8:	edcd 7a02 	vstr	s15, [sp, #8]
 8009bec:	edd8 7a01 	vldr	s15, [r8, #4]
 8009bf0:	edcd 7a03 	vstr	s15, [sp, #12]
 8009bf4:	990e      	ldr	r1, [sp, #56]	; 0x38
 8009bf6:	e001      	b.n	8009bfc <arm_radix8_butterfly_f32+0x300>
 8009bf8:	3f3504f3 	.word	0x3f3504f3
 8009bfc:	ed92 7a00 	vldr	s14, [r2]
 8009c00:	44de      	add	lr, fp
 8009c02:	ed17 1a01 	vldr	s2, [r7, #-4]
 8009c06:	ed90 5a00 	vldr	s10, [r0]
 8009c0a:	45f2      	cmp	sl, lr
 8009c0c:	ed1c fa01 	vldr	s30, [ip, #-4]
 8009c10:	ee31 3a07 	vadd.f32	s6, s2, s14
 8009c14:	edd6 5a00 	vldr	s11, [r6]
 8009c18:	ee31 1a47 	vsub.f32	s2, s2, s14
 8009c1c:	edd4 7a00 	vldr	s15, [r4]
 8009c20:	ed95 7a00 	vldr	s14, [r5]
 8009c24:	ed91 4a00 	vldr	s8, [r1]
 8009c28:	ee3f 6a27 	vadd.f32	s12, s30, s15
 8009c2c:	ee77 6a25 	vadd.f32	s13, s14, s11
 8009c30:	edd7 ea00 	vldr	s29, [r7]
 8009c34:	ee74 fa05 	vadd.f32	s31, s8, s10
 8009c38:	ee73 1a06 	vadd.f32	s3, s6, s12
 8009c3c:	ee34 4a45 	vsub.f32	s8, s8, s10
 8009c40:	ee3f 5aa6 	vadd.f32	s10, s31, s13
 8009c44:	ee37 7a65 	vsub.f32	s14, s14, s11
 8009c48:	ee33 3a46 	vsub.f32	s6, s6, s12
 8009c4c:	ee31 6a85 	vadd.f32	s12, s3, s10
 8009c50:	ee7f 7a67 	vsub.f32	s15, s30, s15
 8009c54:	ee34 fa07 	vadd.f32	s30, s8, s14
 8009c58:	ed07 6a01 	vstr	s12, [r7, #-4]
 8009c5c:	ee34 4a47 	vsub.f32	s8, s8, s14
 8009c60:	edd5 3a01 	vldr	s7, [r5, #4]
 8009c64:	ee7f fae6 	vsub.f32	s31, s31, s13
 8009c68:	ed90 7a01 	vldr	s14, [r0, #4]
 8009c6c:	ee2f fa28 	vmul.f32	s30, s30, s17
 8009c70:	edd1 5a01 	vldr	s11, [r1, #4]
 8009c74:	ee24 4a28 	vmul.f32	s8, s8, s17
 8009c78:	ed96 6a01 	vldr	s12, [r6, #4]
 8009c7c:	ee31 5ac5 	vsub.f32	s10, s3, s10
 8009c80:	ee75 0ac7 	vsub.f32	s1, s11, s14
 8009c84:	edd2 6a01 	vldr	s13, [r2, #4]
 8009c88:	ee73 2ac6 	vsub.f32	s5, s7, s12
 8009c8c:	edd4 4a01 	vldr	s9, [r4, #4]
 8009c90:	ee75 5a87 	vadd.f32	s11, s11, s14
 8009c94:	ed9c 7a00 	vldr	s14, [ip]
 8009c98:	ee37 2a8f 	vadd.f32	s4, s15, s30
 8009c9c:	ee33 6a86 	vadd.f32	s12, s7, s12
 8009ca0:	ee37 facf 	vsub.f32	s30, s15, s30
 8009ca4:	ee7e 3aa6 	vadd.f32	s7, s29, s13
 8009ca8:	ee70 7ae2 	vsub.f32	s15, s1, s5
 8009cac:	ee7e eae6 	vsub.f32	s29, s29, s13
 8009cb0:	ee70 2aa2 	vadd.f32	s5, s1, s5
 8009cb4:	ee77 6a24 	vadd.f32	s13, s14, s9
 8009cb8:	ee75 0a86 	vadd.f32	s1, s11, s12
 8009cbc:	ee37 7a64 	vsub.f32	s14, s14, s9
 8009cc0:	ee33 0aa6 	vadd.f32	s0, s7, s13
 8009cc4:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8009cc8:	ee62 2aa8 	vmul.f32	s5, s5, s17
 8009ccc:	ee35 6ac6 	vsub.f32	s12, s11, s12
 8009cd0:	ee73 3ae6 	vsub.f32	s7, s7, s13
 8009cd4:	ee7e 5aa7 	vadd.f32	s11, s29, s15
 8009cd8:	ee77 4a22 	vadd.f32	s9, s14, s5
 8009cdc:	ee7e eae7 	vsub.f32	s29, s29, s15
 8009ce0:	ee77 7a62 	vsub.f32	s15, s14, s5
 8009ce4:	ee71 2a04 	vadd.f32	s5, s2, s8
 8009ce8:	ee31 7a44 	vsub.f32	s14, s2, s8
 8009cec:	ee30 1a60 	vsub.f32	s2, s0, s1
 8009cf0:	ee73 1a06 	vadd.f32	s3, s6, s12
 8009cf4:	ee33 6a46 	vsub.f32	s12, s6, s12
 8009cf8:	ee33 3aef 	vsub.f32	s6, s7, s31
 8009cfc:	ee7f 6aa3 	vadd.f32	s13, s31, s7
 8009d00:	ee3e 4acf 	vsub.f32	s8, s29, s30
 8009d04:	ee75 3ac2 	vsub.f32	s7, s11, s4
 8009d08:	ee72 5a25 	vadd.f32	s11, s4, s11
 8009d0c:	ee32 2aa4 	vadd.f32	s4, s5, s9
 8009d10:	ee72 4ae4 	vsub.f32	s9, s5, s9
 8009d14:	ee77 2a27 	vadd.f32	s5, s14, s15
 8009d18:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009d1c:	ee7f 7a2e 	vadd.f32	s15, s30, s29
 8009d20:	ee2c fa85 	vmul.f32	s30, s25, s10
 8009d24:	ee69 ea01 	vmul.f32	s29, s18, s2
 8009d28:	ee29 5a05 	vmul.f32	s10, s18, s10
 8009d2c:	ee2c 1a81 	vmul.f32	s2, s25, s2
 8009d30:	ee6d faa1 	vmul.f32	s31, s27, s3
 8009d34:	ee70 0a20 	vadd.f32	s1, s0, s1
 8009d38:	ee6a 1a21 	vmul.f32	s3, s20, s3
 8009d3c:	ee2a 0a03 	vmul.f32	s0, s20, s6
 8009d40:	ee2d 3a83 	vmul.f32	s6, s27, s6
 8009d44:	edc7 0a00 	vstr	s1, [r7]
 8009d48:	ee7f ea2e 	vadd.f32	s29, s30, s29
 8009d4c:	441f      	add	r7, r3
 8009d4e:	ee2a faa3 	vmul.f32	s30, s21, s7
 8009d52:	ee31 5a45 	vsub.f32	s10, s2, s10
 8009d56:	ee6e 3a23 	vmul.f32	s7, s28, s7
 8009d5a:	edc2 ea00 	vstr	s29, [r2]
 8009d5e:	ee3f 0a80 	vadd.f32	s0, s31, s0
 8009d62:	ee33 3a61 	vsub.f32	s6, s6, s3
 8009d66:	ed82 5a01 	vstr	s10, [r2, #4]
 8009d6a:	ee6e 0a02 	vmul.f32	s1, s28, s4
 8009d6e:	edcd 3a01 	vstr	s7, [sp, #4]
 8009d72:	ed9d 5a03 	vldr	s10, [sp, #12]
 8009d76:	ee6b ea86 	vmul.f32	s29, s23, s12
 8009d7a:	eddd 3a02 	vldr	s7, [sp, #8]
 8009d7e:	ee6b fa24 	vmul.f32	s31, s22, s9
 8009d82:	ed0c 0a01 	vstr	s0, [ip, #-4]
 8009d86:	ee65 4a24 	vmul.f32	s9, s10, s9
 8009d8a:	ed8c 3a00 	vstr	s6, [ip]
 8009d8e:	ee23 1aa6 	vmul.f32	s2, s7, s13
 8009d92:	ee23 6a86 	vmul.f32	s12, s7, s12
 8009d96:	eddd 3a01 	vldr	s7, [sp, #4]
 8009d9a:	ee25 5a25 	vmul.f32	s10, s10, s11
 8009d9e:	441a      	add	r2, r3
 8009da0:	ee2c 0a22 	vmul.f32	s0, s24, s5
 8009da4:	449c      	add	ip, r3
 8009da6:	ee68 1a04 	vmul.f32	s3, s16, s8
 8009daa:	ee70 0a8f 	vadd.f32	s1, s1, s30
 8009dae:	ee2d 3a07 	vmul.f32	s6, s26, s14
 8009db2:	ee29 faa7 	vmul.f32	s30, s19, s15
 8009db6:	ee2a 2a82 	vmul.f32	s4, s21, s4
 8009dba:	ee6b 6aa6 	vmul.f32	s13, s23, s13
 8009dbe:	ee6b 5a25 	vmul.f32	s11, s22, s11
 8009dc2:	ee68 2a22 	vmul.f32	s5, s16, s5
 8009dc6:	ee2c 4a04 	vmul.f32	s8, s24, s8
 8009dca:	ee29 7a87 	vmul.f32	s14, s19, s14
 8009dce:	ee6d 7a27 	vmul.f32	s15, s26, s15
 8009dd2:	ee73 3ac2 	vsub.f32	s7, s7, s4
 8009dd6:	ee7e ea81 	vadd.f32	s29, s29, s2
 8009dda:	ee36 6ac6 	vsub.f32	s12, s13, s12
 8009dde:	ee3f 5a85 	vadd.f32	s10, s31, s10
 8009de2:	ee75 4ae4 	vsub.f32	s9, s11, s9
 8009de6:	edc4 ea00 	vstr	s29, [r4]
 8009dea:	ee30 0a21 	vadd.f32	s0, s0, s3
 8009dee:	ed84 6a01 	vstr	s12, [r4, #4]
 8009df2:	ee74 2a62 	vsub.f32	s5, s8, s5
 8009df6:	edc1 0a00 	vstr	s1, [r1]
 8009dfa:	ee33 3a0f 	vadd.f32	s6, s6, s30
 8009dfe:	edc1 3a01 	vstr	s7, [r1, #4]
 8009e02:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8009e06:	ed86 5a00 	vstr	s10, [r6]
 8009e0a:	edc6 4a01 	vstr	s9, [r6, #4]
 8009e0e:	4419      	add	r1, r3
 8009e10:	ed80 0a00 	vstr	s0, [r0]
 8009e14:	441c      	add	r4, r3
 8009e16:	edc0 2a01 	vstr	s5, [r0, #4]
 8009e1a:	441e      	add	r6, r3
 8009e1c:	ed85 3a00 	vstr	s6, [r5]
 8009e20:	4418      	add	r0, r3
 8009e22:	ed85 7a01 	vstr	s14, [r5, #4]
 8009e26:	441d      	add	r5, r3
 8009e28:	f63f aee8 	bhi.w	8009bfc <arm_radix8_butterfly_f32+0x300>
 8009e2c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009e2e:	9a04      	ldr	r2, [sp, #16]
 8009e30:	3108      	adds	r1, #8
 8009e32:	3201      	adds	r2, #1
 8009e34:	910c      	str	r1, [sp, #48]	; 0x30
 8009e36:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009e38:	9204      	str	r2, [sp, #16]
 8009e3a:	3108      	adds	r1, #8
 8009e3c:	910b      	str	r1, [sp, #44]	; 0x2c
 8009e3e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009e40:	3108      	adds	r1, #8
 8009e42:	910a      	str	r1, [sp, #40]	; 0x28
 8009e44:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009e46:	3108      	adds	r1, #8
 8009e48:	9109      	str	r1, [sp, #36]	; 0x24
 8009e4a:	9908      	ldr	r1, [sp, #32]
 8009e4c:	3108      	adds	r1, #8
 8009e4e:	9108      	str	r1, [sp, #32]
 8009e50:	9907      	ldr	r1, [sp, #28]
 8009e52:	3108      	adds	r1, #8
 8009e54:	9107      	str	r1, [sp, #28]
 8009e56:	9906      	ldr	r1, [sp, #24]
 8009e58:	3108      	adds	r1, #8
 8009e5a:	9106      	str	r1, [sp, #24]
 8009e5c:	9905      	ldr	r1, [sp, #20]
 8009e5e:	3108      	adds	r1, #8
 8009e60:	9105      	str	r1, [sp, #20]
 8009e62:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009e64:	4291      	cmp	r1, r2
 8009e66:	f47f ae74 	bne.w	8009b52 <arm_radix8_butterfly_f32+0x256>
 8009e6a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009e6c:	468b      	mov	fp, r1
 8009e6e:	00db      	lsls	r3, r3, #3
 8009e70:	b29b      	uxth	r3, r3
 8009e72:	9310      	str	r3, [sp, #64]	; 0x40
 8009e74:	e551      	b.n	800991a <arm_radix8_butterfly_f32+0x1e>
 8009e76:	b015      	add	sp, #84	; 0x54
 8009e78:	ecbd 8b10 	vpop	{d8-d15}
 8009e7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009e80 <malloc>:
 8009e80:	4b02      	ldr	r3, [pc, #8]	; (8009e8c <malloc+0xc>)
 8009e82:	4601      	mov	r1, r0
 8009e84:	6818      	ldr	r0, [r3, #0]
 8009e86:	f000 b82b 	b.w	8009ee0 <_malloc_r>
 8009e8a:	bf00      	nop
 8009e8c:	2400667c 	.word	0x2400667c

08009e90 <free>:
 8009e90:	4b02      	ldr	r3, [pc, #8]	; (8009e9c <free+0xc>)
 8009e92:	4601      	mov	r1, r0
 8009e94:	6818      	ldr	r0, [r3, #0]
 8009e96:	f001 bc7f 	b.w	800b798 <_free_r>
 8009e9a:	bf00      	nop
 8009e9c:	2400667c 	.word	0x2400667c

08009ea0 <sbrk_aligned>:
 8009ea0:	b570      	push	{r4, r5, r6, lr}
 8009ea2:	4e0e      	ldr	r6, [pc, #56]	; (8009edc <sbrk_aligned+0x3c>)
 8009ea4:	460c      	mov	r4, r1
 8009ea6:	6831      	ldr	r1, [r6, #0]
 8009ea8:	4605      	mov	r5, r0
 8009eaa:	b911      	cbnz	r1, 8009eb2 <sbrk_aligned+0x12>
 8009eac:	f000 fe32 	bl	800ab14 <_sbrk_r>
 8009eb0:	6030      	str	r0, [r6, #0]
 8009eb2:	4621      	mov	r1, r4
 8009eb4:	4628      	mov	r0, r5
 8009eb6:	f000 fe2d 	bl	800ab14 <_sbrk_r>
 8009eba:	1c43      	adds	r3, r0, #1
 8009ebc:	d00a      	beq.n	8009ed4 <sbrk_aligned+0x34>
 8009ebe:	1cc4      	adds	r4, r0, #3
 8009ec0:	f024 0403 	bic.w	r4, r4, #3
 8009ec4:	42a0      	cmp	r0, r4
 8009ec6:	d007      	beq.n	8009ed8 <sbrk_aligned+0x38>
 8009ec8:	1a21      	subs	r1, r4, r0
 8009eca:	4628      	mov	r0, r5
 8009ecc:	f000 fe22 	bl	800ab14 <_sbrk_r>
 8009ed0:	3001      	adds	r0, #1
 8009ed2:	d101      	bne.n	8009ed8 <sbrk_aligned+0x38>
 8009ed4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009ed8:	4620      	mov	r0, r4
 8009eda:	bd70      	pop	{r4, r5, r6, pc}
 8009edc:	24008620 	.word	0x24008620

08009ee0 <_malloc_r>:
 8009ee0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ee4:	1ccd      	adds	r5, r1, #3
 8009ee6:	f025 0503 	bic.w	r5, r5, #3
 8009eea:	3508      	adds	r5, #8
 8009eec:	2d0c      	cmp	r5, #12
 8009eee:	bf38      	it	cc
 8009ef0:	250c      	movcc	r5, #12
 8009ef2:	2d00      	cmp	r5, #0
 8009ef4:	4607      	mov	r7, r0
 8009ef6:	db01      	blt.n	8009efc <_malloc_r+0x1c>
 8009ef8:	42a9      	cmp	r1, r5
 8009efa:	d905      	bls.n	8009f08 <_malloc_r+0x28>
 8009efc:	230c      	movs	r3, #12
 8009efe:	603b      	str	r3, [r7, #0]
 8009f00:	2600      	movs	r6, #0
 8009f02:	4630      	mov	r0, r6
 8009f04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f08:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009fdc <_malloc_r+0xfc>
 8009f0c:	f000 f868 	bl	8009fe0 <__malloc_lock>
 8009f10:	f8d8 3000 	ldr.w	r3, [r8]
 8009f14:	461c      	mov	r4, r3
 8009f16:	bb5c      	cbnz	r4, 8009f70 <_malloc_r+0x90>
 8009f18:	4629      	mov	r1, r5
 8009f1a:	4638      	mov	r0, r7
 8009f1c:	f7ff ffc0 	bl	8009ea0 <sbrk_aligned>
 8009f20:	1c43      	adds	r3, r0, #1
 8009f22:	4604      	mov	r4, r0
 8009f24:	d155      	bne.n	8009fd2 <_malloc_r+0xf2>
 8009f26:	f8d8 4000 	ldr.w	r4, [r8]
 8009f2a:	4626      	mov	r6, r4
 8009f2c:	2e00      	cmp	r6, #0
 8009f2e:	d145      	bne.n	8009fbc <_malloc_r+0xdc>
 8009f30:	2c00      	cmp	r4, #0
 8009f32:	d048      	beq.n	8009fc6 <_malloc_r+0xe6>
 8009f34:	6823      	ldr	r3, [r4, #0]
 8009f36:	4631      	mov	r1, r6
 8009f38:	4638      	mov	r0, r7
 8009f3a:	eb04 0903 	add.w	r9, r4, r3
 8009f3e:	f000 fde9 	bl	800ab14 <_sbrk_r>
 8009f42:	4581      	cmp	r9, r0
 8009f44:	d13f      	bne.n	8009fc6 <_malloc_r+0xe6>
 8009f46:	6821      	ldr	r1, [r4, #0]
 8009f48:	1a6d      	subs	r5, r5, r1
 8009f4a:	4629      	mov	r1, r5
 8009f4c:	4638      	mov	r0, r7
 8009f4e:	f7ff ffa7 	bl	8009ea0 <sbrk_aligned>
 8009f52:	3001      	adds	r0, #1
 8009f54:	d037      	beq.n	8009fc6 <_malloc_r+0xe6>
 8009f56:	6823      	ldr	r3, [r4, #0]
 8009f58:	442b      	add	r3, r5
 8009f5a:	6023      	str	r3, [r4, #0]
 8009f5c:	f8d8 3000 	ldr.w	r3, [r8]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d038      	beq.n	8009fd6 <_malloc_r+0xf6>
 8009f64:	685a      	ldr	r2, [r3, #4]
 8009f66:	42a2      	cmp	r2, r4
 8009f68:	d12b      	bne.n	8009fc2 <_malloc_r+0xe2>
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	605a      	str	r2, [r3, #4]
 8009f6e:	e00f      	b.n	8009f90 <_malloc_r+0xb0>
 8009f70:	6822      	ldr	r2, [r4, #0]
 8009f72:	1b52      	subs	r2, r2, r5
 8009f74:	d41f      	bmi.n	8009fb6 <_malloc_r+0xd6>
 8009f76:	2a0b      	cmp	r2, #11
 8009f78:	d917      	bls.n	8009faa <_malloc_r+0xca>
 8009f7a:	1961      	adds	r1, r4, r5
 8009f7c:	42a3      	cmp	r3, r4
 8009f7e:	6025      	str	r5, [r4, #0]
 8009f80:	bf18      	it	ne
 8009f82:	6059      	strne	r1, [r3, #4]
 8009f84:	6863      	ldr	r3, [r4, #4]
 8009f86:	bf08      	it	eq
 8009f88:	f8c8 1000 	streq.w	r1, [r8]
 8009f8c:	5162      	str	r2, [r4, r5]
 8009f8e:	604b      	str	r3, [r1, #4]
 8009f90:	4638      	mov	r0, r7
 8009f92:	f104 060b 	add.w	r6, r4, #11
 8009f96:	f000 f829 	bl	8009fec <__malloc_unlock>
 8009f9a:	f026 0607 	bic.w	r6, r6, #7
 8009f9e:	1d23      	adds	r3, r4, #4
 8009fa0:	1af2      	subs	r2, r6, r3
 8009fa2:	d0ae      	beq.n	8009f02 <_malloc_r+0x22>
 8009fa4:	1b9b      	subs	r3, r3, r6
 8009fa6:	50a3      	str	r3, [r4, r2]
 8009fa8:	e7ab      	b.n	8009f02 <_malloc_r+0x22>
 8009faa:	42a3      	cmp	r3, r4
 8009fac:	6862      	ldr	r2, [r4, #4]
 8009fae:	d1dd      	bne.n	8009f6c <_malloc_r+0x8c>
 8009fb0:	f8c8 2000 	str.w	r2, [r8]
 8009fb4:	e7ec      	b.n	8009f90 <_malloc_r+0xb0>
 8009fb6:	4623      	mov	r3, r4
 8009fb8:	6864      	ldr	r4, [r4, #4]
 8009fba:	e7ac      	b.n	8009f16 <_malloc_r+0x36>
 8009fbc:	4634      	mov	r4, r6
 8009fbe:	6876      	ldr	r6, [r6, #4]
 8009fc0:	e7b4      	b.n	8009f2c <_malloc_r+0x4c>
 8009fc2:	4613      	mov	r3, r2
 8009fc4:	e7cc      	b.n	8009f60 <_malloc_r+0x80>
 8009fc6:	230c      	movs	r3, #12
 8009fc8:	603b      	str	r3, [r7, #0]
 8009fca:	4638      	mov	r0, r7
 8009fcc:	f000 f80e 	bl	8009fec <__malloc_unlock>
 8009fd0:	e797      	b.n	8009f02 <_malloc_r+0x22>
 8009fd2:	6025      	str	r5, [r4, #0]
 8009fd4:	e7dc      	b.n	8009f90 <_malloc_r+0xb0>
 8009fd6:	605b      	str	r3, [r3, #4]
 8009fd8:	deff      	udf	#255	; 0xff
 8009fda:	bf00      	nop
 8009fdc:	2400861c 	.word	0x2400861c

08009fe0 <__malloc_lock>:
 8009fe0:	4801      	ldr	r0, [pc, #4]	; (8009fe8 <__malloc_lock+0x8>)
 8009fe2:	f000 bde3 	b.w	800abac <__retarget_lock_acquire_recursive>
 8009fe6:	bf00      	nop
 8009fe8:	24008764 	.word	0x24008764

08009fec <__malloc_unlock>:
 8009fec:	4801      	ldr	r0, [pc, #4]	; (8009ff4 <__malloc_unlock+0x8>)
 8009fee:	f000 bdde 	b.w	800abae <__retarget_lock_release_recursive>
 8009ff2:	bf00      	nop
 8009ff4:	24008764 	.word	0x24008764

08009ff8 <__cvt>:
 8009ff8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ffa:	ed2d 8b02 	vpush	{d8}
 8009ffe:	eeb0 8b40 	vmov.f64	d8, d0
 800a002:	b085      	sub	sp, #20
 800a004:	4617      	mov	r7, r2
 800a006:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800a008:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800a00a:	ee18 2a90 	vmov	r2, s17
 800a00e:	f025 0520 	bic.w	r5, r5, #32
 800a012:	2a00      	cmp	r2, #0
 800a014:	bfb6      	itet	lt
 800a016:	222d      	movlt	r2, #45	; 0x2d
 800a018:	2200      	movge	r2, #0
 800a01a:	eeb1 8b40 	vneglt.f64	d8, d0
 800a01e:	2d46      	cmp	r5, #70	; 0x46
 800a020:	460c      	mov	r4, r1
 800a022:	701a      	strb	r2, [r3, #0]
 800a024:	d004      	beq.n	800a030 <__cvt+0x38>
 800a026:	2d45      	cmp	r5, #69	; 0x45
 800a028:	d100      	bne.n	800a02c <__cvt+0x34>
 800a02a:	3401      	adds	r4, #1
 800a02c:	2102      	movs	r1, #2
 800a02e:	e000      	b.n	800a032 <__cvt+0x3a>
 800a030:	2103      	movs	r1, #3
 800a032:	ab03      	add	r3, sp, #12
 800a034:	9301      	str	r3, [sp, #4]
 800a036:	ab02      	add	r3, sp, #8
 800a038:	9300      	str	r3, [sp, #0]
 800a03a:	4622      	mov	r2, r4
 800a03c:	4633      	mov	r3, r6
 800a03e:	eeb0 0b48 	vmov.f64	d0, d8
 800a042:	f000 fe3d 	bl	800acc0 <_dtoa_r>
 800a046:	2d47      	cmp	r5, #71	; 0x47
 800a048:	d101      	bne.n	800a04e <__cvt+0x56>
 800a04a:	07fb      	lsls	r3, r7, #31
 800a04c:	d51a      	bpl.n	800a084 <__cvt+0x8c>
 800a04e:	2d46      	cmp	r5, #70	; 0x46
 800a050:	eb00 0204 	add.w	r2, r0, r4
 800a054:	d10c      	bne.n	800a070 <__cvt+0x78>
 800a056:	7803      	ldrb	r3, [r0, #0]
 800a058:	2b30      	cmp	r3, #48	; 0x30
 800a05a:	d107      	bne.n	800a06c <__cvt+0x74>
 800a05c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800a060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a064:	bf1c      	itt	ne
 800a066:	f1c4 0401 	rsbne	r4, r4, #1
 800a06a:	6034      	strne	r4, [r6, #0]
 800a06c:	6833      	ldr	r3, [r6, #0]
 800a06e:	441a      	add	r2, r3
 800a070:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800a074:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a078:	bf08      	it	eq
 800a07a:	9203      	streq	r2, [sp, #12]
 800a07c:	2130      	movs	r1, #48	; 0x30
 800a07e:	9b03      	ldr	r3, [sp, #12]
 800a080:	4293      	cmp	r3, r2
 800a082:	d307      	bcc.n	800a094 <__cvt+0x9c>
 800a084:	9b03      	ldr	r3, [sp, #12]
 800a086:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a088:	1a1b      	subs	r3, r3, r0
 800a08a:	6013      	str	r3, [r2, #0]
 800a08c:	b005      	add	sp, #20
 800a08e:	ecbd 8b02 	vpop	{d8}
 800a092:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a094:	1c5c      	adds	r4, r3, #1
 800a096:	9403      	str	r4, [sp, #12]
 800a098:	7019      	strb	r1, [r3, #0]
 800a09a:	e7f0      	b.n	800a07e <__cvt+0x86>

0800a09c <__exponent>:
 800a09c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a09e:	4603      	mov	r3, r0
 800a0a0:	2900      	cmp	r1, #0
 800a0a2:	bfb8      	it	lt
 800a0a4:	4249      	neglt	r1, r1
 800a0a6:	f803 2b02 	strb.w	r2, [r3], #2
 800a0aa:	bfb4      	ite	lt
 800a0ac:	222d      	movlt	r2, #45	; 0x2d
 800a0ae:	222b      	movge	r2, #43	; 0x2b
 800a0b0:	2909      	cmp	r1, #9
 800a0b2:	7042      	strb	r2, [r0, #1]
 800a0b4:	dd2a      	ble.n	800a10c <__exponent+0x70>
 800a0b6:	f10d 0207 	add.w	r2, sp, #7
 800a0ba:	4617      	mov	r7, r2
 800a0bc:	260a      	movs	r6, #10
 800a0be:	4694      	mov	ip, r2
 800a0c0:	fb91 f5f6 	sdiv	r5, r1, r6
 800a0c4:	fb06 1415 	mls	r4, r6, r5, r1
 800a0c8:	3430      	adds	r4, #48	; 0x30
 800a0ca:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800a0ce:	460c      	mov	r4, r1
 800a0d0:	2c63      	cmp	r4, #99	; 0x63
 800a0d2:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 800a0d6:	4629      	mov	r1, r5
 800a0d8:	dcf1      	bgt.n	800a0be <__exponent+0x22>
 800a0da:	3130      	adds	r1, #48	; 0x30
 800a0dc:	f1ac 0402 	sub.w	r4, ip, #2
 800a0e0:	f802 1c01 	strb.w	r1, [r2, #-1]
 800a0e4:	1c41      	adds	r1, r0, #1
 800a0e6:	4622      	mov	r2, r4
 800a0e8:	42ba      	cmp	r2, r7
 800a0ea:	d30a      	bcc.n	800a102 <__exponent+0x66>
 800a0ec:	f10d 0209 	add.w	r2, sp, #9
 800a0f0:	eba2 020c 	sub.w	r2, r2, ip
 800a0f4:	42bc      	cmp	r4, r7
 800a0f6:	bf88      	it	hi
 800a0f8:	2200      	movhi	r2, #0
 800a0fa:	4413      	add	r3, r2
 800a0fc:	1a18      	subs	r0, r3, r0
 800a0fe:	b003      	add	sp, #12
 800a100:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a102:	f812 5b01 	ldrb.w	r5, [r2], #1
 800a106:	f801 5f01 	strb.w	r5, [r1, #1]!
 800a10a:	e7ed      	b.n	800a0e8 <__exponent+0x4c>
 800a10c:	2330      	movs	r3, #48	; 0x30
 800a10e:	3130      	adds	r1, #48	; 0x30
 800a110:	7083      	strb	r3, [r0, #2]
 800a112:	70c1      	strb	r1, [r0, #3]
 800a114:	1d03      	adds	r3, r0, #4
 800a116:	e7f1      	b.n	800a0fc <__exponent+0x60>

0800a118 <_printf_float>:
 800a118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a11c:	b08b      	sub	sp, #44	; 0x2c
 800a11e:	460c      	mov	r4, r1
 800a120:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800a124:	4616      	mov	r6, r2
 800a126:	461f      	mov	r7, r3
 800a128:	4605      	mov	r5, r0
 800a12a:	f000 fcbb 	bl	800aaa4 <_localeconv_r>
 800a12e:	f8d0 b000 	ldr.w	fp, [r0]
 800a132:	4658      	mov	r0, fp
 800a134:	f7f6 f93c 	bl	80003b0 <strlen>
 800a138:	2300      	movs	r3, #0
 800a13a:	9308      	str	r3, [sp, #32]
 800a13c:	f8d8 3000 	ldr.w	r3, [r8]
 800a140:	f894 9018 	ldrb.w	r9, [r4, #24]
 800a144:	6822      	ldr	r2, [r4, #0]
 800a146:	3307      	adds	r3, #7
 800a148:	f023 0307 	bic.w	r3, r3, #7
 800a14c:	f103 0108 	add.w	r1, r3, #8
 800a150:	f8c8 1000 	str.w	r1, [r8]
 800a154:	ed93 0b00 	vldr	d0, [r3]
 800a158:	ed9f 6b97 	vldr	d6, [pc, #604]	; 800a3b8 <_printf_float+0x2a0>
 800a15c:	eeb0 7bc0 	vabs.f64	d7, d0
 800a160:	eeb4 7b46 	vcmp.f64	d7, d6
 800a164:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a168:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 800a16c:	4682      	mov	sl, r0
 800a16e:	dd24      	ble.n	800a1ba <_printf_float+0xa2>
 800a170:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800a174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a178:	d502      	bpl.n	800a180 <_printf_float+0x68>
 800a17a:	232d      	movs	r3, #45	; 0x2d
 800a17c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a180:	498f      	ldr	r1, [pc, #572]	; (800a3c0 <_printf_float+0x2a8>)
 800a182:	4b90      	ldr	r3, [pc, #576]	; (800a3c4 <_printf_float+0x2ac>)
 800a184:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800a188:	bf94      	ite	ls
 800a18a:	4688      	movls	r8, r1
 800a18c:	4698      	movhi	r8, r3
 800a18e:	2303      	movs	r3, #3
 800a190:	6123      	str	r3, [r4, #16]
 800a192:	f022 0204 	bic.w	r2, r2, #4
 800a196:	2300      	movs	r3, #0
 800a198:	6022      	str	r2, [r4, #0]
 800a19a:	9304      	str	r3, [sp, #16]
 800a19c:	9700      	str	r7, [sp, #0]
 800a19e:	4633      	mov	r3, r6
 800a1a0:	aa09      	add	r2, sp, #36	; 0x24
 800a1a2:	4621      	mov	r1, r4
 800a1a4:	4628      	mov	r0, r5
 800a1a6:	f000 f9d1 	bl	800a54c <_printf_common>
 800a1aa:	3001      	adds	r0, #1
 800a1ac:	f040 808a 	bne.w	800a2c4 <_printf_float+0x1ac>
 800a1b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a1b4:	b00b      	add	sp, #44	; 0x2c
 800a1b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1ba:	eeb4 0b40 	vcmp.f64	d0, d0
 800a1be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a1c2:	d709      	bvc.n	800a1d8 <_printf_float+0xc0>
 800a1c4:	ee10 3a90 	vmov	r3, s1
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	bfbc      	itt	lt
 800a1cc:	232d      	movlt	r3, #45	; 0x2d
 800a1ce:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a1d2:	497d      	ldr	r1, [pc, #500]	; (800a3c8 <_printf_float+0x2b0>)
 800a1d4:	4b7d      	ldr	r3, [pc, #500]	; (800a3cc <_printf_float+0x2b4>)
 800a1d6:	e7d5      	b.n	800a184 <_printf_float+0x6c>
 800a1d8:	6863      	ldr	r3, [r4, #4]
 800a1da:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800a1de:	9104      	str	r1, [sp, #16]
 800a1e0:	1c59      	adds	r1, r3, #1
 800a1e2:	d13c      	bne.n	800a25e <_printf_float+0x146>
 800a1e4:	2306      	movs	r3, #6
 800a1e6:	6063      	str	r3, [r4, #4]
 800a1e8:	2300      	movs	r3, #0
 800a1ea:	9303      	str	r3, [sp, #12]
 800a1ec:	ab08      	add	r3, sp, #32
 800a1ee:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800a1f2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a1f6:	ab07      	add	r3, sp, #28
 800a1f8:	6861      	ldr	r1, [r4, #4]
 800a1fa:	9300      	str	r3, [sp, #0]
 800a1fc:	6022      	str	r2, [r4, #0]
 800a1fe:	f10d 031b 	add.w	r3, sp, #27
 800a202:	4628      	mov	r0, r5
 800a204:	f7ff fef8 	bl	8009ff8 <__cvt>
 800a208:	9b04      	ldr	r3, [sp, #16]
 800a20a:	9907      	ldr	r1, [sp, #28]
 800a20c:	2b47      	cmp	r3, #71	; 0x47
 800a20e:	4680      	mov	r8, r0
 800a210:	d108      	bne.n	800a224 <_printf_float+0x10c>
 800a212:	1cc8      	adds	r0, r1, #3
 800a214:	db02      	blt.n	800a21c <_printf_float+0x104>
 800a216:	6863      	ldr	r3, [r4, #4]
 800a218:	4299      	cmp	r1, r3
 800a21a:	dd41      	ble.n	800a2a0 <_printf_float+0x188>
 800a21c:	f1a9 0902 	sub.w	r9, r9, #2
 800a220:	fa5f f989 	uxtb.w	r9, r9
 800a224:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800a228:	d820      	bhi.n	800a26c <_printf_float+0x154>
 800a22a:	3901      	subs	r1, #1
 800a22c:	464a      	mov	r2, r9
 800a22e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a232:	9107      	str	r1, [sp, #28]
 800a234:	f7ff ff32 	bl	800a09c <__exponent>
 800a238:	9a08      	ldr	r2, [sp, #32]
 800a23a:	9004      	str	r0, [sp, #16]
 800a23c:	1813      	adds	r3, r2, r0
 800a23e:	2a01      	cmp	r2, #1
 800a240:	6123      	str	r3, [r4, #16]
 800a242:	dc02      	bgt.n	800a24a <_printf_float+0x132>
 800a244:	6822      	ldr	r2, [r4, #0]
 800a246:	07d2      	lsls	r2, r2, #31
 800a248:	d501      	bpl.n	800a24e <_printf_float+0x136>
 800a24a:	3301      	adds	r3, #1
 800a24c:	6123      	str	r3, [r4, #16]
 800a24e:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800a252:	2b00      	cmp	r3, #0
 800a254:	d0a2      	beq.n	800a19c <_printf_float+0x84>
 800a256:	232d      	movs	r3, #45	; 0x2d
 800a258:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a25c:	e79e      	b.n	800a19c <_printf_float+0x84>
 800a25e:	9904      	ldr	r1, [sp, #16]
 800a260:	2947      	cmp	r1, #71	; 0x47
 800a262:	d1c1      	bne.n	800a1e8 <_printf_float+0xd0>
 800a264:	2b00      	cmp	r3, #0
 800a266:	d1bf      	bne.n	800a1e8 <_printf_float+0xd0>
 800a268:	2301      	movs	r3, #1
 800a26a:	e7bc      	b.n	800a1e6 <_printf_float+0xce>
 800a26c:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800a270:	d118      	bne.n	800a2a4 <_printf_float+0x18c>
 800a272:	2900      	cmp	r1, #0
 800a274:	6863      	ldr	r3, [r4, #4]
 800a276:	dd0b      	ble.n	800a290 <_printf_float+0x178>
 800a278:	6121      	str	r1, [r4, #16]
 800a27a:	b913      	cbnz	r3, 800a282 <_printf_float+0x16a>
 800a27c:	6822      	ldr	r2, [r4, #0]
 800a27e:	07d0      	lsls	r0, r2, #31
 800a280:	d502      	bpl.n	800a288 <_printf_float+0x170>
 800a282:	3301      	adds	r3, #1
 800a284:	440b      	add	r3, r1
 800a286:	6123      	str	r3, [r4, #16]
 800a288:	2300      	movs	r3, #0
 800a28a:	65a1      	str	r1, [r4, #88]	; 0x58
 800a28c:	9304      	str	r3, [sp, #16]
 800a28e:	e7de      	b.n	800a24e <_printf_float+0x136>
 800a290:	b913      	cbnz	r3, 800a298 <_printf_float+0x180>
 800a292:	6822      	ldr	r2, [r4, #0]
 800a294:	07d2      	lsls	r2, r2, #31
 800a296:	d501      	bpl.n	800a29c <_printf_float+0x184>
 800a298:	3302      	adds	r3, #2
 800a29a:	e7f4      	b.n	800a286 <_printf_float+0x16e>
 800a29c:	2301      	movs	r3, #1
 800a29e:	e7f2      	b.n	800a286 <_printf_float+0x16e>
 800a2a0:	f04f 0967 	mov.w	r9, #103	; 0x67
 800a2a4:	9b08      	ldr	r3, [sp, #32]
 800a2a6:	4299      	cmp	r1, r3
 800a2a8:	db05      	blt.n	800a2b6 <_printf_float+0x19e>
 800a2aa:	6823      	ldr	r3, [r4, #0]
 800a2ac:	6121      	str	r1, [r4, #16]
 800a2ae:	07d8      	lsls	r0, r3, #31
 800a2b0:	d5ea      	bpl.n	800a288 <_printf_float+0x170>
 800a2b2:	1c4b      	adds	r3, r1, #1
 800a2b4:	e7e7      	b.n	800a286 <_printf_float+0x16e>
 800a2b6:	2900      	cmp	r1, #0
 800a2b8:	bfd4      	ite	le
 800a2ba:	f1c1 0202 	rsble	r2, r1, #2
 800a2be:	2201      	movgt	r2, #1
 800a2c0:	4413      	add	r3, r2
 800a2c2:	e7e0      	b.n	800a286 <_printf_float+0x16e>
 800a2c4:	6823      	ldr	r3, [r4, #0]
 800a2c6:	055a      	lsls	r2, r3, #21
 800a2c8:	d407      	bmi.n	800a2da <_printf_float+0x1c2>
 800a2ca:	6923      	ldr	r3, [r4, #16]
 800a2cc:	4642      	mov	r2, r8
 800a2ce:	4631      	mov	r1, r6
 800a2d0:	4628      	mov	r0, r5
 800a2d2:	47b8      	blx	r7
 800a2d4:	3001      	adds	r0, #1
 800a2d6:	d12a      	bne.n	800a32e <_printf_float+0x216>
 800a2d8:	e76a      	b.n	800a1b0 <_printf_float+0x98>
 800a2da:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800a2de:	f240 80e0 	bls.w	800a4a2 <_printf_float+0x38a>
 800a2e2:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800a2e6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a2ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a2ee:	d133      	bne.n	800a358 <_printf_float+0x240>
 800a2f0:	4a37      	ldr	r2, [pc, #220]	; (800a3d0 <_printf_float+0x2b8>)
 800a2f2:	2301      	movs	r3, #1
 800a2f4:	4631      	mov	r1, r6
 800a2f6:	4628      	mov	r0, r5
 800a2f8:	47b8      	blx	r7
 800a2fa:	3001      	adds	r0, #1
 800a2fc:	f43f af58 	beq.w	800a1b0 <_printf_float+0x98>
 800a300:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800a304:	429a      	cmp	r2, r3
 800a306:	db02      	blt.n	800a30e <_printf_float+0x1f6>
 800a308:	6823      	ldr	r3, [r4, #0]
 800a30a:	07d8      	lsls	r0, r3, #31
 800a30c:	d50f      	bpl.n	800a32e <_printf_float+0x216>
 800a30e:	4653      	mov	r3, sl
 800a310:	465a      	mov	r2, fp
 800a312:	4631      	mov	r1, r6
 800a314:	4628      	mov	r0, r5
 800a316:	47b8      	blx	r7
 800a318:	3001      	adds	r0, #1
 800a31a:	f43f af49 	beq.w	800a1b0 <_printf_float+0x98>
 800a31e:	f04f 0800 	mov.w	r8, #0
 800a322:	f104 091a 	add.w	r9, r4, #26
 800a326:	9b08      	ldr	r3, [sp, #32]
 800a328:	3b01      	subs	r3, #1
 800a32a:	4543      	cmp	r3, r8
 800a32c:	dc09      	bgt.n	800a342 <_printf_float+0x22a>
 800a32e:	6823      	ldr	r3, [r4, #0]
 800a330:	079b      	lsls	r3, r3, #30
 800a332:	f100 8106 	bmi.w	800a542 <_printf_float+0x42a>
 800a336:	68e0      	ldr	r0, [r4, #12]
 800a338:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a33a:	4298      	cmp	r0, r3
 800a33c:	bfb8      	it	lt
 800a33e:	4618      	movlt	r0, r3
 800a340:	e738      	b.n	800a1b4 <_printf_float+0x9c>
 800a342:	2301      	movs	r3, #1
 800a344:	464a      	mov	r2, r9
 800a346:	4631      	mov	r1, r6
 800a348:	4628      	mov	r0, r5
 800a34a:	47b8      	blx	r7
 800a34c:	3001      	adds	r0, #1
 800a34e:	f43f af2f 	beq.w	800a1b0 <_printf_float+0x98>
 800a352:	f108 0801 	add.w	r8, r8, #1
 800a356:	e7e6      	b.n	800a326 <_printf_float+0x20e>
 800a358:	9b07      	ldr	r3, [sp, #28]
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	dc3a      	bgt.n	800a3d4 <_printf_float+0x2bc>
 800a35e:	4a1c      	ldr	r2, [pc, #112]	; (800a3d0 <_printf_float+0x2b8>)
 800a360:	2301      	movs	r3, #1
 800a362:	4631      	mov	r1, r6
 800a364:	4628      	mov	r0, r5
 800a366:	47b8      	blx	r7
 800a368:	3001      	adds	r0, #1
 800a36a:	f43f af21 	beq.w	800a1b0 <_printf_float+0x98>
 800a36e:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 800a372:	4313      	orrs	r3, r2
 800a374:	d102      	bne.n	800a37c <_printf_float+0x264>
 800a376:	6823      	ldr	r3, [r4, #0]
 800a378:	07d9      	lsls	r1, r3, #31
 800a37a:	d5d8      	bpl.n	800a32e <_printf_float+0x216>
 800a37c:	4653      	mov	r3, sl
 800a37e:	465a      	mov	r2, fp
 800a380:	4631      	mov	r1, r6
 800a382:	4628      	mov	r0, r5
 800a384:	47b8      	blx	r7
 800a386:	3001      	adds	r0, #1
 800a388:	f43f af12 	beq.w	800a1b0 <_printf_float+0x98>
 800a38c:	f04f 0900 	mov.w	r9, #0
 800a390:	f104 0a1a 	add.w	sl, r4, #26
 800a394:	9b07      	ldr	r3, [sp, #28]
 800a396:	425b      	negs	r3, r3
 800a398:	454b      	cmp	r3, r9
 800a39a:	dc01      	bgt.n	800a3a0 <_printf_float+0x288>
 800a39c:	9b08      	ldr	r3, [sp, #32]
 800a39e:	e795      	b.n	800a2cc <_printf_float+0x1b4>
 800a3a0:	2301      	movs	r3, #1
 800a3a2:	4652      	mov	r2, sl
 800a3a4:	4631      	mov	r1, r6
 800a3a6:	4628      	mov	r0, r5
 800a3a8:	47b8      	blx	r7
 800a3aa:	3001      	adds	r0, #1
 800a3ac:	f43f af00 	beq.w	800a1b0 <_printf_float+0x98>
 800a3b0:	f109 0901 	add.w	r9, r9, #1
 800a3b4:	e7ee      	b.n	800a394 <_printf_float+0x27c>
 800a3b6:	bf00      	nop
 800a3b8:	ffffffff 	.word	0xffffffff
 800a3bc:	7fefffff 	.word	0x7fefffff
 800a3c0:	0801fabc 	.word	0x0801fabc
 800a3c4:	0801fac0 	.word	0x0801fac0
 800a3c8:	0801fac4 	.word	0x0801fac4
 800a3cc:	0801fac8 	.word	0x0801fac8
 800a3d0:	0801facc 	.word	0x0801facc
 800a3d4:	9a08      	ldr	r2, [sp, #32]
 800a3d6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a3d8:	429a      	cmp	r2, r3
 800a3da:	bfa8      	it	ge
 800a3dc:	461a      	movge	r2, r3
 800a3de:	2a00      	cmp	r2, #0
 800a3e0:	4691      	mov	r9, r2
 800a3e2:	dc38      	bgt.n	800a456 <_printf_float+0x33e>
 800a3e4:	2300      	movs	r3, #0
 800a3e6:	9305      	str	r3, [sp, #20]
 800a3e8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a3ec:	f104 021a 	add.w	r2, r4, #26
 800a3f0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a3f2:	9905      	ldr	r1, [sp, #20]
 800a3f4:	9304      	str	r3, [sp, #16]
 800a3f6:	eba3 0309 	sub.w	r3, r3, r9
 800a3fa:	428b      	cmp	r3, r1
 800a3fc:	dc33      	bgt.n	800a466 <_printf_float+0x34e>
 800a3fe:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800a402:	429a      	cmp	r2, r3
 800a404:	db3c      	blt.n	800a480 <_printf_float+0x368>
 800a406:	6823      	ldr	r3, [r4, #0]
 800a408:	07da      	lsls	r2, r3, #31
 800a40a:	d439      	bmi.n	800a480 <_printf_float+0x368>
 800a40c:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 800a410:	eba2 0903 	sub.w	r9, r2, r3
 800a414:	9b04      	ldr	r3, [sp, #16]
 800a416:	1ad2      	subs	r2, r2, r3
 800a418:	4591      	cmp	r9, r2
 800a41a:	bfa8      	it	ge
 800a41c:	4691      	movge	r9, r2
 800a41e:	f1b9 0f00 	cmp.w	r9, #0
 800a422:	dc35      	bgt.n	800a490 <_printf_float+0x378>
 800a424:	f04f 0800 	mov.w	r8, #0
 800a428:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a42c:	f104 0a1a 	add.w	sl, r4, #26
 800a430:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800a434:	1a9b      	subs	r3, r3, r2
 800a436:	eba3 0309 	sub.w	r3, r3, r9
 800a43a:	4543      	cmp	r3, r8
 800a43c:	f77f af77 	ble.w	800a32e <_printf_float+0x216>
 800a440:	2301      	movs	r3, #1
 800a442:	4652      	mov	r2, sl
 800a444:	4631      	mov	r1, r6
 800a446:	4628      	mov	r0, r5
 800a448:	47b8      	blx	r7
 800a44a:	3001      	adds	r0, #1
 800a44c:	f43f aeb0 	beq.w	800a1b0 <_printf_float+0x98>
 800a450:	f108 0801 	add.w	r8, r8, #1
 800a454:	e7ec      	b.n	800a430 <_printf_float+0x318>
 800a456:	4613      	mov	r3, r2
 800a458:	4631      	mov	r1, r6
 800a45a:	4642      	mov	r2, r8
 800a45c:	4628      	mov	r0, r5
 800a45e:	47b8      	blx	r7
 800a460:	3001      	adds	r0, #1
 800a462:	d1bf      	bne.n	800a3e4 <_printf_float+0x2cc>
 800a464:	e6a4      	b.n	800a1b0 <_printf_float+0x98>
 800a466:	2301      	movs	r3, #1
 800a468:	4631      	mov	r1, r6
 800a46a:	4628      	mov	r0, r5
 800a46c:	9204      	str	r2, [sp, #16]
 800a46e:	47b8      	blx	r7
 800a470:	3001      	adds	r0, #1
 800a472:	f43f ae9d 	beq.w	800a1b0 <_printf_float+0x98>
 800a476:	9b05      	ldr	r3, [sp, #20]
 800a478:	9a04      	ldr	r2, [sp, #16]
 800a47a:	3301      	adds	r3, #1
 800a47c:	9305      	str	r3, [sp, #20]
 800a47e:	e7b7      	b.n	800a3f0 <_printf_float+0x2d8>
 800a480:	4653      	mov	r3, sl
 800a482:	465a      	mov	r2, fp
 800a484:	4631      	mov	r1, r6
 800a486:	4628      	mov	r0, r5
 800a488:	47b8      	blx	r7
 800a48a:	3001      	adds	r0, #1
 800a48c:	d1be      	bne.n	800a40c <_printf_float+0x2f4>
 800a48e:	e68f      	b.n	800a1b0 <_printf_float+0x98>
 800a490:	9a04      	ldr	r2, [sp, #16]
 800a492:	464b      	mov	r3, r9
 800a494:	4442      	add	r2, r8
 800a496:	4631      	mov	r1, r6
 800a498:	4628      	mov	r0, r5
 800a49a:	47b8      	blx	r7
 800a49c:	3001      	adds	r0, #1
 800a49e:	d1c1      	bne.n	800a424 <_printf_float+0x30c>
 800a4a0:	e686      	b.n	800a1b0 <_printf_float+0x98>
 800a4a2:	9a08      	ldr	r2, [sp, #32]
 800a4a4:	2a01      	cmp	r2, #1
 800a4a6:	dc01      	bgt.n	800a4ac <_printf_float+0x394>
 800a4a8:	07db      	lsls	r3, r3, #31
 800a4aa:	d537      	bpl.n	800a51c <_printf_float+0x404>
 800a4ac:	2301      	movs	r3, #1
 800a4ae:	4642      	mov	r2, r8
 800a4b0:	4631      	mov	r1, r6
 800a4b2:	4628      	mov	r0, r5
 800a4b4:	47b8      	blx	r7
 800a4b6:	3001      	adds	r0, #1
 800a4b8:	f43f ae7a 	beq.w	800a1b0 <_printf_float+0x98>
 800a4bc:	4653      	mov	r3, sl
 800a4be:	465a      	mov	r2, fp
 800a4c0:	4631      	mov	r1, r6
 800a4c2:	4628      	mov	r0, r5
 800a4c4:	47b8      	blx	r7
 800a4c6:	3001      	adds	r0, #1
 800a4c8:	f43f ae72 	beq.w	800a1b0 <_printf_float+0x98>
 800a4cc:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800a4d0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a4d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a4d8:	9b08      	ldr	r3, [sp, #32]
 800a4da:	d01a      	beq.n	800a512 <_printf_float+0x3fa>
 800a4dc:	3b01      	subs	r3, #1
 800a4de:	f108 0201 	add.w	r2, r8, #1
 800a4e2:	4631      	mov	r1, r6
 800a4e4:	4628      	mov	r0, r5
 800a4e6:	47b8      	blx	r7
 800a4e8:	3001      	adds	r0, #1
 800a4ea:	d10e      	bne.n	800a50a <_printf_float+0x3f2>
 800a4ec:	e660      	b.n	800a1b0 <_printf_float+0x98>
 800a4ee:	2301      	movs	r3, #1
 800a4f0:	464a      	mov	r2, r9
 800a4f2:	4631      	mov	r1, r6
 800a4f4:	4628      	mov	r0, r5
 800a4f6:	47b8      	blx	r7
 800a4f8:	3001      	adds	r0, #1
 800a4fa:	f43f ae59 	beq.w	800a1b0 <_printf_float+0x98>
 800a4fe:	f108 0801 	add.w	r8, r8, #1
 800a502:	9b08      	ldr	r3, [sp, #32]
 800a504:	3b01      	subs	r3, #1
 800a506:	4543      	cmp	r3, r8
 800a508:	dcf1      	bgt.n	800a4ee <_printf_float+0x3d6>
 800a50a:	9b04      	ldr	r3, [sp, #16]
 800a50c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a510:	e6dd      	b.n	800a2ce <_printf_float+0x1b6>
 800a512:	f04f 0800 	mov.w	r8, #0
 800a516:	f104 091a 	add.w	r9, r4, #26
 800a51a:	e7f2      	b.n	800a502 <_printf_float+0x3ea>
 800a51c:	2301      	movs	r3, #1
 800a51e:	4642      	mov	r2, r8
 800a520:	e7df      	b.n	800a4e2 <_printf_float+0x3ca>
 800a522:	2301      	movs	r3, #1
 800a524:	464a      	mov	r2, r9
 800a526:	4631      	mov	r1, r6
 800a528:	4628      	mov	r0, r5
 800a52a:	47b8      	blx	r7
 800a52c:	3001      	adds	r0, #1
 800a52e:	f43f ae3f 	beq.w	800a1b0 <_printf_float+0x98>
 800a532:	f108 0801 	add.w	r8, r8, #1
 800a536:	68e3      	ldr	r3, [r4, #12]
 800a538:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a53a:	1a5b      	subs	r3, r3, r1
 800a53c:	4543      	cmp	r3, r8
 800a53e:	dcf0      	bgt.n	800a522 <_printf_float+0x40a>
 800a540:	e6f9      	b.n	800a336 <_printf_float+0x21e>
 800a542:	f04f 0800 	mov.w	r8, #0
 800a546:	f104 0919 	add.w	r9, r4, #25
 800a54a:	e7f4      	b.n	800a536 <_printf_float+0x41e>

0800a54c <_printf_common>:
 800a54c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a550:	4616      	mov	r6, r2
 800a552:	4699      	mov	r9, r3
 800a554:	688a      	ldr	r2, [r1, #8]
 800a556:	690b      	ldr	r3, [r1, #16]
 800a558:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a55c:	4293      	cmp	r3, r2
 800a55e:	bfb8      	it	lt
 800a560:	4613      	movlt	r3, r2
 800a562:	6033      	str	r3, [r6, #0]
 800a564:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a568:	4607      	mov	r7, r0
 800a56a:	460c      	mov	r4, r1
 800a56c:	b10a      	cbz	r2, 800a572 <_printf_common+0x26>
 800a56e:	3301      	adds	r3, #1
 800a570:	6033      	str	r3, [r6, #0]
 800a572:	6823      	ldr	r3, [r4, #0]
 800a574:	0699      	lsls	r1, r3, #26
 800a576:	bf42      	ittt	mi
 800a578:	6833      	ldrmi	r3, [r6, #0]
 800a57a:	3302      	addmi	r3, #2
 800a57c:	6033      	strmi	r3, [r6, #0]
 800a57e:	6825      	ldr	r5, [r4, #0]
 800a580:	f015 0506 	ands.w	r5, r5, #6
 800a584:	d106      	bne.n	800a594 <_printf_common+0x48>
 800a586:	f104 0a19 	add.w	sl, r4, #25
 800a58a:	68e3      	ldr	r3, [r4, #12]
 800a58c:	6832      	ldr	r2, [r6, #0]
 800a58e:	1a9b      	subs	r3, r3, r2
 800a590:	42ab      	cmp	r3, r5
 800a592:	dc26      	bgt.n	800a5e2 <_printf_common+0x96>
 800a594:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a598:	1e13      	subs	r3, r2, #0
 800a59a:	6822      	ldr	r2, [r4, #0]
 800a59c:	bf18      	it	ne
 800a59e:	2301      	movne	r3, #1
 800a5a0:	0692      	lsls	r2, r2, #26
 800a5a2:	d42b      	bmi.n	800a5fc <_printf_common+0xb0>
 800a5a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a5a8:	4649      	mov	r1, r9
 800a5aa:	4638      	mov	r0, r7
 800a5ac:	47c0      	blx	r8
 800a5ae:	3001      	adds	r0, #1
 800a5b0:	d01e      	beq.n	800a5f0 <_printf_common+0xa4>
 800a5b2:	6823      	ldr	r3, [r4, #0]
 800a5b4:	6922      	ldr	r2, [r4, #16]
 800a5b6:	f003 0306 	and.w	r3, r3, #6
 800a5ba:	2b04      	cmp	r3, #4
 800a5bc:	bf02      	ittt	eq
 800a5be:	68e5      	ldreq	r5, [r4, #12]
 800a5c0:	6833      	ldreq	r3, [r6, #0]
 800a5c2:	1aed      	subeq	r5, r5, r3
 800a5c4:	68a3      	ldr	r3, [r4, #8]
 800a5c6:	bf0c      	ite	eq
 800a5c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a5cc:	2500      	movne	r5, #0
 800a5ce:	4293      	cmp	r3, r2
 800a5d0:	bfc4      	itt	gt
 800a5d2:	1a9b      	subgt	r3, r3, r2
 800a5d4:	18ed      	addgt	r5, r5, r3
 800a5d6:	2600      	movs	r6, #0
 800a5d8:	341a      	adds	r4, #26
 800a5da:	42b5      	cmp	r5, r6
 800a5dc:	d11a      	bne.n	800a614 <_printf_common+0xc8>
 800a5de:	2000      	movs	r0, #0
 800a5e0:	e008      	b.n	800a5f4 <_printf_common+0xa8>
 800a5e2:	2301      	movs	r3, #1
 800a5e4:	4652      	mov	r2, sl
 800a5e6:	4649      	mov	r1, r9
 800a5e8:	4638      	mov	r0, r7
 800a5ea:	47c0      	blx	r8
 800a5ec:	3001      	adds	r0, #1
 800a5ee:	d103      	bne.n	800a5f8 <_printf_common+0xac>
 800a5f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a5f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5f8:	3501      	adds	r5, #1
 800a5fa:	e7c6      	b.n	800a58a <_printf_common+0x3e>
 800a5fc:	18e1      	adds	r1, r4, r3
 800a5fe:	1c5a      	adds	r2, r3, #1
 800a600:	2030      	movs	r0, #48	; 0x30
 800a602:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a606:	4422      	add	r2, r4
 800a608:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a60c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a610:	3302      	adds	r3, #2
 800a612:	e7c7      	b.n	800a5a4 <_printf_common+0x58>
 800a614:	2301      	movs	r3, #1
 800a616:	4622      	mov	r2, r4
 800a618:	4649      	mov	r1, r9
 800a61a:	4638      	mov	r0, r7
 800a61c:	47c0      	blx	r8
 800a61e:	3001      	adds	r0, #1
 800a620:	d0e6      	beq.n	800a5f0 <_printf_common+0xa4>
 800a622:	3601      	adds	r6, #1
 800a624:	e7d9      	b.n	800a5da <_printf_common+0x8e>
	...

0800a628 <_printf_i>:
 800a628:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a62c:	7e0f      	ldrb	r7, [r1, #24]
 800a62e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a630:	2f78      	cmp	r7, #120	; 0x78
 800a632:	4691      	mov	r9, r2
 800a634:	4680      	mov	r8, r0
 800a636:	460c      	mov	r4, r1
 800a638:	469a      	mov	sl, r3
 800a63a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a63e:	d807      	bhi.n	800a650 <_printf_i+0x28>
 800a640:	2f62      	cmp	r7, #98	; 0x62
 800a642:	d80a      	bhi.n	800a65a <_printf_i+0x32>
 800a644:	2f00      	cmp	r7, #0
 800a646:	f000 80d4 	beq.w	800a7f2 <_printf_i+0x1ca>
 800a64a:	2f58      	cmp	r7, #88	; 0x58
 800a64c:	f000 80c0 	beq.w	800a7d0 <_printf_i+0x1a8>
 800a650:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a654:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a658:	e03a      	b.n	800a6d0 <_printf_i+0xa8>
 800a65a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a65e:	2b15      	cmp	r3, #21
 800a660:	d8f6      	bhi.n	800a650 <_printf_i+0x28>
 800a662:	a101      	add	r1, pc, #4	; (adr r1, 800a668 <_printf_i+0x40>)
 800a664:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a668:	0800a6c1 	.word	0x0800a6c1
 800a66c:	0800a6d5 	.word	0x0800a6d5
 800a670:	0800a651 	.word	0x0800a651
 800a674:	0800a651 	.word	0x0800a651
 800a678:	0800a651 	.word	0x0800a651
 800a67c:	0800a651 	.word	0x0800a651
 800a680:	0800a6d5 	.word	0x0800a6d5
 800a684:	0800a651 	.word	0x0800a651
 800a688:	0800a651 	.word	0x0800a651
 800a68c:	0800a651 	.word	0x0800a651
 800a690:	0800a651 	.word	0x0800a651
 800a694:	0800a7d9 	.word	0x0800a7d9
 800a698:	0800a701 	.word	0x0800a701
 800a69c:	0800a793 	.word	0x0800a793
 800a6a0:	0800a651 	.word	0x0800a651
 800a6a4:	0800a651 	.word	0x0800a651
 800a6a8:	0800a7fb 	.word	0x0800a7fb
 800a6ac:	0800a651 	.word	0x0800a651
 800a6b0:	0800a701 	.word	0x0800a701
 800a6b4:	0800a651 	.word	0x0800a651
 800a6b8:	0800a651 	.word	0x0800a651
 800a6bc:	0800a79b 	.word	0x0800a79b
 800a6c0:	682b      	ldr	r3, [r5, #0]
 800a6c2:	1d1a      	adds	r2, r3, #4
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	602a      	str	r2, [r5, #0]
 800a6c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a6cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a6d0:	2301      	movs	r3, #1
 800a6d2:	e09f      	b.n	800a814 <_printf_i+0x1ec>
 800a6d4:	6820      	ldr	r0, [r4, #0]
 800a6d6:	682b      	ldr	r3, [r5, #0]
 800a6d8:	0607      	lsls	r7, r0, #24
 800a6da:	f103 0104 	add.w	r1, r3, #4
 800a6de:	6029      	str	r1, [r5, #0]
 800a6e0:	d501      	bpl.n	800a6e6 <_printf_i+0xbe>
 800a6e2:	681e      	ldr	r6, [r3, #0]
 800a6e4:	e003      	b.n	800a6ee <_printf_i+0xc6>
 800a6e6:	0646      	lsls	r6, r0, #25
 800a6e8:	d5fb      	bpl.n	800a6e2 <_printf_i+0xba>
 800a6ea:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a6ee:	2e00      	cmp	r6, #0
 800a6f0:	da03      	bge.n	800a6fa <_printf_i+0xd2>
 800a6f2:	232d      	movs	r3, #45	; 0x2d
 800a6f4:	4276      	negs	r6, r6
 800a6f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a6fa:	485a      	ldr	r0, [pc, #360]	; (800a864 <_printf_i+0x23c>)
 800a6fc:	230a      	movs	r3, #10
 800a6fe:	e012      	b.n	800a726 <_printf_i+0xfe>
 800a700:	682b      	ldr	r3, [r5, #0]
 800a702:	6820      	ldr	r0, [r4, #0]
 800a704:	1d19      	adds	r1, r3, #4
 800a706:	6029      	str	r1, [r5, #0]
 800a708:	0605      	lsls	r5, r0, #24
 800a70a:	d501      	bpl.n	800a710 <_printf_i+0xe8>
 800a70c:	681e      	ldr	r6, [r3, #0]
 800a70e:	e002      	b.n	800a716 <_printf_i+0xee>
 800a710:	0641      	lsls	r1, r0, #25
 800a712:	d5fb      	bpl.n	800a70c <_printf_i+0xe4>
 800a714:	881e      	ldrh	r6, [r3, #0]
 800a716:	4853      	ldr	r0, [pc, #332]	; (800a864 <_printf_i+0x23c>)
 800a718:	2f6f      	cmp	r7, #111	; 0x6f
 800a71a:	bf0c      	ite	eq
 800a71c:	2308      	moveq	r3, #8
 800a71e:	230a      	movne	r3, #10
 800a720:	2100      	movs	r1, #0
 800a722:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a726:	6865      	ldr	r5, [r4, #4]
 800a728:	60a5      	str	r5, [r4, #8]
 800a72a:	2d00      	cmp	r5, #0
 800a72c:	bfa2      	ittt	ge
 800a72e:	6821      	ldrge	r1, [r4, #0]
 800a730:	f021 0104 	bicge.w	r1, r1, #4
 800a734:	6021      	strge	r1, [r4, #0]
 800a736:	b90e      	cbnz	r6, 800a73c <_printf_i+0x114>
 800a738:	2d00      	cmp	r5, #0
 800a73a:	d04b      	beq.n	800a7d4 <_printf_i+0x1ac>
 800a73c:	4615      	mov	r5, r2
 800a73e:	fbb6 f1f3 	udiv	r1, r6, r3
 800a742:	fb03 6711 	mls	r7, r3, r1, r6
 800a746:	5dc7      	ldrb	r7, [r0, r7]
 800a748:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a74c:	4637      	mov	r7, r6
 800a74e:	42bb      	cmp	r3, r7
 800a750:	460e      	mov	r6, r1
 800a752:	d9f4      	bls.n	800a73e <_printf_i+0x116>
 800a754:	2b08      	cmp	r3, #8
 800a756:	d10b      	bne.n	800a770 <_printf_i+0x148>
 800a758:	6823      	ldr	r3, [r4, #0]
 800a75a:	07de      	lsls	r6, r3, #31
 800a75c:	d508      	bpl.n	800a770 <_printf_i+0x148>
 800a75e:	6923      	ldr	r3, [r4, #16]
 800a760:	6861      	ldr	r1, [r4, #4]
 800a762:	4299      	cmp	r1, r3
 800a764:	bfde      	ittt	le
 800a766:	2330      	movle	r3, #48	; 0x30
 800a768:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a76c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800a770:	1b52      	subs	r2, r2, r5
 800a772:	6122      	str	r2, [r4, #16]
 800a774:	f8cd a000 	str.w	sl, [sp]
 800a778:	464b      	mov	r3, r9
 800a77a:	aa03      	add	r2, sp, #12
 800a77c:	4621      	mov	r1, r4
 800a77e:	4640      	mov	r0, r8
 800a780:	f7ff fee4 	bl	800a54c <_printf_common>
 800a784:	3001      	adds	r0, #1
 800a786:	d14a      	bne.n	800a81e <_printf_i+0x1f6>
 800a788:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a78c:	b004      	add	sp, #16
 800a78e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a792:	6823      	ldr	r3, [r4, #0]
 800a794:	f043 0320 	orr.w	r3, r3, #32
 800a798:	6023      	str	r3, [r4, #0]
 800a79a:	4833      	ldr	r0, [pc, #204]	; (800a868 <_printf_i+0x240>)
 800a79c:	2778      	movs	r7, #120	; 0x78
 800a79e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a7a2:	6823      	ldr	r3, [r4, #0]
 800a7a4:	6829      	ldr	r1, [r5, #0]
 800a7a6:	061f      	lsls	r7, r3, #24
 800a7a8:	f851 6b04 	ldr.w	r6, [r1], #4
 800a7ac:	d402      	bmi.n	800a7b4 <_printf_i+0x18c>
 800a7ae:	065f      	lsls	r7, r3, #25
 800a7b0:	bf48      	it	mi
 800a7b2:	b2b6      	uxthmi	r6, r6
 800a7b4:	07df      	lsls	r7, r3, #31
 800a7b6:	bf48      	it	mi
 800a7b8:	f043 0320 	orrmi.w	r3, r3, #32
 800a7bc:	6029      	str	r1, [r5, #0]
 800a7be:	bf48      	it	mi
 800a7c0:	6023      	strmi	r3, [r4, #0]
 800a7c2:	b91e      	cbnz	r6, 800a7cc <_printf_i+0x1a4>
 800a7c4:	6823      	ldr	r3, [r4, #0]
 800a7c6:	f023 0320 	bic.w	r3, r3, #32
 800a7ca:	6023      	str	r3, [r4, #0]
 800a7cc:	2310      	movs	r3, #16
 800a7ce:	e7a7      	b.n	800a720 <_printf_i+0xf8>
 800a7d0:	4824      	ldr	r0, [pc, #144]	; (800a864 <_printf_i+0x23c>)
 800a7d2:	e7e4      	b.n	800a79e <_printf_i+0x176>
 800a7d4:	4615      	mov	r5, r2
 800a7d6:	e7bd      	b.n	800a754 <_printf_i+0x12c>
 800a7d8:	682b      	ldr	r3, [r5, #0]
 800a7da:	6826      	ldr	r6, [r4, #0]
 800a7dc:	6961      	ldr	r1, [r4, #20]
 800a7de:	1d18      	adds	r0, r3, #4
 800a7e0:	6028      	str	r0, [r5, #0]
 800a7e2:	0635      	lsls	r5, r6, #24
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	d501      	bpl.n	800a7ec <_printf_i+0x1c4>
 800a7e8:	6019      	str	r1, [r3, #0]
 800a7ea:	e002      	b.n	800a7f2 <_printf_i+0x1ca>
 800a7ec:	0670      	lsls	r0, r6, #25
 800a7ee:	d5fb      	bpl.n	800a7e8 <_printf_i+0x1c0>
 800a7f0:	8019      	strh	r1, [r3, #0]
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	6123      	str	r3, [r4, #16]
 800a7f6:	4615      	mov	r5, r2
 800a7f8:	e7bc      	b.n	800a774 <_printf_i+0x14c>
 800a7fa:	682b      	ldr	r3, [r5, #0]
 800a7fc:	1d1a      	adds	r2, r3, #4
 800a7fe:	602a      	str	r2, [r5, #0]
 800a800:	681d      	ldr	r5, [r3, #0]
 800a802:	6862      	ldr	r2, [r4, #4]
 800a804:	2100      	movs	r1, #0
 800a806:	4628      	mov	r0, r5
 800a808:	f7f5 fd82 	bl	8000310 <memchr>
 800a80c:	b108      	cbz	r0, 800a812 <_printf_i+0x1ea>
 800a80e:	1b40      	subs	r0, r0, r5
 800a810:	6060      	str	r0, [r4, #4]
 800a812:	6863      	ldr	r3, [r4, #4]
 800a814:	6123      	str	r3, [r4, #16]
 800a816:	2300      	movs	r3, #0
 800a818:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a81c:	e7aa      	b.n	800a774 <_printf_i+0x14c>
 800a81e:	6923      	ldr	r3, [r4, #16]
 800a820:	462a      	mov	r2, r5
 800a822:	4649      	mov	r1, r9
 800a824:	4640      	mov	r0, r8
 800a826:	47d0      	blx	sl
 800a828:	3001      	adds	r0, #1
 800a82a:	d0ad      	beq.n	800a788 <_printf_i+0x160>
 800a82c:	6823      	ldr	r3, [r4, #0]
 800a82e:	079b      	lsls	r3, r3, #30
 800a830:	d413      	bmi.n	800a85a <_printf_i+0x232>
 800a832:	68e0      	ldr	r0, [r4, #12]
 800a834:	9b03      	ldr	r3, [sp, #12]
 800a836:	4298      	cmp	r0, r3
 800a838:	bfb8      	it	lt
 800a83a:	4618      	movlt	r0, r3
 800a83c:	e7a6      	b.n	800a78c <_printf_i+0x164>
 800a83e:	2301      	movs	r3, #1
 800a840:	4632      	mov	r2, r6
 800a842:	4649      	mov	r1, r9
 800a844:	4640      	mov	r0, r8
 800a846:	47d0      	blx	sl
 800a848:	3001      	adds	r0, #1
 800a84a:	d09d      	beq.n	800a788 <_printf_i+0x160>
 800a84c:	3501      	adds	r5, #1
 800a84e:	68e3      	ldr	r3, [r4, #12]
 800a850:	9903      	ldr	r1, [sp, #12]
 800a852:	1a5b      	subs	r3, r3, r1
 800a854:	42ab      	cmp	r3, r5
 800a856:	dcf2      	bgt.n	800a83e <_printf_i+0x216>
 800a858:	e7eb      	b.n	800a832 <_printf_i+0x20a>
 800a85a:	2500      	movs	r5, #0
 800a85c:	f104 0619 	add.w	r6, r4, #25
 800a860:	e7f5      	b.n	800a84e <_printf_i+0x226>
 800a862:	bf00      	nop
 800a864:	0801face 	.word	0x0801face
 800a868:	0801fadf 	.word	0x0801fadf

0800a86c <std>:
 800a86c:	2300      	movs	r3, #0
 800a86e:	b510      	push	{r4, lr}
 800a870:	4604      	mov	r4, r0
 800a872:	e9c0 3300 	strd	r3, r3, [r0]
 800a876:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a87a:	6083      	str	r3, [r0, #8]
 800a87c:	8181      	strh	r1, [r0, #12]
 800a87e:	6643      	str	r3, [r0, #100]	; 0x64
 800a880:	81c2      	strh	r2, [r0, #14]
 800a882:	6183      	str	r3, [r0, #24]
 800a884:	4619      	mov	r1, r3
 800a886:	2208      	movs	r2, #8
 800a888:	305c      	adds	r0, #92	; 0x5c
 800a88a:	f000 f902 	bl	800aa92 <memset>
 800a88e:	4b05      	ldr	r3, [pc, #20]	; (800a8a4 <std+0x38>)
 800a890:	6263      	str	r3, [r4, #36]	; 0x24
 800a892:	4b05      	ldr	r3, [pc, #20]	; (800a8a8 <std+0x3c>)
 800a894:	62a3      	str	r3, [r4, #40]	; 0x28
 800a896:	4b05      	ldr	r3, [pc, #20]	; (800a8ac <std+0x40>)
 800a898:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a89a:	4b05      	ldr	r3, [pc, #20]	; (800a8b0 <std+0x44>)
 800a89c:	6224      	str	r4, [r4, #32]
 800a89e:	6323      	str	r3, [r4, #48]	; 0x30
 800a8a0:	bd10      	pop	{r4, pc}
 800a8a2:	bf00      	nop
 800a8a4:	0800aa0d 	.word	0x0800aa0d
 800a8a8:	0800aa2f 	.word	0x0800aa2f
 800a8ac:	0800aa67 	.word	0x0800aa67
 800a8b0:	0800aa8b 	.word	0x0800aa8b

0800a8b4 <stdio_exit_handler>:
 800a8b4:	4a02      	ldr	r2, [pc, #8]	; (800a8c0 <stdio_exit_handler+0xc>)
 800a8b6:	4903      	ldr	r1, [pc, #12]	; (800a8c4 <stdio_exit_handler+0x10>)
 800a8b8:	4803      	ldr	r0, [pc, #12]	; (800a8c8 <stdio_exit_handler+0x14>)
 800a8ba:	f000 b869 	b.w	800a990 <_fwalk_sglue>
 800a8be:	bf00      	nop
 800a8c0:	24006624 	.word	0x24006624
 800a8c4:	0800c2e5 	.word	0x0800c2e5
 800a8c8:	24006630 	.word	0x24006630

0800a8cc <cleanup_stdio>:
 800a8cc:	6841      	ldr	r1, [r0, #4]
 800a8ce:	4b0c      	ldr	r3, [pc, #48]	; (800a900 <cleanup_stdio+0x34>)
 800a8d0:	4299      	cmp	r1, r3
 800a8d2:	b510      	push	{r4, lr}
 800a8d4:	4604      	mov	r4, r0
 800a8d6:	d001      	beq.n	800a8dc <cleanup_stdio+0x10>
 800a8d8:	f001 fd04 	bl	800c2e4 <_fflush_r>
 800a8dc:	68a1      	ldr	r1, [r4, #8]
 800a8de:	4b09      	ldr	r3, [pc, #36]	; (800a904 <cleanup_stdio+0x38>)
 800a8e0:	4299      	cmp	r1, r3
 800a8e2:	d002      	beq.n	800a8ea <cleanup_stdio+0x1e>
 800a8e4:	4620      	mov	r0, r4
 800a8e6:	f001 fcfd 	bl	800c2e4 <_fflush_r>
 800a8ea:	68e1      	ldr	r1, [r4, #12]
 800a8ec:	4b06      	ldr	r3, [pc, #24]	; (800a908 <cleanup_stdio+0x3c>)
 800a8ee:	4299      	cmp	r1, r3
 800a8f0:	d004      	beq.n	800a8fc <cleanup_stdio+0x30>
 800a8f2:	4620      	mov	r0, r4
 800a8f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a8f8:	f001 bcf4 	b.w	800c2e4 <_fflush_r>
 800a8fc:	bd10      	pop	{r4, pc}
 800a8fe:	bf00      	nop
 800a900:	24008624 	.word	0x24008624
 800a904:	2400868c 	.word	0x2400868c
 800a908:	240086f4 	.word	0x240086f4

0800a90c <global_stdio_init.part.0>:
 800a90c:	b510      	push	{r4, lr}
 800a90e:	4b0b      	ldr	r3, [pc, #44]	; (800a93c <global_stdio_init.part.0+0x30>)
 800a910:	4c0b      	ldr	r4, [pc, #44]	; (800a940 <global_stdio_init.part.0+0x34>)
 800a912:	4a0c      	ldr	r2, [pc, #48]	; (800a944 <global_stdio_init.part.0+0x38>)
 800a914:	601a      	str	r2, [r3, #0]
 800a916:	4620      	mov	r0, r4
 800a918:	2200      	movs	r2, #0
 800a91a:	2104      	movs	r1, #4
 800a91c:	f7ff ffa6 	bl	800a86c <std>
 800a920:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800a924:	2201      	movs	r2, #1
 800a926:	2109      	movs	r1, #9
 800a928:	f7ff ffa0 	bl	800a86c <std>
 800a92c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800a930:	2202      	movs	r2, #2
 800a932:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a936:	2112      	movs	r1, #18
 800a938:	f7ff bf98 	b.w	800a86c <std>
 800a93c:	2400875c 	.word	0x2400875c
 800a940:	24008624 	.word	0x24008624
 800a944:	0800a8b5 	.word	0x0800a8b5

0800a948 <__sfp_lock_acquire>:
 800a948:	4801      	ldr	r0, [pc, #4]	; (800a950 <__sfp_lock_acquire+0x8>)
 800a94a:	f000 b92f 	b.w	800abac <__retarget_lock_acquire_recursive>
 800a94e:	bf00      	nop
 800a950:	24008765 	.word	0x24008765

0800a954 <__sfp_lock_release>:
 800a954:	4801      	ldr	r0, [pc, #4]	; (800a95c <__sfp_lock_release+0x8>)
 800a956:	f000 b92a 	b.w	800abae <__retarget_lock_release_recursive>
 800a95a:	bf00      	nop
 800a95c:	24008765 	.word	0x24008765

0800a960 <__sinit>:
 800a960:	b510      	push	{r4, lr}
 800a962:	4604      	mov	r4, r0
 800a964:	f7ff fff0 	bl	800a948 <__sfp_lock_acquire>
 800a968:	6a23      	ldr	r3, [r4, #32]
 800a96a:	b11b      	cbz	r3, 800a974 <__sinit+0x14>
 800a96c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a970:	f7ff bff0 	b.w	800a954 <__sfp_lock_release>
 800a974:	4b04      	ldr	r3, [pc, #16]	; (800a988 <__sinit+0x28>)
 800a976:	6223      	str	r3, [r4, #32]
 800a978:	4b04      	ldr	r3, [pc, #16]	; (800a98c <__sinit+0x2c>)
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d1f5      	bne.n	800a96c <__sinit+0xc>
 800a980:	f7ff ffc4 	bl	800a90c <global_stdio_init.part.0>
 800a984:	e7f2      	b.n	800a96c <__sinit+0xc>
 800a986:	bf00      	nop
 800a988:	0800a8cd 	.word	0x0800a8cd
 800a98c:	2400875c 	.word	0x2400875c

0800a990 <_fwalk_sglue>:
 800a990:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a994:	4607      	mov	r7, r0
 800a996:	4688      	mov	r8, r1
 800a998:	4614      	mov	r4, r2
 800a99a:	2600      	movs	r6, #0
 800a99c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a9a0:	f1b9 0901 	subs.w	r9, r9, #1
 800a9a4:	d505      	bpl.n	800a9b2 <_fwalk_sglue+0x22>
 800a9a6:	6824      	ldr	r4, [r4, #0]
 800a9a8:	2c00      	cmp	r4, #0
 800a9aa:	d1f7      	bne.n	800a99c <_fwalk_sglue+0xc>
 800a9ac:	4630      	mov	r0, r6
 800a9ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a9b2:	89ab      	ldrh	r3, [r5, #12]
 800a9b4:	2b01      	cmp	r3, #1
 800a9b6:	d907      	bls.n	800a9c8 <_fwalk_sglue+0x38>
 800a9b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a9bc:	3301      	adds	r3, #1
 800a9be:	d003      	beq.n	800a9c8 <_fwalk_sglue+0x38>
 800a9c0:	4629      	mov	r1, r5
 800a9c2:	4638      	mov	r0, r7
 800a9c4:	47c0      	blx	r8
 800a9c6:	4306      	orrs	r6, r0
 800a9c8:	3568      	adds	r5, #104	; 0x68
 800a9ca:	e7e9      	b.n	800a9a0 <_fwalk_sglue+0x10>

0800a9cc <siprintf>:
 800a9cc:	b40e      	push	{r1, r2, r3}
 800a9ce:	b500      	push	{lr}
 800a9d0:	b09c      	sub	sp, #112	; 0x70
 800a9d2:	ab1d      	add	r3, sp, #116	; 0x74
 800a9d4:	9002      	str	r0, [sp, #8]
 800a9d6:	9006      	str	r0, [sp, #24]
 800a9d8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a9dc:	4809      	ldr	r0, [pc, #36]	; (800aa04 <siprintf+0x38>)
 800a9de:	9107      	str	r1, [sp, #28]
 800a9e0:	9104      	str	r1, [sp, #16]
 800a9e2:	4909      	ldr	r1, [pc, #36]	; (800aa08 <siprintf+0x3c>)
 800a9e4:	f853 2b04 	ldr.w	r2, [r3], #4
 800a9e8:	9105      	str	r1, [sp, #20]
 800a9ea:	6800      	ldr	r0, [r0, #0]
 800a9ec:	9301      	str	r3, [sp, #4]
 800a9ee:	a902      	add	r1, sp, #8
 800a9f0:	f001 faf4 	bl	800bfdc <_svfiprintf_r>
 800a9f4:	9b02      	ldr	r3, [sp, #8]
 800a9f6:	2200      	movs	r2, #0
 800a9f8:	701a      	strb	r2, [r3, #0]
 800a9fa:	b01c      	add	sp, #112	; 0x70
 800a9fc:	f85d eb04 	ldr.w	lr, [sp], #4
 800aa00:	b003      	add	sp, #12
 800aa02:	4770      	bx	lr
 800aa04:	2400667c 	.word	0x2400667c
 800aa08:	ffff0208 	.word	0xffff0208

0800aa0c <__sread>:
 800aa0c:	b510      	push	{r4, lr}
 800aa0e:	460c      	mov	r4, r1
 800aa10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa14:	f000 f86c 	bl	800aaf0 <_read_r>
 800aa18:	2800      	cmp	r0, #0
 800aa1a:	bfab      	itete	ge
 800aa1c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800aa1e:	89a3      	ldrhlt	r3, [r4, #12]
 800aa20:	181b      	addge	r3, r3, r0
 800aa22:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800aa26:	bfac      	ite	ge
 800aa28:	6563      	strge	r3, [r4, #84]	; 0x54
 800aa2a:	81a3      	strhlt	r3, [r4, #12]
 800aa2c:	bd10      	pop	{r4, pc}

0800aa2e <__swrite>:
 800aa2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa32:	461f      	mov	r7, r3
 800aa34:	898b      	ldrh	r3, [r1, #12]
 800aa36:	05db      	lsls	r3, r3, #23
 800aa38:	4605      	mov	r5, r0
 800aa3a:	460c      	mov	r4, r1
 800aa3c:	4616      	mov	r6, r2
 800aa3e:	d505      	bpl.n	800aa4c <__swrite+0x1e>
 800aa40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa44:	2302      	movs	r3, #2
 800aa46:	2200      	movs	r2, #0
 800aa48:	f000 f840 	bl	800aacc <_lseek_r>
 800aa4c:	89a3      	ldrh	r3, [r4, #12]
 800aa4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aa52:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800aa56:	81a3      	strh	r3, [r4, #12]
 800aa58:	4632      	mov	r2, r6
 800aa5a:	463b      	mov	r3, r7
 800aa5c:	4628      	mov	r0, r5
 800aa5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aa62:	f000 b867 	b.w	800ab34 <_write_r>

0800aa66 <__sseek>:
 800aa66:	b510      	push	{r4, lr}
 800aa68:	460c      	mov	r4, r1
 800aa6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa6e:	f000 f82d 	bl	800aacc <_lseek_r>
 800aa72:	1c43      	adds	r3, r0, #1
 800aa74:	89a3      	ldrh	r3, [r4, #12]
 800aa76:	bf15      	itete	ne
 800aa78:	6560      	strne	r0, [r4, #84]	; 0x54
 800aa7a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800aa7e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800aa82:	81a3      	strheq	r3, [r4, #12]
 800aa84:	bf18      	it	ne
 800aa86:	81a3      	strhne	r3, [r4, #12]
 800aa88:	bd10      	pop	{r4, pc}

0800aa8a <__sclose>:
 800aa8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa8e:	f000 b80d 	b.w	800aaac <_close_r>

0800aa92 <memset>:
 800aa92:	4402      	add	r2, r0
 800aa94:	4603      	mov	r3, r0
 800aa96:	4293      	cmp	r3, r2
 800aa98:	d100      	bne.n	800aa9c <memset+0xa>
 800aa9a:	4770      	bx	lr
 800aa9c:	f803 1b01 	strb.w	r1, [r3], #1
 800aaa0:	e7f9      	b.n	800aa96 <memset+0x4>
	...

0800aaa4 <_localeconv_r>:
 800aaa4:	4800      	ldr	r0, [pc, #0]	; (800aaa8 <_localeconv_r+0x4>)
 800aaa6:	4770      	bx	lr
 800aaa8:	24006770 	.word	0x24006770

0800aaac <_close_r>:
 800aaac:	b538      	push	{r3, r4, r5, lr}
 800aaae:	4d06      	ldr	r5, [pc, #24]	; (800aac8 <_close_r+0x1c>)
 800aab0:	2300      	movs	r3, #0
 800aab2:	4604      	mov	r4, r0
 800aab4:	4608      	mov	r0, r1
 800aab6:	602b      	str	r3, [r5, #0]
 800aab8:	f7f6 fa5e 	bl	8000f78 <_close>
 800aabc:	1c43      	adds	r3, r0, #1
 800aabe:	d102      	bne.n	800aac6 <_close_r+0x1a>
 800aac0:	682b      	ldr	r3, [r5, #0]
 800aac2:	b103      	cbz	r3, 800aac6 <_close_r+0x1a>
 800aac4:	6023      	str	r3, [r4, #0]
 800aac6:	bd38      	pop	{r3, r4, r5, pc}
 800aac8:	24008760 	.word	0x24008760

0800aacc <_lseek_r>:
 800aacc:	b538      	push	{r3, r4, r5, lr}
 800aace:	4d07      	ldr	r5, [pc, #28]	; (800aaec <_lseek_r+0x20>)
 800aad0:	4604      	mov	r4, r0
 800aad2:	4608      	mov	r0, r1
 800aad4:	4611      	mov	r1, r2
 800aad6:	2200      	movs	r2, #0
 800aad8:	602a      	str	r2, [r5, #0]
 800aada:	461a      	mov	r2, r3
 800aadc:	f7f6 fa58 	bl	8000f90 <_lseek>
 800aae0:	1c43      	adds	r3, r0, #1
 800aae2:	d102      	bne.n	800aaea <_lseek_r+0x1e>
 800aae4:	682b      	ldr	r3, [r5, #0]
 800aae6:	b103      	cbz	r3, 800aaea <_lseek_r+0x1e>
 800aae8:	6023      	str	r3, [r4, #0]
 800aaea:	bd38      	pop	{r3, r4, r5, pc}
 800aaec:	24008760 	.word	0x24008760

0800aaf0 <_read_r>:
 800aaf0:	b538      	push	{r3, r4, r5, lr}
 800aaf2:	4d07      	ldr	r5, [pc, #28]	; (800ab10 <_read_r+0x20>)
 800aaf4:	4604      	mov	r4, r0
 800aaf6:	4608      	mov	r0, r1
 800aaf8:	4611      	mov	r1, r2
 800aafa:	2200      	movs	r2, #0
 800aafc:	602a      	str	r2, [r5, #0]
 800aafe:	461a      	mov	r2, r3
 800ab00:	f7f6 fa1e 	bl	8000f40 <_read>
 800ab04:	1c43      	adds	r3, r0, #1
 800ab06:	d102      	bne.n	800ab0e <_read_r+0x1e>
 800ab08:	682b      	ldr	r3, [r5, #0]
 800ab0a:	b103      	cbz	r3, 800ab0e <_read_r+0x1e>
 800ab0c:	6023      	str	r3, [r4, #0]
 800ab0e:	bd38      	pop	{r3, r4, r5, pc}
 800ab10:	24008760 	.word	0x24008760

0800ab14 <_sbrk_r>:
 800ab14:	b538      	push	{r3, r4, r5, lr}
 800ab16:	4d06      	ldr	r5, [pc, #24]	; (800ab30 <_sbrk_r+0x1c>)
 800ab18:	2300      	movs	r3, #0
 800ab1a:	4604      	mov	r4, r0
 800ab1c:	4608      	mov	r0, r1
 800ab1e:	602b      	str	r3, [r5, #0]
 800ab20:	f7f6 fa38 	bl	8000f94 <_sbrk>
 800ab24:	1c43      	adds	r3, r0, #1
 800ab26:	d102      	bne.n	800ab2e <_sbrk_r+0x1a>
 800ab28:	682b      	ldr	r3, [r5, #0]
 800ab2a:	b103      	cbz	r3, 800ab2e <_sbrk_r+0x1a>
 800ab2c:	6023      	str	r3, [r4, #0]
 800ab2e:	bd38      	pop	{r3, r4, r5, pc}
 800ab30:	24008760 	.word	0x24008760

0800ab34 <_write_r>:
 800ab34:	b538      	push	{r3, r4, r5, lr}
 800ab36:	4d07      	ldr	r5, [pc, #28]	; (800ab54 <_write_r+0x20>)
 800ab38:	4604      	mov	r4, r0
 800ab3a:	4608      	mov	r0, r1
 800ab3c:	4611      	mov	r1, r2
 800ab3e:	2200      	movs	r2, #0
 800ab40:	602a      	str	r2, [r5, #0]
 800ab42:	461a      	mov	r2, r3
 800ab44:	f7f6 fa0a 	bl	8000f5c <_write>
 800ab48:	1c43      	adds	r3, r0, #1
 800ab4a:	d102      	bne.n	800ab52 <_write_r+0x1e>
 800ab4c:	682b      	ldr	r3, [r5, #0]
 800ab4e:	b103      	cbz	r3, 800ab52 <_write_r+0x1e>
 800ab50:	6023      	str	r3, [r4, #0]
 800ab52:	bd38      	pop	{r3, r4, r5, pc}
 800ab54:	24008760 	.word	0x24008760

0800ab58 <__errno>:
 800ab58:	4b01      	ldr	r3, [pc, #4]	; (800ab60 <__errno+0x8>)
 800ab5a:	6818      	ldr	r0, [r3, #0]
 800ab5c:	4770      	bx	lr
 800ab5e:	bf00      	nop
 800ab60:	2400667c 	.word	0x2400667c

0800ab64 <__libc_init_array>:
 800ab64:	b570      	push	{r4, r5, r6, lr}
 800ab66:	4d0d      	ldr	r5, [pc, #52]	; (800ab9c <__libc_init_array+0x38>)
 800ab68:	4c0d      	ldr	r4, [pc, #52]	; (800aba0 <__libc_init_array+0x3c>)
 800ab6a:	1b64      	subs	r4, r4, r5
 800ab6c:	10a4      	asrs	r4, r4, #2
 800ab6e:	2600      	movs	r6, #0
 800ab70:	42a6      	cmp	r6, r4
 800ab72:	d109      	bne.n	800ab88 <__libc_init_array+0x24>
 800ab74:	4d0b      	ldr	r5, [pc, #44]	; (800aba4 <__libc_init_array+0x40>)
 800ab76:	4c0c      	ldr	r4, [pc, #48]	; (800aba8 <__libc_init_array+0x44>)
 800ab78:	f001 ff6a 	bl	800ca50 <_init>
 800ab7c:	1b64      	subs	r4, r4, r5
 800ab7e:	10a4      	asrs	r4, r4, #2
 800ab80:	2600      	movs	r6, #0
 800ab82:	42a6      	cmp	r6, r4
 800ab84:	d105      	bne.n	800ab92 <__libc_init_array+0x2e>
 800ab86:	bd70      	pop	{r4, r5, r6, pc}
 800ab88:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab8c:	4798      	blx	r3
 800ab8e:	3601      	adds	r6, #1
 800ab90:	e7ee      	b.n	800ab70 <__libc_init_array+0xc>
 800ab92:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab96:	4798      	blx	r3
 800ab98:	3601      	adds	r6, #1
 800ab9a:	e7f2      	b.n	800ab82 <__libc_init_array+0x1e>
 800ab9c:	0801fe2c 	.word	0x0801fe2c
 800aba0:	0801fe2c 	.word	0x0801fe2c
 800aba4:	0801fe2c 	.word	0x0801fe2c
 800aba8:	0801fe30 	.word	0x0801fe30

0800abac <__retarget_lock_acquire_recursive>:
 800abac:	4770      	bx	lr

0800abae <__retarget_lock_release_recursive>:
 800abae:	4770      	bx	lr

0800abb0 <quorem>:
 800abb0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abb4:	6903      	ldr	r3, [r0, #16]
 800abb6:	690c      	ldr	r4, [r1, #16]
 800abb8:	42a3      	cmp	r3, r4
 800abba:	4607      	mov	r7, r0
 800abbc:	db7e      	blt.n	800acbc <quorem+0x10c>
 800abbe:	3c01      	subs	r4, #1
 800abc0:	f101 0814 	add.w	r8, r1, #20
 800abc4:	f100 0514 	add.w	r5, r0, #20
 800abc8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800abcc:	9301      	str	r3, [sp, #4]
 800abce:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800abd2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800abd6:	3301      	adds	r3, #1
 800abd8:	429a      	cmp	r2, r3
 800abda:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800abde:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800abe2:	fbb2 f6f3 	udiv	r6, r2, r3
 800abe6:	d331      	bcc.n	800ac4c <quorem+0x9c>
 800abe8:	f04f 0e00 	mov.w	lr, #0
 800abec:	4640      	mov	r0, r8
 800abee:	46ac      	mov	ip, r5
 800abf0:	46f2      	mov	sl, lr
 800abf2:	f850 2b04 	ldr.w	r2, [r0], #4
 800abf6:	b293      	uxth	r3, r2
 800abf8:	fb06 e303 	mla	r3, r6, r3, lr
 800abfc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ac00:	0c1a      	lsrs	r2, r3, #16
 800ac02:	b29b      	uxth	r3, r3
 800ac04:	ebaa 0303 	sub.w	r3, sl, r3
 800ac08:	f8dc a000 	ldr.w	sl, [ip]
 800ac0c:	fa13 f38a 	uxtah	r3, r3, sl
 800ac10:	fb06 220e 	mla	r2, r6, lr, r2
 800ac14:	9300      	str	r3, [sp, #0]
 800ac16:	9b00      	ldr	r3, [sp, #0]
 800ac18:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ac1c:	b292      	uxth	r2, r2
 800ac1e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800ac22:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ac26:	f8bd 3000 	ldrh.w	r3, [sp]
 800ac2a:	4581      	cmp	r9, r0
 800ac2c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ac30:	f84c 3b04 	str.w	r3, [ip], #4
 800ac34:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ac38:	d2db      	bcs.n	800abf2 <quorem+0x42>
 800ac3a:	f855 300b 	ldr.w	r3, [r5, fp]
 800ac3e:	b92b      	cbnz	r3, 800ac4c <quorem+0x9c>
 800ac40:	9b01      	ldr	r3, [sp, #4]
 800ac42:	3b04      	subs	r3, #4
 800ac44:	429d      	cmp	r5, r3
 800ac46:	461a      	mov	r2, r3
 800ac48:	d32c      	bcc.n	800aca4 <quorem+0xf4>
 800ac4a:	613c      	str	r4, [r7, #16]
 800ac4c:	4638      	mov	r0, r7
 800ac4e:	f001 f86b 	bl	800bd28 <__mcmp>
 800ac52:	2800      	cmp	r0, #0
 800ac54:	db22      	blt.n	800ac9c <quorem+0xec>
 800ac56:	3601      	adds	r6, #1
 800ac58:	4629      	mov	r1, r5
 800ac5a:	2000      	movs	r0, #0
 800ac5c:	f858 2b04 	ldr.w	r2, [r8], #4
 800ac60:	f8d1 c000 	ldr.w	ip, [r1]
 800ac64:	b293      	uxth	r3, r2
 800ac66:	1ac3      	subs	r3, r0, r3
 800ac68:	0c12      	lsrs	r2, r2, #16
 800ac6a:	fa13 f38c 	uxtah	r3, r3, ip
 800ac6e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800ac72:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ac76:	b29b      	uxth	r3, r3
 800ac78:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ac7c:	45c1      	cmp	r9, r8
 800ac7e:	f841 3b04 	str.w	r3, [r1], #4
 800ac82:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ac86:	d2e9      	bcs.n	800ac5c <quorem+0xac>
 800ac88:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ac8c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ac90:	b922      	cbnz	r2, 800ac9c <quorem+0xec>
 800ac92:	3b04      	subs	r3, #4
 800ac94:	429d      	cmp	r5, r3
 800ac96:	461a      	mov	r2, r3
 800ac98:	d30a      	bcc.n	800acb0 <quorem+0x100>
 800ac9a:	613c      	str	r4, [r7, #16]
 800ac9c:	4630      	mov	r0, r6
 800ac9e:	b003      	add	sp, #12
 800aca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aca4:	6812      	ldr	r2, [r2, #0]
 800aca6:	3b04      	subs	r3, #4
 800aca8:	2a00      	cmp	r2, #0
 800acaa:	d1ce      	bne.n	800ac4a <quorem+0x9a>
 800acac:	3c01      	subs	r4, #1
 800acae:	e7c9      	b.n	800ac44 <quorem+0x94>
 800acb0:	6812      	ldr	r2, [r2, #0]
 800acb2:	3b04      	subs	r3, #4
 800acb4:	2a00      	cmp	r2, #0
 800acb6:	d1f0      	bne.n	800ac9a <quorem+0xea>
 800acb8:	3c01      	subs	r4, #1
 800acba:	e7eb      	b.n	800ac94 <quorem+0xe4>
 800acbc:	2000      	movs	r0, #0
 800acbe:	e7ee      	b.n	800ac9e <quorem+0xee>

0800acc0 <_dtoa_r>:
 800acc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acc4:	ed2d 8b02 	vpush	{d8}
 800acc8:	69c5      	ldr	r5, [r0, #28]
 800acca:	b091      	sub	sp, #68	; 0x44
 800accc:	ed8d 0b02 	vstr	d0, [sp, #8]
 800acd0:	ec59 8b10 	vmov	r8, r9, d0
 800acd4:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800acd6:	9106      	str	r1, [sp, #24]
 800acd8:	4606      	mov	r6, r0
 800acda:	9208      	str	r2, [sp, #32]
 800acdc:	930c      	str	r3, [sp, #48]	; 0x30
 800acde:	b975      	cbnz	r5, 800acfe <_dtoa_r+0x3e>
 800ace0:	2010      	movs	r0, #16
 800ace2:	f7ff f8cd 	bl	8009e80 <malloc>
 800ace6:	4602      	mov	r2, r0
 800ace8:	61f0      	str	r0, [r6, #28]
 800acea:	b920      	cbnz	r0, 800acf6 <_dtoa_r+0x36>
 800acec:	4ba6      	ldr	r3, [pc, #664]	; (800af88 <_dtoa_r+0x2c8>)
 800acee:	21ef      	movs	r1, #239	; 0xef
 800acf0:	48a6      	ldr	r0, [pc, #664]	; (800af8c <_dtoa_r+0x2cc>)
 800acf2:	f001 fb47 	bl	800c384 <__assert_func>
 800acf6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800acfa:	6005      	str	r5, [r0, #0]
 800acfc:	60c5      	str	r5, [r0, #12]
 800acfe:	69f3      	ldr	r3, [r6, #28]
 800ad00:	6819      	ldr	r1, [r3, #0]
 800ad02:	b151      	cbz	r1, 800ad1a <_dtoa_r+0x5a>
 800ad04:	685a      	ldr	r2, [r3, #4]
 800ad06:	604a      	str	r2, [r1, #4]
 800ad08:	2301      	movs	r3, #1
 800ad0a:	4093      	lsls	r3, r2
 800ad0c:	608b      	str	r3, [r1, #8]
 800ad0e:	4630      	mov	r0, r6
 800ad10:	f000 fdce 	bl	800b8b0 <_Bfree>
 800ad14:	69f3      	ldr	r3, [r6, #28]
 800ad16:	2200      	movs	r2, #0
 800ad18:	601a      	str	r2, [r3, #0]
 800ad1a:	f1b9 0300 	subs.w	r3, r9, #0
 800ad1e:	bfbb      	ittet	lt
 800ad20:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800ad24:	9303      	strlt	r3, [sp, #12]
 800ad26:	2300      	movge	r3, #0
 800ad28:	2201      	movlt	r2, #1
 800ad2a:	bfac      	ite	ge
 800ad2c:	6023      	strge	r3, [r4, #0]
 800ad2e:	6022      	strlt	r2, [r4, #0]
 800ad30:	4b97      	ldr	r3, [pc, #604]	; (800af90 <_dtoa_r+0x2d0>)
 800ad32:	9c03      	ldr	r4, [sp, #12]
 800ad34:	43a3      	bics	r3, r4
 800ad36:	d11c      	bne.n	800ad72 <_dtoa_r+0xb2>
 800ad38:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ad3a:	f242 730f 	movw	r3, #9999	; 0x270f
 800ad3e:	6013      	str	r3, [r2, #0]
 800ad40:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800ad44:	ea53 0308 	orrs.w	r3, r3, r8
 800ad48:	f000 84fb 	beq.w	800b742 <_dtoa_r+0xa82>
 800ad4c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ad4e:	b963      	cbnz	r3, 800ad6a <_dtoa_r+0xaa>
 800ad50:	4b90      	ldr	r3, [pc, #576]	; (800af94 <_dtoa_r+0x2d4>)
 800ad52:	e020      	b.n	800ad96 <_dtoa_r+0xd6>
 800ad54:	4b90      	ldr	r3, [pc, #576]	; (800af98 <_dtoa_r+0x2d8>)
 800ad56:	9301      	str	r3, [sp, #4]
 800ad58:	3308      	adds	r3, #8
 800ad5a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800ad5c:	6013      	str	r3, [r2, #0]
 800ad5e:	9801      	ldr	r0, [sp, #4]
 800ad60:	b011      	add	sp, #68	; 0x44
 800ad62:	ecbd 8b02 	vpop	{d8}
 800ad66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad6a:	4b8a      	ldr	r3, [pc, #552]	; (800af94 <_dtoa_r+0x2d4>)
 800ad6c:	9301      	str	r3, [sp, #4]
 800ad6e:	3303      	adds	r3, #3
 800ad70:	e7f3      	b.n	800ad5a <_dtoa_r+0x9a>
 800ad72:	ed9d 8b02 	vldr	d8, [sp, #8]
 800ad76:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800ad7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad7e:	d10c      	bne.n	800ad9a <_dtoa_r+0xda>
 800ad80:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ad82:	2301      	movs	r3, #1
 800ad84:	6013      	str	r3, [r2, #0]
 800ad86:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	f000 84d7 	beq.w	800b73c <_dtoa_r+0xa7c>
 800ad8e:	4b83      	ldr	r3, [pc, #524]	; (800af9c <_dtoa_r+0x2dc>)
 800ad90:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800ad92:	6013      	str	r3, [r2, #0]
 800ad94:	3b01      	subs	r3, #1
 800ad96:	9301      	str	r3, [sp, #4]
 800ad98:	e7e1      	b.n	800ad5e <_dtoa_r+0x9e>
 800ad9a:	aa0e      	add	r2, sp, #56	; 0x38
 800ad9c:	a90f      	add	r1, sp, #60	; 0x3c
 800ad9e:	4630      	mov	r0, r6
 800ada0:	eeb0 0b48 	vmov.f64	d0, d8
 800ada4:	f001 f866 	bl	800be74 <__d2b>
 800ada8:	f3c4 530a 	ubfx	r3, r4, #20, #11
 800adac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800adae:	4605      	mov	r5, r0
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d046      	beq.n	800ae42 <_dtoa_r+0x182>
 800adb4:	eeb0 7b48 	vmov.f64	d7, d8
 800adb8:	ee18 1a90 	vmov	r1, s17
 800adbc:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800adc0:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 800adc4:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800adc8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800adcc:	2000      	movs	r0, #0
 800adce:	ee07 1a90 	vmov	s15, r1
 800add2:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 800add6:	ed9f 5b66 	vldr	d5, [pc, #408]	; 800af70 <_dtoa_r+0x2b0>
 800adda:	ee37 7b46 	vsub.f64	d7, d7, d6
 800adde:	ed9f 6b66 	vldr	d6, [pc, #408]	; 800af78 <_dtoa_r+0x2b8>
 800ade2:	eea7 6b05 	vfma.f64	d6, d7, d5
 800ade6:	ed9f 5b66 	vldr	d5, [pc, #408]	; 800af80 <_dtoa_r+0x2c0>
 800adea:	ee07 3a90 	vmov	s15, r3
 800adee:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800adf2:	eeb0 7b46 	vmov.f64	d7, d6
 800adf6:	eea4 7b05 	vfma.f64	d7, d4, d5
 800adfa:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800adfe:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800ae02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae06:	ee16 ba90 	vmov	fp, s13
 800ae0a:	9009      	str	r0, [sp, #36]	; 0x24
 800ae0c:	d508      	bpl.n	800ae20 <_dtoa_r+0x160>
 800ae0e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800ae12:	eeb4 6b47 	vcmp.f64	d6, d7
 800ae16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae1a:	bf18      	it	ne
 800ae1c:	f10b 3bff 	addne.w	fp, fp, #4294967295	; 0xffffffff
 800ae20:	f1bb 0f16 	cmp.w	fp, #22
 800ae24:	d82b      	bhi.n	800ae7e <_dtoa_r+0x1be>
 800ae26:	495e      	ldr	r1, [pc, #376]	; (800afa0 <_dtoa_r+0x2e0>)
 800ae28:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 800ae2c:	ed91 7b00 	vldr	d7, [r1]
 800ae30:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800ae34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae38:	d501      	bpl.n	800ae3e <_dtoa_r+0x17e>
 800ae3a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800ae3e:	2100      	movs	r1, #0
 800ae40:	e01e      	b.n	800ae80 <_dtoa_r+0x1c0>
 800ae42:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ae44:	4413      	add	r3, r2
 800ae46:	f203 4132 	addw	r1, r3, #1074	; 0x432
 800ae4a:	2920      	cmp	r1, #32
 800ae4c:	bfc1      	itttt	gt
 800ae4e:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 800ae52:	408c      	lslgt	r4, r1
 800ae54:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 800ae58:	fa28 f101 	lsrgt.w	r1, r8, r1
 800ae5c:	bfd6      	itet	le
 800ae5e:	f1c1 0120 	rsble	r1, r1, #32
 800ae62:	4321      	orrgt	r1, r4
 800ae64:	fa08 f101 	lslle.w	r1, r8, r1
 800ae68:	ee07 1a90 	vmov	s15, r1
 800ae6c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800ae70:	3b01      	subs	r3, #1
 800ae72:	ee17 1a90 	vmov	r1, s15
 800ae76:	2001      	movs	r0, #1
 800ae78:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800ae7c:	e7a7      	b.n	800adce <_dtoa_r+0x10e>
 800ae7e:	2101      	movs	r1, #1
 800ae80:	1ad2      	subs	r2, r2, r3
 800ae82:	1e53      	subs	r3, r2, #1
 800ae84:	9305      	str	r3, [sp, #20]
 800ae86:	bf45      	ittet	mi
 800ae88:	f1c2 0301 	rsbmi	r3, r2, #1
 800ae8c:	9304      	strmi	r3, [sp, #16]
 800ae8e:	2300      	movpl	r3, #0
 800ae90:	2300      	movmi	r3, #0
 800ae92:	bf4c      	ite	mi
 800ae94:	9305      	strmi	r3, [sp, #20]
 800ae96:	9304      	strpl	r3, [sp, #16]
 800ae98:	f1bb 0f00 	cmp.w	fp, #0
 800ae9c:	910b      	str	r1, [sp, #44]	; 0x2c
 800ae9e:	db18      	blt.n	800aed2 <_dtoa_r+0x212>
 800aea0:	9b05      	ldr	r3, [sp, #20]
 800aea2:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800aea6:	445b      	add	r3, fp
 800aea8:	9305      	str	r3, [sp, #20]
 800aeaa:	2300      	movs	r3, #0
 800aeac:	9a06      	ldr	r2, [sp, #24]
 800aeae:	2a09      	cmp	r2, #9
 800aeb0:	d848      	bhi.n	800af44 <_dtoa_r+0x284>
 800aeb2:	2a05      	cmp	r2, #5
 800aeb4:	bfc4      	itt	gt
 800aeb6:	3a04      	subgt	r2, #4
 800aeb8:	9206      	strgt	r2, [sp, #24]
 800aeba:	9a06      	ldr	r2, [sp, #24]
 800aebc:	f1a2 0202 	sub.w	r2, r2, #2
 800aec0:	bfcc      	ite	gt
 800aec2:	2400      	movgt	r4, #0
 800aec4:	2401      	movle	r4, #1
 800aec6:	2a03      	cmp	r2, #3
 800aec8:	d847      	bhi.n	800af5a <_dtoa_r+0x29a>
 800aeca:	e8df f002 	tbb	[pc, r2]
 800aece:	2d0b      	.short	0x2d0b
 800aed0:	392b      	.short	0x392b
 800aed2:	9b04      	ldr	r3, [sp, #16]
 800aed4:	2200      	movs	r2, #0
 800aed6:	eba3 030b 	sub.w	r3, r3, fp
 800aeda:	9304      	str	r3, [sp, #16]
 800aedc:	920a      	str	r2, [sp, #40]	; 0x28
 800aede:	f1cb 0300 	rsb	r3, fp, #0
 800aee2:	e7e3      	b.n	800aeac <_dtoa_r+0x1ec>
 800aee4:	2200      	movs	r2, #0
 800aee6:	9207      	str	r2, [sp, #28]
 800aee8:	9a08      	ldr	r2, [sp, #32]
 800aeea:	2a00      	cmp	r2, #0
 800aeec:	dc38      	bgt.n	800af60 <_dtoa_r+0x2a0>
 800aeee:	f04f 0a01 	mov.w	sl, #1
 800aef2:	46d1      	mov	r9, sl
 800aef4:	4652      	mov	r2, sl
 800aef6:	f8cd a020 	str.w	sl, [sp, #32]
 800aefa:	69f7      	ldr	r7, [r6, #28]
 800aefc:	2100      	movs	r1, #0
 800aefe:	2004      	movs	r0, #4
 800af00:	f100 0c14 	add.w	ip, r0, #20
 800af04:	4594      	cmp	ip, r2
 800af06:	d930      	bls.n	800af6a <_dtoa_r+0x2aa>
 800af08:	6079      	str	r1, [r7, #4]
 800af0a:	4630      	mov	r0, r6
 800af0c:	930d      	str	r3, [sp, #52]	; 0x34
 800af0e:	f000 fc8f 	bl	800b830 <_Balloc>
 800af12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800af14:	9001      	str	r0, [sp, #4]
 800af16:	4602      	mov	r2, r0
 800af18:	2800      	cmp	r0, #0
 800af1a:	d145      	bne.n	800afa8 <_dtoa_r+0x2e8>
 800af1c:	4b21      	ldr	r3, [pc, #132]	; (800afa4 <_dtoa_r+0x2e4>)
 800af1e:	f240 11af 	movw	r1, #431	; 0x1af
 800af22:	e6e5      	b.n	800acf0 <_dtoa_r+0x30>
 800af24:	2201      	movs	r2, #1
 800af26:	e7de      	b.n	800aee6 <_dtoa_r+0x226>
 800af28:	2200      	movs	r2, #0
 800af2a:	9207      	str	r2, [sp, #28]
 800af2c:	9a08      	ldr	r2, [sp, #32]
 800af2e:	eb0b 0a02 	add.w	sl, fp, r2
 800af32:	f10a 0901 	add.w	r9, sl, #1
 800af36:	464a      	mov	r2, r9
 800af38:	2a01      	cmp	r2, #1
 800af3a:	bfb8      	it	lt
 800af3c:	2201      	movlt	r2, #1
 800af3e:	e7dc      	b.n	800aefa <_dtoa_r+0x23a>
 800af40:	2201      	movs	r2, #1
 800af42:	e7f2      	b.n	800af2a <_dtoa_r+0x26a>
 800af44:	2401      	movs	r4, #1
 800af46:	2200      	movs	r2, #0
 800af48:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800af4c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800af50:	2100      	movs	r1, #0
 800af52:	46d1      	mov	r9, sl
 800af54:	2212      	movs	r2, #18
 800af56:	9108      	str	r1, [sp, #32]
 800af58:	e7cf      	b.n	800aefa <_dtoa_r+0x23a>
 800af5a:	2201      	movs	r2, #1
 800af5c:	9207      	str	r2, [sp, #28]
 800af5e:	e7f5      	b.n	800af4c <_dtoa_r+0x28c>
 800af60:	f8dd a020 	ldr.w	sl, [sp, #32]
 800af64:	46d1      	mov	r9, sl
 800af66:	4652      	mov	r2, sl
 800af68:	e7c7      	b.n	800aefa <_dtoa_r+0x23a>
 800af6a:	3101      	adds	r1, #1
 800af6c:	0040      	lsls	r0, r0, #1
 800af6e:	e7c7      	b.n	800af00 <_dtoa_r+0x240>
 800af70:	636f4361 	.word	0x636f4361
 800af74:	3fd287a7 	.word	0x3fd287a7
 800af78:	8b60c8b3 	.word	0x8b60c8b3
 800af7c:	3fc68a28 	.word	0x3fc68a28
 800af80:	509f79fb 	.word	0x509f79fb
 800af84:	3fd34413 	.word	0x3fd34413
 800af88:	0801fafd 	.word	0x0801fafd
 800af8c:	0801fb14 	.word	0x0801fb14
 800af90:	7ff00000 	.word	0x7ff00000
 800af94:	0801faf9 	.word	0x0801faf9
 800af98:	0801faf0 	.word	0x0801faf0
 800af9c:	0801facd 	.word	0x0801facd
 800afa0:	0801fc00 	.word	0x0801fc00
 800afa4:	0801fb6c 	.word	0x0801fb6c
 800afa8:	69f2      	ldr	r2, [r6, #28]
 800afaa:	9901      	ldr	r1, [sp, #4]
 800afac:	6011      	str	r1, [r2, #0]
 800afae:	f1b9 0f0e 	cmp.w	r9, #14
 800afb2:	d86c      	bhi.n	800b08e <_dtoa_r+0x3ce>
 800afb4:	2c00      	cmp	r4, #0
 800afb6:	d06a      	beq.n	800b08e <_dtoa_r+0x3ce>
 800afb8:	f1bb 0f00 	cmp.w	fp, #0
 800afbc:	f340 80a0 	ble.w	800b100 <_dtoa_r+0x440>
 800afc0:	4ac1      	ldr	r2, [pc, #772]	; (800b2c8 <_dtoa_r+0x608>)
 800afc2:	f00b 010f 	and.w	r1, fp, #15
 800afc6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800afca:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800afce:	ed92 7b00 	vldr	d7, [r2]
 800afd2:	ea4f 122b 	mov.w	r2, fp, asr #4
 800afd6:	f000 8087 	beq.w	800b0e8 <_dtoa_r+0x428>
 800afda:	49bc      	ldr	r1, [pc, #752]	; (800b2cc <_dtoa_r+0x60c>)
 800afdc:	ed91 6b08 	vldr	d6, [r1, #32]
 800afe0:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800afe4:	ed8d 6b02 	vstr	d6, [sp, #8]
 800afe8:	f002 020f 	and.w	r2, r2, #15
 800afec:	2103      	movs	r1, #3
 800afee:	48b7      	ldr	r0, [pc, #732]	; (800b2cc <_dtoa_r+0x60c>)
 800aff0:	2a00      	cmp	r2, #0
 800aff2:	d17b      	bne.n	800b0ec <_dtoa_r+0x42c>
 800aff4:	ed9d 6b02 	vldr	d6, [sp, #8]
 800aff8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800affc:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b000:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b002:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b006:	2a00      	cmp	r2, #0
 800b008:	f000 80a0 	beq.w	800b14c <_dtoa_r+0x48c>
 800b00c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800b010:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b014:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b018:	f140 8098 	bpl.w	800b14c <_dtoa_r+0x48c>
 800b01c:	f1b9 0f00 	cmp.w	r9, #0
 800b020:	f000 8094 	beq.w	800b14c <_dtoa_r+0x48c>
 800b024:	f1ba 0f00 	cmp.w	sl, #0
 800b028:	dd2f      	ble.n	800b08a <_dtoa_r+0x3ca>
 800b02a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800b02e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b032:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b036:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 800b03a:	3101      	adds	r1, #1
 800b03c:	4654      	mov	r4, sl
 800b03e:	ed9d 6b02 	vldr	d6, [sp, #8]
 800b042:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800b046:	ee07 1a90 	vmov	s15, r1
 800b04a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800b04e:	eea7 5b06 	vfma.f64	d5, d7, d6
 800b052:	ee15 7a90 	vmov	r7, s11
 800b056:	ec51 0b15 	vmov	r0, r1, d5
 800b05a:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 800b05e:	2c00      	cmp	r4, #0
 800b060:	d177      	bne.n	800b152 <_dtoa_r+0x492>
 800b062:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800b066:	ee36 6b47 	vsub.f64	d6, d6, d7
 800b06a:	ec41 0b17 	vmov	d7, r0, r1
 800b06e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b072:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b076:	f300 826a 	bgt.w	800b54e <_dtoa_r+0x88e>
 800b07a:	eeb1 7b47 	vneg.f64	d7, d7
 800b07e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b082:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b086:	f100 8260 	bmi.w	800b54a <_dtoa_r+0x88a>
 800b08a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800b08e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b090:	2a00      	cmp	r2, #0
 800b092:	f2c0 811d 	blt.w	800b2d0 <_dtoa_r+0x610>
 800b096:	f1bb 0f0e 	cmp.w	fp, #14
 800b09a:	f300 8119 	bgt.w	800b2d0 <_dtoa_r+0x610>
 800b09e:	4b8a      	ldr	r3, [pc, #552]	; (800b2c8 <_dtoa_r+0x608>)
 800b0a0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b0a4:	ed93 6b00 	vldr	d6, [r3]
 800b0a8:	9b08      	ldr	r3, [sp, #32]
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	f280 80b7 	bge.w	800b21e <_dtoa_r+0x55e>
 800b0b0:	f1b9 0f00 	cmp.w	r9, #0
 800b0b4:	f300 80b3 	bgt.w	800b21e <_dtoa_r+0x55e>
 800b0b8:	f040 8246 	bne.w	800b548 <_dtoa_r+0x888>
 800b0bc:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800b0c0:	ee26 6b07 	vmul.f64	d6, d6, d7
 800b0c4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b0c8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b0cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0d0:	464c      	mov	r4, r9
 800b0d2:	464f      	mov	r7, r9
 800b0d4:	f280 821c 	bge.w	800b510 <_dtoa_r+0x850>
 800b0d8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800b0dc:	2331      	movs	r3, #49	; 0x31
 800b0de:	f808 3b01 	strb.w	r3, [r8], #1
 800b0e2:	f10b 0b01 	add.w	fp, fp, #1
 800b0e6:	e218      	b.n	800b51a <_dtoa_r+0x85a>
 800b0e8:	2102      	movs	r1, #2
 800b0ea:	e780      	b.n	800afee <_dtoa_r+0x32e>
 800b0ec:	07d4      	lsls	r4, r2, #31
 800b0ee:	d504      	bpl.n	800b0fa <_dtoa_r+0x43a>
 800b0f0:	ed90 6b00 	vldr	d6, [r0]
 800b0f4:	3101      	adds	r1, #1
 800b0f6:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b0fa:	1052      	asrs	r2, r2, #1
 800b0fc:	3008      	adds	r0, #8
 800b0fe:	e777      	b.n	800aff0 <_dtoa_r+0x330>
 800b100:	d022      	beq.n	800b148 <_dtoa_r+0x488>
 800b102:	f1cb 0200 	rsb	r2, fp, #0
 800b106:	4970      	ldr	r1, [pc, #448]	; (800b2c8 <_dtoa_r+0x608>)
 800b108:	f002 000f 	and.w	r0, r2, #15
 800b10c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800b110:	ed91 7b00 	vldr	d7, [r1]
 800b114:	ee28 7b07 	vmul.f64	d7, d8, d7
 800b118:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b11c:	486b      	ldr	r0, [pc, #428]	; (800b2cc <_dtoa_r+0x60c>)
 800b11e:	1112      	asrs	r2, r2, #4
 800b120:	2400      	movs	r4, #0
 800b122:	2102      	movs	r1, #2
 800b124:	b92a      	cbnz	r2, 800b132 <_dtoa_r+0x472>
 800b126:	2c00      	cmp	r4, #0
 800b128:	f43f af6a 	beq.w	800b000 <_dtoa_r+0x340>
 800b12c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b130:	e766      	b.n	800b000 <_dtoa_r+0x340>
 800b132:	07d7      	lsls	r7, r2, #31
 800b134:	d505      	bpl.n	800b142 <_dtoa_r+0x482>
 800b136:	ed90 6b00 	vldr	d6, [r0]
 800b13a:	3101      	adds	r1, #1
 800b13c:	2401      	movs	r4, #1
 800b13e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b142:	1052      	asrs	r2, r2, #1
 800b144:	3008      	adds	r0, #8
 800b146:	e7ed      	b.n	800b124 <_dtoa_r+0x464>
 800b148:	2102      	movs	r1, #2
 800b14a:	e759      	b.n	800b000 <_dtoa_r+0x340>
 800b14c:	465a      	mov	r2, fp
 800b14e:	464c      	mov	r4, r9
 800b150:	e775      	b.n	800b03e <_dtoa_r+0x37e>
 800b152:	ec41 0b17 	vmov	d7, r0, r1
 800b156:	495c      	ldr	r1, [pc, #368]	; (800b2c8 <_dtoa_r+0x608>)
 800b158:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 800b15c:	ed11 4b02 	vldr	d4, [r1, #-8]
 800b160:	9901      	ldr	r1, [sp, #4]
 800b162:	440c      	add	r4, r1
 800b164:	9907      	ldr	r1, [sp, #28]
 800b166:	b351      	cbz	r1, 800b1be <_dtoa_r+0x4fe>
 800b168:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800b16c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800b170:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800b174:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800b178:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800b17c:	ee35 7b47 	vsub.f64	d7, d5, d7
 800b180:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800b184:	ee14 1a90 	vmov	r1, s9
 800b188:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800b18c:	3130      	adds	r1, #48	; 0x30
 800b18e:	ee36 6b45 	vsub.f64	d6, d6, d5
 800b192:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b196:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b19a:	f808 1b01 	strb.w	r1, [r8], #1
 800b19e:	d439      	bmi.n	800b214 <_dtoa_r+0x554>
 800b1a0:	ee32 5b46 	vsub.f64	d5, d2, d6
 800b1a4:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800b1a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1ac:	d472      	bmi.n	800b294 <_dtoa_r+0x5d4>
 800b1ae:	45a0      	cmp	r8, r4
 800b1b0:	f43f af6b 	beq.w	800b08a <_dtoa_r+0x3ca>
 800b1b4:	ee27 7b03 	vmul.f64	d7, d7, d3
 800b1b8:	ee26 6b03 	vmul.f64	d6, d6, d3
 800b1bc:	e7e0      	b.n	800b180 <_dtoa_r+0x4c0>
 800b1be:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800b1c2:	ee27 7b04 	vmul.f64	d7, d7, d4
 800b1c6:	4620      	mov	r0, r4
 800b1c8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800b1cc:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800b1d0:	ee14 1a90 	vmov	r1, s9
 800b1d4:	3130      	adds	r1, #48	; 0x30
 800b1d6:	f808 1b01 	strb.w	r1, [r8], #1
 800b1da:	45a0      	cmp	r8, r4
 800b1dc:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800b1e0:	ee36 6b45 	vsub.f64	d6, d6, d5
 800b1e4:	d118      	bne.n	800b218 <_dtoa_r+0x558>
 800b1e6:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800b1ea:	ee37 4b05 	vadd.f64	d4, d7, d5
 800b1ee:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800b1f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1f6:	dc4d      	bgt.n	800b294 <_dtoa_r+0x5d4>
 800b1f8:	ee35 5b47 	vsub.f64	d5, d5, d7
 800b1fc:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800b200:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b204:	f57f af41 	bpl.w	800b08a <_dtoa_r+0x3ca>
 800b208:	4680      	mov	r8, r0
 800b20a:	3801      	subs	r0, #1
 800b20c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800b210:	2b30      	cmp	r3, #48	; 0x30
 800b212:	d0f9      	beq.n	800b208 <_dtoa_r+0x548>
 800b214:	4693      	mov	fp, r2
 800b216:	e02a      	b.n	800b26e <_dtoa_r+0x5ae>
 800b218:	ee26 6b03 	vmul.f64	d6, d6, d3
 800b21c:	e7d6      	b.n	800b1cc <_dtoa_r+0x50c>
 800b21e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b222:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800b226:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800b22a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800b22e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800b232:	ee15 3a10 	vmov	r3, s10
 800b236:	3330      	adds	r3, #48	; 0x30
 800b238:	f808 3b01 	strb.w	r3, [r8], #1
 800b23c:	9b01      	ldr	r3, [sp, #4]
 800b23e:	eba8 0303 	sub.w	r3, r8, r3
 800b242:	4599      	cmp	r9, r3
 800b244:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800b248:	eea3 7b46 	vfms.f64	d7, d3, d6
 800b24c:	d133      	bne.n	800b2b6 <_dtoa_r+0x5f6>
 800b24e:	ee37 7b07 	vadd.f64	d7, d7, d7
 800b252:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b256:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b25a:	dc1a      	bgt.n	800b292 <_dtoa_r+0x5d2>
 800b25c:	eeb4 7b46 	vcmp.f64	d7, d6
 800b260:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b264:	d103      	bne.n	800b26e <_dtoa_r+0x5ae>
 800b266:	ee15 3a10 	vmov	r3, s10
 800b26a:	07d9      	lsls	r1, r3, #31
 800b26c:	d411      	bmi.n	800b292 <_dtoa_r+0x5d2>
 800b26e:	4629      	mov	r1, r5
 800b270:	4630      	mov	r0, r6
 800b272:	f000 fb1d 	bl	800b8b0 <_Bfree>
 800b276:	2300      	movs	r3, #0
 800b278:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b27a:	f888 3000 	strb.w	r3, [r8]
 800b27e:	f10b 0301 	add.w	r3, fp, #1
 800b282:	6013      	str	r3, [r2, #0]
 800b284:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b286:	2b00      	cmp	r3, #0
 800b288:	f43f ad69 	beq.w	800ad5e <_dtoa_r+0x9e>
 800b28c:	f8c3 8000 	str.w	r8, [r3]
 800b290:	e565      	b.n	800ad5e <_dtoa_r+0x9e>
 800b292:	465a      	mov	r2, fp
 800b294:	4643      	mov	r3, r8
 800b296:	4698      	mov	r8, r3
 800b298:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 800b29c:	2939      	cmp	r1, #57	; 0x39
 800b29e:	d106      	bne.n	800b2ae <_dtoa_r+0x5ee>
 800b2a0:	9901      	ldr	r1, [sp, #4]
 800b2a2:	4299      	cmp	r1, r3
 800b2a4:	d1f7      	bne.n	800b296 <_dtoa_r+0x5d6>
 800b2a6:	9801      	ldr	r0, [sp, #4]
 800b2a8:	2130      	movs	r1, #48	; 0x30
 800b2aa:	3201      	adds	r2, #1
 800b2ac:	7001      	strb	r1, [r0, #0]
 800b2ae:	7819      	ldrb	r1, [r3, #0]
 800b2b0:	3101      	adds	r1, #1
 800b2b2:	7019      	strb	r1, [r3, #0]
 800b2b4:	e7ae      	b.n	800b214 <_dtoa_r+0x554>
 800b2b6:	ee27 7b04 	vmul.f64	d7, d7, d4
 800b2ba:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b2be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b2c2:	d1b2      	bne.n	800b22a <_dtoa_r+0x56a>
 800b2c4:	e7d3      	b.n	800b26e <_dtoa_r+0x5ae>
 800b2c6:	bf00      	nop
 800b2c8:	0801fc00 	.word	0x0801fc00
 800b2cc:	0801fbd8 	.word	0x0801fbd8
 800b2d0:	9907      	ldr	r1, [sp, #28]
 800b2d2:	2900      	cmp	r1, #0
 800b2d4:	f000 80d0 	beq.w	800b478 <_dtoa_r+0x7b8>
 800b2d8:	9906      	ldr	r1, [sp, #24]
 800b2da:	2901      	cmp	r1, #1
 800b2dc:	f300 80b4 	bgt.w	800b448 <_dtoa_r+0x788>
 800b2e0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b2e2:	2900      	cmp	r1, #0
 800b2e4:	f000 80ac 	beq.w	800b440 <_dtoa_r+0x780>
 800b2e8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800b2ec:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800b2f0:	461c      	mov	r4, r3
 800b2f2:	9309      	str	r3, [sp, #36]	; 0x24
 800b2f4:	9b04      	ldr	r3, [sp, #16]
 800b2f6:	4413      	add	r3, r2
 800b2f8:	9304      	str	r3, [sp, #16]
 800b2fa:	9b05      	ldr	r3, [sp, #20]
 800b2fc:	2101      	movs	r1, #1
 800b2fe:	4413      	add	r3, r2
 800b300:	4630      	mov	r0, r6
 800b302:	9305      	str	r3, [sp, #20]
 800b304:	f000 fb8a 	bl	800ba1c <__i2b>
 800b308:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b30a:	4607      	mov	r7, r0
 800b30c:	f1b8 0f00 	cmp.w	r8, #0
 800b310:	d00d      	beq.n	800b32e <_dtoa_r+0x66e>
 800b312:	9a05      	ldr	r2, [sp, #20]
 800b314:	2a00      	cmp	r2, #0
 800b316:	dd0a      	ble.n	800b32e <_dtoa_r+0x66e>
 800b318:	4542      	cmp	r2, r8
 800b31a:	9904      	ldr	r1, [sp, #16]
 800b31c:	bfa8      	it	ge
 800b31e:	4642      	movge	r2, r8
 800b320:	1a89      	subs	r1, r1, r2
 800b322:	9104      	str	r1, [sp, #16]
 800b324:	9905      	ldr	r1, [sp, #20]
 800b326:	eba8 0802 	sub.w	r8, r8, r2
 800b32a:	1a8a      	subs	r2, r1, r2
 800b32c:	9205      	str	r2, [sp, #20]
 800b32e:	b303      	cbz	r3, 800b372 <_dtoa_r+0x6b2>
 800b330:	9a07      	ldr	r2, [sp, #28]
 800b332:	2a00      	cmp	r2, #0
 800b334:	f000 80a5 	beq.w	800b482 <_dtoa_r+0x7c2>
 800b338:	2c00      	cmp	r4, #0
 800b33a:	dd13      	ble.n	800b364 <_dtoa_r+0x6a4>
 800b33c:	4639      	mov	r1, r7
 800b33e:	4622      	mov	r2, r4
 800b340:	4630      	mov	r0, r6
 800b342:	930d      	str	r3, [sp, #52]	; 0x34
 800b344:	f000 fc2a 	bl	800bb9c <__pow5mult>
 800b348:	462a      	mov	r2, r5
 800b34a:	4601      	mov	r1, r0
 800b34c:	4607      	mov	r7, r0
 800b34e:	4630      	mov	r0, r6
 800b350:	f000 fb7a 	bl	800ba48 <__multiply>
 800b354:	4629      	mov	r1, r5
 800b356:	9009      	str	r0, [sp, #36]	; 0x24
 800b358:	4630      	mov	r0, r6
 800b35a:	f000 faa9 	bl	800b8b0 <_Bfree>
 800b35e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b360:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b362:	4615      	mov	r5, r2
 800b364:	1b1a      	subs	r2, r3, r4
 800b366:	d004      	beq.n	800b372 <_dtoa_r+0x6b2>
 800b368:	4629      	mov	r1, r5
 800b36a:	4630      	mov	r0, r6
 800b36c:	f000 fc16 	bl	800bb9c <__pow5mult>
 800b370:	4605      	mov	r5, r0
 800b372:	2101      	movs	r1, #1
 800b374:	4630      	mov	r0, r6
 800b376:	f000 fb51 	bl	800ba1c <__i2b>
 800b37a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	4604      	mov	r4, r0
 800b380:	f340 8081 	ble.w	800b486 <_dtoa_r+0x7c6>
 800b384:	461a      	mov	r2, r3
 800b386:	4601      	mov	r1, r0
 800b388:	4630      	mov	r0, r6
 800b38a:	f000 fc07 	bl	800bb9c <__pow5mult>
 800b38e:	9b06      	ldr	r3, [sp, #24]
 800b390:	2b01      	cmp	r3, #1
 800b392:	4604      	mov	r4, r0
 800b394:	dd7a      	ble.n	800b48c <_dtoa_r+0x7cc>
 800b396:	2300      	movs	r3, #0
 800b398:	9309      	str	r3, [sp, #36]	; 0x24
 800b39a:	6922      	ldr	r2, [r4, #16]
 800b39c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800b3a0:	6910      	ldr	r0, [r2, #16]
 800b3a2:	f000 faed 	bl	800b980 <__hi0bits>
 800b3a6:	f1c0 0020 	rsb	r0, r0, #32
 800b3aa:	9b05      	ldr	r3, [sp, #20]
 800b3ac:	4418      	add	r0, r3
 800b3ae:	f010 001f 	ands.w	r0, r0, #31
 800b3b2:	f000 8093 	beq.w	800b4dc <_dtoa_r+0x81c>
 800b3b6:	f1c0 0220 	rsb	r2, r0, #32
 800b3ba:	2a04      	cmp	r2, #4
 800b3bc:	f340 8085 	ble.w	800b4ca <_dtoa_r+0x80a>
 800b3c0:	9b04      	ldr	r3, [sp, #16]
 800b3c2:	f1c0 001c 	rsb	r0, r0, #28
 800b3c6:	4403      	add	r3, r0
 800b3c8:	9304      	str	r3, [sp, #16]
 800b3ca:	9b05      	ldr	r3, [sp, #20]
 800b3cc:	4480      	add	r8, r0
 800b3ce:	4403      	add	r3, r0
 800b3d0:	9305      	str	r3, [sp, #20]
 800b3d2:	9b04      	ldr	r3, [sp, #16]
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	dd05      	ble.n	800b3e4 <_dtoa_r+0x724>
 800b3d8:	4629      	mov	r1, r5
 800b3da:	461a      	mov	r2, r3
 800b3dc:	4630      	mov	r0, r6
 800b3de:	f000 fc37 	bl	800bc50 <__lshift>
 800b3e2:	4605      	mov	r5, r0
 800b3e4:	9b05      	ldr	r3, [sp, #20]
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	dd05      	ble.n	800b3f6 <_dtoa_r+0x736>
 800b3ea:	4621      	mov	r1, r4
 800b3ec:	461a      	mov	r2, r3
 800b3ee:	4630      	mov	r0, r6
 800b3f0:	f000 fc2e 	bl	800bc50 <__lshift>
 800b3f4:	4604      	mov	r4, r0
 800b3f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d071      	beq.n	800b4e0 <_dtoa_r+0x820>
 800b3fc:	4621      	mov	r1, r4
 800b3fe:	4628      	mov	r0, r5
 800b400:	f000 fc92 	bl	800bd28 <__mcmp>
 800b404:	2800      	cmp	r0, #0
 800b406:	da6b      	bge.n	800b4e0 <_dtoa_r+0x820>
 800b408:	2300      	movs	r3, #0
 800b40a:	4629      	mov	r1, r5
 800b40c:	220a      	movs	r2, #10
 800b40e:	4630      	mov	r0, r6
 800b410:	f000 fa70 	bl	800b8f4 <__multadd>
 800b414:	9b07      	ldr	r3, [sp, #28]
 800b416:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800b41a:	4605      	mov	r5, r0
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	f000 8197 	beq.w	800b750 <_dtoa_r+0xa90>
 800b422:	4639      	mov	r1, r7
 800b424:	2300      	movs	r3, #0
 800b426:	220a      	movs	r2, #10
 800b428:	4630      	mov	r0, r6
 800b42a:	f000 fa63 	bl	800b8f4 <__multadd>
 800b42e:	f1ba 0f00 	cmp.w	sl, #0
 800b432:	4607      	mov	r7, r0
 800b434:	f300 8093 	bgt.w	800b55e <_dtoa_r+0x89e>
 800b438:	9b06      	ldr	r3, [sp, #24]
 800b43a:	2b02      	cmp	r3, #2
 800b43c:	dc57      	bgt.n	800b4ee <_dtoa_r+0x82e>
 800b43e:	e08e      	b.n	800b55e <_dtoa_r+0x89e>
 800b440:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b442:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800b446:	e751      	b.n	800b2ec <_dtoa_r+0x62c>
 800b448:	f109 34ff 	add.w	r4, r9, #4294967295	; 0xffffffff
 800b44c:	42a3      	cmp	r3, r4
 800b44e:	bfbf      	itttt	lt
 800b450:	1ae2      	sublt	r2, r4, r3
 800b452:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b454:	189b      	addlt	r3, r3, r2
 800b456:	930a      	strlt	r3, [sp, #40]	; 0x28
 800b458:	bfae      	itee	ge
 800b45a:	1b1c      	subge	r4, r3, r4
 800b45c:	4623      	movlt	r3, r4
 800b45e:	2400      	movlt	r4, #0
 800b460:	f1b9 0f00 	cmp.w	r9, #0
 800b464:	bfb5      	itete	lt
 800b466:	9a04      	ldrlt	r2, [sp, #16]
 800b468:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800b46c:	eba2 0809 	sublt.w	r8, r2, r9
 800b470:	464a      	movge	r2, r9
 800b472:	bfb8      	it	lt
 800b474:	2200      	movlt	r2, #0
 800b476:	e73c      	b.n	800b2f2 <_dtoa_r+0x632>
 800b478:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800b47c:	9f07      	ldr	r7, [sp, #28]
 800b47e:	461c      	mov	r4, r3
 800b480:	e744      	b.n	800b30c <_dtoa_r+0x64c>
 800b482:	461a      	mov	r2, r3
 800b484:	e770      	b.n	800b368 <_dtoa_r+0x6a8>
 800b486:	9b06      	ldr	r3, [sp, #24]
 800b488:	2b01      	cmp	r3, #1
 800b48a:	dc18      	bgt.n	800b4be <_dtoa_r+0x7fe>
 800b48c:	9b02      	ldr	r3, [sp, #8]
 800b48e:	b9b3      	cbnz	r3, 800b4be <_dtoa_r+0x7fe>
 800b490:	9b03      	ldr	r3, [sp, #12]
 800b492:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800b496:	b9a2      	cbnz	r2, 800b4c2 <_dtoa_r+0x802>
 800b498:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800b49c:	0d12      	lsrs	r2, r2, #20
 800b49e:	0512      	lsls	r2, r2, #20
 800b4a0:	b18a      	cbz	r2, 800b4c6 <_dtoa_r+0x806>
 800b4a2:	9b04      	ldr	r3, [sp, #16]
 800b4a4:	3301      	adds	r3, #1
 800b4a6:	9304      	str	r3, [sp, #16]
 800b4a8:	9b05      	ldr	r3, [sp, #20]
 800b4aa:	3301      	adds	r3, #1
 800b4ac:	9305      	str	r3, [sp, #20]
 800b4ae:	2301      	movs	r3, #1
 800b4b0:	9309      	str	r3, [sp, #36]	; 0x24
 800b4b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	f47f af70 	bne.w	800b39a <_dtoa_r+0x6da>
 800b4ba:	2001      	movs	r0, #1
 800b4bc:	e775      	b.n	800b3aa <_dtoa_r+0x6ea>
 800b4be:	2300      	movs	r3, #0
 800b4c0:	e7f6      	b.n	800b4b0 <_dtoa_r+0x7f0>
 800b4c2:	9b02      	ldr	r3, [sp, #8]
 800b4c4:	e7f4      	b.n	800b4b0 <_dtoa_r+0x7f0>
 800b4c6:	9209      	str	r2, [sp, #36]	; 0x24
 800b4c8:	e7f3      	b.n	800b4b2 <_dtoa_r+0x7f2>
 800b4ca:	d082      	beq.n	800b3d2 <_dtoa_r+0x712>
 800b4cc:	9b04      	ldr	r3, [sp, #16]
 800b4ce:	321c      	adds	r2, #28
 800b4d0:	4413      	add	r3, r2
 800b4d2:	9304      	str	r3, [sp, #16]
 800b4d4:	9b05      	ldr	r3, [sp, #20]
 800b4d6:	4490      	add	r8, r2
 800b4d8:	4413      	add	r3, r2
 800b4da:	e779      	b.n	800b3d0 <_dtoa_r+0x710>
 800b4dc:	4602      	mov	r2, r0
 800b4de:	e7f5      	b.n	800b4cc <_dtoa_r+0x80c>
 800b4e0:	f1b9 0f00 	cmp.w	r9, #0
 800b4e4:	dc36      	bgt.n	800b554 <_dtoa_r+0x894>
 800b4e6:	9b06      	ldr	r3, [sp, #24]
 800b4e8:	2b02      	cmp	r3, #2
 800b4ea:	dd33      	ble.n	800b554 <_dtoa_r+0x894>
 800b4ec:	46ca      	mov	sl, r9
 800b4ee:	f1ba 0f00 	cmp.w	sl, #0
 800b4f2:	d10d      	bne.n	800b510 <_dtoa_r+0x850>
 800b4f4:	4621      	mov	r1, r4
 800b4f6:	4653      	mov	r3, sl
 800b4f8:	2205      	movs	r2, #5
 800b4fa:	4630      	mov	r0, r6
 800b4fc:	f000 f9fa 	bl	800b8f4 <__multadd>
 800b500:	4601      	mov	r1, r0
 800b502:	4604      	mov	r4, r0
 800b504:	4628      	mov	r0, r5
 800b506:	f000 fc0f 	bl	800bd28 <__mcmp>
 800b50a:	2800      	cmp	r0, #0
 800b50c:	f73f ade4 	bgt.w	800b0d8 <_dtoa_r+0x418>
 800b510:	9b08      	ldr	r3, [sp, #32]
 800b512:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800b516:	ea6f 0b03 	mvn.w	fp, r3
 800b51a:	f04f 0900 	mov.w	r9, #0
 800b51e:	4621      	mov	r1, r4
 800b520:	4630      	mov	r0, r6
 800b522:	f000 f9c5 	bl	800b8b0 <_Bfree>
 800b526:	2f00      	cmp	r7, #0
 800b528:	f43f aea1 	beq.w	800b26e <_dtoa_r+0x5ae>
 800b52c:	f1b9 0f00 	cmp.w	r9, #0
 800b530:	d005      	beq.n	800b53e <_dtoa_r+0x87e>
 800b532:	45b9      	cmp	r9, r7
 800b534:	d003      	beq.n	800b53e <_dtoa_r+0x87e>
 800b536:	4649      	mov	r1, r9
 800b538:	4630      	mov	r0, r6
 800b53a:	f000 f9b9 	bl	800b8b0 <_Bfree>
 800b53e:	4639      	mov	r1, r7
 800b540:	4630      	mov	r0, r6
 800b542:	f000 f9b5 	bl	800b8b0 <_Bfree>
 800b546:	e692      	b.n	800b26e <_dtoa_r+0x5ae>
 800b548:	2400      	movs	r4, #0
 800b54a:	4627      	mov	r7, r4
 800b54c:	e7e0      	b.n	800b510 <_dtoa_r+0x850>
 800b54e:	4693      	mov	fp, r2
 800b550:	4627      	mov	r7, r4
 800b552:	e5c1      	b.n	800b0d8 <_dtoa_r+0x418>
 800b554:	9b07      	ldr	r3, [sp, #28]
 800b556:	46ca      	mov	sl, r9
 800b558:	2b00      	cmp	r3, #0
 800b55a:	f000 8100 	beq.w	800b75e <_dtoa_r+0xa9e>
 800b55e:	f1b8 0f00 	cmp.w	r8, #0
 800b562:	dd05      	ble.n	800b570 <_dtoa_r+0x8b0>
 800b564:	4639      	mov	r1, r7
 800b566:	4642      	mov	r2, r8
 800b568:	4630      	mov	r0, r6
 800b56a:	f000 fb71 	bl	800bc50 <__lshift>
 800b56e:	4607      	mov	r7, r0
 800b570:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b572:	2b00      	cmp	r3, #0
 800b574:	d05d      	beq.n	800b632 <_dtoa_r+0x972>
 800b576:	6879      	ldr	r1, [r7, #4]
 800b578:	4630      	mov	r0, r6
 800b57a:	f000 f959 	bl	800b830 <_Balloc>
 800b57e:	4680      	mov	r8, r0
 800b580:	b928      	cbnz	r0, 800b58e <_dtoa_r+0x8ce>
 800b582:	4b82      	ldr	r3, [pc, #520]	; (800b78c <_dtoa_r+0xacc>)
 800b584:	4602      	mov	r2, r0
 800b586:	f240 21ef 	movw	r1, #751	; 0x2ef
 800b58a:	f7ff bbb1 	b.w	800acf0 <_dtoa_r+0x30>
 800b58e:	693a      	ldr	r2, [r7, #16]
 800b590:	3202      	adds	r2, #2
 800b592:	0092      	lsls	r2, r2, #2
 800b594:	f107 010c 	add.w	r1, r7, #12
 800b598:	300c      	adds	r0, #12
 800b59a:	f000 fee5 	bl	800c368 <memcpy>
 800b59e:	2201      	movs	r2, #1
 800b5a0:	4641      	mov	r1, r8
 800b5a2:	4630      	mov	r0, r6
 800b5a4:	f000 fb54 	bl	800bc50 <__lshift>
 800b5a8:	9b01      	ldr	r3, [sp, #4]
 800b5aa:	3301      	adds	r3, #1
 800b5ac:	9304      	str	r3, [sp, #16]
 800b5ae:	9b01      	ldr	r3, [sp, #4]
 800b5b0:	4453      	add	r3, sl
 800b5b2:	9308      	str	r3, [sp, #32]
 800b5b4:	9b02      	ldr	r3, [sp, #8]
 800b5b6:	f003 0301 	and.w	r3, r3, #1
 800b5ba:	46b9      	mov	r9, r7
 800b5bc:	9307      	str	r3, [sp, #28]
 800b5be:	4607      	mov	r7, r0
 800b5c0:	9b04      	ldr	r3, [sp, #16]
 800b5c2:	4621      	mov	r1, r4
 800b5c4:	3b01      	subs	r3, #1
 800b5c6:	4628      	mov	r0, r5
 800b5c8:	9302      	str	r3, [sp, #8]
 800b5ca:	f7ff faf1 	bl	800abb0 <quorem>
 800b5ce:	4603      	mov	r3, r0
 800b5d0:	3330      	adds	r3, #48	; 0x30
 800b5d2:	9005      	str	r0, [sp, #20]
 800b5d4:	4649      	mov	r1, r9
 800b5d6:	4628      	mov	r0, r5
 800b5d8:	9309      	str	r3, [sp, #36]	; 0x24
 800b5da:	f000 fba5 	bl	800bd28 <__mcmp>
 800b5de:	463a      	mov	r2, r7
 800b5e0:	4682      	mov	sl, r0
 800b5e2:	4621      	mov	r1, r4
 800b5e4:	4630      	mov	r0, r6
 800b5e6:	f000 fbbb 	bl	800bd60 <__mdiff>
 800b5ea:	68c2      	ldr	r2, [r0, #12]
 800b5ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5ee:	4680      	mov	r8, r0
 800b5f0:	bb0a      	cbnz	r2, 800b636 <_dtoa_r+0x976>
 800b5f2:	4601      	mov	r1, r0
 800b5f4:	4628      	mov	r0, r5
 800b5f6:	f000 fb97 	bl	800bd28 <__mcmp>
 800b5fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5fc:	4602      	mov	r2, r0
 800b5fe:	4641      	mov	r1, r8
 800b600:	4630      	mov	r0, r6
 800b602:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800b606:	f000 f953 	bl	800b8b0 <_Bfree>
 800b60a:	9b06      	ldr	r3, [sp, #24]
 800b60c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b60e:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800b612:	ea43 0102 	orr.w	r1, r3, r2
 800b616:	9b07      	ldr	r3, [sp, #28]
 800b618:	4319      	orrs	r1, r3
 800b61a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b61c:	d10d      	bne.n	800b63a <_dtoa_r+0x97a>
 800b61e:	2b39      	cmp	r3, #57	; 0x39
 800b620:	d029      	beq.n	800b676 <_dtoa_r+0x9b6>
 800b622:	f1ba 0f00 	cmp.w	sl, #0
 800b626:	dd01      	ble.n	800b62c <_dtoa_r+0x96c>
 800b628:	9b05      	ldr	r3, [sp, #20]
 800b62a:	3331      	adds	r3, #49	; 0x31
 800b62c:	9a02      	ldr	r2, [sp, #8]
 800b62e:	7013      	strb	r3, [r2, #0]
 800b630:	e775      	b.n	800b51e <_dtoa_r+0x85e>
 800b632:	4638      	mov	r0, r7
 800b634:	e7b8      	b.n	800b5a8 <_dtoa_r+0x8e8>
 800b636:	2201      	movs	r2, #1
 800b638:	e7e1      	b.n	800b5fe <_dtoa_r+0x93e>
 800b63a:	f1ba 0f00 	cmp.w	sl, #0
 800b63e:	db06      	blt.n	800b64e <_dtoa_r+0x98e>
 800b640:	9906      	ldr	r1, [sp, #24]
 800b642:	ea41 0a0a 	orr.w	sl, r1, sl
 800b646:	9907      	ldr	r1, [sp, #28]
 800b648:	ea5a 0a01 	orrs.w	sl, sl, r1
 800b64c:	d120      	bne.n	800b690 <_dtoa_r+0x9d0>
 800b64e:	2a00      	cmp	r2, #0
 800b650:	ddec      	ble.n	800b62c <_dtoa_r+0x96c>
 800b652:	4629      	mov	r1, r5
 800b654:	2201      	movs	r2, #1
 800b656:	4630      	mov	r0, r6
 800b658:	9304      	str	r3, [sp, #16]
 800b65a:	f000 faf9 	bl	800bc50 <__lshift>
 800b65e:	4621      	mov	r1, r4
 800b660:	4605      	mov	r5, r0
 800b662:	f000 fb61 	bl	800bd28 <__mcmp>
 800b666:	2800      	cmp	r0, #0
 800b668:	9b04      	ldr	r3, [sp, #16]
 800b66a:	dc02      	bgt.n	800b672 <_dtoa_r+0x9b2>
 800b66c:	d1de      	bne.n	800b62c <_dtoa_r+0x96c>
 800b66e:	07da      	lsls	r2, r3, #31
 800b670:	d5dc      	bpl.n	800b62c <_dtoa_r+0x96c>
 800b672:	2b39      	cmp	r3, #57	; 0x39
 800b674:	d1d8      	bne.n	800b628 <_dtoa_r+0x968>
 800b676:	9a02      	ldr	r2, [sp, #8]
 800b678:	2339      	movs	r3, #57	; 0x39
 800b67a:	7013      	strb	r3, [r2, #0]
 800b67c:	4643      	mov	r3, r8
 800b67e:	4698      	mov	r8, r3
 800b680:	3b01      	subs	r3, #1
 800b682:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800b686:	2a39      	cmp	r2, #57	; 0x39
 800b688:	d051      	beq.n	800b72e <_dtoa_r+0xa6e>
 800b68a:	3201      	adds	r2, #1
 800b68c:	701a      	strb	r2, [r3, #0]
 800b68e:	e746      	b.n	800b51e <_dtoa_r+0x85e>
 800b690:	2a00      	cmp	r2, #0
 800b692:	dd03      	ble.n	800b69c <_dtoa_r+0x9dc>
 800b694:	2b39      	cmp	r3, #57	; 0x39
 800b696:	d0ee      	beq.n	800b676 <_dtoa_r+0x9b6>
 800b698:	3301      	adds	r3, #1
 800b69a:	e7c7      	b.n	800b62c <_dtoa_r+0x96c>
 800b69c:	9a04      	ldr	r2, [sp, #16]
 800b69e:	9908      	ldr	r1, [sp, #32]
 800b6a0:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b6a4:	428a      	cmp	r2, r1
 800b6a6:	d02b      	beq.n	800b700 <_dtoa_r+0xa40>
 800b6a8:	4629      	mov	r1, r5
 800b6aa:	2300      	movs	r3, #0
 800b6ac:	220a      	movs	r2, #10
 800b6ae:	4630      	mov	r0, r6
 800b6b0:	f000 f920 	bl	800b8f4 <__multadd>
 800b6b4:	45b9      	cmp	r9, r7
 800b6b6:	4605      	mov	r5, r0
 800b6b8:	f04f 0300 	mov.w	r3, #0
 800b6bc:	f04f 020a 	mov.w	r2, #10
 800b6c0:	4649      	mov	r1, r9
 800b6c2:	4630      	mov	r0, r6
 800b6c4:	d107      	bne.n	800b6d6 <_dtoa_r+0xa16>
 800b6c6:	f000 f915 	bl	800b8f4 <__multadd>
 800b6ca:	4681      	mov	r9, r0
 800b6cc:	4607      	mov	r7, r0
 800b6ce:	9b04      	ldr	r3, [sp, #16]
 800b6d0:	3301      	adds	r3, #1
 800b6d2:	9304      	str	r3, [sp, #16]
 800b6d4:	e774      	b.n	800b5c0 <_dtoa_r+0x900>
 800b6d6:	f000 f90d 	bl	800b8f4 <__multadd>
 800b6da:	4639      	mov	r1, r7
 800b6dc:	4681      	mov	r9, r0
 800b6de:	2300      	movs	r3, #0
 800b6e0:	220a      	movs	r2, #10
 800b6e2:	4630      	mov	r0, r6
 800b6e4:	f000 f906 	bl	800b8f4 <__multadd>
 800b6e8:	4607      	mov	r7, r0
 800b6ea:	e7f0      	b.n	800b6ce <_dtoa_r+0xa0e>
 800b6ec:	f1ba 0f00 	cmp.w	sl, #0
 800b6f0:	9a01      	ldr	r2, [sp, #4]
 800b6f2:	bfcc      	ite	gt
 800b6f4:	46d0      	movgt	r8, sl
 800b6f6:	f04f 0801 	movle.w	r8, #1
 800b6fa:	4490      	add	r8, r2
 800b6fc:	f04f 0900 	mov.w	r9, #0
 800b700:	4629      	mov	r1, r5
 800b702:	2201      	movs	r2, #1
 800b704:	4630      	mov	r0, r6
 800b706:	9302      	str	r3, [sp, #8]
 800b708:	f000 faa2 	bl	800bc50 <__lshift>
 800b70c:	4621      	mov	r1, r4
 800b70e:	4605      	mov	r5, r0
 800b710:	f000 fb0a 	bl	800bd28 <__mcmp>
 800b714:	2800      	cmp	r0, #0
 800b716:	dcb1      	bgt.n	800b67c <_dtoa_r+0x9bc>
 800b718:	d102      	bne.n	800b720 <_dtoa_r+0xa60>
 800b71a:	9b02      	ldr	r3, [sp, #8]
 800b71c:	07db      	lsls	r3, r3, #31
 800b71e:	d4ad      	bmi.n	800b67c <_dtoa_r+0x9bc>
 800b720:	4643      	mov	r3, r8
 800b722:	4698      	mov	r8, r3
 800b724:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b728:	2a30      	cmp	r2, #48	; 0x30
 800b72a:	d0fa      	beq.n	800b722 <_dtoa_r+0xa62>
 800b72c:	e6f7      	b.n	800b51e <_dtoa_r+0x85e>
 800b72e:	9a01      	ldr	r2, [sp, #4]
 800b730:	429a      	cmp	r2, r3
 800b732:	d1a4      	bne.n	800b67e <_dtoa_r+0x9be>
 800b734:	f10b 0b01 	add.w	fp, fp, #1
 800b738:	2331      	movs	r3, #49	; 0x31
 800b73a:	e778      	b.n	800b62e <_dtoa_r+0x96e>
 800b73c:	4b14      	ldr	r3, [pc, #80]	; (800b790 <_dtoa_r+0xad0>)
 800b73e:	f7ff bb2a 	b.w	800ad96 <_dtoa_r+0xd6>
 800b742:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b744:	2b00      	cmp	r3, #0
 800b746:	f47f ab05 	bne.w	800ad54 <_dtoa_r+0x94>
 800b74a:	4b12      	ldr	r3, [pc, #72]	; (800b794 <_dtoa_r+0xad4>)
 800b74c:	f7ff bb23 	b.w	800ad96 <_dtoa_r+0xd6>
 800b750:	f1ba 0f00 	cmp.w	sl, #0
 800b754:	dc03      	bgt.n	800b75e <_dtoa_r+0xa9e>
 800b756:	9b06      	ldr	r3, [sp, #24]
 800b758:	2b02      	cmp	r3, #2
 800b75a:	f73f aec8 	bgt.w	800b4ee <_dtoa_r+0x82e>
 800b75e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800b762:	4621      	mov	r1, r4
 800b764:	4628      	mov	r0, r5
 800b766:	f7ff fa23 	bl	800abb0 <quorem>
 800b76a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800b76e:	f808 3b01 	strb.w	r3, [r8], #1
 800b772:	9a01      	ldr	r2, [sp, #4]
 800b774:	eba8 0202 	sub.w	r2, r8, r2
 800b778:	4592      	cmp	sl, r2
 800b77a:	ddb7      	ble.n	800b6ec <_dtoa_r+0xa2c>
 800b77c:	4629      	mov	r1, r5
 800b77e:	2300      	movs	r3, #0
 800b780:	220a      	movs	r2, #10
 800b782:	4630      	mov	r0, r6
 800b784:	f000 f8b6 	bl	800b8f4 <__multadd>
 800b788:	4605      	mov	r5, r0
 800b78a:	e7ea      	b.n	800b762 <_dtoa_r+0xaa2>
 800b78c:	0801fb6c 	.word	0x0801fb6c
 800b790:	0801facc 	.word	0x0801facc
 800b794:	0801faf0 	.word	0x0801faf0

0800b798 <_free_r>:
 800b798:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b79a:	2900      	cmp	r1, #0
 800b79c:	d044      	beq.n	800b828 <_free_r+0x90>
 800b79e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b7a2:	9001      	str	r0, [sp, #4]
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	f1a1 0404 	sub.w	r4, r1, #4
 800b7aa:	bfb8      	it	lt
 800b7ac:	18e4      	addlt	r4, r4, r3
 800b7ae:	f7fe fc17 	bl	8009fe0 <__malloc_lock>
 800b7b2:	4a1e      	ldr	r2, [pc, #120]	; (800b82c <_free_r+0x94>)
 800b7b4:	9801      	ldr	r0, [sp, #4]
 800b7b6:	6813      	ldr	r3, [r2, #0]
 800b7b8:	b933      	cbnz	r3, 800b7c8 <_free_r+0x30>
 800b7ba:	6063      	str	r3, [r4, #4]
 800b7bc:	6014      	str	r4, [r2, #0]
 800b7be:	b003      	add	sp, #12
 800b7c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b7c4:	f7fe bc12 	b.w	8009fec <__malloc_unlock>
 800b7c8:	42a3      	cmp	r3, r4
 800b7ca:	d908      	bls.n	800b7de <_free_r+0x46>
 800b7cc:	6825      	ldr	r5, [r4, #0]
 800b7ce:	1961      	adds	r1, r4, r5
 800b7d0:	428b      	cmp	r3, r1
 800b7d2:	bf01      	itttt	eq
 800b7d4:	6819      	ldreq	r1, [r3, #0]
 800b7d6:	685b      	ldreq	r3, [r3, #4]
 800b7d8:	1949      	addeq	r1, r1, r5
 800b7da:	6021      	streq	r1, [r4, #0]
 800b7dc:	e7ed      	b.n	800b7ba <_free_r+0x22>
 800b7de:	461a      	mov	r2, r3
 800b7e0:	685b      	ldr	r3, [r3, #4]
 800b7e2:	b10b      	cbz	r3, 800b7e8 <_free_r+0x50>
 800b7e4:	42a3      	cmp	r3, r4
 800b7e6:	d9fa      	bls.n	800b7de <_free_r+0x46>
 800b7e8:	6811      	ldr	r1, [r2, #0]
 800b7ea:	1855      	adds	r5, r2, r1
 800b7ec:	42a5      	cmp	r5, r4
 800b7ee:	d10b      	bne.n	800b808 <_free_r+0x70>
 800b7f0:	6824      	ldr	r4, [r4, #0]
 800b7f2:	4421      	add	r1, r4
 800b7f4:	1854      	adds	r4, r2, r1
 800b7f6:	42a3      	cmp	r3, r4
 800b7f8:	6011      	str	r1, [r2, #0]
 800b7fa:	d1e0      	bne.n	800b7be <_free_r+0x26>
 800b7fc:	681c      	ldr	r4, [r3, #0]
 800b7fe:	685b      	ldr	r3, [r3, #4]
 800b800:	6053      	str	r3, [r2, #4]
 800b802:	440c      	add	r4, r1
 800b804:	6014      	str	r4, [r2, #0]
 800b806:	e7da      	b.n	800b7be <_free_r+0x26>
 800b808:	d902      	bls.n	800b810 <_free_r+0x78>
 800b80a:	230c      	movs	r3, #12
 800b80c:	6003      	str	r3, [r0, #0]
 800b80e:	e7d6      	b.n	800b7be <_free_r+0x26>
 800b810:	6825      	ldr	r5, [r4, #0]
 800b812:	1961      	adds	r1, r4, r5
 800b814:	428b      	cmp	r3, r1
 800b816:	bf04      	itt	eq
 800b818:	6819      	ldreq	r1, [r3, #0]
 800b81a:	685b      	ldreq	r3, [r3, #4]
 800b81c:	6063      	str	r3, [r4, #4]
 800b81e:	bf04      	itt	eq
 800b820:	1949      	addeq	r1, r1, r5
 800b822:	6021      	streq	r1, [r4, #0]
 800b824:	6054      	str	r4, [r2, #4]
 800b826:	e7ca      	b.n	800b7be <_free_r+0x26>
 800b828:	b003      	add	sp, #12
 800b82a:	bd30      	pop	{r4, r5, pc}
 800b82c:	2400861c 	.word	0x2400861c

0800b830 <_Balloc>:
 800b830:	b570      	push	{r4, r5, r6, lr}
 800b832:	69c6      	ldr	r6, [r0, #28]
 800b834:	4604      	mov	r4, r0
 800b836:	460d      	mov	r5, r1
 800b838:	b976      	cbnz	r6, 800b858 <_Balloc+0x28>
 800b83a:	2010      	movs	r0, #16
 800b83c:	f7fe fb20 	bl	8009e80 <malloc>
 800b840:	4602      	mov	r2, r0
 800b842:	61e0      	str	r0, [r4, #28]
 800b844:	b920      	cbnz	r0, 800b850 <_Balloc+0x20>
 800b846:	4b18      	ldr	r3, [pc, #96]	; (800b8a8 <_Balloc+0x78>)
 800b848:	4818      	ldr	r0, [pc, #96]	; (800b8ac <_Balloc+0x7c>)
 800b84a:	216b      	movs	r1, #107	; 0x6b
 800b84c:	f000 fd9a 	bl	800c384 <__assert_func>
 800b850:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b854:	6006      	str	r6, [r0, #0]
 800b856:	60c6      	str	r6, [r0, #12]
 800b858:	69e6      	ldr	r6, [r4, #28]
 800b85a:	68f3      	ldr	r3, [r6, #12]
 800b85c:	b183      	cbz	r3, 800b880 <_Balloc+0x50>
 800b85e:	69e3      	ldr	r3, [r4, #28]
 800b860:	68db      	ldr	r3, [r3, #12]
 800b862:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b866:	b9b8      	cbnz	r0, 800b898 <_Balloc+0x68>
 800b868:	2101      	movs	r1, #1
 800b86a:	fa01 f605 	lsl.w	r6, r1, r5
 800b86e:	1d72      	adds	r2, r6, #5
 800b870:	0092      	lsls	r2, r2, #2
 800b872:	4620      	mov	r0, r4
 800b874:	f000 fda4 	bl	800c3c0 <_calloc_r>
 800b878:	b160      	cbz	r0, 800b894 <_Balloc+0x64>
 800b87a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b87e:	e00e      	b.n	800b89e <_Balloc+0x6e>
 800b880:	2221      	movs	r2, #33	; 0x21
 800b882:	2104      	movs	r1, #4
 800b884:	4620      	mov	r0, r4
 800b886:	f000 fd9b 	bl	800c3c0 <_calloc_r>
 800b88a:	69e3      	ldr	r3, [r4, #28]
 800b88c:	60f0      	str	r0, [r6, #12]
 800b88e:	68db      	ldr	r3, [r3, #12]
 800b890:	2b00      	cmp	r3, #0
 800b892:	d1e4      	bne.n	800b85e <_Balloc+0x2e>
 800b894:	2000      	movs	r0, #0
 800b896:	bd70      	pop	{r4, r5, r6, pc}
 800b898:	6802      	ldr	r2, [r0, #0]
 800b89a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b89e:	2300      	movs	r3, #0
 800b8a0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b8a4:	e7f7      	b.n	800b896 <_Balloc+0x66>
 800b8a6:	bf00      	nop
 800b8a8:	0801fafd 	.word	0x0801fafd
 800b8ac:	0801fb7d 	.word	0x0801fb7d

0800b8b0 <_Bfree>:
 800b8b0:	b570      	push	{r4, r5, r6, lr}
 800b8b2:	69c6      	ldr	r6, [r0, #28]
 800b8b4:	4605      	mov	r5, r0
 800b8b6:	460c      	mov	r4, r1
 800b8b8:	b976      	cbnz	r6, 800b8d8 <_Bfree+0x28>
 800b8ba:	2010      	movs	r0, #16
 800b8bc:	f7fe fae0 	bl	8009e80 <malloc>
 800b8c0:	4602      	mov	r2, r0
 800b8c2:	61e8      	str	r0, [r5, #28]
 800b8c4:	b920      	cbnz	r0, 800b8d0 <_Bfree+0x20>
 800b8c6:	4b09      	ldr	r3, [pc, #36]	; (800b8ec <_Bfree+0x3c>)
 800b8c8:	4809      	ldr	r0, [pc, #36]	; (800b8f0 <_Bfree+0x40>)
 800b8ca:	218f      	movs	r1, #143	; 0x8f
 800b8cc:	f000 fd5a 	bl	800c384 <__assert_func>
 800b8d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b8d4:	6006      	str	r6, [r0, #0]
 800b8d6:	60c6      	str	r6, [r0, #12]
 800b8d8:	b13c      	cbz	r4, 800b8ea <_Bfree+0x3a>
 800b8da:	69eb      	ldr	r3, [r5, #28]
 800b8dc:	6862      	ldr	r2, [r4, #4]
 800b8de:	68db      	ldr	r3, [r3, #12]
 800b8e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b8e4:	6021      	str	r1, [r4, #0]
 800b8e6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b8ea:	bd70      	pop	{r4, r5, r6, pc}
 800b8ec:	0801fafd 	.word	0x0801fafd
 800b8f0:	0801fb7d 	.word	0x0801fb7d

0800b8f4 <__multadd>:
 800b8f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8f8:	690d      	ldr	r5, [r1, #16]
 800b8fa:	4607      	mov	r7, r0
 800b8fc:	460c      	mov	r4, r1
 800b8fe:	461e      	mov	r6, r3
 800b900:	f101 0c14 	add.w	ip, r1, #20
 800b904:	2000      	movs	r0, #0
 800b906:	f8dc 3000 	ldr.w	r3, [ip]
 800b90a:	b299      	uxth	r1, r3
 800b90c:	fb02 6101 	mla	r1, r2, r1, r6
 800b910:	0c1e      	lsrs	r6, r3, #16
 800b912:	0c0b      	lsrs	r3, r1, #16
 800b914:	fb02 3306 	mla	r3, r2, r6, r3
 800b918:	b289      	uxth	r1, r1
 800b91a:	3001      	adds	r0, #1
 800b91c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b920:	4285      	cmp	r5, r0
 800b922:	f84c 1b04 	str.w	r1, [ip], #4
 800b926:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b92a:	dcec      	bgt.n	800b906 <__multadd+0x12>
 800b92c:	b30e      	cbz	r6, 800b972 <__multadd+0x7e>
 800b92e:	68a3      	ldr	r3, [r4, #8]
 800b930:	42ab      	cmp	r3, r5
 800b932:	dc19      	bgt.n	800b968 <__multadd+0x74>
 800b934:	6861      	ldr	r1, [r4, #4]
 800b936:	4638      	mov	r0, r7
 800b938:	3101      	adds	r1, #1
 800b93a:	f7ff ff79 	bl	800b830 <_Balloc>
 800b93e:	4680      	mov	r8, r0
 800b940:	b928      	cbnz	r0, 800b94e <__multadd+0x5a>
 800b942:	4602      	mov	r2, r0
 800b944:	4b0c      	ldr	r3, [pc, #48]	; (800b978 <__multadd+0x84>)
 800b946:	480d      	ldr	r0, [pc, #52]	; (800b97c <__multadd+0x88>)
 800b948:	21ba      	movs	r1, #186	; 0xba
 800b94a:	f000 fd1b 	bl	800c384 <__assert_func>
 800b94e:	6922      	ldr	r2, [r4, #16]
 800b950:	3202      	adds	r2, #2
 800b952:	f104 010c 	add.w	r1, r4, #12
 800b956:	0092      	lsls	r2, r2, #2
 800b958:	300c      	adds	r0, #12
 800b95a:	f000 fd05 	bl	800c368 <memcpy>
 800b95e:	4621      	mov	r1, r4
 800b960:	4638      	mov	r0, r7
 800b962:	f7ff ffa5 	bl	800b8b0 <_Bfree>
 800b966:	4644      	mov	r4, r8
 800b968:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b96c:	3501      	adds	r5, #1
 800b96e:	615e      	str	r6, [r3, #20]
 800b970:	6125      	str	r5, [r4, #16]
 800b972:	4620      	mov	r0, r4
 800b974:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b978:	0801fb6c 	.word	0x0801fb6c
 800b97c:	0801fb7d 	.word	0x0801fb7d

0800b980 <__hi0bits>:
 800b980:	0c03      	lsrs	r3, r0, #16
 800b982:	041b      	lsls	r3, r3, #16
 800b984:	b9d3      	cbnz	r3, 800b9bc <__hi0bits+0x3c>
 800b986:	0400      	lsls	r0, r0, #16
 800b988:	2310      	movs	r3, #16
 800b98a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b98e:	bf04      	itt	eq
 800b990:	0200      	lsleq	r0, r0, #8
 800b992:	3308      	addeq	r3, #8
 800b994:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b998:	bf04      	itt	eq
 800b99a:	0100      	lsleq	r0, r0, #4
 800b99c:	3304      	addeq	r3, #4
 800b99e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b9a2:	bf04      	itt	eq
 800b9a4:	0080      	lsleq	r0, r0, #2
 800b9a6:	3302      	addeq	r3, #2
 800b9a8:	2800      	cmp	r0, #0
 800b9aa:	db05      	blt.n	800b9b8 <__hi0bits+0x38>
 800b9ac:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b9b0:	f103 0301 	add.w	r3, r3, #1
 800b9b4:	bf08      	it	eq
 800b9b6:	2320      	moveq	r3, #32
 800b9b8:	4618      	mov	r0, r3
 800b9ba:	4770      	bx	lr
 800b9bc:	2300      	movs	r3, #0
 800b9be:	e7e4      	b.n	800b98a <__hi0bits+0xa>

0800b9c0 <__lo0bits>:
 800b9c0:	6803      	ldr	r3, [r0, #0]
 800b9c2:	f013 0207 	ands.w	r2, r3, #7
 800b9c6:	d00c      	beq.n	800b9e2 <__lo0bits+0x22>
 800b9c8:	07d9      	lsls	r1, r3, #31
 800b9ca:	d422      	bmi.n	800ba12 <__lo0bits+0x52>
 800b9cc:	079a      	lsls	r2, r3, #30
 800b9ce:	bf49      	itett	mi
 800b9d0:	085b      	lsrmi	r3, r3, #1
 800b9d2:	089b      	lsrpl	r3, r3, #2
 800b9d4:	6003      	strmi	r3, [r0, #0]
 800b9d6:	2201      	movmi	r2, #1
 800b9d8:	bf5c      	itt	pl
 800b9da:	6003      	strpl	r3, [r0, #0]
 800b9dc:	2202      	movpl	r2, #2
 800b9de:	4610      	mov	r0, r2
 800b9e0:	4770      	bx	lr
 800b9e2:	b299      	uxth	r1, r3
 800b9e4:	b909      	cbnz	r1, 800b9ea <__lo0bits+0x2a>
 800b9e6:	0c1b      	lsrs	r3, r3, #16
 800b9e8:	2210      	movs	r2, #16
 800b9ea:	b2d9      	uxtb	r1, r3
 800b9ec:	b909      	cbnz	r1, 800b9f2 <__lo0bits+0x32>
 800b9ee:	3208      	adds	r2, #8
 800b9f0:	0a1b      	lsrs	r3, r3, #8
 800b9f2:	0719      	lsls	r1, r3, #28
 800b9f4:	bf04      	itt	eq
 800b9f6:	091b      	lsreq	r3, r3, #4
 800b9f8:	3204      	addeq	r2, #4
 800b9fa:	0799      	lsls	r1, r3, #30
 800b9fc:	bf04      	itt	eq
 800b9fe:	089b      	lsreq	r3, r3, #2
 800ba00:	3202      	addeq	r2, #2
 800ba02:	07d9      	lsls	r1, r3, #31
 800ba04:	d403      	bmi.n	800ba0e <__lo0bits+0x4e>
 800ba06:	085b      	lsrs	r3, r3, #1
 800ba08:	f102 0201 	add.w	r2, r2, #1
 800ba0c:	d003      	beq.n	800ba16 <__lo0bits+0x56>
 800ba0e:	6003      	str	r3, [r0, #0]
 800ba10:	e7e5      	b.n	800b9de <__lo0bits+0x1e>
 800ba12:	2200      	movs	r2, #0
 800ba14:	e7e3      	b.n	800b9de <__lo0bits+0x1e>
 800ba16:	2220      	movs	r2, #32
 800ba18:	e7e1      	b.n	800b9de <__lo0bits+0x1e>
	...

0800ba1c <__i2b>:
 800ba1c:	b510      	push	{r4, lr}
 800ba1e:	460c      	mov	r4, r1
 800ba20:	2101      	movs	r1, #1
 800ba22:	f7ff ff05 	bl	800b830 <_Balloc>
 800ba26:	4602      	mov	r2, r0
 800ba28:	b928      	cbnz	r0, 800ba36 <__i2b+0x1a>
 800ba2a:	4b05      	ldr	r3, [pc, #20]	; (800ba40 <__i2b+0x24>)
 800ba2c:	4805      	ldr	r0, [pc, #20]	; (800ba44 <__i2b+0x28>)
 800ba2e:	f240 1145 	movw	r1, #325	; 0x145
 800ba32:	f000 fca7 	bl	800c384 <__assert_func>
 800ba36:	2301      	movs	r3, #1
 800ba38:	6144      	str	r4, [r0, #20]
 800ba3a:	6103      	str	r3, [r0, #16]
 800ba3c:	bd10      	pop	{r4, pc}
 800ba3e:	bf00      	nop
 800ba40:	0801fb6c 	.word	0x0801fb6c
 800ba44:	0801fb7d 	.word	0x0801fb7d

0800ba48 <__multiply>:
 800ba48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba4c:	4691      	mov	r9, r2
 800ba4e:	690a      	ldr	r2, [r1, #16]
 800ba50:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ba54:	429a      	cmp	r2, r3
 800ba56:	bfb8      	it	lt
 800ba58:	460b      	movlt	r3, r1
 800ba5a:	460c      	mov	r4, r1
 800ba5c:	bfbc      	itt	lt
 800ba5e:	464c      	movlt	r4, r9
 800ba60:	4699      	movlt	r9, r3
 800ba62:	6927      	ldr	r7, [r4, #16]
 800ba64:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ba68:	68a3      	ldr	r3, [r4, #8]
 800ba6a:	6861      	ldr	r1, [r4, #4]
 800ba6c:	eb07 060a 	add.w	r6, r7, sl
 800ba70:	42b3      	cmp	r3, r6
 800ba72:	b085      	sub	sp, #20
 800ba74:	bfb8      	it	lt
 800ba76:	3101      	addlt	r1, #1
 800ba78:	f7ff feda 	bl	800b830 <_Balloc>
 800ba7c:	b930      	cbnz	r0, 800ba8c <__multiply+0x44>
 800ba7e:	4602      	mov	r2, r0
 800ba80:	4b44      	ldr	r3, [pc, #272]	; (800bb94 <__multiply+0x14c>)
 800ba82:	4845      	ldr	r0, [pc, #276]	; (800bb98 <__multiply+0x150>)
 800ba84:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800ba88:	f000 fc7c 	bl	800c384 <__assert_func>
 800ba8c:	f100 0514 	add.w	r5, r0, #20
 800ba90:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ba94:	462b      	mov	r3, r5
 800ba96:	2200      	movs	r2, #0
 800ba98:	4543      	cmp	r3, r8
 800ba9a:	d321      	bcc.n	800bae0 <__multiply+0x98>
 800ba9c:	f104 0314 	add.w	r3, r4, #20
 800baa0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800baa4:	f109 0314 	add.w	r3, r9, #20
 800baa8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800baac:	9202      	str	r2, [sp, #8]
 800baae:	1b3a      	subs	r2, r7, r4
 800bab0:	3a15      	subs	r2, #21
 800bab2:	f022 0203 	bic.w	r2, r2, #3
 800bab6:	3204      	adds	r2, #4
 800bab8:	f104 0115 	add.w	r1, r4, #21
 800babc:	428f      	cmp	r7, r1
 800babe:	bf38      	it	cc
 800bac0:	2204      	movcc	r2, #4
 800bac2:	9201      	str	r2, [sp, #4]
 800bac4:	9a02      	ldr	r2, [sp, #8]
 800bac6:	9303      	str	r3, [sp, #12]
 800bac8:	429a      	cmp	r2, r3
 800baca:	d80c      	bhi.n	800bae6 <__multiply+0x9e>
 800bacc:	2e00      	cmp	r6, #0
 800bace:	dd03      	ble.n	800bad8 <__multiply+0x90>
 800bad0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d05b      	beq.n	800bb90 <__multiply+0x148>
 800bad8:	6106      	str	r6, [r0, #16]
 800bada:	b005      	add	sp, #20
 800badc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bae0:	f843 2b04 	str.w	r2, [r3], #4
 800bae4:	e7d8      	b.n	800ba98 <__multiply+0x50>
 800bae6:	f8b3 a000 	ldrh.w	sl, [r3]
 800baea:	f1ba 0f00 	cmp.w	sl, #0
 800baee:	d024      	beq.n	800bb3a <__multiply+0xf2>
 800baf0:	f104 0e14 	add.w	lr, r4, #20
 800baf4:	46a9      	mov	r9, r5
 800baf6:	f04f 0c00 	mov.w	ip, #0
 800bafa:	f85e 2b04 	ldr.w	r2, [lr], #4
 800bafe:	f8d9 1000 	ldr.w	r1, [r9]
 800bb02:	fa1f fb82 	uxth.w	fp, r2
 800bb06:	b289      	uxth	r1, r1
 800bb08:	fb0a 110b 	mla	r1, sl, fp, r1
 800bb0c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800bb10:	f8d9 2000 	ldr.w	r2, [r9]
 800bb14:	4461      	add	r1, ip
 800bb16:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bb1a:	fb0a c20b 	mla	r2, sl, fp, ip
 800bb1e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800bb22:	b289      	uxth	r1, r1
 800bb24:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bb28:	4577      	cmp	r7, lr
 800bb2a:	f849 1b04 	str.w	r1, [r9], #4
 800bb2e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bb32:	d8e2      	bhi.n	800bafa <__multiply+0xb2>
 800bb34:	9a01      	ldr	r2, [sp, #4]
 800bb36:	f845 c002 	str.w	ip, [r5, r2]
 800bb3a:	9a03      	ldr	r2, [sp, #12]
 800bb3c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800bb40:	3304      	adds	r3, #4
 800bb42:	f1b9 0f00 	cmp.w	r9, #0
 800bb46:	d021      	beq.n	800bb8c <__multiply+0x144>
 800bb48:	6829      	ldr	r1, [r5, #0]
 800bb4a:	f104 0c14 	add.w	ip, r4, #20
 800bb4e:	46ae      	mov	lr, r5
 800bb50:	f04f 0a00 	mov.w	sl, #0
 800bb54:	f8bc b000 	ldrh.w	fp, [ip]
 800bb58:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800bb5c:	fb09 220b 	mla	r2, r9, fp, r2
 800bb60:	4452      	add	r2, sl
 800bb62:	b289      	uxth	r1, r1
 800bb64:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bb68:	f84e 1b04 	str.w	r1, [lr], #4
 800bb6c:	f85c 1b04 	ldr.w	r1, [ip], #4
 800bb70:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bb74:	f8be 1000 	ldrh.w	r1, [lr]
 800bb78:	fb09 110a 	mla	r1, r9, sl, r1
 800bb7c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800bb80:	4567      	cmp	r7, ip
 800bb82:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bb86:	d8e5      	bhi.n	800bb54 <__multiply+0x10c>
 800bb88:	9a01      	ldr	r2, [sp, #4]
 800bb8a:	50a9      	str	r1, [r5, r2]
 800bb8c:	3504      	adds	r5, #4
 800bb8e:	e799      	b.n	800bac4 <__multiply+0x7c>
 800bb90:	3e01      	subs	r6, #1
 800bb92:	e79b      	b.n	800bacc <__multiply+0x84>
 800bb94:	0801fb6c 	.word	0x0801fb6c
 800bb98:	0801fb7d 	.word	0x0801fb7d

0800bb9c <__pow5mult>:
 800bb9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bba0:	4615      	mov	r5, r2
 800bba2:	f012 0203 	ands.w	r2, r2, #3
 800bba6:	4606      	mov	r6, r0
 800bba8:	460f      	mov	r7, r1
 800bbaa:	d007      	beq.n	800bbbc <__pow5mult+0x20>
 800bbac:	4c25      	ldr	r4, [pc, #148]	; (800bc44 <__pow5mult+0xa8>)
 800bbae:	3a01      	subs	r2, #1
 800bbb0:	2300      	movs	r3, #0
 800bbb2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bbb6:	f7ff fe9d 	bl	800b8f4 <__multadd>
 800bbba:	4607      	mov	r7, r0
 800bbbc:	10ad      	asrs	r5, r5, #2
 800bbbe:	d03d      	beq.n	800bc3c <__pow5mult+0xa0>
 800bbc0:	69f4      	ldr	r4, [r6, #28]
 800bbc2:	b97c      	cbnz	r4, 800bbe4 <__pow5mult+0x48>
 800bbc4:	2010      	movs	r0, #16
 800bbc6:	f7fe f95b 	bl	8009e80 <malloc>
 800bbca:	4602      	mov	r2, r0
 800bbcc:	61f0      	str	r0, [r6, #28]
 800bbce:	b928      	cbnz	r0, 800bbdc <__pow5mult+0x40>
 800bbd0:	4b1d      	ldr	r3, [pc, #116]	; (800bc48 <__pow5mult+0xac>)
 800bbd2:	481e      	ldr	r0, [pc, #120]	; (800bc4c <__pow5mult+0xb0>)
 800bbd4:	f240 11b3 	movw	r1, #435	; 0x1b3
 800bbd8:	f000 fbd4 	bl	800c384 <__assert_func>
 800bbdc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bbe0:	6004      	str	r4, [r0, #0]
 800bbe2:	60c4      	str	r4, [r0, #12]
 800bbe4:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800bbe8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bbec:	b94c      	cbnz	r4, 800bc02 <__pow5mult+0x66>
 800bbee:	f240 2171 	movw	r1, #625	; 0x271
 800bbf2:	4630      	mov	r0, r6
 800bbf4:	f7ff ff12 	bl	800ba1c <__i2b>
 800bbf8:	2300      	movs	r3, #0
 800bbfa:	f8c8 0008 	str.w	r0, [r8, #8]
 800bbfe:	4604      	mov	r4, r0
 800bc00:	6003      	str	r3, [r0, #0]
 800bc02:	f04f 0900 	mov.w	r9, #0
 800bc06:	07eb      	lsls	r3, r5, #31
 800bc08:	d50a      	bpl.n	800bc20 <__pow5mult+0x84>
 800bc0a:	4639      	mov	r1, r7
 800bc0c:	4622      	mov	r2, r4
 800bc0e:	4630      	mov	r0, r6
 800bc10:	f7ff ff1a 	bl	800ba48 <__multiply>
 800bc14:	4639      	mov	r1, r7
 800bc16:	4680      	mov	r8, r0
 800bc18:	4630      	mov	r0, r6
 800bc1a:	f7ff fe49 	bl	800b8b0 <_Bfree>
 800bc1e:	4647      	mov	r7, r8
 800bc20:	106d      	asrs	r5, r5, #1
 800bc22:	d00b      	beq.n	800bc3c <__pow5mult+0xa0>
 800bc24:	6820      	ldr	r0, [r4, #0]
 800bc26:	b938      	cbnz	r0, 800bc38 <__pow5mult+0x9c>
 800bc28:	4622      	mov	r2, r4
 800bc2a:	4621      	mov	r1, r4
 800bc2c:	4630      	mov	r0, r6
 800bc2e:	f7ff ff0b 	bl	800ba48 <__multiply>
 800bc32:	6020      	str	r0, [r4, #0]
 800bc34:	f8c0 9000 	str.w	r9, [r0]
 800bc38:	4604      	mov	r4, r0
 800bc3a:	e7e4      	b.n	800bc06 <__pow5mult+0x6a>
 800bc3c:	4638      	mov	r0, r7
 800bc3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc42:	bf00      	nop
 800bc44:	0801fcc8 	.word	0x0801fcc8
 800bc48:	0801fafd 	.word	0x0801fafd
 800bc4c:	0801fb7d 	.word	0x0801fb7d

0800bc50 <__lshift>:
 800bc50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc54:	460c      	mov	r4, r1
 800bc56:	6849      	ldr	r1, [r1, #4]
 800bc58:	6923      	ldr	r3, [r4, #16]
 800bc5a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bc5e:	68a3      	ldr	r3, [r4, #8]
 800bc60:	4607      	mov	r7, r0
 800bc62:	4691      	mov	r9, r2
 800bc64:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bc68:	f108 0601 	add.w	r6, r8, #1
 800bc6c:	42b3      	cmp	r3, r6
 800bc6e:	db0b      	blt.n	800bc88 <__lshift+0x38>
 800bc70:	4638      	mov	r0, r7
 800bc72:	f7ff fddd 	bl	800b830 <_Balloc>
 800bc76:	4605      	mov	r5, r0
 800bc78:	b948      	cbnz	r0, 800bc8e <__lshift+0x3e>
 800bc7a:	4602      	mov	r2, r0
 800bc7c:	4b28      	ldr	r3, [pc, #160]	; (800bd20 <__lshift+0xd0>)
 800bc7e:	4829      	ldr	r0, [pc, #164]	; (800bd24 <__lshift+0xd4>)
 800bc80:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800bc84:	f000 fb7e 	bl	800c384 <__assert_func>
 800bc88:	3101      	adds	r1, #1
 800bc8a:	005b      	lsls	r3, r3, #1
 800bc8c:	e7ee      	b.n	800bc6c <__lshift+0x1c>
 800bc8e:	2300      	movs	r3, #0
 800bc90:	f100 0114 	add.w	r1, r0, #20
 800bc94:	f100 0210 	add.w	r2, r0, #16
 800bc98:	4618      	mov	r0, r3
 800bc9a:	4553      	cmp	r3, sl
 800bc9c:	db33      	blt.n	800bd06 <__lshift+0xb6>
 800bc9e:	6920      	ldr	r0, [r4, #16]
 800bca0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bca4:	f104 0314 	add.w	r3, r4, #20
 800bca8:	f019 091f 	ands.w	r9, r9, #31
 800bcac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bcb0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bcb4:	d02b      	beq.n	800bd0e <__lshift+0xbe>
 800bcb6:	f1c9 0e20 	rsb	lr, r9, #32
 800bcba:	468a      	mov	sl, r1
 800bcbc:	2200      	movs	r2, #0
 800bcbe:	6818      	ldr	r0, [r3, #0]
 800bcc0:	fa00 f009 	lsl.w	r0, r0, r9
 800bcc4:	4310      	orrs	r0, r2
 800bcc6:	f84a 0b04 	str.w	r0, [sl], #4
 800bcca:	f853 2b04 	ldr.w	r2, [r3], #4
 800bcce:	459c      	cmp	ip, r3
 800bcd0:	fa22 f20e 	lsr.w	r2, r2, lr
 800bcd4:	d8f3      	bhi.n	800bcbe <__lshift+0x6e>
 800bcd6:	ebac 0304 	sub.w	r3, ip, r4
 800bcda:	3b15      	subs	r3, #21
 800bcdc:	f023 0303 	bic.w	r3, r3, #3
 800bce0:	3304      	adds	r3, #4
 800bce2:	f104 0015 	add.w	r0, r4, #21
 800bce6:	4584      	cmp	ip, r0
 800bce8:	bf38      	it	cc
 800bcea:	2304      	movcc	r3, #4
 800bcec:	50ca      	str	r2, [r1, r3]
 800bcee:	b10a      	cbz	r2, 800bcf4 <__lshift+0xa4>
 800bcf0:	f108 0602 	add.w	r6, r8, #2
 800bcf4:	3e01      	subs	r6, #1
 800bcf6:	4638      	mov	r0, r7
 800bcf8:	612e      	str	r6, [r5, #16]
 800bcfa:	4621      	mov	r1, r4
 800bcfc:	f7ff fdd8 	bl	800b8b0 <_Bfree>
 800bd00:	4628      	mov	r0, r5
 800bd02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd06:	f842 0f04 	str.w	r0, [r2, #4]!
 800bd0a:	3301      	adds	r3, #1
 800bd0c:	e7c5      	b.n	800bc9a <__lshift+0x4a>
 800bd0e:	3904      	subs	r1, #4
 800bd10:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd14:	f841 2f04 	str.w	r2, [r1, #4]!
 800bd18:	459c      	cmp	ip, r3
 800bd1a:	d8f9      	bhi.n	800bd10 <__lshift+0xc0>
 800bd1c:	e7ea      	b.n	800bcf4 <__lshift+0xa4>
 800bd1e:	bf00      	nop
 800bd20:	0801fb6c 	.word	0x0801fb6c
 800bd24:	0801fb7d 	.word	0x0801fb7d

0800bd28 <__mcmp>:
 800bd28:	b530      	push	{r4, r5, lr}
 800bd2a:	6902      	ldr	r2, [r0, #16]
 800bd2c:	690c      	ldr	r4, [r1, #16]
 800bd2e:	1b12      	subs	r2, r2, r4
 800bd30:	d10e      	bne.n	800bd50 <__mcmp+0x28>
 800bd32:	f100 0314 	add.w	r3, r0, #20
 800bd36:	3114      	adds	r1, #20
 800bd38:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800bd3c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800bd40:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800bd44:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800bd48:	42a5      	cmp	r5, r4
 800bd4a:	d003      	beq.n	800bd54 <__mcmp+0x2c>
 800bd4c:	d305      	bcc.n	800bd5a <__mcmp+0x32>
 800bd4e:	2201      	movs	r2, #1
 800bd50:	4610      	mov	r0, r2
 800bd52:	bd30      	pop	{r4, r5, pc}
 800bd54:	4283      	cmp	r3, r0
 800bd56:	d3f3      	bcc.n	800bd40 <__mcmp+0x18>
 800bd58:	e7fa      	b.n	800bd50 <__mcmp+0x28>
 800bd5a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bd5e:	e7f7      	b.n	800bd50 <__mcmp+0x28>

0800bd60 <__mdiff>:
 800bd60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd64:	460c      	mov	r4, r1
 800bd66:	4606      	mov	r6, r0
 800bd68:	4611      	mov	r1, r2
 800bd6a:	4620      	mov	r0, r4
 800bd6c:	4690      	mov	r8, r2
 800bd6e:	f7ff ffdb 	bl	800bd28 <__mcmp>
 800bd72:	1e05      	subs	r5, r0, #0
 800bd74:	d110      	bne.n	800bd98 <__mdiff+0x38>
 800bd76:	4629      	mov	r1, r5
 800bd78:	4630      	mov	r0, r6
 800bd7a:	f7ff fd59 	bl	800b830 <_Balloc>
 800bd7e:	b930      	cbnz	r0, 800bd8e <__mdiff+0x2e>
 800bd80:	4b3a      	ldr	r3, [pc, #232]	; (800be6c <__mdiff+0x10c>)
 800bd82:	4602      	mov	r2, r0
 800bd84:	f240 2137 	movw	r1, #567	; 0x237
 800bd88:	4839      	ldr	r0, [pc, #228]	; (800be70 <__mdiff+0x110>)
 800bd8a:	f000 fafb 	bl	800c384 <__assert_func>
 800bd8e:	2301      	movs	r3, #1
 800bd90:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bd94:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd98:	bfa4      	itt	ge
 800bd9a:	4643      	movge	r3, r8
 800bd9c:	46a0      	movge	r8, r4
 800bd9e:	4630      	mov	r0, r6
 800bda0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800bda4:	bfa6      	itte	ge
 800bda6:	461c      	movge	r4, r3
 800bda8:	2500      	movge	r5, #0
 800bdaa:	2501      	movlt	r5, #1
 800bdac:	f7ff fd40 	bl	800b830 <_Balloc>
 800bdb0:	b920      	cbnz	r0, 800bdbc <__mdiff+0x5c>
 800bdb2:	4b2e      	ldr	r3, [pc, #184]	; (800be6c <__mdiff+0x10c>)
 800bdb4:	4602      	mov	r2, r0
 800bdb6:	f240 2145 	movw	r1, #581	; 0x245
 800bdba:	e7e5      	b.n	800bd88 <__mdiff+0x28>
 800bdbc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800bdc0:	6926      	ldr	r6, [r4, #16]
 800bdc2:	60c5      	str	r5, [r0, #12]
 800bdc4:	f104 0914 	add.w	r9, r4, #20
 800bdc8:	f108 0514 	add.w	r5, r8, #20
 800bdcc:	f100 0e14 	add.w	lr, r0, #20
 800bdd0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800bdd4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800bdd8:	f108 0210 	add.w	r2, r8, #16
 800bddc:	46f2      	mov	sl, lr
 800bdde:	2100      	movs	r1, #0
 800bde0:	f859 3b04 	ldr.w	r3, [r9], #4
 800bde4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800bde8:	fa11 f88b 	uxtah	r8, r1, fp
 800bdec:	b299      	uxth	r1, r3
 800bdee:	0c1b      	lsrs	r3, r3, #16
 800bdf0:	eba8 0801 	sub.w	r8, r8, r1
 800bdf4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800bdf8:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800bdfc:	fa1f f888 	uxth.w	r8, r8
 800be00:	1419      	asrs	r1, r3, #16
 800be02:	454e      	cmp	r6, r9
 800be04:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800be08:	f84a 3b04 	str.w	r3, [sl], #4
 800be0c:	d8e8      	bhi.n	800bde0 <__mdiff+0x80>
 800be0e:	1b33      	subs	r3, r6, r4
 800be10:	3b15      	subs	r3, #21
 800be12:	f023 0303 	bic.w	r3, r3, #3
 800be16:	3304      	adds	r3, #4
 800be18:	3415      	adds	r4, #21
 800be1a:	42a6      	cmp	r6, r4
 800be1c:	bf38      	it	cc
 800be1e:	2304      	movcc	r3, #4
 800be20:	441d      	add	r5, r3
 800be22:	4473      	add	r3, lr
 800be24:	469e      	mov	lr, r3
 800be26:	462e      	mov	r6, r5
 800be28:	4566      	cmp	r6, ip
 800be2a:	d30e      	bcc.n	800be4a <__mdiff+0xea>
 800be2c:	f10c 0203 	add.w	r2, ip, #3
 800be30:	1b52      	subs	r2, r2, r5
 800be32:	f022 0203 	bic.w	r2, r2, #3
 800be36:	3d03      	subs	r5, #3
 800be38:	45ac      	cmp	ip, r5
 800be3a:	bf38      	it	cc
 800be3c:	2200      	movcc	r2, #0
 800be3e:	4413      	add	r3, r2
 800be40:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800be44:	b17a      	cbz	r2, 800be66 <__mdiff+0x106>
 800be46:	6107      	str	r7, [r0, #16]
 800be48:	e7a4      	b.n	800bd94 <__mdiff+0x34>
 800be4a:	f856 8b04 	ldr.w	r8, [r6], #4
 800be4e:	fa11 f288 	uxtah	r2, r1, r8
 800be52:	1414      	asrs	r4, r2, #16
 800be54:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800be58:	b292      	uxth	r2, r2
 800be5a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800be5e:	f84e 2b04 	str.w	r2, [lr], #4
 800be62:	1421      	asrs	r1, r4, #16
 800be64:	e7e0      	b.n	800be28 <__mdiff+0xc8>
 800be66:	3f01      	subs	r7, #1
 800be68:	e7ea      	b.n	800be40 <__mdiff+0xe0>
 800be6a:	bf00      	nop
 800be6c:	0801fb6c 	.word	0x0801fb6c
 800be70:	0801fb7d 	.word	0x0801fb7d

0800be74 <__d2b>:
 800be74:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800be78:	460f      	mov	r7, r1
 800be7a:	2101      	movs	r1, #1
 800be7c:	ec59 8b10 	vmov	r8, r9, d0
 800be80:	4616      	mov	r6, r2
 800be82:	f7ff fcd5 	bl	800b830 <_Balloc>
 800be86:	4604      	mov	r4, r0
 800be88:	b930      	cbnz	r0, 800be98 <__d2b+0x24>
 800be8a:	4602      	mov	r2, r0
 800be8c:	4b24      	ldr	r3, [pc, #144]	; (800bf20 <__d2b+0xac>)
 800be8e:	4825      	ldr	r0, [pc, #148]	; (800bf24 <__d2b+0xb0>)
 800be90:	f240 310f 	movw	r1, #783	; 0x30f
 800be94:	f000 fa76 	bl	800c384 <__assert_func>
 800be98:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800be9c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bea0:	bb2d      	cbnz	r5, 800beee <__d2b+0x7a>
 800bea2:	9301      	str	r3, [sp, #4]
 800bea4:	f1b8 0300 	subs.w	r3, r8, #0
 800bea8:	d026      	beq.n	800bef8 <__d2b+0x84>
 800beaa:	4668      	mov	r0, sp
 800beac:	9300      	str	r3, [sp, #0]
 800beae:	f7ff fd87 	bl	800b9c0 <__lo0bits>
 800beb2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800beb6:	b1e8      	cbz	r0, 800bef4 <__d2b+0x80>
 800beb8:	f1c0 0320 	rsb	r3, r0, #32
 800bebc:	fa02 f303 	lsl.w	r3, r2, r3
 800bec0:	430b      	orrs	r3, r1
 800bec2:	40c2      	lsrs	r2, r0
 800bec4:	6163      	str	r3, [r4, #20]
 800bec6:	9201      	str	r2, [sp, #4]
 800bec8:	9b01      	ldr	r3, [sp, #4]
 800beca:	61a3      	str	r3, [r4, #24]
 800becc:	2b00      	cmp	r3, #0
 800bece:	bf14      	ite	ne
 800bed0:	2202      	movne	r2, #2
 800bed2:	2201      	moveq	r2, #1
 800bed4:	6122      	str	r2, [r4, #16]
 800bed6:	b1bd      	cbz	r5, 800bf08 <__d2b+0x94>
 800bed8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800bedc:	4405      	add	r5, r0
 800bede:	603d      	str	r5, [r7, #0]
 800bee0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bee4:	6030      	str	r0, [r6, #0]
 800bee6:	4620      	mov	r0, r4
 800bee8:	b003      	add	sp, #12
 800beea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800beee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bef2:	e7d6      	b.n	800bea2 <__d2b+0x2e>
 800bef4:	6161      	str	r1, [r4, #20]
 800bef6:	e7e7      	b.n	800bec8 <__d2b+0x54>
 800bef8:	a801      	add	r0, sp, #4
 800befa:	f7ff fd61 	bl	800b9c0 <__lo0bits>
 800befe:	9b01      	ldr	r3, [sp, #4]
 800bf00:	6163      	str	r3, [r4, #20]
 800bf02:	3020      	adds	r0, #32
 800bf04:	2201      	movs	r2, #1
 800bf06:	e7e5      	b.n	800bed4 <__d2b+0x60>
 800bf08:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bf0c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bf10:	6038      	str	r0, [r7, #0]
 800bf12:	6918      	ldr	r0, [r3, #16]
 800bf14:	f7ff fd34 	bl	800b980 <__hi0bits>
 800bf18:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bf1c:	e7e2      	b.n	800bee4 <__d2b+0x70>
 800bf1e:	bf00      	nop
 800bf20:	0801fb6c 	.word	0x0801fb6c
 800bf24:	0801fb7d 	.word	0x0801fb7d

0800bf28 <__ssputs_r>:
 800bf28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf2c:	688e      	ldr	r6, [r1, #8]
 800bf2e:	461f      	mov	r7, r3
 800bf30:	42be      	cmp	r6, r7
 800bf32:	680b      	ldr	r3, [r1, #0]
 800bf34:	4682      	mov	sl, r0
 800bf36:	460c      	mov	r4, r1
 800bf38:	4690      	mov	r8, r2
 800bf3a:	d82c      	bhi.n	800bf96 <__ssputs_r+0x6e>
 800bf3c:	898a      	ldrh	r2, [r1, #12]
 800bf3e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bf42:	d026      	beq.n	800bf92 <__ssputs_r+0x6a>
 800bf44:	6965      	ldr	r5, [r4, #20]
 800bf46:	6909      	ldr	r1, [r1, #16]
 800bf48:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bf4c:	eba3 0901 	sub.w	r9, r3, r1
 800bf50:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bf54:	1c7b      	adds	r3, r7, #1
 800bf56:	444b      	add	r3, r9
 800bf58:	106d      	asrs	r5, r5, #1
 800bf5a:	429d      	cmp	r5, r3
 800bf5c:	bf38      	it	cc
 800bf5e:	461d      	movcc	r5, r3
 800bf60:	0553      	lsls	r3, r2, #21
 800bf62:	d527      	bpl.n	800bfb4 <__ssputs_r+0x8c>
 800bf64:	4629      	mov	r1, r5
 800bf66:	f7fd ffbb 	bl	8009ee0 <_malloc_r>
 800bf6a:	4606      	mov	r6, r0
 800bf6c:	b360      	cbz	r0, 800bfc8 <__ssputs_r+0xa0>
 800bf6e:	6921      	ldr	r1, [r4, #16]
 800bf70:	464a      	mov	r2, r9
 800bf72:	f000 f9f9 	bl	800c368 <memcpy>
 800bf76:	89a3      	ldrh	r3, [r4, #12]
 800bf78:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bf7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bf80:	81a3      	strh	r3, [r4, #12]
 800bf82:	6126      	str	r6, [r4, #16]
 800bf84:	6165      	str	r5, [r4, #20]
 800bf86:	444e      	add	r6, r9
 800bf88:	eba5 0509 	sub.w	r5, r5, r9
 800bf8c:	6026      	str	r6, [r4, #0]
 800bf8e:	60a5      	str	r5, [r4, #8]
 800bf90:	463e      	mov	r6, r7
 800bf92:	42be      	cmp	r6, r7
 800bf94:	d900      	bls.n	800bf98 <__ssputs_r+0x70>
 800bf96:	463e      	mov	r6, r7
 800bf98:	6820      	ldr	r0, [r4, #0]
 800bf9a:	4632      	mov	r2, r6
 800bf9c:	4641      	mov	r1, r8
 800bf9e:	f000 f9c9 	bl	800c334 <memmove>
 800bfa2:	68a3      	ldr	r3, [r4, #8]
 800bfa4:	1b9b      	subs	r3, r3, r6
 800bfa6:	60a3      	str	r3, [r4, #8]
 800bfa8:	6823      	ldr	r3, [r4, #0]
 800bfaa:	4433      	add	r3, r6
 800bfac:	6023      	str	r3, [r4, #0]
 800bfae:	2000      	movs	r0, #0
 800bfb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bfb4:	462a      	mov	r2, r5
 800bfb6:	f000 fa2b 	bl	800c410 <_realloc_r>
 800bfba:	4606      	mov	r6, r0
 800bfbc:	2800      	cmp	r0, #0
 800bfbe:	d1e0      	bne.n	800bf82 <__ssputs_r+0x5a>
 800bfc0:	6921      	ldr	r1, [r4, #16]
 800bfc2:	4650      	mov	r0, sl
 800bfc4:	f7ff fbe8 	bl	800b798 <_free_r>
 800bfc8:	230c      	movs	r3, #12
 800bfca:	f8ca 3000 	str.w	r3, [sl]
 800bfce:	89a3      	ldrh	r3, [r4, #12]
 800bfd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bfd4:	81a3      	strh	r3, [r4, #12]
 800bfd6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bfda:	e7e9      	b.n	800bfb0 <__ssputs_r+0x88>

0800bfdc <_svfiprintf_r>:
 800bfdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfe0:	4698      	mov	r8, r3
 800bfe2:	898b      	ldrh	r3, [r1, #12]
 800bfe4:	061b      	lsls	r3, r3, #24
 800bfe6:	b09d      	sub	sp, #116	; 0x74
 800bfe8:	4607      	mov	r7, r0
 800bfea:	460d      	mov	r5, r1
 800bfec:	4614      	mov	r4, r2
 800bfee:	d50e      	bpl.n	800c00e <_svfiprintf_r+0x32>
 800bff0:	690b      	ldr	r3, [r1, #16]
 800bff2:	b963      	cbnz	r3, 800c00e <_svfiprintf_r+0x32>
 800bff4:	2140      	movs	r1, #64	; 0x40
 800bff6:	f7fd ff73 	bl	8009ee0 <_malloc_r>
 800bffa:	6028      	str	r0, [r5, #0]
 800bffc:	6128      	str	r0, [r5, #16]
 800bffe:	b920      	cbnz	r0, 800c00a <_svfiprintf_r+0x2e>
 800c000:	230c      	movs	r3, #12
 800c002:	603b      	str	r3, [r7, #0]
 800c004:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c008:	e0d0      	b.n	800c1ac <_svfiprintf_r+0x1d0>
 800c00a:	2340      	movs	r3, #64	; 0x40
 800c00c:	616b      	str	r3, [r5, #20]
 800c00e:	2300      	movs	r3, #0
 800c010:	9309      	str	r3, [sp, #36]	; 0x24
 800c012:	2320      	movs	r3, #32
 800c014:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c018:	f8cd 800c 	str.w	r8, [sp, #12]
 800c01c:	2330      	movs	r3, #48	; 0x30
 800c01e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c1c4 <_svfiprintf_r+0x1e8>
 800c022:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c026:	f04f 0901 	mov.w	r9, #1
 800c02a:	4623      	mov	r3, r4
 800c02c:	469a      	mov	sl, r3
 800c02e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c032:	b10a      	cbz	r2, 800c038 <_svfiprintf_r+0x5c>
 800c034:	2a25      	cmp	r2, #37	; 0x25
 800c036:	d1f9      	bne.n	800c02c <_svfiprintf_r+0x50>
 800c038:	ebba 0b04 	subs.w	fp, sl, r4
 800c03c:	d00b      	beq.n	800c056 <_svfiprintf_r+0x7a>
 800c03e:	465b      	mov	r3, fp
 800c040:	4622      	mov	r2, r4
 800c042:	4629      	mov	r1, r5
 800c044:	4638      	mov	r0, r7
 800c046:	f7ff ff6f 	bl	800bf28 <__ssputs_r>
 800c04a:	3001      	adds	r0, #1
 800c04c:	f000 80a9 	beq.w	800c1a2 <_svfiprintf_r+0x1c6>
 800c050:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c052:	445a      	add	r2, fp
 800c054:	9209      	str	r2, [sp, #36]	; 0x24
 800c056:	f89a 3000 	ldrb.w	r3, [sl]
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	f000 80a1 	beq.w	800c1a2 <_svfiprintf_r+0x1c6>
 800c060:	2300      	movs	r3, #0
 800c062:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c066:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c06a:	f10a 0a01 	add.w	sl, sl, #1
 800c06e:	9304      	str	r3, [sp, #16]
 800c070:	9307      	str	r3, [sp, #28]
 800c072:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c076:	931a      	str	r3, [sp, #104]	; 0x68
 800c078:	4654      	mov	r4, sl
 800c07a:	2205      	movs	r2, #5
 800c07c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c080:	4850      	ldr	r0, [pc, #320]	; (800c1c4 <_svfiprintf_r+0x1e8>)
 800c082:	f7f4 f945 	bl	8000310 <memchr>
 800c086:	9a04      	ldr	r2, [sp, #16]
 800c088:	b9d8      	cbnz	r0, 800c0c2 <_svfiprintf_r+0xe6>
 800c08a:	06d0      	lsls	r0, r2, #27
 800c08c:	bf44      	itt	mi
 800c08e:	2320      	movmi	r3, #32
 800c090:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c094:	0711      	lsls	r1, r2, #28
 800c096:	bf44      	itt	mi
 800c098:	232b      	movmi	r3, #43	; 0x2b
 800c09a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c09e:	f89a 3000 	ldrb.w	r3, [sl]
 800c0a2:	2b2a      	cmp	r3, #42	; 0x2a
 800c0a4:	d015      	beq.n	800c0d2 <_svfiprintf_r+0xf6>
 800c0a6:	9a07      	ldr	r2, [sp, #28]
 800c0a8:	4654      	mov	r4, sl
 800c0aa:	2000      	movs	r0, #0
 800c0ac:	f04f 0c0a 	mov.w	ip, #10
 800c0b0:	4621      	mov	r1, r4
 800c0b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c0b6:	3b30      	subs	r3, #48	; 0x30
 800c0b8:	2b09      	cmp	r3, #9
 800c0ba:	d94d      	bls.n	800c158 <_svfiprintf_r+0x17c>
 800c0bc:	b1b0      	cbz	r0, 800c0ec <_svfiprintf_r+0x110>
 800c0be:	9207      	str	r2, [sp, #28]
 800c0c0:	e014      	b.n	800c0ec <_svfiprintf_r+0x110>
 800c0c2:	eba0 0308 	sub.w	r3, r0, r8
 800c0c6:	fa09 f303 	lsl.w	r3, r9, r3
 800c0ca:	4313      	orrs	r3, r2
 800c0cc:	9304      	str	r3, [sp, #16]
 800c0ce:	46a2      	mov	sl, r4
 800c0d0:	e7d2      	b.n	800c078 <_svfiprintf_r+0x9c>
 800c0d2:	9b03      	ldr	r3, [sp, #12]
 800c0d4:	1d19      	adds	r1, r3, #4
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	9103      	str	r1, [sp, #12]
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	bfbb      	ittet	lt
 800c0de:	425b      	neglt	r3, r3
 800c0e0:	f042 0202 	orrlt.w	r2, r2, #2
 800c0e4:	9307      	strge	r3, [sp, #28]
 800c0e6:	9307      	strlt	r3, [sp, #28]
 800c0e8:	bfb8      	it	lt
 800c0ea:	9204      	strlt	r2, [sp, #16]
 800c0ec:	7823      	ldrb	r3, [r4, #0]
 800c0ee:	2b2e      	cmp	r3, #46	; 0x2e
 800c0f0:	d10c      	bne.n	800c10c <_svfiprintf_r+0x130>
 800c0f2:	7863      	ldrb	r3, [r4, #1]
 800c0f4:	2b2a      	cmp	r3, #42	; 0x2a
 800c0f6:	d134      	bne.n	800c162 <_svfiprintf_r+0x186>
 800c0f8:	9b03      	ldr	r3, [sp, #12]
 800c0fa:	1d1a      	adds	r2, r3, #4
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	9203      	str	r2, [sp, #12]
 800c100:	2b00      	cmp	r3, #0
 800c102:	bfb8      	it	lt
 800c104:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c108:	3402      	adds	r4, #2
 800c10a:	9305      	str	r3, [sp, #20]
 800c10c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800c1d4 <_svfiprintf_r+0x1f8>
 800c110:	7821      	ldrb	r1, [r4, #0]
 800c112:	2203      	movs	r2, #3
 800c114:	4650      	mov	r0, sl
 800c116:	f7f4 f8fb 	bl	8000310 <memchr>
 800c11a:	b138      	cbz	r0, 800c12c <_svfiprintf_r+0x150>
 800c11c:	9b04      	ldr	r3, [sp, #16]
 800c11e:	eba0 000a 	sub.w	r0, r0, sl
 800c122:	2240      	movs	r2, #64	; 0x40
 800c124:	4082      	lsls	r2, r0
 800c126:	4313      	orrs	r3, r2
 800c128:	3401      	adds	r4, #1
 800c12a:	9304      	str	r3, [sp, #16]
 800c12c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c130:	4825      	ldr	r0, [pc, #148]	; (800c1c8 <_svfiprintf_r+0x1ec>)
 800c132:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c136:	2206      	movs	r2, #6
 800c138:	f7f4 f8ea 	bl	8000310 <memchr>
 800c13c:	2800      	cmp	r0, #0
 800c13e:	d038      	beq.n	800c1b2 <_svfiprintf_r+0x1d6>
 800c140:	4b22      	ldr	r3, [pc, #136]	; (800c1cc <_svfiprintf_r+0x1f0>)
 800c142:	bb1b      	cbnz	r3, 800c18c <_svfiprintf_r+0x1b0>
 800c144:	9b03      	ldr	r3, [sp, #12]
 800c146:	3307      	adds	r3, #7
 800c148:	f023 0307 	bic.w	r3, r3, #7
 800c14c:	3308      	adds	r3, #8
 800c14e:	9303      	str	r3, [sp, #12]
 800c150:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c152:	4433      	add	r3, r6
 800c154:	9309      	str	r3, [sp, #36]	; 0x24
 800c156:	e768      	b.n	800c02a <_svfiprintf_r+0x4e>
 800c158:	fb0c 3202 	mla	r2, ip, r2, r3
 800c15c:	460c      	mov	r4, r1
 800c15e:	2001      	movs	r0, #1
 800c160:	e7a6      	b.n	800c0b0 <_svfiprintf_r+0xd4>
 800c162:	2300      	movs	r3, #0
 800c164:	3401      	adds	r4, #1
 800c166:	9305      	str	r3, [sp, #20]
 800c168:	4619      	mov	r1, r3
 800c16a:	f04f 0c0a 	mov.w	ip, #10
 800c16e:	4620      	mov	r0, r4
 800c170:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c174:	3a30      	subs	r2, #48	; 0x30
 800c176:	2a09      	cmp	r2, #9
 800c178:	d903      	bls.n	800c182 <_svfiprintf_r+0x1a6>
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d0c6      	beq.n	800c10c <_svfiprintf_r+0x130>
 800c17e:	9105      	str	r1, [sp, #20]
 800c180:	e7c4      	b.n	800c10c <_svfiprintf_r+0x130>
 800c182:	fb0c 2101 	mla	r1, ip, r1, r2
 800c186:	4604      	mov	r4, r0
 800c188:	2301      	movs	r3, #1
 800c18a:	e7f0      	b.n	800c16e <_svfiprintf_r+0x192>
 800c18c:	ab03      	add	r3, sp, #12
 800c18e:	9300      	str	r3, [sp, #0]
 800c190:	462a      	mov	r2, r5
 800c192:	4b0f      	ldr	r3, [pc, #60]	; (800c1d0 <_svfiprintf_r+0x1f4>)
 800c194:	a904      	add	r1, sp, #16
 800c196:	4638      	mov	r0, r7
 800c198:	f7fd ffbe 	bl	800a118 <_printf_float>
 800c19c:	1c42      	adds	r2, r0, #1
 800c19e:	4606      	mov	r6, r0
 800c1a0:	d1d6      	bne.n	800c150 <_svfiprintf_r+0x174>
 800c1a2:	89ab      	ldrh	r3, [r5, #12]
 800c1a4:	065b      	lsls	r3, r3, #25
 800c1a6:	f53f af2d 	bmi.w	800c004 <_svfiprintf_r+0x28>
 800c1aa:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c1ac:	b01d      	add	sp, #116	; 0x74
 800c1ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1b2:	ab03      	add	r3, sp, #12
 800c1b4:	9300      	str	r3, [sp, #0]
 800c1b6:	462a      	mov	r2, r5
 800c1b8:	4b05      	ldr	r3, [pc, #20]	; (800c1d0 <_svfiprintf_r+0x1f4>)
 800c1ba:	a904      	add	r1, sp, #16
 800c1bc:	4638      	mov	r0, r7
 800c1be:	f7fe fa33 	bl	800a628 <_printf_i>
 800c1c2:	e7eb      	b.n	800c19c <_svfiprintf_r+0x1c0>
 800c1c4:	0801fcd4 	.word	0x0801fcd4
 800c1c8:	0801fcde 	.word	0x0801fcde
 800c1cc:	0800a119 	.word	0x0800a119
 800c1d0:	0800bf29 	.word	0x0800bf29
 800c1d4:	0801fcda 	.word	0x0801fcda

0800c1d8 <__sflush_r>:
 800c1d8:	898a      	ldrh	r2, [r1, #12]
 800c1da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1de:	4605      	mov	r5, r0
 800c1e0:	0710      	lsls	r0, r2, #28
 800c1e2:	460c      	mov	r4, r1
 800c1e4:	d458      	bmi.n	800c298 <__sflush_r+0xc0>
 800c1e6:	684b      	ldr	r3, [r1, #4]
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	dc05      	bgt.n	800c1f8 <__sflush_r+0x20>
 800c1ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	dc02      	bgt.n	800c1f8 <__sflush_r+0x20>
 800c1f2:	2000      	movs	r0, #0
 800c1f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c1fa:	2e00      	cmp	r6, #0
 800c1fc:	d0f9      	beq.n	800c1f2 <__sflush_r+0x1a>
 800c1fe:	2300      	movs	r3, #0
 800c200:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c204:	682f      	ldr	r7, [r5, #0]
 800c206:	6a21      	ldr	r1, [r4, #32]
 800c208:	602b      	str	r3, [r5, #0]
 800c20a:	d032      	beq.n	800c272 <__sflush_r+0x9a>
 800c20c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c20e:	89a3      	ldrh	r3, [r4, #12]
 800c210:	075a      	lsls	r2, r3, #29
 800c212:	d505      	bpl.n	800c220 <__sflush_r+0x48>
 800c214:	6863      	ldr	r3, [r4, #4]
 800c216:	1ac0      	subs	r0, r0, r3
 800c218:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c21a:	b10b      	cbz	r3, 800c220 <__sflush_r+0x48>
 800c21c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c21e:	1ac0      	subs	r0, r0, r3
 800c220:	2300      	movs	r3, #0
 800c222:	4602      	mov	r2, r0
 800c224:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c226:	6a21      	ldr	r1, [r4, #32]
 800c228:	4628      	mov	r0, r5
 800c22a:	47b0      	blx	r6
 800c22c:	1c43      	adds	r3, r0, #1
 800c22e:	89a3      	ldrh	r3, [r4, #12]
 800c230:	d106      	bne.n	800c240 <__sflush_r+0x68>
 800c232:	6829      	ldr	r1, [r5, #0]
 800c234:	291d      	cmp	r1, #29
 800c236:	d82b      	bhi.n	800c290 <__sflush_r+0xb8>
 800c238:	4a29      	ldr	r2, [pc, #164]	; (800c2e0 <__sflush_r+0x108>)
 800c23a:	410a      	asrs	r2, r1
 800c23c:	07d6      	lsls	r6, r2, #31
 800c23e:	d427      	bmi.n	800c290 <__sflush_r+0xb8>
 800c240:	2200      	movs	r2, #0
 800c242:	6062      	str	r2, [r4, #4]
 800c244:	04d9      	lsls	r1, r3, #19
 800c246:	6922      	ldr	r2, [r4, #16]
 800c248:	6022      	str	r2, [r4, #0]
 800c24a:	d504      	bpl.n	800c256 <__sflush_r+0x7e>
 800c24c:	1c42      	adds	r2, r0, #1
 800c24e:	d101      	bne.n	800c254 <__sflush_r+0x7c>
 800c250:	682b      	ldr	r3, [r5, #0]
 800c252:	b903      	cbnz	r3, 800c256 <__sflush_r+0x7e>
 800c254:	6560      	str	r0, [r4, #84]	; 0x54
 800c256:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c258:	602f      	str	r7, [r5, #0]
 800c25a:	2900      	cmp	r1, #0
 800c25c:	d0c9      	beq.n	800c1f2 <__sflush_r+0x1a>
 800c25e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c262:	4299      	cmp	r1, r3
 800c264:	d002      	beq.n	800c26c <__sflush_r+0x94>
 800c266:	4628      	mov	r0, r5
 800c268:	f7ff fa96 	bl	800b798 <_free_r>
 800c26c:	2000      	movs	r0, #0
 800c26e:	6360      	str	r0, [r4, #52]	; 0x34
 800c270:	e7c0      	b.n	800c1f4 <__sflush_r+0x1c>
 800c272:	2301      	movs	r3, #1
 800c274:	4628      	mov	r0, r5
 800c276:	47b0      	blx	r6
 800c278:	1c41      	adds	r1, r0, #1
 800c27a:	d1c8      	bne.n	800c20e <__sflush_r+0x36>
 800c27c:	682b      	ldr	r3, [r5, #0]
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d0c5      	beq.n	800c20e <__sflush_r+0x36>
 800c282:	2b1d      	cmp	r3, #29
 800c284:	d001      	beq.n	800c28a <__sflush_r+0xb2>
 800c286:	2b16      	cmp	r3, #22
 800c288:	d101      	bne.n	800c28e <__sflush_r+0xb6>
 800c28a:	602f      	str	r7, [r5, #0]
 800c28c:	e7b1      	b.n	800c1f2 <__sflush_r+0x1a>
 800c28e:	89a3      	ldrh	r3, [r4, #12]
 800c290:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c294:	81a3      	strh	r3, [r4, #12]
 800c296:	e7ad      	b.n	800c1f4 <__sflush_r+0x1c>
 800c298:	690f      	ldr	r7, [r1, #16]
 800c29a:	2f00      	cmp	r7, #0
 800c29c:	d0a9      	beq.n	800c1f2 <__sflush_r+0x1a>
 800c29e:	0793      	lsls	r3, r2, #30
 800c2a0:	680e      	ldr	r6, [r1, #0]
 800c2a2:	bf08      	it	eq
 800c2a4:	694b      	ldreq	r3, [r1, #20]
 800c2a6:	600f      	str	r7, [r1, #0]
 800c2a8:	bf18      	it	ne
 800c2aa:	2300      	movne	r3, #0
 800c2ac:	eba6 0807 	sub.w	r8, r6, r7
 800c2b0:	608b      	str	r3, [r1, #8]
 800c2b2:	f1b8 0f00 	cmp.w	r8, #0
 800c2b6:	dd9c      	ble.n	800c1f2 <__sflush_r+0x1a>
 800c2b8:	6a21      	ldr	r1, [r4, #32]
 800c2ba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c2bc:	4643      	mov	r3, r8
 800c2be:	463a      	mov	r2, r7
 800c2c0:	4628      	mov	r0, r5
 800c2c2:	47b0      	blx	r6
 800c2c4:	2800      	cmp	r0, #0
 800c2c6:	dc06      	bgt.n	800c2d6 <__sflush_r+0xfe>
 800c2c8:	89a3      	ldrh	r3, [r4, #12]
 800c2ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c2ce:	81a3      	strh	r3, [r4, #12]
 800c2d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c2d4:	e78e      	b.n	800c1f4 <__sflush_r+0x1c>
 800c2d6:	4407      	add	r7, r0
 800c2d8:	eba8 0800 	sub.w	r8, r8, r0
 800c2dc:	e7e9      	b.n	800c2b2 <__sflush_r+0xda>
 800c2de:	bf00      	nop
 800c2e0:	dfbffffe 	.word	0xdfbffffe

0800c2e4 <_fflush_r>:
 800c2e4:	b538      	push	{r3, r4, r5, lr}
 800c2e6:	690b      	ldr	r3, [r1, #16]
 800c2e8:	4605      	mov	r5, r0
 800c2ea:	460c      	mov	r4, r1
 800c2ec:	b913      	cbnz	r3, 800c2f4 <_fflush_r+0x10>
 800c2ee:	2500      	movs	r5, #0
 800c2f0:	4628      	mov	r0, r5
 800c2f2:	bd38      	pop	{r3, r4, r5, pc}
 800c2f4:	b118      	cbz	r0, 800c2fe <_fflush_r+0x1a>
 800c2f6:	6a03      	ldr	r3, [r0, #32]
 800c2f8:	b90b      	cbnz	r3, 800c2fe <_fflush_r+0x1a>
 800c2fa:	f7fe fb31 	bl	800a960 <__sinit>
 800c2fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c302:	2b00      	cmp	r3, #0
 800c304:	d0f3      	beq.n	800c2ee <_fflush_r+0xa>
 800c306:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c308:	07d0      	lsls	r0, r2, #31
 800c30a:	d404      	bmi.n	800c316 <_fflush_r+0x32>
 800c30c:	0599      	lsls	r1, r3, #22
 800c30e:	d402      	bmi.n	800c316 <_fflush_r+0x32>
 800c310:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c312:	f7fe fc4b 	bl	800abac <__retarget_lock_acquire_recursive>
 800c316:	4628      	mov	r0, r5
 800c318:	4621      	mov	r1, r4
 800c31a:	f7ff ff5d 	bl	800c1d8 <__sflush_r>
 800c31e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c320:	07da      	lsls	r2, r3, #31
 800c322:	4605      	mov	r5, r0
 800c324:	d4e4      	bmi.n	800c2f0 <_fflush_r+0xc>
 800c326:	89a3      	ldrh	r3, [r4, #12]
 800c328:	059b      	lsls	r3, r3, #22
 800c32a:	d4e1      	bmi.n	800c2f0 <_fflush_r+0xc>
 800c32c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c32e:	f7fe fc3e 	bl	800abae <__retarget_lock_release_recursive>
 800c332:	e7dd      	b.n	800c2f0 <_fflush_r+0xc>

0800c334 <memmove>:
 800c334:	4288      	cmp	r0, r1
 800c336:	b510      	push	{r4, lr}
 800c338:	eb01 0402 	add.w	r4, r1, r2
 800c33c:	d902      	bls.n	800c344 <memmove+0x10>
 800c33e:	4284      	cmp	r4, r0
 800c340:	4623      	mov	r3, r4
 800c342:	d807      	bhi.n	800c354 <memmove+0x20>
 800c344:	1e43      	subs	r3, r0, #1
 800c346:	42a1      	cmp	r1, r4
 800c348:	d008      	beq.n	800c35c <memmove+0x28>
 800c34a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c34e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c352:	e7f8      	b.n	800c346 <memmove+0x12>
 800c354:	4402      	add	r2, r0
 800c356:	4601      	mov	r1, r0
 800c358:	428a      	cmp	r2, r1
 800c35a:	d100      	bne.n	800c35e <memmove+0x2a>
 800c35c:	bd10      	pop	{r4, pc}
 800c35e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c362:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c366:	e7f7      	b.n	800c358 <memmove+0x24>

0800c368 <memcpy>:
 800c368:	440a      	add	r2, r1
 800c36a:	4291      	cmp	r1, r2
 800c36c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800c370:	d100      	bne.n	800c374 <memcpy+0xc>
 800c372:	4770      	bx	lr
 800c374:	b510      	push	{r4, lr}
 800c376:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c37a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c37e:	4291      	cmp	r1, r2
 800c380:	d1f9      	bne.n	800c376 <memcpy+0xe>
 800c382:	bd10      	pop	{r4, pc}

0800c384 <__assert_func>:
 800c384:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c386:	4614      	mov	r4, r2
 800c388:	461a      	mov	r2, r3
 800c38a:	4b09      	ldr	r3, [pc, #36]	; (800c3b0 <__assert_func+0x2c>)
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	4605      	mov	r5, r0
 800c390:	68d8      	ldr	r0, [r3, #12]
 800c392:	b14c      	cbz	r4, 800c3a8 <__assert_func+0x24>
 800c394:	4b07      	ldr	r3, [pc, #28]	; (800c3b4 <__assert_func+0x30>)
 800c396:	9100      	str	r1, [sp, #0]
 800c398:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c39c:	4906      	ldr	r1, [pc, #24]	; (800c3b8 <__assert_func+0x34>)
 800c39e:	462b      	mov	r3, r5
 800c3a0:	f000 f872 	bl	800c488 <fiprintf>
 800c3a4:	f000 f882 	bl	800c4ac <abort>
 800c3a8:	4b04      	ldr	r3, [pc, #16]	; (800c3bc <__assert_func+0x38>)
 800c3aa:	461c      	mov	r4, r3
 800c3ac:	e7f3      	b.n	800c396 <__assert_func+0x12>
 800c3ae:	bf00      	nop
 800c3b0:	2400667c 	.word	0x2400667c
 800c3b4:	0801fcef 	.word	0x0801fcef
 800c3b8:	0801fcfc 	.word	0x0801fcfc
 800c3bc:	0801fd2a 	.word	0x0801fd2a

0800c3c0 <_calloc_r>:
 800c3c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c3c2:	fba1 2402 	umull	r2, r4, r1, r2
 800c3c6:	b94c      	cbnz	r4, 800c3dc <_calloc_r+0x1c>
 800c3c8:	4611      	mov	r1, r2
 800c3ca:	9201      	str	r2, [sp, #4]
 800c3cc:	f7fd fd88 	bl	8009ee0 <_malloc_r>
 800c3d0:	9a01      	ldr	r2, [sp, #4]
 800c3d2:	4605      	mov	r5, r0
 800c3d4:	b930      	cbnz	r0, 800c3e4 <_calloc_r+0x24>
 800c3d6:	4628      	mov	r0, r5
 800c3d8:	b003      	add	sp, #12
 800c3da:	bd30      	pop	{r4, r5, pc}
 800c3dc:	220c      	movs	r2, #12
 800c3de:	6002      	str	r2, [r0, #0]
 800c3e0:	2500      	movs	r5, #0
 800c3e2:	e7f8      	b.n	800c3d6 <_calloc_r+0x16>
 800c3e4:	4621      	mov	r1, r4
 800c3e6:	f7fe fb54 	bl	800aa92 <memset>
 800c3ea:	e7f4      	b.n	800c3d6 <_calloc_r+0x16>

0800c3ec <__ascii_mbtowc>:
 800c3ec:	b082      	sub	sp, #8
 800c3ee:	b901      	cbnz	r1, 800c3f2 <__ascii_mbtowc+0x6>
 800c3f0:	a901      	add	r1, sp, #4
 800c3f2:	b142      	cbz	r2, 800c406 <__ascii_mbtowc+0x1a>
 800c3f4:	b14b      	cbz	r3, 800c40a <__ascii_mbtowc+0x1e>
 800c3f6:	7813      	ldrb	r3, [r2, #0]
 800c3f8:	600b      	str	r3, [r1, #0]
 800c3fa:	7812      	ldrb	r2, [r2, #0]
 800c3fc:	1e10      	subs	r0, r2, #0
 800c3fe:	bf18      	it	ne
 800c400:	2001      	movne	r0, #1
 800c402:	b002      	add	sp, #8
 800c404:	4770      	bx	lr
 800c406:	4610      	mov	r0, r2
 800c408:	e7fb      	b.n	800c402 <__ascii_mbtowc+0x16>
 800c40a:	f06f 0001 	mvn.w	r0, #1
 800c40e:	e7f8      	b.n	800c402 <__ascii_mbtowc+0x16>

0800c410 <_realloc_r>:
 800c410:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c414:	4680      	mov	r8, r0
 800c416:	4614      	mov	r4, r2
 800c418:	460e      	mov	r6, r1
 800c41a:	b921      	cbnz	r1, 800c426 <_realloc_r+0x16>
 800c41c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c420:	4611      	mov	r1, r2
 800c422:	f7fd bd5d 	b.w	8009ee0 <_malloc_r>
 800c426:	b92a      	cbnz	r2, 800c434 <_realloc_r+0x24>
 800c428:	f7ff f9b6 	bl	800b798 <_free_r>
 800c42c:	4625      	mov	r5, r4
 800c42e:	4628      	mov	r0, r5
 800c430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c434:	f000 f841 	bl	800c4ba <_malloc_usable_size_r>
 800c438:	4284      	cmp	r4, r0
 800c43a:	4607      	mov	r7, r0
 800c43c:	d802      	bhi.n	800c444 <_realloc_r+0x34>
 800c43e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c442:	d812      	bhi.n	800c46a <_realloc_r+0x5a>
 800c444:	4621      	mov	r1, r4
 800c446:	4640      	mov	r0, r8
 800c448:	f7fd fd4a 	bl	8009ee0 <_malloc_r>
 800c44c:	4605      	mov	r5, r0
 800c44e:	2800      	cmp	r0, #0
 800c450:	d0ed      	beq.n	800c42e <_realloc_r+0x1e>
 800c452:	42bc      	cmp	r4, r7
 800c454:	4622      	mov	r2, r4
 800c456:	4631      	mov	r1, r6
 800c458:	bf28      	it	cs
 800c45a:	463a      	movcs	r2, r7
 800c45c:	f7ff ff84 	bl	800c368 <memcpy>
 800c460:	4631      	mov	r1, r6
 800c462:	4640      	mov	r0, r8
 800c464:	f7ff f998 	bl	800b798 <_free_r>
 800c468:	e7e1      	b.n	800c42e <_realloc_r+0x1e>
 800c46a:	4635      	mov	r5, r6
 800c46c:	e7df      	b.n	800c42e <_realloc_r+0x1e>

0800c46e <__ascii_wctomb>:
 800c46e:	b149      	cbz	r1, 800c484 <__ascii_wctomb+0x16>
 800c470:	2aff      	cmp	r2, #255	; 0xff
 800c472:	bf85      	ittet	hi
 800c474:	238a      	movhi	r3, #138	; 0x8a
 800c476:	6003      	strhi	r3, [r0, #0]
 800c478:	700a      	strbls	r2, [r1, #0]
 800c47a:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800c47e:	bf98      	it	ls
 800c480:	2001      	movls	r0, #1
 800c482:	4770      	bx	lr
 800c484:	4608      	mov	r0, r1
 800c486:	4770      	bx	lr

0800c488 <fiprintf>:
 800c488:	b40e      	push	{r1, r2, r3}
 800c48a:	b503      	push	{r0, r1, lr}
 800c48c:	4601      	mov	r1, r0
 800c48e:	ab03      	add	r3, sp, #12
 800c490:	4805      	ldr	r0, [pc, #20]	; (800c4a8 <fiprintf+0x20>)
 800c492:	f853 2b04 	ldr.w	r2, [r3], #4
 800c496:	6800      	ldr	r0, [r0, #0]
 800c498:	9301      	str	r3, [sp, #4]
 800c49a:	f000 f83f 	bl	800c51c <_vfiprintf_r>
 800c49e:	b002      	add	sp, #8
 800c4a0:	f85d eb04 	ldr.w	lr, [sp], #4
 800c4a4:	b003      	add	sp, #12
 800c4a6:	4770      	bx	lr
 800c4a8:	2400667c 	.word	0x2400667c

0800c4ac <abort>:
 800c4ac:	b508      	push	{r3, lr}
 800c4ae:	2006      	movs	r0, #6
 800c4b0:	f000 fa0c 	bl	800c8cc <raise>
 800c4b4:	2001      	movs	r0, #1
 800c4b6:	f7f4 fd3d 	bl	8000f34 <_exit>

0800c4ba <_malloc_usable_size_r>:
 800c4ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c4be:	1f18      	subs	r0, r3, #4
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	bfbc      	itt	lt
 800c4c4:	580b      	ldrlt	r3, [r1, r0]
 800c4c6:	18c0      	addlt	r0, r0, r3
 800c4c8:	4770      	bx	lr

0800c4ca <__sfputc_r>:
 800c4ca:	6893      	ldr	r3, [r2, #8]
 800c4cc:	3b01      	subs	r3, #1
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	b410      	push	{r4}
 800c4d2:	6093      	str	r3, [r2, #8]
 800c4d4:	da08      	bge.n	800c4e8 <__sfputc_r+0x1e>
 800c4d6:	6994      	ldr	r4, [r2, #24]
 800c4d8:	42a3      	cmp	r3, r4
 800c4da:	db01      	blt.n	800c4e0 <__sfputc_r+0x16>
 800c4dc:	290a      	cmp	r1, #10
 800c4de:	d103      	bne.n	800c4e8 <__sfputc_r+0x1e>
 800c4e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c4e4:	f000 b934 	b.w	800c750 <__swbuf_r>
 800c4e8:	6813      	ldr	r3, [r2, #0]
 800c4ea:	1c58      	adds	r0, r3, #1
 800c4ec:	6010      	str	r0, [r2, #0]
 800c4ee:	7019      	strb	r1, [r3, #0]
 800c4f0:	4608      	mov	r0, r1
 800c4f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c4f6:	4770      	bx	lr

0800c4f8 <__sfputs_r>:
 800c4f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4fa:	4606      	mov	r6, r0
 800c4fc:	460f      	mov	r7, r1
 800c4fe:	4614      	mov	r4, r2
 800c500:	18d5      	adds	r5, r2, r3
 800c502:	42ac      	cmp	r4, r5
 800c504:	d101      	bne.n	800c50a <__sfputs_r+0x12>
 800c506:	2000      	movs	r0, #0
 800c508:	e007      	b.n	800c51a <__sfputs_r+0x22>
 800c50a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c50e:	463a      	mov	r2, r7
 800c510:	4630      	mov	r0, r6
 800c512:	f7ff ffda 	bl	800c4ca <__sfputc_r>
 800c516:	1c43      	adds	r3, r0, #1
 800c518:	d1f3      	bne.n	800c502 <__sfputs_r+0xa>
 800c51a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c51c <_vfiprintf_r>:
 800c51c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c520:	460d      	mov	r5, r1
 800c522:	b09d      	sub	sp, #116	; 0x74
 800c524:	4614      	mov	r4, r2
 800c526:	4698      	mov	r8, r3
 800c528:	4606      	mov	r6, r0
 800c52a:	b118      	cbz	r0, 800c534 <_vfiprintf_r+0x18>
 800c52c:	6a03      	ldr	r3, [r0, #32]
 800c52e:	b90b      	cbnz	r3, 800c534 <_vfiprintf_r+0x18>
 800c530:	f7fe fa16 	bl	800a960 <__sinit>
 800c534:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c536:	07d9      	lsls	r1, r3, #31
 800c538:	d405      	bmi.n	800c546 <_vfiprintf_r+0x2a>
 800c53a:	89ab      	ldrh	r3, [r5, #12]
 800c53c:	059a      	lsls	r2, r3, #22
 800c53e:	d402      	bmi.n	800c546 <_vfiprintf_r+0x2a>
 800c540:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c542:	f7fe fb33 	bl	800abac <__retarget_lock_acquire_recursive>
 800c546:	89ab      	ldrh	r3, [r5, #12]
 800c548:	071b      	lsls	r3, r3, #28
 800c54a:	d501      	bpl.n	800c550 <_vfiprintf_r+0x34>
 800c54c:	692b      	ldr	r3, [r5, #16]
 800c54e:	b99b      	cbnz	r3, 800c578 <_vfiprintf_r+0x5c>
 800c550:	4629      	mov	r1, r5
 800c552:	4630      	mov	r0, r6
 800c554:	f000 f93a 	bl	800c7cc <__swsetup_r>
 800c558:	b170      	cbz	r0, 800c578 <_vfiprintf_r+0x5c>
 800c55a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c55c:	07dc      	lsls	r4, r3, #31
 800c55e:	d504      	bpl.n	800c56a <_vfiprintf_r+0x4e>
 800c560:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c564:	b01d      	add	sp, #116	; 0x74
 800c566:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c56a:	89ab      	ldrh	r3, [r5, #12]
 800c56c:	0598      	lsls	r0, r3, #22
 800c56e:	d4f7      	bmi.n	800c560 <_vfiprintf_r+0x44>
 800c570:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c572:	f7fe fb1c 	bl	800abae <__retarget_lock_release_recursive>
 800c576:	e7f3      	b.n	800c560 <_vfiprintf_r+0x44>
 800c578:	2300      	movs	r3, #0
 800c57a:	9309      	str	r3, [sp, #36]	; 0x24
 800c57c:	2320      	movs	r3, #32
 800c57e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c582:	f8cd 800c 	str.w	r8, [sp, #12]
 800c586:	2330      	movs	r3, #48	; 0x30
 800c588:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800c73c <_vfiprintf_r+0x220>
 800c58c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c590:	f04f 0901 	mov.w	r9, #1
 800c594:	4623      	mov	r3, r4
 800c596:	469a      	mov	sl, r3
 800c598:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c59c:	b10a      	cbz	r2, 800c5a2 <_vfiprintf_r+0x86>
 800c59e:	2a25      	cmp	r2, #37	; 0x25
 800c5a0:	d1f9      	bne.n	800c596 <_vfiprintf_r+0x7a>
 800c5a2:	ebba 0b04 	subs.w	fp, sl, r4
 800c5a6:	d00b      	beq.n	800c5c0 <_vfiprintf_r+0xa4>
 800c5a8:	465b      	mov	r3, fp
 800c5aa:	4622      	mov	r2, r4
 800c5ac:	4629      	mov	r1, r5
 800c5ae:	4630      	mov	r0, r6
 800c5b0:	f7ff ffa2 	bl	800c4f8 <__sfputs_r>
 800c5b4:	3001      	adds	r0, #1
 800c5b6:	f000 80a9 	beq.w	800c70c <_vfiprintf_r+0x1f0>
 800c5ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c5bc:	445a      	add	r2, fp
 800c5be:	9209      	str	r2, [sp, #36]	; 0x24
 800c5c0:	f89a 3000 	ldrb.w	r3, [sl]
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	f000 80a1 	beq.w	800c70c <_vfiprintf_r+0x1f0>
 800c5ca:	2300      	movs	r3, #0
 800c5cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c5d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c5d4:	f10a 0a01 	add.w	sl, sl, #1
 800c5d8:	9304      	str	r3, [sp, #16]
 800c5da:	9307      	str	r3, [sp, #28]
 800c5dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c5e0:	931a      	str	r3, [sp, #104]	; 0x68
 800c5e2:	4654      	mov	r4, sl
 800c5e4:	2205      	movs	r2, #5
 800c5e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5ea:	4854      	ldr	r0, [pc, #336]	; (800c73c <_vfiprintf_r+0x220>)
 800c5ec:	f7f3 fe90 	bl	8000310 <memchr>
 800c5f0:	9a04      	ldr	r2, [sp, #16]
 800c5f2:	b9d8      	cbnz	r0, 800c62c <_vfiprintf_r+0x110>
 800c5f4:	06d1      	lsls	r1, r2, #27
 800c5f6:	bf44      	itt	mi
 800c5f8:	2320      	movmi	r3, #32
 800c5fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c5fe:	0713      	lsls	r3, r2, #28
 800c600:	bf44      	itt	mi
 800c602:	232b      	movmi	r3, #43	; 0x2b
 800c604:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c608:	f89a 3000 	ldrb.w	r3, [sl]
 800c60c:	2b2a      	cmp	r3, #42	; 0x2a
 800c60e:	d015      	beq.n	800c63c <_vfiprintf_r+0x120>
 800c610:	9a07      	ldr	r2, [sp, #28]
 800c612:	4654      	mov	r4, sl
 800c614:	2000      	movs	r0, #0
 800c616:	f04f 0c0a 	mov.w	ip, #10
 800c61a:	4621      	mov	r1, r4
 800c61c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c620:	3b30      	subs	r3, #48	; 0x30
 800c622:	2b09      	cmp	r3, #9
 800c624:	d94d      	bls.n	800c6c2 <_vfiprintf_r+0x1a6>
 800c626:	b1b0      	cbz	r0, 800c656 <_vfiprintf_r+0x13a>
 800c628:	9207      	str	r2, [sp, #28]
 800c62a:	e014      	b.n	800c656 <_vfiprintf_r+0x13a>
 800c62c:	eba0 0308 	sub.w	r3, r0, r8
 800c630:	fa09 f303 	lsl.w	r3, r9, r3
 800c634:	4313      	orrs	r3, r2
 800c636:	9304      	str	r3, [sp, #16]
 800c638:	46a2      	mov	sl, r4
 800c63a:	e7d2      	b.n	800c5e2 <_vfiprintf_r+0xc6>
 800c63c:	9b03      	ldr	r3, [sp, #12]
 800c63e:	1d19      	adds	r1, r3, #4
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	9103      	str	r1, [sp, #12]
 800c644:	2b00      	cmp	r3, #0
 800c646:	bfbb      	ittet	lt
 800c648:	425b      	neglt	r3, r3
 800c64a:	f042 0202 	orrlt.w	r2, r2, #2
 800c64e:	9307      	strge	r3, [sp, #28]
 800c650:	9307      	strlt	r3, [sp, #28]
 800c652:	bfb8      	it	lt
 800c654:	9204      	strlt	r2, [sp, #16]
 800c656:	7823      	ldrb	r3, [r4, #0]
 800c658:	2b2e      	cmp	r3, #46	; 0x2e
 800c65a:	d10c      	bne.n	800c676 <_vfiprintf_r+0x15a>
 800c65c:	7863      	ldrb	r3, [r4, #1]
 800c65e:	2b2a      	cmp	r3, #42	; 0x2a
 800c660:	d134      	bne.n	800c6cc <_vfiprintf_r+0x1b0>
 800c662:	9b03      	ldr	r3, [sp, #12]
 800c664:	1d1a      	adds	r2, r3, #4
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	9203      	str	r2, [sp, #12]
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	bfb8      	it	lt
 800c66e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c672:	3402      	adds	r4, #2
 800c674:	9305      	str	r3, [sp, #20]
 800c676:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800c74c <_vfiprintf_r+0x230>
 800c67a:	7821      	ldrb	r1, [r4, #0]
 800c67c:	2203      	movs	r2, #3
 800c67e:	4650      	mov	r0, sl
 800c680:	f7f3 fe46 	bl	8000310 <memchr>
 800c684:	b138      	cbz	r0, 800c696 <_vfiprintf_r+0x17a>
 800c686:	9b04      	ldr	r3, [sp, #16]
 800c688:	eba0 000a 	sub.w	r0, r0, sl
 800c68c:	2240      	movs	r2, #64	; 0x40
 800c68e:	4082      	lsls	r2, r0
 800c690:	4313      	orrs	r3, r2
 800c692:	3401      	adds	r4, #1
 800c694:	9304      	str	r3, [sp, #16]
 800c696:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c69a:	4829      	ldr	r0, [pc, #164]	; (800c740 <_vfiprintf_r+0x224>)
 800c69c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c6a0:	2206      	movs	r2, #6
 800c6a2:	f7f3 fe35 	bl	8000310 <memchr>
 800c6a6:	2800      	cmp	r0, #0
 800c6a8:	d03f      	beq.n	800c72a <_vfiprintf_r+0x20e>
 800c6aa:	4b26      	ldr	r3, [pc, #152]	; (800c744 <_vfiprintf_r+0x228>)
 800c6ac:	bb1b      	cbnz	r3, 800c6f6 <_vfiprintf_r+0x1da>
 800c6ae:	9b03      	ldr	r3, [sp, #12]
 800c6b0:	3307      	adds	r3, #7
 800c6b2:	f023 0307 	bic.w	r3, r3, #7
 800c6b6:	3308      	adds	r3, #8
 800c6b8:	9303      	str	r3, [sp, #12]
 800c6ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c6bc:	443b      	add	r3, r7
 800c6be:	9309      	str	r3, [sp, #36]	; 0x24
 800c6c0:	e768      	b.n	800c594 <_vfiprintf_r+0x78>
 800c6c2:	fb0c 3202 	mla	r2, ip, r2, r3
 800c6c6:	460c      	mov	r4, r1
 800c6c8:	2001      	movs	r0, #1
 800c6ca:	e7a6      	b.n	800c61a <_vfiprintf_r+0xfe>
 800c6cc:	2300      	movs	r3, #0
 800c6ce:	3401      	adds	r4, #1
 800c6d0:	9305      	str	r3, [sp, #20]
 800c6d2:	4619      	mov	r1, r3
 800c6d4:	f04f 0c0a 	mov.w	ip, #10
 800c6d8:	4620      	mov	r0, r4
 800c6da:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c6de:	3a30      	subs	r2, #48	; 0x30
 800c6e0:	2a09      	cmp	r2, #9
 800c6e2:	d903      	bls.n	800c6ec <_vfiprintf_r+0x1d0>
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d0c6      	beq.n	800c676 <_vfiprintf_r+0x15a>
 800c6e8:	9105      	str	r1, [sp, #20]
 800c6ea:	e7c4      	b.n	800c676 <_vfiprintf_r+0x15a>
 800c6ec:	fb0c 2101 	mla	r1, ip, r1, r2
 800c6f0:	4604      	mov	r4, r0
 800c6f2:	2301      	movs	r3, #1
 800c6f4:	e7f0      	b.n	800c6d8 <_vfiprintf_r+0x1bc>
 800c6f6:	ab03      	add	r3, sp, #12
 800c6f8:	9300      	str	r3, [sp, #0]
 800c6fa:	462a      	mov	r2, r5
 800c6fc:	4b12      	ldr	r3, [pc, #72]	; (800c748 <_vfiprintf_r+0x22c>)
 800c6fe:	a904      	add	r1, sp, #16
 800c700:	4630      	mov	r0, r6
 800c702:	f7fd fd09 	bl	800a118 <_printf_float>
 800c706:	4607      	mov	r7, r0
 800c708:	1c78      	adds	r0, r7, #1
 800c70a:	d1d6      	bne.n	800c6ba <_vfiprintf_r+0x19e>
 800c70c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c70e:	07d9      	lsls	r1, r3, #31
 800c710:	d405      	bmi.n	800c71e <_vfiprintf_r+0x202>
 800c712:	89ab      	ldrh	r3, [r5, #12]
 800c714:	059a      	lsls	r2, r3, #22
 800c716:	d402      	bmi.n	800c71e <_vfiprintf_r+0x202>
 800c718:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c71a:	f7fe fa48 	bl	800abae <__retarget_lock_release_recursive>
 800c71e:	89ab      	ldrh	r3, [r5, #12]
 800c720:	065b      	lsls	r3, r3, #25
 800c722:	f53f af1d 	bmi.w	800c560 <_vfiprintf_r+0x44>
 800c726:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c728:	e71c      	b.n	800c564 <_vfiprintf_r+0x48>
 800c72a:	ab03      	add	r3, sp, #12
 800c72c:	9300      	str	r3, [sp, #0]
 800c72e:	462a      	mov	r2, r5
 800c730:	4b05      	ldr	r3, [pc, #20]	; (800c748 <_vfiprintf_r+0x22c>)
 800c732:	a904      	add	r1, sp, #16
 800c734:	4630      	mov	r0, r6
 800c736:	f7fd ff77 	bl	800a628 <_printf_i>
 800c73a:	e7e4      	b.n	800c706 <_vfiprintf_r+0x1ea>
 800c73c:	0801fcd4 	.word	0x0801fcd4
 800c740:	0801fcde 	.word	0x0801fcde
 800c744:	0800a119 	.word	0x0800a119
 800c748:	0800c4f9 	.word	0x0800c4f9
 800c74c:	0801fcda 	.word	0x0801fcda

0800c750 <__swbuf_r>:
 800c750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c752:	460e      	mov	r6, r1
 800c754:	4614      	mov	r4, r2
 800c756:	4605      	mov	r5, r0
 800c758:	b118      	cbz	r0, 800c762 <__swbuf_r+0x12>
 800c75a:	6a03      	ldr	r3, [r0, #32]
 800c75c:	b90b      	cbnz	r3, 800c762 <__swbuf_r+0x12>
 800c75e:	f7fe f8ff 	bl	800a960 <__sinit>
 800c762:	69a3      	ldr	r3, [r4, #24]
 800c764:	60a3      	str	r3, [r4, #8]
 800c766:	89a3      	ldrh	r3, [r4, #12]
 800c768:	071a      	lsls	r2, r3, #28
 800c76a:	d525      	bpl.n	800c7b8 <__swbuf_r+0x68>
 800c76c:	6923      	ldr	r3, [r4, #16]
 800c76e:	b31b      	cbz	r3, 800c7b8 <__swbuf_r+0x68>
 800c770:	6823      	ldr	r3, [r4, #0]
 800c772:	6922      	ldr	r2, [r4, #16]
 800c774:	1a98      	subs	r0, r3, r2
 800c776:	6963      	ldr	r3, [r4, #20]
 800c778:	b2f6      	uxtb	r6, r6
 800c77a:	4283      	cmp	r3, r0
 800c77c:	4637      	mov	r7, r6
 800c77e:	dc04      	bgt.n	800c78a <__swbuf_r+0x3a>
 800c780:	4621      	mov	r1, r4
 800c782:	4628      	mov	r0, r5
 800c784:	f7ff fdae 	bl	800c2e4 <_fflush_r>
 800c788:	b9e0      	cbnz	r0, 800c7c4 <__swbuf_r+0x74>
 800c78a:	68a3      	ldr	r3, [r4, #8]
 800c78c:	3b01      	subs	r3, #1
 800c78e:	60a3      	str	r3, [r4, #8]
 800c790:	6823      	ldr	r3, [r4, #0]
 800c792:	1c5a      	adds	r2, r3, #1
 800c794:	6022      	str	r2, [r4, #0]
 800c796:	701e      	strb	r6, [r3, #0]
 800c798:	6962      	ldr	r2, [r4, #20]
 800c79a:	1c43      	adds	r3, r0, #1
 800c79c:	429a      	cmp	r2, r3
 800c79e:	d004      	beq.n	800c7aa <__swbuf_r+0x5a>
 800c7a0:	89a3      	ldrh	r3, [r4, #12]
 800c7a2:	07db      	lsls	r3, r3, #31
 800c7a4:	d506      	bpl.n	800c7b4 <__swbuf_r+0x64>
 800c7a6:	2e0a      	cmp	r6, #10
 800c7a8:	d104      	bne.n	800c7b4 <__swbuf_r+0x64>
 800c7aa:	4621      	mov	r1, r4
 800c7ac:	4628      	mov	r0, r5
 800c7ae:	f7ff fd99 	bl	800c2e4 <_fflush_r>
 800c7b2:	b938      	cbnz	r0, 800c7c4 <__swbuf_r+0x74>
 800c7b4:	4638      	mov	r0, r7
 800c7b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c7b8:	4621      	mov	r1, r4
 800c7ba:	4628      	mov	r0, r5
 800c7bc:	f000 f806 	bl	800c7cc <__swsetup_r>
 800c7c0:	2800      	cmp	r0, #0
 800c7c2:	d0d5      	beq.n	800c770 <__swbuf_r+0x20>
 800c7c4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800c7c8:	e7f4      	b.n	800c7b4 <__swbuf_r+0x64>
	...

0800c7cc <__swsetup_r>:
 800c7cc:	b538      	push	{r3, r4, r5, lr}
 800c7ce:	4b2a      	ldr	r3, [pc, #168]	; (800c878 <__swsetup_r+0xac>)
 800c7d0:	4605      	mov	r5, r0
 800c7d2:	6818      	ldr	r0, [r3, #0]
 800c7d4:	460c      	mov	r4, r1
 800c7d6:	b118      	cbz	r0, 800c7e0 <__swsetup_r+0x14>
 800c7d8:	6a03      	ldr	r3, [r0, #32]
 800c7da:	b90b      	cbnz	r3, 800c7e0 <__swsetup_r+0x14>
 800c7dc:	f7fe f8c0 	bl	800a960 <__sinit>
 800c7e0:	89a3      	ldrh	r3, [r4, #12]
 800c7e2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c7e6:	0718      	lsls	r0, r3, #28
 800c7e8:	d422      	bmi.n	800c830 <__swsetup_r+0x64>
 800c7ea:	06d9      	lsls	r1, r3, #27
 800c7ec:	d407      	bmi.n	800c7fe <__swsetup_r+0x32>
 800c7ee:	2309      	movs	r3, #9
 800c7f0:	602b      	str	r3, [r5, #0]
 800c7f2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c7f6:	81a3      	strh	r3, [r4, #12]
 800c7f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c7fc:	e034      	b.n	800c868 <__swsetup_r+0x9c>
 800c7fe:	0758      	lsls	r0, r3, #29
 800c800:	d512      	bpl.n	800c828 <__swsetup_r+0x5c>
 800c802:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c804:	b141      	cbz	r1, 800c818 <__swsetup_r+0x4c>
 800c806:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c80a:	4299      	cmp	r1, r3
 800c80c:	d002      	beq.n	800c814 <__swsetup_r+0x48>
 800c80e:	4628      	mov	r0, r5
 800c810:	f7fe ffc2 	bl	800b798 <_free_r>
 800c814:	2300      	movs	r3, #0
 800c816:	6363      	str	r3, [r4, #52]	; 0x34
 800c818:	89a3      	ldrh	r3, [r4, #12]
 800c81a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c81e:	81a3      	strh	r3, [r4, #12]
 800c820:	2300      	movs	r3, #0
 800c822:	6063      	str	r3, [r4, #4]
 800c824:	6923      	ldr	r3, [r4, #16]
 800c826:	6023      	str	r3, [r4, #0]
 800c828:	89a3      	ldrh	r3, [r4, #12]
 800c82a:	f043 0308 	orr.w	r3, r3, #8
 800c82e:	81a3      	strh	r3, [r4, #12]
 800c830:	6923      	ldr	r3, [r4, #16]
 800c832:	b94b      	cbnz	r3, 800c848 <__swsetup_r+0x7c>
 800c834:	89a3      	ldrh	r3, [r4, #12]
 800c836:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c83a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c83e:	d003      	beq.n	800c848 <__swsetup_r+0x7c>
 800c840:	4621      	mov	r1, r4
 800c842:	4628      	mov	r0, r5
 800c844:	f000 f884 	bl	800c950 <__smakebuf_r>
 800c848:	89a0      	ldrh	r0, [r4, #12]
 800c84a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c84e:	f010 0301 	ands.w	r3, r0, #1
 800c852:	d00a      	beq.n	800c86a <__swsetup_r+0x9e>
 800c854:	2300      	movs	r3, #0
 800c856:	60a3      	str	r3, [r4, #8]
 800c858:	6963      	ldr	r3, [r4, #20]
 800c85a:	425b      	negs	r3, r3
 800c85c:	61a3      	str	r3, [r4, #24]
 800c85e:	6923      	ldr	r3, [r4, #16]
 800c860:	b943      	cbnz	r3, 800c874 <__swsetup_r+0xa8>
 800c862:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c866:	d1c4      	bne.n	800c7f2 <__swsetup_r+0x26>
 800c868:	bd38      	pop	{r3, r4, r5, pc}
 800c86a:	0781      	lsls	r1, r0, #30
 800c86c:	bf58      	it	pl
 800c86e:	6963      	ldrpl	r3, [r4, #20]
 800c870:	60a3      	str	r3, [r4, #8]
 800c872:	e7f4      	b.n	800c85e <__swsetup_r+0x92>
 800c874:	2000      	movs	r0, #0
 800c876:	e7f7      	b.n	800c868 <__swsetup_r+0x9c>
 800c878:	2400667c 	.word	0x2400667c

0800c87c <_raise_r>:
 800c87c:	291f      	cmp	r1, #31
 800c87e:	b538      	push	{r3, r4, r5, lr}
 800c880:	4604      	mov	r4, r0
 800c882:	460d      	mov	r5, r1
 800c884:	d904      	bls.n	800c890 <_raise_r+0x14>
 800c886:	2316      	movs	r3, #22
 800c888:	6003      	str	r3, [r0, #0]
 800c88a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c88e:	bd38      	pop	{r3, r4, r5, pc}
 800c890:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800c892:	b112      	cbz	r2, 800c89a <_raise_r+0x1e>
 800c894:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c898:	b94b      	cbnz	r3, 800c8ae <_raise_r+0x32>
 800c89a:	4620      	mov	r0, r4
 800c89c:	f000 f830 	bl	800c900 <_getpid_r>
 800c8a0:	462a      	mov	r2, r5
 800c8a2:	4601      	mov	r1, r0
 800c8a4:	4620      	mov	r0, r4
 800c8a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c8aa:	f000 b817 	b.w	800c8dc <_kill_r>
 800c8ae:	2b01      	cmp	r3, #1
 800c8b0:	d00a      	beq.n	800c8c8 <_raise_r+0x4c>
 800c8b2:	1c59      	adds	r1, r3, #1
 800c8b4:	d103      	bne.n	800c8be <_raise_r+0x42>
 800c8b6:	2316      	movs	r3, #22
 800c8b8:	6003      	str	r3, [r0, #0]
 800c8ba:	2001      	movs	r0, #1
 800c8bc:	e7e7      	b.n	800c88e <_raise_r+0x12>
 800c8be:	2400      	movs	r4, #0
 800c8c0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c8c4:	4628      	mov	r0, r5
 800c8c6:	4798      	blx	r3
 800c8c8:	2000      	movs	r0, #0
 800c8ca:	e7e0      	b.n	800c88e <_raise_r+0x12>

0800c8cc <raise>:
 800c8cc:	4b02      	ldr	r3, [pc, #8]	; (800c8d8 <raise+0xc>)
 800c8ce:	4601      	mov	r1, r0
 800c8d0:	6818      	ldr	r0, [r3, #0]
 800c8d2:	f7ff bfd3 	b.w	800c87c <_raise_r>
 800c8d6:	bf00      	nop
 800c8d8:	2400667c 	.word	0x2400667c

0800c8dc <_kill_r>:
 800c8dc:	b538      	push	{r3, r4, r5, lr}
 800c8de:	4d07      	ldr	r5, [pc, #28]	; (800c8fc <_kill_r+0x20>)
 800c8e0:	2300      	movs	r3, #0
 800c8e2:	4604      	mov	r4, r0
 800c8e4:	4608      	mov	r0, r1
 800c8e6:	4611      	mov	r1, r2
 800c8e8:	602b      	str	r3, [r5, #0]
 800c8ea:	f7f4 fb19 	bl	8000f20 <_kill>
 800c8ee:	1c43      	adds	r3, r0, #1
 800c8f0:	d102      	bne.n	800c8f8 <_kill_r+0x1c>
 800c8f2:	682b      	ldr	r3, [r5, #0]
 800c8f4:	b103      	cbz	r3, 800c8f8 <_kill_r+0x1c>
 800c8f6:	6023      	str	r3, [r4, #0]
 800c8f8:	bd38      	pop	{r3, r4, r5, pc}
 800c8fa:	bf00      	nop
 800c8fc:	24008760 	.word	0x24008760

0800c900 <_getpid_r>:
 800c900:	f7f4 bb0c 	b.w	8000f1c <_getpid>

0800c904 <__swhatbuf_r>:
 800c904:	b570      	push	{r4, r5, r6, lr}
 800c906:	460c      	mov	r4, r1
 800c908:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c90c:	2900      	cmp	r1, #0
 800c90e:	b096      	sub	sp, #88	; 0x58
 800c910:	4615      	mov	r5, r2
 800c912:	461e      	mov	r6, r3
 800c914:	da0d      	bge.n	800c932 <__swhatbuf_r+0x2e>
 800c916:	89a3      	ldrh	r3, [r4, #12]
 800c918:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c91c:	f04f 0100 	mov.w	r1, #0
 800c920:	bf0c      	ite	eq
 800c922:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800c926:	2340      	movne	r3, #64	; 0x40
 800c928:	2000      	movs	r0, #0
 800c92a:	6031      	str	r1, [r6, #0]
 800c92c:	602b      	str	r3, [r5, #0]
 800c92e:	b016      	add	sp, #88	; 0x58
 800c930:	bd70      	pop	{r4, r5, r6, pc}
 800c932:	466a      	mov	r2, sp
 800c934:	f000 f848 	bl	800c9c8 <_fstat_r>
 800c938:	2800      	cmp	r0, #0
 800c93a:	dbec      	blt.n	800c916 <__swhatbuf_r+0x12>
 800c93c:	9901      	ldr	r1, [sp, #4]
 800c93e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800c942:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800c946:	4259      	negs	r1, r3
 800c948:	4159      	adcs	r1, r3
 800c94a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c94e:	e7eb      	b.n	800c928 <__swhatbuf_r+0x24>

0800c950 <__smakebuf_r>:
 800c950:	898b      	ldrh	r3, [r1, #12]
 800c952:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c954:	079d      	lsls	r5, r3, #30
 800c956:	4606      	mov	r6, r0
 800c958:	460c      	mov	r4, r1
 800c95a:	d507      	bpl.n	800c96c <__smakebuf_r+0x1c>
 800c95c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c960:	6023      	str	r3, [r4, #0]
 800c962:	6123      	str	r3, [r4, #16]
 800c964:	2301      	movs	r3, #1
 800c966:	6163      	str	r3, [r4, #20]
 800c968:	b002      	add	sp, #8
 800c96a:	bd70      	pop	{r4, r5, r6, pc}
 800c96c:	ab01      	add	r3, sp, #4
 800c96e:	466a      	mov	r2, sp
 800c970:	f7ff ffc8 	bl	800c904 <__swhatbuf_r>
 800c974:	9900      	ldr	r1, [sp, #0]
 800c976:	4605      	mov	r5, r0
 800c978:	4630      	mov	r0, r6
 800c97a:	f7fd fab1 	bl	8009ee0 <_malloc_r>
 800c97e:	b948      	cbnz	r0, 800c994 <__smakebuf_r+0x44>
 800c980:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c984:	059a      	lsls	r2, r3, #22
 800c986:	d4ef      	bmi.n	800c968 <__smakebuf_r+0x18>
 800c988:	f023 0303 	bic.w	r3, r3, #3
 800c98c:	f043 0302 	orr.w	r3, r3, #2
 800c990:	81a3      	strh	r3, [r4, #12]
 800c992:	e7e3      	b.n	800c95c <__smakebuf_r+0xc>
 800c994:	89a3      	ldrh	r3, [r4, #12]
 800c996:	6020      	str	r0, [r4, #0]
 800c998:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c99c:	81a3      	strh	r3, [r4, #12]
 800c99e:	9b00      	ldr	r3, [sp, #0]
 800c9a0:	6163      	str	r3, [r4, #20]
 800c9a2:	9b01      	ldr	r3, [sp, #4]
 800c9a4:	6120      	str	r0, [r4, #16]
 800c9a6:	b15b      	cbz	r3, 800c9c0 <__smakebuf_r+0x70>
 800c9a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c9ac:	4630      	mov	r0, r6
 800c9ae:	f000 f81d 	bl	800c9ec <_isatty_r>
 800c9b2:	b128      	cbz	r0, 800c9c0 <__smakebuf_r+0x70>
 800c9b4:	89a3      	ldrh	r3, [r4, #12]
 800c9b6:	f023 0303 	bic.w	r3, r3, #3
 800c9ba:	f043 0301 	orr.w	r3, r3, #1
 800c9be:	81a3      	strh	r3, [r4, #12]
 800c9c0:	89a3      	ldrh	r3, [r4, #12]
 800c9c2:	431d      	orrs	r5, r3
 800c9c4:	81a5      	strh	r5, [r4, #12]
 800c9c6:	e7cf      	b.n	800c968 <__smakebuf_r+0x18>

0800c9c8 <_fstat_r>:
 800c9c8:	b538      	push	{r3, r4, r5, lr}
 800c9ca:	4d07      	ldr	r5, [pc, #28]	; (800c9e8 <_fstat_r+0x20>)
 800c9cc:	2300      	movs	r3, #0
 800c9ce:	4604      	mov	r4, r0
 800c9d0:	4608      	mov	r0, r1
 800c9d2:	4611      	mov	r1, r2
 800c9d4:	602b      	str	r3, [r5, #0]
 800c9d6:	f7f4 fad3 	bl	8000f80 <_fstat>
 800c9da:	1c43      	adds	r3, r0, #1
 800c9dc:	d102      	bne.n	800c9e4 <_fstat_r+0x1c>
 800c9de:	682b      	ldr	r3, [r5, #0]
 800c9e0:	b103      	cbz	r3, 800c9e4 <_fstat_r+0x1c>
 800c9e2:	6023      	str	r3, [r4, #0]
 800c9e4:	bd38      	pop	{r3, r4, r5, pc}
 800c9e6:	bf00      	nop
 800c9e8:	24008760 	.word	0x24008760

0800c9ec <_isatty_r>:
 800c9ec:	b538      	push	{r3, r4, r5, lr}
 800c9ee:	4d06      	ldr	r5, [pc, #24]	; (800ca08 <_isatty_r+0x1c>)
 800c9f0:	2300      	movs	r3, #0
 800c9f2:	4604      	mov	r4, r0
 800c9f4:	4608      	mov	r0, r1
 800c9f6:	602b      	str	r3, [r5, #0]
 800c9f8:	f7f4 fac8 	bl	8000f8c <_isatty>
 800c9fc:	1c43      	adds	r3, r0, #1
 800c9fe:	d102      	bne.n	800ca06 <_isatty_r+0x1a>
 800ca00:	682b      	ldr	r3, [r5, #0]
 800ca02:	b103      	cbz	r3, 800ca06 <_isatty_r+0x1a>
 800ca04:	6023      	str	r3, [r4, #0]
 800ca06:	bd38      	pop	{r3, r4, r5, pc}
 800ca08:	24008760 	.word	0x24008760

0800ca0c <sqrtf>:
 800ca0c:	b508      	push	{r3, lr}
 800ca0e:	ed2d 8b02 	vpush	{d8}
 800ca12:	eeb0 8a40 	vmov.f32	s16, s0
 800ca16:	f000 f817 	bl	800ca48 <__ieee754_sqrtf>
 800ca1a:	eeb4 8a48 	vcmp.f32	s16, s16
 800ca1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca22:	d60c      	bvs.n	800ca3e <sqrtf+0x32>
 800ca24:	eddf 8a07 	vldr	s17, [pc, #28]	; 800ca44 <sqrtf+0x38>
 800ca28:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800ca2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca30:	d505      	bpl.n	800ca3e <sqrtf+0x32>
 800ca32:	f7fe f891 	bl	800ab58 <__errno>
 800ca36:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800ca3a:	2321      	movs	r3, #33	; 0x21
 800ca3c:	6003      	str	r3, [r0, #0]
 800ca3e:	ecbd 8b02 	vpop	{d8}
 800ca42:	bd08      	pop	{r3, pc}
 800ca44:	00000000 	.word	0x00000000

0800ca48 <__ieee754_sqrtf>:
 800ca48:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800ca4c:	4770      	bx	lr
	...

0800ca50 <_init>:
 800ca50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca52:	bf00      	nop
 800ca54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca56:	bc08      	pop	{r3}
 800ca58:	469e      	mov	lr, r3
 800ca5a:	4770      	bx	lr

0800ca5c <_fini>:
 800ca5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca5e:	bf00      	nop
 800ca60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca62:	bc08      	pop	{r3}
 800ca64:	469e      	mov	lr, r3
 800ca66:	4770      	bx	lr
