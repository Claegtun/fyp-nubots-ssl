
pcb_fft.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d1f8  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00029d64  0800d4c8  0800d4c8  0001d4c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0803722c  0803722c  0004722c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08037230  08037230  00047230  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000002c8  24000000  08037234  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00002258  240002c8  080374fc  000502c8  2**3
                  ALLOC
  7 ._user_heap_stack 00000600  24002520  080374fc  00052520  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  000502c8  2**0
                  CONTENTS, READONLY
  9 .comment      000000b8  00000000  00000000  000502f6  2**0
                  CONTENTS, READONLY
 10 .debug_info   00035e16  00000000  00000000  000503ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00007c74  00000000  00000000  000861c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001698  00000000  00000000  0008de38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00037e73  00000000  00000000  0008f4d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   000301fa  00000000  00000000  000c7343  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0014e526  00000000  00000000  000f753d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001de7  00000000  00000000  00245a63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  000053d4  00000000  00000000  0024784c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_loclists 00010f3a  00000000  00000000  0024cc20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000089  00000000  00000000  0025db5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_loc    000064fe  00000000  00000000  0025dbe3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_ranges 000003f8  00000000  00000000  002640e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240002c8 	.word	0x240002c8
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800d4b0 	.word	0x0800d4b0

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240002cc 	.word	0x240002cc
 800030c:	0800d4b0 	.word	0x0800d4b0

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <strlen>:
 80003b0:	4603      	mov	r3, r0
 80003b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d1fb      	bne.n	80003b2 <strlen+0x2>
 80003ba:	1a18      	subs	r0, r3, r0
 80003bc:	3801      	subs	r0, #1
 80003be:	4770      	bx	lr

080003c0 <MX_DMA_Init>:
  */
void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80003c0:	4a30      	ldr	r2, [pc, #192]	; (8000484 <MX_DMA_Init+0xc4>)

  /* Configure DMA request hdma_memtomem_dma1_stream4 on DMA1_Stream4 */
  hdma_memtomem_dma1_stream4.Instance = DMA1_Stream4;
  hdma_memtomem_dma1_stream4.Init.Request = DMA_REQUEST_MEM2MEM;
 80003c2:	2300      	movs	r3, #0
  hdma_memtomem_dma1_stream4.Instance = DMA1_Stream4;
 80003c4:	4830      	ldr	r0, [pc, #192]	; (8000488 <MX_DMA_Init+0xc8>)
  __HAL_RCC_DMA1_CLK_ENABLE();
 80003c6:	f8d2 10d8 	ldr.w	r1, [r2, #216]	; 0xd8
 80003ca:	f041 0101 	orr.w	r1, r1, #1
{
 80003ce:	b510      	push	{r4, lr}
  hdma_memtomem_dma1_stream4.Init.Request = DMA_REQUEST_MEM2MEM;
 80003d0:	6043      	str	r3, [r0, #4]
{
 80003d2:	b082      	sub	sp, #8
  hdma_memtomem_dma1_stream4.Init.Direction = DMA_MEMORY_TO_MEMORY;
  hdma_memtomem_dma1_stream4.Init.PeriphInc = DMA_PINC_ENABLE;
  hdma_memtomem_dma1_stream4.Init.MemInc = DMA_MINC_DISABLE;
 80003d4:	6103      	str	r3, [r0, #16]
  hdma_memtomem_dma1_stream4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
  hdma_memtomem_dma1_stream4.Init.Mode = DMA_NORMAL;
  hdma_memtomem_dma1_stream4.Init.Priority = DMA_PRIORITY_LOW;
  hdma_memtomem_dma1_stream4.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
  hdma_memtomem_dma1_stream4.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
  hdma_memtomem_dma1_stream4.Init.MemBurst = DMA_MBURST_SINGLE;
 80003d6:	62c3      	str	r3, [r0, #44]	; 0x2c
  hdma_memtomem_dma1_stream4.Instance = DMA1_Stream4;
 80003d8:	4c2c      	ldr	r4, [pc, #176]	; (800048c <MX_DMA_Init+0xcc>)
  hdma_memtomem_dma1_stream4.Init.Priority = DMA_PRIORITY_LOW;
 80003da:	e9c0 3307 	strd	r3, r3, [r0, #28]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80003de:	f8c2 10d8 	str.w	r1, [r2, #216]	; 0xd8
  hdma_memtomem_dma1_stream4.Init.Direction = DMA_MEMORY_TO_MEMORY;
 80003e2:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_DMA1_CLK_ENABLE();
 80003e4:	f8d2 20d8 	ldr.w	r2, [r2, #216]	; 0xd8
  hdma_memtomem_dma1_stream4.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80003e8:	6303      	str	r3, [r0, #48]	; 0x30
  __HAL_RCC_DMA1_CLK_ENABLE();
 80003ea:	f002 0301 	and.w	r3, r2, #1
  hdma_memtomem_dma1_stream4.Init.PeriphInc = DMA_PINC_ENABLE;
 80003ee:	f44f 7200 	mov.w	r2, #512	; 0x200
  hdma_memtomem_dma1_stream4.Init.Direction = DMA_MEMORY_TO_MEMORY;
 80003f2:	6081      	str	r1, [r0, #8]
  hdma_memtomem_dma1_stream4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80003f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  __HAL_RCC_DMA1_CLK_ENABLE();
 80003f8:	9301      	str	r3, [sp, #4]
 80003fa:	9b01      	ldr	r3, [sp, #4]
  hdma_memtomem_dma1_stream4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80003fc:	f44f 6300 	mov.w	r3, #2048	; 0x800
  hdma_memtomem_dma1_stream4.Init.PeriphInc = DMA_PINC_ENABLE;
 8000400:	60c2      	str	r2, [r0, #12]
  hdma_memtomem_dma1_stream4.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000402:	2204      	movs	r2, #4
  hdma_memtomem_dma1_stream4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000404:	6143      	str	r3, [r0, #20]
  hdma_memtomem_dma1_stream4.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000406:	2303      	movs	r3, #3
  hdma_memtomem_dma1_stream4.Instance = DMA1_Stream4;
 8000408:	6004      	str	r4, [r0, #0]
  hdma_memtomem_dma1_stream4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800040a:	6181      	str	r1, [r0, #24]
  hdma_memtomem_dma1_stream4.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800040c:	e9c0 2309 	strd	r2, r3, [r0, #36]	; 0x24
  if (HAL_DMA_Init(&hdma_memtomem_dma1_stream4) != HAL_OK)
 8000410:	f001 fe92 	bl	8002138 <HAL_DMA_Init>
 8000414:	bb90      	cbnz	r0, 800047c <MX_DMA_Init+0xbc>
    Error_Handler();
  }

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000416:	2200      	movs	r2, #0
 8000418:	200b      	movs	r0, #11
 800041a:	4611      	mov	r1, r2
 800041c:	f001 fd48 	bl	8001eb0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000420:	200b      	movs	r0, #11
 8000422:	f001 fd83 	bl	8001f2c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000426:	2200      	movs	r2, #0
 8000428:	200c      	movs	r0, #12
 800042a:	4611      	mov	r1, r2
 800042c:	f001 fd40 	bl	8001eb0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000430:	200c      	movs	r0, #12
 8000432:	f001 fd7b 	bl	8001f2c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000436:	2200      	movs	r2, #0
 8000438:	200d      	movs	r0, #13
 800043a:	4611      	mov	r1, r2
 800043c:	f001 fd38 	bl	8001eb0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000440:	200d      	movs	r0, #13
 8000442:	f001 fd73 	bl	8001f2c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000446:	2200      	movs	r2, #0
 8000448:	200e      	movs	r0, #14
 800044a:	4611      	mov	r1, r2
 800044c:	f001 fd30 	bl	8001eb0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000450:	200e      	movs	r0, #14
 8000452:	f001 fd6b 	bl	8001f2c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000456:	2200      	movs	r2, #0
 8000458:	200f      	movs	r0, #15
 800045a:	4611      	mov	r1, r2
 800045c:	f001 fd28 	bl	8001eb0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000460:	200f      	movs	r0, #15
 8000462:	f001 fd63 	bl	8001f2c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000466:	2200      	movs	r2, #0
 8000468:	2010      	movs	r0, #16
 800046a:	4611      	mov	r1, r2
 800046c:	f001 fd20 	bl	8001eb0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000470:	2010      	movs	r0, #16

}
 8000472:	b002      	add	sp, #8
 8000474:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000478:	f001 bd58 	b.w	8001f2c <HAL_NVIC_EnableIRQ>
    Error_Handler();
 800047c:	f000 fda2 	bl	8000fc4 <Error_Handler>
 8000480:	e7c9      	b.n	8000416 <MX_DMA_Init+0x56>
 8000482:	bf00      	nop
 8000484:	58024400 	.word	0x58024400
 8000488:	240002e4 	.word	0x240002e4
 800048c:	40020070 	.word	0x40020070

08000490 <fir_set_up>:

#define FIR_CONFIG_DONE 0x01
#define FIR_PRELOAD_DONE 0x02
#define FIR_FILTER_DONE 0x04

void fir_set_up() {
 8000490:	b570      	push	{r4, r5, r6, lr}
 8000492:	b0ac      	sub	sp, #176	; 0xb0

	fir_flags = 0x00;
 8000494:	2600      	movs	r6, #0
 8000496:	4c15      	ldr	r4, [pc, #84]	; (80004ec <fir_set_up+0x5c>)

	q15_t q_coefficients[64];
	arm_float_to_q15(coefficients, q_coefficients, 64);
 8000498:	2240      	movs	r2, #64	; 0x40
 800049a:	ad0c      	add	r5, sp, #48	; 0x30
 800049c:	4814      	ldr	r0, [pc, #80]	; (80004f0 <fir_set_up+0x60>)
	fir_flags = 0x00;
 800049e:	7026      	strb	r6, [r4, #0]
	arm_float_to_q15(coefficients, q_coefficients, 64);
 80004a0:	4629      	mov	r1, r5
 80004a2:	f008 fce3 	bl	8008e6c <arm_float_to_q15>
			0 << FMAC_PARAM_Q_Pos
	);

	HAL_DMA_Start(&hdma_fmac_rd, (uint32_t)q_coefficients, FMAC->WDATA, 64);*/

	FMAC_FilterConfigTypeDef fir_config = {
 80004a6:	4631      	mov	r1, r6
 80004a8:	222c      	movs	r2, #44	; 0x2c
 80004aa:	a801      	add	r0, sp, #4
 80004ac:	f00b f821 	bl	800b4f2 <memset>
 80004b0:	f244 2340 	movw	r3, #16960	; 0x4240
 80004b4:	4a0f      	ldr	r2, [pc, #60]	; (80004f4 <fir_set_up+0x64>)
 80004b6:	2001      	movs	r0, #1
 80004b8:	f8ad 3004 	strh.w	r3, [sp, #4]
 80004bc:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80004c0:	9203      	str	r2, [sp, #12]
 80004c2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80004c6:	f8ad 3020 	strh.w	r3, [sp, #32]
 80004ca:	2341      	movs	r3, #65	; 0x41
 80004cc:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
			.R = 0,
			.pCoeffA = NULL,
			.pCoeffB = q_coefficients
	};

	HAL_FMAC_FilterConfig_DMA(&hfmac, &fir_config);
 80004d0:	a901      	add	r1, sp, #4
 80004d2:	4809      	ldr	r0, [pc, #36]	; (80004f8 <fir_set_up+0x68>)
	FMAC_FilterConfigTypeDef fir_config = {
 80004d4:	9507      	str	r5, [sp, #28]
 80004d6:	920a      	str	r2, [sp, #40]	; 0x28
 80004d8:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	HAL_FMAC_FilterConfig_DMA(&hfmac, &fir_config);
 80004dc:	f002 feac 	bl	8003238 <HAL_FMAC_FilterConfig_DMA>

	while(!(fir_flags & FIR_CONFIG_DONE));
 80004e0:	7823      	ldrb	r3, [r4, #0]
 80004e2:	07db      	lsls	r3, r3, #31
 80004e4:	d5fc      	bpl.n	80004e0 <fir_set_up+0x50>
}
 80004e6:	b02c      	add	sp, #176	; 0xb0
 80004e8:	bd70      	pop	{r4, r5, r6, pc}
 80004ea:	bf00      	nop
 80004ec:	2400035c 	.word	0x2400035c
 80004f0:	0800d4c8 	.word	0x0800d4c8
 80004f4:	42404000 	.word	0x42404000
 80004f8:	24000450 	.word	0x24000450

080004fc <HAL_FMAC_FilterConfigCallback>:

	while(!(fir_flags & FIR_FILTER_DONE));
}

void HAL_FMAC_FilterConfigCallback(FMAC_HandleTypeDef* _hfmac) {
	if (_hfmac == &hfmac) {
 80004fc:	4b04      	ldr	r3, [pc, #16]	; (8000510 <HAL_FMAC_FilterConfigCallback+0x14>)
 80004fe:	4283      	cmp	r3, r0
 8000500:	d000      	beq.n	8000504 <HAL_FMAC_FilterConfigCallback+0x8>
		fir_flags |= FIR_CONFIG_DONE;
	}
}
 8000502:	4770      	bx	lr
		fir_flags |= FIR_CONFIG_DONE;
 8000504:	4a03      	ldr	r2, [pc, #12]	; (8000514 <HAL_FMAC_FilterConfigCallback+0x18>)
 8000506:	7813      	ldrb	r3, [r2, #0]
 8000508:	f043 0301 	orr.w	r3, r3, #1
 800050c:	7013      	strb	r3, [r2, #0]
}
 800050e:	4770      	bx	lr
 8000510:	24000450 	.word	0x24000450
 8000514:	2400035c 	.word	0x2400035c

08000518 <MX_FMAC_Init>:
DMA_HandleTypeDef hdma_fmac_rd;
DMA_HandleTypeDef hdma_fmac_wr;

/* FMAC init function */
void MX_FMAC_Init(void)
{
 8000518:	b508      	push	{r3, lr}
  /* USER CODE END FMAC_Init 0 */

  /* USER CODE BEGIN FMAC_Init 1 */

  /* USER CODE END FMAC_Init 1 */
  hfmac.Instance = FMAC;
 800051a:	4805      	ldr	r0, [pc, #20]	; (8000530 <MX_FMAC_Init+0x18>)
 800051c:	4b05      	ldr	r3, [pc, #20]	; (8000534 <MX_FMAC_Init+0x1c>)
 800051e:	6003      	str	r3, [r0, #0]
  if (HAL_FMAC_Init(&hfmac) != HAL_OK)
 8000520:	f002 fe3e 	bl	80031a0 <HAL_FMAC_Init>
 8000524:	b900      	cbnz	r0, 8000528 <MX_FMAC_Init+0x10>
  }
  /* USER CODE BEGIN FMAC_Init 2 */

  /* USER CODE END FMAC_Init 2 */

}
 8000526:	bd08      	pop	{r3, pc}
 8000528:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800052c:	f000 bd4a 	b.w	8000fc4 <Error_Handler>
 8000530:	24000450 	.word	0x24000450
 8000534:	48024000 	.word	0x48024000

08000538 <HAL_FMAC_MspInit>:

void HAL_FMAC_MspInit(FMAC_HandleTypeDef* fmacHandle)
{

  if(fmacHandle->Instance==FMAC)
 8000538:	4b2b      	ldr	r3, [pc, #172]	; (80005e8 <HAL_FMAC_MspInit+0xb0>)
 800053a:	6802      	ldr	r2, [r0, #0]
 800053c:	429a      	cmp	r2, r3
 800053e:	d000      	beq.n	8000542 <HAL_FMAC_MspInit+0xa>
 8000540:	4770      	bx	lr
  {
  /* USER CODE BEGIN FMAC_MspInit 0 */

  /* USER CODE END FMAC_MspInit 0 */
    /* FMAC clock enable */
    __HAL_RCC_FMAC_CLK_ENABLE();
 8000542:	4a2a      	ldr	r2, [pc, #168]	; (80005ec <HAL_FMAC_MspInit+0xb4>)

    /* FMAC DMA Init */
    /* FMAC_RD Init */
    hdma_fmac_rd.Instance = DMA1_Stream0;
    hdma_fmac_rd.Init.Request = DMA_REQUEST_FMAC_READ;
    hdma_fmac_rd.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000544:	2300      	movs	r3, #0
    __HAL_RCC_FMAC_CLK_ENABLE();
 8000546:	f8d2 10dc 	ldr.w	r1, [r2, #220]	; 0xdc
{
 800054a:	b570      	push	{r4, r5, r6, lr}
    __HAL_RCC_FMAC_CLK_ENABLE();
 800054c:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
    hdma_fmac_rd.Instance = DMA1_Stream0;
 8000550:	4d27      	ldr	r5, [pc, #156]	; (80005f0 <HAL_FMAC_MspInit+0xb8>)
{
 8000552:	b082      	sub	sp, #8
 8000554:	4604      	mov	r4, r0
    hdma_fmac_rd.Instance = DMA1_Stream0;
 8000556:	4827      	ldr	r0, [pc, #156]	; (80005f4 <HAL_FMAC_MspInit+0xbc>)
    hdma_fmac_rd.Init.PeriphInc = DMA_PINC_DISABLE;
 8000558:	e9c5 3302 	strd	r3, r3, [r5, #8]
    __HAL_RCC_FMAC_CLK_ENABLE();
 800055c:	f8c2 10dc 	str.w	r1, [r2, #220]	; 0xdc
    hdma_fmac_rd.Init.Request = DMA_REQUEST_FMAC_READ;
 8000560:	2178      	movs	r1, #120	; 0x78
    __HAL_RCC_FMAC_CLK_ENABLE();
 8000562:	f8d2 20dc 	ldr.w	r2, [r2, #220]	; 0xdc
    hdma_fmac_rd.Init.Request = DMA_REQUEST_FMAC_READ;
 8000566:	6069      	str	r1, [r5, #4]
    hdma_fmac_rd.Init.MemInc = DMA_MINC_ENABLE;
 8000568:	f44f 6180 	mov.w	r1, #1024	; 0x400
    __HAL_RCC_FMAC_CLK_ENABLE();
 800056c:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
    hdma_fmac_rd.Instance = DMA1_Stream0;
 8000570:	6028      	str	r0, [r5, #0]
    hdma_fmac_rd.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
    hdma_fmac_rd.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    hdma_fmac_rd.Init.Mode = DMA_NORMAL;
 8000572:	61eb      	str	r3, [r5, #28]
    __HAL_RCC_FMAC_CLK_ENABLE();
 8000574:	9201      	str	r2, [sp, #4]
    hdma_fmac_rd.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000576:	f44f 6200 	mov.w	r2, #2048	; 0x800
    __HAL_RCC_FMAC_CLK_ENABLE();
 800057a:	9801      	ldr	r0, [sp, #4]
    hdma_fmac_rd.Init.Priority = DMA_PRIORITY_LOW;
    hdma_fmac_rd.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_fmac_rd) != HAL_OK)
 800057c:	4628      	mov	r0, r5
    hdma_fmac_rd.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800057e:	e9c5 1204 	strd	r1, r2, [r5, #16]
    hdma_fmac_rd.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000582:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    hdma_fmac_rd.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000586:	e9c5 3308 	strd	r3, r3, [r5, #32]
    hdma_fmac_rd.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800058a:	61aa      	str	r2, [r5, #24]
    if (HAL_DMA_Init(&hdma_fmac_rd) != HAL_OK)
 800058c:	f001 fdd4 	bl	8002138 <HAL_DMA_Init>
 8000590:	bb18      	cbnz	r0, 80005da <HAL_FMAC_MspInit+0xa2>
    }

    __HAL_LINKDMA(fmacHandle,hdmaIn,hdma_fmac_rd);

    /* FMAC_WR Init */
    hdma_fmac_wr.Instance = DMA1_Stream1;
 8000592:	4e19      	ldr	r6, [pc, #100]	; (80005f8 <HAL_FMAC_MspInit+0xc0>)
    hdma_fmac_wr.Init.Request = DMA_REQUEST_FMAC_WRITE;
    hdma_fmac_wr.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_fmac_wr.Init.PeriphInc = DMA_PINC_DISABLE;
 8000594:	2300      	movs	r3, #0
    hdma_fmac_wr.Instance = DMA1_Stream1;
 8000596:	4a19      	ldr	r2, [pc, #100]	; (80005fc <HAL_FMAC_MspInit+0xc4>)
    __HAL_LINKDMA(fmacHandle,hdmaIn,hdma_fmac_rd);
 8000598:	6265      	str	r5, [r4, #36]	; 0x24
    hdma_fmac_wr.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
    hdma_fmac_wr.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    hdma_fmac_wr.Init.Mode = DMA_NORMAL;
    hdma_fmac_wr.Init.Priority = DMA_PRIORITY_LOW;
    hdma_fmac_wr.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_fmac_wr) != HAL_OK)
 800059a:	4630      	mov	r0, r6
    hdma_fmac_wr.Instance = DMA1_Stream1;
 800059c:	6032      	str	r2, [r6, #0]
    hdma_fmac_wr.Init.Request = DMA_REQUEST_FMAC_WRITE;
 800059e:	2279      	movs	r2, #121	; 0x79
    hdma_fmac_wr.Init.PeriphInc = DMA_PINC_DISABLE;
 80005a0:	60f3      	str	r3, [r6, #12]
    hdma_fmac_wr.Init.Request = DMA_REQUEST_FMAC_WRITE;
 80005a2:	6072      	str	r2, [r6, #4]
    hdma_fmac_wr.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80005a4:	2240      	movs	r2, #64	; 0x40
    hdma_fmac_wr.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80005a6:	6273      	str	r3, [r6, #36]	; 0x24
    hdma_fmac_wr.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80005a8:	60b2      	str	r2, [r6, #8]
    hdma_fmac_wr.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80005aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
    __HAL_LINKDMA(fmacHandle,hdmaIn,hdma_fmac_rd);
 80005ae:	63ac      	str	r4, [r5, #56]	; 0x38
    hdma_fmac_wr.Init.Priority = DMA_PRIORITY_LOW;
 80005b0:	e9c6 3307 	strd	r3, r3, [r6, #28]
    hdma_fmac_wr.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80005b4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80005b8:	e9c6 2304 	strd	r2, r3, [r6, #16]
    hdma_fmac_wr.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80005bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005c0:	61b3      	str	r3, [r6, #24]
    if (HAL_DMA_Init(&hdma_fmac_wr) != HAL_OK)
 80005c2:	f001 fdb9 	bl	8002138 <HAL_DMA_Init>
 80005c6:	b958      	cbnz	r0, 80005e0 <HAL_FMAC_MspInit+0xa8>
  /* USER CODE BEGIN FMAC_MspInit 1 */

	/* Connect the DMA channel to the FMAC handle */
  __HAL_LINKDMA(fmacHandle,hdmaIn,hdma_fmac_wr);
  __HAL_LINKDMA(fmacHandle,hdmaOut,hdma_fmac_rd);
	__HAL_LINKDMA(fmacHandle,hdmaPreload,hdma_memtomem_dma1_stream4);
 80005c8:	4b0d      	ldr	r3, [pc, #52]	; (8000600 <HAL_FMAC_MspInit+0xc8>)
  __HAL_LINKDMA(fmacHandle,hdmaIn,hdma_fmac_wr);
 80005ca:	6266      	str	r6, [r4, #36]	; 0x24
 80005cc:	63b4      	str	r4, [r6, #56]	; 0x38
  __HAL_LINKDMA(fmacHandle,hdmaOut,hdma_fmac_rd);
 80005ce:	62a5      	str	r5, [r4, #40]	; 0x28
 80005d0:	63ac      	str	r4, [r5, #56]	; 0x38
	__HAL_LINKDMA(fmacHandle,hdmaPreload,hdma_memtomem_dma1_stream4);
 80005d2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80005d4:	639c      	str	r4, [r3, #56]	; 0x38

  /* USER CODE END FMAC_MspInit 1 */
  }
}
 80005d6:	b002      	add	sp, #8
 80005d8:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 80005da:	f000 fcf3 	bl	8000fc4 <Error_Handler>
 80005de:	e7d8      	b.n	8000592 <HAL_FMAC_MspInit+0x5a>
      Error_Handler();
 80005e0:	f000 fcf0 	bl	8000fc4 <Error_Handler>
 80005e4:	e7f0      	b.n	80005c8 <HAL_FMAC_MspInit+0x90>
 80005e6:	bf00      	nop
 80005e8:	48024000 	.word	0x48024000
 80005ec:	58024400 	.word	0x58024400
 80005f0:	24000360 	.word	0x24000360
 80005f4:	40020010 	.word	0x40020010
 80005f8:	240003d8 	.word	0x240003d8
 80005fc:	40020028 	.word	0x40020028
 8000600:	240002e4 	.word	0x240002e4

08000604 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000604:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000606:	4b1e      	ldr	r3, [pc, #120]	; (8000680 <MX_GPIO_Init+0x7c>)
{
 8000608:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800060a:	2400      	movs	r4, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ADC_RESET_Pin|LED_0_Pin, GPIO_PIN_RESET);
 800060c:	481d      	ldr	r0, [pc, #116]	; (8000684 <MX_GPIO_Init+0x80>)
 800060e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000612:	9406      	str	r4, [sp, #24]
 8000614:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8000618:	e9cd 4404 	strd	r4, r4, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800061c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000620:	f042 0201 	orr.w	r2, r2, #1
 8000624:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000628:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800062c:	f002 0201 	and.w	r2, r2, #1
 8000630:	9200      	str	r2, [sp, #0]
 8000632:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000634:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000638:	f042 0204 	orr.w	r2, r2, #4
 800063c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  HAL_GPIO_WritePin(GPIOC, ADC_RESET_Pin|LED_0_Pin, GPIO_PIN_RESET);
 8000640:	4622      	mov	r2, r4
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000642:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000646:	f003 0304 	and.w	r3, r3, #4
 800064a:	9301      	str	r3, [sp, #4]
 800064c:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_WritePin(GPIOC, ADC_RESET_Pin|LED_0_Pin, GPIO_PIN_RESET);
 800064e:	f002 fff1 	bl	8003634 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ADC_FRSTDATA_Pin;
 8000652:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000656:	2300      	movs	r3, #0
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(ADC_FRSTDATA_GPIO_Port, &GPIO_InitStruct);
 8000658:	a902      	add	r1, sp, #8
 800065a:	480a      	ldr	r0, [pc, #40]	; (8000684 <MX_GPIO_Init+0x80>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065c:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pin = ADC_FRSTDATA_Pin;
 800065e:	e9cd 2302 	strd	r2, r3, [sp, #8]
  HAL_GPIO_Init(ADC_FRSTDATA_GPIO_Port, &GPIO_InitStruct);
 8000662:	f002 febf 	bl	80033e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ADC_RESET_Pin|LED_0_Pin;
 8000666:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800066a:	2301      	movs	r3, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800066c:	a902      	add	r1, sp, #8
 800066e:	4805      	ldr	r0, [pc, #20]	; (8000684 <MX_GPIO_Init+0x80>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000670:	e9cd 2302 	strd	r2, r3, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000674:	e9cd 4404 	strd	r4, r4, [sp, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000678:	f002 feb4 	bl	80033e4 <HAL_GPIO_Init>

}
 800067c:	b008      	add	sp, #32
 800067e:	bd10      	pop	{r4, pc}
 8000680:	58024400 	.word	0x58024400
 8000684:	58020800 	.word	0x58020800

08000688 <DMA_TIM8_callback>:
  HAL_RCCEx_CRSConfig(&RCC_CRSInitStruct);
}

/* USER CODE BEGIN 4 */

void DMA_TIM8_callback(DMA_HandleTypeDef* hdma) {
 8000688:	b510      	push	{r4, lr}
	if (hdma == htim5.hdma[TIM_DMA_ID_CC1]) {
 800068a:	4c11      	ldr	r4, [pc, #68]	; (80006d0 <DMA_TIM8_callback+0x48>)
 800068c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800068e:	4283      	cmp	r3, r0
 8000690:	d000      	beq.n	8000694 <DMA_TIM8_callback+0xc>
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
		HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_1);
		HAL_TIM_PWM_Stop(&htim23, TIM_CHANNEL_1);
		HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_1);
	}
}
 8000692:	bd10      	pop	{r4, pc}
		adc_parallel_dma_flag = 1;
 8000694:	4b0f      	ldr	r3, [pc, #60]	; (80006d4 <DMA_TIM8_callback+0x4c>)
 8000696:	2201      	movs	r2, #1
		HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8000698:	2100      	movs	r1, #0
 800069a:	480f      	ldr	r0, [pc, #60]	; (80006d8 <DMA_TIM8_callback+0x50>)
		adc_parallel_dma_flag = 1;
 800069c:	701a      	strb	r2, [r3, #0]
		HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 800069e:	f005 fed9 	bl	8006454 <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);
 80006a2:	2100      	movs	r1, #0
 80006a4:	480d      	ldr	r0, [pc, #52]	; (80006dc <DMA_TIM8_callback+0x54>)
 80006a6:	f005 fed5 	bl	8006454 <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 80006aa:	2100      	movs	r1, #0
 80006ac:	480c      	ldr	r0, [pc, #48]	; (80006e0 <DMA_TIM8_callback+0x58>)
 80006ae:	f005 fed1 	bl	8006454 <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_1);
 80006b2:	2100      	movs	r1, #0
 80006b4:	480b      	ldr	r0, [pc, #44]	; (80006e4 <DMA_TIM8_callback+0x5c>)
 80006b6:	f005 fecd 	bl	8006454 <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(&htim23, TIM_CHANNEL_1);
 80006ba:	2100      	movs	r1, #0
 80006bc:	480a      	ldr	r0, [pc, #40]	; (80006e8 <DMA_TIM8_callback+0x60>)
 80006be:	f005 fec9 	bl	8006454 <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_1);
 80006c2:	4620      	mov	r0, r4
 80006c4:	2100      	movs	r1, #0
}
 80006c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_1);
 80006ca:	f005 bec3 	b.w	8006454 <HAL_TIM_PWM_Stop>
 80006ce:	bf00      	nop
 80006d0:	24000728 	.word	0x24000728
 80006d4:	24000488 	.word	0x24000488
 80006d8:	240005f8 	.word	0x240005f8
 80006dc:	240006dc 	.word	0x240006dc
 80006e0:	24000690 	.word	0x24000690
 80006e4:	24000774 	.word	0x24000774
 80006e8:	24000644 	.word	0x24000644

080006ec <SystemClock_Config>:
{
 80006ec:	b530      	push	{r4, r5, lr}
 80006ee:	b0a5      	sub	sp, #148	; 0x94
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006f0:	224c      	movs	r2, #76	; 0x4c
 80006f2:	2100      	movs	r1, #0
  RCC_CRSInitTypeDef RCC_CRSInitStruct = {0};
 80006f4:	2400      	movs	r4, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006f6:	a811      	add	r0, sp, #68	; 0x44
 80006f8:	f00a fefb 	bl	800b4f2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006fc:	2220      	movs	r2, #32
 80006fe:	2100      	movs	r1, #0
 8000700:	a809      	add	r0, sp, #36	; 0x24
 8000702:	f00a fef6 	bl	800b4f2 <memset>
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000706:	2002      	movs	r0, #2
  RCC_CRSInitTypeDef RCC_CRSInitStruct = {0};
 8000708:	e9cd 4402 	strd	r4, r4, [sp, #8]
 800070c:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8000710:	e9cd 4406 	strd	r4, r4, [sp, #24]
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000714:	f003 ff8e 	bl	8004634 <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000718:	4a2e      	ldr	r2, [pc, #184]	; (80007d4 <SystemClock_Config+0xe8>)
 800071a:	9400      	str	r4, [sp, #0]
 800071c:	6993      	ldr	r3, [r2, #24]
 800071e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000722:	6193      	str	r3, [r2, #24]
 8000724:	6993      	ldr	r3, [r2, #24]
 8000726:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800072a:	9300      	str	r3, [sp, #0]
 800072c:	9b00      	ldr	r3, [sp, #0]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800072e:	6993      	ldr	r3, [r2, #24]
 8000730:	049b      	lsls	r3, r3, #18
 8000732:	d5fc      	bpl.n	800072e <SystemClock_Config+0x42>
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000734:	2301      	movs	r3, #1
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8000736:	2222      	movs	r2, #34	; 0x22
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8000738:	2440      	movs	r4, #64	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800073a:	a811      	add	r0, sp, #68	; 0x44
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800073c:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800073e:	9317      	str	r3, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000740:	931e      	str	r3, [sp, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLFRACN = 3072;
 8000742:	f44f 6340 	mov.w	r3, #3072	; 0xc00
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8000746:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 34;
 8000748:	921d      	str	r2, [sp, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800074a:	220c      	movs	r2, #12
  RCC_OscInitStruct.PLL.PLLFRACN = 3072;
 800074c:	9323      	str	r3, [sp, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800074e:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000750:	9221      	str	r2, [sp, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000752:	2200      	movs	r2, #0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000754:	931a      	str	r3, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000756:	921b      	str	r2, [sp, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000758:	9222      	str	r2, [sp, #136]	; 0x88
  RCC_OscInitStruct.HSICalibrationValue = 64;
 800075a:	9415      	str	r4, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLR = 2;
 800075c:	e9cd 331f 	strd	r3, r3, [sp, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000760:	2304      	movs	r3, #4
 8000762:	931c      	str	r3, [sp, #112]	; 0x70
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000764:	f004 f818 	bl	8004798 <HAL_RCC_OscConfig>
 8000768:	4603      	mov	r3, r0
 800076a:	b108      	cbz	r0, 8000770 <SystemClock_Config+0x84>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800076c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800076e:	e7fe      	b.n	800076e <SystemClock_Config+0x82>
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000770:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000772:	2308      	movs	r3, #8
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000774:	223f      	movs	r2, #63	; 0x3f
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000776:	2103      	movs	r1, #3
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000778:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800077a:	f44f 6380 	mov.w	r3, #1024	; 0x400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800077e:	a809      	add	r0, sp, #36	; 0x24
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000780:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000782:	910a      	str	r1, [sp, #40]	; 0x28
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000784:	e9cd 340f 	strd	r3, r4, [sp, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000788:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800078c:	f004 fb52 	bl	8004e34 <HAL_RCC_ClockConfig>
 8000790:	4603      	mov	r3, r0
 8000792:	b108      	cbz	r0, 8000798 <SystemClock_Config+0xac>
 8000794:	b672      	cpsid	i
  while (1)
 8000796:	e7fe      	b.n	8000796 <SystemClock_Config+0xaa>
  __HAL_RCC_CRS_CLK_ENABLE();
 8000798:	4a0f      	ldr	r2, [pc, #60]	; (80007d8 <SystemClock_Config+0xec>)
  RCC_CRSInitStruct.Source = RCC_CRS_SYNC_SOURCE_USB2;
 800079a:	f04f 5540 	mov.w	r5, #805306368	; 0x30000000
  RCC_CRSInitStruct.ReloadValue = __HAL_RCC_CRS_RELOADVALUE_CALCULATE(48000000,1000);
 800079e:	f64b 347f 	movw	r4, #47999	; 0xbb7f
  HAL_RCCEx_CRSConfig(&RCC_CRSInitStruct);
 80007a2:	a802      	add	r0, sp, #8
  __HAL_RCC_CRS_CLK_ENABLE();
 80007a4:	f8d2 10ec 	ldr.w	r1, [r2, #236]	; 0xec
 80007a8:	f041 0102 	orr.w	r1, r1, #2
 80007ac:	f8c2 10ec 	str.w	r1, [r2, #236]	; 0xec
 80007b0:	f8d2 20ec 	ldr.w	r2, [r2, #236]	; 0xec
  RCC_CRSInitStruct.Polarity = RCC_CRS_SYNC_POLARITY_RISING;
 80007b4:	9304      	str	r3, [sp, #16]
  __HAL_RCC_CRS_CLK_ENABLE();
 80007b6:	f002 0202 	and.w	r2, r2, #2
  RCC_CRSInitStruct.ReloadValue = __HAL_RCC_CRS_RELOADVALUE_CALCULATE(48000000,1000);
 80007ba:	9405      	str	r4, [sp, #20]
  __HAL_RCC_CRS_CLK_ENABLE();
 80007bc:	9201      	str	r2, [sp, #4]
  RCC_CRSInitStruct.ErrorLimitValue = 34;
 80007be:	2222      	movs	r2, #34	; 0x22
  __HAL_RCC_CRS_CLK_ENABLE();
 80007c0:	9901      	ldr	r1, [sp, #4]
  RCC_CRSInitStruct.Prescaler = RCC_CRS_SYNC_DIV1;
 80007c2:	e9cd 3502 	strd	r3, r5, [sp, #8]
  RCC_CRSInitStruct.ErrorLimitValue = 34;
 80007c6:	2320      	movs	r3, #32
 80007c8:	e9cd 2306 	strd	r2, r3, [sp, #24]
  HAL_RCCEx_CRSConfig(&RCC_CRSInitStruct);
 80007cc:	f005 fb42 	bl	8005e54 <HAL_RCCEx_CRSConfig>
}
 80007d0:	b025      	add	sp, #148	; 0x94
 80007d2:	bd30      	pop	{r4, r5, pc}
 80007d4:	58024800 	.word	0x58024800
 80007d8:	58024400 	.word	0x58024400
 80007dc:	00000000 	.word	0x00000000

080007e0 <main>:
	__HAL_RCC_D2SRAM2_CLK_ENABLE();
 80007e0:	4b3d      	ldr	r3, [pc, #244]	; (80008d8 <main+0xf8>)
 80007e2:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
{
 80007e6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__HAL_RCC_D2SRAM2_CLK_ENABLE();
 80007ea:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
		oversampled[i] = (uint16_t*)(D1_DTCMRAM_BASE + 8*1024*2*i);
 80007ee:	f04f 5600 	mov.w	r6, #536870912	; 0x20000000
 80007f2:	4f3a      	ldr	r7, [pc, #232]	; (80008dc <main+0xfc>)
{
 80007f4:	ed2d 8b02 	vpush	{d8}
 80007f8:	f5ad 4d88 	sub.w	sp, sp, #17408	; 0x4400
	__HAL_RCC_D2SRAM2_CLK_ENABLE();
 80007fc:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 8000800:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
{
 8000804:	b091      	sub	sp, #68	; 0x44
	__HAL_RCC_D2SRAM2_CLK_ENABLE();
 8000806:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800080a:	a90b      	add	r1, sp, #44	; 0x2c
		state[i] = 0;
 800080c:	acd0      	add	r4, sp, #832	; 0x340
	__HAL_RCC_D2SRAM2_CLK_ENABLE();
 800080e:	600b      	str	r3, [r1, #0]
			i_R[i][j] = count++;
 8000810:	ad48      	add	r5, sp, #288	; 0x120
	__HAL_RCC_D2SRAM2_CLK_ENABLE();
 8000812:	680b      	ldr	r3, [r1, #0]
  HAL_Init();
 8000814:	f001 fae0 	bl	8001dd8 <HAL_Init>
  SystemClock_Config();
 8000818:	f7ff ff68 	bl	80006ec <SystemClock_Config>
  MX_GPIO_Init();
 800081c:	f7ff fef2 	bl	8000604 <MX_GPIO_Init>
  MX_DMA_Init();
 8000820:	f7ff fdce 	bl	80003c0 <MX_DMA_Init>
  MX_TIM4_Init();
 8000824:	f000 fee0 	bl	80015e8 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000828:	f000 ff26 	bl	8001678 <MX_TIM5_Init>
  MX_TIM8_Init();
 800082c:	f001 f9dc 	bl	8001be8 <MX_TIM8_Init>
  MX_USB_DEVICE_Init();
 8000830:	f007 ffca 	bl	80087c8 <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 8000834:	f000 fe28 	bl	8001488 <MX_TIM2_Init>
  MX_FMAC_Init();
 8000838:	f7ff fe6e 	bl	8000518 <MX_FMAC_Init>
  MX_TIM3_Init();
 800083c:	f001 f95c 	bl	8001af8 <MX_TIM3_Init>
  MX_TIM23_Init();
 8000840:	f000 ff8a 	bl	8001758 <MX_TIM23_Init>
	volatile uint16_t* buffer_0 = malloc(8*8*1024*2);
 8000844:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000848:	f00a f852 	bl	800a8f0 <malloc>
 800084c:	4603      	mov	r3, r0
	volatile uint16_t* buffer_1 = malloc(8*8*1024*2);
 800084e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
	volatile uint16_t* buffer_0 = malloc(8*8*1024*2);
 8000852:	9308      	str	r3, [sp, #32]
	volatile uint16_t* buffer_1 = malloc(8*8*1024*2);
 8000854:	f00a f84c 	bl	800a8f0 <malloc>
  arm_rfft_fast_init_f32(&fft, 1024);
 8000858:	f44f 6180 	mov.w	r1, #1024	; 0x400
	volatile uint16_t* buffer_1 = malloc(8*8*1024*2);
 800085c:	9009      	str	r0, [sp, #36]	; 0x24
  arm_rfft_fast_init_f32(&fft, 1024);
 800085e:	a812      	add	r0, sp, #72	; 0x48
 8000860:	f008 fc82 	bl	8009168 <arm_rfft_fast_init_f32>
		state[i] = 0;
 8000864:	f44f 4282 	mov.w	r2, #16640	; 0x4100
 8000868:	2100      	movs	r1, #0
 800086a:	4620      	mov	r0, r4
 800086c:	f00a fe41 	bl	800b4f2 <memset>
	arm_float_to_q15(coefficients, q_coefficients, 64);
 8000870:	2240      	movs	r2, #64	; 0x40
 8000872:	a990      	add	r1, sp, #576	; 0x240
 8000874:	481a      	ldr	r0, [pc, #104]	; (80008e0 <main+0x100>)
 8000876:	f008 faf9 	bl	8008e6c <arm_float_to_q15>
	arm_fir_decimate_init_q15(&fir, 64, 8, q_coefficients, state, 1024);
 800087a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800087e:	ab90      	add	r3, sp, #576	; 0x240
 8000880:	2140      	movs	r1, #64	; 0x40
 8000882:	9400      	str	r4, [sp, #0]
 8000884:	a80f      	add	r0, sp, #60	; 0x3c
 8000886:	9201      	str	r2, [sp, #4]
 8000888:	2208      	movs	r2, #8
 800088a:	f009 faad 	bl	8009de8 <arm_fir_decimate_init_q15>
		for (int j = i+1;  j < 8; j++) {
 800088e:	2401      	movs	r4, #1
	fir_set_up();
 8000890:	f7ff fdfe 	bl	8000490 <fir_set_up>
		oversampled[i] = (uint16_t*)(D1_DTCMRAM_BASE + 8*1024*2*i);
 8000894:	2200      	movs	r2, #0
		for (int j = i+1;  j < 8; j++) {
 8000896:	4623      	mov	r3, r4
 8000898:	4610      	mov	r0, r2
		oversampled[i] = (uint16_t*)(D1_DTCMRAM_BASE + 8*1024*2*i);
 800089a:	e9cd 6718 	strd	r6, r7, [sp, #96]	; 0x60
 800089e:	a708      	add	r7, pc, #32	; (adr r7, 80008c0 <main+0xe0>)
 80008a0:	e9d7 6700 	ldrd	r6, r7, [r7]
 80008a4:	e9cd 671a 	strd	r6, r7, [sp, #104]	; 0x68
 80008a8:	a707      	add	r7, pc, #28	; (adr r7, 80008c8 <main+0xe8>)
 80008aa:	e9d7 6700 	ldrd	r6, r7, [r7]
 80008ae:	e9cd 671c 	strd	r6, r7, [sp, #112]	; 0x70
 80008b2:	a707      	add	r7, pc, #28	; (adr r7, 80008d0 <main+0xf0>)
 80008b4:	e9d7 6700 	ldrd	r6, r7, [r7]
 80008b8:	e9cd 671e 	strd	r6, r7, [sp, #120]	; 0x78
		for (int j = i+1;  j < 8; j++) {
 80008bc:	e013      	b.n	80008e6 <main+0x106>
 80008be:	bf00      	nop
 80008c0:	20008000 	.word	0x20008000
 80008c4:	2000c000 	.word	0x2000c000
 80008c8:	20010000 	.word	0x20010000
 80008cc:	20014000 	.word	0x20014000
 80008d0:	20018000 	.word	0x20018000
 80008d4:	2001c000 	.word	0x2001c000
 80008d8:	58024400 	.word	0x58024400
 80008dc:	20004000 	.word	0x20004000
 80008e0:	0800d4c8 	.word	0x0800d4c8
 80008e4:	3201      	adds	r2, #1
			i_R[i][j] = count++;
 80008e6:	1829      	adds	r1, r5, r0
 80008e8:	54ca      	strb	r2, [r1, r3]
		for (int j = i+1;  j < 8; j++) {
 80008ea:	3301      	adds	r3, #1
 80008ec:	2b08      	cmp	r3, #8
 80008ee:	d1f9      	bne.n	80008e4 <main+0x104>
 80008f0:	1c63      	adds	r3, r4, #1
 80008f2:	2c07      	cmp	r4, #7
 80008f4:	ea4f 00c4 	mov.w	r0, r4, lsl #3
 80008f8:	461c      	mov	r4, r3
 80008fa:	d1f3      	bne.n	80008e4 <main+0x104>
	adc_parallel_dma_flag = 0;
 80008fc:	4ba4      	ldr	r3, [pc, #656]	; (8000b90 <main+0x3b0>)
 80008fe:	f04f 0100 	mov.w	r1, #0
  CLEAR_BIT(TIM8->CR1, TIM_CR1_ARPE);
 8000902:	4aa4      	ldr	r2, [pc, #656]	; (8000b94 <main+0x3b4>)
	adc_parallel_dma_flag = 0;
 8000904:	7019      	strb	r1, [r3, #0]
	tau[0] = tau_table_0;
 8000906:	ab58      	add	r3, sp, #352	; 0x160
 8000908:	48a3      	ldr	r0, [pc, #652]	; (8000b98 <main+0x3b8>)
  CLEAR_BIT(TIM8->CR1, TIM_CR1_ARPE);
 800090a:	6811      	ldr	r1, [r2, #0]
	tau[0] = tau_table_0;
 800090c:	6018      	str	r0, [r3, #0]
	tau[1] = tau_table_1;
 800090e:	48a3      	ldr	r0, [pc, #652]	; (8000b9c <main+0x3bc>)
  CLEAR_BIT(TIM8->CR1, TIM_CR1_ARPE);
 8000910:	f021 0180 	bic.w	r1, r1, #128	; 0x80
	__HAL_TIM_ENABLE_DMA(&htim5, TIM_DMA_CC1);
 8000914:	4da2      	ldr	r5, [pc, #648]	; (8000ba0 <main+0x3c0>)
	tau[1] = tau_table_1;
 8000916:	6058      	str	r0, [r3, #4]
	tau[2] = tau_table_2;
 8000918:	48a2      	ldr	r0, [pc, #648]	; (8000ba4 <main+0x3c4>)
	htim5.hdma[TIM_DMA_ID_CC1]->XferCpltCallback = DMA_TIM8_callback;
 800091a:	4ca3      	ldr	r4, [pc, #652]	; (8000ba8 <main+0x3c8>)
	tau[2] = tau_table_2;
 800091c:	6098      	str	r0, [r3, #8]
	tau[3] = tau_table_3;
 800091e:	48a3      	ldr	r0, [pc, #652]	; (8000bac <main+0x3cc>)
  		for (int32_t i = 0; i < 8*1024; i ++) {
 8000920:	f8df 8334 	ldr.w	r8, [pc, #820]	; 8000c58 <main+0x478>
	tau[3] = tau_table_3;
 8000924:	60d8      	str	r0, [r3, #12]
	tau[4] = tau_table_4;
 8000926:	48a2      	ldr	r0, [pc, #648]	; (8000bb0 <main+0x3d0>)
 8000928:	6118      	str	r0, [r3, #16]
	tau[5] = tau_table_5;
 800092a:	48a2      	ldr	r0, [pc, #648]	; (8000bb4 <main+0x3d4>)
 800092c:	6158      	str	r0, [r3, #20]
	tau[6] = tau_table_6;
 800092e:	48a2      	ldr	r0, [pc, #648]	; (8000bb8 <main+0x3d8>)
 8000930:	6198      	str	r0, [r3, #24]
	tau[7] = tau_table_7;
 8000932:	48a2      	ldr	r0, [pc, #648]	; (8000bbc <main+0x3dc>)
 8000934:	61d8      	str	r0, [r3, #28]
	tau[8] = tau_table_8;
 8000936:	48a2      	ldr	r0, [pc, #648]	; (8000bc0 <main+0x3e0>)
 8000938:	6218      	str	r0, [r3, #32]
	tau[9] = tau_table_9;
 800093a:	48a2      	ldr	r0, [pc, #648]	; (8000bc4 <main+0x3e4>)
 800093c:	6258      	str	r0, [r3, #36]	; 0x24
	tau[10] = tau_table_10;
 800093e:	48a2      	ldr	r0, [pc, #648]	; (8000bc8 <main+0x3e8>)
 8000940:	6298      	str	r0, [r3, #40]	; 0x28
	tau[11] = tau_table_11;
 8000942:	48a2      	ldr	r0, [pc, #648]	; (8000bcc <main+0x3ec>)
 8000944:	62d8      	str	r0, [r3, #44]	; 0x2c
	tau[12] = tau_table_12;
 8000946:	48a2      	ldr	r0, [pc, #648]	; (8000bd0 <main+0x3f0>)
 8000948:	6318      	str	r0, [r3, #48]	; 0x30
	tau[13] = tau_table_13;
 800094a:	48a2      	ldr	r0, [pc, #648]	; (8000bd4 <main+0x3f4>)
 800094c:	6358      	str	r0, [r3, #52]	; 0x34
	tau[14] = tau_table_14;
 800094e:	48a2      	ldr	r0, [pc, #648]	; (8000bd8 <main+0x3f8>)
 8000950:	6398      	str	r0, [r3, #56]	; 0x38
	tau[15] = tau_table_15;
 8000952:	48a2      	ldr	r0, [pc, #648]	; (8000bdc <main+0x3fc>)
 8000954:	63d8      	str	r0, [r3, #60]	; 0x3c
	tau[16] = tau_table_16;
 8000956:	48a2      	ldr	r0, [pc, #648]	; (8000be0 <main+0x400>)
 8000958:	6418      	str	r0, [r3, #64]	; 0x40
	tau[17] = tau_table_17;
 800095a:	48a2      	ldr	r0, [pc, #648]	; (8000be4 <main+0x404>)
 800095c:	6458      	str	r0, [r3, #68]	; 0x44
	tau[18] = tau_table_18;
 800095e:	48a2      	ldr	r0, [pc, #648]	; (8000be8 <main+0x408>)
 8000960:	6498      	str	r0, [r3, #72]	; 0x48
	tau[19] = tau_table_19;
 8000962:	48a2      	ldr	r0, [pc, #648]	; (8000bec <main+0x40c>)
 8000964:	64d8      	str	r0, [r3, #76]	; 0x4c
	tau[20] = tau_table_20;
 8000966:	48a2      	ldr	r0, [pc, #648]	; (8000bf0 <main+0x410>)
 8000968:	6518      	str	r0, [r3, #80]	; 0x50
	tau[21] = tau_table_21;
 800096a:	48a2      	ldr	r0, [pc, #648]	; (8000bf4 <main+0x414>)
 800096c:	6558      	str	r0, [r3, #84]	; 0x54
	tau[22] = tau_table_22;
 800096e:	48a2      	ldr	r0, [pc, #648]	; (8000bf8 <main+0x418>)
 8000970:	6598      	str	r0, [r3, #88]	; 0x58
	tau[23] = tau_table_23;
 8000972:	48a2      	ldr	r0, [pc, #648]	; (8000bfc <main+0x41c>)
 8000974:	65d8      	str	r0, [r3, #92]	; 0x5c
	tau[24] = tau_table_24;
 8000976:	48a2      	ldr	r0, [pc, #648]	; (8000c00 <main+0x420>)
 8000978:	6618      	str	r0, [r3, #96]	; 0x60
	tau[25] = tau_table_25;
 800097a:	48a2      	ldr	r0, [pc, #648]	; (8000c04 <main+0x424>)
 800097c:	6658      	str	r0, [r3, #100]	; 0x64
	tau[26] = tau_table_26;
 800097e:	48a2      	ldr	r0, [pc, #648]	; (8000c08 <main+0x428>)
 8000980:	6698      	str	r0, [r3, #104]	; 0x68
	tau[27] = tau_table_27;
 8000982:	48a2      	ldr	r0, [pc, #648]	; (8000c0c <main+0x42c>)
 8000984:	66d8      	str	r0, [r3, #108]	; 0x6c
	TIM8->ARR = 53; //27
 8000986:	2335      	movs	r3, #53	; 0x35
  CLEAR_BIT(TIM8->CR1, TIM_CR1_ARPE);
 8000988:	6011      	str	r1, [r2, #0]
	HAL_GPIO_WritePin(ADC_RESET_GPIO_Port, ADC_RESET_Pin, GPIO_PIN_SET);
 800098a:	f44f 7100 	mov.w	r1, #512	; 0x200
	TIM8->ARR = 53; //27
 800098e:	62d3      	str	r3, [r2, #44]	; 0x2c
	TIM8->CCR1 = 40; //14
 8000990:	2328      	movs	r3, #40	; 0x28
	HAL_GPIO_WritePin(ADC_RESET_GPIO_Port, ADC_RESET_Pin, GPIO_PIN_SET);
 8000992:	489f      	ldr	r0, [pc, #636]	; (8000c10 <main+0x430>)
	TIM8->CCR1 = 40; //14
 8000994:	6353      	str	r3, [r2, #52]	; 0x34
	TIM8->RCR = 7;
 8000996:	2307      	movs	r3, #7
 8000998:	6313      	str	r3, [r2, #48]	; 0x30
	SET_BIT(TIM8->CR1, TIM_CR1_ARPE);
 800099a:	6813      	ldr	r3, [r2, #0]
 800099c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009a0:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(ADC_RESET_GPIO_Port, ADC_RESET_Pin, GPIO_PIN_SET);
 80009a2:	2201      	movs	r2, #1
 80009a4:	f002 fe46 	bl	8003634 <HAL_GPIO_WritePin>
	HAL_Delay(1); // > 3 us
 80009a8:	2001      	movs	r0, #1
 80009aa:	f001 fa57 	bl	8001e5c <HAL_Delay>
	HAL_GPIO_WritePin(ADC_RESET_GPIO_Port, ADC_RESET_Pin, GPIO_PIN_RESET);
 80009ae:	2200      	movs	r2, #0
 80009b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009b4:	4896      	ldr	r0, [pc, #600]	; (8000c10 <main+0x430>)
 80009b6:	f002 fe3d 	bl	8003634 <HAL_GPIO_WritePin>
	HAL_Delay(1); // > 253 us
 80009ba:	2001      	movs	r0, #1
 80009bc:	f001 fa4e 	bl	8001e5c <HAL_Delay>
	RCC->AHB4ENR |= RCC_AHB4ENR_GPIODEN;
 80009c0:	4a94      	ldr	r2, [pc, #592]	; (8000c14 <main+0x434>)
	WRITE_REG(GPIOD->MODER, 0x00000000UL);
 80009c2:	4995      	ldr	r1, [pc, #596]	; (8000c18 <main+0x438>)
	RCC->AHB4ENR |= RCC_AHB4ENR_GPIODEN;
 80009c4:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
	htim5.hdma[TIM_DMA_ID_CC1]->XferCpltCallback = DMA_TIM8_callback;
 80009c8:	6a68      	ldr	r0, [r5, #36]	; 0x24
	RCC->AHB4ENR |= RCC_AHB4ENR_GPIODEN;
 80009ca:	f043 0308 	orr.w	r3, r3, #8
 80009ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	WRITE_REG(GPIOD->MODER, 0x00000000UL);
 80009d2:	2300      	movs	r3, #0
	__HAL_TIM_ENABLE_DMA(&htim5, TIM_DMA_CC1);
 80009d4:	682a      	ldr	r2, [r5, #0]
	WRITE_REG(GPIOD->MODER, 0x00000000UL);
 80009d6:	600b      	str	r3, [r1, #0]
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 80009d8:	4619      	mov	r1, r3
	__HAL_TIM_ENABLE_DMA(&htim5, TIM_DMA_CC1);
 80009da:	68d3      	ldr	r3, [r2, #12]
 80009dc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009e0:	60d3      	str	r3, [r2, #12]
	htim5.hdma[TIM_DMA_ID_CC1]->XferCpltCallback = DMA_TIM8_callback;
 80009e2:	63c4      	str	r4, [r0, #60]	; 0x3c
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 80009e4:	4628      	mov	r0, r5
 80009e6:	f005 fc71 	bl	80062cc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim23, TIM_CHANNEL_1);
 80009ea:	2100      	movs	r1, #0
 80009ec:	488b      	ldr	r0, [pc, #556]	; (8000c1c <main+0x43c>)
 80009ee:	f005 fc6d 	bl	80062cc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 80009f2:	2100      	movs	r1, #0
 80009f4:	488a      	ldr	r0, [pc, #552]	; (8000c20 <main+0x440>)
 80009f6:	f005 fc69 	bl	80062cc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80009fa:	2100      	movs	r1, #0
 80009fc:	4889      	ldr	r0, [pc, #548]	; (8000c24 <main+0x444>)
 80009fe:	f005 fc65 	bl	80062cc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000a02:	2100      	movs	r1, #0
 8000a04:	4888      	ldr	r0, [pc, #544]	; (8000c28 <main+0x448>)
 8000a06:	f005 fc61 	bl	80062cc <HAL_TIM_PWM_Start>
	HAL_DMA_Start_IT(htim5.hdma[TIM_DMA_ID_CC1], (uint32_t)&GPIOD->IDR + 0, (uint32_t)filling_buffer, 1024*8*8-1);
 8000a0a:	9c08      	ldr	r4, [sp, #32]
 8000a0c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a10:	4986      	ldr	r1, [pc, #536]	; (8000c2c <main+0x44c>)
 8000a12:	4622      	mov	r2, r4
 8000a14:	6a68      	ldr	r0, [r5, #36]	; 0x24
  		SET_TEST();
 8000a16:	4d7e      	ldr	r5, [pc, #504]	; (8000c10 <main+0x430>)
	HAL_DMA_Start_IT(htim5.hdma[TIM_DMA_ID_CC1], (uint32_t)&GPIOD->IDR + 0, (uint32_t)filling_buffer, 1024*8*8-1);
 8000a18:	f001 fe12 	bl	8002640 <HAL_DMA_Start_IT>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	4884      	ldr	r0, [pc, #528]	; (8000c30 <main+0x450>)
 8000a20:	f005 fc54 	bl	80062cc <HAL_TIM_PWM_Start>
	volatile uint16_t* buffer_0 = malloc(8*8*1024*2);
 8000a24:	9406      	str	r4, [sp, #24]
				decimated[i] = (q15_t*)(D3_SRAM_BASE + 0x00000000 + 1024*2*i);
 8000a26:	ed9f 8b56 	vldr	d8, [pc, #344]	; 8000b80 <main+0x3a0>
  	if (adc_parallel_dma_flag == 1) {
 8000a2a:	4b59      	ldr	r3, [pc, #356]	; (8000b90 <main+0x3b0>)
 8000a2c:	781b      	ldrb	r3, [r3, #0]
 8000a2e:	2b01      	cmp	r3, #1
 8000a30:	d1fb      	bne.n	8000a2a <main+0x24a>
			char str[128] = "";
 8000a32:	2300      	movs	r3, #0
 8000a34:	a8b0      	add	r0, sp, #704	; 0x2c0
 8000a36:	227c      	movs	r2, #124	; 0x7c
 8000a38:	4619      	mov	r1, r3
 8000a3a:	f840 3b04 	str.w	r3, [r0], #4
 8000a3e:	f00a fd58 	bl	800b4f2 <memset>
  		adc_parallel_dma_flag = 0;
 8000a42:	4b53      	ldr	r3, [pc, #332]	; (8000b90 <main+0x3b0>)
 8000a44:	f04f 0200 	mov.w	r2, #0
 8000a48:	701a      	strb	r2, [r3, #0]
  		if (filling_buffer == buffer_0) {
 8000a4a:	9b06      	ldr	r3, [sp, #24]
 8000a4c:	9a08      	ldr	r2, [sp, #32]
 8000a4e:	4293      	cmp	r3, r2
 8000a50:	f000 827f 	beq.w	8000f52 <main+0x772>
 8000a54:	461a      	mov	r2, r3
  		} else if (filling_buffer == buffer_1) {
 8000a56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000a58:	429a      	cmp	r2, r3
 8000a5a:	f000 8280 	beq.w	8000f5e <main+0x77e>
  		SET_TEST();
 8000a5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a62:	9207      	str	r2, [sp, #28]
  		HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8000a64:	2100      	movs	r1, #0
 8000a66:	484e      	ldr	r0, [pc, #312]	; (8000ba0 <main+0x3c0>)
  		SET_TEST();
 8000a68:	61ab      	str	r3, [r5, #24]
  		HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8000a6a:	f005 fc2f 	bl	80062cc <HAL_TIM_PWM_Start>
  		HAL_TIM_PWM_Start(&htim23, TIM_CHANNEL_1);
 8000a6e:	2100      	movs	r1, #0
 8000a70:	486a      	ldr	r0, [pc, #424]	; (8000c1c <main+0x43c>)
 8000a72:	f005 fc2b 	bl	80062cc <HAL_TIM_PWM_Start>
			HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8000a76:	2100      	movs	r1, #0
 8000a78:	4869      	ldr	r0, [pc, #420]	; (8000c20 <main+0x440>)
 8000a7a:	f005 fc27 	bl	80062cc <HAL_TIM_PWM_Start>
  		HAL_DMA_Abort_IT(htim5.hdma[TIM_DMA_ID_CC1]);
 8000a7e:	4c48      	ldr	r4, [pc, #288]	; (8000ba0 <main+0x3c0>)
			HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000a80:	2100      	movs	r1, #0
 8000a82:	4868      	ldr	r0, [pc, #416]	; (8000c24 <main+0x444>)
 8000a84:	f005 fc22 	bl	80062cc <HAL_TIM_PWM_Start>
			HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000a88:	2100      	movs	r1, #0
 8000a8a:	4867      	ldr	r0, [pc, #412]	; (8000c28 <main+0x448>)
 8000a8c:	f005 fc1e 	bl	80062cc <HAL_TIM_PWM_Start>
  		HAL_DMA_Abort_IT(htim5.hdma[TIM_DMA_ID_CC1]);
 8000a90:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8000a92:	f001 ff6d 	bl	8002970 <HAL_DMA_Abort_IT>
  		HAL_DMA_Start_IT(htim5.hdma[TIM_DMA_ID_CC1], (uint32_t)&GPIOD->IDR + 0, (uint32_t)filling_buffer, 1024*8*8-1);
 8000a96:	9a07      	ldr	r2, [sp, #28]
 8000a98:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a9c:	4963      	ldr	r1, [pc, #396]	; (8000c2c <main+0x44c>)
 8000a9e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8000aa0:	f001 fdce 	bl	8002640 <HAL_DMA_Start_IT>
			HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	4862      	ldr	r0, [pc, #392]	; (8000c30 <main+0x450>)
 8000aa8:	f005 fc10 	bl	80062cc <HAL_TIM_PWM_Start>
  		RESET_TEST();
 8000aac:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  		for (int32_t i = 0; i < 8*1024; i ++) {
 8000ab0:	4860      	ldr	r0, [pc, #384]	; (8000c34 <main+0x454>)
  		RESET_TEST();
 8000ab2:	61ab      	str	r3, [r5, #24]
  		SET_TEST();
 8000ab4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ab8:	61ab      	str	r3, [r5, #24]
  		for (int32_t i = 0; i < 8*1024; i ++) {
 8000aba:	9b05      	ldr	r3, [sp, #20]
 8000abc:	1c9a      	adds	r2, r3, #2
  		SET_TEST();
 8000abe:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
  			oversampled[0][i] = working_buffer[i*8 + 0 + DEINTERLEAVING_OFFSET];
 8000ac2:	f832 1b10 	ldrh.w	r1, [r2], #16
 8000ac6:	f823 1b02 	strh.w	r1, [r3], #2
  		for (int32_t i = 0; i < 8*1024; i ++) {
 8000aca:	4283      	cmp	r3, r0
 8000acc:	d1f9      	bne.n	8000ac2 <main+0x2e2>
 8000ace:	9a05      	ldr	r2, [sp, #20]
  		for (int32_t i = 0; i < 8*1024; i ++) {
 8000ad0:	4859      	ldr	r0, [pc, #356]	; (8000c38 <main+0x458>)
 8000ad2:	3204      	adds	r2, #4
				oversampled[1][i] = working_buffer[i*8 + 1 + DEINTERLEAVING_OFFSET];
 8000ad4:	f832 1b10 	ldrh.w	r1, [r2], #16
 8000ad8:	f823 1b02 	strh.w	r1, [r3], #2
  		for (int32_t i = 0; i < 8*1024; i ++) {
 8000adc:	4283      	cmp	r3, r0
 8000ade:	d1f9      	bne.n	8000ad4 <main+0x2f4>
 8000ae0:	9a05      	ldr	r2, [sp, #20]
  		for (int32_t i = 0; i < 8*1024; i ++) {
 8000ae2:	4856      	ldr	r0, [pc, #344]	; (8000c3c <main+0x45c>)
 8000ae4:	3206      	adds	r2, #6
				oversampled[2][i] = working_buffer[i*8 + 2 + DEINTERLEAVING_OFFSET];
 8000ae6:	f832 1b10 	ldrh.w	r1, [r2], #16
 8000aea:	f823 1b02 	strh.w	r1, [r3], #2
  		for (int32_t i = 0; i < 8*1024; i ++) {
 8000aee:	4283      	cmp	r3, r0
 8000af0:	d1f9      	bne.n	8000ae6 <main+0x306>
 8000af2:	9a05      	ldr	r2, [sp, #20]
  		for (int32_t i = 0; i < 8*1024; i ++) {
 8000af4:	4852      	ldr	r0, [pc, #328]	; (8000c40 <main+0x460>)
 8000af6:	3208      	adds	r2, #8
				oversampled[3][i] = working_buffer[i*8 + 3 + DEINTERLEAVING_OFFSET];
 8000af8:	f832 1b10 	ldrh.w	r1, [r2], #16
 8000afc:	f823 1b02 	strh.w	r1, [r3], #2
  		for (int32_t i = 0; i < 8*1024; i ++) {
 8000b00:	4283      	cmp	r3, r0
 8000b02:	d1f9      	bne.n	8000af8 <main+0x318>
 8000b04:	9a05      	ldr	r2, [sp, #20]
  		for (int32_t i = 0; i < 8*1024; i ++) {
 8000b06:	484f      	ldr	r0, [pc, #316]	; (8000c44 <main+0x464>)
 8000b08:	320a      	adds	r2, #10
				oversampled[4][i] = working_buffer[i*8 + 4 + DEINTERLEAVING_OFFSET];
 8000b0a:	f832 1b10 	ldrh.w	r1, [r2], #16
 8000b0e:	f823 1b02 	strh.w	r1, [r3], #2
  		for (int32_t i = 0; i < 8*1024; i ++) {
 8000b12:	4283      	cmp	r3, r0
 8000b14:	d1f9      	bne.n	8000b0a <main+0x32a>
 8000b16:	9a05      	ldr	r2, [sp, #20]
  		for (int32_t i = 0; i < 8*1024; i ++) {
 8000b18:	484b      	ldr	r0, [pc, #300]	; (8000c48 <main+0x468>)
 8000b1a:	320c      	adds	r2, #12
				oversampled[5][i] = working_buffer[i*8 + 5 + DEINTERLEAVING_OFFSET];
 8000b1c:	f832 1b10 	ldrh.w	r1, [r2], #16
 8000b20:	f823 1b02 	strh.w	r1, [r3], #2
  		for (int32_t i = 0; i < 8*1024; i ++) {
 8000b24:	4283      	cmp	r3, r0
 8000b26:	d1f9      	bne.n	8000b1c <main+0x33c>
 8000b28:	9a05      	ldr	r2, [sp, #20]
 8000b2a:	320e      	adds	r2, #14
				oversampled[6][i] = working_buffer[i*8 + 6 + DEINTERLEAVING_OFFSET];
 8000b2c:	f832 1b10 	ldrh.w	r1, [r2], #16
 8000b30:	f823 1b02 	strh.w	r1, [r3], #2
  		for (int32_t i = 0; i < 8*1024; i ++) {
 8000b34:	4543      	cmp	r3, r8
 8000b36:	d1f9      	bne.n	8000b2c <main+0x34c>
 8000b38:	9a05      	ldr	r2, [sp, #20]
  		for (int32_t i = 0; i < 8*1024; i ++) {
 8000b3a:	4844      	ldr	r0, [pc, #272]	; (8000c4c <main+0x46c>)
				oversampled[7][i] = working_buffer[i*8 + 0];
 8000b3c:	f832 1b10 	ldrh.w	r1, [r2], #16
 8000b40:	f823 1b02 	strh.w	r1, [r3], #2
  		for (int32_t i = 0; i < 8*1024; i ++) {
 8000b44:	4283      	cmp	r3, r0
 8000b46:	d1f9      	bne.n	8000b3c <main+0x35c>
			RESET_TEST();
 8000b48:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
				decimated[i] = (q15_t*)(D3_SRAM_BASE + 0x00000000 + 1024*2*i);
 8000b4c:	f04f 5260 	mov.w	r2, #939524096	; 0x38000000
 8000b50:	ac1f      	add	r4, sp, #124	; 0x7c
 8000b52:	ae17      	add	r6, sp, #92	; 0x5c
			RESET_TEST();
 8000b54:	61ab      	str	r3, [r5, #24]
				decimated[i] = (q15_t*)(D3_SRAM_BASE + 0x00000000 + 1024*2*i);
 8000b56:	4b3e      	ldr	r3, [pc, #248]	; (8000c50 <main+0x470>)
 8000b58:	46a2      	mov	sl, r4
			SET_TEST();
 8000b5a:	46a1      	mov	r9, r4
				decimated[i] = (q15_t*)(D3_SRAM_BASE + 0x00000000 + 1024*2*i);
 8000b5c:	e9cd 2320 	strd	r2, r3, [sp, #128]	; 0x80
 8000b60:	a309      	add	r3, pc, #36	; (adr r3, 8000b88 <main+0x3a8>)
 8000b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b66:	ed8d 8b22 	vstr	d8, [sp, #136]	; 0x88
 8000b6a:	e9cd 2324 	strd	r2, r3, [sp, #144]	; 0x90
 8000b6e:	f04f 2338 	mov.w	r3, #939538432	; 0x38003800
 8000b72:	4a38      	ldr	r2, [pc, #224]	; (8000c54 <main+0x474>)
 8000b74:	e9cd 2326 	strd	r2, r3, [sp, #152]	; 0x98
			SET_TEST();
 8000b78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b7c:	61ab      	str	r3, [r5, #24]
 8000b7e:	e06d      	b.n	8000c5c <main+0x47c>
 8000b80:	38001000 	.word	0x38001000
 8000b84:	38001800 	.word	0x38001800
 8000b88:	38002000 	.word	0x38002000
 8000b8c:	38002800 	.word	0x38002800
 8000b90:	24000488 	.word	0x24000488
 8000b94:	40010400 	.word	0x40010400
 8000b98:	08012610 	.word	0x08012610
 8000b9c:	08013014 	.word	0x08013014
 8000ba0:	24000728 	.word	0x24000728
 8000ba4:	08019e40 	.word	0x08019e40
 8000ba8:	08000689 	.word	0x08000689
 8000bac:	0801f864 	.word	0x0801f864
 8000bb0:	08020268 	.word	0x08020268
 8000bb4:	08020c6c 	.word	0x08020c6c
 8000bb8:	08021670 	.word	0x08021670
 8000bbc:	08022074 	.word	0x08022074
 8000bc0:	08022a78 	.word	0x08022a78
 8000bc4:	0802347c 	.word	0x0802347c
 8000bc8:	08013a18 	.word	0x08013a18
 8000bcc:	0801441c 	.word	0x0801441c
 8000bd0:	08014e20 	.word	0x08014e20
 8000bd4:	08015824 	.word	0x08015824
 8000bd8:	08016228 	.word	0x08016228
 8000bdc:	08016c2c 	.word	0x08016c2c
 8000be0:	08017630 	.word	0x08017630
 8000be4:	08018034 	.word	0x08018034
 8000be8:	08018a38 	.word	0x08018a38
 8000bec:	0801943c 	.word	0x0801943c
 8000bf0:	0801a844 	.word	0x0801a844
 8000bf4:	0801b248 	.word	0x0801b248
 8000bf8:	0801bc4c 	.word	0x0801bc4c
 8000bfc:	0801c650 	.word	0x0801c650
 8000c00:	0801d054 	.word	0x0801d054
 8000c04:	0801da58 	.word	0x0801da58
 8000c08:	0801e45c 	.word	0x0801e45c
 8000c0c:	0801ee60 	.word	0x0801ee60
 8000c10:	58020800 	.word	0x58020800
 8000c14:	58024400 	.word	0x58024400
 8000c18:	58020c00 	.word	0x58020c00
 8000c1c:	24000644 	.word	0x24000644
 8000c20:	24000774 	.word	0x24000774
 8000c24:	24000690 	.word	0x24000690
 8000c28:	240006dc 	.word	0x240006dc
 8000c2c:	58020c10 	.word	0x58020c10
 8000c30:	240005f8 	.word	0x240005f8
 8000c34:	20004000 	.word	0x20004000
 8000c38:	20008000 	.word	0x20008000
 8000c3c:	2000c000 	.word	0x2000c000
 8000c40:	20010000 	.word	0x20010000
 8000c44:	20014000 	.word	0x20014000
 8000c48:	20018000 	.word	0x20018000
 8000c4c:	20020000 	.word	0x20020000
 8000c50:	38000800 	.word	0x38000800
 8000c54:	38003000 	.word	0x38003000
 8000c58:	2001c000 	.word	0x2001c000
				arm_fir_decimate_q15(&fir, (q15_t*)oversampled[i], decimated[i], 8192);
 8000c5c:	f856 1f04 	ldr.w	r1, [r6, #4]!
 8000c60:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c64:	f859 2f04 	ldr.w	r2, [r9, #4]!
 8000c68:	a80f      	add	r0, sp, #60	; 0x3c
 8000c6a:	f008 ff49 	bl	8009b00 <arm_fir_decimate_q15>
			for (int8_t i = 0; i < 8; i ++)
 8000c6e:	4556      	cmp	r6, sl
 8000c70:	d1f4      	bne.n	8000c5c <main+0x47c>
			RESET_TEST();
 8000c72:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000c76:	ae27      	add	r6, sp, #156	; 0x9c
 8000c78:	61ab      	str	r3, [r5, #24]
				x[i] = (float32_t*)(D1_DTCMRAM_BASE + 0x00004000 + 1024*4*i);
 8000c7a:	46b2      	mov	sl, r6
			SET_TEST();
 8000c7c:	46b1      	mov	r9, r6
				x[i] = (float32_t*)(D1_DTCMRAM_BASE + 0x00004000 + 1024*4*i);
 8000c7e:	a3c0      	add	r3, pc, #768	; (adr r3, 8000f80 <main+0x7a0>)
 8000c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c84:	e9cd 2328 	strd	r2, r3, [sp, #160]	; 0xa0
 8000c88:	a3bf      	add	r3, pc, #764	; (adr r3, 8000f88 <main+0x7a8>)
 8000c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c8e:	e9cd 232a 	strd	r2, r3, [sp, #168]	; 0xa8
 8000c92:	a3bf      	add	r3, pc, #764	; (adr r3, 8000f90 <main+0x7b0>)
 8000c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c98:	e9cd 232c 	strd	r2, r3, [sp, #176]	; 0xb0
 8000c9c:	a3be      	add	r3, pc, #760	; (adr r3, 8000f98 <main+0x7b8>)
 8000c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ca2:	e9cd 232e 	strd	r2, r3, [sp, #184]	; 0xb8
			SET_TEST();
 8000ca6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000caa:	61ab      	str	r3, [r5, #24]
				arm_q15_to_float(decimated[i], x[i], 1024);
 8000cac:	f854 0f04 	ldr.w	r0, [r4, #4]!
 8000cb0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000cb4:	f859 1f04 	ldr.w	r1, [r9, #4]!
 8000cb8:	f008 f870 	bl	8008d9c <arm_q15_to_float>
			for (int8_t i = 0; i < 8; i ++)
 8000cbc:	4554      	cmp	r4, sl
 8000cbe:	d1f5      	bne.n	8000cac <main+0x4cc>
			RESET_TEST();
 8000cc0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
				X[i] = (float32_t*)(D1_ITCMRAM_BASE + 0x00000000 + 512*4*2*i);
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	ac2f      	add	r4, sp, #188	; 0xbc
			RESET_TEST();
 8000cc8:	61ab      	str	r3, [r5, #24]
				X[i] = (float32_t*)(D1_ITCMRAM_BASE + 0x00000000 + 512*4*2*i);
 8000cca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cce:	46a2      	mov	sl, r4
			SET_TEST();
 8000cd0:	46a1      	mov	r9, r4
				X[i] = (float32_t*)(D1_ITCMRAM_BASE + 0x00000000 + 512*4*2*i);
 8000cd2:	e9cd 2330 	strd	r2, r3, [sp, #192]	; 0xc0
 8000cd6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000cda:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000cde:	e9cd 2332 	strd	r2, r3, [sp, #200]	; 0xc8
 8000ce2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ce6:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8000cea:	e9cd 2334 	strd	r2, r3, [sp, #208]	; 0xd0
 8000cee:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000cf2:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 8000cf6:	e9cd 2336 	strd	r2, r3, [sp, #216]	; 0xd8
			SET_TEST();
 8000cfa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cfe:	61ab      	str	r3, [r5, #24]
				arm_rfft_fast_f32(&fft, x[i], X[i], 0);
 8000d00:	f856 1f04 	ldr.w	r1, [r6, #4]!
 8000d04:	2300      	movs	r3, #0
 8000d06:	f859 2f04 	ldr.w	r2, [r9, #4]!
 8000d0a:	a812      	add	r0, sp, #72	; 0x48
 8000d0c:	f008 fb12 	bl	8009334 <arm_rfft_fast_f32>
			for (int i = 0; i < 8; i++)
 8000d10:	4556      	cmp	r6, sl
 8000d12:	d1f5      	bne.n	8000d00 <main+0x520>
			RESET_TEST();
 8000d14:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000d18:	f10d 0adc 	add.w	sl, sp, #220	; 0xdc
			SET_TEST();
 8000d1c:	4626      	mov	r6, r4
			RESET_TEST();
 8000d1e:	61ab      	str	r3, [r5, #24]
				abs_X[i] = (float32_t*)(D1_DTCMRAM_BASE + 0x0001C000 + 512*4*i);
 8000d20:	46d1      	mov	r9, sl
 8000d22:	a39f      	add	r3, pc, #636	; (adr r3, 8000fa0 <main+0x7c0>)
 8000d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d28:	e9cd 2338 	strd	r2, r3, [sp, #224]	; 0xe0
 8000d2c:	a39e      	add	r3, pc, #632	; (adr r3, 8000fa8 <main+0x7c8>)
 8000d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d32:	e9cd 233a 	strd	r2, r3, [sp, #232]	; 0xe8
 8000d36:	a39e      	add	r3, pc, #632	; (adr r3, 8000fb0 <main+0x7d0>)
 8000d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d3c:	e9cd 233c 	strd	r2, r3, [sp, #240]	; 0xf0
 8000d40:	a39d      	add	r3, pc, #628	; (adr r3, 8000fb8 <main+0x7d8>)
 8000d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d46:	e9cd 233e 	strd	r2, r3, [sp, #248]	; 0xf8
			SET_TEST();
 8000d4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d4e:	61ab      	str	r3, [r5, #24]
				arm_cmplx_mag_f32(X[i], abs_X[i], 512);
 8000d50:	f856 0f04 	ldr.w	r0, [r6, #4]!
 8000d54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d58:	f85a 1f04 	ldr.w	r1, [sl, #4]!
 8000d5c:	f009 f92e 	bl	8009fbc <arm_cmplx_mag_f32>
			for (int i = 0; i < 8; i++) {
 8000d60:	454e      	cmp	r6, r9
 8000d62:	d1f5      	bne.n	8000d50 <main+0x570>
			RESET_TEST();
 8000d64:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
				conj_X[i] = (float32_t*)(D1_ITCMRAM_BASE + 0x00008000 + 512*4*2*i);
 8000d68:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000d6c:	ae3f      	add	r6, sp, #252	; 0xfc
			RESET_TEST();
 8000d6e:	61ab      	str	r3, [r5, #24]
				conj_X[i] = (float32_t*)(D1_ITCMRAM_BASE + 0x00008000 + 512*4*2*i);
 8000d70:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 8000d74:	e9cd 2340 	strd	r2, r3, [sp, #256]	; 0x100
 8000d78:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 8000d7c:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8000d80:	e9cd 2342 	strd	r2, r3, [sp, #264]	; 0x108
 8000d84:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8000d88:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8000d8c:	e9cd 2344 	strd	r2, r3, [sp, #272]	; 0x110
 8000d90:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000d94:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8000d98:	e9cd 2346 	strd	r2, r3, [sp, #280]	; 0x118
			SET_TEST();
 8000d9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000da0:	61ab      	str	r3, [r5, #24]
				arm_cmplx_conj_f32(X[i], conj_X[i], 512);
 8000da2:	f854 0f04 	ldr.w	r0, [r4, #4]!
 8000da6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000daa:	f856 1f04 	ldr.w	r1, [r6, #4]!
 8000dae:	f009 fa29 	bl	800a204 <arm_cmplx_conj_f32>
			for (int i = 0; i < 8; i++) {
 8000db2:	454c      	cmp	r4, r9
 8000db4:	d1f5      	bne.n	8000da2 <main+0x5c2>
			RESET_TEST();
 8000db6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000dba:	aa73      	add	r2, sp, #460	; 0x1cc
 8000dbc:	61ab      	str	r3, [r5, #24]
			for (int16_t i = 0; i < 28; i++)
 8000dbe:	ab74      	add	r3, sp, #464	; 0x1d0
 8000dc0:	f103 016c 	add.w	r1, r3, #108	; 0x6c
			RESET_TEST();
 8000dc4:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
				R[i] = (float32_t*)(D1_DTCMRAM_BASE + 0x00000000 + 1024*4*i);
 8000dc8:	f842 3f04 	str.w	r3, [r2, #4]!
			for (int16_t i = 0; i < 28; i++)
 8000dcc:	428a      	cmp	r2, r1
 8000dce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000dd2:	d1f9      	bne.n	8000dc8 <main+0x5e8>
 8000dd4:	2200      	movs	r2, #0
				for (int j = i+1;  j < 8; j++) {
 8000dd6:	f04f 0b01 	mov.w	fp, #1
 8000dda:	f44f 4e10 	mov.w	lr, #36864	; 0x9000
 8000dde:	f8df c1e0 	ldr.w	ip, [pc, #480]	; 8000fc0 <main+0x7e0>
 8000de2:	4640      	mov	r0, r8
 8000de4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
			for (int i = 0; i < 8; i++) {
 8000de8:	4616      	mov	r6, r2
				for (int j = i+1;  j < 8; j++) {
 8000dea:	465c      	mov	r4, fp
 8000dec:	4691      	mov	r9, r2
					compute_gcc_phat(&fft, R[i_R[i][j]], X[i], X[j], abs_X[i], abs_X[j], conj_X[j]);
 8000dee:	f50d 7ae8 	add.w	sl, sp, #464	; 0x1d0
 8000df2:	e00c      	b.n	8000e0e <main+0x62e>
 8000df4:	a938      	add	r1, sp, #224	; 0xe0
 8000df6:	ab30      	add	r3, sp, #192	; 0xc0
 8000df8:	a840      	add	r0, sp, #256	; 0x100
 8000dfa:	f853 2026 	ldr.w	r2, [r3, r6, lsl #2]
 8000dfe:	f850 e024 	ldr.w	lr, [r0, r4, lsl #2]
 8000e02:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8000e06:	f851 0026 	ldr.w	r0, [r1, r6, lsl #2]
 8000e0a:	f851 c024 	ldr.w	ip, [r1, r4, lsl #2]
 8000e0e:	a948      	add	r1, sp, #288	; 0x120
					SET_TEST();
 8000e10:	f44f 6780 	mov.w	r7, #1024	; 0x400
					compute_gcc_phat(&fft, R[i_R[i][j]], X[i], X[j], abs_X[i], abs_X[j], conj_X[j]);
 8000e14:	4449      	add	r1, r9
					SET_TEST();
 8000e16:	61af      	str	r7, [r5, #24]
					compute_gcc_phat(&fft, R[i_R[i][j]], X[i], X[j], abs_X[i], abs_X[j], conj_X[j]);
 8000e18:	9000      	str	r0, [sp, #0]
 8000e1a:	a812      	add	r0, sp, #72	; 0x48
 8000e1c:	e9cd ce01 	strd	ip, lr, [sp, #4]
 8000e20:	5d09      	ldrb	r1, [r1, r4]
				for (int j = i+1;  j < 8; j++) {
 8000e22:	3401      	adds	r4, #1
					compute_gcc_phat(&fft, R[i_R[i][j]], X[i], X[j], abs_X[i], abs_X[j], conj_X[j]);
 8000e24:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8000e28:	f000 f8ce 	bl	8000fc8 <compute_gcc_phat>
					RESET_TEST();
 8000e2c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
				for (int j = i+1;  j < 8; j++) {
 8000e30:	2c08      	cmp	r4, #8
					RESET_TEST();
 8000e32:	61ab      	str	r3, [r5, #24]
				for (int j = i+1;  j < 8; j++) {
 8000e34:	d1de      	bne.n	8000df4 <main+0x614>
 8000e36:	f10b 0401 	add.w	r4, fp, #1
 8000e3a:	f1bb 0f07 	cmp.w	fp, #7
 8000e3e:	465e      	mov	r6, fp
 8000e40:	ea4f 09cb 	mov.w	r9, fp, lsl #3
 8000e44:	46a3      	mov	fp, r4
 8000e46:	d1d5      	bne.n	8000df4 <main+0x614>
			volatile float32_t E, E_max = 0;
 8000e48:	2300      	movs	r3, #0
			volatile uint16_t g_max = 0;
 8000e4a:	f10d 0b2a 	add.w	fp, sp, #42	; 0x2a
			volatile float32_t E, E_max = 0;
 8000e4e:	f10d 0930 	add.w	r9, sp, #48	; 0x30
			for (int g = 0; g < 2562; g++) {
 8000e52:	2400      	movs	r4, #0
			volatile float32_t E, E_max = 0;
 8000e54:	f8c9 3000 	str.w	r3, [r9]
			volatile uint16_t g_max = 0;
 8000e58:	f04f 0300 	mov.w	r3, #0
			for (int g = 0; g < 2562; g++) {
 8000e5c:	f640 2a02 	movw	sl, #2562	; 0xa02
			volatile uint16_t g_max = 0;
 8000e60:	f8ab 3000 	strh.w	r3, [fp]
			SET_TEST();
 8000e64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e68:	61ab      	str	r3, [r5, #24]
				E_grid[g] = compute_beam_energy(&fft, g, R, tau, i_R);
 8000e6a:	b2a6      	uxth	r6, r4
 8000e6c:	af48      	add	r7, sp, #288	; 0x120
 8000e6e:	ab58      	add	r3, sp, #352	; 0x160
 8000e70:	aa74      	add	r2, sp, #464	; 0x1d0
 8000e72:	a812      	add	r0, sp, #72	; 0x48
 8000e74:	4631      	mov	r1, r6
 8000e76:	9700      	str	r7, [sp, #0]
			for (int g = 0; g < 2562; g++) {
 8000e78:	3401      	adds	r4, #1
				E_grid[g] = compute_beam_energy(&fft, g, R, tau, i_R);
 8000e7a:	f000 f8e3 	bl	8001044 <compute_beam_energy>
				if (E_grid[g] >= E_max) {
 8000e7e:	edd9 7a00 	vldr	s15, [r9]
 8000e82:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8000e86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e8a:	db03      	blt.n	8000e94 <main+0x6b4>
					E_max = E_grid[g];
 8000e8c:	ed89 0a00 	vstr	s0, [r9]
					g_max = g;
 8000e90:	f8ab 6000 	strh.w	r6, [fp]
			for (int g = 0; g < 2562; g++) {
 8000e94:	4554      	cmp	r4, sl
 8000e96:	d1e8      	bne.n	8000e6a <main+0x68a>
			RESET_TEST();
 8000e98:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
			theta = grid[0][g_max]*180.0/3.1415;
 8000e9c:	f10d 022a 	add.w	r2, sp, #42	; 0x2a
 8000ea0:	4c35      	ldr	r4, [pc, #212]	; (8000f78 <main+0x798>)
			if (E_max >= 9.0) {
 8000ea2:	eef2 5a02 	vmov.f32	s11, #34	; 0x41100000  9.0
			RESET_TEST();
 8000ea6:	61ab      	str	r3, [r5, #24]
			theta = grid[0][g_max]*180.0/3.1415;
 8000ea8:	f50d 6388 	add.w	r3, sp, #1088	; 0x440
 8000eac:	f2a3 400c 	subw	r0, r3, #1036	; 0x40c
			phi = grid[1][g_max]*180.0/3.1415;
 8000eb0:	f5a3 6181 	sub.w	r1, r3, #1032	; 0x408
			theta = grid[0][g_max]*180.0/3.1415;
 8000eb4:	8813      	ldrh	r3, [r2, #0]
 8000eb6:	b29b      	uxth	r3, r3
 8000eb8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8000ebc:	ed93 7a00 	vldr	s14, [r3]
 8000ec0:	ed9f 6b2b 	vldr	d6, [pc, #172]	; 8000f70 <main+0x790>
 8000ec4:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8000ec8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000ecc:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 8000ed0:	ed80 7a00 	vstr	s14, [r0]
			phi = grid[1][g_max]*180.0/3.1415;
 8000ed4:	8813      	ldrh	r3, [r2, #0]
 8000ed6:	b29b      	uxth	r3, r3
 8000ed8:	f603 2302 	addw	r3, r3, #2562	; 0xa02
 8000edc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8000ee0:	ed93 7a00 	vldr	s14, [r3]
			SET_TEST();
 8000ee4:	f44f 6380 	mov.w	r3, #1024	; 0x400
			phi = grid[1][g_max]*180.0/3.1415;
 8000ee8:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8000eec:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000ef0:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 8000ef4:	ed81 7a00 	vstr	s14, [r1]
			SET_TEST();
 8000ef8:	61ab      	str	r3, [r5, #24]
			if (E_max >= 9.0) {
 8000efa:	ab0c      	add	r3, sp, #48	; 0x30
 8000efc:	edd3 7a00 	vldr	s15, [r3]
 8000f00:	eef4 7ae5 	vcmpe.f32	s15, s11
 8000f04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f08:	db1f      	blt.n	8000f4a <main+0x76a>
				sprintf(str, "E = %.2f, theta = %.2f, phi = %.2f\r\n", E_max, theta, phi);
 8000f0a:	edd3 5a00 	vldr	s11, [r3]
 8000f0e:	ed90 6a00 	vldr	s12, [r0]
 8000f12:	a8b0      	add	r0, sp, #704	; 0x2c0
 8000f14:	ed91 7a00 	vldr	s14, [r1]
 8000f18:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
 8000f1c:	4917      	ldr	r1, [pc, #92]	; (8000f7c <main+0x79c>)
 8000f1e:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8000f22:	ed8d 6b00 	vstr	d6, [sp]
 8000f26:	ed8d 7b02 	vstr	d7, [sp, #8]
 8000f2a:	eeb7 7ae5 	vcvt.f64.f32	d7, s11
 8000f2e:	ec53 2b17 	vmov	r2, r3, d7
 8000f32:	f00a fa7b 	bl	800b42c <siprintf>
				CDC_Transmit_HS((uint8_t*)str, strlen(str));
 8000f36:	a8b0      	add	r0, sp, #704	; 0x2c0
 8000f38:	f7ff fa3a 	bl	80003b0 <strlen>
 8000f3c:	b281      	uxth	r1, r0
 8000f3e:	a8b0      	add	r0, sp, #704	; 0x2c0
 8000f40:	f007 fca8 	bl	8008894 <CDC_Transmit_HS>
				HAL_Delay(1);
 8000f44:	2001      	movs	r0, #1
 8000f46:	f000 ff89 	bl	8001e5c <HAL_Delay>
			RESET_TEST();
 8000f4a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000f4e:	61ab      	str	r3, [r5, #24]
 8000f50:	e56b      	b.n	8000a2a <main+0x24a>
  		HAL_DMA_Start_IT(htim5.hdma[TIM_DMA_ID_CC1], (uint32_t)&GPIOD->IDR + 0, (uint32_t)filling_buffer, 1024*8*8-1);
 8000f52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000f54:	461a      	mov	r2, r3
	volatile uint16_t* buffer_1 = malloc(8*8*1024*2);
 8000f56:	9306      	str	r3, [sp, #24]
  		HAL_DMA_Start_IT(htim5.hdma[TIM_DMA_ID_CC1], (uint32_t)&GPIOD->IDR + 0, (uint32_t)filling_buffer, 1024*8*8-1);
 8000f58:	9b08      	ldr	r3, [sp, #32]
 8000f5a:	9305      	str	r3, [sp, #20]
 8000f5c:	e57f      	b.n	8000a5e <main+0x27e>
 8000f5e:	9b08      	ldr	r3, [sp, #32]
 8000f60:	461a      	mov	r2, r3
 8000f62:	9306      	str	r3, [sp, #24]
 8000f64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000f66:	9305      	str	r3, [sp, #20]
 8000f68:	e579      	b.n	8000a5e <main+0x27e>
 8000f6a:	bf00      	nop
 8000f6c:	f3af 8000 	nop.w
 8000f70:	79de2e88 	.word	0x79de2e88
 8000f74:	404ca613 	.word	0x404ca613
 8000f78:	0800d600 	.word	0x0800d600
 8000f7c:	0800d5c8 	.word	0x0800d5c8
 8000f80:	20004000 	.word	0x20004000
 8000f84:	20005000 	.word	0x20005000
 8000f88:	20006000 	.word	0x20006000
 8000f8c:	20007000 	.word	0x20007000
 8000f90:	20008000 	.word	0x20008000
 8000f94:	20009000 	.word	0x20009000
 8000f98:	2000a000 	.word	0x2000a000
 8000f9c:	2000b000 	.word	0x2000b000
 8000fa0:	2001c000 	.word	0x2001c000
 8000fa4:	2001c800 	.word	0x2001c800
 8000fa8:	2001d000 	.word	0x2001d000
 8000fac:	2001d800 	.word	0x2001d800
 8000fb0:	2001e000 	.word	0x2001e000
 8000fb4:	2001e800 	.word	0x2001e800
 8000fb8:	2001f000 	.word	0x2001f000
 8000fbc:	2001f800 	.word	0x2001f800
 8000fc0:	2001c800 	.word	0x2001c800

08000fc4 <Error_Handler>:
 8000fc4:	b672      	cpsid	i
  while (1)
 8000fc6:	e7fe      	b.n	8000fc6 <Error_Handler+0x2>

08000fc8 <compute_gcc_phat>:
		float32_t* X_0,
		float32_t* X_1,
		float32_t* abs_X_0,
		float32_t* abs_X_1,
		float32_t* conj_X_1
) {
 8000fc8:	b570      	push	{r4, r5, r6, lr}
 8000fca:	4604      	mov	r4, r0
 8000fcc:	f5ad 5d20 	sub.w	sp, sp, #10240	; 0x2800
 8000fd0:	460d      	mov	r5, r1
	//float32_t* divisor = malloc(512*4);
	float32_t divisor[512];
	SET_TEST();
	arm_mult_f32(abs_X_0, abs_X_1, divisor, 512);
 8000fd2:	f642 0010 	movw	r0, #10256	; 0x2810
 8000fd6:	f642 0114 	movw	r1, #10260	; 0x2814
) {
 8000fda:	4616      	mov	r6, r2
	arm_mult_f32(abs_X_0, abs_X_1, divisor, 512);
 8000fdc:	4468      	add	r0, sp
 8000fde:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fe2:	4469      	add	r1, sp
 8000fe4:	466a      	mov	r2, sp
 8000fe6:	6800      	ldr	r0, [r0, #0]
 8000fe8:	6809      	ldr	r1, [r1, #0]
 8000fea:	f009 f965 	bl	800a2b8 <arm_mult_f32>
	RESET_TEST();

	//float32_t* mult_X = malloc(512*4*2);
	float32_t mult_X[512*2];
	SET_TEST();
	arm_cmplx_mult_cmplx_f32(X_0, conj_X_1, mult_X, 512);
 8000fee:	f642 0118 	movw	r1, #10264	; 0x2818
 8000ff2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ff6:	f50d 6200 	add.w	r2, sp, #2048	; 0x800
 8000ffa:	4469      	add	r1, sp
 8000ffc:	4630      	mov	r0, r6
 8000ffe:	6809      	ldr	r1, [r1, #0]
 8001000:	f008 ff12 	bl	8009e28 <arm_cmplx_mult_cmplx_f32>
	RESET_TEST();

	SET_TEST();
	//float32_t* chi = malloc(512*4*2);
	float32_t chi[512*2];
	for (int i = 0; i < 2*512; i++) {
 8001004:	f50d 6e00 	add.w	lr, sp, #2048	; 0x800
 8001008:	2300      	movs	r3, #0
 800100a:	f50d 52c0 	add.w	r2, sp, #6144	; 0x1800
		chi[i] = mult_X[i] / divisor[i/2];
 800100e:	ea4f 0c63 	mov.w	ip, r3, asr #1
 8001012:	ecfe 6a01 	vldmia	lr!, {s13}
	for (int i = 0; i < 2*512; i++) {
 8001016:	3301      	adds	r3, #1
		chi[i] = mult_X[i] / divisor[i/2];
 8001018:	eb0d 0c8c 	add.w	ip, sp, ip, lsl #2
	for (int i = 0; i < 2*512; i++) {
 800101c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
		chi[i] = mult_X[i] / divisor[i/2];
 8001020:	ed9c 7a00 	vldr	s14, [ip]
 8001024:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001028:	ece2 7a01 	vstmia	r2!, {s15}
	for (int i = 0; i < 2*512; i++) {
 800102c:	d1ef      	bne.n	800100e <compute_gcc_phat+0x46>
	}
	RESET_TEST();

	SET_TEST();
	arm_rfft_fast_f32(fft, chi, R, 1);
 800102e:	2301      	movs	r3, #1
 8001030:	462a      	mov	r2, r5
 8001032:	f50d 51c0 	add.w	r1, sp, #6144	; 0x1800
 8001036:	4620      	mov	r0, r4
 8001038:	f008 f97c 	bl	8009334 <arm_rfft_fast_f32>
	RESET_TEST();

	//free(divisor);
	//free(mult_X);
	//free(chi);
}
 800103c:	f50d 5d20 	add.w	sp, sp, #10240	; 0x2800
 8001040:	bd70      	pop	{r4, r5, r6, pc}
 8001042:	bf00      	nop

08001044 <compute_beam_energy>:
		arm_rfft_fast_instance_f32* fft,
		uint16_t g,
		float32_t** R,
		const volatile int8_t** tau,
		uint8_t i_R[8][8]
) {
 8001044:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001046:	9c05      	ldr	r4, [sp, #20]
	float32_t E = 0;
	for (int i = 0; i < 8; i++) {
 8001048:	2000      	movs	r0, #0
	float32_t E = 0;
 800104a:	ed9f 0a85 	vldr	s0, [pc, #532]	; 8001260 <compute_beam_energy+0x21c>
 800104e:	4625      	mov	r5, r4
			} else {
				E += R[
				  i_R[j][i]
				][
					//(((uint16_t)tau[ i_R[j][i] ][g] ^ 0xFFFF) + 0x0001) & 0x03FF
					((uint16_t)tau[ i_R[j][i] ][g]) & 0x03FF
 8001050:	46a4      	mov	ip, r4
			if (i == j) continue;
 8001052:	2800      	cmp	r0, #0
 8001054:	f000 808b 	beq.w	800116e <compute_beam_energy+0x12a>
				E += R[
 8001058:	f89c 6000 	ldrb.w	r6, [ip]
			if (i == j) continue;
 800105c:	2801      	cmp	r0, #1
					((uint16_t)tau[ i_R[j][i] ][g]) & 0x03FF
 800105e:	f853 7026 	ldr.w	r7, [r3, r6, lsl #2]
				][
 8001062:	f852 6026 	ldr.w	r6, [r2, r6, lsl #2]
					((uint16_t)tau[ i_R[j][i] ][g]) & 0x03FF
 8001066:	f817 e001 	ldrb.w	lr, [r7, r1]
 800106a:	fa4f fe8e 	sxtb.w	lr, lr
 800106e:	f3ce 0e09 	ubfx	lr, lr, #0, #10
				][
 8001072:	eb06 068e 	add.w	r6, r6, lr, lsl #2
				E += R[
 8001076:	edd6 7a00 	vldr	s15, [r6]
 800107a:	ee30 0a27 	vadd.f32	s0, s0, s15
			if (i == j) continue;
 800107e:	f000 8086 	beq.w	800118e <compute_beam_energy+0x14a>
				E += R[
 8001082:	f89c 6008 	ldrb.w	r6, [ip, #8]
			if (i == j) continue;
 8001086:	2802      	cmp	r0, #2
					((uint16_t)tau[ i_R[j][i] ][g]) & 0x03FF
 8001088:	f853 7026 	ldr.w	r7, [r3, r6, lsl #2]
				][
 800108c:	f852 6026 	ldr.w	r6, [r2, r6, lsl #2]
					((uint16_t)tau[ i_R[j][i] ][g]) & 0x03FF
 8001090:	f817 e001 	ldrb.w	lr, [r7, r1]
 8001094:	fa4f fe8e 	sxtb.w	lr, lr
 8001098:	f3ce 0e09 	ubfx	lr, lr, #0, #10
				][
 800109c:	eb06 068e 	add.w	r6, r6, lr, lsl #2
				E += R[
 80010a0:	edd6 7a00 	vldr	s15, [r6]
 80010a4:	ee30 0a27 	vadd.f32	s0, s0, s15
			if (i == j) continue;
 80010a8:	f000 8081 	beq.w	80011ae <compute_beam_energy+0x16a>
				E += R[
 80010ac:	f89c 6010 	ldrb.w	r6, [ip, #16]
			if (i == j) continue;
 80010b0:	2803      	cmp	r0, #3
					((uint16_t)tau[ i_R[j][i] ][g]) & 0x03FF
 80010b2:	f853 7026 	ldr.w	r7, [r3, r6, lsl #2]
				][
 80010b6:	f852 6026 	ldr.w	r6, [r2, r6, lsl #2]
					((uint16_t)tau[ i_R[j][i] ][g]) & 0x03FF
 80010ba:	f817 e001 	ldrb.w	lr, [r7, r1]
 80010be:	fa4f fe8e 	sxtb.w	lr, lr
 80010c2:	f3ce 0e09 	ubfx	lr, lr, #0, #10
				][
 80010c6:	eb06 068e 	add.w	r6, r6, lr, lsl #2
				E += R[
 80010ca:	edd6 7a00 	vldr	s15, [r6]
 80010ce:	ee30 0a27 	vadd.f32	s0, s0, s15
			if (i == j) continue;
 80010d2:	d07c      	beq.n	80011ce <compute_beam_energy+0x18a>
				E += R[
 80010d4:	f89c 6018 	ldrb.w	r6, [ip, #24]
			if (i == j) continue;
 80010d8:	2804      	cmp	r0, #4
					((uint16_t)tau[ i_R[j][i] ][g]) & 0x03FF
 80010da:	f853 7026 	ldr.w	r7, [r3, r6, lsl #2]
				][
 80010de:	f852 6026 	ldr.w	r6, [r2, r6, lsl #2]
					((uint16_t)tau[ i_R[j][i] ][g]) & 0x03FF
 80010e2:	f817 e001 	ldrb.w	lr, [r7, r1]
 80010e6:	fa4f fe8e 	sxtb.w	lr, lr
 80010ea:	f3ce 0e09 	ubfx	lr, lr, #0, #10
				][
 80010ee:	eb06 068e 	add.w	r6, r6, lr, lsl #2
				E += R[
 80010f2:	edd6 7a00 	vldr	s15, [r6]
 80010f6:	ee30 0a27 	vadd.f32	s0, s0, s15
			if (i == j) continue;
 80010fa:	d078      	beq.n	80011ee <compute_beam_energy+0x1aa>
				E += R[
 80010fc:	f89c 6020 	ldrb.w	r6, [ip, #32]
			if (i == j) continue;
 8001100:	2805      	cmp	r0, #5
					((uint16_t)tau[ i_R[j][i] ][g]) & 0x03FF
 8001102:	f853 7026 	ldr.w	r7, [r3, r6, lsl #2]
				][
 8001106:	f852 6026 	ldr.w	r6, [r2, r6, lsl #2]
					((uint16_t)tau[ i_R[j][i] ][g]) & 0x03FF
 800110a:	f817 e001 	ldrb.w	lr, [r7, r1]
 800110e:	fa4f fe8e 	sxtb.w	lr, lr
 8001112:	f3ce 0e09 	ubfx	lr, lr, #0, #10
				][
 8001116:	eb06 068e 	add.w	r6, r6, lr, lsl #2
				E += R[
 800111a:	edd6 7a00 	vldr	s15, [r6]
 800111e:	ee30 0a27 	vadd.f32	s0, s0, s15
			if (i == j) continue;
 8001122:	d074      	beq.n	800120e <compute_beam_energy+0x1ca>
				E += R[
 8001124:	f89c 6028 	ldrb.w	r6, [ip, #40]	; 0x28
			if (i == j) continue;
 8001128:	2806      	cmp	r0, #6
					((uint16_t)tau[ i_R[j][i] ][g]) & 0x03FF
 800112a:	f853 7026 	ldr.w	r7, [r3, r6, lsl #2]
				][
 800112e:	f852 6026 	ldr.w	r6, [r2, r6, lsl #2]
					((uint16_t)tau[ i_R[j][i] ][g]) & 0x03FF
 8001132:	f817 e001 	ldrb.w	lr, [r7, r1]
 8001136:	fa4f fe8e 	sxtb.w	lr, lr
 800113a:	f3ce 0e09 	ubfx	lr, lr, #0, #10
				][
 800113e:	eb06 068e 	add.w	r6, r6, lr, lsl #2
				E += R[
 8001142:	edd6 7a00 	vldr	s15, [r6]
 8001146:	ee30 0a27 	vadd.f32	s0, s0, s15
			if (i == j) continue;
 800114a:	d070      	beq.n	800122e <compute_beam_energy+0x1ea>
				E += R[
 800114c:	f89c 0030 	ldrb.w	r0, [ip, #48]	; 0x30
					((uint16_t)tau[ i_R[j][i] ][g]) & 0x03FF
 8001150:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
				][
 8001154:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
					((uint16_t)tau[ i_R[j][i] ][g]) & 0x03FF
 8001158:	5c5b      	ldrb	r3, [r3, r1]
 800115a:	b25b      	sxtb	r3, r3
 800115c:	f3c3 0309 	ubfx	r3, r3, #0, #10
				][
 8001160:	eb02 0383 	add.w	r3, r2, r3, lsl #2
				E += R[
 8001164:	edd3 7a00 	vldr	s15, [r3]
 8001168:	ee30 0a27 	vadd.f32	s0, s0, s15
			}
		}
	}

	return E;
}
 800116c:	bdf0      	pop	{r4, r5, r6, r7, pc}
				E += R[
 800116e:	7866      	ldrb	r6, [r4, #1]
					((uint16_t)tau[ i_R[i][j] ][g]) & 0x03FF
 8001170:	f853 e026 	ldr.w	lr, [r3, r6, lsl #2]
				][
 8001174:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
					((uint16_t)tau[ i_R[i][j] ][g]) & 0x03FF
 8001178:	f81e 6001 	ldrb.w	r6, [lr, r1]
 800117c:	b276      	sxtb	r6, r6
 800117e:	f3c6 0609 	ubfx	r6, r6, #0, #10
				][
 8001182:	eb07 0686 	add.w	r6, r7, r6, lsl #2
				E += R[
 8001186:	edd6 7a00 	vldr	s15, [r6]
 800118a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800118e:	78ae      	ldrb	r6, [r5, #2]
					((uint16_t)tau[ i_R[i][j] ][g]) & 0x03FF
 8001190:	f853 e026 	ldr.w	lr, [r3, r6, lsl #2]
				][
 8001194:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
					((uint16_t)tau[ i_R[i][j] ][g]) & 0x03FF
 8001198:	f81e 6001 	ldrb.w	r6, [lr, r1]
 800119c:	b276      	sxtb	r6, r6
 800119e:	f3c6 0609 	ubfx	r6, r6, #0, #10
				][
 80011a2:	eb07 0686 	add.w	r6, r7, r6, lsl #2
				E += R[
 80011a6:	edd6 7a00 	vldr	s15, [r6]
 80011aa:	ee30 0a27 	vadd.f32	s0, s0, s15
 80011ae:	78ee      	ldrb	r6, [r5, #3]
					((uint16_t)tau[ i_R[i][j] ][g]) & 0x03FF
 80011b0:	f853 e026 	ldr.w	lr, [r3, r6, lsl #2]
				][
 80011b4:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
					((uint16_t)tau[ i_R[i][j] ][g]) & 0x03FF
 80011b8:	f81e 6001 	ldrb.w	r6, [lr, r1]
 80011bc:	b276      	sxtb	r6, r6
 80011be:	f3c6 0609 	ubfx	r6, r6, #0, #10
				][
 80011c2:	eb07 0686 	add.w	r6, r7, r6, lsl #2
				E += R[
 80011c6:	edd6 7a00 	vldr	s15, [r6]
 80011ca:	ee30 0a27 	vadd.f32	s0, s0, s15
 80011ce:	792e      	ldrb	r6, [r5, #4]
					((uint16_t)tau[ i_R[i][j] ][g]) & 0x03FF
 80011d0:	f853 e026 	ldr.w	lr, [r3, r6, lsl #2]
				][
 80011d4:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
					((uint16_t)tau[ i_R[i][j] ][g]) & 0x03FF
 80011d8:	f81e 6001 	ldrb.w	r6, [lr, r1]
 80011dc:	b276      	sxtb	r6, r6
 80011de:	f3c6 0609 	ubfx	r6, r6, #0, #10
				][
 80011e2:	eb07 0686 	add.w	r6, r7, r6, lsl #2
				E += R[
 80011e6:	edd6 7a00 	vldr	s15, [r6]
 80011ea:	ee30 0a27 	vadd.f32	s0, s0, s15
 80011ee:	796e      	ldrb	r6, [r5, #5]
					((uint16_t)tau[ i_R[i][j] ][g]) & 0x03FF
 80011f0:	f853 e026 	ldr.w	lr, [r3, r6, lsl #2]
				][
 80011f4:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
					((uint16_t)tau[ i_R[i][j] ][g]) & 0x03FF
 80011f8:	f81e 6001 	ldrb.w	r6, [lr, r1]
 80011fc:	b276      	sxtb	r6, r6
 80011fe:	f3c6 0609 	ubfx	r6, r6, #0, #10
				][
 8001202:	eb07 0686 	add.w	r6, r7, r6, lsl #2
				E += R[
 8001206:	edd6 7a00 	vldr	s15, [r6]
 800120a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800120e:	79ae      	ldrb	r6, [r5, #6]
					((uint16_t)tau[ i_R[i][j] ][g]) & 0x03FF
 8001210:	f853 e026 	ldr.w	lr, [r3, r6, lsl #2]
				][
 8001214:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
					((uint16_t)tau[ i_R[i][j] ][g]) & 0x03FF
 8001218:	f81e 6001 	ldrb.w	r6, [lr, r1]
 800121c:	b276      	sxtb	r6, r6
 800121e:	f3c6 0609 	ubfx	r6, r6, #0, #10
				][
 8001222:	eb07 0686 	add.w	r6, r7, r6, lsl #2
				E += R[
 8001226:	edd6 7a00 	vldr	s15, [r6]
 800122a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800122e:	79ee      	ldrb	r6, [r5, #7]
	for (int i = 0; i < 8; i++) {
 8001230:	3001      	adds	r0, #1
 8001232:	3508      	adds	r5, #8
 8001234:	f10c 0c01 	add.w	ip, ip, #1
					((uint16_t)tau[ i_R[i][j] ][g]) & 0x03FF
 8001238:	f853 7026 	ldr.w	r7, [r3, r6, lsl #2]
	for (int i = 0; i < 8; i++) {
 800123c:	2808      	cmp	r0, #8
				][
 800123e:	f852 6026 	ldr.w	r6, [r2, r6, lsl #2]
					((uint16_t)tau[ i_R[i][j] ][g]) & 0x03FF
 8001242:	f817 e001 	ldrb.w	lr, [r7, r1]
 8001246:	fa4f fe8e 	sxtb.w	lr, lr
 800124a:	f3ce 0e09 	ubfx	lr, lr, #0, #10
				][
 800124e:	eb06 0e8e 	add.w	lr, r6, lr, lsl #2
				E += R[
 8001252:	edde 7a00 	vldr	s15, [lr]
 8001256:	ee30 0a27 	vadd.f32	s0, s0, s15
	for (int i = 0; i < 8; i++) {
 800125a:	f47f aefa 	bne.w	8001052 <compute_beam_energy+0xe>
}
 800125e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001260:	00000000 	.word	0x00000000

08001264 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001264:	4b07      	ldr	r3, [pc, #28]	; (8001284 <HAL_MspInit+0x20>)
{
 8001266:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001268:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 800126c:	f042 0202 	orr.w	r2, r2, #2
 8001270:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8001274:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001278:	f003 0302 	and.w	r3, r3, #2
 800127c:	9301      	str	r3, [sp, #4]
 800127e:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001280:	b002      	add	sp, #8
 8001282:	4770      	bx	lr
 8001284:	58024400 	.word	0x58024400

08001288 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001288:	e7fe      	b.n	8001288 <NMI_Handler>
 800128a:	bf00      	nop

0800128c <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800128c:	e7fe      	b.n	800128c <HardFault_Handler>
 800128e:	bf00      	nop

08001290 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001290:	e7fe      	b.n	8001290 <MemManage_Handler>
 8001292:	bf00      	nop

08001294 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001294:	e7fe      	b.n	8001294 <BusFault_Handler>
 8001296:	bf00      	nop

08001298 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001298:	e7fe      	b.n	8001298 <UsageFault_Handler>
 800129a:	bf00      	nop

0800129c <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop

080012a0 <DebugMon_Handler>:
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop

080012a4 <PendSV_Handler>:
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop

080012a8 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012a8:	f000 bdc6 	b.w	8001e38 <HAL_IncTick>

080012ac <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_fmac_rd);
 80012ac:	4801      	ldr	r0, [pc, #4]	; (80012b4 <DMA1_Stream0_IRQHandler+0x8>)
 80012ae:	f001 bc29 	b.w	8002b04 <HAL_DMA_IRQHandler>
 80012b2:	bf00      	nop
 80012b4:	24000360 	.word	0x24000360

080012b8 <DMA1_Stream1_IRQHandler>:
void DMA1_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_fmac_wr);
 80012b8:	4801      	ldr	r0, [pc, #4]	; (80012c0 <DMA1_Stream1_IRQHandler+0x8>)
 80012ba:	f001 bc23 	b.w	8002b04 <HAL_DMA_IRQHandler>
 80012be:	bf00      	nop
 80012c0:	240003d8 	.word	0x240003d8

080012c4 <DMA1_Stream2_IRQHandler>:
void DMA1_Stream2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim23_ch1);
 80012c4:	4801      	ldr	r0, [pc, #4]	; (80012cc <DMA1_Stream2_IRQHandler+0x8>)
 80012c6:	f001 bc1d 	b.w	8002b04 <HAL_DMA_IRQHandler>
 80012ca:	bf00      	nop
 80012cc:	24000490 	.word	0x24000490

080012d0 <DMA1_Stream3_IRQHandler>:
void DMA1_Stream3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_up);
 80012d0:	4801      	ldr	r0, [pc, #4]	; (80012d8 <DMA1_Stream3_IRQHandler+0x8>)
 80012d2:	f001 bc17 	b.w	8002b04 <HAL_DMA_IRQHandler>
 80012d6:	bf00      	nop
 80012d8:	24000580 	.word	0x24000580

080012dc <DMA1_Stream4_IRQHandler>:
void DMA1_Stream4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma1_stream4);
 80012dc:	4801      	ldr	r0, [pc, #4]	; (80012e4 <DMA1_Stream4_IRQHandler+0x8>)
 80012de:	f001 bc11 	b.w	8002b04 <HAL_DMA_IRQHandler>
 80012e2:	bf00      	nop
 80012e4:	240002e4 	.word	0x240002e4

080012e8 <DMA1_Stream5_IRQHandler>:
void DMA1_Stream5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch1);
 80012e8:	4801      	ldr	r0, [pc, #4]	; (80012f0 <DMA1_Stream5_IRQHandler+0x8>)
 80012ea:	f001 bc0b 	b.w	8002b04 <HAL_DMA_IRQHandler>
 80012ee:	bf00      	nop
 80012f0:	24000508 	.word	0x24000508

080012f4 <OTG_HS_IRQHandler>:
void OTG_HS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 80012f4:	4801      	ldr	r0, [pc, #4]	; (80012fc <OTG_HS_IRQHandler+0x8>)
 80012f6:	f002 ba59 	b.w	80037ac <HAL_PCD_IRQHandler>
 80012fa:	bf00      	nop
 80012fc:	24001ca8 	.word	0x24001ca8

08001300 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8001300:	2001      	movs	r0, #1
 8001302:	4770      	bx	lr

08001304 <_kill>:

int _kill(int pid, int sig)
{
 8001304:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001306:	f00a f957 	bl	800b5b8 <__errno>
 800130a:	2216      	movs	r2, #22
 800130c:	4603      	mov	r3, r0
  return -1;
}
 800130e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  errno = EINVAL;
 8001312:	601a      	str	r2, [r3, #0]
}
 8001314:	bd08      	pop	{r3, pc}
 8001316:	bf00      	nop

08001318 <_exit>:

void _exit (int status)
{
 8001318:	b508      	push	{r3, lr}
  errno = EINVAL;
 800131a:	f00a f94d 	bl	800b5b8 <__errno>
 800131e:	2316      	movs	r3, #22
 8001320:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 8001322:	e7fe      	b.n	8001322 <_exit+0xa>

08001324 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001324:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001326:	1e16      	subs	r6, r2, #0
 8001328:	dd07      	ble.n	800133a <_read+0x16>
 800132a:	460c      	mov	r4, r1
 800132c:	198d      	adds	r5, r1, r6
  {
    *ptr++ = __io_getchar();
 800132e:	f3af 8000 	nop.w
 8001332:	f804 0b01 	strb.w	r0, [r4], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001336:	42a5      	cmp	r5, r4
 8001338:	d1f9      	bne.n	800132e <_read+0xa>
  }

  return len;
}
 800133a:	4630      	mov	r0, r6
 800133c:	bd70      	pop	{r4, r5, r6, pc}
 800133e:	bf00      	nop

08001340 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001340:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001342:	1e16      	subs	r6, r2, #0
 8001344:	dd07      	ble.n	8001356 <_write+0x16>
 8001346:	460c      	mov	r4, r1
 8001348:	198d      	adds	r5, r1, r6
  {
    __io_putchar(*ptr++);
 800134a:	f814 0b01 	ldrb.w	r0, [r4], #1
 800134e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001352:	42ac      	cmp	r4, r5
 8001354:	d1f9      	bne.n	800134a <_write+0xa>
  }
  return len;
}
 8001356:	4630      	mov	r0, r6
 8001358:	bd70      	pop	{r4, r5, r6, pc}
 800135a:	bf00      	nop

0800135c <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 800135c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop

08001364 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8001364:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  return 0;
}
 8001368:	2000      	movs	r0, #0
  st->st_mode = S_IFCHR;
 800136a:	604b      	str	r3, [r1, #4]
}
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop

08001370 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8001370:	2001      	movs	r0, #1
 8001372:	4770      	bx	lr

08001374 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8001374:	2000      	movs	r0, #0
 8001376:	4770      	bx	lr

08001378 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001378:	b538      	push	{r3, r4, r5, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800137a:	4c0d      	ldr	r4, [pc, #52]	; (80013b0 <_sbrk+0x38>)
{
 800137c:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800137e:	490d      	ldr	r1, [pc, #52]	; (80013b4 <_sbrk+0x3c>)
 8001380:	4d0d      	ldr	r5, [pc, #52]	; (80013b8 <_sbrk+0x40>)
  if (NULL == __sbrk_heap_end)
 8001382:	6822      	ldr	r2, [r4, #0]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001384:	1b49      	subs	r1, r1, r5
  if (NULL == __sbrk_heap_end)
 8001386:	b12a      	cbz	r2, 8001394 <_sbrk+0x1c>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001388:	4413      	add	r3, r2
 800138a:	428b      	cmp	r3, r1
 800138c:	d808      	bhi.n	80013a0 <_sbrk+0x28>

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 800138e:	4610      	mov	r0, r2
  __sbrk_heap_end += incr;
 8001390:	6023      	str	r3, [r4, #0]
}
 8001392:	bd38      	pop	{r3, r4, r5, pc}
    __sbrk_heap_end = &_end;
 8001394:	4809      	ldr	r0, [pc, #36]	; (80013bc <_sbrk+0x44>)
 8001396:	4602      	mov	r2, r0
 8001398:	6020      	str	r0, [r4, #0]
  if (__sbrk_heap_end + incr > max_heap)
 800139a:	4413      	add	r3, r2
 800139c:	428b      	cmp	r3, r1
 800139e:	d9f6      	bls.n	800138e <_sbrk+0x16>
    errno = ENOMEM;
 80013a0:	f00a f90a 	bl	800b5b8 <__errno>
 80013a4:	230c      	movs	r3, #12
    return (void *)-1;
 80013a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    errno = ENOMEM;
 80013aa:	6003      	str	r3, [r0, #0]
}
 80013ac:	4610      	mov	r0, r2
 80013ae:	bd38      	pop	{r3, r4, r5, pc}
 80013b0:	2400048c 	.word	0x2400048c
 80013b4:	24050000 	.word	0x24050000
 80013b8:	00000400 	.word	0x00000400
 80013bc:	24002520 	.word	0x24002520

080013c0 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80013c0:	4928      	ldr	r1, [pc, #160]	; (8001464 <SystemInit+0xa4>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80013c2:	4a29      	ldr	r2, [pc, #164]	; (8001468 <SystemInit+0xa8>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80013c4:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80013c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
{
 80013cc:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80013ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
{
 80013d2:	b083      	sub	sp, #12
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80013d4:	6813      	ldr	r3, [r2, #0]
 80013d6:	f003 030f 	and.w	r3, r3, #15
 80013da:	2b06      	cmp	r3, #6
 80013dc:	d805      	bhi.n	80013ea <SystemInit+0x2a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80013de:	6813      	ldr	r3, [r2, #0]
 80013e0:	f023 030f 	bic.w	r3, r3, #15
 80013e4:	f043 0307 	orr.w	r3, r3, #7
 80013e8:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80013ea:	4b20      	ldr	r3, [pc, #128]	; (800146c <SystemInit+0xac>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80013ec:	2400      	movs	r4, #0

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80013ee:	4a20      	ldr	r2, [pc, #128]	; (8001470 <SystemInit+0xb0>)
  RCC->CR |= RCC_CR_HSION;
 80013f0:	6819      	ldr	r1, [r3, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80013f2:	481d      	ldr	r0, [pc, #116]	; (8001468 <SystemInit+0xa8>)
  RCC->CR |= RCC_CR_HSION;
 80013f4:	f041 0101 	orr.w	r1, r1, #1
 80013f8:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00000000;
 80013fa:	611c      	str	r4, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 80013fc:	6819      	ldr	r1, [r3, #0]
 80013fe:	400a      	ands	r2, r1
 8001400:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001402:	6803      	ldr	r3, [r0, #0]
 8001404:	071b      	lsls	r3, r3, #28
 8001406:	d505      	bpl.n	8001414 <SystemInit+0x54>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001408:	6803      	ldr	r3, [r0, #0]
 800140a:	f023 030f 	bic.w	r3, r3, #15
 800140e:	f043 0307 	orr.w	r3, r3, #7
 8001412:	6003      	str	r3, [r0, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001414:	4b15      	ldr	r3, [pc, #84]	; (800146c <SystemInit+0xac>)
 8001416:	2200      	movs	r2, #0
  RCC->PLLCKSELR = 0x02020200;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001418:	4916      	ldr	r1, [pc, #88]	; (8001474 <SystemInit+0xb4>)
  RCC->PLLCKSELR = 0x02020200;
 800141a:	4c17      	ldr	r4, [pc, #92]	; (8001478 <SystemInit+0xb8>)
  RCC->PLLCFGR = 0x01FF0000;
 800141c:	4817      	ldr	r0, [pc, #92]	; (800147c <SystemInit+0xbc>)
  RCC->D1CFGR = 0x00000000;
 800141e:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 8001420:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 8001422:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 8001424:	629c      	str	r4, [r3, #40]	; 0x28
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001426:	f243 04d2 	movw	r4, #12498	; 0x30d2
  RCC->PLLCFGR = 0x01FF0000;
 800142a:	62d8      	str	r0, [r3, #44]	; 0x2c
  RCC->PLL1DIVR = 0x01010280;
 800142c:	6319      	str	r1, [r3, #48]	; 0x30
  RCC->PLL1FRACR = 0x00000000;
 800142e:	635a      	str	r2, [r3, #52]	; 0x34
  RCC->PLL2DIVR = 0x01010280;
 8001430:	6399      	str	r1, [r3, #56]	; 0x38
  RCC->PLL2FRACR = 0x00000000;
 8001432:	63da      	str	r2, [r3, #60]	; 0x3c
  RCC->PLL3DIVR = 0x01010280;
 8001434:	6419      	str	r1, [r3, #64]	; 0x40
  RCC->PLL3FRACR = 0x00000000;
 8001436:	645a      	str	r2, [r3, #68]	; 0x44
  RCC->CR &= 0xFFFBFFFFU;
 8001438:	6819      	ldr	r1, [r3, #0]
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800143a:	4811      	ldr	r0, [pc, #68]	; (8001480 <SystemInit+0xc0>)
  RCC->CR &= 0xFFFBFFFFU;
 800143c:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8001440:	6019      	str	r1, [r3, #0]
  RCC->CIER = 0x00000000;
 8001442:	661a      	str	r2, [r3, #96]	; 0x60
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN);
 8001444:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
 8001448:	f042 42c0 	orr.w	r2, r2, #1610612736	; 0x60000000
 800144c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
  tmpreg = RCC->AHB2ENR;
 8001450:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001454:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 8001456:	9b01      	ldr	r3, [sp, #4]
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001458:	6004      	str	r4, [r0, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800145a:	b003      	add	sp, #12
 800145c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	e000ed00 	.word	0xe000ed00
 8001468:	52002000 	.word	0x52002000
 800146c:	58024400 	.word	0x58024400
 8001470:	eaf6ed7f 	.word	0xeaf6ed7f
 8001474:	01010280 	.word	0x01010280
 8001478:	02020200 	.word	0x02020200
 800147c:	01ff0000 	.word	0x01ff0000
 8001480:	52004000 	.word	0x52004000
 8001484:	00000000 	.word	0x00000000

08001488 <MX_TIM2_Init>:
DMA_HandleTypeDef hdma_tim5_up;
DMA_HandleTypeDef hdma_tim23_ch1;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001488:	b510      	push	{r4, lr}

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800148a:	2300      	movs	r3, #0
  TIM_OC_InitTypeDef sConfigOC = {0};

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800148c:	4c50      	ldr	r4, [pc, #320]	; (80015d0 <MX_TIM2_Init+0x148>)
 800148e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
{
 8001492:	b094      	sub	sp, #80	; 0x50
  htim2.Init.Prescaler = 0;
  htim2.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8001494:	2110      	movs	r1, #16
  htim2.Init.Period = 1431;
 8001496:	f240 5297 	movw	r2, #1431	; 0x597
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800149a:	9303      	str	r3, [sp, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800149c:	930c      	str	r3, [sp, #48]	; 0x30
  htim2.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 800149e:	60a1      	str	r1, [r4, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014a0:	61a3      	str	r3, [r4, #24]
  htim2.Init.Prescaler = 0;
 80014a2:	e9c4 0300 	strd	r0, r3, [r4]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80014a6:	4620      	mov	r0, r4
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014a8:	e9c4 2303 	strd	r2, r3, [r4, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014ac:	e9cd 3304 	strd	r3, r3, [sp, #16]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014b0:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
 80014b4:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
 80014b8:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80014bc:	f004 fe44 	bl	8006148 <HAL_TIM_PWM_Init>
 80014c0:	bb30      	cbnz	r0, 8001510 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80014c2:	2220      	movs	r2, #32
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 80014c4:	2380      	movs	r3, #128	; 0x80
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014c6:	a903      	add	r1, sp, #12
 80014c8:	4841      	ldr	r0, [pc, #260]	; (80015d0 <MX_TIM2_Init+0x148>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80014ca:	9203      	str	r2, [sp, #12]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 80014cc:	9305      	str	r3, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014ce:	f005 fb1d 	bl	8006b0c <HAL_TIMEx_MasterConfigSynchronization>
 80014d2:	bb18      	cbnz	r0, 800151c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 716;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014d4:	2200      	movs	r2, #0
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014d6:	a90c      	add	r1, sp, #48	; 0x30
 80014d8:	483d      	ldr	r0, [pc, #244]	; (80015d0 <MX_TIM2_Init+0x148>)
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014da:	920e      	str	r2, [sp, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014dc:	9210      	str	r2, [sp, #64]	; 0x40
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014de:	ed9f 7b36 	vldr	d7, [pc, #216]	; 80015b8 <MX_TIM2_Init+0x130>
 80014e2:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014e6:	f005 f9f1 	bl	80068cc <HAL_TIM_PWM_ConfigChannel>
 80014ea:	b9a0      	cbnz	r0, 8001516 <MX_TIM2_Init+0x8e>
}
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(timHandle->Instance==TIM2)
 80014ec:	6822      	ldr	r2, [r4, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ee:	2300      	movs	r3, #0
  if(timHandle->Instance==TIM2)
 80014f0:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f4:	930a      	str	r3, [sp, #40]	; 0x28
 80014f6:	e9cd 3306 	strd	r3, r3, [sp, #24]
 80014fa:	e9cd 3308 	strd	r3, r3, [sp, #32]
  if(timHandle->Instance==TIM2)
 80014fe:	d010      	beq.n	8001522 <MX_TIM2_Init+0x9a>

  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }
  else if(timHandle->Instance==TIM3)
 8001500:	4b34      	ldr	r3, [pc, #208]	; (80015d4 <MX_TIM2_Init+0x14c>)
 8001502:	429a      	cmp	r2, r3
 8001504:	d024      	beq.n	8001550 <MX_TIM2_Init+0xc8>

  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }
  else if(timHandle->Instance==TIM8)
 8001506:	4b34      	ldr	r3, [pc, #208]	; (80015d8 <MX_TIM2_Init+0x150>)
 8001508:	429a      	cmp	r2, r3
 800150a:	d03a      	beq.n	8001582 <MX_TIM2_Init+0xfa>
}
 800150c:	b014      	add	sp, #80	; 0x50
 800150e:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001510:	f7ff fd58 	bl	8000fc4 <Error_Handler>
 8001514:	e7d5      	b.n	80014c2 <MX_TIM2_Init+0x3a>
    Error_Handler();
 8001516:	f7ff fd55 	bl	8000fc4 <Error_Handler>
 800151a:	e7e7      	b.n	80014ec <MX_TIM2_Init+0x64>
    Error_Handler();
 800151c:	f7ff fd52 	bl	8000fc4 <Error_Handler>
 8001520:	e7d8      	b.n	80014d4 <MX_TIM2_Init+0x4c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001522:	4b2e      	ldr	r3, [pc, #184]	; (80015dc <MX_TIM2_Init+0x154>)
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001524:	2401      	movs	r4, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001526:	a906      	add	r1, sp, #24
 8001528:	482d      	ldr	r0, [pc, #180]	; (80015e0 <MX_TIM2_Init+0x158>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800152a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800152e:	4322      	orrs	r2, r4
 8001530:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001534:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001538:	940a      	str	r4, [sp, #40]	; 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800153a:	4023      	ands	r3, r4
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800153c:	ed9f 7b20 	vldr	d7, [pc, #128]	; 80015c0 <MX_TIM2_Init+0x138>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001540:	9300      	str	r3, [sp, #0]
 8001542:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001544:	ed8d 7b06 	vstr	d7, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001548:	f001 ff4c 	bl	80033e4 <HAL_GPIO_Init>
}
 800154c:	b014      	add	sp, #80	; 0x50
 800154e:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001550:	4b22      	ldr	r3, [pc, #136]	; (80015dc <MX_TIM2_Init+0x154>)
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001552:	2402      	movs	r4, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001554:	a906      	add	r1, sp, #24
 8001556:	4822      	ldr	r0, [pc, #136]	; (80015e0 <MX_TIM2_Init+0x158>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001558:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800155c:	f042 0201 	orr.w	r2, r2, #1
 8001560:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001564:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001568:	940a      	str	r4, [sp, #40]	; 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800156a:	f003 0301 	and.w	r3, r3, #1
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800156e:	ed9f 7b16 	vldr	d7, [pc, #88]	; 80015c8 <MX_TIM2_Init+0x140>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001572:	9301      	str	r3, [sp, #4]
 8001574:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001576:	ed8d 7b06 	vstr	d7, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800157a:	f001 ff33 	bl	80033e4 <HAL_GPIO_Init>
}
 800157e:	b014      	add	sp, #80	; 0x50
 8001580:	bd10      	pop	{r4, pc}
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001582:	4b16      	ldr	r3, [pc, #88]	; (80015dc <MX_TIM2_Init+0x154>)
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001584:	2403      	movs	r4, #3
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001586:	a906      	add	r1, sp, #24
 8001588:	4816      	ldr	r0, [pc, #88]	; (80015e4 <MX_TIM2_Init+0x15c>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800158a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800158e:	f042 0204 	orr.w	r2, r2, #4
 8001592:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001596:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800159a:	940a      	str	r4, [sp, #40]	; 0x28
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800159c:	f003 0304 	and.w	r3, r3, #4
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80015a0:	ed9f 7b09 	vldr	d7, [pc, #36]	; 80015c8 <MX_TIM2_Init+0x140>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015a4:	9302      	str	r3, [sp, #8]
 80015a6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80015a8:	ed8d 7b06 	vstr	d7, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015ac:	f001 ff1a 	bl	80033e4 <HAL_GPIO_Init>
}
 80015b0:	b014      	add	sp, #80	; 0x50
 80015b2:	bd10      	pop	{r4, pc}
 80015b4:	f3af 8000 	nop.w
 80015b8:	00000060 	.word	0x00000060
 80015bc:	000002cc 	.word	0x000002cc
 80015c0:	00000001 	.word	0x00000001
 80015c4:	00000002 	.word	0x00000002
 80015c8:	00000040 	.word	0x00000040
 80015cc:	00000002 	.word	0x00000002
 80015d0:	240005f8 	.word	0x240005f8
 80015d4:	40000400 	.word	0x40000400
 80015d8:	40010400 	.word	0x40010400
 80015dc:	58024400 	.word	0x58024400
 80015e0:	58020000 	.word	0x58020000
 80015e4:	58020800 	.word	0x58020800

080015e8 <MX_TIM4_Init>:
{
 80015e8:	b500      	push	{lr}
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80015ea:	2300      	movs	r3, #0
{
 80015ec:	b08b      	sub	sp, #44	; 0x2c
  htim4.Instance = TIM4;
 80015ee:	4820      	ldr	r0, [pc, #128]	; (8001670 <MX_TIM4_Init+0x88>)
  htim4.Init.Period = 2;
 80015f0:	2202      	movs	r2, #2
  htim4.Instance = TIM4;
 80015f2:	4920      	ldr	r1, [pc, #128]	; (8001674 <MX_TIM4_Init+0x8c>)
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80015f4:	9304      	str	r3, [sp, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015f6:	9301      	str	r3, [sp, #4]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015f8:	6103      	str	r3, [r0, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015fa:	6183      	str	r3, [r0, #24]
  htim4.Init.Prescaler = 0;
 80015fc:	e9c0 1300 	strd	r1, r3, [r0]
  htim4.Init.Period = 2;
 8001600:	e9c0 3202 	strd	r3, r2, [r0, #8]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001604:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8001608:	e9cd 3307 	strd	r3, r3, [sp, #28]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800160c:	e9cd 3302 	strd	r3, r3, [sp, #8]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001610:	f004 fcd8 	bl	8005fc4 <HAL_TIM_Base_Init>
 8001614:	b9c8      	cbnz	r0, 800164a <MX_TIM4_Init+0x62>
  if (HAL_TIM_OnePulse_Init(&htim4, TIM_OPMODE_SINGLE) != HAL_OK)
 8001616:	2108      	movs	r1, #8
 8001618:	4815      	ldr	r0, [pc, #84]	; (8001670 <MX_TIM4_Init+0x88>)
 800161a:	f004 ff9d 	bl	8006558 <HAL_TIM_OnePulse_Init>
 800161e:	b9e0      	cbnz	r0, 800165a <MX_TIM4_Init+0x72>
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8001620:	2206      	movs	r2, #6
 8001622:	2310      	movs	r3, #16
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8001624:	a904      	add	r1, sp, #16
 8001626:	4812      	ldr	r0, [pc, #72]	; (8001670 <MX_TIM4_Init+0x88>)
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8001628:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 800162c:	f005 f852 	bl	80066d4 <HAL_TIM_SlaveConfigSynchro>
 8001630:	b9d8      	cbnz	r0, 800166a <MX_TIM4_Init+0x82>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001632:	2220      	movs	r2, #32
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001634:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001636:	a901      	add	r1, sp, #4
 8001638:	480d      	ldr	r0, [pc, #52]	; (8001670 <MX_TIM4_Init+0x88>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800163a:	9201      	str	r2, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800163c:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800163e:	f005 fa65 	bl	8006b0c <HAL_TIMEx_MasterConfigSynchronization>
 8001642:	b968      	cbnz	r0, 8001660 <MX_TIM4_Init+0x78>
}
 8001644:	b00b      	add	sp, #44	; 0x2c
 8001646:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800164a:	f7ff fcbb 	bl	8000fc4 <Error_Handler>
  if (HAL_TIM_OnePulse_Init(&htim4, TIM_OPMODE_SINGLE) != HAL_OK)
 800164e:	2108      	movs	r1, #8
 8001650:	4807      	ldr	r0, [pc, #28]	; (8001670 <MX_TIM4_Init+0x88>)
 8001652:	f004 ff81 	bl	8006558 <HAL_TIM_OnePulse_Init>
 8001656:	2800      	cmp	r0, #0
 8001658:	d0e2      	beq.n	8001620 <MX_TIM4_Init+0x38>
    Error_Handler();
 800165a:	f7ff fcb3 	bl	8000fc4 <Error_Handler>
 800165e:	e7df      	b.n	8001620 <MX_TIM4_Init+0x38>
    Error_Handler();
 8001660:	f7ff fcb0 	bl	8000fc4 <Error_Handler>
}
 8001664:	b00b      	add	sp, #44	; 0x2c
 8001666:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800166a:	f7ff fcab 	bl	8000fc4 <Error_Handler>
 800166e:	e7e0      	b.n	8001632 <MX_TIM4_Init+0x4a>
 8001670:	240006dc 	.word	0x240006dc
 8001674:	40000800 	.word	0x40000800

08001678 <MX_TIM5_Init>:
{
 8001678:	b500      	push	{lr}
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800167a:	2300      	movs	r3, #0
{
 800167c:	b093      	sub	sp, #76	; 0x4c
  htim5.Instance = TIM5;
 800167e:	4834      	ldr	r0, [pc, #208]	; (8001750 <MX_TIM5_Init+0xd8>)
  htim5.Init.Period = 17;
 8001680:	2211      	movs	r2, #17
  htim5.Instance = TIM5;
 8001682:	4934      	ldr	r1, [pc, #208]	; (8001754 <MX_TIM5_Init+0xdc>)
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001684:	9304      	str	r3, [sp, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001686:	9301      	str	r3, [sp, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001688:	930a      	str	r3, [sp, #40]	; 0x28
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800168a:	6103      	str	r3, [r0, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800168c:	6183      	str	r3, [r0, #24]
  htim5.Init.Prescaler = 0;
 800168e:	e9c0 1300 	strd	r1, r3, [r0]
  htim5.Init.Period = 17;
 8001692:	e9c0 3202 	strd	r3, r2, [r0, #8]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001696:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800169a:	e9cd 3307 	strd	r3, r3, [sp, #28]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800169e:	e9cd 3302 	strd	r3, r3, [sp, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016a2:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
 80016a6:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
 80016aa:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80016ae:	f004 fc89 	bl	8005fc4 <HAL_TIM_Base_Init>
 80016b2:	bb60      	cbnz	r0, 800170e <MX_TIM5_Init+0x96>
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80016b4:	4826      	ldr	r0, [pc, #152]	; (8001750 <MX_TIM5_Init+0xd8>)
 80016b6:	f004 fd47 	bl	8006148 <HAL_TIM_PWM_Init>
 80016ba:	2800      	cmp	r0, #0
 80016bc:	d12e      	bne.n	800171c <MX_TIM5_Init+0xa4>
  if (HAL_TIM_OnePulse_Init(&htim5, TIM_OPMODE_SINGLE) != HAL_OK)
 80016be:	2108      	movs	r1, #8
 80016c0:	4823      	ldr	r0, [pc, #140]	; (8001750 <MX_TIM5_Init+0xd8>)
 80016c2:	f004 ff49 	bl	8006558 <HAL_TIM_OnePulse_Init>
 80016c6:	2800      	cmp	r0, #0
 80016c8:	d130      	bne.n	800172c <MX_TIM5_Init+0xb4>
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 80016ca:	2206      	movs	r2, #6
 80016cc:	2310      	movs	r3, #16
  if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK)
 80016ce:	a904      	add	r1, sp, #16
 80016d0:	481f      	ldr	r0, [pc, #124]	; (8001750 <MX_TIM5_Init+0xd8>)
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 80016d2:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK)
 80016d6:	f004 fffd 	bl	80066d4 <HAL_TIM_SlaveConfigSynchro>
 80016da:	2800      	cmp	r0, #0
 80016dc:	d131      	bne.n	8001742 <MX_TIM5_Init+0xca>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80016de:	2220      	movs	r2, #32
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016e0:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80016e2:	a901      	add	r1, sp, #4
 80016e4:	481a      	ldr	r0, [pc, #104]	; (8001750 <MX_TIM5_Init+0xd8>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80016e6:	9201      	str	r2, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016e8:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80016ea:	f005 fa0f 	bl	8006b0c <HAL_TIMEx_MasterConfigSynchronization>
 80016ee:	bb28      	cbnz	r0, 800173c <MX_TIM5_Init+0xc4>
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016f0:	2200      	movs	r2, #0
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016f2:	a90a      	add	r1, sp, #40	; 0x28
 80016f4:	4816      	ldr	r0, [pc, #88]	; (8001750 <MX_TIM5_Init+0xd8>)
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016f6:	920c      	str	r2, [sp, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016f8:	920e      	str	r2, [sp, #56]	; 0x38
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016fa:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8001748 <MX_TIM5_Init+0xd0>
 80016fe:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001702:	f005 f8e3 	bl	80068cc <HAL_TIM_PWM_ConfigChannel>
 8001706:	b9a0      	cbnz	r0, 8001732 <MX_TIM5_Init+0xba>
}
 8001708:	b013      	add	sp, #76	; 0x4c
 800170a:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800170e:	f7ff fc59 	bl	8000fc4 <Error_Handler>
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001712:	480f      	ldr	r0, [pc, #60]	; (8001750 <MX_TIM5_Init+0xd8>)
 8001714:	f004 fd18 	bl	8006148 <HAL_TIM_PWM_Init>
 8001718:	2800      	cmp	r0, #0
 800171a:	d0d0      	beq.n	80016be <MX_TIM5_Init+0x46>
    Error_Handler();
 800171c:	f7ff fc52 	bl	8000fc4 <Error_Handler>
  if (HAL_TIM_OnePulse_Init(&htim5, TIM_OPMODE_SINGLE) != HAL_OK)
 8001720:	2108      	movs	r1, #8
 8001722:	480b      	ldr	r0, [pc, #44]	; (8001750 <MX_TIM5_Init+0xd8>)
 8001724:	f004 ff18 	bl	8006558 <HAL_TIM_OnePulse_Init>
 8001728:	2800      	cmp	r0, #0
 800172a:	d0ce      	beq.n	80016ca <MX_TIM5_Init+0x52>
    Error_Handler();
 800172c:	f7ff fc4a 	bl	8000fc4 <Error_Handler>
 8001730:	e7cb      	b.n	80016ca <MX_TIM5_Init+0x52>
    Error_Handler();
 8001732:	f7ff fc47 	bl	8000fc4 <Error_Handler>
}
 8001736:	b013      	add	sp, #76	; 0x4c
 8001738:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800173c:	f7ff fc42 	bl	8000fc4 <Error_Handler>
 8001740:	e7d6      	b.n	80016f0 <MX_TIM5_Init+0x78>
    Error_Handler();
 8001742:	f7ff fc3f 	bl	8000fc4 <Error_Handler>
 8001746:	e7ca      	b.n	80016de <MX_TIM5_Init+0x66>
 8001748:	00000060 	.word	0x00000060
 800174c:	0000000d 	.word	0x0000000d
 8001750:	24000728 	.word	0x24000728
 8001754:	40000c00 	.word	0x40000c00

08001758 <MX_TIM23_Init>:
{
 8001758:	b500      	push	{lr}
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800175a:	2300      	movs	r3, #0
{
 800175c:	b093      	sub	sp, #76	; 0x4c
  htim23.Instance = TIM23;
 800175e:	4834      	ldr	r0, [pc, #208]	; (8001830 <MX_TIM23_Init+0xd8>)
  htim23.Init.Period = 17;
 8001760:	2211      	movs	r2, #17
  htim23.Instance = TIM23;
 8001762:	4934      	ldr	r1, [pc, #208]	; (8001834 <MX_TIM23_Init+0xdc>)
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001764:	9304      	str	r3, [sp, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001766:	9301      	str	r3, [sp, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001768:	930a      	str	r3, [sp, #40]	; 0x28
  htim23.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800176a:	6103      	str	r3, [r0, #16]
  htim23.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800176c:	6183      	str	r3, [r0, #24]
  htim23.Init.Prescaler = 0;
 800176e:	e9c0 1300 	strd	r1, r3, [r0]
  htim23.Init.Period = 17;
 8001772:	e9c0 3202 	strd	r3, r2, [r0, #8]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001776:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800177a:	e9cd 3307 	strd	r3, r3, [sp, #28]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800177e:	e9cd 3302 	strd	r3, r3, [sp, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001782:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
 8001786:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
 800178a:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
  if (HAL_TIM_Base_Init(&htim23) != HAL_OK)
 800178e:	f004 fc19 	bl	8005fc4 <HAL_TIM_Base_Init>
 8001792:	bb60      	cbnz	r0, 80017ee <MX_TIM23_Init+0x96>
  if (HAL_TIM_PWM_Init(&htim23) != HAL_OK)
 8001794:	4826      	ldr	r0, [pc, #152]	; (8001830 <MX_TIM23_Init+0xd8>)
 8001796:	f004 fcd7 	bl	8006148 <HAL_TIM_PWM_Init>
 800179a:	2800      	cmp	r0, #0
 800179c:	d12e      	bne.n	80017fc <MX_TIM23_Init+0xa4>
  if (HAL_TIM_OnePulse_Init(&htim23, TIM_OPMODE_SINGLE) != HAL_OK)
 800179e:	2108      	movs	r1, #8
 80017a0:	4823      	ldr	r0, [pc, #140]	; (8001830 <MX_TIM23_Init+0xd8>)
 80017a2:	f004 fed9 	bl	8006558 <HAL_TIM_OnePulse_Init>
 80017a6:	2800      	cmp	r0, #0
 80017a8:	d130      	bne.n	800180c <MX_TIM23_Init+0xb4>
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 80017aa:	2206      	movs	r2, #6
 80017ac:	f04f 1310 	mov.w	r3, #1048592	; 0x100010
  if (HAL_TIM_SlaveConfigSynchro(&htim23, &sSlaveConfig) != HAL_OK)
 80017b0:	a904      	add	r1, sp, #16
 80017b2:	481f      	ldr	r0, [pc, #124]	; (8001830 <MX_TIM23_Init+0xd8>)
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 80017b4:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim23, &sSlaveConfig) != HAL_OK)
 80017b8:	f004 ff8c 	bl	80066d4 <HAL_TIM_SlaveConfigSynchro>
 80017bc:	2800      	cmp	r0, #0
 80017be:	d130      	bne.n	8001822 <MX_TIM23_Init+0xca>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017c0:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim23, &sMasterConfig) != HAL_OK)
 80017c2:	a901      	add	r1, sp, #4
 80017c4:	481a      	ldr	r0, [pc, #104]	; (8001830 <MX_TIM23_Init+0xd8>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017c6:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017c8:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim23, &sMasterConfig) != HAL_OK)
 80017ca:	f005 f99f 	bl	8006b0c <HAL_TIMEx_MasterConfigSynchronization>
 80017ce:	bb28      	cbnz	r0, 800181c <MX_TIM23_Init+0xc4>
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017d0:	2200      	movs	r2, #0
  if (HAL_TIM_PWM_ConfigChannel(&htim23, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017d2:	a90a      	add	r1, sp, #40	; 0x28
 80017d4:	4816      	ldr	r0, [pc, #88]	; (8001830 <MX_TIM23_Init+0xd8>)
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017d6:	920c      	str	r2, [sp, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017d8:	920e      	str	r2, [sp, #56]	; 0x38
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017da:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8001828 <MX_TIM23_Init+0xd0>
 80017de:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim23, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017e2:	f005 f873 	bl	80068cc <HAL_TIM_PWM_ConfigChannel>
 80017e6:	b9a0      	cbnz	r0, 8001812 <MX_TIM23_Init+0xba>
}
 80017e8:	b013      	add	sp, #76	; 0x4c
 80017ea:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80017ee:	f7ff fbe9 	bl	8000fc4 <Error_Handler>
  if (HAL_TIM_PWM_Init(&htim23) != HAL_OK)
 80017f2:	480f      	ldr	r0, [pc, #60]	; (8001830 <MX_TIM23_Init+0xd8>)
 80017f4:	f004 fca8 	bl	8006148 <HAL_TIM_PWM_Init>
 80017f8:	2800      	cmp	r0, #0
 80017fa:	d0d0      	beq.n	800179e <MX_TIM23_Init+0x46>
    Error_Handler();
 80017fc:	f7ff fbe2 	bl	8000fc4 <Error_Handler>
  if (HAL_TIM_OnePulse_Init(&htim23, TIM_OPMODE_SINGLE) != HAL_OK)
 8001800:	2108      	movs	r1, #8
 8001802:	480b      	ldr	r0, [pc, #44]	; (8001830 <MX_TIM23_Init+0xd8>)
 8001804:	f004 fea8 	bl	8006558 <HAL_TIM_OnePulse_Init>
 8001808:	2800      	cmp	r0, #0
 800180a:	d0ce      	beq.n	80017aa <MX_TIM23_Init+0x52>
    Error_Handler();
 800180c:	f7ff fbda 	bl	8000fc4 <Error_Handler>
 8001810:	e7cb      	b.n	80017aa <MX_TIM23_Init+0x52>
    Error_Handler();
 8001812:	f7ff fbd7 	bl	8000fc4 <Error_Handler>
}
 8001816:	b013      	add	sp, #76	; 0x4c
 8001818:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800181c:	f7ff fbd2 	bl	8000fc4 <Error_Handler>
 8001820:	e7d6      	b.n	80017d0 <MX_TIM23_Init+0x78>
    Error_Handler();
 8001822:	f7ff fbcf 	bl	8000fc4 <Error_Handler>
 8001826:	e7cb      	b.n	80017c0 <MX_TIM23_Init+0x68>
 8001828:	00000060 	.word	0x00000060
 800182c:	0000000d 	.word	0x0000000d
 8001830:	24000644 	.word	0x24000644
 8001834:	4000e000 	.word	0x4000e000

08001838 <HAL_TIM_PWM_MspInit>:
  if(tim_pwmHandle->Instance==TIM2)
 8001838:	6803      	ldr	r3, [r0, #0]
 800183a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800183e:	d000      	beq.n	8001842 <HAL_TIM_PWM_MspInit+0xa>
 8001840:	4770      	bx	lr
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001842:	4b08      	ldr	r3, [pc, #32]	; (8001864 <HAL_TIM_PWM_MspInit+0x2c>)
{
 8001844:	b082      	sub	sp, #8
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001846:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 800184a:	f042 0201 	orr.w	r2, r2, #1
 800184e:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8001852:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001856:	f003 0301 	and.w	r3, r3, #1
 800185a:	9301      	str	r3, [sp, #4]
 800185c:	9b01      	ldr	r3, [sp, #4]
}
 800185e:	b002      	add	sp, #8
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop
 8001864:	58024400 	.word	0x58024400

08001868 <HAL_TIM_Base_MspInit>:
  if(tim_baseHandle->Instance==TIM3)
 8001868:	4a5d      	ldr	r2, [pc, #372]	; (80019e0 <HAL_TIM_Base_MspInit+0x178>)
 800186a:	6803      	ldr	r3, [r0, #0]
 800186c:	4293      	cmp	r3, r2
{
 800186e:	b570      	push	{r4, r5, r6, lr}
 8001870:	b086      	sub	sp, #24
  if(tim_baseHandle->Instance==TIM3)
 8001872:	d01d      	beq.n	80018b0 <HAL_TIM_Base_MspInit+0x48>
  else if(tim_baseHandle->Instance==TIM4)
 8001874:	4a5b      	ldr	r2, [pc, #364]	; (80019e4 <HAL_TIM_Base_MspInit+0x17c>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d00b      	beq.n	8001892 <HAL_TIM_Base_MspInit+0x2a>
  else if(tim_baseHandle->Instance==TIM5)
 800187a:	4a5b      	ldr	r2, [pc, #364]	; (80019e8 <HAL_TIM_Base_MspInit+0x180>)
 800187c:	4604      	mov	r4, r0
 800187e:	4293      	cmp	r3, r2
 8001880:	d034      	beq.n	80018ec <HAL_TIM_Base_MspInit+0x84>
  else if(tim_baseHandle->Instance==TIM8)
 8001882:	4a5a      	ldr	r2, [pc, #360]	; (80019ec <HAL_TIM_Base_MspInit+0x184>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d022      	beq.n	80018ce <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM23)
 8001888:	4a59      	ldr	r2, [pc, #356]	; (80019f0 <HAL_TIM_Base_MspInit+0x188>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d075      	beq.n	800197a <HAL_TIM_Base_MspInit+0x112>
}
 800188e:	b006      	add	sp, #24
 8001890:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001892:	4b58      	ldr	r3, [pc, #352]	; (80019f4 <HAL_TIM_Base_MspInit+0x18c>)
 8001894:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8001898:	f042 0204 	orr.w	r2, r2, #4
 800189c:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 80018a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80018a4:	f003 0304 	and.w	r3, r3, #4
 80018a8:	9302      	str	r3, [sp, #8]
 80018aa:	9b02      	ldr	r3, [sp, #8]
}
 80018ac:	b006      	add	sp, #24
 80018ae:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_TIM3_CLK_ENABLE();
 80018b0:	4b50      	ldr	r3, [pc, #320]	; (80019f4 <HAL_TIM_Base_MspInit+0x18c>)
 80018b2:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 80018b6:	f042 0202 	orr.w	r2, r2, #2
 80018ba:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 80018be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80018c2:	f003 0302 	and.w	r3, r3, #2
 80018c6:	9301      	str	r3, [sp, #4]
 80018c8:	9b01      	ldr	r3, [sp, #4]
}
 80018ca:	b006      	add	sp, #24
 80018cc:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_TIM8_CLK_ENABLE();
 80018ce:	4b49      	ldr	r3, [pc, #292]	; (80019f4 <HAL_TIM_Base_MspInit+0x18c>)
 80018d0:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 80018d4:	f042 0202 	orr.w	r2, r2, #2
 80018d8:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 80018dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80018e0:	f003 0302 	and.w	r3, r3, #2
 80018e4:	9304      	str	r3, [sp, #16]
 80018e6:	9b04      	ldr	r3, [sp, #16]
}
 80018e8:	b006      	add	sp, #24
 80018ea:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_TIM5_CLK_ENABLE();
 80018ec:	4a41      	ldr	r2, [pc, #260]	; (80019f4 <HAL_TIM_Base_MspInit+0x18c>)
    hdma_tim5_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018ee:	2300      	movs	r3, #0
    hdma_tim5_ch1.Instance = DMA1_Stream5;
 80018f0:	4e41      	ldr	r6, [pc, #260]	; (80019f8 <HAL_TIM_Base_MspInit+0x190>)
    __HAL_RCC_TIM5_CLK_ENABLE();
 80018f2:	f8d2 10e8 	ldr.w	r1, [r2, #232]	; 0xe8
    hdma_tim5_ch1.Instance = DMA1_Stream5;
 80018f6:	4841      	ldr	r0, [pc, #260]	; (80019fc <HAL_TIM_Base_MspInit+0x194>)
    __HAL_RCC_TIM5_CLK_ENABLE();
 80018f8:	f041 0108 	orr.w	r1, r1, #8
    hdma_tim5_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80018fc:	e9c6 3302 	strd	r3, r3, [r6, #8]
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001900:	f8c2 10e8 	str.w	r1, [r2, #232]	; 0xe8
    hdma_tim5_ch1.Init.Request = DMA_REQUEST_TIM5_CH1;
 8001904:	2137      	movs	r1, #55	; 0x37
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001906:	f8d2 20e8 	ldr.w	r2, [r2, #232]	; 0xe8
    hdma_tim5_ch1.Init.Request = DMA_REQUEST_TIM5_CH1;
 800190a:	6071      	str	r1, [r6, #4]
    hdma_tim5_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800190c:	f44f 6180 	mov.w	r1, #1024	; 0x400
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001910:	f002 0208 	and.w	r2, r2, #8
    hdma_tim5_ch1.Instance = DMA1_Stream5;
 8001914:	6030      	str	r0, [r6, #0]
    hdma_tim5_ch1.Init.Mode = DMA_NORMAL;
 8001916:	61f3      	str	r3, [r6, #28]
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001918:	9203      	str	r2, [sp, #12]
    hdma_tim5_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800191a:	f44f 6200 	mov.w	r2, #2048	; 0x800
    __HAL_RCC_TIM5_CLK_ENABLE();
 800191e:	9803      	ldr	r0, [sp, #12]
    if (HAL_DMA_Init(&hdma_tim5_ch1) != HAL_OK)
 8001920:	4630      	mov	r0, r6
    hdma_tim5_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001922:	6273      	str	r3, [r6, #36]	; 0x24
    hdma_tim5_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001924:	e9c6 1204 	strd	r1, r2, [r6, #16]
    hdma_tim5_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001928:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    hdma_tim5_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800192c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    hdma_tim5_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001930:	61b1      	str	r1, [r6, #24]
    hdma_tim5_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001932:	6232      	str	r2, [r6, #32]
    if (HAL_DMA_Init(&hdma_tim5_ch1) != HAL_OK)
 8001934:	f000 fc00 	bl	8002138 <HAL_DMA_Init>
 8001938:	2800      	cmp	r0, #0
 800193a:	d14b      	bne.n	80019d4 <HAL_TIM_Base_MspInit+0x16c>
    hdma_tim5_up.Instance = DMA1_Stream3;
 800193c:	4d30      	ldr	r5, [pc, #192]	; (8001a00 <HAL_TIM_Base_MspInit+0x198>)
    hdma_tim5_up.Init.Request = DMA_REQUEST_TIM5_UP;
 800193e:	223b      	movs	r2, #59	; 0x3b
    hdma_tim5_up.Instance = DMA1_Stream3;
 8001940:	4930      	ldr	r1, [pc, #192]	; (8001a04 <HAL_TIM_Base_MspInit+0x19c>)
    hdma_tim5_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001942:	2300      	movs	r3, #0
    hdma_tim5_up.Init.Request = DMA_REQUEST_TIM5_UP;
 8001944:	606a      	str	r2, [r5, #4]
    hdma_tim5_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001946:	f44f 6200 	mov.w	r2, #2048	; 0x800
    hdma_tim5_up.Instance = DMA1_Stream3;
 800194a:	6029      	str	r1, [r5, #0]
    hdma_tim5_up.Init.MemInc = DMA_MINC_ENABLE;
 800194c:	f44f 6180 	mov.w	r1, #1024	; 0x400
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim5_ch1);
 8001950:	6266      	str	r6, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim5_up) != HAL_OK)
 8001952:	4628      	mov	r0, r5
    hdma_tim5_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001954:	60ab      	str	r3, [r5, #8]
    hdma_tim5_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8001956:	60eb      	str	r3, [r5, #12]
    hdma_tim5_up.Init.Mode = DMA_NORMAL;
 8001958:	61eb      	str	r3, [r5, #28]
    hdma_tim5_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800195a:	626b      	str	r3, [r5, #36]	; 0x24
    hdma_tim5_up.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800195c:	f44f 3340 	mov.w	r3, #196608	; 0x30000
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim5_ch1);
 8001960:	63b4      	str	r4, [r6, #56]	; 0x38
    hdma_tim5_up.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001962:	622b      	str	r3, [r5, #32]
    hdma_tim5_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001964:	e9c5 1204 	strd	r1, r2, [r5, #16]
    hdma_tim5_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001968:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800196c:	61aa      	str	r2, [r5, #24]
    if (HAL_DMA_Init(&hdma_tim5_up) != HAL_OK)
 800196e:	f000 fbe3 	bl	8002138 <HAL_DMA_Init>
 8001972:	bb60      	cbnz	r0, 80019ce <HAL_TIM_Base_MspInit+0x166>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim5_up);
 8001974:	6225      	str	r5, [r4, #32]
 8001976:	63ac      	str	r4, [r5, #56]	; 0x38
 8001978:	e789      	b.n	800188e <HAL_TIM_Base_MspInit+0x26>
    __HAL_RCC_TIM23_CLK_ENABLE();
 800197a:	4a1e      	ldr	r2, [pc, #120]	; (80019f4 <HAL_TIM_Base_MspInit+0x18c>)
    hdma_tim23_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800197c:	2300      	movs	r3, #0
    hdma_tim23_ch1.Instance = DMA1_Stream2;
 800197e:	4d22      	ldr	r5, [pc, #136]	; (8001a08 <HAL_TIM_Base_MspInit+0x1a0>)
    __HAL_RCC_TIM23_CLK_ENABLE();
 8001980:	f8d2 10ec 	ldr.w	r1, [r2, #236]	; 0xec
    hdma_tim23_ch1.Instance = DMA1_Stream2;
 8001984:	4821      	ldr	r0, [pc, #132]	; (8001a0c <HAL_TIM_Base_MspInit+0x1a4>)
    __HAL_RCC_TIM23_CLK_ENABLE();
 8001986:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
    hdma_tim23_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800198a:	e9c5 3302 	strd	r3, r3, [r5, #8]
    __HAL_RCC_TIM23_CLK_ENABLE();
 800198e:	f8c2 10ec 	str.w	r1, [r2, #236]	; 0xec
    hdma_tim23_ch1.Init.Request = DMA_REQUEST_TIM23_CH1;
 8001992:	217e      	movs	r1, #126	; 0x7e
    __HAL_RCC_TIM23_CLK_ENABLE();
 8001994:	f8d2 20ec 	ldr.w	r2, [r2, #236]	; 0xec
    hdma_tim23_ch1.Init.Request = DMA_REQUEST_TIM23_CH1;
 8001998:	6069      	str	r1, [r5, #4]
    hdma_tim23_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800199a:	f44f 6180 	mov.w	r1, #1024	; 0x400
    __HAL_RCC_TIM23_CLK_ENABLE();
 800199e:	f002 7280 	and.w	r2, r2, #16777216	; 0x1000000
    hdma_tim23_ch1.Instance = DMA1_Stream2;
 80019a2:	6028      	str	r0, [r5, #0]
    hdma_tim23_ch1.Init.Mode = DMA_NORMAL;
 80019a4:	61eb      	str	r3, [r5, #28]
    __HAL_RCC_TIM23_CLK_ENABLE();
 80019a6:	9205      	str	r2, [sp, #20]
    hdma_tim23_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80019a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
    __HAL_RCC_TIM23_CLK_ENABLE();
 80019ac:	9805      	ldr	r0, [sp, #20]
    if (HAL_DMA_Init(&hdma_tim23_ch1) != HAL_OK)
 80019ae:	4628      	mov	r0, r5
    hdma_tim23_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80019b0:	626b      	str	r3, [r5, #36]	; 0x24
    hdma_tim23_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80019b2:	e9c5 1204 	strd	r1, r2, [r5, #16]
    hdma_tim23_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80019b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    hdma_tim23_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80019ba:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    hdma_tim23_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80019be:	61a9      	str	r1, [r5, #24]
    hdma_tim23_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80019c0:	622a      	str	r2, [r5, #32]
    if (HAL_DMA_Init(&hdma_tim23_ch1) != HAL_OK)
 80019c2:	f000 fbb9 	bl	8002138 <HAL_DMA_Init>
 80019c6:	b940      	cbnz	r0, 80019da <HAL_TIM_Base_MspInit+0x172>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim23_ch1);
 80019c8:	6265      	str	r5, [r4, #36]	; 0x24
 80019ca:	63ac      	str	r4, [r5, #56]	; 0x38
}
 80019cc:	e75f      	b.n	800188e <HAL_TIM_Base_MspInit+0x26>
      Error_Handler();
 80019ce:	f7ff faf9 	bl	8000fc4 <Error_Handler>
 80019d2:	e7cf      	b.n	8001974 <HAL_TIM_Base_MspInit+0x10c>
      Error_Handler();
 80019d4:	f7ff faf6 	bl	8000fc4 <Error_Handler>
 80019d8:	e7b0      	b.n	800193c <HAL_TIM_Base_MspInit+0xd4>
      Error_Handler();
 80019da:	f7ff faf3 	bl	8000fc4 <Error_Handler>
 80019de:	e7f3      	b.n	80019c8 <HAL_TIM_Base_MspInit+0x160>
 80019e0:	40000400 	.word	0x40000400
 80019e4:	40000800 	.word	0x40000800
 80019e8:	40000c00 	.word	0x40000c00
 80019ec:	40010400 	.word	0x40010400
 80019f0:	4000e000 	.word	0x4000e000
 80019f4:	58024400 	.word	0x58024400
 80019f8:	24000508 	.word	0x24000508
 80019fc:	40020088 	.word	0x40020088
 8001a00:	24000580 	.word	0x24000580
 8001a04:	40020058 	.word	0x40020058
 8001a08:	24000490 	.word	0x24000490
 8001a0c:	40020040 	.word	0x40020040

08001a10 <HAL_TIM_MspPostInit>:
  if(timHandle->Instance==TIM2)
 8001a10:	6802      	ldr	r2, [r0, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a12:	2300      	movs	r3, #0
{
 8001a14:	b510      	push	{r4, lr}
  if(timHandle->Instance==TIM2)
 8001a16:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
{
 8001a1a:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a1c:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8001a20:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8001a24:	9308      	str	r3, [sp, #32]
  if(timHandle->Instance==TIM2)
 8001a26:	d007      	beq.n	8001a38 <HAL_TIM_MspPostInit+0x28>
  else if(timHandle->Instance==TIM3)
 8001a28:	4b2d      	ldr	r3, [pc, #180]	; (8001ae0 <HAL_TIM_MspPostInit+0xd0>)
 8001a2a:	429a      	cmp	r2, r3
 8001a2c:	d01b      	beq.n	8001a66 <HAL_TIM_MspPostInit+0x56>
  else if(timHandle->Instance==TIM8)
 8001a2e:	4b2d      	ldr	r3, [pc, #180]	; (8001ae4 <HAL_TIM_MspPostInit+0xd4>)
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d031      	beq.n	8001a98 <HAL_TIM_MspPostInit+0x88>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001a34:	b00a      	add	sp, #40	; 0x28
 8001a36:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a38:	4b2b      	ldr	r3, [pc, #172]	; (8001ae8 <HAL_TIM_MspPostInit+0xd8>)
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001a3a:	2401      	movs	r4, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a3c:	a904      	add	r1, sp, #16
 8001a3e:	482b      	ldr	r0, [pc, #172]	; (8001aec <HAL_TIM_MspPostInit+0xdc>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a40:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001a44:	4322      	orrs	r2, r4
 8001a46:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001a4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001a4e:	9408      	str	r4, [sp, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a50:	4023      	ands	r3, r4
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001a52:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 8001ad0 <HAL_TIM_MspPostInit+0xc0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a56:	9301      	str	r3, [sp, #4]
 8001a58:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001a5a:	ed8d 7b04 	vstr	d7, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a5e:	f001 fcc1 	bl	80033e4 <HAL_GPIO_Init>
}
 8001a62:	b00a      	add	sp, #40	; 0x28
 8001a64:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a66:	4b20      	ldr	r3, [pc, #128]	; (8001ae8 <HAL_TIM_MspPostInit+0xd8>)
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001a68:	2402      	movs	r4, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a6a:	a904      	add	r1, sp, #16
 8001a6c:	481f      	ldr	r0, [pc, #124]	; (8001aec <HAL_TIM_MspPostInit+0xdc>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a6e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001a72:	f042 0201 	orr.w	r2, r2, #1
 8001a76:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001a7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001a7e:	9408      	str	r4, [sp, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a80:	f003 0301 	and.w	r3, r3, #1
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001a84:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8001ad8 <HAL_TIM_MspPostInit+0xc8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a88:	9302      	str	r3, [sp, #8]
 8001a8a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001a8c:	ed8d 7b04 	vstr	d7, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a90:	f001 fca8 	bl	80033e4 <HAL_GPIO_Init>
}
 8001a94:	b00a      	add	sp, #40	; 0x28
 8001a96:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a98:	4b13      	ldr	r3, [pc, #76]	; (8001ae8 <HAL_TIM_MspPostInit+0xd8>)
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001a9a:	2403      	movs	r4, #3
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a9c:	a904      	add	r1, sp, #16
 8001a9e:	4814      	ldr	r0, [pc, #80]	; (8001af0 <HAL_TIM_MspPostInit+0xe0>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001aa0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001aa4:	f042 0204 	orr.w	r2, r2, #4
 8001aa8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001aac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001ab0:	9408      	str	r4, [sp, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ab2:	f003 0304 	and.w	r3, r3, #4
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001ab6:	ed9f 7b08 	vldr	d7, [pc, #32]	; 8001ad8 <HAL_TIM_MspPostInit+0xc8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001aba:	9303      	str	r3, [sp, #12]
 8001abc:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001abe:	ed8d 7b04 	vstr	d7, [sp, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ac2:	f001 fc8f 	bl	80033e4 <HAL_GPIO_Init>
}
 8001ac6:	b00a      	add	sp, #40	; 0x28
 8001ac8:	bd10      	pop	{r4, pc}
 8001aca:	bf00      	nop
 8001acc:	f3af 8000 	nop.w
 8001ad0:	00000001 	.word	0x00000001
 8001ad4:	00000002 	.word	0x00000002
 8001ad8:	00000040 	.word	0x00000040
 8001adc:	00000002 	.word	0x00000002
 8001ae0:	40000400 	.word	0x40000400
 8001ae4:	40010400 	.word	0x40010400
 8001ae8:	58024400 	.word	0x58024400
 8001aec:	58020000 	.word	0x58020000
 8001af0:	58020800 	.word	0x58020800
 8001af4:	00000000 	.word	0x00000000

08001af8 <MX_TIM3_Init>:
{
 8001af8:	b500      	push	{lr}
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001afa:	2300      	movs	r3, #0
{
 8001afc:	b093      	sub	sp, #76	; 0x4c
  htim3.Instance = TIM3;
 8001afe:	4838      	ldr	r0, [pc, #224]	; (8001be0 <MX_TIM3_Init+0xe8>)
  htim3.Init.Period = 479;
 8001b00:	f240 12df 	movw	r2, #479	; 0x1df
  htim3.Instance = TIM3;
 8001b04:	4937      	ldr	r1, [pc, #220]	; (8001be4 <MX_TIM3_Init+0xec>)
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001b06:	9304      	str	r3, [sp, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b08:	9301      	str	r3, [sp, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b0a:	930a      	str	r3, [sp, #40]	; 0x28
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b0c:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b0e:	6183      	str	r3, [r0, #24]
  htim3.Init.Prescaler = 0;
 8001b10:	e9c0 1300 	strd	r1, r3, [r0]
  htim3.Init.Period = 479;
 8001b14:	e9c0 3202 	strd	r3, r2, [r0, #8]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001b18:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8001b1c:	e9cd 3307 	strd	r3, r3, [sp, #28]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b20:	e9cd 3302 	strd	r3, r3, [sp, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b24:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
 8001b28:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
 8001b2c:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001b30:	f004 fa48 	bl	8005fc4 <HAL_TIM_Base_Init>
 8001b34:	2800      	cmp	r0, #0
 8001b36:	d12e      	bne.n	8001b96 <MX_TIM3_Init+0x9e>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001b38:	4829      	ldr	r0, [pc, #164]	; (8001be0 <MX_TIM3_Init+0xe8>)
 8001b3a:	f004 fb05 	bl	8006148 <HAL_TIM_PWM_Init>
 8001b3e:	2800      	cmp	r0, #0
 8001b40:	d130      	bne.n	8001ba4 <MX_TIM3_Init+0xac>
  if (HAL_TIM_OnePulse_Init(&htim3, TIM_OPMODE_SINGLE) != HAL_OK)
 8001b42:	2108      	movs	r1, #8
 8001b44:	4826      	ldr	r0, [pc, #152]	; (8001be0 <MX_TIM3_Init+0xe8>)
 8001b46:	f004 fd07 	bl	8006558 <HAL_TIM_OnePulse_Init>
 8001b4a:	2800      	cmp	r0, #0
 8001b4c:	d132      	bne.n	8001bb4 <MX_TIM3_Init+0xbc>
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8001b4e:	2206      	movs	r2, #6
 8001b50:	2310      	movs	r3, #16
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8001b52:	a904      	add	r1, sp, #16
 8001b54:	4822      	ldr	r0, [pc, #136]	; (8001be0 <MX_TIM3_Init+0xe8>)
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8001b56:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8001b5a:	f004 fdbb 	bl	80066d4 <HAL_TIM_SlaveConfigSynchro>
 8001b5e:	2800      	cmp	r0, #0
 8001b60:	d136      	bne.n	8001bd0 <MX_TIM3_Init+0xd8>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b62:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b64:	a901      	add	r1, sp, #4
 8001b66:	481e      	ldr	r0, [pc, #120]	; (8001be0 <MX_TIM3_Init+0xe8>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b68:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b6a:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b6c:	f004 ffce 	bl	8006b0c <HAL_TIMEx_MasterConfigSynchronization>
 8001b70:	bb58      	cbnz	r0, 8001bca <MX_TIM3_Init+0xd2>
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b72:	2200      	movs	r2, #0
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b74:	a90a      	add	r1, sp, #40	; 0x28
 8001b76:	481a      	ldr	r0, [pc, #104]	; (8001be0 <MX_TIM3_Init+0xe8>)
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b78:	920c      	str	r2, [sp, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b7a:	920e      	str	r2, [sp, #56]	; 0x38
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b7c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8001bd8 <MX_TIM3_Init+0xe0>
 8001b80:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b84:	f004 fea2 	bl	80068cc <HAL_TIM_PWM_ConfigChannel>
 8001b88:	b9b8      	cbnz	r0, 8001bba <MX_TIM3_Init+0xc2>
  HAL_TIM_MspPostInit(&htim3);
 8001b8a:	4815      	ldr	r0, [pc, #84]	; (8001be0 <MX_TIM3_Init+0xe8>)
 8001b8c:	f7ff ff40 	bl	8001a10 <HAL_TIM_MspPostInit>
}
 8001b90:	b013      	add	sp, #76	; 0x4c
 8001b92:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001b96:	f7ff fa15 	bl	8000fc4 <Error_Handler>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001b9a:	4811      	ldr	r0, [pc, #68]	; (8001be0 <MX_TIM3_Init+0xe8>)
 8001b9c:	f004 fad4 	bl	8006148 <HAL_TIM_PWM_Init>
 8001ba0:	2800      	cmp	r0, #0
 8001ba2:	d0ce      	beq.n	8001b42 <MX_TIM3_Init+0x4a>
    Error_Handler();
 8001ba4:	f7ff fa0e 	bl	8000fc4 <Error_Handler>
  if (HAL_TIM_OnePulse_Init(&htim3, TIM_OPMODE_SINGLE) != HAL_OK)
 8001ba8:	2108      	movs	r1, #8
 8001baa:	480d      	ldr	r0, [pc, #52]	; (8001be0 <MX_TIM3_Init+0xe8>)
 8001bac:	f004 fcd4 	bl	8006558 <HAL_TIM_OnePulse_Init>
 8001bb0:	2800      	cmp	r0, #0
 8001bb2:	d0cc      	beq.n	8001b4e <MX_TIM3_Init+0x56>
    Error_Handler();
 8001bb4:	f7ff fa06 	bl	8000fc4 <Error_Handler>
 8001bb8:	e7c9      	b.n	8001b4e <MX_TIM3_Init+0x56>
    Error_Handler();
 8001bba:	f7ff fa03 	bl	8000fc4 <Error_Handler>
  HAL_TIM_MspPostInit(&htim3);
 8001bbe:	4808      	ldr	r0, [pc, #32]	; (8001be0 <MX_TIM3_Init+0xe8>)
 8001bc0:	f7ff ff26 	bl	8001a10 <HAL_TIM_MspPostInit>
}
 8001bc4:	b013      	add	sp, #76	; 0x4c
 8001bc6:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001bca:	f7ff f9fb 	bl	8000fc4 <Error_Handler>
 8001bce:	e7d0      	b.n	8001b72 <MX_TIM3_Init+0x7a>
    Error_Handler();
 8001bd0:	f7ff f9f8 	bl	8000fc4 <Error_Handler>
 8001bd4:	e7c5      	b.n	8001b62 <MX_TIM3_Init+0x6a>
 8001bd6:	bf00      	nop
 8001bd8:	00000060 	.word	0x00000060
 8001bdc:	00000001 	.word	0x00000001
 8001be0:	24000690 	.word	0x24000690
 8001be4:	40000400 	.word	0x40000400

08001be8 <MX_TIM8_Init>:
{
 8001be8:	b510      	push	{r4, lr}
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001bea:	2400      	movs	r4, #0
{
 8001bec:	b0a0      	sub	sp, #128	; 0x80
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001bee:	2234      	movs	r2, #52	; 0x34
 8001bf0:	4621      	mov	r1, r4
 8001bf2:	a812      	add	r0, sp, #72	; 0x48
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001bf4:	9404      	str	r4, [sp, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bf6:	9400      	str	r4, [sp, #0]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bf8:	940a      	str	r4, [sp, #40]	; 0x28
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001bfa:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8001bfe:	e9cd 4407 	strd	r4, r4, [sp, #28]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c02:	e9cd 4401 	strd	r4, r4, [sp, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c06:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 8001c0a:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
 8001c0e:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001c12:	f009 fc6e 	bl	800b4f2 <memset>
  htim8.Instance = TIM8;
 8001c16:	4846      	ldr	r0, [pc, #280]	; (8001d30 <MX_TIM8_Init+0x148>)
 8001c18:	4b46      	ldr	r3, [pc, #280]	; (8001d34 <MX_TIM8_Init+0x14c>)
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c1a:	6104      	str	r4, [r0, #16]
  htim8.Instance = TIM8;
 8001c1c:	6003      	str	r3, [r0, #0]
  htim8.Init.Period = 53;
 8001c1e:	2335      	movs	r3, #53	; 0x35
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c20:	6184      	str	r4, [r0, #24]
  htim8.Init.Period = 53;
 8001c22:	60c3      	str	r3, [r0, #12]
  htim8.Init.RepetitionCounter = 7;
 8001c24:	2307      	movs	r3, #7
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c26:	e9c0 4401 	strd	r4, r4, [r0, #4]
  htim8.Init.RepetitionCounter = 7;
 8001c2a:	6143      	str	r3, [r0, #20]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001c2c:	f004 f9ca 	bl	8005fc4 <HAL_TIM_Base_Init>
 8001c30:	2800      	cmp	r0, #0
 8001c32:	d14d      	bne.n	8001cd0 <MX_TIM8_Init+0xe8>
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001c34:	483e      	ldr	r0, [pc, #248]	; (8001d30 <MX_TIM8_Init+0x148>)
 8001c36:	f004 fa87 	bl	8006148 <HAL_TIM_PWM_Init>
 8001c3a:	2800      	cmp	r0, #0
 8001c3c:	d14f      	bne.n	8001cde <MX_TIM8_Init+0xf6>
  if (HAL_TIM_OnePulse_Init(&htim8, TIM_OPMODE_SINGLE) != HAL_OK)
 8001c3e:	2108      	movs	r1, #8
 8001c40:	483b      	ldr	r0, [pc, #236]	; (8001d30 <MX_TIM8_Init+0x148>)
 8001c42:	f004 fc89 	bl	8006558 <HAL_TIM_OnePulse_Init>
 8001c46:	2800      	cmp	r0, #0
 8001c48:	d151      	bne.n	8001cee <MX_TIM8_Init+0x106>
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8001c4a:	2206      	movs	r2, #6
 8001c4c:	2320      	movs	r3, #32
  if (HAL_TIM_SlaveConfigSynchro(&htim8, &sSlaveConfig) != HAL_OK)
 8001c4e:	a904      	add	r1, sp, #16
 8001c50:	4837      	ldr	r0, [pc, #220]	; (8001d30 <MX_TIM8_Init+0x148>)
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8001c52:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim8, &sSlaveConfig) != HAL_OK)
 8001c56:	f004 fd3d 	bl	80066d4 <HAL_TIM_SlaveConfigSynchro>
 8001c5a:	2800      	cmp	r0, #0
 8001c5c:	d157      	bne.n	8001d0e <MX_TIM8_Init+0x126>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1REF;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	2240      	movs	r2, #64	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001c62:	4669      	mov	r1, sp
 8001c64:	4832      	ldr	r0, [pc, #200]	; (8001d30 <MX_TIM8_Init+0x148>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1REF;
 8001c66:	e9cd 2300 	strd	r2, r3, [sp]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001c6e:	f004 ff4d 	bl	8006b0c <HAL_TIMEx_MasterConfigSynchronization>
 8001c72:	2800      	cmp	r0, #0
 8001c74:	d148      	bne.n	8001d08 <MX_TIM8_Init+0x120>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c76:	2060      	movs	r0, #96	; 0x60
  sConfigOC.Pulse = 40;
 8001c78:	2328      	movs	r3, #40	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c7a:	2200      	movs	r2, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c7c:	900a      	str	r0, [sp, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c7e:	eb0d 0103 	add.w	r1, sp, r3
 8001c82:	482b      	ldr	r0, [pc, #172]	; (8001d30 <MX_TIM8_Init+0x148>)
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001c84:	920d      	str	r2, [sp, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001c86:	9210      	str	r2, [sp, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001c88:	ed9f 7b23 	vldr	d7, [pc, #140]	; 8001d18 <MX_TIM8_Init+0x130>
  sConfigOC.Pulse = 40;
 8001c8c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001c90:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c94:	f004 fe1a 	bl	80068cc <HAL_TIM_PWM_ConfigChannel>
 8001c98:	2800      	cmp	r0, #0
 8001c9a:	d132      	bne.n	8001d02 <MX_TIM8_Init+0x11a>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001c9c:	2300      	movs	r3, #0
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001c9e:	a912      	add	r1, sp, #72	; 0x48
 8001ca0:	4823      	ldr	r0, [pc, #140]	; (8001d30 <MX_TIM8_Init+0x148>)
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001ca2:	9318      	str	r3, [sp, #96]	; 0x60
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001ca4:	931c      	str	r3, [sp, #112]	; 0x70
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001ca6:	931e      	str	r3, [sp, #120]	; 0x78
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001ca8:	ed9f 7b1d 	vldr	d7, [pc, #116]	; 8001d20 <MX_TIM8_Init+0x138>
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001cac:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
  sBreakDeadTimeConfig.DeadTime = 0;
 8001cb0:	e9cd 3314 	strd	r3, r3, [sp, #80]	; 0x50
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001cb4:	ed8d 7b16 	vstr	d7, [sp, #88]	; 0x58
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001cb8:	ed9f 7b1b 	vldr	d7, [pc, #108]	; 8001d28 <MX_TIM8_Init+0x140>
 8001cbc:	ed8d 7b1a 	vstr	d7, [sp, #104]	; 0x68
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001cc0:	f004 ff88 	bl	8006bd4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001cc4:	b9b0      	cbnz	r0, 8001cf4 <MX_TIM8_Init+0x10c>
  HAL_TIM_MspPostInit(&htim8);
 8001cc6:	481a      	ldr	r0, [pc, #104]	; (8001d30 <MX_TIM8_Init+0x148>)
 8001cc8:	f7ff fea2 	bl	8001a10 <HAL_TIM_MspPostInit>
}
 8001ccc:	b020      	add	sp, #128	; 0x80
 8001cce:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001cd0:	f7ff f978 	bl	8000fc4 <Error_Handler>
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001cd4:	4816      	ldr	r0, [pc, #88]	; (8001d30 <MX_TIM8_Init+0x148>)
 8001cd6:	f004 fa37 	bl	8006148 <HAL_TIM_PWM_Init>
 8001cda:	2800      	cmp	r0, #0
 8001cdc:	d0af      	beq.n	8001c3e <MX_TIM8_Init+0x56>
    Error_Handler();
 8001cde:	f7ff f971 	bl	8000fc4 <Error_Handler>
  if (HAL_TIM_OnePulse_Init(&htim8, TIM_OPMODE_SINGLE) != HAL_OK)
 8001ce2:	2108      	movs	r1, #8
 8001ce4:	4812      	ldr	r0, [pc, #72]	; (8001d30 <MX_TIM8_Init+0x148>)
 8001ce6:	f004 fc37 	bl	8006558 <HAL_TIM_OnePulse_Init>
 8001cea:	2800      	cmp	r0, #0
 8001cec:	d0ad      	beq.n	8001c4a <MX_TIM8_Init+0x62>
    Error_Handler();
 8001cee:	f7ff f969 	bl	8000fc4 <Error_Handler>
 8001cf2:	e7aa      	b.n	8001c4a <MX_TIM8_Init+0x62>
    Error_Handler();
 8001cf4:	f7ff f966 	bl	8000fc4 <Error_Handler>
  HAL_TIM_MspPostInit(&htim8);
 8001cf8:	480d      	ldr	r0, [pc, #52]	; (8001d30 <MX_TIM8_Init+0x148>)
 8001cfa:	f7ff fe89 	bl	8001a10 <HAL_TIM_MspPostInit>
}
 8001cfe:	b020      	add	sp, #128	; 0x80
 8001d00:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001d02:	f7ff f95f 	bl	8000fc4 <Error_Handler>
 8001d06:	e7c9      	b.n	8001c9c <MX_TIM8_Init+0xb4>
    Error_Handler();
 8001d08:	f7ff f95c 	bl	8000fc4 <Error_Handler>
 8001d0c:	e7b3      	b.n	8001c76 <MX_TIM8_Init+0x8e>
    Error_Handler();
 8001d0e:	f7ff f959 	bl	8000fc4 <Error_Handler>
 8001d12:	e7a4      	b.n	8001c5e <MX_TIM8_Init+0x76>
 8001d14:	f3af 8000 	nop.w
 8001d18:	00000004 	.word	0x00000004
	...
 8001d24:	00002000 	.word	0x00002000
 8001d28:	00000000 	.word	0x00000000
 8001d2c:	02000000 	.word	0x02000000
 8001d30:	24000774 	.word	0x24000774
 8001d34:	40010400 	.word	0x40010400

08001d38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001d38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d70 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001d3c:	f7ff fb40 	bl	80013c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d40:	480c      	ldr	r0, [pc, #48]	; (8001d74 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001d42:	490d      	ldr	r1, [pc, #52]	; (8001d78 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d44:	4a0d      	ldr	r2, [pc, #52]	; (8001d7c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d48:	e002      	b.n	8001d50 <LoopCopyDataInit>

08001d4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d4e:	3304      	adds	r3, #4

08001d50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d54:	d3f9      	bcc.n	8001d4a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d56:	4a0a      	ldr	r2, [pc, #40]	; (8001d80 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d58:	4c0a      	ldr	r4, [pc, #40]	; (8001d84 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d5c:	e001      	b.n	8001d62 <LoopFillZerobss>

08001d5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d60:	3204      	adds	r2, #4

08001d62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d64:	d3fb      	bcc.n	8001d5e <FillZerobss>
  cmp r4, r1
  bcc CopyTableSection1Init
*/

/* Call static constructors */
    bl __libc_init_array
 8001d66:	f009 fc2d 	bl	800b5c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d6a:	f7fe fd39 	bl	80007e0 <main>
  bx  lr
 8001d6e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001d70:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001d74:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001d78:	240002c8 	.word	0x240002c8
  ldr r2, =_sidata
 8001d7c:	08037234 	.word	0x08037234
  ldr r2, =_sbss
 8001d80:	240002c8 	.word	0x240002c8
  ldr r4, =_ebss
 8001d84:	24002520 	.word	0x24002520

08001d88 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d88:	e7fe      	b.n	8001d88 <ADC3_IRQHandler>
	...

08001d8c <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001d8c:	4b0f      	ldr	r3, [pc, #60]	; (8001dcc <HAL_InitTick+0x40>)
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	b90b      	cbnz	r3, 8001d96 <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 8001d92:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001d94:	4770      	bx	lr
{
 8001d96:	b510      	push	{r4, lr}
 8001d98:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001d9a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d9e:	4a0c      	ldr	r2, [pc, #48]	; (8001dd0 <HAL_InitTick+0x44>)
 8001da0:	fbb0 f3f3 	udiv	r3, r0, r3
 8001da4:	6810      	ldr	r0, [r2, #0]
 8001da6:	fbb0 f0f3 	udiv	r0, r0, r3
 8001daa:	f000 f8cd 	bl	8001f48 <HAL_SYSTICK_Config>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dae:	2c0f      	cmp	r4, #15
 8001db0:	d800      	bhi.n	8001db4 <HAL_InitTick+0x28>
 8001db2:	b108      	cbz	r0, 8001db8 <HAL_InitTick+0x2c>
    return HAL_ERROR;
 8001db4:	2001      	movs	r0, #1
}
 8001db6:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001db8:	2200      	movs	r2, #0
 8001dba:	4621      	mov	r1, r4
 8001dbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001dc0:	f000 f876 	bl	8001eb0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001dc4:	4b03      	ldr	r3, [pc, #12]	; (8001dd4 <HAL_InitTick+0x48>)
 8001dc6:	2000      	movs	r0, #0
 8001dc8:	601c      	str	r4, [r3, #0]
}
 8001dca:	bd10      	pop	{r4, pc}
 8001dcc:	24000008 	.word	0x24000008
 8001dd0:	24000000 	.word	0x24000000
 8001dd4:	2400000c 	.word	0x2400000c

08001dd8 <HAL_Init>:
{
 8001dd8:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dda:	2003      	movs	r0, #3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001ddc:	4c12      	ldr	r4, [pc, #72]	; (8001e28 <HAL_Init+0x50>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dde:	f000 f855 	bl	8001e8c <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001de2:	f002 ff85 	bl	8004cf0 <HAL_RCC_GetSysClockFreq>
 8001de6:	4b11      	ldr	r3, [pc, #68]	; (8001e2c <HAL_Init+0x54>)
 8001de8:	4911      	ldr	r1, [pc, #68]	; (8001e30 <HAL_Init+0x58>)
 8001dea:	699a      	ldr	r2, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001dec:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001dee:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001df2:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001df6:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001df8:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001dfa:	f002 021f 	and.w	r2, r2, #31
  SystemCoreClock = common_system_clock;
 8001dfe:	490d      	ldr	r1, [pc, #52]	; (8001e34 <HAL_Init+0x5c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001e00:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001e04:	40d0      	lsrs	r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001e06:	fa20 f303 	lsr.w	r3, r0, r3
  SystemCoreClock = common_system_clock;
 8001e0a:	6008      	str	r0, [r1, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e0c:	200f      	movs	r0, #15
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001e0e:	6023      	str	r3, [r4, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e10:	f7ff ffbc 	bl	8001d8c <HAL_InitTick>
 8001e14:	b110      	cbz	r0, 8001e1c <HAL_Init+0x44>
    return HAL_ERROR;
 8001e16:	2401      	movs	r4, #1
}
 8001e18:	4620      	mov	r0, r4
 8001e1a:	bd10      	pop	{r4, pc}
 8001e1c:	4604      	mov	r4, r0
  HAL_MspInit();
 8001e1e:	f7ff fa21 	bl	8001264 <HAL_MspInit>
}
 8001e22:	4620      	mov	r0, r4
 8001e24:	bd10      	pop	{r4, pc}
 8001e26:	bf00      	nop
 8001e28:	24000004 	.word	0x24000004
 8001e2c:	58024400 	.word	0x58024400
 8001e30:	0800d5f0 	.word	0x0800d5f0
 8001e34:	24000000 	.word	0x24000000

08001e38 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8001e38:	4a03      	ldr	r2, [pc, #12]	; (8001e48 <HAL_IncTick+0x10>)
 8001e3a:	4b04      	ldr	r3, [pc, #16]	; (8001e4c <HAL_IncTick+0x14>)
 8001e3c:	6811      	ldr	r1, [r2, #0]
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	440b      	add	r3, r1
 8001e42:	6013      	str	r3, [r2, #0]
}
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	240007c0 	.word	0x240007c0
 8001e4c:	24000008 	.word	0x24000008

08001e50 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001e50:	4b01      	ldr	r3, [pc, #4]	; (8001e58 <HAL_GetTick+0x8>)
 8001e52:	6818      	ldr	r0, [r3, #0]
}
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop
 8001e58:	240007c0 	.word	0x240007c0

08001e5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e5c:	b538      	push	{r3, r4, r5, lr}
 8001e5e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001e60:	f7ff fff6 	bl	8001e50 <HAL_GetTick>
 8001e64:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e66:	1c63      	adds	r3, r4, #1
 8001e68:	d002      	beq.n	8001e70 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e6a:	4b04      	ldr	r3, [pc, #16]	; (8001e7c <HAL_Delay+0x20>)
 8001e6c:	781b      	ldrb	r3, [r3, #0]
 8001e6e:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e70:	f7ff ffee 	bl	8001e50 <HAL_GetTick>
 8001e74:	1b43      	subs	r3, r0, r5
 8001e76:	42a3      	cmp	r3, r4
 8001e78:	d3fa      	bcc.n	8001e70 <HAL_Delay+0x14>
  {
  }
}
 8001e7a:	bd38      	pop	{r3, r4, r5, pc}
 8001e7c:	24000008 	.word	0x24000008

08001e80 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8001e80:	4b01      	ldr	r3, [pc, #4]	; (8001e88 <HAL_GetREVID+0x8>)
 8001e82:	6818      	ldr	r0, [r3, #0]
}
 8001e84:	0c00      	lsrs	r0, r0, #16
 8001e86:	4770      	bx	lr
 8001e88:	5c001000 	.word	0x5c001000

08001e8c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e8c:	4906      	ldr	r1, [pc, #24]	; (8001ea8 <HAL_NVIC_SetPriorityGrouping+0x1c>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e8e:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e92:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
 8001e94:	4b05      	ldr	r3, [pc, #20]	; (8001eac <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e96:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e98:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e9c:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ea0:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
 8001ea2:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001ea4:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001ea6:	4770      	bx	lr
 8001ea8:	e000ed00 	.word	0xe000ed00
 8001eac:	05fa0000 	.word	0x05fa0000

08001eb0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001eb0:	4b1b      	ldr	r3, [pc, #108]	; (8001f20 <HAL_NVIC_SetPriority+0x70>)
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001eb8:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001eba:	f1c3 0e07 	rsb	lr, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ebe:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ec2:	f1be 0f04 	cmp.w	lr, #4
 8001ec6:	bf28      	it	cs
 8001ec8:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ecc:	f1bc 0f06 	cmp.w	ip, #6
 8001ed0:	d91a      	bls.n	8001f08 <HAL_NVIC_SetPriority+0x58>
 8001ed2:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ed4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8001ed8:	fa0c fc03 	lsl.w	ip, ip, r3
 8001edc:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ee0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
  if ((int32_t)(IRQn) >= 0)
 8001ee4:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ee6:	fa0c fc0e 	lsl.w	ip, ip, lr
 8001eea:	ea21 010c 	bic.w	r1, r1, ip
 8001eee:	fa01 f103 	lsl.w	r1, r1, r3
 8001ef2:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8001ef6:	db0a      	blt.n	8001f0e <HAL_NVIC_SetPriority+0x5e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ef8:	0109      	lsls	r1, r1, #4
 8001efa:	4b0a      	ldr	r3, [pc, #40]	; (8001f24 <HAL_NVIC_SetPriority+0x74>)
 8001efc:	b2c9      	uxtb	r1, r1
 8001efe:	4403      	add	r3, r0
 8001f00:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001f04:	f85d fb04 	ldr.w	pc, [sp], #4
 8001f08:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f0a:	4613      	mov	r3, r2
 8001f0c:	e7e8      	b.n	8001ee0 <HAL_NVIC_SetPriority+0x30>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f0e:	f000 000f 	and.w	r0, r0, #15
 8001f12:	0109      	lsls	r1, r1, #4
 8001f14:	4b04      	ldr	r3, [pc, #16]	; (8001f28 <HAL_NVIC_SetPriority+0x78>)
 8001f16:	b2c9      	uxtb	r1, r1
 8001f18:	4403      	add	r3, r0
 8001f1a:	7619      	strb	r1, [r3, #24]
 8001f1c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001f20:	e000ed00 	.word	0xe000ed00
 8001f24:	e000e100 	.word	0xe000e100
 8001f28:	e000ecfc 	.word	0xe000ecfc

08001f2c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001f2c:	2800      	cmp	r0, #0
 8001f2e:	db07      	blt.n	8001f40 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f30:	2301      	movs	r3, #1
 8001f32:	f000 011f 	and.w	r1, r0, #31
 8001f36:	4a03      	ldr	r2, [pc, #12]	; (8001f44 <HAL_NVIC_EnableIRQ+0x18>)
 8001f38:	0940      	lsrs	r0, r0, #5
 8001f3a:	408b      	lsls	r3, r1
 8001f3c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001f40:	4770      	bx	lr
 8001f42:	bf00      	nop
 8001f44:	e000e100 	.word	0xe000e100

08001f48 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f48:	1e43      	subs	r3, r0, #1
 8001f4a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f4e:	d20c      	bcs.n	8001f6a <HAL_SYSTICK_Config+0x22>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f50:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f54:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f56:	4906      	ldr	r1, [pc, #24]	; (8001f70 <HAL_SYSTICK_Config+0x28>)
 8001f58:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f5c:	6153      	str	r3, [r2, #20]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f5e:	2307      	movs	r3, #7
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f60:	f881 c023 	strb.w	ip, [r1, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f64:	6190      	str	r0, [r2, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f66:	6113      	str	r3, [r2, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f68:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001f6a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	e000ed00 	.word	0xe000ed00

08001f74 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001f74:	6802      	ldr	r2, [r0, #0]
{
 8001f76:	4601      	mov	r1, r0
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001f78:	4b32      	ldr	r3, [pc, #200]	; (8002044 <DMA_CalcBaseAndBitshift+0xd0>)
 8001f7a:	4833      	ldr	r0, [pc, #204]	; (8002048 <DMA_CalcBaseAndBitshift+0xd4>)
{
 8001f7c:	b470      	push	{r4, r5, r6}
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001f7e:	4e33      	ldr	r6, [pc, #204]	; (800204c <DMA_CalcBaseAndBitshift+0xd8>)
 8001f80:	4d33      	ldr	r5, [pc, #204]	; (8002050 <DMA_CalcBaseAndBitshift+0xdc>)
 8001f82:	42b2      	cmp	r2, r6
 8001f84:	bf18      	it	ne
 8001f86:	429a      	cmpne	r2, r3
 8001f88:	4c32      	ldr	r4, [pc, #200]	; (8002054 <DMA_CalcBaseAndBitshift+0xe0>)
 8001f8a:	bf0c      	ite	eq
 8001f8c:	2301      	moveq	r3, #1
 8001f8e:	2300      	movne	r3, #0
 8001f90:	42aa      	cmp	r2, r5
 8001f92:	bf08      	it	eq
 8001f94:	f043 0301 	orreq.w	r3, r3, #1
 8001f98:	42a2      	cmp	r2, r4
 8001f9a:	bf08      	it	eq
 8001f9c:	f043 0301 	orreq.w	r3, r3, #1
 8001fa0:	3430      	adds	r4, #48	; 0x30
 8001fa2:	4282      	cmp	r2, r0
 8001fa4:	bf08      	it	eq
 8001fa6:	f043 0301 	orreq.w	r3, r3, #1
 8001faa:	3030      	adds	r0, #48	; 0x30
 8001fac:	42a2      	cmp	r2, r4
 8001fae:	bf08      	it	eq
 8001fb0:	f043 0301 	orreq.w	r3, r3, #1
 8001fb4:	3430      	adds	r4, #48	; 0x30
 8001fb6:	4282      	cmp	r2, r0
 8001fb8:	bf08      	it	eq
 8001fba:	f043 0301 	orreq.w	r3, r3, #1
 8001fbe:	f500 705c 	add.w	r0, r0, #880	; 0x370
 8001fc2:	42a2      	cmp	r2, r4
 8001fc4:	bf08      	it	eq
 8001fc6:	f043 0301 	orreq.w	r3, r3, #1
 8001fca:	f504 745c 	add.w	r4, r4, #880	; 0x370
 8001fce:	4282      	cmp	r2, r0
 8001fd0:	bf08      	it	eq
 8001fd2:	f043 0301 	orreq.w	r3, r3, #1
 8001fd6:	3030      	adds	r0, #48	; 0x30
 8001fd8:	42a2      	cmp	r2, r4
 8001fda:	bf08      	it	eq
 8001fdc:	f043 0301 	orreq.w	r3, r3, #1
 8001fe0:	3430      	adds	r4, #48	; 0x30
 8001fe2:	4282      	cmp	r2, r0
 8001fe4:	bf08      	it	eq
 8001fe6:	f043 0301 	orreq.w	r3, r3, #1
 8001fea:	3030      	adds	r0, #48	; 0x30
 8001fec:	42a2      	cmp	r2, r4
 8001fee:	bf08      	it	eq
 8001ff0:	f043 0301 	orreq.w	r3, r3, #1
 8001ff4:	3430      	adds	r4, #48	; 0x30
 8001ff6:	4282      	cmp	r2, r0
 8001ff8:	bf08      	it	eq
 8001ffa:	f043 0301 	orreq.w	r3, r3, #1
 8001ffe:	3030      	adds	r0, #48	; 0x30
 8002000:	42a2      	cmp	r2, r4
 8002002:	bf08      	it	eq
 8002004:	f043 0301 	orreq.w	r3, r3, #1
 8002008:	4282      	cmp	r2, r0
 800200a:	bf08      	it	eq
 800200c:	f043 0301 	orreq.w	r3, r3, #1
 8002010:	b913      	cbnz	r3, 8002018 <DMA_CalcBaseAndBitshift+0xa4>
 8002012:	4b11      	ldr	r3, [pc, #68]	; (8002058 <DMA_CalcBaseAndBitshift+0xe4>)
 8002014:	429a      	cmp	r2, r3
 8002016:	d112      	bne.n	800203e <DMA_CalcBaseAndBitshift+0xca>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002018:	b2d3      	uxtb	r3, r2
 800201a:	4810      	ldr	r0, [pc, #64]	; (800205c <DMA_CalcBaseAndBitshift+0xe8>)

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800201c:	4c10      	ldr	r4, [pc, #64]	; (8002060 <DMA_CalcBaseAndBitshift+0xec>)
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800201e:	3b10      	subs	r3, #16
 8002020:	fba0 5003 	umull	r5, r0, r0, r3

    if (stream_number > 3U)
 8002024:	2b5f      	cmp	r3, #95	; 0x5f
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002026:	ea4f 1010 	mov.w	r0, r0, lsr #4
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800202a:	5c20      	ldrb	r0, [r4, r0]
 800202c:	65c8      	str	r0, [r1, #92]	; 0x5c
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800202e:	480d      	ldr	r0, [pc, #52]	; (8002064 <DMA_CalcBaseAndBitshift+0xf0>)
 8002030:	ea00 0002 	and.w	r0, r0, r2
 8002034:	bf88      	it	hi
 8002036:	3004      	addhi	r0, #4
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8002038:	6588      	str	r0, [r1, #88]	; 0x58
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
  }

  return hdma->StreamBaseAddress;
}
 800203a:	bc70      	pop	{r4, r5, r6}
 800203c:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800203e:	f022 00ff 	bic.w	r0, r2, #255	; 0xff
 8002042:	e7f9      	b.n	8002038 <DMA_CalcBaseAndBitshift+0xc4>
 8002044:	40020010 	.word	0x40020010
 8002048:	40020070 	.word	0x40020070
 800204c:	40020028 	.word	0x40020028
 8002050:	40020040 	.word	0x40020040
 8002054:	40020058 	.word	0x40020058
 8002058:	400204b8 	.word	0x400204b8
 800205c:	aaaaaaab 	.word	0xaaaaaaab
 8002060:	08023e80 	.word	0x08023e80
 8002064:	fffffc00 	.word	0xfffffc00

08002068 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8002068:	6803      	ldr	r3, [r0, #0]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800206a:	4a27      	ldr	r2, [pc, #156]	; (8002108 <DMA_CalcDMAMUXChannelBaseAndMask+0xa0>)
 800206c:	4927      	ldr	r1, [pc, #156]	; (800210c <DMA_CalcDMAMUXChannelBaseAndMask+0xa4>)
{
 800206e:	b430      	push	{r4, r5}
  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002070:	4d27      	ldr	r5, [pc, #156]	; (8002110 <DMA_CalcDMAMUXChannelBaseAndMask+0xa8>)
 8002072:	4c28      	ldr	r4, [pc, #160]	; (8002114 <DMA_CalcDMAMUXChannelBaseAndMask+0xac>)
 8002074:	42ab      	cmp	r3, r5
 8002076:	bf18      	it	ne
 8002078:	4293      	cmpne	r3, r2
 800207a:	bf0c      	ite	eq
 800207c:	2201      	moveq	r2, #1
 800207e:	2200      	movne	r2, #0
 8002080:	428b      	cmp	r3, r1
 8002082:	bf08      	it	eq
 8002084:	f042 0201 	orreq.w	r2, r2, #1
 8002088:	3128      	adds	r1, #40	; 0x28
 800208a:	42a3      	cmp	r3, r4
 800208c:	bf08      	it	eq
 800208e:	f042 0201 	orreq.w	r2, r2, #1
 8002092:	3428      	adds	r4, #40	; 0x28
 8002094:	428b      	cmp	r3, r1
 8002096:	bf08      	it	eq
 8002098:	f042 0201 	orreq.w	r2, r2, #1
 800209c:	3128      	adds	r1, #40	; 0x28
 800209e:	42a3      	cmp	r3, r4
 80020a0:	bf08      	it	eq
 80020a2:	f042 0201 	orreq.w	r2, r2, #1
 80020a6:	428b      	cmp	r3, r1
 80020a8:	bf08      	it	eq
 80020aa:	f042 0201 	orreq.w	r2, r2, #1
 80020ae:	b912      	cbnz	r2, 80020b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x4e>
 80020b0:	4a19      	ldr	r2, [pc, #100]	; (8002118 <DMA_CalcDMAMUXChannelBaseAndMask+0xb0>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d113      	bne.n	80020de <DMA_CalcDMAMUXChannelBaseAndMask+0x76>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80020b6:	b2db      	uxtb	r3, r3
 80020b8:	4918      	ldr	r1, [pc, #96]	; (800211c <DMA_CalcDMAMUXChannelBaseAndMask+0xb4>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80020ba:	4a19      	ldr	r2, [pc, #100]	; (8002120 <DMA_CalcDMAMUXChannelBaseAndMask+0xb8>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80020bc:	3b08      	subs	r3, #8
 80020be:	4c19      	ldr	r4, [pc, #100]	; (8002124 <DMA_CalcDMAMUXChannelBaseAndMask+0xbc>)
 80020c0:	fba1 1303 	umull	r1, r3, r1, r3
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80020c4:	2101      	movs	r1, #1
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80020c6:	eb02 1213 	add.w	r2, r2, r3, lsr #4
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80020ca:	f3c3 1304 	ubfx	r3, r3, #4, #5
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80020ce:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80020d0:	fa01 f303 	lsl.w	r3, r1, r3
 80020d4:	6683      	str	r3, [r0, #104]	; 0x68
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80020d6:	e9c0 2418 	strd	r2, r4, [r0, #96]	; 0x60
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80020da:	bc30      	pop	{r4, r5}
 80020dc:	4770      	bx	lr
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80020de:	b2d9      	uxtb	r1, r3
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80020e0:	4a11      	ldr	r2, [pc, #68]	; (8002128 <DMA_CalcDMAMUXChannelBaseAndMask+0xc0>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80020e2:	4c12      	ldr	r4, [pc, #72]	; (800212c <DMA_CalcDMAMUXChannelBaseAndMask+0xc4>)
 80020e4:	3910      	subs	r1, #16
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80020e6:	441a      	add	r2, r3
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80020e8:	fba4 4101 	umull	r4, r1, r4, r1
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80020ec:	2aa8      	cmp	r2, #168	; 0xa8
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80020ee:	ea4f 1111 	mov.w	r1, r1, lsr #4
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80020f2:	d800      	bhi.n	80020f6 <DMA_CalcDMAMUXChannelBaseAndMask+0x8e>
      stream_number += 8U;
 80020f4:	3108      	adds	r1, #8
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80020f6:	4a0e      	ldr	r2, [pc, #56]	; (8002130 <DMA_CalcDMAMUXChannelBaseAndMask+0xc8>)
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80020f8:	f001 041f 	and.w	r4, r1, #31
 80020fc:	2301      	movs	r3, #1
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80020fe:	440a      	add	r2, r1
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002100:	40a3      	lsls	r3, r4
 8002102:	4c0c      	ldr	r4, [pc, #48]	; (8002134 <DMA_CalcDMAMUXChannelBaseAndMask+0xcc>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8002104:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002106:	e7e5      	b.n	80020d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>
 8002108:	58025408 	.word	0x58025408
 800210c:	58025430 	.word	0x58025430
 8002110:	5802541c 	.word	0x5802541c
 8002114:	58025444 	.word	0x58025444
 8002118:	58025494 	.word	0x58025494
 800211c:	cccccccd 	.word	0xcccccccd
 8002120:	16009600 	.word	0x16009600
 8002124:	58025880 	.word	0x58025880
 8002128:	bffdfbf0 	.word	0xbffdfbf0
 800212c:	aaaaaaab 	.word	0xaaaaaaab
 8002130:	10008200 	.word	0x10008200
 8002134:	40020880 	.word	0x40020880

08002138 <HAL_DMA_Init>:
{
 8002138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800213c:	4605      	mov	r5, r0
 800213e:	b083      	sub	sp, #12
  uint32_t tickstart = HAL_GetTick();
 8002140:	f7ff fe86 	bl	8001e50 <HAL_GetTick>
  if(hdma == NULL)
 8002144:	2d00      	cmp	r5, #0
 8002146:	f000 8192 	beq.w	800246e <HAL_DMA_Init+0x336>
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800214a:	682c      	ldr	r4, [r5, #0]
 800214c:	4606      	mov	r6, r0
 800214e:	4ba9      	ldr	r3, [pc, #676]	; (80023f4 <HAL_DMA_Init+0x2bc>)
 8002150:	429c      	cmp	r4, r3
 8002152:	d048      	beq.n	80021e6 <HAL_DMA_Init+0xae>
 8002154:	3318      	adds	r3, #24
 8002156:	429c      	cmp	r4, r3
 8002158:	d045      	beq.n	80021e6 <HAL_DMA_Init+0xae>
 800215a:	3330      	adds	r3, #48	; 0x30
 800215c:	4aa6      	ldr	r2, [pc, #664]	; (80023f8 <HAL_DMA_Init+0x2c0>)
 800215e:	4294      	cmp	r4, r2
 8002160:	bf18      	it	ne
 8002162:	429c      	cmpne	r4, r3
 8002164:	f102 0230 	add.w	r2, r2, #48	; 0x30
 8002168:	bf0c      	ite	eq
 800216a:	2301      	moveq	r3, #1
 800216c:	2300      	movne	r3, #0
 800216e:	4294      	cmp	r4, r2
 8002170:	bf08      	it	eq
 8002172:	f043 0301 	orreq.w	r3, r3, #1
 8002176:	3218      	adds	r2, #24
 8002178:	4294      	cmp	r4, r2
 800217a:	bf08      	it	eq
 800217c:	f043 0301 	orreq.w	r3, r3, #1
 8002180:	3218      	adds	r2, #24
 8002182:	4294      	cmp	r4, r2
 8002184:	bf08      	it	eq
 8002186:	f043 0301 	orreq.w	r3, r3, #1
 800218a:	3218      	adds	r2, #24
 800218c:	4294      	cmp	r4, r2
 800218e:	bf08      	it	eq
 8002190:	f043 0301 	orreq.w	r3, r3, #1
 8002194:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8002198:	4294      	cmp	r4, r2
 800219a:	bf08      	it	eq
 800219c:	f043 0301 	orreq.w	r3, r3, #1
 80021a0:	3218      	adds	r2, #24
 80021a2:	4294      	cmp	r4, r2
 80021a4:	bf08      	it	eq
 80021a6:	f043 0301 	orreq.w	r3, r3, #1
 80021aa:	3218      	adds	r2, #24
 80021ac:	4294      	cmp	r4, r2
 80021ae:	bf08      	it	eq
 80021b0:	f043 0301 	orreq.w	r3, r3, #1
 80021b4:	3218      	adds	r2, #24
 80021b6:	4294      	cmp	r4, r2
 80021b8:	bf08      	it	eq
 80021ba:	f043 0301 	orreq.w	r3, r3, #1
 80021be:	3218      	adds	r2, #24
 80021c0:	4294      	cmp	r4, r2
 80021c2:	bf08      	it	eq
 80021c4:	f043 0301 	orreq.w	r3, r3, #1
 80021c8:	3218      	adds	r2, #24
 80021ca:	4294      	cmp	r4, r2
 80021cc:	bf08      	it	eq
 80021ce:	f043 0301 	orreq.w	r3, r3, #1
 80021d2:	3218      	adds	r2, #24
 80021d4:	4294      	cmp	r4, r2
 80021d6:	bf08      	it	eq
 80021d8:	f043 0301 	orreq.w	r3, r3, #1
 80021dc:	b91b      	cbnz	r3, 80021e6 <HAL_DMA_Init+0xae>
 80021de:	4b87      	ldr	r3, [pc, #540]	; (80023fc <HAL_DMA_Init+0x2c4>)
 80021e0:	429c      	cmp	r4, r3
 80021e2:	f040 818c 	bne.w	80024fe <HAL_DMA_Init+0x3c6>
    hdma->State = HAL_DMA_STATE_BUSY;
 80021e6:	2302      	movs	r3, #2
 80021e8:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 80021ec:	2300      	movs	r3, #0
 80021ee:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
    __HAL_DMA_DISABLE(hdma);
 80021f2:	6823      	ldr	r3, [r4, #0]
 80021f4:	f023 0301 	bic.w	r3, r3, #1
 80021f8:	6023      	str	r3, [r4, #0]
 80021fa:	e006      	b.n	800220a <HAL_DMA_Init+0xd2>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80021fc:	f7ff fe28 	bl	8001e50 <HAL_GetTick>
 8002200:	1b80      	subs	r0, r0, r6
 8002202:	2805      	cmp	r0, #5
 8002204:	f200 811f 	bhi.w	8002446 <HAL_DMA_Init+0x30e>
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002208:	682c      	ldr	r4, [r5, #0]
 800220a:	6823      	ldr	r3, [r4, #0]
 800220c:	07df      	lsls	r7, r3, #31
 800220e:	d4f5      	bmi.n	80021fc <HAL_DMA_Init+0xc4>
    registerValue |=  hdma->Init.Direction           |
 8002210:	e9d5 3002 	ldrd	r3, r0, [r5, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002214:	6929      	ldr	r1, [r5, #16]
    registerValue |=  hdma->Init.Direction           |
 8002216:	4303      	orrs	r3, r0
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002218:	69aa      	ldr	r2, [r5, #24]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800221a:	6820      	ldr	r0, [r4, #0]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800221c:	430b      	orrs	r3, r1
 800221e:	6969      	ldr	r1, [r5, #20]
 8002220:	430b      	orrs	r3, r1
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002222:	69e9      	ldr	r1, [r5, #28]
 8002224:	4313      	orrs	r3, r2
 8002226:	430b      	orrs	r3, r1
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002228:	4975      	ldr	r1, [pc, #468]	; (8002400 <HAL_DMA_Init+0x2c8>)
 800222a:	4001      	ands	r1, r0
            hdma->Init.Mode                | hdma->Init.Priority;
 800222c:	6a28      	ldr	r0, [r5, #32]
 800222e:	4303      	orrs	r3, r0
    registerValue |=  hdma->Init.Direction           |
 8002230:	430b      	orrs	r3, r1
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002232:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8002234:	2904      	cmp	r1, #4
 8002236:	d103      	bne.n	8002240 <HAL_DMA_Init+0x108>
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002238:	e9d5 060b 	ldrd	r0, r6, [r5, #44]	; 0x2c
 800223c:	4330      	orrs	r0, r6
 800223e:	4303      	orrs	r3, r0
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002240:	6868      	ldr	r0, [r5, #4]
 8002242:	f1a0 0629 	sub.w	r6, r0, #41	; 0x29
 8002246:	2e1f      	cmp	r6, #31
 8002248:	f240 8106 	bls.w	8002458 <HAL_DMA_Init+0x320>
 800224c:	f1a0 064f 	sub.w	r6, r0, #79	; 0x4f
 8002250:	2e03      	cmp	r6, #3
 8002252:	f200 8107 	bhi.w	8002464 <HAL_DMA_Init+0x32c>
        registerValue |= DMA_SxCR_TRBUFF;
 8002256:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800225a:	6023      	str	r3, [r4, #0]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800225c:	2904      	cmp	r1, #4
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800225e:	6963      	ldr	r3, [r4, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002260:	f023 0307 	bic.w	r3, r3, #7
    registerValue |= hdma->Init.FIFOMode;
 8002264:	ea43 0301 	orr.w	r3, r3, r1
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002268:	d10d      	bne.n	8002286 <HAL_DMA_Init+0x14e>
      registerValue |= hdma->Init.FIFOThreshold;
 800226a:	6aa9      	ldr	r1, [r5, #40]	; 0x28
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800226c:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
      registerValue |= hdma->Init.FIFOThreshold;
 800226e:	430b      	orrs	r3, r1
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002270:	b148      	cbz	r0, 8002286 <HAL_DMA_Init+0x14e>
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002272:	2a00      	cmp	r2, #0
 8002274:	f040 811d 	bne.w	80024b2 <HAL_DMA_Init+0x37a>
    switch (hdma->Init.FIFOThreshold)
 8002278:	2901      	cmp	r1, #1
 800227a:	f000 813b 	beq.w	80024f4 <HAL_DMA_Init+0x3bc>
 800227e:	f031 0202 	bics.w	r2, r1, #2
 8002282:	f000 811e 	beq.w	80024c2 <HAL_DMA_Init+0x38a>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002286:	6163      	str	r3, [r4, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002288:	4628      	mov	r0, r5
 800228a:	f7ff fe73 	bl	8001f74 <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800228e:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8002290:	233f      	movs	r3, #63	; 0x3f
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002292:	4958      	ldr	r1, [pc, #352]	; (80023f4 <HAL_DMA_Init+0x2bc>)
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002294:	f002 021f 	and.w	r2, r2, #31
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002298:	4e5a      	ldr	r6, [pc, #360]	; (8002404 <HAL_DMA_Init+0x2cc>)
 800229a:	4f5b      	ldr	r7, [pc, #364]	; (8002408 <HAL_DMA_Init+0x2d0>)
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800229c:	4093      	lsls	r3, r2
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800229e:	4a5b      	ldr	r2, [pc, #364]	; (800240c <HAL_DMA_Init+0x2d4>)
 80022a0:	1ba6      	subs	r6, r4, r6
 80022a2:	1be7      	subs	r7, r4, r7
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80022a4:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80022a6:	eba4 0b02 	sub.w	fp, r4, r2
 80022aa:	4b59      	ldr	r3, [pc, #356]	; (8002410 <HAL_DMA_Init+0x2d8>)
 80022ac:	fab6 f686 	clz	r6, r6
 80022b0:	fabb fb8b 	clz	fp, fp
 80022b4:	fab7 f787 	clz	r7, r7
 80022b8:	eba4 0a03 	sub.w	sl, r4, r3
 80022bc:	4b55      	ldr	r3, [pc, #340]	; (8002414 <HAL_DMA_Init+0x2dc>)
 80022be:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 80022c2:	4855      	ldr	r0, [pc, #340]	; (8002418 <HAL_DMA_Init+0x2e0>)
 80022c4:	429c      	cmp	r4, r3
 80022c6:	bf18      	it	ne
 80022c8:	428c      	cmpne	r4, r1
 80022ca:	f103 0318 	add.w	r3, r3, #24
 80022ce:	faba fa8a 	clz	sl, sl
 80022d2:	ea4f 1656 	mov.w	r6, r6, lsr #5
 80022d6:	bf0c      	ite	eq
 80022d8:	2101      	moveq	r1, #1
 80022da:	2100      	movne	r1, #0
 80022dc:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80022e0:	1a22      	subs	r2, r4, r0
 80022e2:	429c      	cmp	r4, r3
 80022e4:	bf08      	it	eq
 80022e6:	f041 0101 	orreq.w	r1, r1, #1
 80022ea:	3318      	adds	r3, #24
 80022ec:	097f      	lsrs	r7, r7, #5
 80022ee:	fab2 f282 	clz	r2, r2
 80022f2:	429c      	cmp	r4, r3
 80022f4:	bf08      	it	eq
 80022f6:	f041 0101 	orreq.w	r1, r1, #1
 80022fa:	3318      	adds	r3, #24
 80022fc:	0952      	lsrs	r2, r2, #5
 80022fe:	429c      	cmp	r4, r3
 8002300:	bf08      	it	eq
 8002302:	f041 0101 	orreq.w	r1, r1, #1
 8002306:	3318      	adds	r3, #24
 8002308:	9201      	str	r2, [sp, #4]
 800230a:	429c      	cmp	r4, r3
 800230c:	bf08      	it	eq
 800230e:	f041 0101 	orreq.w	r1, r1, #1
 8002312:	3318      	adds	r3, #24
 8002314:	429c      	cmp	r4, r3
 8002316:	bf08      	it	eq
 8002318:	f041 0101 	orreq.w	r1, r1, #1
 800231c:	3318      	adds	r3, #24
 800231e:	429c      	cmp	r4, r3
 8002320:	bf08      	it	eq
 8002322:	f041 0101 	orreq.w	r1, r1, #1
 8002326:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800232a:	429c      	cmp	r4, r3
 800232c:	bf08      	it	eq
 800232e:	f041 0101 	orreq.w	r1, r1, #1
 8002332:	3318      	adds	r3, #24
 8002334:	429c      	cmp	r4, r3
 8002336:	bf08      	it	eq
 8002338:	f041 0101 	orreq.w	r1, r1, #1
 800233c:	3318      	adds	r3, #24
 800233e:	429c      	cmp	r4, r3
 8002340:	bf08      	it	eq
 8002342:	f041 0101 	orreq.w	r1, r1, #1
 8002346:	3318      	adds	r3, #24
 8002348:	429c      	cmp	r4, r3
 800234a:	bf08      	it	eq
 800234c:	f041 0101 	orreq.w	r1, r1, #1
 8002350:	3318      	adds	r3, #24
 8002352:	429c      	cmp	r4, r3
 8002354:	bf08      	it	eq
 8002356:	f041 0101 	orreq.w	r1, r1, #1
 800235a:	3318      	adds	r3, #24
 800235c:	429c      	cmp	r4, r3
 800235e:	bf08      	it	eq
 8002360:	f041 0101 	orreq.w	r1, r1, #1
 8002364:	3318      	adds	r3, #24
 8002366:	429c      	cmp	r4, r3
 8002368:	bf08      	it	eq
 800236a:	f041 0101 	orreq.w	r1, r1, #1
 800236e:	3318      	adds	r3, #24
 8002370:	429c      	cmp	r4, r3
 8002372:	bf08      	it	eq
 8002374:	f041 0101 	orreq.w	r1, r1, #1
 8002378:	4b28      	ldr	r3, [pc, #160]	; (800241c <HAL_DMA_Init+0x2e4>)
 800237a:	ea4b 0101 	orr.w	r1, fp, r1
 800237e:	eba4 0803 	sub.w	r8, r4, r3
 8002382:	3314      	adds	r3, #20
 8002384:	ea4a 0101 	orr.w	r1, sl, r1
 8002388:	fab8 f888 	clz	r8, r8
 800238c:	eba4 0903 	sub.w	r9, r4, r3
 8002390:	3314      	adds	r3, #20
 8002392:	4331      	orrs	r1, r6
 8002394:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8002398:	fab9 f989 	clz	r9, r9
 800239c:	1ae3      	subs	r3, r4, r3
 800239e:	4339      	orrs	r1, r7
 80023a0:	ea4f 1959 	mov.w	r9, r9, lsr #5
 80023a4:	fab3 f383 	clz	r3, r3
 80023a8:	ea48 0101 	orr.w	r1, r8, r1
 80023ac:	095b      	lsrs	r3, r3, #5
 80023ae:	ea49 0101 	orr.w	r1, r9, r1
 80023b2:	4319      	orrs	r1, r3
 80023b4:	d101      	bne.n	80023ba <HAL_DMA_Init+0x282>
 80023b6:	2a00      	cmp	r2, #0
 80023b8:	d03d      	beq.n	8002436 <HAL_DMA_Init+0x2fe>
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80023ba:	4628      	mov	r0, r5
 80023bc:	9300      	str	r3, [sp, #0]
 80023be:	f7ff fe53 	bl	8002068 <DMA_CalcDMAMUXChannelBaseAndMask>
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80023c2:	68a9      	ldr	r1, [r5, #8]
 80023c4:	9b00      	ldr	r3, [sp, #0]
 80023c6:	2980      	cmp	r1, #128	; 0x80
 80023c8:	d02a      	beq.n	8002420 <HAL_DMA_Init+0x2e8>
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80023ca:	6868      	ldr	r0, [r5, #4]
 80023cc:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 80023ce:	b2c4      	uxtb	r4, r0
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80023d0:	3801      	subs	r0, #1
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80023d2:	e9d5 c119 	ldrd	ip, r1, [r5, #100]	; 0x64
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80023d6:	2807      	cmp	r0, #7
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80023d8:	6014      	str	r4, [r2, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80023da:	f8cc 1004 	str.w	r1, [ip, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80023de:	d826      	bhi.n	800242e <HAL_DMA_Init+0x2f6>
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80023e0:	1e61      	subs	r1, r4, #1
 80023e2:	2907      	cmp	r1, #7
 80023e4:	d947      	bls.n	8002476 <HAL_DMA_Init+0x33e>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80023e6:	6f6a      	ldr	r2, [r5, #116]	; 0x74
 80023e8:	e9d5 301b 	ldrd	r3, r0, [r5, #108]	; 0x6c
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80023ec:	2100      	movs	r1, #0
 80023ee:	6019      	str	r1, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80023f0:	6042      	str	r2, [r0, #4]
 80023f2:	e020      	b.n	8002436 <HAL_DMA_Init+0x2fe>
 80023f4:	40020010 	.word	0x40020010
 80023f8:	40020040 	.word	0x40020040
 80023fc:	400204b8 	.word	0x400204b8
 8002400:	fe10803f 	.word	0xfe10803f
 8002404:	58025430 	.word	0x58025430
 8002408:	58025444 	.word	0x58025444
 800240c:	58025408 	.word	0x58025408
 8002410:	5802541c 	.word	0x5802541c
 8002414:	40020028 	.word	0x40020028
 8002418:	58025494 	.word	0x58025494
 800241c:	58025458 	.word	0x58025458
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002420:	2300      	movs	r3, #0
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002422:	6ea9      	ldr	r1, [r5, #104]	; 0x68
 8002424:	e9d5 0218 	ldrd	r0, r2, [r5, #96]	; 0x60
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002428:	606b      	str	r3, [r5, #4]
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800242a:	6003      	str	r3, [r0, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800242c:	6051      	str	r1, [r2, #4]
      hdma->DMAmuxRequestGen = 0U;
 800242e:	2300      	movs	r3, #0
      hdma->DMAmuxRequestGenStatus = 0U;
 8002430:	e9c5 331b 	strd	r3, r3, [r5, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002434:	676b      	str	r3, [r5, #116]	; 0x74
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002436:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8002438:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800243a:	6568      	str	r0, [r5, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 800243c:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
}
 8002440:	b003      	add	sp, #12
 8002442:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002446:	2220      	movs	r2, #32
        hdma->State = HAL_DMA_STATE_ERROR;
 8002448:	2303      	movs	r3, #3
        return HAL_ERROR;
 800244a:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800244c:	656a      	str	r2, [r5, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 800244e:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
}
 8002452:	b003      	add	sp, #12
 8002454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002458:	4f6c      	ldr	r7, [pc, #432]	; (800260c <HAL_DMA_Init+0x4d4>)
 800245a:	fa27 f606 	lsr.w	r6, r7, r6
 800245e:	07f6      	lsls	r6, r6, #31
 8002460:	f53f aef9 	bmi.w	8002256 <HAL_DMA_Init+0x11e>
 8002464:	3874      	subs	r0, #116	; 0x74
 8002466:	2803      	cmp	r0, #3
 8002468:	f63f aef7 	bhi.w	800225a <HAL_DMA_Init+0x122>
 800246c:	e6f3      	b.n	8002256 <HAL_DMA_Init+0x11e>
    return HAL_ERROR;
 800246e:	2001      	movs	r0, #1
}
 8002470:	b003      	add	sp, #12
 8002472:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002476:	9a01      	ldr	r2, [sp, #4]
 8002478:	431a      	orrs	r2, r3
 800247a:	ea49 0902 	orr.w	r9, r9, r2
 800247e:	ea48 0809 	orr.w	r8, r8, r9
 8002482:	ea47 0708 	orr.w	r7, r7, r8
 8002486:	433e      	orrs	r6, r7
 8002488:	ea5a 0606 	orrs.w	r6, sl, r6
 800248c:	d107      	bne.n	800249e <HAL_DMA_Init+0x366>
 800248e:	f1bb 0f00 	cmp.w	fp, #0
 8002492:	d104      	bne.n	800249e <HAL_DMA_Init+0x366>
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002494:	4b5e      	ldr	r3, [pc, #376]	; (8002610 <HAL_DMA_Init+0x4d8>)

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002496:	485f      	ldr	r0, [pc, #380]	; (8002614 <HAL_DMA_Init+0x4dc>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002498:	4423      	add	r3, r4
 800249a:	009b      	lsls	r3, r3, #2
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800249c:	e003      	b.n	80024a6 <HAL_DMA_Init+0x36e>
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800249e:	4b5e      	ldr	r3, [pc, #376]	; (8002618 <HAL_DMA_Init+0x4e0>)
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80024a0:	485e      	ldr	r0, [pc, #376]	; (800261c <HAL_DMA_Init+0x4e4>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80024a2:	4423      	add	r3, r4
 80024a4:	009b      	lsls	r3, r3, #2
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80024a6:	2201      	movs	r2, #1
 80024a8:	408a      	lsls	r2, r1
 80024aa:	e9c5 301b 	strd	r3, r0, [r5, #108]	; 0x6c
 80024ae:	676a      	str	r2, [r5, #116]	; 0x74
 80024b0:	e79c      	b.n	80023ec <HAL_DMA_Init+0x2b4>
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80024b2:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80024b6:	d00e      	beq.n	80024d6 <HAL_DMA_Init+0x39e>
    switch (hdma->Init.FIFOThreshold)
 80024b8:	2902      	cmp	r1, #2
 80024ba:	d905      	bls.n	80024c8 <HAL_DMA_Init+0x390>
 80024bc:	2903      	cmp	r1, #3
 80024be:	f47f aee2 	bne.w	8002286 <HAL_DMA_Init+0x14e>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024c2:	01c2      	lsls	r2, r0, #7
 80024c4:	f57f aedf 	bpl.w	8002286 <HAL_DMA_Init+0x14e>
          hdma->State = HAL_DMA_STATE_READY;
 80024c8:	2301      	movs	r3, #1
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80024ca:	2240      	movs	r2, #64	; 0x40
          return HAL_ERROR;
 80024cc:	4618      	mov	r0, r3
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80024ce:	656a      	str	r2, [r5, #84]	; 0x54
          hdma->State = HAL_DMA_STATE_READY;
 80024d0:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
          return HAL_ERROR;
 80024d4:	e7b4      	b.n	8002440 <HAL_DMA_Init+0x308>
    switch (hdma->Init.FIFOThreshold)
 80024d6:	2903      	cmp	r1, #3
 80024d8:	f63f aed5 	bhi.w	8002286 <HAL_DMA_Init+0x14e>
 80024dc:	a201      	add	r2, pc, #4	; (adr r2, 80024e4 <HAL_DMA_Init+0x3ac>)
 80024de:	f852 f021 	ldr.w	pc, [r2, r1, lsl #2]
 80024e2:	bf00      	nop
 80024e4:	080024c9 	.word	0x080024c9
 80024e8:	080024c3 	.word	0x080024c3
 80024ec:	080024c9 	.word	0x080024c9
 80024f0:	080024f5 	.word	0x080024f5
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80024f4:	f1b0 7fc0 	cmp.w	r0, #25165824	; 0x1800000
 80024f8:	f47f aec5 	bne.w	8002286 <HAL_DMA_Init+0x14e>
 80024fc:	e7e4      	b.n	80024c8 <HAL_DMA_Init+0x390>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80024fe:	4a48      	ldr	r2, [pc, #288]	; (8002620 <HAL_DMA_Init+0x4e8>)
 8002500:	4b48      	ldr	r3, [pc, #288]	; (8002624 <HAL_DMA_Init+0x4ec>)
 8002502:	eba4 0b02 	sub.w	fp, r4, r2
 8002506:	4e48      	ldr	r6, [pc, #288]	; (8002628 <HAL_DMA_Init+0x4f0>)
 8002508:	eba4 0a03 	sub.w	sl, r4, r3
 800250c:	4f47      	ldr	r7, [pc, #284]	; (800262c <HAL_DMA_Init+0x4f4>)
 800250e:	fabb fb8b 	clz	fp, fp
 8002512:	1ba6      	subs	r6, r4, r6
 8002514:	faba fa8a 	clz	sl, sl
 8002518:	333c      	adds	r3, #60	; 0x3c
 800251a:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 800251e:	fab6 f686 	clz	r6, r6
 8002522:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8002526:	1be7      	subs	r7, r4, r7
 8002528:	eba4 0803 	sub.w	r8, r4, r3
 800252c:	0976      	lsrs	r6, r6, #5
 800252e:	3314      	adds	r3, #20
 8002530:	fab7 f787 	clz	r7, r7
 8002534:	ea4b 010a 	orr.w	r1, fp, sl
 8002538:	fab8 f888 	clz	r8, r8
 800253c:	eba4 0903 	sub.w	r9, r4, r3
 8002540:	097f      	lsrs	r7, r7, #5
 8002542:	4331      	orrs	r1, r6
 8002544:	3314      	adds	r3, #20
 8002546:	ea4f 1858 	mov.w	r8, r8, lsr #5
 800254a:	fab9 f989 	clz	r9, r9
 800254e:	4339      	orrs	r1, r7
 8002550:	1ae3      	subs	r3, r4, r3
 8002552:	4837      	ldr	r0, [pc, #220]	; (8002630 <HAL_DMA_Init+0x4f8>)
 8002554:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8002558:	ea48 0101 	orr.w	r1, r8, r1
 800255c:	fab3 f383 	clz	r3, r3
 8002560:	1a22      	subs	r2, r4, r0
 8002562:	ea49 0101 	orr.w	r1, r9, r1
 8002566:	095b      	lsrs	r3, r3, #5
 8002568:	fab2 f282 	clz	r2, r2
 800256c:	4319      	orrs	r1, r3
 800256e:	ea4f 1252 	mov.w	r2, r2, lsr #5
 8002572:	9201      	str	r2, [sp, #4]
 8002574:	d101      	bne.n	800257a <HAL_DMA_Init+0x442>
 8002576:	2a00      	cmp	r2, #0
 8002578:	d041      	beq.n	80025fe <HAL_DMA_Init+0x4c6>
    hdma->State = HAL_DMA_STATE_BUSY;
 800257a:	2102      	movs	r1, #2
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800257c:	f8df c0bc 	ldr.w	ip, [pc, #188]	; 800263c <HAL_DMA_Init+0x504>
    hdma->State = HAL_DMA_STATE_BUSY;
 8002580:	f885 1035 	strb.w	r1, [r5, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 8002584:	2100      	movs	r1, #0
 8002586:	f885 1034 	strb.w	r1, [r5, #52]	; 0x34
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800258a:	6821      	ldr	r1, [r4, #0]
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800258c:	ea01 0c0c 	and.w	ip, r1, ip
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002590:	68a9      	ldr	r1, [r5, #8]
 8002592:	2940      	cmp	r1, #64	; 0x40
 8002594:	d030      	beq.n	80025f8 <HAL_DMA_Init+0x4c0>
 8002596:	f1a1 0180 	sub.w	r1, r1, #128	; 0x80
 800259a:	fab1 f181 	clz	r1, r1
 800259e:	0949      	lsrs	r1, r1, #5
 80025a0:	ea4f 3e81 	mov.w	lr, r1, lsl #14
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80025a4:	6929      	ldr	r1, [r5, #16]
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80025a6:	68e8      	ldr	r0, [r5, #12]
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80025a8:	08c9      	lsrs	r1, r1, #3
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80025aa:	4a22      	ldr	r2, [pc, #136]	; (8002634 <HAL_DMA_Init+0x4fc>)
 80025ac:	9300      	str	r3, [sp, #0]
 80025ae:	ea41 00d0 	orr.w	r0, r1, r0, lsr #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80025b2:	6969      	ldr	r1, [r5, #20]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80025b4:	4422      	add	r2, r4
 80025b6:	ea40 00d1 	orr.w	r0, r0, r1, lsr #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80025ba:	69a9      	ldr	r1, [r5, #24]
 80025bc:	ea40 00d1 	orr.w	r0, r0, r1, lsr #3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80025c0:	69e9      	ldr	r1, [r5, #28]
 80025c2:	ea40 00d1 	orr.w	r0, r0, r1, lsr #3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80025c6:	6a29      	ldr	r1, [r5, #32]
 80025c8:	ea40 1111 	orr.w	r1, r0, r1, lsr #4
 80025cc:	ea41 010c 	orr.w	r1, r1, ip
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80025d0:	ea4e 0101 	orr.w	r1, lr, r1
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80025d4:	6021      	str	r1, [r4, #0]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80025d6:	4918      	ldr	r1, [pc, #96]	; (8002638 <HAL_DMA_Init+0x500>)
 80025d8:	fba1 0102 	umull	r0, r1, r1, r2
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80025dc:	4628      	mov	r0, r5
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80025de:	0909      	lsrs	r1, r1, #4
 80025e0:	0089      	lsls	r1, r1, #2
 80025e2:	65e9      	str	r1, [r5, #92]	; 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80025e4:	f7ff fcc6 	bl	8001f74 <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80025e8:	6de9      	ldr	r1, [r5, #92]	; 0x5c
 80025ea:	9b00      	ldr	r3, [sp, #0]
 80025ec:	f001 041f 	and.w	r4, r1, #31
 80025f0:	2101      	movs	r1, #1
 80025f2:	40a1      	lsls	r1, r4
 80025f4:	6041      	str	r1, [r0, #4]
 80025f6:	e6e0      	b.n	80023ba <HAL_DMA_Init+0x282>
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80025f8:	f04f 0e10 	mov.w	lr, #16
 80025fc:	e7d2      	b.n	80025a4 <HAL_DMA_Init+0x46c>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80025fe:	2240      	movs	r2, #64	; 0x40
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002600:	2303      	movs	r3, #3
    return HAL_ERROR;
 8002602:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002604:	656a      	str	r2, [r5, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002606:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
    return HAL_ERROR;
 800260a:	e719      	b.n	8002440 <HAL_DMA_Init+0x308>
 800260c:	c3c0003f 	.word	0xc3c0003f
 8002610:	1000823f 	.word	0x1000823f
 8002614:	40020940 	.word	0x40020940
 8002618:	1600963f 	.word	0x1600963f
 800261c:	58025940 	.word	0x58025940
 8002620:	58025408 	.word	0x58025408
 8002624:	5802541c 	.word	0x5802541c
 8002628:	58025430 	.word	0x58025430
 800262c:	58025444 	.word	0x58025444
 8002630:	58025494 	.word	0x58025494
 8002634:	a7fdabf8 	.word	0xa7fdabf8
 8002638:	cccccccd 	.word	0xcccccccd
 800263c:	fffe000f 	.word	0xfffe000f

08002640 <HAL_DMA_Start_IT>:
  if(hdma == NULL)
 8002640:	2800      	cmp	r0, #0
 8002642:	f000 8177 	beq.w	8002934 <HAL_DMA_Start_IT+0x2f4>
 8002646:	4684      	mov	ip, r0
  __HAL_LOCK(hdma);
 8002648:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 800264c:	2801      	cmp	r0, #1
 800264e:	f000 8173 	beq.w	8002938 <HAL_DMA_Start_IT+0x2f8>
 8002652:	2001      	movs	r0, #1
{
 8002654:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if(HAL_DMA_STATE_READY == hdma->State)
 8002658:	f89c 4035 	ldrb.w	r4, [ip, #53]	; 0x35
  __HAL_LOCK(hdma);
 800265c:	f88c 0034 	strb.w	r0, [ip, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8002660:	4284      	cmp	r4, r0
 8002662:	d008      	beq.n	8002676 <HAL_DMA_Start_IT+0x36>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002664:	f44f 6200 	mov.w	r2, #2048	; 0x800
    __HAL_UNLOCK(hdma);
 8002668:	2300      	movs	r3, #0
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800266a:	f8cc 2054 	str.w	r2, [ip, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 800266e:	f88c 3034 	strb.w	r3, [ip, #52]	; 0x34
}
 8002672:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8002676:	2002      	movs	r0, #2
    __HAL_DMA_DISABLE(hdma);
 8002678:	f8dc 4000 	ldr.w	r4, [ip]
 800267c:	4d53      	ldr	r5, [pc, #332]	; (80027cc <HAL_DMA_Start_IT+0x18c>)
    hdma->State = HAL_DMA_STATE_BUSY;
 800267e:	f88c 0035 	strb.w	r0, [ip, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002682:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 8002684:	4e52      	ldr	r6, [pc, #328]	; (80027d0 <HAL_DMA_Start_IT+0x190>)
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002686:	f8cc 0054 	str.w	r0, [ip, #84]	; 0x54
    __HAL_DMA_DISABLE(hdma);
 800268a:	4852      	ldr	r0, [pc, #328]	; (80027d4 <HAL_DMA_Start_IT+0x194>)
 800268c:	42ac      	cmp	r4, r5
 800268e:	bf18      	it	ne
 8002690:	4284      	cmpne	r4, r0
 8002692:	f105 0518 	add.w	r5, r5, #24
 8002696:	bf0c      	ite	eq
 8002698:	2001      	moveq	r0, #1
 800269a:	2000      	movne	r0, #0
 800269c:	42ac      	cmp	r4, r5
 800269e:	bf08      	it	eq
 80026a0:	f040 0001 	orreq.w	r0, r0, #1
 80026a4:	3518      	adds	r5, #24
 80026a6:	42ac      	cmp	r4, r5
 80026a8:	bf08      	it	eq
 80026aa:	f040 0001 	orreq.w	r0, r0, #1
 80026ae:	3518      	adds	r5, #24
 80026b0:	42ac      	cmp	r4, r5
 80026b2:	bf08      	it	eq
 80026b4:	f040 0001 	orreq.w	r0, r0, #1
 80026b8:	3518      	adds	r5, #24
 80026ba:	42ac      	cmp	r4, r5
 80026bc:	bf08      	it	eq
 80026be:	f040 0001 	orreq.w	r0, r0, #1
 80026c2:	f505 7556 	add.w	r5, r5, #856	; 0x358
 80026c6:	42ac      	cmp	r4, r5
 80026c8:	bf08      	it	eq
 80026ca:	f040 0001 	orreq.w	r0, r0, #1
 80026ce:	3518      	adds	r5, #24
 80026d0:	42ac      	cmp	r4, r5
 80026d2:	bf08      	it	eq
 80026d4:	f040 0001 	orreq.w	r0, r0, #1
 80026d8:	3518      	adds	r5, #24
 80026da:	42ac      	cmp	r4, r5
 80026dc:	bf08      	it	eq
 80026de:	f040 0001 	orreq.w	r0, r0, #1
 80026e2:	3518      	adds	r5, #24
 80026e4:	42ac      	cmp	r4, r5
 80026e6:	bf08      	it	eq
 80026e8:	f040 0001 	orreq.w	r0, r0, #1
 80026ec:	3518      	adds	r5, #24
 80026ee:	42ac      	cmp	r4, r5
 80026f0:	bf08      	it	eq
 80026f2:	f040 0001 	orreq.w	r0, r0, #1
 80026f6:	3518      	adds	r5, #24
 80026f8:	42ac      	cmp	r4, r5
 80026fa:	bf08      	it	eq
 80026fc:	f040 0001 	orreq.w	r0, r0, #1
 8002700:	3518      	adds	r5, #24
 8002702:	42ac      	cmp	r4, r5
 8002704:	bf08      	it	eq
 8002706:	f040 0001 	orreq.w	r0, r0, #1
 800270a:	3518      	adds	r5, #24
 800270c:	42ac      	cmp	r4, r5
 800270e:	bf14      	ite	ne
 8002710:	4681      	movne	r9, r0
 8002712:	f040 0901 	orreq.w	r9, r0, #1
 8002716:	f5a5 6595 	sub.w	r5, r5, #1192	; 0x4a8
 800271a:	42b4      	cmp	r4, r6
 800271c:	bf18      	it	ne
 800271e:	42ac      	cmpne	r4, r5
 8002720:	bf0c      	ite	eq
 8002722:	2501      	moveq	r5, #1
 8002724:	2500      	movne	r5, #0
 8002726:	d002      	beq.n	800272e <HAL_DMA_Start_IT+0xee>
 8002728:	f1b9 0f00 	cmp.w	r9, #0
 800272c:	d054      	beq.n	80027d8 <HAL_DMA_Start_IT+0x198>
 800272e:	6826      	ldr	r6, [r4, #0]
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002730:	f8dc a058 	ldr.w	sl, [ip, #88]	; 0x58
    __HAL_DMA_DISABLE(hdma);
 8002734:	f026 0601 	bic.w	r6, r6, #1
 8002738:	6026      	str	r6, [r4, #0]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800273a:	2d00      	cmp	r5, #0
 800273c:	d078      	beq.n	8002830 <HAL_DMA_Start_IT+0x1f0>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800273e:	e9dc 6719 	ldrd	r6, r7, [ip, #100]	; 0x64
 8002742:	6077      	str	r7, [r6, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 8002744:	f8dc 706c 	ldr.w	r7, [ip, #108]	; 0x6c
 8002748:	b117      	cbz	r7, 8002750 <HAL_DMA_Start_IT+0x110>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800274a:	e9dc 601c 	ldrd	r6, r0, [ip, #112]	; 0x70
 800274e:	6070      	str	r0, [r6, #4]
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002750:	f8dc 605c 	ldr.w	r6, [ip, #92]	; 0x5c
 8002754:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
 8002758:	f006 081f 	and.w	r8, r6, #31
 800275c:	fa0e fe08 	lsl.w	lr, lr, r8
 8002760:	f8ca e008 	str.w	lr, [sl, #8]
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002764:	6826      	ldr	r6, [r4, #0]
 8002766:	f426 2680 	bic.w	r6, r6, #262144	; 0x40000
 800276a:	6026      	str	r6, [r4, #0]
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800276c:	6063      	str	r3, [r4, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800276e:	f8dc 3008 	ldr.w	r3, [ip, #8]
 8002772:	2b40      	cmp	r3, #64	; 0x40
 8002774:	f000 80e2 	beq.w	800293c <HAL_DMA_Start_IT+0x2fc>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8002778:	60a1      	str	r1, [r4, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800277a:	60e2      	str	r2, [r4, #12]
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800277c:	b91d      	cbnz	r5, 8002786 <HAL_DMA_Start_IT+0x146>
 800277e:	f1b9 0f00 	cmp.w	r9, #0
 8002782:	f000 80e1 	beq.w	8002948 <HAL_DMA_Start_IT+0x308>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002786:	6823      	ldr	r3, [r4, #0]
 8002788:	f023 031e 	bic.w	r3, r3, #30
 800278c:	f043 0316 	orr.w	r3, r3, #22
 8002790:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8002792:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
 8002796:	b11b      	cbz	r3, 80027a0 <HAL_DMA_Start_IT+0x160>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002798:	6823      	ldr	r3, [r4, #0]
 800279a:	f043 0308 	orr.w	r3, r3, #8
 800279e:	6023      	str	r3, [r4, #0]
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80027a0:	f8dc 3060 	ldr.w	r3, [ip, #96]	; 0x60
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	03d2      	lsls	r2, r2, #15
 80027a8:	d503      	bpl.n	80027b2 <HAL_DMA_Start_IT+0x172>
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027b0:	601a      	str	r2, [r3, #0]
      if(hdma->DMAmuxRequestGen != 0U)
 80027b2:	b11f      	cbz	r7, 80027bc <HAL_DMA_Start_IT+0x17c>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027ba:	603b      	str	r3, [r7, #0]
    __HAL_DMA_ENABLE(hdma);
 80027bc:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027be:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 80027c0:	f043 0301 	orr.w	r3, r3, #1
 80027c4:	6023      	str	r3, [r4, #0]
}
 80027c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80027ca:	bf00      	nop
 80027cc:	40020058 	.word	0x40020058
 80027d0:	40020028 	.word	0x40020028
 80027d4:	40020040 	.word	0x40020040
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80027d8:	4f61      	ldr	r7, [pc, #388]	; (8002960 <HAL_DMA_Start_IT+0x320>)
 80027da:	4e62      	ldr	r6, [pc, #392]	; (8002964 <HAL_DMA_Start_IT+0x324>)
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80027dc:	f8dc a058 	ldr.w	sl, [ip, #88]	; 0x58
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80027e0:	42b4      	cmp	r4, r6
 80027e2:	bf18      	it	ne
 80027e4:	42bc      	cmpne	r4, r7
 80027e6:	f106 0628 	add.w	r6, r6, #40	; 0x28
 80027ea:	bf0c      	ite	eq
 80027ec:	2701      	moveq	r7, #1
 80027ee:	2700      	movne	r7, #0
 80027f0:	42b4      	cmp	r4, r6
 80027f2:	bf08      	it	eq
 80027f4:	f047 0701 	orreq.w	r7, r7, #1
 80027f8:	3614      	adds	r6, #20
 80027fa:	42b4      	cmp	r4, r6
 80027fc:	bf08      	it	eq
 80027fe:	f047 0701 	orreq.w	r7, r7, #1
 8002802:	3614      	adds	r6, #20
 8002804:	42b4      	cmp	r4, r6
 8002806:	bf08      	it	eq
 8002808:	f047 0701 	orreq.w	r7, r7, #1
 800280c:	3614      	adds	r6, #20
 800280e:	42b4      	cmp	r4, r6
 8002810:	bf08      	it	eq
 8002812:	f047 0701 	orreq.w	r7, r7, #1
    __HAL_DMA_DISABLE(hdma);
 8002816:	6826      	ldr	r6, [r4, #0]
 8002818:	f026 0601 	bic.w	r6, r6, #1
 800281c:	6026      	str	r6, [r4, #0]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800281e:	4e52      	ldr	r6, [pc, #328]	; (8002968 <HAL_DMA_Start_IT+0x328>)
 8002820:	42b4      	cmp	r4, r6
 8002822:	bf08      	it	eq
 8002824:	f047 0701 	orreq.w	r7, r7, #1
 8002828:	b917      	cbnz	r7, 8002830 <HAL_DMA_Start_IT+0x1f0>
 800282a:	4f50      	ldr	r7, [pc, #320]	; (800296c <HAL_DMA_Start_IT+0x32c>)
 800282c:	42bc      	cmp	r4, r7
 800282e:	d10b      	bne.n	8002848 <HAL_DMA_Start_IT+0x208>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002830:	e9dc 6719 	ldrd	r6, r7, [ip, #100]	; 0x64
 8002834:	6077      	str	r7, [r6, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 8002836:	f8dc 706c 	ldr.w	r7, [ip, #108]	; 0x6c
 800283a:	b117      	cbz	r7, 8002842 <HAL_DMA_Start_IT+0x202>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800283c:	e9dc 061c 	ldrd	r0, r6, [ip, #112]	; 0x70
 8002840:	6046      	str	r6, [r0, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002842:	f1b9 0f00 	cmp.w	r9, #0
 8002846:	d183      	bne.n	8002750 <HAL_DMA_Start_IT+0x110>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002848:	4f46      	ldr	r7, [pc, #280]	; (8002964 <HAL_DMA_Start_IT+0x324>)
 800284a:	f8df e114 	ldr.w	lr, [pc, #276]	; 8002960 <HAL_DMA_Start_IT+0x320>
 800284e:	4574      	cmp	r4, lr
 8002850:	bf18      	it	ne
 8002852:	42bc      	cmpne	r4, r7
 8002854:	f10e 0e14 	add.w	lr, lr, #20
 8002858:	bf0c      	ite	eq
 800285a:	2701      	moveq	r7, #1
 800285c:	2700      	movne	r7, #0
 800285e:	4574      	cmp	r4, lr
 8002860:	bf08      	it	eq
 8002862:	f047 0701 	orreq.w	r7, r7, #1
 8002866:	f10e 0e14 	add.w	lr, lr, #20
 800286a:	4574      	cmp	r4, lr
 800286c:	bf08      	it	eq
 800286e:	f047 0701 	orreq.w	r7, r7, #1
 8002872:	f10e 0e14 	add.w	lr, lr, #20
 8002876:	4574      	cmp	r4, lr
 8002878:	bf08      	it	eq
 800287a:	f047 0701 	orreq.w	r7, r7, #1
 800287e:	f10e 0e14 	add.w	lr, lr, #20
 8002882:	4574      	cmp	r4, lr
 8002884:	bf08      	it	eq
 8002886:	f047 0701 	orreq.w	r7, r7, #1
 800288a:	f10e 0e14 	add.w	lr, lr, #20
 800288e:	4574      	cmp	r4, lr
 8002890:	bf08      	it	eq
 8002892:	f047 0701 	orreq.w	r7, r7, #1
 8002896:	b917      	cbnz	r7, 800289e <HAL_DMA_Start_IT+0x25e>
 8002898:	4f34      	ldr	r7, [pc, #208]	; (800296c <HAL_DMA_Start_IT+0x32c>)
 800289a:	42bc      	cmp	r4, r7
 800289c:	d154      	bne.n	8002948 <HAL_DMA_Start_IT+0x308>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800289e:	f8dc 005c 	ldr.w	r0, [ip, #92]	; 0x5c
 80028a2:	2701      	movs	r7, #1
 80028a4:	f000 0e1f 	and.w	lr, r0, #31
 80028a8:	fa07 f70e 	lsl.w	r7, r7, lr
 80028ac:	f8ca 7004 	str.w	r7, [sl, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80028b0:	6063      	str	r3, [r4, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80028b2:	f8dc 3008 	ldr.w	r3, [ip, #8]
 80028b6:	2b40      	cmp	r3, #64	; 0x40
 80028b8:	d043      	beq.n	8002942 <HAL_DMA_Start_IT+0x302>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80028ba:	60a1      	str	r1, [r4, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80028bc:	60e2      	str	r2, [r4, #12]
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80028be:	6823      	ldr	r3, [r4, #0]
 80028c0:	f023 030e 	bic.w	r3, r3, #14
 80028c4:	f043 030a 	orr.w	r3, r3, #10
 80028c8:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 80028ca:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d02d      	beq.n	800292e <HAL_DMA_Start_IT+0x2ee>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80028d2:	6823      	ldr	r3, [r4, #0]
 80028d4:	f043 0304 	orr.w	r3, r3, #4
 80028d8:	6023      	str	r3, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80028da:	4b21      	ldr	r3, [pc, #132]	; (8002960 <HAL_DMA_Start_IT+0x320>)
 80028dc:	4a21      	ldr	r2, [pc, #132]	; (8002964 <HAL_DMA_Start_IT+0x324>)
 80028de:	4294      	cmp	r4, r2
 80028e0:	bf18      	it	ne
 80028e2:	429c      	cmpne	r4, r3
 80028e4:	f102 0228 	add.w	r2, r2, #40	; 0x28
 80028e8:	bf0c      	ite	eq
 80028ea:	2301      	moveq	r3, #1
 80028ec:	2300      	movne	r3, #0
 80028ee:	4294      	cmp	r4, r2
 80028f0:	bf08      	it	eq
 80028f2:	f043 0301 	orreq.w	r3, r3, #1
 80028f6:	3214      	adds	r2, #20
 80028f8:	4294      	cmp	r4, r2
 80028fa:	bf08      	it	eq
 80028fc:	f043 0301 	orreq.w	r3, r3, #1
 8002900:	3214      	adds	r2, #20
 8002902:	4294      	cmp	r4, r2
 8002904:	bf08      	it	eq
 8002906:	f043 0301 	orreq.w	r3, r3, #1
 800290a:	3214      	adds	r2, #20
 800290c:	4294      	cmp	r4, r2
 800290e:	bf08      	it	eq
 8002910:	f043 0301 	orreq.w	r3, r3, #1
 8002914:	3214      	adds	r2, #20
 8002916:	4294      	cmp	r4, r2
 8002918:	bf08      	it	eq
 800291a:	f043 0301 	orreq.w	r3, r3, #1
 800291e:	3214      	adds	r2, #20
 8002920:	4294      	cmp	r4, r2
 8002922:	bf08      	it	eq
 8002924:	f043 0301 	orreq.w	r3, r3, #1
 8002928:	2b00      	cmp	r3, #0
 800292a:	f43f af47 	beq.w	80027bc <HAL_DMA_Start_IT+0x17c>
 800292e:	f8dc 706c 	ldr.w	r7, [ip, #108]	; 0x6c
 8002932:	e735      	b.n	80027a0 <HAL_DMA_Start_IT+0x160>
    return HAL_ERROR;
 8002934:	2001      	movs	r0, #1
 8002936:	4770      	bx	lr
  __HAL_LOCK(hdma);
 8002938:	2002      	movs	r0, #2
}
 800293a:	4770      	bx	lr
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800293c:	60a2      	str	r2, [r4, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800293e:	60e1      	str	r1, [r4, #12]
 8002940:	e71c      	b.n	800277c <HAL_DMA_Start_IT+0x13c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8002942:	60a2      	str	r2, [r4, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8002944:	60e1      	str	r1, [r4, #12]
 8002946:	e7ba      	b.n	80028be <HAL_DMA_Start_IT+0x27e>
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002948:	6823      	ldr	r3, [r4, #0]
 800294a:	f023 030e 	bic.w	r3, r3, #14
 800294e:	f043 030a 	orr.w	r3, r3, #10
 8002952:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8002954:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
 8002958:	2b00      	cmp	r3, #0
 800295a:	d1ba      	bne.n	80028d2 <HAL_DMA_Start_IT+0x292>
 800295c:	e7bd      	b.n	80028da <HAL_DMA_Start_IT+0x29a>
 800295e:	bf00      	nop
 8002960:	5802541c 	.word	0x5802541c
 8002964:	58025408 	.word	0x58025408
 8002968:	58025480 	.word	0x58025480
 800296c:	58025494 	.word	0x58025494

08002970 <HAL_DMA_Abort_IT>:
  if(hdma == NULL)
 8002970:	2800      	cmp	r0, #0
 8002972:	d05f      	beq.n	8002a34 <HAL_DMA_Abort_IT+0xc4>
{
 8002974:	b538      	push	{r3, r4, r5, lr}
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002976:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
 800297a:	4603      	mov	r3, r0
 800297c:	2a02      	cmp	r2, #2
 800297e:	d155      	bne.n	8002a2c <HAL_DMA_Abort_IT+0xbc>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002980:	6801      	ldr	r1, [r0, #0]
 8002982:	4a57      	ldr	r2, [pc, #348]	; (8002ae0 <HAL_DMA_Abort_IT+0x170>)
 8002984:	4291      	cmp	r1, r2
 8002986:	d048      	beq.n	8002a1a <HAL_DMA_Abort_IT+0xaa>
 8002988:	3218      	adds	r2, #24
 800298a:	4291      	cmp	r1, r2
 800298c:	d045      	beq.n	8002a1a <HAL_DMA_Abort_IT+0xaa>
 800298e:	3230      	adds	r2, #48	; 0x30
 8002990:	4c54      	ldr	r4, [pc, #336]	; (8002ae4 <HAL_DMA_Abort_IT+0x174>)
 8002992:	4855      	ldr	r0, [pc, #340]	; (8002ae8 <HAL_DMA_Abort_IT+0x178>)
 8002994:	42a1      	cmp	r1, r4
 8002996:	bf18      	it	ne
 8002998:	4291      	cmpne	r1, r2
 800299a:	f104 0448 	add.w	r4, r4, #72	; 0x48
 800299e:	bf0c      	ite	eq
 80029a0:	2201      	moveq	r2, #1
 80029a2:	2200      	movne	r2, #0
 80029a4:	4281      	cmp	r1, r0
 80029a6:	bf08      	it	eq
 80029a8:	f042 0201 	orreq.w	r2, r2, #1
 80029ac:	3030      	adds	r0, #48	; 0x30
 80029ae:	42a1      	cmp	r1, r4
 80029b0:	bf08      	it	eq
 80029b2:	f042 0201 	orreq.w	r2, r2, #1
 80029b6:	3430      	adds	r4, #48	; 0x30
 80029b8:	4281      	cmp	r1, r0
 80029ba:	bf08      	it	eq
 80029bc:	f042 0201 	orreq.w	r2, r2, #1
 80029c0:	f500 705c 	add.w	r0, r0, #880	; 0x370
 80029c4:	42a1      	cmp	r1, r4
 80029c6:	bf08      	it	eq
 80029c8:	f042 0201 	orreq.w	r2, r2, #1
 80029cc:	f504 745c 	add.w	r4, r4, #880	; 0x370
 80029d0:	4281      	cmp	r1, r0
 80029d2:	bf08      	it	eq
 80029d4:	f042 0201 	orreq.w	r2, r2, #1
 80029d8:	3030      	adds	r0, #48	; 0x30
 80029da:	42a1      	cmp	r1, r4
 80029dc:	bf08      	it	eq
 80029de:	f042 0201 	orreq.w	r2, r2, #1
 80029e2:	3430      	adds	r4, #48	; 0x30
 80029e4:	4281      	cmp	r1, r0
 80029e6:	bf08      	it	eq
 80029e8:	f042 0201 	orreq.w	r2, r2, #1
 80029ec:	3030      	adds	r0, #48	; 0x30
 80029ee:	42a1      	cmp	r1, r4
 80029f0:	bf08      	it	eq
 80029f2:	f042 0201 	orreq.w	r2, r2, #1
 80029f6:	3430      	adds	r4, #48	; 0x30
 80029f8:	4281      	cmp	r1, r0
 80029fa:	bf08      	it	eq
 80029fc:	f042 0201 	orreq.w	r2, r2, #1
 8002a00:	3030      	adds	r0, #48	; 0x30
 8002a02:	42a1      	cmp	r1, r4
 8002a04:	bf08      	it	eq
 8002a06:	f042 0201 	orreq.w	r2, r2, #1
 8002a0a:	4281      	cmp	r1, r0
 8002a0c:	bf08      	it	eq
 8002a0e:	f042 0201 	orreq.w	r2, r2, #1
 8002a12:	b912      	cbnz	r2, 8002a1a <HAL_DMA_Abort_IT+0xaa>
 8002a14:	4a35      	ldr	r2, [pc, #212]	; (8002aec <HAL_DMA_Abort_IT+0x17c>)
 8002a16:	4291      	cmp	r1, r2
 8002a18:	d10e      	bne.n	8002a38 <HAL_DMA_Abort_IT+0xc8>
      hdma->State = HAL_DMA_STATE_ABORT;
 8002a1a:	2204      	movs	r2, #4
  return HAL_OK;
 8002a1c:	2000      	movs	r0, #0
      hdma->State = HAL_DMA_STATE_ABORT;
 8002a1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8002a22:	680b      	ldr	r3, [r1, #0]
 8002a24:	f023 0301 	bic.w	r3, r3, #1
 8002a28:	600b      	str	r3, [r1, #0]
}
 8002a2a:	bd38      	pop	{r3, r4, r5, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a2c:	2280      	movs	r2, #128	; 0x80
    return HAL_ERROR;
 8002a2e:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a30:	655a      	str	r2, [r3, #84]	; 0x54
}
 8002a32:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8002a34:	2001      	movs	r0, #1
}
 8002a36:	4770      	bx	lr
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002a38:	4a2d      	ldr	r2, [pc, #180]	; (8002af0 <HAL_DMA_Abort_IT+0x180>)
 8002a3a:	4d2e      	ldr	r5, [pc, #184]	; (8002af4 <HAL_DMA_Abort_IT+0x184>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002a3c:	6808      	ldr	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002a3e:	42a9      	cmp	r1, r5
 8002a40:	bf18      	it	ne
 8002a42:	4291      	cmpne	r1, r2
 8002a44:	4c2c      	ldr	r4, [pc, #176]	; (8002af8 <HAL_DMA_Abort_IT+0x188>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002a46:	f020 000e 	bic.w	r0, r0, #14
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002a4a:	f105 053c 	add.w	r5, r5, #60	; 0x3c
 8002a4e:	bf0c      	ite	eq
 8002a50:	2201      	moveq	r2, #1
 8002a52:	2200      	movne	r2, #0
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002a54:	6008      	str	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002a56:	42a1      	cmp	r1, r4
 8002a58:	bf08      	it	eq
 8002a5a:	f042 0201 	orreq.w	r2, r2, #1
      __HAL_DMA_DISABLE(hdma);
 8002a5e:	6808      	ldr	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002a60:	3428      	adds	r4, #40	; 0x28
 8002a62:	42a9      	cmp	r1, r5
 8002a64:	bf08      	it	eq
 8002a66:	f042 0201 	orreq.w	r2, r2, #1
      __HAL_DMA_DISABLE(hdma);
 8002a6a:	f020 0001 	bic.w	r0, r0, #1
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002a6e:	42a1      	cmp	r1, r4
 8002a70:	bf08      	it	eq
 8002a72:	f042 0201 	orreq.w	r2, r2, #1
 8002a76:	3414      	adds	r4, #20
      __HAL_DMA_DISABLE(hdma);
 8002a78:	6008      	str	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002a7a:	42a1      	cmp	r1, r4
 8002a7c:	bf08      	it	eq
 8002a7e:	f042 0201 	orreq.w	r2, r2, #1
 8002a82:	481e      	ldr	r0, [pc, #120]	; (8002afc <HAL_DMA_Abort_IT+0x18c>)
 8002a84:	4281      	cmp	r1, r0
 8002a86:	bf08      	it	eq
 8002a88:	f042 0201 	orreq.w	r2, r2, #1
 8002a8c:	b912      	cbnz	r2, 8002a94 <HAL_DMA_Abort_IT+0x124>
 8002a8e:	4a1c      	ldr	r2, [pc, #112]	; (8002b00 <HAL_DMA_Abort_IT+0x190>)
 8002a90:	4291      	cmp	r1, r2
 8002a92:	d117      	bne.n	8002ac4 <HAL_DMA_Abort_IT+0x154>
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002a94:	2201      	movs	r2, #1
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a96:	6d9d      	ldr	r5, [r3, #88]	; 0x58
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002a98:	e9d3 0417 	ldrd	r0, r4, [r3, #92]	; 0x5c
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002a9c:	6821      	ldr	r1, [r4, #0]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002a9e:	f000 001f 	and.w	r0, r0, #31
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002aa2:	f421 7180 	bic.w	r1, r1, #256	; 0x100
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002aa6:	4082      	lsls	r2, r0
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002aa8:	6021      	str	r1, [r4, #0]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002aaa:	606a      	str	r2, [r5, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 8002aac:	6eda      	ldr	r2, [r3, #108]	; 0x6c
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002aae:	e9d3 1019 	ldrd	r1, r0, [r3, #100]	; 0x64
 8002ab2:	6048      	str	r0, [r1, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 8002ab4:	b132      	cbz	r2, 8002ac4 <HAL_DMA_Abort_IT+0x154>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002ab6:	6811      	ldr	r1, [r2, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002ab8:	e9d3 041c 	ldrd	r0, r4, [r3, #112]	; 0x70
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002abc:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8002ac0:	6011      	str	r1, [r2, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002ac2:	6044      	str	r4, [r0, #4]
      hdma->State = HAL_DMA_STATE_READY;
 8002ac4:	2101      	movs	r1, #1
      __HAL_UNLOCK(hdma);
 8002ac6:	2400      	movs	r4, #0
      if(hdma->XferAbortCallback != NULL)
 8002ac8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
      hdma->State = HAL_DMA_STATE_READY;
 8002aca:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 8002ace:	f883 4034 	strb.w	r4, [r3, #52]	; 0x34
      if(hdma->XferAbortCallback != NULL)
 8002ad2:	b11a      	cbz	r2, 8002adc <HAL_DMA_Abort_IT+0x16c>
        hdma->XferAbortCallback(hdma);
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	4790      	blx	r2
  return HAL_OK;
 8002ad8:	4620      	mov	r0, r4
}
 8002ada:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 8002adc:	4610      	mov	r0, r2
}
 8002ade:	bd38      	pop	{r3, r4, r5, pc}
 8002ae0:	40020010 	.word	0x40020010
 8002ae4:	40020040 	.word	0x40020040
 8002ae8:	40020070 	.word	0x40020070
 8002aec:	400204b8 	.word	0x400204b8
 8002af0:	5802541c 	.word	0x5802541c
 8002af4:	58025408 	.word	0x58025408
 8002af8:	58025430 	.word	0x58025430
 8002afc:	58025480 	.word	0x58025480
 8002b00:	58025494 	.word	0x58025494

08002b04 <HAL_DMA_IRQHandler>:
{
 8002b04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __IO uint32_t count = 0U;
 8002b08:	2200      	movs	r2, #0
  uint32_t timeout = SystemCoreClock / 9600U;
 8002b0a:	4b9e      	ldr	r3, [pc, #632]	; (8002d84 <HAL_DMA_IRQHandler+0x280>)
{
 8002b0c:	b082      	sub	sp, #8
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b0e:	6d84      	ldr	r4, [r0, #88]	; 0x58
{
 8002b10:	4606      	mov	r6, r0
  uint32_t timeout = SystemCoreClock / 9600U;
 8002b12:	681d      	ldr	r5, [r3, #0]
  __IO uint32_t count = 0U;
 8002b14:	9201      	str	r2, [sp, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002b16:	6803      	ldr	r3, [r0, #0]
 8002b18:	4a9b      	ldr	r2, [pc, #620]	; (8002d88 <HAL_DMA_IRQHandler+0x284>)
 8002b1a:	489c      	ldr	r0, [pc, #624]	; (8002d8c <HAL_DMA_IRQHandler+0x288>)
  tmpisr_dma  = regs_dma->ISR;
 8002b1c:	6827      	ldr	r7, [r4, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	bf18      	it	ne
 8002b22:	4283      	cmpne	r3, r0
  tmpisr_bdma = regs_bdma->ISR;
 8002b24:	6821      	ldr	r1, [r4, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002b26:	bf0c      	ite	eq
 8002b28:	2001      	moveq	r0, #1
 8002b2a:	2000      	movne	r0, #0
 8002b2c:	d04f      	beq.n	8002bce <HAL_DMA_IRQHandler+0xca>
 8002b2e:	3218      	adds	r2, #24
 8002b30:	f8df c260 	ldr.w	ip, [pc, #608]	; 8002d94 <HAL_DMA_IRQHandler+0x290>
 8002b34:	4563      	cmp	r3, ip
 8002b36:	bf18      	it	ne
 8002b38:	4293      	cmpne	r3, r2
 8002b3a:	f10c 0c18 	add.w	ip, ip, #24
 8002b3e:	bf0c      	ite	eq
 8002b40:	2201      	moveq	r2, #1
 8002b42:	2200      	movne	r2, #0
 8002b44:	4563      	cmp	r3, ip
 8002b46:	bf08      	it	eq
 8002b48:	f042 0201 	orreq.w	r2, r2, #1
 8002b4c:	f10c 0c18 	add.w	ip, ip, #24
 8002b50:	4563      	cmp	r3, ip
 8002b52:	bf08      	it	eq
 8002b54:	f042 0201 	orreq.w	r2, r2, #1
 8002b58:	f10c 0c18 	add.w	ip, ip, #24
 8002b5c:	4563      	cmp	r3, ip
 8002b5e:	bf08      	it	eq
 8002b60:	f042 0201 	orreq.w	r2, r2, #1
 8002b64:	f10c 0c18 	add.w	ip, ip, #24
 8002b68:	4563      	cmp	r3, ip
 8002b6a:	bf08      	it	eq
 8002b6c:	f042 0201 	orreq.w	r2, r2, #1
 8002b70:	f50c 7c56 	add.w	ip, ip, #856	; 0x358
 8002b74:	4563      	cmp	r3, ip
 8002b76:	bf08      	it	eq
 8002b78:	f042 0201 	orreq.w	r2, r2, #1
 8002b7c:	f10c 0c18 	add.w	ip, ip, #24
 8002b80:	4563      	cmp	r3, ip
 8002b82:	bf08      	it	eq
 8002b84:	f042 0201 	orreq.w	r2, r2, #1
 8002b88:	f10c 0c18 	add.w	ip, ip, #24
 8002b8c:	4563      	cmp	r3, ip
 8002b8e:	bf08      	it	eq
 8002b90:	f042 0201 	orreq.w	r2, r2, #1
 8002b94:	f10c 0c18 	add.w	ip, ip, #24
 8002b98:	4563      	cmp	r3, ip
 8002b9a:	bf08      	it	eq
 8002b9c:	f042 0201 	orreq.w	r2, r2, #1
 8002ba0:	f10c 0c18 	add.w	ip, ip, #24
 8002ba4:	4563      	cmp	r3, ip
 8002ba6:	bf08      	it	eq
 8002ba8:	f042 0201 	orreq.w	r2, r2, #1
 8002bac:	f10c 0c18 	add.w	ip, ip, #24
 8002bb0:	4563      	cmp	r3, ip
 8002bb2:	bf08      	it	eq
 8002bb4:	f042 0201 	orreq.w	r2, r2, #1
 8002bb8:	f10c 0c18 	add.w	ip, ip, #24
 8002bbc:	4563      	cmp	r3, ip
 8002bbe:	bf08      	it	eq
 8002bc0:	f042 0201 	orreq.w	r2, r2, #1
 8002bc4:	b91a      	cbnz	r2, 8002bce <HAL_DMA_IRQHandler+0xca>
 8002bc6:	4a72      	ldr	r2, [pc, #456]	; (8002d90 <HAL_DMA_IRQHandler+0x28c>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	f040 824b 	bne.w	8003064 <HAL_DMA_IRQHandler+0x560>
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002bce:	6df1      	ldr	r1, [r6, #92]	; 0x5c
 8002bd0:	2208      	movs	r2, #8
 8002bd2:	f001 0c1f 	and.w	ip, r1, #31
 8002bd6:	fa02 f20c 	lsl.w	r2, r2, ip
 8002bda:	4217      	tst	r7, r2
 8002bdc:	f040 817d 	bne.w	8002eda <HAL_DMA_IRQHandler+0x3d6>
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002be0:	fa27 f20c 	lsr.w	r2, r7, ip
 8002be4:	07d2      	lsls	r2, r2, #31
 8002be6:	d50a      	bpl.n	8002bfe <HAL_DMA_IRQHandler+0xfa>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002be8:	695a      	ldr	r2, [r3, #20]
 8002bea:	0612      	lsls	r2, r2, #24
 8002bec:	d507      	bpl.n	8002bfe <HAL_DMA_IRQHandler+0xfa>
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002bee:	2201      	movs	r2, #1
 8002bf0:	fa02 f20c 	lsl.w	r2, r2, ip
 8002bf4:	60a2      	str	r2, [r4, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002bf6:	6d72      	ldr	r2, [r6, #84]	; 0x54
 8002bf8:	f042 0202 	orr.w	r2, r2, #2
 8002bfc:	6572      	str	r2, [r6, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002bfe:	f04f 0e04 	mov.w	lr, #4
 8002c02:	fa0e fe0c 	lsl.w	lr, lr, ip
 8002c06:	ea1e 0f07 	tst.w	lr, r7
 8002c0a:	d05a      	beq.n	8002cc2 <HAL_DMA_IRQHandler+0x1be>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002c0c:	2800      	cmp	r0, #0
 8002c0e:	d14f      	bne.n	8002cb0 <HAL_DMA_IRQHandler+0x1ac>
 8002c10:	4a60      	ldr	r2, [pc, #384]	; (8002d94 <HAL_DMA_IRQHandler+0x290>)
 8002c12:	f8df 8184 	ldr.w	r8, [pc, #388]	; 8002d98 <HAL_DMA_IRQHandler+0x294>
 8002c16:	4543      	cmp	r3, r8
 8002c18:	bf18      	it	ne
 8002c1a:	4293      	cmpne	r3, r2
 8002c1c:	f108 0830 	add.w	r8, r8, #48	; 0x30
 8002c20:	bf0c      	ite	eq
 8002c22:	2201      	moveq	r2, #1
 8002c24:	2200      	movne	r2, #0
 8002c26:	4543      	cmp	r3, r8
 8002c28:	bf08      	it	eq
 8002c2a:	f042 0201 	orreq.w	r2, r2, #1
 8002c2e:	f108 0818 	add.w	r8, r8, #24
 8002c32:	4543      	cmp	r3, r8
 8002c34:	bf08      	it	eq
 8002c36:	f042 0201 	orreq.w	r2, r2, #1
 8002c3a:	f108 0818 	add.w	r8, r8, #24
 8002c3e:	4543      	cmp	r3, r8
 8002c40:	bf08      	it	eq
 8002c42:	f042 0201 	orreq.w	r2, r2, #1
 8002c46:	f108 0818 	add.w	r8, r8, #24
 8002c4a:	4543      	cmp	r3, r8
 8002c4c:	bf08      	it	eq
 8002c4e:	f042 0201 	orreq.w	r2, r2, #1
 8002c52:	f508 7856 	add.w	r8, r8, #856	; 0x358
 8002c56:	4543      	cmp	r3, r8
 8002c58:	bf08      	it	eq
 8002c5a:	f042 0201 	orreq.w	r2, r2, #1
 8002c5e:	f108 0818 	add.w	r8, r8, #24
 8002c62:	4543      	cmp	r3, r8
 8002c64:	bf08      	it	eq
 8002c66:	f042 0201 	orreq.w	r2, r2, #1
 8002c6a:	f108 0818 	add.w	r8, r8, #24
 8002c6e:	4543      	cmp	r3, r8
 8002c70:	bf08      	it	eq
 8002c72:	f042 0201 	orreq.w	r2, r2, #1
 8002c76:	f108 0818 	add.w	r8, r8, #24
 8002c7a:	4543      	cmp	r3, r8
 8002c7c:	bf08      	it	eq
 8002c7e:	f042 0201 	orreq.w	r2, r2, #1
 8002c82:	f108 0818 	add.w	r8, r8, #24
 8002c86:	4543      	cmp	r3, r8
 8002c88:	bf08      	it	eq
 8002c8a:	f042 0201 	orreq.w	r2, r2, #1
 8002c8e:	f108 0818 	add.w	r8, r8, #24
 8002c92:	4543      	cmp	r3, r8
 8002c94:	bf08      	it	eq
 8002c96:	f042 0201 	orreq.w	r2, r2, #1
 8002c9a:	f108 0818 	add.w	r8, r8, #24
 8002c9e:	4543      	cmp	r3, r8
 8002ca0:	bf08      	it	eq
 8002ca2:	f042 0201 	orreq.w	r2, r2, #1
 8002ca6:	b91a      	cbnz	r2, 8002cb0 <HAL_DMA_IRQHandler+0x1ac>
 8002ca8:	4a39      	ldr	r2, [pc, #228]	; (8002d90 <HAL_DMA_IRQHandler+0x28c>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	f040 8214 	bne.w	80030d8 <HAL_DMA_IRQHandler+0x5d4>
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	0792      	lsls	r2, r2, #30
 8002cb4:	d505      	bpl.n	8002cc2 <HAL_DMA_IRQHandler+0x1be>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002cb6:	f8c4 e008 	str.w	lr, [r4, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002cba:	6d72      	ldr	r2, [r6, #84]	; 0x54
 8002cbc:	f042 0204 	orr.w	r2, r2, #4
 8002cc0:	6572      	str	r2, [r6, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002cc2:	2210      	movs	r2, #16
 8002cc4:	fa02 fc0c 	lsl.w	ip, r2, ip
 8002cc8:	ea1c 0f07 	tst.w	ip, r7
 8002ccc:	d069      	beq.n	8002da2 <HAL_DMA_IRQHandler+0x29e>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002cce:	2800      	cmp	r0, #0
 8002cd0:	d145      	bne.n	8002d5e <HAL_DMA_IRQHandler+0x25a>
 8002cd2:	4a30      	ldr	r2, [pc, #192]	; (8002d94 <HAL_DMA_IRQHandler+0x290>)
 8002cd4:	4830      	ldr	r0, [pc, #192]	; (8002d98 <HAL_DMA_IRQHandler+0x294>)
 8002cd6:	4283      	cmp	r3, r0
 8002cd8:	bf18      	it	ne
 8002cda:	4293      	cmpne	r3, r2
 8002cdc:	f100 0030 	add.w	r0, r0, #48	; 0x30
 8002ce0:	bf0c      	ite	eq
 8002ce2:	2201      	moveq	r2, #1
 8002ce4:	2200      	movne	r2, #0
 8002ce6:	4283      	cmp	r3, r0
 8002ce8:	bf08      	it	eq
 8002cea:	f042 0201 	orreq.w	r2, r2, #1
 8002cee:	3018      	adds	r0, #24
 8002cf0:	4283      	cmp	r3, r0
 8002cf2:	bf08      	it	eq
 8002cf4:	f042 0201 	orreq.w	r2, r2, #1
 8002cf8:	3018      	adds	r0, #24
 8002cfa:	4283      	cmp	r3, r0
 8002cfc:	bf08      	it	eq
 8002cfe:	f042 0201 	orreq.w	r2, r2, #1
 8002d02:	3018      	adds	r0, #24
 8002d04:	4283      	cmp	r3, r0
 8002d06:	bf08      	it	eq
 8002d08:	f042 0201 	orreq.w	r2, r2, #1
 8002d0c:	f500 7056 	add.w	r0, r0, #856	; 0x358
 8002d10:	4283      	cmp	r3, r0
 8002d12:	bf08      	it	eq
 8002d14:	f042 0201 	orreq.w	r2, r2, #1
 8002d18:	3018      	adds	r0, #24
 8002d1a:	4283      	cmp	r3, r0
 8002d1c:	bf08      	it	eq
 8002d1e:	f042 0201 	orreq.w	r2, r2, #1
 8002d22:	3018      	adds	r0, #24
 8002d24:	4283      	cmp	r3, r0
 8002d26:	bf08      	it	eq
 8002d28:	f042 0201 	orreq.w	r2, r2, #1
 8002d2c:	3018      	adds	r0, #24
 8002d2e:	4283      	cmp	r3, r0
 8002d30:	bf08      	it	eq
 8002d32:	f042 0201 	orreq.w	r2, r2, #1
 8002d36:	3018      	adds	r0, #24
 8002d38:	4283      	cmp	r3, r0
 8002d3a:	bf08      	it	eq
 8002d3c:	f042 0201 	orreq.w	r2, r2, #1
 8002d40:	3018      	adds	r0, #24
 8002d42:	4283      	cmp	r3, r0
 8002d44:	bf08      	it	eq
 8002d46:	f042 0201 	orreq.w	r2, r2, #1
 8002d4a:	3018      	adds	r0, #24
 8002d4c:	4283      	cmp	r3, r0
 8002d4e:	bf08      	it	eq
 8002d50:	f042 0201 	orreq.w	r2, r2, #1
 8002d54:	b91a      	cbnz	r2, 8002d5e <HAL_DMA_IRQHandler+0x25a>
 8002d56:	4a0e      	ldr	r2, [pc, #56]	; (8002d90 <HAL_DMA_IRQHandler+0x28c>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	f040 81c5 	bne.w	80030e8 <HAL_DMA_IRQHandler+0x5e4>
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	0712      	lsls	r2, r2, #28
 8002d62:	d51e      	bpl.n	8002da2 <HAL_DMA_IRQHandler+0x29e>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002d64:	f8c4 c008 	str.w	ip, [r4, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	0352      	lsls	r2, r2, #13
 8002d6c:	f100 814e 	bmi.w	800300c <HAL_DMA_IRQHandler+0x508>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	05d2      	lsls	r2, r2, #23
 8002d74:	d403      	bmi.n	8002d7e <HAL_DMA_IRQHandler+0x27a>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	f022 0208 	bic.w	r2, r2, #8
 8002d7c:	601a      	str	r2, [r3, #0]
          if(hdma->XferHalfCpltCallback != NULL)
 8002d7e:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8002d80:	b17b      	cbz	r3, 8002da2 <HAL_DMA_IRQHandler+0x29e>
 8002d82:	e00b      	b.n	8002d9c <HAL_DMA_IRQHandler+0x298>
 8002d84:	24000000 	.word	0x24000000
 8002d88:	40020028 	.word	0x40020028
 8002d8c:	40020010 	.word	0x40020010
 8002d90:	400204b8 	.word	0x400204b8
 8002d94:	40020058 	.word	0x40020058
 8002d98:	40020040 	.word	0x40020040
            hdma->XferHalfCpltCallback(hdma);
 8002d9c:	4630      	mov	r0, r6
 8002d9e:	4798      	blx	r3
 8002da0:	6df1      	ldr	r1, [r6, #92]	; 0x5c
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002da2:	f001 011f 	and.w	r1, r1, #31
 8002da6:	2020      	movs	r0, #32
 8002da8:	4088      	lsls	r0, r1
 8002daa:	4238      	tst	r0, r7
 8002dac:	d066      	beq.n	8002e7c <HAL_DMA_IRQHandler+0x378>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002dae:	6832      	ldr	r2, [r6, #0]
 8002db0:	4ba4      	ldr	r3, [pc, #656]	; (8003044 <HAL_DMA_IRQHandler+0x540>)
 8002db2:	4fa5      	ldr	r7, [pc, #660]	; (8003048 <HAL_DMA_IRQHandler+0x544>)
 8002db4:	42ba      	cmp	r2, r7
 8002db6:	bf18      	it	ne
 8002db8:	429a      	cmpne	r2, r3
 8002dba:	f107 0718 	add.w	r7, r7, #24
 8002dbe:	bf0c      	ite	eq
 8002dc0:	2301      	moveq	r3, #1
 8002dc2:	2300      	movne	r3, #0
 8002dc4:	42ba      	cmp	r2, r7
 8002dc6:	bf08      	it	eq
 8002dc8:	f043 0301 	orreq.w	r3, r3, #1
 8002dcc:	3718      	adds	r7, #24
 8002dce:	42ba      	cmp	r2, r7
 8002dd0:	bf08      	it	eq
 8002dd2:	f043 0301 	orreq.w	r3, r3, #1
 8002dd6:	3718      	adds	r7, #24
 8002dd8:	42ba      	cmp	r2, r7
 8002dda:	bf08      	it	eq
 8002ddc:	f043 0301 	orreq.w	r3, r3, #1
 8002de0:	3718      	adds	r7, #24
 8002de2:	42ba      	cmp	r2, r7
 8002de4:	bf08      	it	eq
 8002de6:	f043 0301 	orreq.w	r3, r3, #1
 8002dea:	3718      	adds	r7, #24
 8002dec:	42ba      	cmp	r2, r7
 8002dee:	bf08      	it	eq
 8002df0:	f043 0301 	orreq.w	r3, r3, #1
 8002df4:	3718      	adds	r7, #24
 8002df6:	42ba      	cmp	r2, r7
 8002df8:	bf08      	it	eq
 8002dfa:	f043 0301 	orreq.w	r3, r3, #1
 8002dfe:	f507 7756 	add.w	r7, r7, #856	; 0x358
 8002e02:	42ba      	cmp	r2, r7
 8002e04:	bf08      	it	eq
 8002e06:	f043 0301 	orreq.w	r3, r3, #1
 8002e0a:	3718      	adds	r7, #24
 8002e0c:	42ba      	cmp	r2, r7
 8002e0e:	bf08      	it	eq
 8002e10:	f043 0301 	orreq.w	r3, r3, #1
 8002e14:	3718      	adds	r7, #24
 8002e16:	42ba      	cmp	r2, r7
 8002e18:	bf08      	it	eq
 8002e1a:	f043 0301 	orreq.w	r3, r3, #1
 8002e1e:	3718      	adds	r7, #24
 8002e20:	42ba      	cmp	r2, r7
 8002e22:	bf08      	it	eq
 8002e24:	f043 0301 	orreq.w	r3, r3, #1
 8002e28:	3718      	adds	r7, #24
 8002e2a:	42ba      	cmp	r2, r7
 8002e2c:	bf08      	it	eq
 8002e2e:	f043 0301 	orreq.w	r3, r3, #1
 8002e32:	3718      	adds	r7, #24
 8002e34:	42ba      	cmp	r2, r7
 8002e36:	bf08      	it	eq
 8002e38:	f043 0301 	orreq.w	r3, r3, #1
 8002e3c:	3718      	adds	r7, #24
 8002e3e:	42ba      	cmp	r2, r7
 8002e40:	bf08      	it	eq
 8002e42:	f043 0301 	orreq.w	r3, r3, #1
 8002e46:	b91b      	cbnz	r3, 8002e50 <HAL_DMA_IRQHandler+0x34c>
 8002e48:	4b80      	ldr	r3, [pc, #512]	; (800304c <HAL_DMA_IRQHandler+0x548>)
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	f040 8161 	bne.w	8003112 <HAL_DMA_IRQHandler+0x60e>
 8002e50:	6813      	ldr	r3, [r2, #0]
 8002e52:	06df      	lsls	r7, r3, #27
 8002e54:	d512      	bpl.n	8002e7c <HAL_DMA_IRQHandler+0x378>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002e56:	60a0      	str	r0, [r4, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 8002e58:	f896 3035 	ldrb.w	r3, [r6, #53]	; 0x35
 8002e5c:	2b04      	cmp	r3, #4
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e5e:	6813      	ldr	r3, [r2, #0]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 8002e60:	f000 80b6 	beq.w	8002fd0 <HAL_DMA_IRQHandler+0x4cc>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002e64:	f413 2f80 	tst.w	r3, #262144	; 0x40000
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002e68:	6813      	ldr	r3, [r2, #0]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002e6a:	f000 80d8 	beq.w	800301e <HAL_DMA_IRQHandler+0x51a>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002e6e:	031f      	lsls	r7, r3, #12
 8002e70:	f140 80e3 	bpl.w	800303a <HAL_DMA_IRQHandler+0x536>
          if(hdma->XferCpltCallback != NULL)
 8002e74:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 8002e76:	b10b      	cbz	r3, 8002e7c <HAL_DMA_IRQHandler+0x378>
            hdma->XferCpltCallback(hdma);
 8002e78:	4630      	mov	r0, r6
 8002e7a:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002e7c:	6d73      	ldr	r3, [r6, #84]	; 0x54
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	f000 80c1 	beq.w	8003006 <HAL_DMA_IRQHandler+0x502>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8002e84:	6d73      	ldr	r3, [r6, #84]	; 0x54
 8002e86:	07dc      	lsls	r4, r3, #31
 8002e88:	d51e      	bpl.n	8002ec8 <HAL_DMA_IRQHandler+0x3c4>
        __HAL_DMA_DISABLE(hdma);
 8002e8a:	6832      	ldr	r2, [r6, #0]
        hdma->State = HAL_DMA_STATE_ABORT;
 8002e8c:	2104      	movs	r1, #4
 8002e8e:	f886 1035 	strb.w	r1, [r6, #53]	; 0x35
  uint32_t timeout = SystemCoreClock / 9600U;
 8002e92:	496f      	ldr	r1, [pc, #444]	; (8003050 <HAL_DMA_IRQHandler+0x54c>)
        __HAL_DMA_DISABLE(hdma);
 8002e94:	6813      	ldr	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002e96:	fba1 5105 	umull	r5, r1, r1, r5
        __HAL_DMA_DISABLE(hdma);
 8002e9a:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 8002e9e:	0a89      	lsrs	r1, r1, #10
        __HAL_DMA_DISABLE(hdma);
 8002ea0:	6013      	str	r3, [r2, #0]
 8002ea2:	e002      	b.n	8002eaa <HAL_DMA_IRQHandler+0x3a6>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8002ea4:	6813      	ldr	r3, [r2, #0]
 8002ea6:	07d8      	lsls	r0, r3, #31
 8002ea8:	d504      	bpl.n	8002eb4 <HAL_DMA_IRQHandler+0x3b0>
          if (++count > timeout)
 8002eaa:	9b01      	ldr	r3, [sp, #4]
 8002eac:	3301      	adds	r3, #1
 8002eae:	428b      	cmp	r3, r1
 8002eb0:	9301      	str	r3, [sp, #4]
 8002eb2:	d9f7      	bls.n	8002ea4 <HAL_DMA_IRQHandler+0x3a0>
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002eb4:	6813      	ldr	r3, [r2, #0]
 8002eb6:	07db      	lsls	r3, r3, #31
          hdma->State = HAL_DMA_STATE_ERROR;
 8002eb8:	bf4c      	ite	mi
 8002eba:	2303      	movmi	r3, #3
          hdma->State = HAL_DMA_STATE_READY;
 8002ebc:	2301      	movpl	r3, #1
 8002ebe:	f886 3035 	strb.w	r3, [r6, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	f886 3034 	strb.w	r3, [r6, #52]	; 0x34
      if(hdma->XferErrorCallback != NULL)
 8002ec8:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	f000 809b 	beq.w	8003006 <HAL_DMA_IRQHandler+0x502>
          hdma->XferCpltCallback(hdma);
 8002ed0:	4630      	mov	r0, r6
}
 8002ed2:	b002      	add	sp, #8
 8002ed4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
          hdma->XferCpltCallback(hdma);
 8002ed8:	4718      	bx	r3
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002eda:	f8d3 e000 	ldr.w	lr, [r3]
 8002ede:	f01e 0f04 	tst.w	lr, #4
 8002ee2:	d00a      	beq.n	8002efa <HAL_DMA_IRQHandler+0x3f6>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002ee4:	f8d3 e000 	ldr.w	lr, [r3]
 8002ee8:	f02e 0e04 	bic.w	lr, lr, #4
 8002eec:	f8c3 e000 	str.w	lr, [r3]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002ef0:	60a2      	str	r2, [r4, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002ef2:	6d72      	ldr	r2, [r6, #84]	; 0x54
 8002ef4:	f042 0201 	orr.w	r2, r2, #1
 8002ef8:	6572      	str	r2, [r6, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002efa:	fa27 f20c 	lsr.w	r2, r7, ip
 8002efe:	07d2      	lsls	r2, r2, #31
 8002f00:	f57f ae7d 	bpl.w	8002bfe <HAL_DMA_IRQHandler+0xfa>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002f04:	4a53      	ldr	r2, [pc, #332]	; (8003054 <HAL_DMA_IRQHandler+0x550>)
 8002f06:	f8df e150 	ldr.w	lr, [pc, #336]	; 8003058 <HAL_DMA_IRQHandler+0x554>
 8002f0a:	4573      	cmp	r3, lr
 8002f0c:	bf18      	it	ne
 8002f0e:	4293      	cmpne	r3, r2
 8002f10:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
 8002f14:	bf0c      	ite	eq
 8002f16:	2201      	moveq	r2, #1
 8002f18:	2200      	movne	r2, #0
 8002f1a:	4573      	cmp	r3, lr
 8002f1c:	bf08      	it	eq
 8002f1e:	f042 0201 	orreq.w	r2, r2, #1
 8002f22:	f10e 0e18 	add.w	lr, lr, #24
 8002f26:	4573      	cmp	r3, lr
 8002f28:	bf08      	it	eq
 8002f2a:	f042 0201 	orreq.w	r2, r2, #1
 8002f2e:	f10e 0e18 	add.w	lr, lr, #24
 8002f32:	4573      	cmp	r3, lr
 8002f34:	bf08      	it	eq
 8002f36:	f042 0201 	orreq.w	r2, r2, #1
 8002f3a:	f10e 0e18 	add.w	lr, lr, #24
 8002f3e:	4573      	cmp	r3, lr
 8002f40:	bf08      	it	eq
 8002f42:	f042 0201 	orreq.w	r2, r2, #1
 8002f46:	f50e 7e56 	add.w	lr, lr, #856	; 0x358
 8002f4a:	4573      	cmp	r3, lr
 8002f4c:	bf08      	it	eq
 8002f4e:	f042 0201 	orreq.w	r2, r2, #1
 8002f52:	f10e 0e18 	add.w	lr, lr, #24
 8002f56:	4573      	cmp	r3, lr
 8002f58:	bf08      	it	eq
 8002f5a:	f042 0201 	orreq.w	r2, r2, #1
 8002f5e:	f10e 0e18 	add.w	lr, lr, #24
 8002f62:	4573      	cmp	r3, lr
 8002f64:	bf08      	it	eq
 8002f66:	f042 0201 	orreq.w	r2, r2, #1
 8002f6a:	f10e 0e18 	add.w	lr, lr, #24
 8002f6e:	4573      	cmp	r3, lr
 8002f70:	bf08      	it	eq
 8002f72:	f042 0201 	orreq.w	r2, r2, #1
 8002f76:	f10e 0e18 	add.w	lr, lr, #24
 8002f7a:	4573      	cmp	r3, lr
 8002f7c:	bf08      	it	eq
 8002f7e:	f042 0201 	orreq.w	r2, r2, #1
 8002f82:	f10e 0e18 	add.w	lr, lr, #24
 8002f86:	4573      	cmp	r3, lr
 8002f88:	bf08      	it	eq
 8002f8a:	f042 0201 	orreq.w	r2, r2, #1
 8002f8e:	f10e 0e18 	add.w	lr, lr, #24
 8002f92:	4573      	cmp	r3, lr
 8002f94:	bf08      	it	eq
 8002f96:	f042 0201 	orreq.w	r2, r2, #1
 8002f9a:	f10e 0e18 	add.w	lr, lr, #24
 8002f9e:	4573      	cmp	r3, lr
 8002fa0:	bf08      	it	eq
 8002fa2:	f042 0201 	orreq.w	r2, r2, #1
 8002fa6:	2a00      	cmp	r2, #0
 8002fa8:	f47f ae1e 	bne.w	8002be8 <HAL_DMA_IRQHandler+0xe4>
 8002fac:	2800      	cmp	r0, #0
 8002fae:	f47f ae1b 	bne.w	8002be8 <HAL_DMA_IRQHandler+0xe4>
 8002fb2:	681a      	ldr	r2, [r3, #0]
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002fb4:	2204      	movs	r2, #4
 8002fb6:	fa02 f20c 	lsl.w	r2, r2, ip
 8002fba:	423a      	tst	r2, r7
 8002fbc:	f040 808c 	bne.w	80030d8 <HAL_DMA_IRQHandler+0x5d4>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002fc0:	2210      	movs	r2, #16
 8002fc2:	fa02 fc0c 	lsl.w	ip, r2, ip
 8002fc6:	ea17 0f0c 	tst.w	r7, ip
 8002fca:	f43f aeea 	beq.w	8002da2 <HAL_DMA_IRQHandler+0x29e>
 8002fce:	e680      	b.n	8002cd2 <HAL_DMA_IRQHandler+0x1ce>
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002fd0:	f023 0316 	bic.w	r3, r3, #22
 8002fd4:	6013      	str	r3, [r2, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002fd6:	6953      	ldr	r3, [r2, #20]
 8002fd8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002fdc:	6153      	str	r3, [r2, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002fde:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d03b      	beq.n	800305c <HAL_DMA_IRQHandler+0x558>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002fe4:	6813      	ldr	r3, [r2, #0]
 8002fe6:	f023 0308 	bic.w	r3, r3, #8
 8002fea:	6013      	str	r3, [r2, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002fec:	233f      	movs	r3, #63	; 0x3f
          hdma->State = HAL_DMA_STATE_READY;
 8002fee:	2001      	movs	r0, #1
          __HAL_UNLOCK(hdma);
 8002ff0:	2200      	movs	r2, #0
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002ff2:	408b      	lsls	r3, r1
 8002ff4:	60a3      	str	r3, [r4, #8]
          if(hdma->XferAbortCallback != NULL)
 8002ff6:	6d33      	ldr	r3, [r6, #80]	; 0x50
          hdma->State = HAL_DMA_STATE_READY;
 8002ff8:	f886 0035 	strb.w	r0, [r6, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 8002ffc:	f886 2034 	strb.w	r2, [r6, #52]	; 0x34
          if(hdma->XferAbortCallback != NULL)
 8003000:	2b00      	cmp	r3, #0
 8003002:	f47f af65 	bne.w	8002ed0 <HAL_DMA_IRQHandler+0x3cc>
}
 8003006:	b002      	add	sp, #8
 8003008:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	0318      	lsls	r0, r3, #12
 8003010:	f57f aeb5 	bpl.w	8002d7e <HAL_DMA_IRQHandler+0x27a>
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003014:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 8003016:	2b00      	cmp	r3, #0
 8003018:	f47f aec0 	bne.w	8002d9c <HAL_DMA_IRQHandler+0x298>
 800301c:	e6c1      	b.n	8002da2 <HAL_DMA_IRQHandler+0x29e>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800301e:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 8003022:	f47f af27 	bne.w	8002e74 <HAL_DMA_IRQHandler+0x370>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003026:	6811      	ldr	r1, [r2, #0]
 8003028:	f021 0110 	bic.w	r1, r1, #16
 800302c:	6011      	str	r1, [r2, #0]
            hdma->State = HAL_DMA_STATE_READY;
 800302e:	2201      	movs	r2, #1
            __HAL_UNLOCK(hdma);
 8003030:	f886 3034 	strb.w	r3, [r6, #52]	; 0x34
            hdma->State = HAL_DMA_STATE_READY;
 8003034:	f886 2035 	strb.w	r2, [r6, #53]	; 0x35
            __HAL_UNLOCK(hdma);
 8003038:	e71c      	b.n	8002e74 <HAL_DMA_IRQHandler+0x370>
            if(hdma->XferM1CpltCallback != NULL)
 800303a:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800303c:	2b00      	cmp	r3, #0
 800303e:	f47f af1b 	bne.w	8002e78 <HAL_DMA_IRQHandler+0x374>
 8003042:	e71b      	b.n	8002e7c <HAL_DMA_IRQHandler+0x378>
 8003044:	40020010 	.word	0x40020010
 8003048:	40020028 	.word	0x40020028
 800304c:	400204b8 	.word	0x400204b8
 8003050:	1b4e81b5 	.word	0x1b4e81b5
 8003054:	40020058 	.word	0x40020058
 8003058:	40020040 	.word	0x40020040
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800305c:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 800305e:	2b00      	cmp	r3, #0
 8003060:	d1c0      	bne.n	8002fe4 <HAL_DMA_IRQHandler+0x4e0>
 8003062:	e7c3      	b.n	8002fec <HAL_DMA_IRQHandler+0x4e8>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003064:	4a4b      	ldr	r2, [pc, #300]	; (8003194 <HAL_DMA_IRQHandler+0x690>)
 8003066:	484c      	ldr	r0, [pc, #304]	; (8003198 <HAL_DMA_IRQHandler+0x694>)
 8003068:	4283      	cmp	r3, r0
 800306a:	bf18      	it	ne
 800306c:	4293      	cmpne	r3, r2
 800306e:	f100 0014 	add.w	r0, r0, #20
 8003072:	bf0c      	ite	eq
 8003074:	2201      	moveq	r2, #1
 8003076:	2200      	movne	r2, #0
 8003078:	4283      	cmp	r3, r0
 800307a:	bf08      	it	eq
 800307c:	f042 0201 	orreq.w	r2, r2, #1
 8003080:	3014      	adds	r0, #20
 8003082:	4283      	cmp	r3, r0
 8003084:	bf08      	it	eq
 8003086:	f042 0201 	orreq.w	r2, r2, #1
 800308a:	3014      	adds	r0, #20
 800308c:	4283      	cmp	r3, r0
 800308e:	bf08      	it	eq
 8003090:	f042 0201 	orreq.w	r2, r2, #1
 8003094:	3014      	adds	r0, #20
 8003096:	4283      	cmp	r3, r0
 8003098:	bf08      	it	eq
 800309a:	f042 0201 	orreq.w	r2, r2, #1
 800309e:	3014      	adds	r0, #20
 80030a0:	4283      	cmp	r3, r0
 80030a2:	bf08      	it	eq
 80030a4:	f042 0201 	orreq.w	r2, r2, #1
 80030a8:	b912      	cbnz	r2, 80030b0 <HAL_DMA_IRQHandler+0x5ac>
 80030aa:	4a3c      	ldr	r2, [pc, #240]	; (800319c <HAL_DMA_IRQHandler+0x698>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d1aa      	bne.n	8003006 <HAL_DMA_IRQHandler+0x502>
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80030b0:	6df0      	ldr	r0, [r6, #92]	; 0x5c
 80030b2:	2504      	movs	r5, #4
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80030b4:	681a      	ldr	r2, [r3, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80030b6:	f000 001f 	and.w	r0, r0, #31
 80030ba:	4085      	lsls	r5, r0
 80030bc:	420d      	tst	r5, r1
 80030be:	d018      	beq.n	80030f2 <HAL_DMA_IRQHandler+0x5ee>
 80030c0:	0757      	lsls	r7, r2, #29
 80030c2:	d516      	bpl.n	80030f2 <HAL_DMA_IRQHandler+0x5ee>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80030c4:	0410      	lsls	r0, r2, #16
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80030c6:	6065      	str	r5, [r4, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80030c8:	d547      	bpl.n	800315a <HAL_DMA_IRQHandler+0x656>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80030ca:	03d1      	lsls	r1, r2, #15
 80030cc:	d44b      	bmi.n	8003166 <HAL_DMA_IRQHandler+0x662>
          if(hdma->XferM1HalfCpltCallback != NULL)
 80030ce:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	f47f aefd 	bne.w	8002ed0 <HAL_DMA_IRQHandler+0x3cc>
 80030d6:	e796      	b.n	8003006 <HAL_DMA_IRQHandler+0x502>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80030d8:	681a      	ldr	r2, [r3, #0]
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80030da:	2210      	movs	r2, #16
 80030dc:	fa02 fc0c 	lsl.w	ip, r2, ip
 80030e0:	ea17 0f0c 	tst.w	r7, ip
 80030e4:	f43f ae5d 	beq.w	8002da2 <HAL_DMA_IRQHandler+0x29e>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	0750      	lsls	r0, r2, #29
 80030ec:	f57f ae59 	bpl.w	8002da2 <HAL_DMA_IRQHandler+0x29e>
 80030f0:	e638      	b.n	8002d64 <HAL_DMA_IRQHandler+0x260>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80030f2:	2502      	movs	r5, #2
 80030f4:	4085      	lsls	r5, r0
 80030f6:	420d      	tst	r5, r1
 80030f8:	d010      	beq.n	800311c <HAL_DMA_IRQHandler+0x618>
 80030fa:	0797      	lsls	r7, r2, #30
 80030fc:	d50e      	bpl.n	800311c <HAL_DMA_IRQHandler+0x618>
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80030fe:	6065      	str	r5, [r4, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003100:	0414      	lsls	r4, r2, #16
 8003102:	d535      	bpl.n	8003170 <HAL_DMA_IRQHandler+0x66c>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003104:	03d0      	lsls	r0, r2, #15
 8003106:	d43f      	bmi.n	8003188 <HAL_DMA_IRQHandler+0x684>
          if(hdma->XferM1CpltCallback != NULL)
 8003108:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800310a:	2b00      	cmp	r3, #0
 800310c:	f47f aee0 	bne.w	8002ed0 <HAL_DMA_IRQHandler+0x3cc>
 8003110:	e779      	b.n	8003006 <HAL_DMA_IRQHandler+0x502>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003112:	6813      	ldr	r3, [r2, #0]
 8003114:	079b      	lsls	r3, r3, #30
 8003116:	f57f aeb1 	bpl.w	8002e7c <HAL_DMA_IRQHandler+0x378>
 800311a:	e69c      	b.n	8002e56 <HAL_DMA_IRQHandler+0x352>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800311c:	2508      	movs	r5, #8
 800311e:	4085      	lsls	r5, r0
 8003120:	420d      	tst	r5, r1
 8003122:	f43f af70 	beq.w	8003006 <HAL_DMA_IRQHandler+0x502>
 8003126:	0711      	lsls	r1, r2, #28
 8003128:	f57f af6d 	bpl.w	8003006 <HAL_DMA_IRQHandler+0x502>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800312c:	681a      	ldr	r2, [r3, #0]
      __HAL_UNLOCK(hdma);
 800312e:	2100      	movs	r1, #0
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003130:	f022 020e 	bic.w	r2, r2, #14
 8003134:	601a      	str	r2, [r3, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003136:	2301      	movs	r3, #1
      if (hdma->XferErrorCallback != NULL)
 8003138:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800313a:	fa03 f000 	lsl.w	r0, r3, r0
 800313e:	6060      	str	r0, [r4, #4]
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003140:	6573      	str	r3, [r6, #84]	; 0x54
      __HAL_UNLOCK(hdma);
 8003142:	f886 1034 	strb.w	r1, [r6, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8003146:	f886 3035 	strb.w	r3, [r6, #53]	; 0x35
      if (hdma->XferErrorCallback != NULL)
 800314a:	2a00      	cmp	r2, #0
 800314c:	f43f af5b 	beq.w	8003006 <HAL_DMA_IRQHandler+0x502>
        hdma->XferErrorCallback(hdma);
 8003150:	4630      	mov	r0, r6
}
 8003152:	b002      	add	sp, #8
 8003154:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        hdma->XferErrorCallback(hdma);
 8003158:	4710      	bx	r2
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800315a:	0692      	lsls	r2, r2, #26
 800315c:	d403      	bmi.n	8003166 <HAL_DMA_IRQHandler+0x662>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	f022 0204 	bic.w	r2, r2, #4
 8003164:	601a      	str	r2, [r3, #0]
       if(hdma->XferHalfCpltCallback != NULL)
 8003166:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8003168:	2b00      	cmp	r3, #0
 800316a:	f47f aeb1 	bne.w	8002ed0 <HAL_DMA_IRQHandler+0x3cc>
 800316e:	e74a      	b.n	8003006 <HAL_DMA_IRQHandler+0x502>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003170:	f012 0220 	ands.w	r2, r2, #32
 8003174:	d108      	bne.n	8003188 <HAL_DMA_IRQHandler+0x684>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003176:	6819      	ldr	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8003178:	2001      	movs	r0, #1
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800317a:	f021 010a 	bic.w	r1, r1, #10
 800317e:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8003180:	f886 0035 	strb.w	r0, [r6, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 8003184:	f886 2034 	strb.w	r2, [r6, #52]	; 0x34
        if(hdma->XferCpltCallback != NULL)
 8003188:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 800318a:	2b00      	cmp	r3, #0
 800318c:	f47f aea0 	bne.w	8002ed0 <HAL_DMA_IRQHandler+0x3cc>
 8003190:	e739      	b.n	8003006 <HAL_DMA_IRQHandler+0x502>
 8003192:	bf00      	nop
 8003194:	58025408 	.word	0x58025408
 8003198:	5802541c 	.word	0x5802541c
 800319c:	58025494 	.word	0x58025494

080031a0 <HAL_FMAC_Init>:
HAL_StatusTypeDef HAL_FMAC_Init(FMAC_HandleTypeDef *hfmac)
{
  HAL_StatusTypeDef status;

  /* Check the FMAC handle allocation */
  if (hfmac == NULL)
 80031a0:	2800      	cmp	r0, #0
 80031a2:	d047      	beq.n	8003234 <HAL_FMAC_Init+0x94>
{
 80031a4:	b538      	push	{r3, r4, r5, lr}
  }

  /* Check the instance */
  assert_param(IS_FMAC_ALL_INSTANCE(hfmac->Instance));

  if (hfmac->State == HAL_FMAC_STATE_RESET)
 80031a6:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 80031aa:	4604      	mov	r4, r0
 80031ac:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d03a      	beq.n	800322a <HAL_FMAC_Init+0x8a>
    HAL_FMAC_MspInit(hfmac);
#endif /* USE_HAL_FMAC_REGISTER_CALLBACKS */
  }

  /* Reset pInput and pOutput */
  hfmac->FilterParam = 0U;
 80031b4:	2300      	movs	r3, #0
static void FMAC_ResetInputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
  hfmac->pInput = NULL;
  hfmac->pInputSize = NULL;
  hfmac->InputCurrentSize = 0U;
  hfmac->WrState = HAL_FMAC_STATE_READY;
 80031b6:	2220      	movs	r2, #32
  hfmac->FilterParam = 0U;
 80031b8:	6063      	str	r3, [r4, #4]
  hfmac->WrState = HAL_FMAC_STATE_READY;
 80031ba:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
  hfmac->pInput = NULL;
 80031be:	60e3      	str	r3, [r4, #12]
  hfmac->pInputSize = NULL;
 80031c0:	6163      	str	r3, [r4, #20]
  hfmac->InputCurrentSize = 0U;
 80031c2:	8223      	strh	r3, [r4, #16]
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetOutputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
  hfmac->pOutput = NULL;
 80031c4:	61a3      	str	r3, [r4, #24]
  hfmac->pOutputSize = NULL;
 80031c6:	6223      	str	r3, [r4, #32]
  hfmac->OutputCurrentSize = 0U;
 80031c8:	83a3      	strh	r3, [r4, #28]
  hfmac->RdState = HAL_FMAC_STATE_READY;
 80031ca:	f884 2032 	strb.w	r2, [r4, #50]	; 0x32
  tickstart = HAL_GetTick();
 80031ce:	f7fe fe3f 	bl	8001e50 <HAL_GetTick>
  SET_BIT(hfmac->Instance->CR, FMAC_CR_RESET);
 80031d2:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 80031d4:	4605      	mov	r5, r0
  SET_BIT(hfmac->Instance->CR, FMAC_CR_RESET);
 80031d6:	691a      	ldr	r2, [r3, #16]
 80031d8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80031dc:	611a      	str	r2, [r3, #16]
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 80031de:	e006      	b.n	80031ee <HAL_FMAC_Init+0x4e>
    if ((HAL_GetTick() - tickstart) > HAL_FMAC_RESET_TIMEOUT_VALUE)
 80031e0:	f7fe fe36 	bl	8001e50 <HAL_GetTick>
 80031e4:	1b43      	subs	r3, r0, r5
 80031e6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80031ea:	d80e      	bhi.n	800320a <HAL_FMAC_Init+0x6a>
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 80031ec:	6823      	ldr	r3, [r4, #0]
 80031ee:	691b      	ldr	r3, [r3, #16]
 80031f0:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 80031f4:	d1f4      	bne.n	80031e0 <HAL_FMAC_Init+0x40>
  hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 80031f6:	6363      	str	r3, [r4, #52]	; 0x34
    hfmac->State = HAL_FMAC_STATE_READY;
 80031f8:	2220      	movs	r2, #32
    hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 80031fa:	6363      	str	r3, [r4, #52]	; 0x34
    status = HAL_OK;
 80031fc:	4618      	mov	r0, r3
  __HAL_UNLOCK(hfmac);
 80031fe:	2300      	movs	r3, #0
    hfmac->State = HAL_FMAC_STATE_READY;
 8003200:	f884 2031 	strb.w	r2, [r4, #49]	; 0x31
  __HAL_UNLOCK(hfmac);
 8003204:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
 8003208:	bd38      	pop	{r3, r4, r5, pc}
      hfmac->ErrorCode |= HAL_FMAC_ERROR_TIMEOUT;
 800320a:	6b63      	ldr	r3, [r4, #52]	; 0x34
    hfmac->State = HAL_FMAC_STATE_TIMEOUT;
 800320c:	22a0      	movs	r2, #160	; 0xa0
    status = HAL_ERROR;
 800320e:	2001      	movs	r0, #1
      hfmac->ErrorCode |= HAL_FMAC_ERROR_TIMEOUT;
 8003210:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003214:	6363      	str	r3, [r4, #52]	; 0x34
    hfmac->ErrorCode |= HAL_FMAC_ERROR_RESET;
 8003216:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003218:	f043 0310 	orr.w	r3, r3, #16
 800321c:	6363      	str	r3, [r4, #52]	; 0x34
  __HAL_UNLOCK(hfmac);
 800321e:	2300      	movs	r3, #0
    hfmac->State = HAL_FMAC_STATE_TIMEOUT;
 8003220:	f884 2031 	strb.w	r2, [r4, #49]	; 0x31
  __HAL_UNLOCK(hfmac);
 8003224:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
 8003228:	bd38      	pop	{r3, r4, r5, pc}
    hfmac->Lock = HAL_UNLOCKED;
 800322a:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
    HAL_FMAC_MspInit(hfmac);
 800322e:	f7fd f983 	bl	8000538 <HAL_FMAC_MspInit>
 8003232:	e7bf      	b.n	80031b4 <HAL_FMAC_Init+0x14>
    return HAL_ERROR;
 8003234:	2001      	movs	r0, #1
}
 8003236:	4770      	bx	lr

08003238 <HAL_FMAC_FilterConfig_DMA>:
  assert_param(IS_FMAC_PARAM_P(pConfig->Filter, pConfig->P));
  assert_param(IS_FMAC_PARAM_Q(pConfig->Filter, pConfig->Q));
  assert_param(IS_FMAC_PARAM_R(pConfig->Filter, pConfig->R));

  /* Check the START bit state */
  if (FMAC_GET_START_BIT(hfmac) != 0U)
 8003238:	6803      	ldr	r3, [r0, #0]
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	2b00      	cmp	r3, #0
 800323e:	db73      	blt.n	8003328 <HAL_FMAC_FilterConfig_DMA+0xf0>
{
 8003240:	b570      	push	{r4, r5, r6, lr}
  {
    return HAL_ERROR;
  }

  /* Check handle state is ready */
  if (hfmac->State != HAL_FMAC_STATE_READY)
 8003242:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 8003246:	4605      	mov	r5, r0
 8003248:	2b20      	cmp	r3, #32
 800324a:	d001      	beq.n	8003250 <HAL_FMAC_FilterConfig_DMA+0x18>
    return HAL_ERROR;
 800324c:	2001      	movs	r0, #1
}
 800324e:	bd70      	pop	{r4, r5, r6, pc}
  {
    return HAL_ERROR;
  }

  /* Change the FMAC state */
  hfmac->State = HAL_FMAC_STATE_BUSY;
 8003250:	2324      	movs	r3, #36	; 0x24
 8003252:	460c      	mov	r4, r1
 8003254:	f880 3031 	strb.w	r3, [r0, #49]	; 0x31

  /* Get tick */
  tickstart = HAL_GetTick();
 8003258:	f7fe fdfa 	bl	8001e50 <HAL_GetTick>

  /* Indicate that there is no valid configuration done */
  hfmac->FilterParam = 0U;

  /* FMAC_X1BUFCFG: Configure the input buffer within the internal memory if required */
  if (pConfig->InputBufferSize != 0U)
 800325c:	7863      	ldrb	r3, [r4, #1]
  {
    MODIFY_REG(hfmac->Instance->X1BUFCFG,                                                                   \
 800325e:	682a      	ldr	r2, [r5, #0]
  if (pConfig->InputBufferSize != 0U)
 8003260:	b12b      	cbz	r3, 800326e <HAL_FMAC_FilterConfig_DMA+0x36>
    MODIFY_REG(hfmac->Instance->X1BUFCFG,                                                                   \
 8003262:	6810      	ldr	r0, [r2, #0]
 8003264:	4b37      	ldr	r3, [pc, #220]	; (8003344 <HAL_FMAC_FilterConfig_DMA+0x10c>)
 8003266:	8821      	ldrh	r1, [r4, #0]
 8003268:	4003      	ands	r3, r0
 800326a:	430b      	orrs	r3, r1
 800326c:	6013      	str	r3, [r2, #0]
                ((((uint32_t)(pConfig->InputBufferSize))  << FMAC_X1BUFCFG_X1_BUF_SIZE_Pos) & \
                 FMAC_X1BUFCFG_X1_BUF_SIZE)));
  }

  /* FMAC_X1BUFCFG: Configure the input threshold if valid when compared to the configured X1 size */
  if (pConfig->InputThreshold != FMAC_THRESHOLD_NO_VALUE)
 800326e:	6863      	ldr	r3, [r4, #4]
 8003270:	1c58      	adds	r0, r3, #1
 8003272:	d006      	beq.n	8003282 <HAL_FMAC_FilterConfig_DMA+0x4a>
  {
    /* Check the parameter */
    assert_param(IS_FMAC_THRESHOLD_APPLICABLE(FMAC_GET_X1_SIZE(hfmac), pConfig->InputThreshold, pConfig->InputAccess));

    MODIFY_REG(hfmac->Instance->X1BUFCFG, \
 8003274:	6811      	ldr	r1, [r2, #0]
 8003276:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 800327a:	f021 7140 	bic.w	r1, r1, #50331648	; 0x3000000
 800327e:	430b      	orrs	r3, r1
 8003280:	6013      	str	r3, [r2, #0]
               FMAC_X1BUFCFG_FULL_WM,     \
               ((pConfig->InputThreshold) & FMAC_X1BUFCFG_FULL_WM));
  }

  /* FMAC_X2BUFCFG: Configure the coefficient buffer within the internal memory */
  if (pConfig->CoeffBufferSize != 0U)
 8003282:	7a63      	ldrb	r3, [r4, #9]
 8003284:	b12b      	cbz	r3, 8003292 <HAL_FMAC_FilterConfig_DMA+0x5a>
  {
    MODIFY_REG(hfmac->Instance->X2BUFCFG,                                                                   \
 8003286:	6851      	ldr	r1, [r2, #4]
 8003288:	4b2e      	ldr	r3, [pc, #184]	; (8003344 <HAL_FMAC_FilterConfig_DMA+0x10c>)
 800328a:	400b      	ands	r3, r1
 800328c:	8921      	ldrh	r1, [r4, #8]
 800328e:	430b      	orrs	r3, r1
 8003290:	6053      	str	r3, [r2, #4]
                ((((uint32_t)(pConfig->CoeffBufferSize))  << FMAC_X2BUFCFG_X2_BUF_SIZE_Pos) &\
                 FMAC_X2BUFCFG_X2_BUF_SIZE)));
  }

  /* FMAC_YBUFCFG: Configure the output buffer within the internal memory if required */
  if (pConfig->OutputBufferSize != 0U)
 8003292:	7ae3      	ldrb	r3, [r4, #11]
 8003294:	b12b      	cbz	r3, 80032a2 <HAL_FMAC_FilterConfig_DMA+0x6a>
  {
    MODIFY_REG(hfmac->Instance->YBUFCFG,                                                                    \
 8003296:	6891      	ldr	r1, [r2, #8]
 8003298:	4b2a      	ldr	r3, [pc, #168]	; (8003344 <HAL_FMAC_FilterConfig_DMA+0x10c>)
 800329a:	400b      	ands	r3, r1
 800329c:	8961      	ldrh	r1, [r4, #10]
 800329e:	430b      	orrs	r3, r1
 80032a0:	6093      	str	r3, [r2, #8]
               (((((uint32_t)(pConfig->OutputBaseAddress)) << FMAC_YBUFCFG_Y_BASE_Pos)     & FMAC_YBUFCFG_Y_BASE) |    \
                ((((uint32_t)(pConfig->OutputBufferSize))  << FMAC_YBUFCFG_Y_BUF_SIZE_Pos) & FMAC_YBUFCFG_Y_BUF_SIZE)));
  }

  /* FMAC_YBUFCFG: Configure the output threshold if valid when compared to the configured Y size */
  if (pConfig->OutputThreshold != FMAC_THRESHOLD_NO_VALUE)
 80032a2:	68e3      	ldr	r3, [r4, #12]
 80032a4:	1c59      	adds	r1, r3, #1
 80032a6:	d006      	beq.n	80032b6 <HAL_FMAC_FilterConfig_DMA+0x7e>
  {
    /* Check the parameter */
    assert_param(IS_FMAC_THRESHOLD_APPLICABLE(FMAC_GET_Y_SIZE(hfmac), pConfig->OutputThreshold, pConfig->OutputAccess));

    MODIFY_REG(hfmac->Instance->YBUFCFG, \
 80032a8:	6891      	ldr	r1, [r2, #8]
 80032aa:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 80032ae:	f021 7140 	bic.w	r1, r1, #50331648	; 0x3000000
 80032b2:	430b      	orrs	r3, r1
 80032b4:	6093      	str	r3, [r2, #8]
  /* FMAC_CR: Configure the clip feature */
  tmpcr = pConfig->Clip & FMAC_CR_CLIPEN;

  /* FMAC_CR: If IT or DMA will be used, enable error interrupts.
    * Being more a debugging feature, FMAC_CR_SATIEN isn't enabled by default. */
  if ((pConfig->InputAccess  == FMAC_BUFFER_ACCESS_DMA) || (pConfig->InputAccess  == FMAC_BUFFER_ACCESS_IT) ||
 80032b6:	7f61      	ldrb	r1, [r4, #29]
  tmpcr = pConfig->Clip & FMAC_CR_CLIPEN;
 80032b8:	6a23      	ldr	r3, [r4, #32]
  if ((pConfig->InputAccess  == FMAC_BUFFER_ACCESS_DMA) || (pConfig->InputAccess  == FMAC_BUFFER_ACCESS_IT) ||
 80032ba:	f001 00fd 	and.w	r0, r1, #253	; 0xfd
  tmpcr = pConfig->Clip & FMAC_CR_CLIPEN;
 80032be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((pConfig->InputAccess  == FMAC_BUFFER_ACCESS_DMA) || (pConfig->InputAccess  == FMAC_BUFFER_ACCESS_IT) ||
 80032c2:	2801      	cmp	r0, #1
      (pConfig->OutputAccess == FMAC_BUFFER_ACCESS_DMA) || (pConfig->OutputAccess == FMAC_BUFFER_ACCESS_IT))
 80032c4:	7fa0      	ldrb	r0, [r4, #30]
  if ((pConfig->InputAccess  == FMAC_BUFFER_ACCESS_DMA) || (pConfig->InputAccess  == FMAC_BUFFER_ACCESS_IT) ||
 80032c6:	d131      	bne.n	800332c <HAL_FMAC_FilterConfig_DMA+0xf4>
  {
    tmpcr |= FMAC_IT_UNFLIEN | FMAC_IT_OVFLIEN;
 80032c8:	f043 030c 	orr.w	r3, r3, #12
  }

  /* FMAC_CR: write the value */
  WRITE_REG(hfmac->Instance->CR, tmpcr);
 80032cc:	6113      	str	r3, [r2, #16]

  /* Save the input/output accesses in order to configure RIEN, WIEN, DMAREN and DMAWEN during filter start */
  hfmac->InputAccess = pConfig->InputAccess;
 80032ce:	7229      	strb	r1, [r5, #8]
  hfmac->OutputAccess = pConfig->OutputAccess;
 80032d0:	7268      	strb	r0, [r5, #9]

  /* Build the PARAM value that will be used when starting the filter */
  hfmac->FilterParam = (FMAC_PARAM_START | pConfig->Filter |                   \
                        ((((uint32_t)(pConfig->P)) << FMAC_PARAM_P_Pos) & FMAC_PARAM_P) | \
                        ((((uint32_t)(pConfig->Q)) << FMAC_PARAM_Q_Pos) & FMAC_PARAM_Q) | \
                        ((((uint32_t)(pConfig->R)) << FMAC_PARAM_R_Pos) & FMAC_PARAM_R));
 80032d2:	f894 102a 	ldrb.w	r1, [r4, #42]	; 0x2a
                        ((((uint32_t)(pConfig->Q)) << FMAC_PARAM_Q_Pos) & FMAC_PARAM_Q) | \
 80032d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80032d8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                        ((((uint32_t)(pConfig->P)) << FMAC_PARAM_P_Pos) & FMAC_PARAM_P) | \
 80032dc:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
                        ((((uint32_t)(pConfig->Q)) << FMAC_PARAM_Q_Pos) & FMAC_PARAM_Q) | \
 80032e0:	430b      	orrs	r3, r1
 80032e2:	f894 1029 	ldrb.w	r1, [r4, #41]	; 0x29
 80032e6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8

  /* Initialize the coefficient buffer if required (pCoeffA for FIR only) */
  if ((pConfig->pCoeffB != NULL) && (pConfig->CoeffBSize != 0U))
 80032ea:	69a1      	ldr	r1, [r4, #24]
                        ((((uint32_t)(pConfig->Q)) << FMAC_PARAM_Q_Pos) & FMAC_PARAM_Q) | \
 80032ec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  hfmac->FilterParam = (FMAC_PARAM_START | pConfig->Filter |                   \
 80032f0:	606b      	str	r3, [r5, #4]
  if ((pConfig->pCoeffB != NULL) && (pConfig->CoeffBSize != 0U))
 80032f2:	b309      	cbz	r1, 8003338 <HAL_FMAC_FilterConfig_DMA+0x100>
 80032f4:	7f23      	ldrb	r3, [r4, #28]
 80032f6:	b1fb      	cbz	r3, 8003338 <HAL_FMAC_FilterConfig_DMA+0x100>
                 ((pConfig->Filter == FMAC_FUNC_IIR_DIRECT_FORM_1) &&
                  (pConfig->pCoeffA != NULL) && (pConfig->CoeffASize != 0U) &&
                  (pConfig->CoeffASize >= pConfig->Q)));

    /* Write number of values to be loaded, the data load function and start the operation */
    WRITE_REG(hfmac->Instance->PARAM,                      \
 80032f8:	f894 c014 	ldrb.w	ip, [r4, #20]
      hfmac->hdmaPreload->XferCpltCallback = FMAC_DMAFilterConfig;
      /* Set the DMA error callback */
      hfmac->hdmaPreload->XferErrorCallback = FMAC_DMAError;

      /* Enable the DMA stream managing FMAC preload data write */
      return (HAL_DMA_Start_IT(hfmac->hdmaPreload, (uint32_t)pConfig->pCoeffB, (uint32_t)&hfmac->Instance->WDATA,
 80032fc:	3218      	adds	r2, #24
      hfmac->pInput = pConfig->pCoeffA;
 80032fe:	6926      	ldr	r6, [r4, #16]
    WRITE_REG(hfmac->Instance->PARAM,                      \
 8003300:	ea43 240c 	orr.w	r4, r3, ip, lsl #8
      hfmac->hdmaPreload->XferHalfCpltCallback = NULL;
 8003304:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    WRITE_REG(hfmac->Instance->PARAM,                      \
 8003306:	f044 4402 	orr.w	r4, r4, #2181038080	; 0x82000000
 800330a:	f842 4c0c 	str.w	r4, [r2, #-12]
      hfmac->hdmaPreload->XferHalfCpltCallback = NULL;
 800330e:	2400      	movs	r4, #0
      hfmac->pInput = pConfig->pCoeffA;
 8003310:	60ee      	str	r6, [r5, #12]
      hfmac->InputCurrentSize = pConfig->CoeffASize;
 8003312:	f8a5 c010 	strh.w	ip, [r5, #16]
      hfmac->hdmaPreload->XferHalfCpltCallback = NULL;
 8003316:	6404      	str	r4, [r0, #64]	; 0x40
      hfmac->hdmaPreload->XferCpltCallback = FMAC_DMAFilterConfig;
 8003318:	4c0b      	ldr	r4, [pc, #44]	; (8003348 <HAL_FMAC_FilterConfig_DMA+0x110>)
 800331a:	63c4      	str	r4, [r0, #60]	; 0x3c
      hfmac->hdmaPreload->XferErrorCallback = FMAC_DMAError;
 800331c:	4c0b      	ldr	r4, [pc, #44]	; (800334c <HAL_FMAC_FilterConfig_DMA+0x114>)
 800331e:	64c4      	str	r4, [r0, #76]	; 0x4c
}
 8003320:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return (HAL_DMA_Start_IT(hfmac->hdmaPreload, (uint32_t)pConfig->pCoeffB, (uint32_t)&hfmac->Instance->WDATA,
 8003324:	f7ff b98c 	b.w	8002640 <HAL_DMA_Start_IT>
    return HAL_ERROR;
 8003328:	2001      	movs	r0, #1
}
 800332a:	4770      	bx	lr
      (pConfig->OutputAccess == FMAC_BUFFER_ACCESS_DMA) || (pConfig->OutputAccess == FMAC_BUFFER_ACCESS_IT))
 800332c:	f000 0cfd 	and.w	ip, r0, #253	; 0xfd
 8003330:	f1bc 0f01 	cmp.w	ip, #1
 8003334:	d0c8      	beq.n	80032c8 <HAL_FMAC_FilterConfig_DMA+0x90>
 8003336:	e7c9      	b.n	80032cc <HAL_FMAC_FilterConfig_DMA+0x94>
    }
  }
  else
  {
    /* Change the FMAC state */
    hfmac->State = HAL_FMAC_STATE_READY;
 8003338:	2320      	movs	r3, #32
  }

  return HAL_OK;
 800333a:	2000      	movs	r0, #0
    hfmac->State = HAL_FMAC_STATE_READY;
 800333c:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
}
 8003340:	bd70      	pop	{r4, r5, r6, pc}
 8003342:	bf00      	nop
 8003344:	ffff0000 	.word	0xffff0000
 8003348:	0800336d 	.word	0x0800336d
 800334c:	08003355 	.word	0x08003355

08003350 <HAL_FMAC_ErrorCallback>:
 8003350:	4770      	bx	lr
 8003352:	bf00      	nop

08003354 <FMAC_DMAError>:
  * @param  hdma DMA handle.
  * @retval None
  */
static void FMAC_DMAError(DMA_HandleTypeDef *hdma)
{
  FMAC_HandleTypeDef *hfmac = (FMAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003354:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8003356:	b508      	push	{r3, lr}

  /* Set FMAC handle state to error */
  hfmac->State = HAL_FMAC_STATE_ERROR;
 8003358:	23e0      	movs	r3, #224	; 0xe0
 800335a:	f880 3031 	strb.w	r3, [r0, #49]	; 0x31

  /* Set FMAC handle error code to DMA error */
  hfmac->ErrorCode |= HAL_FMAC_ERROR_DMA;
 800335e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003360:	f043 0308 	orr.w	r3, r3, #8
 8003364:	6343      	str	r3, [r0, #52]	; 0x34

  /* Call user callback */
#if (USE_HAL_FMAC_REGISTER_CALLBACKS == 1)
  hfmac->ErrorCallback(hfmac);
#else
  HAL_FMAC_ErrorCallback(hfmac);
 8003366:	f7ff fff3 	bl	8003350 <HAL_FMAC_ErrorCallback>
#endif /* USE_HAL_FMAC_REGISTER_CALLBACKS */
}
 800336a:	bd08      	pop	{r3, pc}

0800336c <FMAC_DMAFilterConfig>:
{
 800336c:	b510      	push	{r4, lr}
  FMAC_HandleTypeDef *hfmac = (FMAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800336e:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if (hfmac->pInput != NULL)
 8003370:	68e1      	ldr	r1, [r4, #12]
 8003372:	b1b9      	cbz	r1, 80033a4 <FMAC_DMAFilterConfig+0x38>
    hfmac->hdmaPreload->XferHalfCpltCallback = NULL;
 8003374:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8003376:	2300      	movs	r3, #0
    if (HAL_DMA_Start_IT(hfmac->hdmaPreload, (uint32_t)hfmac->pInput, (uint32_t)&hfmac->Instance->WDATA,
 8003378:	6822      	ldr	r2, [r4, #0]
    hfmac->hdmaPreload->XferHalfCpltCallback = NULL;
 800337a:	6403      	str	r3, [r0, #64]	; 0x40
    hfmac->hdmaPreload->XferCpltCallback = FMAC_DMAFilterConfig;
 800337c:	4b17      	ldr	r3, [pc, #92]	; (80033dc <FMAC_DMAFilterConfig+0x70>)
    if (HAL_DMA_Start_IT(hfmac->hdmaPreload, (uint32_t)hfmac->pInput, (uint32_t)&hfmac->Instance->WDATA,
 800337e:	3218      	adds	r2, #24
    hfmac->hdmaPreload->XferCpltCallback = FMAC_DMAFilterConfig;
 8003380:	63c3      	str	r3, [r0, #60]	; 0x3c
    hfmac->hdmaPreload->XferErrorCallback = FMAC_DMAError;
 8003382:	4b17      	ldr	r3, [pc, #92]	; (80033e0 <FMAC_DMAFilterConfig+0x74>)
 8003384:	64c3      	str	r3, [r0, #76]	; 0x4c
    if (HAL_DMA_Start_IT(hfmac->hdmaPreload, (uint32_t)hfmac->pInput, (uint32_t)&hfmac->Instance->WDATA,
 8003386:	8a23      	ldrh	r3, [r4, #16]
 8003388:	f7ff f95a 	bl	8002640 <HAL_DMA_Start_IT>
 800338c:	b1d8      	cbz	r0, 80033c6 <FMAC_DMAFilterConfig+0x5a>
    hfmac->State = HAL_FMAC_STATE_ERROR;
 800338e:	23e0      	movs	r3, #224	; 0xe0
 8003390:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  hfmac->ErrorCode |= HAL_FMAC_ERROR_DMA;
 8003394:	6b63      	ldr	r3, [r4, #52]	; 0x34
  HAL_FMAC_ErrorCallback(hfmac);
 8003396:	4620      	mov	r0, r4
  hfmac->ErrorCode |= HAL_FMAC_ERROR_DMA;
 8003398:	f043 0308 	orr.w	r3, r3, #8
 800339c:	6363      	str	r3, [r4, #52]	; 0x34
  HAL_FMAC_ErrorCallback(hfmac);
 800339e:	f7ff ffd7 	bl	8003350 <HAL_FMAC_ErrorCallback>
}
 80033a2:	bd10      	pop	{r4, pc}
      if (READ_BIT(hfmac->Instance->PARAM, FMAC_PARAM_START) == 0U)
 80033a4:	6821      	ldr	r1, [r4, #0]
 80033a6:	23ff      	movs	r3, #255	; 0xff
 80033a8:	e002      	b.n	80033b0 <FMAC_DMAFilterConfig+0x44>
    for (index = 0U; index < MAX_PRELOAD_INDEX; index++)
 80033aa:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 80033ae:	d003      	beq.n	80033b8 <FMAC_DMAFilterConfig+0x4c>
      if (READ_BIT(hfmac->Instance->PARAM, FMAC_PARAM_START) == 0U)
 80033b0:	68ca      	ldr	r2, [r1, #12]
    for (index = 0U; index < MAX_PRELOAD_INDEX; index++)
 80033b2:	3b01      	subs	r3, #1
      if (READ_BIT(hfmac->Instance->PARAM, FMAC_PARAM_START) == 0U)
 80033b4:	2a00      	cmp	r2, #0
 80033b6:	dbf8      	blt.n	80033aa <FMAC_DMAFilterConfig+0x3e>
    if (READ_BIT(hfmac->Instance->PARAM, FMAC_PARAM_START) != 0U)
 80033b8:	68cb      	ldr	r3, [r1, #12]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	da06      	bge.n	80033cc <FMAC_DMAFilterConfig+0x60>
      hfmac->State = HAL_FMAC_STATE_TIMEOUT;
 80033be:	23a0      	movs	r3, #160	; 0xa0
 80033c0:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
 80033c4:	e7e6      	b.n	8003394 <FMAC_DMAFilterConfig+0x28>
      hfmac->pInput = NULL;
 80033c6:	60e0      	str	r0, [r4, #12]
      hfmac->InputCurrentSize = 0U;
 80033c8:	8220      	strh	r0, [r4, #16]
}
 80033ca:	bd10      	pop	{r4, pc}
      hfmac->State = HAL_FMAC_STATE_READY;
 80033cc:	2320      	movs	r3, #32
      HAL_FMAC_FilterConfigCallback(hfmac);
 80033ce:	4620      	mov	r0, r4
      hfmac->State = HAL_FMAC_STATE_READY;
 80033d0:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
      HAL_FMAC_FilterConfigCallback(hfmac);
 80033d4:	f7fd f892 	bl	80004fc <HAL_FMAC_FilterConfigCallback>
}
 80033d8:	bd10      	pop	{r4, pc}
 80033da:	bf00      	nop
 80033dc:	0800336d 	.word	0x0800336d
 80033e0:	08003355 	.word	0x08003355

080033e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80033e8:	680c      	ldr	r4, [r1, #0]
{
 80033ea:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80033ec:	2c00      	cmp	r4, #0
 80033ee:	f000 80a3 	beq.w	8003538 <HAL_GPIO_Init+0x154>
 80033f2:	f04f 0c00 	mov.w	ip, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033f6:	4f86      	ldr	r7, [pc, #536]	; (8003610 <HAL_GPIO_Init+0x22c>)
  uint32_t position = 0x00U;
 80033f8:	4663      	mov	r3, ip
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80033fa:	2201      	movs	r2, #1
 80033fc:	409a      	lsls	r2, r3
    if (iocurrent != 0x00U)
 80033fe:	ea12 0e04 	ands.w	lr, r2, r4
 8003402:	f000 8092 	beq.w	800352a <HAL_GPIO_Init+0x146>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003406:	684d      	ldr	r5, [r1, #4]
 8003408:	f005 0903 	and.w	r9, r5, #3
 800340c:	f109 36ff 	add.w	r6, r9, #4294967295	; 0xffffffff
 8003410:	2e01      	cmp	r6, #1
 8003412:	f240 8094 	bls.w	800353e <HAL_GPIO_Init+0x15a>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003416:	f1b9 0f03 	cmp.w	r9, #3
 800341a:	f040 80ce 	bne.w	80035ba <HAL_GPIO_Init+0x1d6>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800341e:	fa09 f20c 	lsl.w	r2, r9, ip
 8003422:	ea6f 0802 	mvn.w	r8, r2
      temp = GPIOx->MODER;
 8003426:	6806      	ldr	r6, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003428:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800342c:	ea06 0608 	and.w	r6, r6, r8
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003430:	ea42 0206 	orr.w	r2, r2, r6
      GPIOx->MODER = temp;
 8003434:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003436:	d078      	beq.n	800352a <HAL_GPIO_Init+0x146>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003438:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 800343c:	f023 0803 	bic.w	r8, r3, #3

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003440:	f003 0903 	and.w	r9, r3, #3
 8003444:	260f      	movs	r6, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003446:	f042 0202 	orr.w	r2, r2, #2
 800344a:	f108 48b0 	add.w	r8, r8, #1476395008	; 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800344e:	ea4f 0989 	mov.w	r9, r9, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003452:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8003456:	f508 6880 	add.w	r8, r8, #1024	; 0x400
 800345a:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800345e:	fa06 f609 	lsl.w	r6, r6, r9
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003462:	f002 0202 	and.w	r2, r2, #2
 8003466:	9201      	str	r2, [sp, #4]
 8003468:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 800346a:	f8d8 2008 	ldr.w	r2, [r8, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800346e:	ea22 0206 	bic.w	r2, r2, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003472:	4e68      	ldr	r6, [pc, #416]	; (8003614 <HAL_GPIO_Init+0x230>)
 8003474:	42b0      	cmp	r0, r6
 8003476:	d024      	beq.n	80034c2 <HAL_GPIO_Init+0xde>
 8003478:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800347c:	42b0      	cmp	r0, r6
 800347e:	f000 80a8 	beq.w	80035d2 <HAL_GPIO_Init+0x1ee>
 8003482:	4e65      	ldr	r6, [pc, #404]	; (8003618 <HAL_GPIO_Init+0x234>)
 8003484:	42b0      	cmp	r0, r6
 8003486:	f000 80a9 	beq.w	80035dc <HAL_GPIO_Init+0x1f8>
 800348a:	4e64      	ldr	r6, [pc, #400]	; (800361c <HAL_GPIO_Init+0x238>)
 800348c:	42b0      	cmp	r0, r6
 800348e:	f000 809b 	beq.w	80035c8 <HAL_GPIO_Init+0x1e4>
 8003492:	4e63      	ldr	r6, [pc, #396]	; (8003620 <HAL_GPIO_Init+0x23c>)
 8003494:	42b0      	cmp	r0, r6
 8003496:	f000 80ab 	beq.w	80035f0 <HAL_GPIO_Init+0x20c>
 800349a:	4e62      	ldr	r6, [pc, #392]	; (8003624 <HAL_GPIO_Init+0x240>)
 800349c:	42b0      	cmp	r0, r6
 800349e:	f000 80ac 	beq.w	80035fa <HAL_GPIO_Init+0x216>
 80034a2:	4e61      	ldr	r6, [pc, #388]	; (8003628 <HAL_GPIO_Init+0x244>)
 80034a4:	42b0      	cmp	r0, r6
 80034a6:	f000 809e 	beq.w	80035e6 <HAL_GPIO_Init+0x202>
 80034aa:	4e60      	ldr	r6, [pc, #384]	; (800362c <HAL_GPIO_Init+0x248>)
 80034ac:	42b0      	cmp	r0, r6
 80034ae:	f000 80a9 	beq.w	8003604 <HAL_GPIO_Init+0x220>
 80034b2:	4e5f      	ldr	r6, [pc, #380]	; (8003630 <HAL_GPIO_Init+0x24c>)
 80034b4:	42b0      	cmp	r0, r6
 80034b6:	bf0c      	ite	eq
 80034b8:	2609      	moveq	r6, #9
 80034ba:	260a      	movne	r6, #10
 80034bc:	fa06 f609 	lsl.w	r6, r6, r9
 80034c0:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 80034c2:	f8c8 2008 	str.w	r2, [r8, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80034c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80034ca:	f415 1f80 	tst.w	r5, #1048576	; 0x100000
        temp &= ~(iocurrent);
 80034ce:	ea6f 060e 	mvn.w	r6, lr
        temp = EXTI->RTSR1;
 80034d2:	6812      	ldr	r2, [r2, #0]
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 80034d4:	f04f 48b0 	mov.w	r8, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 80034d8:	bf0c      	ite	eq
 80034da:	4032      	andeq	r2, r6
          temp |= iocurrent;
 80034dc:	ea4e 0202 	orrne.w	r2, lr, r2

        temp = EXTI->FTSR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80034e0:	f415 1f00 	tst.w	r5, #2097152	; 0x200000
        EXTI->RTSR1 = temp;
 80034e4:	f8c8 2000 	str.w	r2, [r8]
        temp = EXTI->FTSR1;
 80034e8:	f8d8 2004 	ldr.w	r2, [r8, #4]
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 80034ec:	f04f 48b0 	mov.w	r8, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 80034f0:	bf0c      	ite	eq
 80034f2:	4032      	andeq	r2, r6
          temp |= iocurrent;
 80034f4:	ea4e 0202 	orrne.w	r2, lr, r2

        temp = EXTI_CurrentCPU->EMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80034f8:	f415 3f00 	tst.w	r5, #131072	; 0x20000
        EXTI->FTSR1 = temp;
 80034fc:	f8c8 2004 	str.w	r2, [r8, #4]
        temp = EXTI_CurrentCPU->EMR1;
 8003500:	f8d8 2084 	ldr.w	r2, [r8, #132]	; 0x84
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003504:	f04f 48b0 	mov.w	r8, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 8003508:	bf0c      	ite	eq
 800350a:	4032      	andeq	r2, r6
          temp |= iocurrent;
 800350c:	ea4e 0202 	orrne.w	r2, lr, r2

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003510:	03ed      	lsls	r5, r5, #15
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003512:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
        EXTI_CurrentCPU->EMR1 = temp;
 8003516:	f8c8 2084 	str.w	r2, [r8, #132]	; 0x84
        temp = EXTI_CurrentCPU->IMR1;
 800351a:	f8d8 2080 	ldr.w	r2, [r8, #128]	; 0x80
        temp &= ~(iocurrent);
 800351e:	bf54      	ite	pl
 8003520:	4032      	andpl	r2, r6
          temp |= iocurrent;
 8003522:	ea4e 0202 	orrmi.w	r2, lr, r2
        EXTI_CurrentCPU->IMR1 = temp;
 8003526:	f8c5 2080 	str.w	r2, [r5, #128]	; 0x80
      }
    }

    position++;
 800352a:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800352c:	f10c 0c02 	add.w	ip, ip, #2
 8003530:	fa34 f203 	lsrs.w	r2, r4, r3
 8003534:	f47f af61 	bne.w	80033fa <HAL_GPIO_Init+0x16>
  }
}
 8003538:	b003      	add	sp, #12
 800353a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800353e:	f04f 0803 	mov.w	r8, #3
        temp = GPIOx->OSPEEDR;
 8003542:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003544:	fa08 f80c 	lsl.w	r8, r8, ip
 8003548:	ea26 0a08 	bic.w	sl, r6, r8
        temp |= (GPIO_Init->Speed << (position * 2U));
 800354c:	68ce      	ldr	r6, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800354e:	ea6f 0808 	mvn.w	r8, r8
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003552:	fa06 f60c 	lsl.w	r6, r6, ip
 8003556:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OSPEEDR = temp;
 800355a:	6086      	str	r6, [r0, #8]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800355c:	f3c5 1600 	ubfx	r6, r5, #4, #1
        temp = GPIOx->OTYPER;
 8003560:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003564:	409e      	lsls	r6, r3
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003566:	ea2a 0202 	bic.w	r2, sl, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800356a:	4332      	orrs	r2, r6
        GPIOx->OTYPER = temp;
 800356c:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 800356e:	68c2      	ldr	r2, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003570:	f1b9 0f02 	cmp.w	r9, #2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003574:	688e      	ldr	r6, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003576:	ea02 0208 	and.w	r2, r2, r8
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800357a:	fa06 f60c 	lsl.w	r6, r6, ip
 800357e:	ea46 0602 	orr.w	r6, r6, r2
      GPIOx->PUPDR = temp;
 8003582:	fa09 f20c 	lsl.w	r2, r9, ip
 8003586:	60c6      	str	r6, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003588:	f47f af4d 	bne.w	8003426 <HAL_GPIO_Init+0x42>
        temp = GPIOx->AFR[position >> 3U];
 800358c:	ea4f 09d3 	mov.w	r9, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003590:	f003 0b07 	and.w	fp, r3, #7
 8003594:	260f      	movs	r6, #15
 8003596:	eb00 0989 	add.w	r9, r0, r9, lsl #2
 800359a:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3U];
 800359e:	f8d9 a020 	ldr.w	sl, [r9, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80035a2:	fa06 f60b 	lsl.w	r6, r6, fp
 80035a6:	ea2a 0a06 	bic.w	sl, sl, r6
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80035aa:	690e      	ldr	r6, [r1, #16]
 80035ac:	fa06 f60b 	lsl.w	r6, r6, fp
 80035b0:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->AFR[position >> 3U] = temp;
 80035b4:	f8c9 6020 	str.w	r6, [r9, #32]
 80035b8:	e735      	b.n	8003426 <HAL_GPIO_Init+0x42>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80035ba:	f04f 0803 	mov.w	r8, #3
 80035be:	fa08 f80c 	lsl.w	r8, r8, ip
 80035c2:	ea6f 0808 	mvn.w	r8, r8
 80035c6:	e7d2      	b.n	800356e <HAL_GPIO_Init+0x18a>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80035c8:	2603      	movs	r6, #3
 80035ca:	fa06 f609 	lsl.w	r6, r6, r9
 80035ce:	4332      	orrs	r2, r6
 80035d0:	e777      	b.n	80034c2 <HAL_GPIO_Init+0xde>
 80035d2:	2601      	movs	r6, #1
 80035d4:	fa06 f609 	lsl.w	r6, r6, r9
 80035d8:	4332      	orrs	r2, r6
 80035da:	e772      	b.n	80034c2 <HAL_GPIO_Init+0xde>
 80035dc:	2602      	movs	r6, #2
 80035de:	fa06 f609 	lsl.w	r6, r6, r9
 80035e2:	4332      	orrs	r2, r6
 80035e4:	e76d      	b.n	80034c2 <HAL_GPIO_Init+0xde>
 80035e6:	2606      	movs	r6, #6
 80035e8:	fa06 f609 	lsl.w	r6, r6, r9
 80035ec:	4332      	orrs	r2, r6
 80035ee:	e768      	b.n	80034c2 <HAL_GPIO_Init+0xde>
 80035f0:	2604      	movs	r6, #4
 80035f2:	fa06 f609 	lsl.w	r6, r6, r9
 80035f6:	4332      	orrs	r2, r6
 80035f8:	e763      	b.n	80034c2 <HAL_GPIO_Init+0xde>
 80035fa:	2605      	movs	r6, #5
 80035fc:	fa06 f609 	lsl.w	r6, r6, r9
 8003600:	4332      	orrs	r2, r6
 8003602:	e75e      	b.n	80034c2 <HAL_GPIO_Init+0xde>
 8003604:	2607      	movs	r6, #7
 8003606:	fa06 f609 	lsl.w	r6, r6, r9
 800360a:	4332      	orrs	r2, r6
 800360c:	e759      	b.n	80034c2 <HAL_GPIO_Init+0xde>
 800360e:	bf00      	nop
 8003610:	58024400 	.word	0x58024400
 8003614:	58020000 	.word	0x58020000
 8003618:	58020800 	.word	0x58020800
 800361c:	58020c00 	.word	0x58020c00
 8003620:	58021000 	.word	0x58021000
 8003624:	58021400 	.word	0x58021400
 8003628:	58021800 	.word	0x58021800
 800362c:	58021c00 	.word	0x58021c00
 8003630:	58022400 	.word	0x58022400

08003634 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003634:	b902      	cbnz	r2, 8003638 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003636:	0409      	lsls	r1, r1, #16
 8003638:	6181      	str	r1, [r0, #24]
  }
}
 800363a:	4770      	bx	lr

0800363c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800363c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800363e:	b08b      	sub	sp, #44	; 0x2c
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003640:	2800      	cmp	r0, #0
 8003642:	f000 8088 	beq.w	8003756 <HAL_PCD_Init+0x11a>
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003646:	f890 34bd 	ldrb.w	r3, [r0, #1213]	; 0x4bd
 800364a:	4605      	mov	r5, r0
  USBx = hpcd->Instance;
 800364c:	6804      	ldr	r4, [r0, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 800364e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003652:	2b00      	cmp	r3, #0
 8003654:	d079      	beq.n	800374a <HAL_PCD_Init+0x10e>
 8003656:	4620      	mov	r0, r4
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003658:	2303      	movs	r3, #3

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800365a:	462e      	mov	r6, r5
 800365c:	1d2f      	adds	r7, r5, #4
  hpcd->State = HAL_PCD_STATE_BUSY;
 800365e:	f885 34bd 	strb.w	r3, [r5, #1213]	; 0x4bd
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003662:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003664:	466c      	mov	r4, sp
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003666:	f413 7380 	ands.w	r3, r3, #256	; 0x100
    hpcd->Init.dma_enable = 0U;
 800366a:	bf08      	it	eq
 800366c:	60eb      	streq	r3, [r5, #12]
  __HAL_PCD_DISABLE(hpcd);
 800366e:	f003 fc23 	bl	8006eb8 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003672:	f856 eb10 	ldr.w	lr, [r6], #16
 8003676:	46b4      	mov	ip, r6
 8003678:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800367c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800367e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8003682:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003684:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8003688:	e884 0003 	stmia.w	r4, {r0, r1}
 800368c:	4670      	mov	r0, lr
 800368e:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8003692:	f003 faed 	bl	8006c70 <USB_CoreInit>
 8003696:	4604      	mov	r4, r0
 8003698:	b130      	cbz	r0, 80036a8 <HAL_PCD_Init+0x6c>

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
    return HAL_ERROR;
 800369a:	2401      	movs	r4, #1
    hpcd->State = HAL_PCD_STATE_ERROR;
 800369c:	2302      	movs	r3, #2
  }

  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 800369e:	4620      	mov	r0, r4
    hpcd->State = HAL_PCD_STATE_ERROR;
 80036a0:	f885 34bd 	strb.w	r3, [r5, #1213]	; 0x4bd
}
 80036a4:	b00b      	add	sp, #44	; 0x2c
 80036a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80036a8:	4601      	mov	r1, r0
 80036aa:	6828      	ldr	r0, [r5, #0]
 80036ac:	f003 fc0c 	bl	8006ec8 <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036b0:	6868      	ldr	r0, [r5, #4]
 80036b2:	b358      	cbz	r0, 800370c <HAL_PCD_Init+0xd0>
 80036b4:	4622      	mov	r2, r4
    hpcd->IN_ep[i].is_in = 1U;
 80036b6:	f04f 0e01 	mov.w	lr, #1
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80036ba:	4621      	mov	r1, r4
    hpcd->IN_ep[i].is_in = 1U;
 80036bc:	eb02 03c2 	add.w	r3, r2, r2, lsl #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036c0:	f102 0c01 	add.w	ip, r2, #1
    hpcd->IN_ep[i].is_in = 1U;
 80036c4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    hpcd->IN_ep[i].num = i;
 80036c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 80036cc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036d0:	fa5f f28c 	uxtb.w	r2, ip
    hpcd->IN_ep[i].is_in = 1U;
 80036d4:	f883 e03d 	strb.w	lr, [r3, #61]	; 0x3d
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036d8:	4282      	cmp	r2, r0
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80036da:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    hpcd->IN_ep[i].xfer_len = 0U;
 80036de:	64d9      	str	r1, [r3, #76]	; 0x4c
    hpcd->IN_ep[i].xfer_buff = 0U;
 80036e0:	e9c3 1111 	strd	r1, r1, [r3, #68]	; 0x44
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036e4:	d3ea      	bcc.n	80036bc <HAL_PCD_Init+0x80>
    hpcd->OUT_ep[i].is_in = 0U;
 80036e6:	2200      	movs	r2, #0
 80036e8:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036ec:	1c61      	adds	r1, r4, #1
    hpcd->OUT_ep[i].is_in = 0U;
 80036ee:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    hpcd->OUT_ep[i].num = i;
 80036f2:	f883 427c 	strb.w	r4, [r3, #636]	; 0x27c
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036f6:	b2cc      	uxtb	r4, r1
    hpcd->OUT_ep[i].is_in = 0U;
 80036f8:	f883 227d 	strb.w	r2, [r3, #637]	; 0x27d
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036fc:	4284      	cmp	r4, r0
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80036fe:	f883 2280 	strb.w	r2, [r3, #640]	; 0x280
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003702:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003706:	e9c3 22a1 	strd	r2, r2, [r3, #644]	; 0x284
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800370a:	d3ed      	bcc.n	80036e8 <HAL_PCD_Init+0xac>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800370c:	466c      	mov	r4, sp
 800370e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8003710:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003712:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8003714:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003716:	e896 0003 	ldmia.w	r6, {r0, r1}
 800371a:	e884 0003 	stmia.w	r4, {r0, r1}
 800371e:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8003722:	6828      	ldr	r0, [r5, #0]
 8003724:	f003 fc06 	bl	8006f34 <USB_DevInit>
 8003728:	4604      	mov	r4, r0
 800372a:	2800      	cmp	r0, #0
 800372c:	d1b5      	bne.n	800369a <HAL_PCD_Init+0x5e>
  hpcd->State = HAL_PCD_STATE_READY;
 800372e:	2201      	movs	r2, #1
  if (hpcd->Init.lpm_enable == 1U)
 8003730:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  hpcd->USB_Address = 0U;
 8003732:	f885 0038 	strb.w	r0, [r5, #56]	; 0x38
  if (hpcd->Init.lpm_enable == 1U)
 8003736:	4293      	cmp	r3, r2
  hpcd->State = HAL_PCD_STATE_READY;
 8003738:	f885 24bd 	strb.w	r2, [r5, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
 800373c:	d00f      	beq.n	800375e <HAL_PCD_Init+0x122>
  (void)USB_DevDisconnect(hpcd->Instance);
 800373e:	6828      	ldr	r0, [r5, #0]
 8003740:	f004 f83a 	bl	80077b8 <USB_DevDisconnect>
}
 8003744:	4620      	mov	r0, r4
 8003746:	b00b      	add	sp, #44	; 0x2c
 8003748:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hpcd->Lock = HAL_UNLOCKED;
 800374a:	f880 24bc 	strb.w	r2, [r0, #1212]	; 0x4bc
    HAL_PCD_MspInit(hpcd);
 800374e:	f005 f98f 	bl	8008a70 <HAL_PCD_MspInit>
  __HAL_PCD_DISABLE(hpcd);
 8003752:	6828      	ldr	r0, [r5, #0]
 8003754:	e780      	b.n	8003658 <HAL_PCD_Init+0x1c>
    return HAL_ERROR;
 8003756:	2401      	movs	r4, #1
}
 8003758:	4620      	mov	r0, r4
 800375a:	b00b      	add	sp, #44	; 0x2c
 800375c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800375e:	4628      	mov	r0, r5
 8003760:	f000 ff4e 	bl	8004600 <HAL_PCDEx_ActivateLPM>
 8003764:	e7eb      	b.n	800373e <HAL_PCD_Init+0x102>
 8003766:	bf00      	nop

08003768 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003768:	b510      	push	{r4, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;

  __HAL_LOCK(hpcd);
 800376a:	f890 34bc 	ldrb.w	r3, [r0, #1212]	; 0x4bc
{
 800376e:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003770:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 8003772:	2b01      	cmp	r3, #1
 8003774:	d017      	beq.n	80037a6 <HAL_PCD_Start+0x3e>
 8003776:	2301      	movs	r3, #1
 8003778:	f884 34bc 	strb.w	r3, [r4, #1212]	; 0x4bc

  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 800377c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800377e:	05db      	lsls	r3, r3, #23
 8003780:	d402      	bmi.n	8003788 <HAL_PCD_Start+0x20>
 8003782:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003784:	2b01      	cmp	r3, #1
 8003786:	d009      	beq.n	800379c <HAL_PCD_Start+0x34>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }

  __HAL_PCD_ENABLE(hpcd);
 8003788:	f003 fb8e 	bl	8006ea8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800378c:	6820      	ldr	r0, [r4, #0]
 800378e:	f004 f803 	bl	8007798 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003792:	2300      	movs	r3, #0

  return HAL_OK;
 8003794:	4618      	mov	r0, r3
  __HAL_UNLOCK(hpcd);
 8003796:	f884 34bc 	strb.w	r3, [r4, #1212]	; 0x4bc
}
 800379a:	bd10      	pop	{r4, pc}
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800379c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800379e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037a2:	6383      	str	r3, [r0, #56]	; 0x38
 80037a4:	e7f0      	b.n	8003788 <HAL_PCD_Start+0x20>
  __HAL_LOCK(hpcd);
 80037a6:	2002      	movs	r0, #2
}
 80037a8:	bd10      	pop	{r4, pc}
 80037aa:	bf00      	nop

080037ac <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80037ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80037b0:	6805      	ldr	r5, [r0, #0]
{
 80037b2:	b089      	sub	sp, #36	; 0x24
 80037b4:	4604      	mov	r4, r0
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80037b6:	4628      	mov	r0, r5
 80037b8:	f004 f83c 	bl	8007834 <USB_GetMode>
 80037bc:	b110      	cbz	r0, 80037c4 <HAL_PCD_IRQHandler+0x18>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
    }
  }
}
 80037be:	b009      	add	sp, #36	; 0x24
 80037c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80037c4:	4683      	mov	fp, r0
 80037c6:	6820      	ldr	r0, [r4, #0]
 80037c8:	f004 f806 	bl	80077d8 <USB_ReadInterrupts>
 80037cc:	2800      	cmp	r0, #0
 80037ce:	d0f6      	beq.n	80037be <HAL_PCD_IRQHandler+0x12>
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80037d0:	f8d5 3808 	ldr.w	r3, [r5, #2056]	; 0x808
 80037d4:	f505 6200 	add.w	r2, r5, #2048	; 0x800
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80037d8:	6820      	ldr	r0, [r4, #0]
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80037da:	f3c3 230d 	ubfx	r3, r3, #8, #14
 80037de:	9202      	str	r2, [sp, #8]
 80037e0:	f8c4 34fc 	str.w	r3, [r4, #1276]	; 0x4fc
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80037e4:	f003 fff8 	bl	80077d8 <USB_ReadInterrupts>
 80037e8:	f010 0f02 	tst.w	r0, #2
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80037ec:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80037ee:	d003      	beq.n	80037f8 <HAL_PCD_IRQHandler+0x4c>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80037f0:	6943      	ldr	r3, [r0, #20]
 80037f2:	f003 0302 	and.w	r3, r3, #2
 80037f6:	6143      	str	r3, [r0, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80037f8:	f003 ffee 	bl	80077d8 <USB_ReadInterrupts>
 80037fc:	f010 0f10 	tst.w	r0, #16
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003800:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003802:	d012      	beq.n	800382a <HAL_PCD_IRQHandler+0x7e>
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003804:	6983      	ldr	r3, [r0, #24]
 8003806:	f023 0310 	bic.w	r3, r3, #16
 800380a:	6183      	str	r3, [r0, #24]
      RegVal = USBx->GRXSTSP;
 800380c:	6a2e      	ldr	r6, [r5, #32]
      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800380e:	f3c6 4343 	ubfx	r3, r6, #17, #4
      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003812:	f006 070f 	and.w	r7, r6, #15
      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003816:	2b02      	cmp	r3, #2
 8003818:	f000 83e5 	beq.w	8003fe6 <HAL_PCD_IRQHandler+0x83a>
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800381c:	2b06      	cmp	r3, #6
 800381e:	f000 8323 	beq.w	8003e68 <HAL_PCD_IRQHandler+0x6bc>
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003822:	6983      	ldr	r3, [r0, #24]
 8003824:	f043 0310 	orr.w	r3, r3, #16
 8003828:	6183      	str	r3, [r0, #24]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800382a:	f003 ffd5 	bl	80077d8 <USB_ReadInterrupts>
 800382e:	0307      	lsls	r7, r0, #12
 8003830:	f100 8281 	bmi.w	8003d36 <HAL_PCD_IRQHandler+0x58a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003834:	6820      	ldr	r0, [r4, #0]
 8003836:	f003 ffcf 	bl	80077d8 <USB_ReadInterrupts>
 800383a:	0346      	lsls	r6, r0, #13
 800383c:	f100 8228 	bmi.w	8003c90 <HAL_PCD_IRQHandler+0x4e4>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003840:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003842:	f003 ffc9 	bl	80077d8 <USB_ReadInterrupts>
 8003846:	2800      	cmp	r0, #0
 8003848:	f2c0 819a 	blt.w	8003b80 <HAL_PCD_IRQHandler+0x3d4>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800384c:	6820      	ldr	r0, [r4, #0]
 800384e:	f003 ffc3 	bl	80077d8 <USB_ReadInterrupts>
 8003852:	0503      	lsls	r3, r0, #20
 8003854:	f100 8157 	bmi.w	8003b06 <HAL_PCD_IRQHandler+0x35a>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003858:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800385a:	f003 ffbd 	bl	80077d8 <USB_ReadInterrupts>
 800385e:	0106      	lsls	r6, r0, #4
 8003860:	d514      	bpl.n	800388c <HAL_PCD_IRQHandler+0xe0>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003862:	6822      	ldr	r2, [r4, #0]
 8003864:	6953      	ldr	r3, [r2, #20]
 8003866:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800386a:	6153      	str	r3, [r2, #20]
      if (hpcd->LPM_State == LPM_L0)
 800386c:	f894 34f4 	ldrb.w	r3, [r4, #1268]	; 0x4f4
 8003870:	2b00      	cmp	r3, #0
 8003872:	f040 82ac 	bne.w	8003dce <HAL_PCD_IRQHandler+0x622>
        hpcd->LPM_State = LPM_L1;
 8003876:	2101      	movs	r1, #1
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003878:	4620      	mov	r0, r4
        hpcd->LPM_State = LPM_L1;
 800387a:	f884 14f4 	strb.w	r1, [r4, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800387e:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8003880:	f3c3 0383 	ubfx	r3, r3, #2, #4
 8003884:	f8c4 34f8 	str.w	r3, [r4, #1272]	; 0x4f8
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003888:	f000 fed2 	bl	8004630 <HAL_PCDEx_LPM_Callback>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800388c:	6820      	ldr	r0, [r4, #0]
 800388e:	f003 ffa3 	bl	80077d8 <USB_ReadInterrupts>
 8003892:	04c0      	lsls	r0, r0, #19
 8003894:	f100 819e 	bmi.w	8003bd4 <HAL_PCD_IRQHandler+0x428>
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003898:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800389a:	f003 ff9d 	bl	80077d8 <USB_ReadInterrupts>
 800389e:	f410 5f00 	tst.w	r0, #8192	; 0x2000
      (void)USB_ActivateSetup(hpcd->Instance);
 80038a2:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80038a4:	f040 817f 	bne.w	8003ba6 <HAL_PCD_IRQHandler+0x3fa>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80038a8:	f003 ff96 	bl	80077d8 <USB_ReadInterrupts>
 80038ac:	0701      	lsls	r1, r0, #28
 80038ae:	f100 81e6 	bmi.w	8003c7e <HAL_PCD_IRQHandler+0x4d2>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80038b2:	6820      	ldr	r0, [r4, #0]
 80038b4:	f003 ff90 	bl	80077d8 <USB_ReadInterrupts>
 80038b8:	0602      	lsls	r2, r0, #24
 80038ba:	d571      	bpl.n	80039a0 <HAL_PCD_IRQHandler+0x1f4>
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80038bc:	69aa      	ldr	r2, [r5, #24]
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80038be:	6863      	ldr	r3, [r4, #4]
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80038c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80038c4:	2b01      	cmp	r3, #1
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80038c6:	61aa      	str	r2, [r5, #24]
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80038c8:	d96a      	bls.n	80039a0 <HAL_PCD_IRQHandler+0x1f4>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80038ca:	f894 22a3 	ldrb.w	r2, [r4, #675]	; 0x2a3
 80038ce:	2a01      	cmp	r2, #1
 80038d0:	f000 83ea 	beq.w	80040a8 <HAL_PCD_IRQHandler+0x8fc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80038d4:	2b02      	cmp	r3, #2
 80038d6:	d963      	bls.n	80039a0 <HAL_PCD_IRQHandler+0x1f4>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80038d8:	f894 22c7 	ldrb.w	r2, [r4, #711]	; 0x2c7
 80038dc:	2a01      	cmp	r2, #1
 80038de:	f000 83fe 	beq.w	80040de <HAL_PCD_IRQHandler+0x932>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80038e2:	2b03      	cmp	r3, #3
 80038e4:	d95c      	bls.n	80039a0 <HAL_PCD_IRQHandler+0x1f4>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80038e6:	f894 22eb 	ldrb.w	r2, [r4, #747]	; 0x2eb
 80038ea:	2a01      	cmp	r2, #1
 80038ec:	f000 82b5 	beq.w	8003e5a <HAL_PCD_IRQHandler+0x6ae>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80038f0:	2b04      	cmp	r3, #4
 80038f2:	d955      	bls.n	80039a0 <HAL_PCD_IRQHandler+0x1f4>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80038f4:	f894 230f 	ldrb.w	r2, [r4, #783]	; 0x30f
 80038f8:	2a01      	cmp	r2, #1
 80038fa:	f000 82c8 	beq.w	8003e8e <HAL_PCD_IRQHandler+0x6e2>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80038fe:	2b05      	cmp	r3, #5
 8003900:	d94e      	bls.n	80039a0 <HAL_PCD_IRQHandler+0x1f4>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003902:	f894 2333 	ldrb.w	r2, [r4, #819]	; 0x333
 8003906:	2a01      	cmp	r2, #1
 8003908:	f000 8426 	beq.w	8004158 <HAL_PCD_IRQHandler+0x9ac>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800390c:	2b06      	cmp	r3, #6
 800390e:	d947      	bls.n	80039a0 <HAL_PCD_IRQHandler+0x1f4>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003910:	f894 2357 	ldrb.w	r2, [r4, #855]	; 0x357
 8003914:	2a01      	cmp	r2, #1
 8003916:	f000 8433 	beq.w	8004180 <HAL_PCD_IRQHandler+0x9d4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800391a:	2b07      	cmp	r3, #7
 800391c:	d940      	bls.n	80039a0 <HAL_PCD_IRQHandler+0x1f4>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800391e:	f894 237b 	ldrb.w	r2, [r4, #891]	; 0x37b
 8003922:	2a01      	cmp	r2, #1
 8003924:	f000 844a 	beq.w	80041bc <HAL_PCD_IRQHandler+0xa10>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003928:	2b08      	cmp	r3, #8
 800392a:	d939      	bls.n	80039a0 <HAL_PCD_IRQHandler+0x1f4>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800392c:	f894 239f 	ldrb.w	r2, [r4, #927]	; 0x39f
 8003930:	2a01      	cmp	r2, #1
 8003932:	f000 8457 	beq.w	80041e4 <HAL_PCD_IRQHandler+0xa38>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003936:	2b09      	cmp	r3, #9
 8003938:	d932      	bls.n	80039a0 <HAL_PCD_IRQHandler+0x1f4>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800393a:	f894 23c3 	ldrb.w	r2, [r4, #963]	; 0x3c3
 800393e:	2a01      	cmp	r2, #1
 8003940:	f000 8464 	beq.w	800420c <HAL_PCD_IRQHandler+0xa60>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003944:	2b0a      	cmp	r3, #10
 8003946:	d92b      	bls.n	80039a0 <HAL_PCD_IRQHandler+0x1f4>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003948:	f894 23e7 	ldrb.w	r2, [r4, #999]	; 0x3e7
 800394c:	2a01      	cmp	r2, #1
 800394e:	f000 8471 	beq.w	8004234 <HAL_PCD_IRQHandler+0xa88>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003952:	2b0b      	cmp	r3, #11
 8003954:	d924      	bls.n	80039a0 <HAL_PCD_IRQHandler+0x1f4>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003956:	f894 240b 	ldrb.w	r2, [r4, #1035]	; 0x40b
 800395a:	2a01      	cmp	r2, #1
 800395c:	f000 847e 	beq.w	800425c <HAL_PCD_IRQHandler+0xab0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003960:	2b0c      	cmp	r3, #12
 8003962:	d91d      	bls.n	80039a0 <HAL_PCD_IRQHandler+0x1f4>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003964:	f894 242f 	ldrb.w	r2, [r4, #1071]	; 0x42f
 8003968:	2a01      	cmp	r2, #1
 800396a:	f000 847f 	beq.w	800426c <HAL_PCD_IRQHandler+0xac0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800396e:	2b0d      	cmp	r3, #13
 8003970:	d916      	bls.n	80039a0 <HAL_PCD_IRQHandler+0x1f4>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003972:	f894 2453 	ldrb.w	r2, [r4, #1107]	; 0x453
 8003976:	2a01      	cmp	r2, #1
 8003978:	f000 849f 	beq.w	80042ba <HAL_PCD_IRQHandler+0xb0e>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800397c:	2b0e      	cmp	r3, #14
 800397e:	d90f      	bls.n	80039a0 <HAL_PCD_IRQHandler+0x1f4>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003980:	f894 2477 	ldrb.w	r2, [r4, #1143]	; 0x477
 8003984:	2a01      	cmp	r2, #1
 8003986:	f000 84a6 	beq.w	80042d6 <HAL_PCD_IRQHandler+0xb2a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800398a:	2b0f      	cmp	r3, #15
 800398c:	d908      	bls.n	80039a0 <HAL_PCD_IRQHandler+0x1f4>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800398e:	f894 349b 	ldrb.w	r3, [r4, #1179]	; 0x49b
 8003992:	2b01      	cmp	r3, #1
 8003994:	d104      	bne.n	80039a0 <HAL_PCD_IRQHandler+0x1f4>
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003996:	f504 6193 	add.w	r1, r4, #1176	; 0x498
 800399a:	6820      	ldr	r0, [r4, #0]
 800399c:	f003 fe0c 	bl	80075b8 <USB_EPStopXfer>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80039a0:	6820      	ldr	r0, [r4, #0]
 80039a2:	f003 ff19 	bl	80077d8 <USB_ReadInterrupts>
 80039a6:	02c3      	lsls	r3, r0, #11
 80039a8:	f140 80ab 	bpl.w	8003b02 <HAL_PCD_IRQHandler+0x356>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80039ac:	6863      	ldr	r3, [r4, #4]
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	f240 8089 	bls.w	8003ac6 <HAL_PCD_IRQHandler+0x31a>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80039b4:	f894 2064 	ldrb.w	r2, [r4, #100]	; 0x64
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80039b8:	f8d5 1920 	ldr.w	r1, [r5, #2336]	; 0x920
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80039bc:	2a01      	cmp	r2, #1
 80039be:	f000 8215 	beq.w	8003dec <HAL_PCD_IRQHandler+0x640>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80039c2:	2b02      	cmp	r3, #2
 80039c4:	d97f      	bls.n	8003ac6 <HAL_PCD_IRQHandler+0x31a>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80039c6:	f894 2088 	ldrb.w	r2, [r4, #136]	; 0x88
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80039ca:	f8d5 1940 	ldr.w	r1, [r5, #2368]	; 0x940
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80039ce:	2a01      	cmp	r2, #1
 80039d0:	f000 821f 	beq.w	8003e12 <HAL_PCD_IRQHandler+0x666>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80039d4:	2b03      	cmp	r3, #3
 80039d6:	d976      	bls.n	8003ac6 <HAL_PCD_IRQHandler+0x31a>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80039d8:	f894 20ac 	ldrb.w	r2, [r4, #172]	; 0xac
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80039dc:	f8d5 1960 	ldr.w	r1, [r5, #2400]	; 0x960
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80039e0:	2a01      	cmp	r2, #1
 80039e2:	f000 8222 	beq.w	8003e2a <HAL_PCD_IRQHandler+0x67e>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80039e6:	2b04      	cmp	r3, #4
 80039e8:	d96d      	bls.n	8003ac6 <HAL_PCD_IRQHandler+0x31a>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80039ea:	f894 20d0 	ldrb.w	r2, [r4, #208]	; 0xd0
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80039ee:	f8d5 1980 	ldr.w	r1, [r5, #2432]	; 0x980
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80039f2:	2a01      	cmp	r2, #1
 80039f4:	f000 8225 	beq.w	8003e42 <HAL_PCD_IRQHandler+0x696>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80039f8:	2b05      	cmp	r3, #5
 80039fa:	d964      	bls.n	8003ac6 <HAL_PCD_IRQHandler+0x31a>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80039fc:	f894 20f4 	ldrb.w	r2, [r4, #244]	; 0xf4
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003a00:	f8d5 19a0 	ldr.w	r1, [r5, #2464]	; 0x9a0
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003a04:	2a01      	cmp	r2, #1
 8003a06:	f000 8343 	beq.w	8004090 <HAL_PCD_IRQHandler+0x8e4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003a0a:	2b06      	cmp	r3, #6
 8003a0c:	d95b      	bls.n	8003ac6 <HAL_PCD_IRQHandler+0x31a>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003a0e:	f894 2118 	ldrb.w	r2, [r4, #280]	; 0x118
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003a12:	f8d5 19c0 	ldr.w	r1, [r5, #2496]	; 0x9c0
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003a16:	2a01      	cmp	r2, #1
 8003a18:	f000 8355 	beq.w	80040c6 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003a1c:	2b07      	cmp	r3, #7
 8003a1e:	d952      	bls.n	8003ac6 <HAL_PCD_IRQHandler+0x31a>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003a20:	f894 213c 	ldrb.w	r2, [r4, #316]	; 0x13c
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003a24:	f8d5 19e0 	ldr.w	r1, [r5, #2528]	; 0x9e0
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003a28:	2a01      	cmp	r2, #1
 8003a2a:	f000 8360 	beq.w	80040ee <HAL_PCD_IRQHandler+0x942>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003a2e:	2b08      	cmp	r3, #8
 8003a30:	d949      	bls.n	8003ac6 <HAL_PCD_IRQHandler+0x31a>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003a32:	f894 2160 	ldrb.w	r2, [r4, #352]	; 0x160
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003a36:	f8d5 1a00 	ldr.w	r1, [r5, #2560]	; 0xa00
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003a3a:	2a01      	cmp	r2, #1
 8003a3c:	f000 8363 	beq.w	8004106 <HAL_PCD_IRQHandler+0x95a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003a40:	2b09      	cmp	r3, #9
 8003a42:	d940      	bls.n	8003ac6 <HAL_PCD_IRQHandler+0x31a>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003a44:	f894 2184 	ldrb.w	r2, [r4, #388]	; 0x184
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003a48:	f8d5 1a20 	ldr.w	r1, [r5, #2592]	; 0xa20
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003a4c:	2a01      	cmp	r2, #1
 8003a4e:	f000 8377 	beq.w	8004140 <HAL_PCD_IRQHandler+0x994>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003a52:	2b0a      	cmp	r3, #10
 8003a54:	d937      	bls.n	8003ac6 <HAL_PCD_IRQHandler+0x31a>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003a56:	f894 21a8 	ldrb.w	r2, [r4, #424]	; 0x1a8
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003a5a:	f8d5 1a40 	ldr.w	r1, [r5, #2624]	; 0xa40
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003a5e:	2a01      	cmp	r2, #1
 8003a60:	f000 8382 	beq.w	8004168 <HAL_PCD_IRQHandler+0x9bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003a64:	2b0b      	cmp	r3, #11
 8003a66:	d92e      	bls.n	8003ac6 <HAL_PCD_IRQHandler+0x31a>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003a68:	f894 21cc 	ldrb.w	r2, [r4, #460]	; 0x1cc
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003a6c:	f8d5 1a60 	ldr.w	r1, [r5, #2656]	; 0xa60
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003a70:	2a01      	cmp	r2, #1
 8003a72:	f000 8397 	beq.w	80041a4 <HAL_PCD_IRQHandler+0x9f8>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003a76:	2b0c      	cmp	r3, #12
 8003a78:	d925      	bls.n	8003ac6 <HAL_PCD_IRQHandler+0x31a>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003a7a:	f894 21f0 	ldrb.w	r2, [r4, #496]	; 0x1f0
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003a7e:	f8d5 1a80 	ldr.w	r1, [r5, #2688]	; 0xa80
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003a82:	2a01      	cmp	r2, #1
 8003a84:	f000 83a2 	beq.w	80041cc <HAL_PCD_IRQHandler+0xa20>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003a88:	2b0d      	cmp	r3, #13
 8003a8a:	d91c      	bls.n	8003ac6 <HAL_PCD_IRQHandler+0x31a>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003a8c:	f894 2214 	ldrb.w	r2, [r4, #532]	; 0x214
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003a90:	f8d5 1aa0 	ldr.w	r1, [r5, #2720]	; 0xaa0
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003a94:	2a01      	cmp	r2, #1
 8003a96:	f000 83ad 	beq.w	80041f4 <HAL_PCD_IRQHandler+0xa48>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003a9a:	2b0e      	cmp	r3, #14
 8003a9c:	d913      	bls.n	8003ac6 <HAL_PCD_IRQHandler+0x31a>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003a9e:	f894 2238 	ldrb.w	r2, [r4, #568]	; 0x238
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003aa2:	f8d5 1ac0 	ldr.w	r1, [r5, #2752]	; 0xac0
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003aa6:	2a01      	cmp	r2, #1
 8003aa8:	f000 83b8 	beq.w	800421c <HAL_PCD_IRQHandler+0xa70>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003aac:	2b0f      	cmp	r3, #15
 8003aae:	d90a      	bls.n	8003ac6 <HAL_PCD_IRQHandler+0x31a>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003ab0:	f894 225c 	ldrb.w	r2, [r4, #604]	; 0x25c
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003ab4:	f8d5 1ae0 	ldr.w	r1, [r5, #2784]	; 0xae0
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003ab8:	2a01      	cmp	r2, #1
 8003aba:	f000 83c3 	beq.w	8004244 <HAL_PCD_IRQHandler+0xa98>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003abe:	2b10      	cmp	r3, #16
 8003ac0:	d901      	bls.n	8003ac6 <HAL_PCD_IRQHandler+0x31a>
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003ac2:	f8d5 3b00 	ldr.w	r3, [r5, #2816]	; 0xb00
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003ac6:	6820      	ldr	r0, [r4, #0]
 8003ac8:	6943      	ldr	r3, [r0, #20]
 8003aca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ace:	6143      	str	r3, [r0, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003ad0:	f003 fe82 	bl	80077d8 <USB_ReadInterrupts>
 8003ad4:	0287      	lsls	r7, r0, #10
 8003ad6:	d421      	bmi.n	8003b1c <HAL_PCD_IRQHandler+0x370>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003ad8:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003ada:	f003 fe7d 	bl	80077d8 <USB_ReadInterrupts>
 8003ade:	0040      	lsls	r0, r0, #1
 8003ae0:	f100 80c4 	bmi.w	8003c6c <HAL_PCD_IRQHandler+0x4c0>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003ae4:	6820      	ldr	r0, [r4, #0]
 8003ae6:	f003 fe77 	bl	80077d8 <USB_ReadInterrupts>
 8003aea:	0741      	lsls	r1, r0, #29
 8003aec:	f57f ae67 	bpl.w	80037be <HAL_PCD_IRQHandler+0x12>
      RegVal = hpcd->Instance->GOTGINT;
 8003af0:	6823      	ldr	r3, [r4, #0]
 8003af2:	685d      	ldr	r5, [r3, #4]
      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003af4:	076a      	lsls	r2, r5, #29
 8003af6:	f100 8297 	bmi.w	8004028 <HAL_PCD_IRQHandler+0x87c>
      hpcd->Instance->GOTGINT |= RegVal;
 8003afa:	685a      	ldr	r2, [r3, #4]
 8003afc:	432a      	orrs	r2, r5
 8003afe:	605a      	str	r2, [r3, #4]
 8003b00:	e65d      	b.n	80037be <HAL_PCD_IRQHandler+0x12>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003b02:	6820      	ldr	r0, [r4, #0]
 8003b04:	e7e4      	b.n	8003ad0 <HAL_PCD_IRQHandler+0x324>
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003b06:	9b02      	ldr	r3, [sp, #8]
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	07df      	lsls	r7, r3, #31
 8003b0c:	f100 8288 	bmi.w	8004020 <HAL_PCD_IRQHandler+0x874>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003b10:	6820      	ldr	r0, [r4, #0]
 8003b12:	6943      	ldr	r3, [r0, #20]
 8003b14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b18:	6143      	str	r3, [r0, #20]
 8003b1a:	e69e      	b.n	800385a <HAL_PCD_IRQHandler+0xae>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003b1c:	f8d4 c004 	ldr.w	ip, [r4, #4]
 8003b20:	f1bc 0f01 	cmp.w	ip, #1
 8003b24:	d926      	bls.n	8003b74 <HAL_PCD_IRQHandler+0x3c8>
 8003b26:	f505 6232 	add.w	r2, r5, #2848	; 0xb20
 8003b2a:	4623      	mov	r3, r4
 8003b2c:	2101      	movs	r1, #1
 8003b2e:	e004      	b.n	8003b3a <HAL_PCD_IRQHandler+0x38e>
 8003b30:	3101      	adds	r1, #1
 8003b32:	3220      	adds	r2, #32
 8003b34:	3324      	adds	r3, #36	; 0x24
 8003b36:	4561      	cmp	r1, ip
 8003b38:	d01c      	beq.n	8003b74 <HAL_PCD_IRQHandler+0x3c8>
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003b3a:	f893 02a4 	ldrb.w	r0, [r3, #676]	; 0x2a4
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003b3e:	6816      	ldr	r6, [r2, #0]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003b40:	2801      	cmp	r0, #1
 8003b42:	d1f5      	bne.n	8003b30 <HAL_PCD_IRQHandler+0x384>
 8003b44:	2e00      	cmp	r6, #0
 8003b46:	daf3      	bge.n	8003b30 <HAL_PCD_IRQHandler+0x384>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003b48:	f8d4 74fc 	ldr.w	r7, [r4, #1276]	; 0x4fc
 8003b4c:	f406 3680 	and.w	r6, r6, #65536	; 0x10000
 8003b50:	f007 0701 	and.w	r7, r7, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003b54:	42be      	cmp	r6, r7
 8003b56:	d1eb      	bne.n	8003b30 <HAL_PCD_IRQHandler+0x384>
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003b58:	f883 02a3 	strb.w	r0, [r3, #675]	; 0x2a3
          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003b5c:	69a8      	ldr	r0, [r5, #24]
 8003b5e:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 8003b62:	61a8      	str	r0, [r5, #24]
          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003b64:	6968      	ldr	r0, [r5, #20]
 8003b66:	0606      	lsls	r6, r0, #24
 8003b68:	d4e2      	bmi.n	8003b30 <HAL_PCD_IRQHandler+0x384>
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003b6a:	9a02      	ldr	r2, [sp, #8]
 8003b6c:	6853      	ldr	r3, [r2, #4]
 8003b6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b72:	6053      	str	r3, [r2, #4]
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003b74:	6820      	ldr	r0, [r4, #0]
 8003b76:	6943      	ldr	r3, [r0, #20]
 8003b78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b7c:	6143      	str	r3, [r0, #20]
 8003b7e:	e7ac      	b.n	8003ada <HAL_PCD_IRQHandler+0x32e>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003b80:	9a02      	ldr	r2, [sp, #8]
 8003b82:	6853      	ldr	r3, [r2, #4]
 8003b84:	f023 0301 	bic.w	r3, r3, #1
 8003b88:	6053      	str	r3, [r2, #4]
      if (hpcd->LPM_State == LPM_L1)
 8003b8a:	f894 34f4 	ldrb.w	r3, [r4, #1268]	; 0x4f4
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	f000 8138 	beq.w	8003e04 <HAL_PCD_IRQHandler+0x658>
        HAL_PCD_ResumeCallback(hpcd);
 8003b94:	4620      	mov	r0, r4
 8003b96:	f005 f815 	bl	8008bc4 <HAL_PCD_ResumeCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003b9a:	6820      	ldr	r0, [r4, #0]
 8003b9c:	6943      	ldr	r3, [r0, #20]
 8003b9e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003ba2:	6143      	str	r3, [r0, #20]
 8003ba4:	e653      	b.n	800384e <HAL_PCD_IRQHandler+0xa2>
      (void)USB_ActivateSetup(hpcd->Instance);
 8003ba6:	f003 fe49 	bl	800783c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003baa:	6820      	ldr	r0, [r4, #0]
 8003bac:	f003 fb0e 	bl	80071cc <USB_GetDevSpeed>
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003bb0:	6826      	ldr	r6, [r4, #0]
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003bb2:	6120      	str	r0, [r4, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003bb4:	f001 fa66 	bl	8005084 <HAL_RCC_GetHCLKFreq>
 8003bb8:	7c22      	ldrb	r2, [r4, #16]
 8003bba:	4601      	mov	r1, r0
 8003bbc:	4630      	mov	r0, r6
 8003bbe:	f003 f8f9 	bl	8006db4 <USB_SetTurnaroundTime>
      HAL_PCD_ResetCallback(hpcd);
 8003bc2:	4620      	mov	r0, r4
 8003bc4:	f004 ffd0 	bl	8008b68 <HAL_PCD_ResetCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003bc8:	6820      	ldr	r0, [r4, #0]
 8003bca:	6943      	ldr	r3, [r0, #20]
 8003bcc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003bd0:	6143      	str	r3, [r0, #20]
 8003bd2:	e669      	b.n	80038a8 <HAL_PCD_IRQHandler+0xfc>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003bd4:	9a02      	ldr	r2, [sp, #8]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003bd6:	2110      	movs	r1, #16
 8003bd8:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003bda:	6853      	ldr	r3, [r2, #4]
 8003bdc:	f023 0301 	bic.w	r3, r3, #1
 8003be0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003be2:	f003 fac9 	bl	8007178 <USB_FlushTxFifo>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003be6:	6860      	ldr	r0, [r4, #4]
 8003be8:	b1e0      	cbz	r0, 8003c24 <HAL_PCD_IRQHandler+0x478>
 8003bea:	f505 6310 	add.w	r3, r5, #2304	; 0x900
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003bee:	f64f 317f 	movw	r1, #64383	; 0xfb7f
 8003bf2:	6099      	str	r1, [r3, #8]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003bf4:	f10b 0b01 	add.w	fp, fp, #1
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003bf8:	681a      	ldr	r2, [r3, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003bfa:	3320      	adds	r3, #32
 8003bfc:	4583      	cmp	fp, r0
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003bfe:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8003c02:	f843 2c20 	str.w	r2, [r3, #-32]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003c06:	f8c3 11e8 	str.w	r1, [r3, #488]	; 0x1e8
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003c0a:	f8d3 21e0 	ldr.w	r2, [r3, #480]	; 0x1e0
 8003c0e:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8003c12:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003c16:	f8d3 21e0 	ldr.w	r2, [r3, #480]	; 0x1e0
 8003c1a:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8003c1e:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c22:	d1e6      	bne.n	8003bf2 <HAL_PCD_IRQHandler+0x446>
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003c24:	9902      	ldr	r1, [sp, #8]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003c26:	6b22      	ldr	r2, [r4, #48]	; 0x30
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003c28:	69cb      	ldr	r3, [r1, #28]
 8003c2a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003c2e:	61cb      	str	r3, [r1, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003c30:	2a00      	cmp	r2, #0
 8003c32:	f040 80d0 	bne.w	8003dd6 <HAL_PCD_IRQHandler+0x62a>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003c36:	694a      	ldr	r2, [r1, #20]
 8003c38:	f242 032b 	movw	r3, #8235	; 0x202b
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	614b      	str	r3, [r1, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003c40:	690b      	ldr	r3, [r1, #16]
 8003c42:	f043 030b 	orr.w	r3, r3, #11
 8003c46:	610b      	str	r3, [r1, #16]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003c48:	f8d5 3800 	ldr.w	r3, [r5, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003c4c:	f204 42c4 	addw	r2, r4, #1220	; 0x4c4
 8003c50:	7b21      	ldrb	r1, [r4, #12]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003c52:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003c56:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003c58:	f8c5 3800 	str.w	r3, [r5, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003c5c:	f003 fe04 	bl	8007868 <USB_EP0_OutStart>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003c60:	6820      	ldr	r0, [r4, #0]
 8003c62:	6943      	ldr	r3, [r0, #20]
 8003c64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c68:	6143      	str	r3, [r0, #20]
 8003c6a:	e616      	b.n	800389a <HAL_PCD_IRQHandler+0xee>
      HAL_PCD_ConnectCallback(hpcd);
 8003c6c:	4620      	mov	r0, r4
 8003c6e:	f004 ffb5 	bl	8008bdc <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003c72:	6820      	ldr	r0, [r4, #0]
 8003c74:	6943      	ldr	r3, [r0, #20]
 8003c76:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003c7a:	6143      	str	r3, [r0, #20]
 8003c7c:	e733      	b.n	8003ae6 <HAL_PCD_IRQHandler+0x33a>
      HAL_PCD_SOFCallback(hpcd);
 8003c7e:	4620      	mov	r0, r4
 8003c80:	f004 ff6e 	bl	8008b60 <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003c84:	6820      	ldr	r0, [r4, #0]
 8003c86:	6943      	ldr	r3, [r0, #20]
 8003c88:	f003 0308 	and.w	r3, r3, #8
 8003c8c:	6143      	str	r3, [r0, #20]
 8003c8e:	e611      	b.n	80038b4 <HAL_PCD_IRQHandler+0x108>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003c90:	6820      	ldr	r0, [r4, #0]
 8003c92:	f003 fdad 	bl	80077f0 <USB_ReadDevAllInEpInterrupt>
      while (ep_intr != 0U)
 8003c96:	4680      	mov	r8, r0
 8003c98:	2800      	cmp	r0, #0
 8003c9a:	f43f add1 	beq.w	8003840 <HAL_PCD_IRQHandler+0x94>
      epnum = 0U;
 8003c9e:	f04f 0a00 	mov.w	sl, #0
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003ca2:	6820      	ldr	r0, [r4, #0]
 8003ca4:	4627      	mov	r7, r4
 8003ca6:	f505 6910 	add.w	r9, r5, #2304	; 0x900
              ep->is_iso_incomplete = 0U;
 8003caa:	4656      	mov	r6, sl
 8003cac:	9503      	str	r5, [sp, #12]
 8003cae:	f8cd b010 	str.w	fp, [sp, #16]
 8003cb2:	e009      	b.n	8003cc8 <HAL_PCD_IRQHandler+0x51c>
      while (ep_intr != 0U)
 8003cb4:	ea5f 0858 	movs.w	r8, r8, lsr #1
        epnum++;
 8003cb8:	f106 0601 	add.w	r6, r6, #1
      while (ep_intr != 0U)
 8003cbc:	f107 0724 	add.w	r7, r7, #36	; 0x24
 8003cc0:	f109 0920 	add.w	r9, r9, #32
 8003cc4:	f000 80ed 	beq.w	8003ea2 <HAL_PCD_IRQHandler+0x6f6>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003cc8:	f018 0f01 	tst.w	r8, #1
 8003ccc:	d0f2      	beq.n	8003cb4 <HAL_PCD_IRQHandler+0x508>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003cce:	fa5f fa86 	uxtb.w	sl, r6
 8003cd2:	4651      	mov	r1, sl
 8003cd4:	f003 fd9e 	bl	8007814 <USB_ReadDevInEPInterrupt>
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003cd8:	07c1      	lsls	r1, r0, #31
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003cda:	4605      	mov	r5, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003cdc:	d514      	bpl.n	8003d08 <HAL_PCD_IRQHandler+0x55c>
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003cde:	9902      	ldr	r1, [sp, #8]
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	f006 020f 	and.w	r2, r6, #15
 8003ce6:	fa03 f202 	lsl.w	r2, r3, r2
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003cea:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8003cec:	ea23 0302 	bic.w	r3, r3, r2
 8003cf0:	634b      	str	r3, [r1, #52]	; 0x34
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003cf2:	2301      	movs	r3, #1
            if (hpcd->Init.dma_enable == 1U)
 8003cf4:	68e1      	ldr	r1, [r4, #12]
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003cf6:	f8c9 3008 	str.w	r3, [r9, #8]
            if (hpcd->Init.dma_enable == 1U)
 8003cfa:	4299      	cmp	r1, r3
 8003cfc:	f000 8199 	beq.w	8004032 <HAL_PCD_IRQHandler+0x886>
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003d00:	4651      	mov	r1, sl
 8003d02:	4620      	mov	r0, r4
 8003d04:	f004 ff22 	bl	8008b4c <HAL_PCD_DataInStageCallback>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003d08:	072a      	lsls	r2, r5, #28
 8003d0a:	d502      	bpl.n	8003d12 <HAL_PCD_IRQHandler+0x566>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003d0c:	2308      	movs	r3, #8
 8003d0e:	f8c9 3008 	str.w	r3, [r9, #8]
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003d12:	06eb      	lsls	r3, r5, #27
 8003d14:	d502      	bpl.n	8003d1c <HAL_PCD_IRQHandler+0x570>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003d16:	2310      	movs	r3, #16
 8003d18:	f8c9 3008 	str.w	r3, [r9, #8]
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003d1c:	0668      	lsls	r0, r5, #25
 8003d1e:	d502      	bpl.n	8003d26 <HAL_PCD_IRQHandler+0x57a>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003d20:	2340      	movs	r3, #64	; 0x40
 8003d22:	f8c9 3008 	str.w	r3, [r9, #8]
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003d26:	07a9      	lsls	r1, r5, #30
 8003d28:	f100 8150 	bmi.w	8003fcc <HAL_PCD_IRQHandler+0x820>
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003d2c:	062a      	lsls	r2, r5, #24
 8003d2e:	f100 80f9 	bmi.w	8003f24 <HAL_PCD_IRQHandler+0x778>
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003d32:	6820      	ldr	r0, [r4, #0]
 8003d34:	e7be      	b.n	8003cb4 <HAL_PCD_IRQHandler+0x508>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003d36:	6820      	ldr	r0, [r4, #0]
 8003d38:	f003 fd52 	bl	80077e0 <USB_ReadDevAllOutEpInterrupt>
      while (ep_intr != 0U)
 8003d3c:	4606      	mov	r6, r0
 8003d3e:	2800      	cmp	r0, #0
 8003d40:	f43f ad78 	beq.w	8003834 <HAL_PCD_IRQHandler+0x88>
 8003d44:	f505 6730 	add.w	r7, r5, #2816	; 0xb00
 8003d48:	46a2      	mov	sl, r4
      epnum = 0U;
 8003d4a:	f04f 0900 	mov.w	r9, #0
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003d4e:	f8cd b00c 	str.w	fp, [sp, #12]
 8003d52:	e008      	b.n	8003d66 <HAL_PCD_IRQHandler+0x5ba>
      while (ep_intr != 0U)
 8003d54:	0876      	lsrs	r6, r6, #1
        epnum++;
 8003d56:	f109 0901 	add.w	r9, r9, #1
      while (ep_intr != 0U)
 8003d5a:	f107 0720 	add.w	r7, r7, #32
 8003d5e:	f10a 0a24 	add.w	sl, sl, #36	; 0x24
 8003d62:	f000 809b 	beq.w	8003e9c <HAL_PCD_IRQHandler+0x6f0>
        if ((ep_intr & 0x1U) != 0U)
 8003d66:	07f0      	lsls	r0, r6, #31
 8003d68:	d5f4      	bpl.n	8003d54 <HAL_PCD_IRQHandler+0x5a8>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003d6a:	fa5f fb89 	uxtb.w	fp, r9
 8003d6e:	6820      	ldr	r0, [r4, #0]
 8003d70:	4659      	mov	r1, fp
 8003d72:	f003 fd45 	bl	8007800 <USB_ReadDevOutEPInterrupt>
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003d76:	f010 0f01 	tst.w	r0, #1
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003d7a:	4680      	mov	r8, r0
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003d7c:	f040 80b3 	bne.w	8003ee6 <HAL_PCD_IRQHandler+0x73a>
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003d80:	f018 0f08 	tst.w	r8, #8
 8003d84:	f040 8090 	bne.w	8003ea8 <HAL_PCD_IRQHandler+0x6fc>
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003d88:	f018 0f10 	tst.w	r8, #16
 8003d8c:	d001      	beq.n	8003d92 <HAL_PCD_IRQHandler+0x5e6>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003d8e:	2210      	movs	r2, #16
 8003d90:	60ba      	str	r2, [r7, #8]
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003d92:	f018 0f02 	tst.w	r8, #2
 8003d96:	d00e      	beq.n	8003db6 <HAL_PCD_IRQHandler+0x60a>
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003d98:	696a      	ldr	r2, [r5, #20]
 8003d9a:	0610      	lsls	r0, r2, #24
 8003d9c:	d504      	bpl.n	8003da8 <HAL_PCD_IRQHandler+0x5fc>
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003d9e:	9b02      	ldr	r3, [sp, #8]
 8003da0:	685a      	ldr	r2, [r3, #4]
 8003da2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003da6:	605a      	str	r2, [r3, #4]
            if (ep->is_iso_incomplete == 1U)
 8003da8:	f89a 227f 	ldrb.w	r2, [sl, #639]	; 0x27f
 8003dac:	2a01      	cmp	r2, #1
 8003dae:	f000 8182 	beq.w	80040b6 <HAL_PCD_IRQHandler+0x90a>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003db2:	2302      	movs	r3, #2
 8003db4:	60bb      	str	r3, [r7, #8]
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003db6:	f018 0f20 	tst.w	r8, #32
 8003dba:	d001      	beq.n	8003dc0 <HAL_PCD_IRQHandler+0x614>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003dbc:	2320      	movs	r3, #32
 8003dbe:	60bb      	str	r3, [r7, #8]
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003dc0:	f418 5f00 	tst.w	r8, #8192	; 0x2000
 8003dc4:	d0c6      	beq.n	8003d54 <HAL_PCD_IRQHandler+0x5a8>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003dc6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003dca:	60bb      	str	r3, [r7, #8]
 8003dcc:	e7c2      	b.n	8003d54 <HAL_PCD_IRQHandler+0x5a8>
        HAL_PCD_SuspendCallback(hpcd);
 8003dce:	4620      	mov	r0, r4
 8003dd0:	f004 fee0 	bl	8008b94 <HAL_PCD_SuspendCallback>
 8003dd4:	e55a      	b.n	800388c <HAL_PCD_IRQHandler+0xe0>
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003dd6:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
 8003dda:	f043 030b 	orr.w	r3, r3, #11
 8003dde:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003de2:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 8003de4:	f043 030b 	orr.w	r3, r3, #11
 8003de8:	644b      	str	r3, [r1, #68]	; 0x44
 8003dea:	e72d      	b.n	8003c48 <HAL_PCD_IRQHandler+0x49c>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003dec:	2900      	cmp	r1, #0
 8003dee:	f6bf ade8 	bge.w	80039c2 <HAL_PCD_IRQHandler+0x216>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003df2:	4621      	mov	r1, r4
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003df4:	f884 2063 	strb.w	r2, [r4, #99]	; 0x63
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003df8:	f851 0b60 	ldr.w	r0, [r1], #96
 8003dfc:	f003 fbdc 	bl	80075b8 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003e00:	6863      	ldr	r3, [r4, #4]
 8003e02:	e5de      	b.n	80039c2 <HAL_PCD_IRQHandler+0x216>
        hpcd->LPM_State = LPM_L0;
 8003e04:	2100      	movs	r1, #0
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003e06:	4620      	mov	r0, r4
        hpcd->LPM_State = LPM_L0;
 8003e08:	f884 14f4 	strb.w	r1, [r4, #1268]	; 0x4f4
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003e0c:	f000 fc10 	bl	8004630 <HAL_PCDEx_LPM_Callback>
 8003e10:	e6c3      	b.n	8003b9a <HAL_PCD_IRQHandler+0x3ee>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003e12:	2900      	cmp	r1, #0
 8003e14:	f6bf adde 	bge.w	80039d4 <HAL_PCD_IRQHandler+0x228>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e18:	4621      	mov	r1, r4
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003e1a:	f884 2087 	strb.w	r2, [r4, #135]	; 0x87
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003e1e:	f851 0b84 	ldr.w	r0, [r1], #132
 8003e22:	f003 fbc9 	bl	80075b8 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003e26:	6863      	ldr	r3, [r4, #4]
 8003e28:	e5d4      	b.n	80039d4 <HAL_PCD_IRQHandler+0x228>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003e2a:	2900      	cmp	r1, #0
 8003e2c:	f6bf addb 	bge.w	80039e6 <HAL_PCD_IRQHandler+0x23a>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e30:	4621      	mov	r1, r4
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003e32:	f884 20ab 	strb.w	r2, [r4, #171]	; 0xab
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003e36:	f851 0ba8 	ldr.w	r0, [r1], #168
 8003e3a:	f003 fbbd 	bl	80075b8 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003e3e:	6863      	ldr	r3, [r4, #4]
 8003e40:	e5d1      	b.n	80039e6 <HAL_PCD_IRQHandler+0x23a>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003e42:	2900      	cmp	r1, #0
 8003e44:	f6bf add8 	bge.w	80039f8 <HAL_PCD_IRQHandler+0x24c>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e48:	4621      	mov	r1, r4
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003e4a:	f884 20cf 	strb.w	r2, [r4, #207]	; 0xcf
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003e4e:	f851 0bcc 	ldr.w	r0, [r1], #204
 8003e52:	f003 fbb1 	bl	80075b8 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003e56:	6863      	ldr	r3, [r4, #4]
 8003e58:	e5ce      	b.n	80039f8 <HAL_PCD_IRQHandler+0x24c>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003e5a:	f504 713a 	add.w	r1, r4, #744	; 0x2e8
 8003e5e:	6820      	ldr	r0, [r4, #0]
 8003e60:	f003 fbaa 	bl	80075b8 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003e64:	6863      	ldr	r3, [r4, #4]
 8003e66:	e543      	b.n	80038f0 <HAL_PCD_IRQHandler+0x144>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003e68:	eb07 07c7 	add.w	r7, r7, r7, lsl #3
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003e6c:	2208      	movs	r2, #8
 8003e6e:	f204 41c4 	addw	r1, r4, #1220	; 0x4c4
 8003e72:	4628      	mov	r0, r5
 8003e74:	f003 fbfa 	bl	800766c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003e78:	f3c6 130a 	ubfx	r3, r6, #4, #11
 8003e7c:	eb04 0287 	add.w	r2, r4, r7, lsl #2
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003e80:	6820      	ldr	r0, [r4, #0]
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003e82:	f8d2 1290 	ldr.w	r1, [r2, #656]	; 0x290
 8003e86:	440b      	add	r3, r1
 8003e88:	f8c2 3290 	str.w	r3, [r2, #656]	; 0x290
 8003e8c:	e4c9      	b.n	8003822 <HAL_PCD_IRQHandler+0x76>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003e8e:	f504 7143 	add.w	r1, r4, #780	; 0x30c
 8003e92:	6820      	ldr	r0, [r4, #0]
 8003e94:	f003 fb90 	bl	80075b8 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003e98:	6863      	ldr	r3, [r4, #4]
 8003e9a:	e530      	b.n	80038fe <HAL_PCD_IRQHandler+0x152>
 8003e9c:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8003ea0:	e4c8      	b.n	8003834 <HAL_PCD_IRQHandler+0x88>
 8003ea2:	e9dd 5b03 	ldrd	r5, fp, [sp, #12]
 8003ea6:	e4cc      	b.n	8003842 <HAL_PCD_IRQHandler+0x96>
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003ea8:	6821      	ldr	r1, [r4, #0]
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003eaa:	2208      	movs	r2, #8
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003eac:	4bbb      	ldr	r3, [pc, #748]	; (800419c <HAL_PCD_IRQHandler+0x9f0>)
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003eae:	60ba      	str	r2, [r7, #8]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003eb0:	f501 6230 	add.w	r2, r1, #2816	; 0xb00
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003eb4:	6c09      	ldr	r1, [r1, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003eb6:	eb02 1249 	add.w	r2, r2, r9, lsl #5
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003eba:	4299      	cmp	r1, r3
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003ebc:	6890      	ldr	r0, [r2, #8]
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ebe:	f240 80c9 	bls.w	8004054 <HAL_PCD_IRQHandler+0x8a8>
 8003ec2:	0403      	lsls	r3, r0, #16
 8003ec4:	d502      	bpl.n	8003ecc <HAL_PCD_IRQHandler+0x720>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003ec6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003eca:	6091      	str	r1, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003ecc:	4620      	mov	r0, r4
 8003ece:	f004 fe2d 	bl	8008b2c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003ed2:	68e1      	ldr	r1, [r4, #12]
 8003ed4:	2901      	cmp	r1, #1
 8003ed6:	f47f af57 	bne.w	8003d88 <HAL_PCD_IRQHandler+0x5dc>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003eda:	f204 42c4 	addw	r2, r4, #1220	; 0x4c4
 8003ede:	6820      	ldr	r0, [r4, #0]
 8003ee0:	f003 fcc2 	bl	8007868 <USB_EP0_OutStart>
 8003ee4:	e750      	b.n	8003d88 <HAL_PCD_IRQHandler+0x5dc>
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003ee6:	6820      	ldr	r0, [r4, #0]
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003ee8:	2201      	movs	r2, #1
  if (hpcd->Init.dma_enable == 1U)
 8003eea:	68e1      	ldr	r1, [r4, #12]
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003eec:	60ba      	str	r2, [r7, #8]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003eee:	f500 6230 	add.w	r2, r0, #2816	; 0xb00
  if (hpcd->Init.dma_enable == 1U)
 8003ef2:	2901      	cmp	r1, #1
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003ef4:	f8d0 c040 	ldr.w	ip, [r0, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003ef8:	eb02 1249 	add.w	r2, r2, r9, lsl #5
 8003efc:	6893      	ldr	r3, [r2, #8]
  if (hpcd->Init.dma_enable == 1U)
 8003efe:	f000 80ad 	beq.w	800405c <HAL_PCD_IRQHandler+0x8b0>
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003f02:	49a7      	ldr	r1, [pc, #668]	; (80041a0 <HAL_PCD_IRQHandler+0x9f4>)
 8003f04:	458c      	cmp	ip, r1
 8003f06:	f000 810a 	beq.w	800411e <HAL_PCD_IRQHandler+0x972>
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003f0a:	f1b9 0f00 	cmp.w	r9, #0
 8003f0e:	d104      	bne.n	8003f1a <HAL_PCD_IRQHandler+0x76e>
 8003f10:	f8d4 228c 	ldr.w	r2, [r4, #652]	; 0x28c
 8003f14:	2a00      	cmp	r2, #0
 8003f16:	f000 81d8 	beq.w	80042ca <HAL_PCD_IRQHandler+0xb1e>
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003f1a:	4659      	mov	r1, fp
 8003f1c:	4620      	mov	r0, r4
 8003f1e:	f004 fe0b 	bl	8008b38 <HAL_PCD_DataOutStageCallback>
 8003f22:	e72d      	b.n	8003d80 <HAL_PCD_IRQHandler+0x5d4>
  if (ep->xfer_count > ep->xfer_len)
 8003f24:	e9d7 5313 	ldrd	r5, r3, [r7, #76]	; 0x4c
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003f28:	f8d4 b000 	ldr.w	fp, [r4]
  if (ep->xfer_count > ep->xfer_len)
 8003f2c:	42ab      	cmp	r3, r5
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003f2e:	4658      	mov	r0, fp
  if (ep->xfer_count > ep->xfer_len)
 8003f30:	f63f aec0 	bhi.w	8003cb4 <HAL_PCD_IRQHandler+0x508>
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003f34:	f50b 6210 	add.w	r2, fp, #2304	; 0x900
  len32b = (len + 3U) / 4U;
 8003f38:	6c79      	ldr	r1, [r7, #68]	; 0x44
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f3a:	f8cd b01c 	str.w	fp, [sp, #28]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003f3e:	eb02 1246 	add.w	r2, r2, r6, lsl #5
 8003f42:	9205      	str	r2, [sp, #20]
  len = ep->xfer_len - ep->xfer_count;
 8003f44:	1aea      	subs	r2, r5, r3
  len32b = (len + 3U) / 4U;
 8003f46:	428a      	cmp	r2, r1
 8003f48:	bf28      	it	cs
 8003f4a:	460a      	movcs	r2, r1
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003f4c:	9905      	ldr	r1, [sp, #20]
 8003f4e:	6989      	ldr	r1, [r1, #24]
  len32b = (len + 3U) / 4U;
 8003f50:	3203      	adds	r2, #3
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003f52:	b289      	uxth	r1, r1
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003f54:	ebb1 0f92 	cmp.w	r1, r2, lsr #2
 8003f58:	f0c0 8096 	bcc.w	8004088 <HAL_PCD_IRQHandler+0x8dc>
 8003f5c:	4652      	mov	r2, sl
 8003f5e:	9606      	str	r6, [sp, #24]
 8003f60:	46ca      	mov	sl, r9
 8003f62:	4626      	mov	r6, r4
 8003f64:	46c1      	mov	r9, r8
 8003f66:	9c05      	ldr	r4, [sp, #20]
 8003f68:	4690      	mov	r8, r2
 8003f6a:	e019      	b.n	8003fa0 <HAL_PCD_IRQHandler+0x7f4>
    len = ep->xfer_len - ep->xfer_count;
 8003f6c:	1aed      	subs	r5, r5, r3
 8003f6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003f70:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003f72:	4642      	mov	r2, r8
 8003f74:	429d      	cmp	r5, r3
 8003f76:	4658      	mov	r0, fp
 8003f78:	bf28      	it	cs
 8003f7a:	461d      	movcs	r5, r3
 8003f7c:	7b33      	ldrb	r3, [r6, #12]
 8003f7e:	9300      	str	r3, [sp, #0]
 8003f80:	b2ab      	uxth	r3, r5
 8003f82:	f003 fb5d 	bl	8007640 <USB_WritePacket>
    ep->xfer_buff  += len;
 8003f86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003f88:	69a1      	ldr	r1, [r4, #24]
    ep->xfer_buff  += len;
 8003f8a:	442b      	add	r3, r5
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003f8c:	b289      	uxth	r1, r1
    ep->xfer_buff  += len;
 8003f8e:	64bb      	str	r3, [r7, #72]	; 0x48
    ep->xfer_count += len;
 8003f90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f92:	442b      	add	r3, r5
    len32b = (len + 3U) / 4U;
 8003f94:	3503      	adds	r5, #3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003f96:	ebb1 0f95 	cmp.w	r1, r5, lsr #2
    ep->xfer_count += len;
 8003f9a:	653b      	str	r3, [r7, #80]	; 0x50
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003f9c:	d36c      	bcc.n	8004078 <HAL_PCD_IRQHandler+0x8cc>
  if (ep->xfer_len <= ep->xfer_count)
 8003f9e:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003fa0:	42ab      	cmp	r3, r5
 8003fa2:	d3e3      	bcc.n	8003f6c <HAL_PCD_IRQHandler+0x7c0>
 8003fa4:	4634      	mov	r4, r6
 8003fa6:	46c8      	mov	r8, r9
 8003fa8:	9e06      	ldr	r6, [sp, #24]
 8003faa:	46d1      	mov	r9, sl
 8003fac:	f8d4 b000 	ldr.w	fp, [r4]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003fb0:	9b07      	ldr	r3, [sp, #28]
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003fb2:	f006 020f 	and.w	r2, r6, #15
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003fb6:	4658      	mov	r0, fp
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003fb8:	f503 6100 	add.w	r1, r3, #2048	; 0x800
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	fa03 f202 	lsl.w	r2, r3, r2
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003fc2:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8003fc4:	ea23 0302 	bic.w	r3, r3, r2
 8003fc8:	634b      	str	r3, [r1, #52]	; 0x34
 8003fca:	e673      	b.n	8003cb4 <HAL_PCD_IRQHandler+0x508>
            (void)USB_FlushTxFifo(USBx, epnum);
 8003fcc:	4631      	mov	r1, r6
 8003fce:	9803      	ldr	r0, [sp, #12]
 8003fd0:	f003 f8d2 	bl	8007178 <USB_FlushTxFifo>
            if (ep->is_iso_incomplete == 1U)
 8003fd4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	f000 80a8 	beq.w	800412e <HAL_PCD_IRQHandler+0x982>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003fde:	2302      	movs	r3, #2
 8003fe0:	f8c9 3008 	str.w	r3, [r9, #8]
 8003fe4:	e6a2      	b.n	8003d2c <HAL_PCD_IRQHandler+0x580>
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003fe6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003fea:	421e      	tst	r6, r3
 8003fec:	f43f ac19 	beq.w	8003822 <HAL_PCD_IRQHandler+0x76>
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003ff0:	eb07 07c7 	add.w	r7, r7, r7, lsl #3
 8003ff4:	f3c6 120a 	ubfx	r2, r6, #4, #11
 8003ff8:	4628      	mov	r0, r5
 8003ffa:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 8003ffe:	4616      	mov	r6, r2
 8004000:	f8d7 1288 	ldr.w	r1, [r7, #648]	; 0x288
 8004004:	f003 fb32 	bl	800766c <USB_ReadPacket>
          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004008:	f8d7 3288 	ldr.w	r3, [r7, #648]	; 0x288
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800400c:	6820      	ldr	r0, [r4, #0]
          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800400e:	4433      	add	r3, r6
 8004010:	f8c7 3288 	str.w	r3, [r7, #648]	; 0x288
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004014:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8004018:	4433      	add	r3, r6
 800401a:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
 800401e:	e400      	b.n	8003822 <HAL_PCD_IRQHandler+0x76>
        HAL_PCD_SuspendCallback(hpcd);
 8004020:	4620      	mov	r0, r4
 8004022:	f004 fdb7 	bl	8008b94 <HAL_PCD_SuspendCallback>
 8004026:	e573      	b.n	8003b10 <HAL_PCD_IRQHandler+0x364>
        HAL_PCD_DisconnectCallback(hpcd);
 8004028:	4620      	mov	r0, r4
 800402a:	f004 fddb 	bl	8008be4 <HAL_PCD_DisconnectCallback>
      hpcd->Instance->GOTGINT |= RegVal;
 800402e:	6823      	ldr	r3, [r4, #0]
 8004030:	e563      	b.n	8003afa <HAL_PCD_IRQHandler+0x34e>
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004032:	e9d7 2311 	ldrd	r2, r3, [r7, #68]	; 0x44
 8004036:	4413      	add	r3, r2
 8004038:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800403a:	2e00      	cmp	r6, #0
 800403c:	f47f ae60 	bne.w	8003d00 <HAL_PCD_IRQHandler+0x554>
 8004040:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8004042:	2b00      	cmp	r3, #0
 8004044:	f47f ae5c 	bne.w	8003d00 <HAL_PCD_IRQHandler+0x554>
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004048:	f204 42c4 	addw	r2, r4, #1220	; 0x4c4
 800404c:	6820      	ldr	r0, [r4, #0]
 800404e:	f003 fc0b 	bl	8007868 <USB_EP0_OutStart>
 8004052:	e655      	b.n	8003d00 <HAL_PCD_IRQHandler+0x554>
  HAL_PCD_SetupStageCallback(hpcd);
 8004054:	4620      	mov	r0, r4
 8004056:	f004 fd69 	bl	8008b2c <HAL_PCD_SetupStageCallback>
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800405a:	e695      	b.n	8003d88 <HAL_PCD_IRQHandler+0x5dc>
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800405c:	0719      	lsls	r1, r3, #28
 800405e:	f140 8097 	bpl.w	8004190 <HAL_PCD_IRQHandler+0x9e4>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004062:	494e      	ldr	r1, [pc, #312]	; (800419c <HAL_PCD_IRQHandler+0x9f0>)
 8004064:	458c      	cmp	ip, r1
 8004066:	f67f ae8b 	bls.w	8003d80 <HAL_PCD_IRQHandler+0x5d4>
 800406a:	0418      	lsls	r0, r3, #16
 800406c:	f57f ae88 	bpl.w	8003d80 <HAL_PCD_IRQHandler+0x5d4>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004070:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004074:	6091      	str	r1, [r2, #8]
 8004076:	e683      	b.n	8003d80 <HAL_PCD_IRQHandler+0x5d4>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004078:	4634      	mov	r4, r6
 800407a:	46c8      	mov	r8, r9
 800407c:	9e06      	ldr	r6, [sp, #24]
 800407e:	46d1      	mov	r9, sl
 8004080:	f8d4 b000 	ldr.w	fp, [r4]
  if (ep->xfer_len <= ep->xfer_count)
 8004084:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004086:	4658      	mov	r0, fp
  if (ep->xfer_len <= ep->xfer_count)
 8004088:	42ab      	cmp	r3, r5
 800408a:	f4ff ae13 	bcc.w	8003cb4 <HAL_PCD_IRQHandler+0x508>
 800408e:	e78f      	b.n	8003fb0 <HAL_PCD_IRQHandler+0x804>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004090:	2900      	cmp	r1, #0
 8004092:	f6bf acba 	bge.w	8003a0a <HAL_PCD_IRQHandler+0x25e>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004096:	4621      	mov	r1, r4
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004098:	f884 20f3 	strb.w	r2, [r4, #243]	; 0xf3
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800409c:	f851 0bf0 	ldr.w	r0, [r1], #240
 80040a0:	f003 fa8a 	bl	80075b8 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80040a4:	6863      	ldr	r3, [r4, #4]
 80040a6:	e4b0      	b.n	8003a0a <HAL_PCD_IRQHandler+0x25e>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80040a8:	f504 7128 	add.w	r1, r4, #672	; 0x2a0
 80040ac:	6820      	ldr	r0, [r4, #0]
 80040ae:	f003 fa83 	bl	80075b8 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80040b2:	6863      	ldr	r3, [r4, #4]
 80040b4:	e40e      	b.n	80038d4 <HAL_PCD_IRQHandler+0x128>
              ep->is_iso_incomplete = 0U;
 80040b6:	2300      	movs	r3, #0
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80040b8:	4659      	mov	r1, fp
 80040ba:	4620      	mov	r0, r4
              ep->is_iso_incomplete = 0U;
 80040bc:	f88a 327f 	strb.w	r3, [sl, #639]	; 0x27f
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80040c0:	f004 fd84 	bl	8008bcc <HAL_PCD_ISOOUTIncompleteCallback>
 80040c4:	e675      	b.n	8003db2 <HAL_PCD_IRQHandler+0x606>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80040c6:	2900      	cmp	r1, #0
 80040c8:	f6bf aca8 	bge.w	8003a1c <HAL_PCD_IRQHandler+0x270>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80040cc:	f504 718a 	add.w	r1, r4, #276	; 0x114
 80040d0:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80040d2:	f884 2117 	strb.w	r2, [r4, #279]	; 0x117
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80040d6:	f003 fa6f 	bl	80075b8 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80040da:	6863      	ldr	r3, [r4, #4]
 80040dc:	e49e      	b.n	8003a1c <HAL_PCD_IRQHandler+0x270>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80040de:	f504 7131 	add.w	r1, r4, #708	; 0x2c4
 80040e2:	6820      	ldr	r0, [r4, #0]
 80040e4:	f003 fa68 	bl	80075b8 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80040e8:	6863      	ldr	r3, [r4, #4]
 80040ea:	f7ff bbfa 	b.w	80038e2 <HAL_PCD_IRQHandler+0x136>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80040ee:	2900      	cmp	r1, #0
 80040f0:	f6bf ac9d 	bge.w	8003a2e <HAL_PCD_IRQHandler+0x282>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80040f4:	f504 719c 	add.w	r1, r4, #312	; 0x138
 80040f8:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80040fa:	f884 213b 	strb.w	r2, [r4, #315]	; 0x13b
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80040fe:	f003 fa5b 	bl	80075b8 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004102:	6863      	ldr	r3, [r4, #4]
 8004104:	e493      	b.n	8003a2e <HAL_PCD_IRQHandler+0x282>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004106:	2900      	cmp	r1, #0
 8004108:	f6bf ac9a 	bge.w	8003a40 <HAL_PCD_IRQHandler+0x294>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800410c:	f504 71ae 	add.w	r1, r4, #348	; 0x15c
 8004110:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004112:	f884 215f 	strb.w	r2, [r4, #351]	; 0x15f
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004116:	f003 fa4f 	bl	80075b8 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800411a:	6863      	ldr	r3, [r4, #4]
 800411c:	e490      	b.n	8003a40 <HAL_PCD_IRQHandler+0x294>
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800411e:	0418      	lsls	r0, r3, #16
 8004120:	d4a6      	bmi.n	8004070 <HAL_PCD_IRQHandler+0x8c4>
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004122:	0699      	lsls	r1, r3, #26
 8004124:	f57f aef9 	bpl.w	8003f1a <HAL_PCD_IRQHandler+0x76e>
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004128:	2120      	movs	r1, #32
 800412a:	6091      	str	r1, [r2, #8]
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800412c:	e6f5      	b.n	8003f1a <HAL_PCD_IRQHandler+0x76e>
              ep->is_iso_incomplete = 0U;
 800412e:	f04f 0300 	mov.w	r3, #0
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004132:	4651      	mov	r1, sl
 8004134:	4620      	mov	r0, r4
              ep->is_iso_incomplete = 0U;
 8004136:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800413a:	f004 fd4b 	bl	8008bd4 <HAL_PCD_ISOINIncompleteCallback>
 800413e:	e74e      	b.n	8003fde <HAL_PCD_IRQHandler+0x832>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004140:	2900      	cmp	r1, #0
 8004142:	f6bf ac86 	bge.w	8003a52 <HAL_PCD_IRQHandler+0x2a6>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004146:	f504 71c0 	add.w	r1, r4, #384	; 0x180
 800414a:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800414c:	f884 2183 	strb.w	r2, [r4, #387]	; 0x183
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004150:	f003 fa32 	bl	80075b8 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004154:	6863      	ldr	r3, [r4, #4]
 8004156:	e47c      	b.n	8003a52 <HAL_PCD_IRQHandler+0x2a6>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004158:	f504 714c 	add.w	r1, r4, #816	; 0x330
 800415c:	6820      	ldr	r0, [r4, #0]
 800415e:	f003 fa2b 	bl	80075b8 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004162:	6863      	ldr	r3, [r4, #4]
 8004164:	f7ff bbd2 	b.w	800390c <HAL_PCD_IRQHandler+0x160>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004168:	2900      	cmp	r1, #0
 800416a:	f6bf ac7b 	bge.w	8003a64 <HAL_PCD_IRQHandler+0x2b8>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800416e:	f504 71d2 	add.w	r1, r4, #420	; 0x1a4
 8004172:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004174:	f884 21a7 	strb.w	r2, [r4, #423]	; 0x1a7
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004178:	f003 fa1e 	bl	80075b8 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800417c:	6863      	ldr	r3, [r4, #4]
 800417e:	e471      	b.n	8003a64 <HAL_PCD_IRQHandler+0x2b8>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004180:	f504 7155 	add.w	r1, r4, #852	; 0x354
 8004184:	6820      	ldr	r0, [r4, #0]
 8004186:	f003 fa17 	bl	80075b8 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800418a:	6863      	ldr	r3, [r4, #4]
 800418c:	f7ff bbc5 	b.w	800391a <HAL_PCD_IRQHandler+0x16e>
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004190:	0699      	lsls	r1, r3, #26
 8004192:	d573      	bpl.n	800427c <HAL_PCD_IRQHandler+0xad0>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004194:	2120      	movs	r1, #32
 8004196:	6091      	str	r1, [r2, #8]
 8004198:	e5f2      	b.n	8003d80 <HAL_PCD_IRQHandler+0x5d4>
 800419a:	bf00      	nop
 800419c:	4f54300a 	.word	0x4f54300a
 80041a0:	4f54310a 	.word	0x4f54310a
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80041a4:	2900      	cmp	r1, #0
 80041a6:	f6bf ac66 	bge.w	8003a76 <HAL_PCD_IRQHandler+0x2ca>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80041aa:	f504 71e4 	add.w	r1, r4, #456	; 0x1c8
 80041ae:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80041b0:	f884 21cb 	strb.w	r2, [r4, #459]	; 0x1cb
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80041b4:	f003 fa00 	bl	80075b8 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80041b8:	6863      	ldr	r3, [r4, #4]
 80041ba:	e45c      	b.n	8003a76 <HAL_PCD_IRQHandler+0x2ca>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80041bc:	f504 715e 	add.w	r1, r4, #888	; 0x378
 80041c0:	6820      	ldr	r0, [r4, #0]
 80041c2:	f003 f9f9 	bl	80075b8 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80041c6:	6863      	ldr	r3, [r4, #4]
 80041c8:	f7ff bbae 	b.w	8003928 <HAL_PCD_IRQHandler+0x17c>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80041cc:	2900      	cmp	r1, #0
 80041ce:	f6bf ac5b 	bge.w	8003a88 <HAL_PCD_IRQHandler+0x2dc>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80041d2:	f504 71f6 	add.w	r1, r4, #492	; 0x1ec
 80041d6:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80041d8:	f884 21ef 	strb.w	r2, [r4, #495]	; 0x1ef
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80041dc:	f003 f9ec 	bl	80075b8 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80041e0:	6863      	ldr	r3, [r4, #4]
 80041e2:	e451      	b.n	8003a88 <HAL_PCD_IRQHandler+0x2dc>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80041e4:	f504 7167 	add.w	r1, r4, #924	; 0x39c
 80041e8:	6820      	ldr	r0, [r4, #0]
 80041ea:	f003 f9e5 	bl	80075b8 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80041ee:	6863      	ldr	r3, [r4, #4]
 80041f0:	f7ff bba1 	b.w	8003936 <HAL_PCD_IRQHandler+0x18a>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80041f4:	2900      	cmp	r1, #0
 80041f6:	f6bf ac50 	bge.w	8003a9a <HAL_PCD_IRQHandler+0x2ee>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80041fa:	f504 7104 	add.w	r1, r4, #528	; 0x210
 80041fe:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004200:	f884 2213 	strb.w	r2, [r4, #531]	; 0x213
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004204:	f003 f9d8 	bl	80075b8 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004208:	6863      	ldr	r3, [r4, #4]
 800420a:	e446      	b.n	8003a9a <HAL_PCD_IRQHandler+0x2ee>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800420c:	f504 7170 	add.w	r1, r4, #960	; 0x3c0
 8004210:	6820      	ldr	r0, [r4, #0]
 8004212:	f003 f9d1 	bl	80075b8 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004216:	6863      	ldr	r3, [r4, #4]
 8004218:	f7ff bb94 	b.w	8003944 <HAL_PCD_IRQHandler+0x198>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800421c:	2900      	cmp	r1, #0
 800421e:	f6bf ac45 	bge.w	8003aac <HAL_PCD_IRQHandler+0x300>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004222:	f504 710d 	add.w	r1, r4, #564	; 0x234
 8004226:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004228:	f884 2237 	strb.w	r2, [r4, #567]	; 0x237
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800422c:	f003 f9c4 	bl	80075b8 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004230:	6863      	ldr	r3, [r4, #4]
 8004232:	e43b      	b.n	8003aac <HAL_PCD_IRQHandler+0x300>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004234:	f504 7179 	add.w	r1, r4, #996	; 0x3e4
 8004238:	6820      	ldr	r0, [r4, #0]
 800423a:	f003 f9bd 	bl	80075b8 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800423e:	6863      	ldr	r3, [r4, #4]
 8004240:	f7ff bb87 	b.w	8003952 <HAL_PCD_IRQHandler+0x1a6>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004244:	2900      	cmp	r1, #0
 8004246:	f6bf ac3a 	bge.w	8003abe <HAL_PCD_IRQHandler+0x312>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800424a:	f504 7116 	add.w	r1, r4, #600	; 0x258
 800424e:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004250:	f884 225b 	strb.w	r2, [r4, #603]	; 0x25b
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004254:	f003 f9b0 	bl	80075b8 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004258:	6863      	ldr	r3, [r4, #4]
 800425a:	e430      	b.n	8003abe <HAL_PCD_IRQHandler+0x312>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800425c:	f504 6181 	add.w	r1, r4, #1032	; 0x408
 8004260:	6820      	ldr	r0, [r4, #0]
 8004262:	f003 f9a9 	bl	80075b8 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004266:	6863      	ldr	r3, [r4, #4]
 8004268:	f7ff bb7a 	b.w	8003960 <HAL_PCD_IRQHandler+0x1b4>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800426c:	f204 412c 	addw	r1, r4, #1068	; 0x42c
 8004270:	6820      	ldr	r0, [r4, #0]
 8004272:	f003 f9a1 	bl	80075b8 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004276:	6863      	ldr	r3, [r4, #4]
 8004278:	f7ff bb79 	b.w	800396e <HAL_PCD_IRQHandler+0x1c2>
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800427c:	f013 0f28 	tst.w	r3, #40	; 0x28
 8004280:	f47f ad7e 	bne.w	8003d80 <HAL_PCD_IRQHandler+0x5d4>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004284:	491b      	ldr	r1, [pc, #108]	; (80042f4 <HAL_PCD_IRQHandler+0xb48>)
 8004286:	458c      	cmp	ip, r1
 8004288:	d902      	bls.n	8004290 <HAL_PCD_IRQHandler+0xae4>
 800428a:	041b      	lsls	r3, r3, #16
 800428c:	f53f aef0 	bmi.w	8004070 <HAL_PCD_IRQHandler+0x8c4>
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004290:	6911      	ldr	r1, [r2, #16]
 8004292:	f8da 229c 	ldr.w	r2, [sl, #668]	; 0x29c
 8004296:	f3c1 0112 	ubfx	r1, r1, #0, #19
 800429a:	1a52      	subs	r2, r2, r1
 800429c:	f8ca 2290 	str.w	r2, [sl, #656]	; 0x290
        if (epnum == 0U)
 80042a0:	f1b9 0f00 	cmp.w	r9, #0
 80042a4:	f47f ae39 	bne.w	8003f1a <HAL_PCD_IRQHandler+0x76e>
          if (ep->xfer_len == 0U)
 80042a8:	f8d4 128c 	ldr.w	r1, [r4, #652]	; 0x28c
 80042ac:	b1d9      	cbz	r1, 80042e6 <HAL_PCD_IRQHandler+0xb3a>
            ep->xfer_buff += ep->xfer_count;
 80042ae:	f8d4 1288 	ldr.w	r1, [r4, #648]	; 0x288
 80042b2:	4411      	add	r1, r2
 80042b4:	f8c4 1288 	str.w	r1, [r4, #648]	; 0x288
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80042b8:	e62f      	b.n	8003f1a <HAL_PCD_IRQHandler+0x76e>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80042ba:	f504 618a 	add.w	r1, r4, #1104	; 0x450
 80042be:	6820      	ldr	r0, [r4, #0]
 80042c0:	f003 f97a 	bl	80075b8 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80042c4:	6863      	ldr	r3, [r4, #4]
 80042c6:	f7ff bb59 	b.w	800397c <HAL_PCD_IRQHandler+0x1d0>
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80042ca:	f204 42c4 	addw	r2, r4, #1220	; 0x4c4
 80042ce:	4649      	mov	r1, r9
 80042d0:	f003 faca 	bl	8007868 <USB_EP0_OutStart>
 80042d4:	e621      	b.n	8003f1a <HAL_PCD_IRQHandler+0x76e>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80042d6:	f204 4174 	addw	r1, r4, #1140	; 0x474
 80042da:	6820      	ldr	r0, [r4, #0]
 80042dc:	f003 f96c 	bl	80075b8 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80042e0:	6863      	ldr	r3, [r4, #4]
 80042e2:	f7ff bb52 	b.w	800398a <HAL_PCD_IRQHandler+0x1de>
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80042e6:	f204 42c4 	addw	r2, r4, #1220	; 0x4c4
 80042ea:	2101      	movs	r1, #1
 80042ec:	f003 fabc 	bl	8007868 <USB_EP0_OutStart>
 80042f0:	e613      	b.n	8003f1a <HAL_PCD_IRQHandler+0x76e>
 80042f2:	bf00      	nop
 80042f4:	4f54300a 	.word	0x4f54300a

080042f8 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 80042f8:	f890 24bc 	ldrb.w	r2, [r0, #1212]	; 0x4bc
 80042fc:	2a01      	cmp	r2, #1
 80042fe:	d00e      	beq.n	800431e <HAL_PCD_SetAddress+0x26>
 8004300:	2201      	movs	r2, #1
{
 8004302:	b510      	push	{r4, lr}
 8004304:	4604      	mov	r4, r0
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004306:	6800      	ldr	r0, [r0, #0]
  hpcd->USB_Address = address;
 8004308:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
  __HAL_LOCK(hpcd);
 800430c:	f884 24bc 	strb.w	r2, [r4, #1212]	; 0x4bc
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004310:	f003 fa30 	bl	8007774 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004314:	2300      	movs	r3, #0
  return HAL_OK;
 8004316:	4618      	mov	r0, r3
  __HAL_UNLOCK(hpcd);
 8004318:	f884 34bc 	strb.w	r3, [r4, #1212]	; 0x4bc
}
 800431c:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 800431e:	2002      	movs	r0, #2
}
 8004320:	4770      	bx	lr
 8004322:	bf00      	nop

08004324 <HAL_PCD_EP_Open>:
{
 8004324:	b510      	push	{r4, lr}
 8004326:	f001 0e0f 	and.w	lr, r1, #15
  if ((ep_addr & 0x80U) == 0x80U)
 800432a:	0609      	lsls	r1, r1, #24
{
 800432c:	4604      	mov	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 800432e:	d427      	bmi.n	8004380 <HAL_PCD_EP_Open+0x5c>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004330:	f04f 0c24 	mov.w	ip, #36	; 0x24
 8004334:	fb0c 0c0e 	mla	ip, ip, lr, r0
 8004338:	f50c 711f 	add.w	r1, ip, #636	; 0x27c
    ep->is_in = 0U;
 800433c:	eb0e 0cce 	add.w	ip, lr, lr, lsl #3
 8004340:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 8004344:	2000      	movs	r0, #0
 8004346:	f88c 027d 	strb.w	r0, [ip, #637]	; 0x27d
  ep->maxpacket = ep_mps;
 800434a:	608a      	str	r2, [r1, #8]
  if (ep->is_in != 0U)
 800434c:	784a      	ldrb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800434e:	f881 e000 	strb.w	lr, [r1]
  ep->type = ep_type;
 8004352:	710b      	strb	r3, [r1, #4]
  if (ep->is_in != 0U)
 8004354:	b10a      	cbz	r2, 800435a <HAL_PCD_EP_Open+0x36>
    ep->tx_fifo_num = ep->num;
 8004356:	f8a1 e01a 	strh.w	lr, [r1, #26]
  if (ep_type == EP_TYPE_BULK)
 800435a:	2b02      	cmp	r3, #2
 800435c:	d101      	bne.n	8004362 <HAL_PCD_EP_Open+0x3e>
    ep->data_pid_start = 0U;
 800435e:	2300      	movs	r3, #0
 8004360:	714b      	strb	r3, [r1, #5]
  __HAL_LOCK(hpcd);
 8004362:	f894 34bc 	ldrb.w	r3, [r4, #1212]	; 0x4bc
 8004366:	2b01      	cmp	r3, #1
 8004368:	d018      	beq.n	800439c <HAL_PCD_EP_Open+0x78>
 800436a:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800436c:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800436e:	f884 34bc 	strb.w	r3, [r4, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004372:	f002 ff37 	bl	80071e4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004376:	2300      	movs	r3, #0
  return ret;
 8004378:	4618      	mov	r0, r3
  __HAL_UNLOCK(hpcd);
 800437a:	f884 34bc 	strb.w	r3, [r4, #1212]	; 0x4bc
}
 800437e:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004380:	2024      	movs	r0, #36	; 0x24
    ep->is_in = 1U;
 8004382:	f04f 0c01 	mov.w	ip, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004386:	fb00 400e 	mla	r0, r0, lr, r4
 800438a:	f100 013c 	add.w	r1, r0, #60	; 0x3c
    ep->is_in = 1U;
 800438e:	eb0e 00ce 	add.w	r0, lr, lr, lsl #3
 8004392:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8004396:	f880 c03d 	strb.w	ip, [r0, #61]	; 0x3d
 800439a:	e7d6      	b.n	800434a <HAL_PCD_EP_Open+0x26>
  __HAL_LOCK(hpcd);
 800439c:	2002      	movs	r0, #2
}
 800439e:	bd10      	pop	{r4, pc}

080043a0 <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80U) == 0x80U)
 80043a0:	f011 0f80 	tst.w	r1, #128	; 0x80
 80043a4:	f001 030f 	and.w	r3, r1, #15
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043a8:	f04f 0124 	mov.w	r1, #36	; 0x24
{
 80043ac:	b510      	push	{r4, lr}
 80043ae:	4604      	mov	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 80043b0:	d11a      	bne.n	80043e8 <HAL_PCD_EP_Close+0x48>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80043b2:	fb01 4103 	mla	r1, r1, r3, r4
    ep->is_in = 0U;
 80043b6:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 80043ba:	2000      	movs	r0, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80043bc:	f501 711f 	add.w	r1, r1, #636	; 0x27c
    ep->is_in = 0U;
 80043c0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80043c4:	f882 027d 	strb.w	r0, [r2, #637]	; 0x27d
  ep->num = ep_addr & EP_ADDR_MSK;
 80043c8:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 80043ca:	f894 34bc 	ldrb.w	r3, [r4, #1212]	; 0x4bc
 80043ce:	2b01      	cmp	r3, #1
 80043d0:	d019      	beq.n	8004406 <HAL_PCD_EP_Close+0x66>
 80043d2:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80043d4:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80043d6:	f884 34bc 	strb.w	r3, [r4, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80043da:	f002 ff4b 	bl	8007274 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80043de:	2300      	movs	r3, #0
  return HAL_OK;
 80043e0:	4618      	mov	r0, r3
  __HAL_UNLOCK(hpcd);
 80043e2:	f884 34bc 	strb.w	r3, [r4, #1212]	; 0x4bc
}
 80043e6:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043e8:	fb01 4103 	mla	r1, r1, r3, r4
    ep->is_in = 1U;
 80043ec:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 80043f0:	2001      	movs	r0, #1
 80043f2:	eb04 0282 	add.w	r2, r4, r2, lsl #2
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043f6:	313c      	adds	r1, #60	; 0x3c
    ep->is_in = 1U;
 80043f8:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  ep->num = ep_addr & EP_ADDR_MSK;
 80043fc:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 80043fe:	f894 34bc 	ldrb.w	r3, [r4, #1212]	; 0x4bc
 8004402:	2b01      	cmp	r3, #1
 8004404:	d1e5      	bne.n	80043d2 <HAL_PCD_EP_Close+0x32>
 8004406:	2002      	movs	r0, #2
}
 8004408:	bd10      	pop	{r4, pc}
 800440a:	bf00      	nop

0800440c <HAL_PCD_EP_Receive>:
{
 800440c:	b508      	push	{r3, lr}
 800440e:	f001 0e0f 	and.w	lr, r1, #15
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004412:	2124      	movs	r1, #36	; 0x24
  ep->xfer_buff = pBuf;
 8004414:	eb0e 0cce 	add.w	ip, lr, lr, lsl #3
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004418:	fb01 010e 	mla	r1, r1, lr, r0
  ep->xfer_buff = pBuf;
 800441c:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004420:	f501 711f 	add.w	r1, r1, #636	; 0x27c
  ep->xfer_len = len;
 8004424:	f8cc 328c 	str.w	r3, [ip, #652]	; 0x28c
  ep->xfer_count = 0U;
 8004428:	2300      	movs	r3, #0
  ep->xfer_buff = pBuf;
 800442a:	f8cc 2288 	str.w	r2, [ip, #648]	; 0x288
  ep->num = ep_addr & EP_ADDR_MSK;
 800442e:	f88c e27c 	strb.w	lr, [ip, #636]	; 0x27c
  ep->xfer_count = 0U;
 8004432:	f8cc 3290 	str.w	r3, [ip, #656]	; 0x290
  ep->is_in = 0U;
 8004436:	f88c 327d 	strb.w	r3, [ip, #637]	; 0x27d
  if (hpcd->Init.dma_enable == 1U)
 800443a:	68c3      	ldr	r3, [r0, #12]
  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800443c:	6800      	ldr	r0, [r0, #0]
  if (hpcd->Init.dma_enable == 1U)
 800443e:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;
 8004440:	bf08      	it	eq
 8004442:	f8cc 2298 	streq.w	r2, [ip, #664]	; 0x298
  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004446:	b2da      	uxtb	r2, r3
 8004448:	f002 ff72 	bl	8007330 <USB_EPStartXfer>
}
 800444c:	2000      	movs	r0, #0
 800444e:	bd08      	pop	{r3, pc}

08004450 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004450:	f001 010f 	and.w	r1, r1, #15
 8004454:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8004458:	eb00 0081 	add.w	r0, r0, r1, lsl #2
}
 800445c:	f8d0 0290 	ldr.w	r0, [r0, #656]	; 0x290
 8004460:	4770      	bx	lr
 8004462:	bf00      	nop

08004464 <HAL_PCD_EP_Transmit>:
{
 8004464:	b508      	push	{r3, lr}
 8004466:	f001 0e0f 	and.w	lr, r1, #15
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800446a:	2124      	movs	r1, #36	; 0x24
  ep->xfer_buff = pBuf;
 800446c:	eb0e 0cce 	add.w	ip, lr, lr, lsl #3
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004470:	fb01 010e 	mla	r1, r1, lr, r0
  ep->xfer_buff = pBuf;
 8004474:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004478:	313c      	adds	r1, #60	; 0x3c
  ep->xfer_len = len;
 800447a:	f8cc 304c 	str.w	r3, [ip, #76]	; 0x4c
  ep->xfer_count = 0U;
 800447e:	2300      	movs	r3, #0
  ep->xfer_buff = pBuf;
 8004480:	f8cc 2048 	str.w	r2, [ip, #72]	; 0x48
  ep->xfer_count = 0U;
 8004484:	f8cc 3050 	str.w	r3, [ip, #80]	; 0x50
  ep->is_in = 1U;
 8004488:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 800448a:	f88c e03c 	strb.w	lr, [ip, #60]	; 0x3c
  ep->is_in = 1U;
 800448e:	f88c 303d 	strb.w	r3, [ip, #61]	; 0x3d
  if (hpcd->Init.dma_enable == 1U)
 8004492:	68c3      	ldr	r3, [r0, #12]
  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004494:	6800      	ldr	r0, [r0, #0]
  if (hpcd->Init.dma_enable == 1U)
 8004496:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;
 8004498:	bf08      	it	eq
 800449a:	f8cc 2058 	streq.w	r2, [ip, #88]	; 0x58
  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800449e:	b2da      	uxtb	r2, r3
 80044a0:	f002 ff46 	bl	8007330 <USB_EPStartXfer>
}
 80044a4:	2000      	movs	r0, #0
 80044a6:	bd08      	pop	{r3, pc}

080044a8 <HAL_PCD_EP_SetStall>:
{
 80044a8:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80044aa:	6843      	ldr	r3, [r0, #4]
 80044ac:	f001 050f 	and.w	r5, r1, #15
 80044b0:	429d      	cmp	r5, r3
 80044b2:	d834      	bhi.n	800451e <HAL_PCD_EP_SetStall+0x76>
  if ((0x80U & ep_addr) == 0x80U)
 80044b4:	060b      	lsls	r3, r1, #24
 80044b6:	4604      	mov	r4, r0
 80044b8:	d41d      	bmi.n	80044f6 <HAL_PCD_EP_SetStall+0x4e>
    ep = &hpcd->OUT_ep[ep_addr];
 80044ba:	2224      	movs	r2, #36	; 0x24
    ep->is_in = 0U;
 80044bc:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
    ep = &hpcd->OUT_ep[ep_addr];
 80044c0:	fb02 0101 	mla	r1, r2, r1, r0
    ep->is_in = 0U;
 80044c4:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80044c8:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 80044ca:	f501 711f 	add.w	r1, r1, #636	; 0x27c
    ep->is_in = 0U;
 80044ce:	f883 227d 	strb.w	r2, [r3, #637]	; 0x27d
  ep->is_stall = 1U;
 80044d2:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 80044d4:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 80044d6:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 80044d8:	f894 24bc 	ldrb.w	r2, [r4, #1212]	; 0x4bc
 80044dc:	429a      	cmp	r2, r3
 80044de:	d01c      	beq.n	800451a <HAL_PCD_EP_SetStall+0x72>
  (void)USB_EPSetStall(hpcd->Instance, ep);
 80044e0:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80044e2:	f884 34bc 	strb.w	r3, [r4, #1212]	; 0x4bc
  (void)USB_EPSetStall(hpcd->Instance, ep);
 80044e6:	f003 f8e5 	bl	80076b4 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80044ea:	b1d5      	cbz	r5, 8004522 <HAL_PCD_EP_SetStall+0x7a>
  __HAL_UNLOCK(hpcd);
 80044ec:	2300      	movs	r3, #0
  return HAL_OK;
 80044ee:	4618      	mov	r0, r3
  __HAL_UNLOCK(hpcd);
 80044f0:	f884 34bc 	strb.w	r3, [r4, #1212]	; 0x4bc
}
 80044f4:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80044f6:	2124      	movs	r1, #36	; 0x24
    ep->is_in = 1U;
 80044f8:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
 80044fc:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80044fe:	fb01 0105 	mla	r1, r1, r5, r0
    ep->is_in = 1U;
 8004502:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004506:	313c      	adds	r1, #60	; 0x3c
    ep->is_in = 1U;
 8004508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  ep->is_stall = 1U;
 800450c:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 800450e:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 8004510:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 8004512:	f894 24bc 	ldrb.w	r2, [r4, #1212]	; 0x4bc
 8004516:	429a      	cmp	r2, r3
 8004518:	d1e2      	bne.n	80044e0 <HAL_PCD_EP_SetStall+0x38>
 800451a:	2002      	movs	r0, #2
}
 800451c:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800451e:	2001      	movs	r0, #1
}
 8004520:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004522:	f204 42c4 	addw	r2, r4, #1220	; 0x4c4
 8004526:	7b21      	ldrb	r1, [r4, #12]
 8004528:	6820      	ldr	r0, [r4, #0]
 800452a:	f003 f99d 	bl	8007868 <USB_EP0_OutStart>
 800452e:	e7dd      	b.n	80044ec <HAL_PCD_EP_SetStall+0x44>

08004530 <HAL_PCD_EP_ClrStall>:
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004530:	6842      	ldr	r2, [r0, #4]
{
 8004532:	b538      	push	{r3, r4, r5, lr}
 8004534:	f001 030f 	and.w	r3, r1, #15
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004538:	4293      	cmp	r3, r2
 800453a:	d832      	bhi.n	80045a2 <HAL_PCD_EP_ClrStall+0x72>
  if ((0x80U & ep_addr) == 0x80U)
 800453c:	f011 0f80 	tst.w	r1, #128	; 0x80
 8004540:	4604      	mov	r4, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004542:	f04f 0124 	mov.w	r1, #36	; 0x24
    ep->is_in = 1U;
 8004546:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
  if ((0x80U & ep_addr) == 0x80U)
 800454a:	d119      	bne.n	8004580 <HAL_PCD_EP_ClrStall+0x50>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800454c:	fb01 4103 	mla	r1, r1, r3, r4
    ep->is_in = 0U;
 8004550:	2000      	movs	r0, #0
 8004552:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  ep->is_stall = 0U;
 8004556:	2500      	movs	r5, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004558:	f501 711f 	add.w	r1, r1, #636	; 0x27c
    ep->is_in = 0U;
 800455c:	f882 027d 	strb.w	r0, [r2, #637]	; 0x27d
  ep->num = ep_addr & EP_ADDR_MSK;
 8004560:	700b      	strb	r3, [r1, #0]
  ep->is_stall = 0U;
 8004562:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 8004564:	f894 34bc 	ldrb.w	r3, [r4, #1212]	; 0x4bc
 8004568:	2b01      	cmp	r3, #1
 800456a:	d018      	beq.n	800459e <HAL_PCD_EP_ClrStall+0x6e>
 800456c:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800456e:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8004570:	f884 34bc 	strb.w	r3, [r4, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004574:	f003 f8d2 	bl	800771c <USB_EPClearStall>
  return HAL_OK;
 8004578:	4628      	mov	r0, r5
  __HAL_UNLOCK(hpcd);
 800457a:	f884 54bc 	strb.w	r5, [r4, #1212]	; 0x4bc
}
 800457e:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004580:	fb01 4103 	mla	r1, r1, r3, r4
    ep->is_in = 1U;
 8004584:	2001      	movs	r0, #1
 8004586:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  ep->is_stall = 0U;
 800458a:	2500      	movs	r5, #0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800458c:	313c      	adds	r1, #60	; 0x3c
    ep->is_in = 1U;
 800458e:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  ep->num = ep_addr & EP_ADDR_MSK;
 8004592:	700b      	strb	r3, [r1, #0]
  ep->is_stall = 0U;
 8004594:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 8004596:	f894 34bc 	ldrb.w	r3, [r4, #1212]	; 0x4bc
 800459a:	2b01      	cmp	r3, #1
 800459c:	d1e6      	bne.n	800456c <HAL_PCD_EP_ClrStall+0x3c>
 800459e:	2002      	movs	r0, #2
}
 80045a0:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80045a2:	2001      	movs	r0, #1
}
 80045a4:	bd38      	pop	{r3, r4, r5, pc}
 80045a6:	bf00      	nop

080045a8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80045a8:	b410      	push	{r4}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80045aa:	6804      	ldr	r4, [r0, #0]
 80045ac:	6a63      	ldr	r3, [r4, #36]	; 0x24

  if (fifo == 0U)
 80045ae:	b931      	cbnz	r1, 80045be <HAL_PCDEx_SetTxFiFo+0x16>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80045b0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
  }

  return HAL_OK;
}
 80045b4:	2000      	movs	r0, #0
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80045b6:	62a3      	str	r3, [r4, #40]	; 0x28
}
 80045b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80045bc:	4770      	bx	lr
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80045be:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    for (i = 0U; i < (fifo - 1U); i++)
 80045c0:	3901      	subs	r1, #1
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80045c2:	eb03 4c10 	add.w	ip, r3, r0, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 80045c6:	d00b      	beq.n	80045e0 <HAL_PCDEx_SetTxFiFo+0x38>
 80045c8:	2300      	movs	r3, #0
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80045ca:	f103 0040 	add.w	r0, r3, #64	; 0x40
    for (i = 0U; i < (fifo - 1U); i++)
 80045ce:	3301      	adds	r3, #1
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80045d0:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    for (i = 0U; i < (fifo - 1U); i++)
 80045d4:	b2db      	uxtb	r3, r3
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80045d6:	6840      	ldr	r0, [r0, #4]
    for (i = 0U; i < (fifo - 1U); i++)
 80045d8:	428b      	cmp	r3, r1
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80045da:	eb0c 4c10 	add.w	ip, ip, r0, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 80045de:	d3f4      	bcc.n	80045ca <HAL_PCDEx_SetTxFiFo+0x22>
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80045e0:	3140      	adds	r1, #64	; 0x40
 80045e2:	ea4c 4202 	orr.w	r2, ip, r2, lsl #16
}
 80045e6:	2000      	movs	r0, #0
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80045e8:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 80045ec:	6062      	str	r2, [r4, #4]
}
 80045ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80045f2:	4770      	bx	lr

080045f4 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80045f4:	4603      	mov	r3, r0
  hpcd->Instance->GRXFSIZ = size;

  return HAL_OK;
}
 80045f6:	2000      	movs	r0, #0
  hpcd->Instance->GRXFSIZ = size;
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	6259      	str	r1, [r3, #36]	; 0x24
}
 80045fc:	4770      	bx	lr
 80045fe:	bf00      	nop

08004600 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004600:	4603      	mov	r3, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;

  hpcd->lpm_active = 1U;
  hpcd->LPM_State = LPM_L0;
 8004602:	f04f 0c00 	mov.w	ip, #0
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004606:	4909      	ldr	r1, [pc, #36]	; (800462c <HAL_PCDEx_ActivateLPM+0x2c>)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004608:	681a      	ldr	r2, [r3, #0]

  return HAL_OK;
}
 800460a:	4660      	mov	r0, ip
{
 800460c:	b410      	push	{r4}
  hpcd->lpm_active = 1U;
 800460e:	2401      	movs	r4, #1
  hpcd->LPM_State = LPM_L0;
 8004610:	f883 c4f4 	strb.w	ip, [r3, #1268]	; 0x4f4
  hpcd->lpm_active = 1U;
 8004614:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004618:	6993      	ldr	r3, [r2, #24]
}
 800461a:	f85d 4b04 	ldr.w	r4, [sp], #4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800461e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004622:	6193      	str	r3, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004624:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8004626:	4319      	orrs	r1, r3
 8004628:	6551      	str	r1, [r2, #84]	; 0x54
}
 800462a:	4770      	bx	lr
 800462c:	10000003 	.word	0x10000003

08004630 <HAL_PCDEx_LPM_Callback>:
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004630:	4770      	bx	lr
 8004632:	bf00      	nop

08004634 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004634:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004636:	4c10      	ldr	r4, [pc, #64]	; (8004678 <HAL_PWREx_ConfigSupply+0x44>)
 8004638:	68e3      	ldr	r3, [r4, #12]
 800463a:	f013 0f04 	tst.w	r3, #4
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800463e:	68e3      	ldr	r3, [r4, #12]
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004640:	d105      	bne.n	800464e <HAL_PWREx_ConfigSupply+0x1a>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004642:	f003 0307 	and.w	r3, r3, #7
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004646:	1a18      	subs	r0, r3, r0
 8004648:	bf18      	it	ne
 800464a:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 800464c:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800464e:	f023 0307 	bic.w	r3, r3, #7
 8004652:	4303      	orrs	r3, r0
 8004654:	60e3      	str	r3, [r4, #12]
  tickstart = HAL_GetTick ();
 8004656:	f7fd fbfb 	bl	8001e50 <HAL_GetTick>
 800465a:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800465c:	e005      	b.n	800466a <HAL_PWREx_ConfigSupply+0x36>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800465e:	f7fd fbf7 	bl	8001e50 <HAL_GetTick>
 8004662:	1b40      	subs	r0, r0, r5
 8004664:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8004668:	d804      	bhi.n	8004674 <HAL_PWREx_ConfigSupply+0x40>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800466a:	6863      	ldr	r3, [r4, #4]
 800466c:	049b      	lsls	r3, r3, #18
 800466e:	d5f6      	bpl.n	800465e <HAL_PWREx_ConfigSupply+0x2a>
  return HAL_OK;
 8004670:	2000      	movs	r0, #0
}
 8004672:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8004674:	2001      	movs	r0, #1
}
 8004676:	bd38      	pop	{r3, r4, r5, pc}
 8004678:	58024800 	.word	0x58024800

0800467c <HAL_PWREx_EnableUSBVoltageDetector>:
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800467c:	4a02      	ldr	r2, [pc, #8]	; (8004688 <HAL_PWREx_EnableUSBVoltageDetector+0xc>)
 800467e:	68d3      	ldr	r3, [r2, #12]
 8004680:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004684:	60d3      	str	r3, [r2, #12]
}
 8004686:	4770      	bx	lr
 8004688:	58024800 	.word	0x58024800

0800468c <HAL_RCC_GetSysClockFreq.part.0>:
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800468c:	4b3c      	ldr	r3, [pc, #240]	; (8004780 <HAL_RCC_GetSysClockFreq.part.0+0xf4>)
uint32_t HAL_RCC_GetSysClockFreq(void)
 800468e:	b430      	push	{r4, r5}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004690:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004692:	6a9c      	ldr	r4, [r3, #40]	; 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004694:	6add      	ldr	r5, [r3, #44]	; 0x2c
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));

      if (pllm != 0U)
 8004696:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800469a:	6b59      	ldr	r1, [r3, #52]	; 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800469c:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
 80046a0:	d038      	beq.n	8004714 <HAL_RCC_GetSysClockFreq.part.0+0x88>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80046a2:	f3c1 01cc 	ubfx	r1, r1, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80046a6:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80046aa:	f002 0203 	and.w	r2, r2, #3
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80046ae:	fb05 f101 	mul.w	r1, r5, r1
 80046b2:	2a01      	cmp	r2, #1
 80046b4:	ee07 1a90 	vmov	s15, r1
 80046b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
      {
        switch (pllsource)
 80046bc:	d002      	beq.n	80046c4 <HAL_RCC_GetSysClockFreq.part.0+0x38>
 80046be:	2a02      	cmp	r2, #2
 80046c0:	d050      	beq.n	8004764 <HAL_RCC_GetSysClockFreq.part.0+0xd8>
 80046c2:	b34a      	cbz	r2, 8004718 <HAL_RCC_GetSysClockFreq.part.0+0x8c>
          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            break;

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80046c4:	ee07 0a90 	vmov	s15, r0
 80046c8:	ed9f 5a2e 	vldr	s10, [pc, #184]	; 8004784 <HAL_RCC_GetSysClockFreq.part.0+0xf8>
 80046cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80046d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046d2:	eec5 6a27 	vdiv.f32	s13, s10, s15
 80046d6:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 8004788 <HAL_RCC_GetSysClockFreq.part.0+0xfc>
 80046da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046de:	ee07 3a90 	vmov	s15, r3
 80046e2:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 80046e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80046ea:	ee77 7aa5 	vadd.f32	s15, s15, s11
 80046ee:	eee7 7a06 	vfma.f32	s15, s14, s12
 80046f2:	ee66 6aa7 	vmul.f32	s13, s13, s15
            break;
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80046f6:	4b22      	ldr	r3, [pc, #136]	; (8004780 <HAL_RCC_GetSysClockFreq.part.0+0xf4>)
 80046f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046fa:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80046fe:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004700:	ee07 3a90 	vmov	s15, r3
 8004704:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004708:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800470c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004710:	ee17 0a90 	vmov	r0, s15
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
 8004714:	bc30      	pop	{r4, r5}
 8004716:	4770      	bx	lr
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	0692      	lsls	r2, r2, #26
 800471c:	d529      	bpl.n	8004772 <HAL_RCC_GetSysClockFreq.part.0+0xe6>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800471e:	6819      	ldr	r1, [r3, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004720:	ee07 0a90 	vmov	s15, r0
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004724:	4a19      	ldr	r2, [pc, #100]	; (800478c <HAL_RCC_GetSysClockFreq.part.0+0x100>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004726:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800472a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800472c:	f3c1 01c1 	ubfx	r1, r1, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004730:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004734:	ed9f 5a14 	vldr	s10, [pc, #80]	; 8004788 <HAL_RCC_GetSysClockFreq.part.0+0xfc>
 8004738:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800473c:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800473e:	ee06 3a10 	vmov	s12, r3
 8004742:	ee05 2a90 	vmov	s11, r2
 8004746:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800474a:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800474e:	ee36 6a26 	vadd.f32	s12, s12, s13
 8004752:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 8004756:	eef0 7a46 	vmov.f32	s15, s12
 800475a:	eee7 7a05 	vfma.f32	s15, s14, s10
 800475e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004762:	e7c8      	b.n	80046f6 <HAL_RCC_GetSysClockFreq.part.0+0x6a>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004764:	ee07 0a90 	vmov	s15, r0
 8004768:	ed9f 5a09 	vldr	s10, [pc, #36]	; 8004790 <HAL_RCC_GetSysClockFreq.part.0+0x104>
 800476c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004770:	e7ae      	b.n	80046d0 <HAL_RCC_GetSysClockFreq.part.0+0x44>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004772:	ee07 0a90 	vmov	s15, r0
 8004776:	ed9f 5a07 	vldr	s10, [pc, #28]	; 8004794 <HAL_RCC_GetSysClockFreq.part.0+0x108>
 800477a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800477e:	e7a7      	b.n	80046d0 <HAL_RCC_GetSysClockFreq.part.0+0x44>
 8004780:	58024400 	.word	0x58024400
 8004784:	4a742400 	.word	0x4a742400
 8004788:	39000000 	.word	0x39000000
 800478c:	03d09000 	.word	0x03d09000
 8004790:	4bbebc20 	.word	0x4bbebc20
 8004794:	4c742400 	.word	0x4c742400

08004798 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8004798:	2800      	cmp	r0, #0
 800479a:	f000 81bd 	beq.w	8004b18 <HAL_RCC_OscConfig+0x380>
{
 800479e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047a0:	6803      	ldr	r3, [r0, #0]
 80047a2:	4604      	mov	r4, r0
 80047a4:	07d9      	lsls	r1, r3, #31
 80047a6:	d52e      	bpl.n	8004806 <HAL_RCC_OscConfig+0x6e>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80047a8:	4993      	ldr	r1, [pc, #588]	; (80049f8 <HAL_RCC_OscConfig+0x260>)
 80047aa:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80047ac:	6a89      	ldr	r1, [r1, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80047ae:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80047b2:	2a10      	cmp	r2, #16
 80047b4:	f000 80f0 	beq.w	8004998 <HAL_RCC_OscConfig+0x200>
 80047b8:	2a18      	cmp	r2, #24
 80047ba:	f000 80e8 	beq.w	800498e <HAL_RCC_OscConfig+0x1f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047be:	6863      	ldr	r3, [r4, #4]
 80047c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047c4:	f000 8108 	beq.w	80049d8 <HAL_RCC_OscConfig+0x240>
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	f000 8146 	beq.w	8004a5a <HAL_RCC_OscConfig+0x2c2>
 80047ce:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80047d2:	4b89      	ldr	r3, [pc, #548]	; (80049f8 <HAL_RCC_OscConfig+0x260>)
 80047d4:	681a      	ldr	r2, [r3, #0]
 80047d6:	f000 8254 	beq.w	8004c82 <HAL_RCC_OscConfig+0x4ea>
 80047da:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80047de:	601a      	str	r2, [r3, #0]
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80047e6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80047e8:	f7fd fb32 	bl	8001e50 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80047ec:	4e82      	ldr	r6, [pc, #520]	; (80049f8 <HAL_RCC_OscConfig+0x260>)
        tickstart = HAL_GetTick();
 80047ee:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80047f0:	e005      	b.n	80047fe <HAL_RCC_OscConfig+0x66>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047f2:	f7fd fb2d 	bl	8001e50 <HAL_GetTick>
 80047f6:	1b40      	subs	r0, r0, r5
 80047f8:	2864      	cmp	r0, #100	; 0x64
 80047fa:	f200 812c 	bhi.w	8004a56 <HAL_RCC_OscConfig+0x2be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80047fe:	6833      	ldr	r3, [r6, #0]
 8004800:	039b      	lsls	r3, r3, #14
 8004802:	d5f6      	bpl.n	80047f2 <HAL_RCC_OscConfig+0x5a>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004804:	6823      	ldr	r3, [r4, #0]
 8004806:	079d      	lsls	r5, r3, #30
 8004808:	d47e      	bmi.n	8004908 <HAL_RCC_OscConfig+0x170>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800480a:	06d9      	lsls	r1, r3, #27
 800480c:	d528      	bpl.n	8004860 <HAL_RCC_OscConfig+0xc8>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800480e:	497a      	ldr	r1, [pc, #488]	; (80049f8 <HAL_RCC_OscConfig+0x260>)
 8004810:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004812:	6a89      	ldr	r1, [r1, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004814:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004818:	2a08      	cmp	r2, #8
 800481a:	f000 80cd 	beq.w	80049b8 <HAL_RCC_OscConfig+0x220>
 800481e:	2a18      	cmp	r2, #24
 8004820:	f000 80c5 	beq.w	80049ae <HAL_RCC_OscConfig+0x216>
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004824:	69e3      	ldr	r3, [r4, #28]
        __HAL_RCC_CSI_ENABLE();
 8004826:	4d74      	ldr	r5, [pc, #464]	; (80049f8 <HAL_RCC_OscConfig+0x260>)
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004828:	2b00      	cmp	r3, #0
 800482a:	f000 814e 	beq.w	8004aca <HAL_RCC_OscConfig+0x332>
        __HAL_RCC_CSI_ENABLE();
 800482e:	682b      	ldr	r3, [r5, #0]
 8004830:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004834:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004836:	f7fd fb0b 	bl	8001e50 <HAL_GetTick>
 800483a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800483c:	e005      	b.n	800484a <HAL_RCC_OscConfig+0xb2>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800483e:	f7fd fb07 	bl	8001e50 <HAL_GetTick>
 8004842:	1b80      	subs	r0, r0, r6
 8004844:	2802      	cmp	r0, #2
 8004846:	f200 8106 	bhi.w	8004a56 <HAL_RCC_OscConfig+0x2be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800484a:	682b      	ldr	r3, [r5, #0]
 800484c:	05db      	lsls	r3, r3, #23
 800484e:	d5f6      	bpl.n	800483e <HAL_RCC_OscConfig+0xa6>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004850:	68eb      	ldr	r3, [r5, #12]
 8004852:	6a22      	ldr	r2, [r4, #32]
 8004854:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8004858:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800485c:	60eb      	str	r3, [r5, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800485e:	6823      	ldr	r3, [r4, #0]
 8004860:	071d      	lsls	r5, r3, #28
 8004862:	d516      	bpl.n	8004892 <HAL_RCC_OscConfig+0xfa>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004864:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 8004866:	4d64      	ldr	r5, [pc, #400]	; (80049f8 <HAL_RCC_OscConfig+0x260>)
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004868:	2b00      	cmp	r3, #0
 800486a:	f000 810c 	beq.w	8004a86 <HAL_RCC_OscConfig+0x2ee>
      __HAL_RCC_LSI_ENABLE();
 800486e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8004870:	f043 0301 	orr.w	r3, r3, #1
 8004874:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8004876:	f7fd faeb 	bl	8001e50 <HAL_GetTick>
 800487a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800487c:	e005      	b.n	800488a <HAL_RCC_OscConfig+0xf2>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800487e:	f7fd fae7 	bl	8001e50 <HAL_GetTick>
 8004882:	1b80      	subs	r0, r0, r6
 8004884:	2802      	cmp	r0, #2
 8004886:	f200 80e6 	bhi.w	8004a56 <HAL_RCC_OscConfig+0x2be>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800488a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800488c:	0798      	lsls	r0, r3, #30
 800488e:	d5f6      	bpl.n	800487e <HAL_RCC_OscConfig+0xe6>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004890:	6823      	ldr	r3, [r4, #0]
 8004892:	069a      	lsls	r2, r3, #26
 8004894:	d516      	bpl.n	80048c4 <HAL_RCC_OscConfig+0x12c>
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004896:	69a3      	ldr	r3, [r4, #24]
      __HAL_RCC_HSI48_ENABLE();
 8004898:	4d57      	ldr	r5, [pc, #348]	; (80049f8 <HAL_RCC_OscConfig+0x260>)
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800489a:	2b00      	cmp	r3, #0
 800489c:	f000 8104 	beq.w	8004aa8 <HAL_RCC_OscConfig+0x310>
      __HAL_RCC_HSI48_ENABLE();
 80048a0:	682b      	ldr	r3, [r5, #0]
 80048a2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80048a6:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80048a8:	f7fd fad2 	bl	8001e50 <HAL_GetTick>
 80048ac:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80048ae:	e005      	b.n	80048bc <HAL_RCC_OscConfig+0x124>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80048b0:	f7fd face 	bl	8001e50 <HAL_GetTick>
 80048b4:	1b80      	subs	r0, r0, r6
 80048b6:	2802      	cmp	r0, #2
 80048b8:	f200 80cd 	bhi.w	8004a56 <HAL_RCC_OscConfig+0x2be>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80048bc:	682b      	ldr	r3, [r5, #0]
 80048be:	049f      	lsls	r7, r3, #18
 80048c0:	d5f6      	bpl.n	80048b0 <HAL_RCC_OscConfig+0x118>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048c2:	6823      	ldr	r3, [r4, #0]
 80048c4:	0759      	lsls	r1, r3, #29
 80048c6:	f100 808d 	bmi.w	80049e4 <HAL_RCC_OscConfig+0x24c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80048ca:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80048cc:	b1d0      	cbz	r0, 8004904 <HAL_RCC_OscConfig+0x16c>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80048ce:	4d4a      	ldr	r5, [pc, #296]	; (80049f8 <HAL_RCC_OscConfig+0x260>)
 80048d0:	692b      	ldr	r3, [r5, #16]
 80048d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80048d6:	2b18      	cmp	r3, #24
 80048d8:	f000 8185 	beq.w	8004be6 <HAL_RCC_OscConfig+0x44e>
        __HAL_RCC_PLL_DISABLE();
 80048dc:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048de:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80048e0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80048e4:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048e6:	f000 8119 	beq.w	8004b1c <HAL_RCC_OscConfig+0x384>
        tickstart = HAL_GetTick();
 80048ea:	f7fd fab1 	bl	8001e50 <HAL_GetTick>
 80048ee:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80048f0:	e005      	b.n	80048fe <HAL_RCC_OscConfig+0x166>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048f2:	f7fd faad 	bl	8001e50 <HAL_GetTick>
 80048f6:	1b00      	subs	r0, r0, r4
 80048f8:	2802      	cmp	r0, #2
 80048fa:	f200 80ac 	bhi.w	8004a56 <HAL_RCC_OscConfig+0x2be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80048fe:	682b      	ldr	r3, [r5, #0]
 8004900:	019b      	lsls	r3, r3, #6
 8004902:	d4f6      	bmi.n	80048f2 <HAL_RCC_OscConfig+0x15a>
  return HAL_OK;
 8004904:	2000      	movs	r0, #0
}
 8004906:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004908:	4a3b      	ldr	r2, [pc, #236]	; (80049f8 <HAL_RCC_OscConfig+0x260>)
 800490a:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800490c:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800490e:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 8004912:	d122      	bne.n	800495a <HAL_RCC_OscConfig+0x1c2>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004914:	4b38      	ldr	r3, [pc, #224]	; (80049f8 <HAL_RCC_OscConfig+0x260>)
 8004916:	68e2      	ldr	r2, [r4, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	0759      	lsls	r1, r3, #29
 800491c:	d501      	bpl.n	8004922 <HAL_RCC_OscConfig+0x18a>
 800491e:	2a00      	cmp	r2, #0
 8004920:	d043      	beq.n	80049aa <HAL_RCC_OscConfig+0x212>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004922:	4d35      	ldr	r5, [pc, #212]	; (80049f8 <HAL_RCC_OscConfig+0x260>)
 8004924:	682b      	ldr	r3, [r5, #0]
 8004926:	f023 0319 	bic.w	r3, r3, #25
 800492a:	4313      	orrs	r3, r2
 800492c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800492e:	f7fd fa8f 	bl	8001e50 <HAL_GetTick>
 8004932:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004934:	e005      	b.n	8004942 <HAL_RCC_OscConfig+0x1aa>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004936:	f7fd fa8b 	bl	8001e50 <HAL_GetTick>
 800493a:	1b80      	subs	r0, r0, r6
 800493c:	2802      	cmp	r0, #2
 800493e:	f200 808a 	bhi.w	8004a56 <HAL_RCC_OscConfig+0x2be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004942:	682b      	ldr	r3, [r5, #0]
 8004944:	075b      	lsls	r3, r3, #29
 8004946:	d5f6      	bpl.n	8004936 <HAL_RCC_OscConfig+0x19e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004948:	686b      	ldr	r3, [r5, #4]
 800494a:	6922      	ldr	r2, [r4, #16]
 800494c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004950:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004954:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004956:	6823      	ldr	r3, [r4, #0]
 8004958:	e757      	b.n	800480a <HAL_RCC_OscConfig+0x72>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800495a:	2b18      	cmp	r3, #24
 800495c:	f000 80d8 	beq.w	8004b10 <HAL_RCC_OscConfig+0x378>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004960:	4d25      	ldr	r5, [pc, #148]	; (80049f8 <HAL_RCC_OscConfig+0x260>)
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004962:	68e2      	ldr	r2, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004964:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004966:	2a00      	cmp	r2, #0
 8004968:	f000 80c1 	beq.w	8004aee <HAL_RCC_OscConfig+0x356>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800496c:	f023 0319 	bic.w	r3, r3, #25
 8004970:	4313      	orrs	r3, r2
 8004972:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004974:	f7fd fa6c 	bl	8001e50 <HAL_GetTick>
 8004978:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800497a:	e004      	b.n	8004986 <HAL_RCC_OscConfig+0x1ee>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800497c:	f7fd fa68 	bl	8001e50 <HAL_GetTick>
 8004980:	1b80      	subs	r0, r0, r6
 8004982:	2802      	cmp	r0, #2
 8004984:	d867      	bhi.n	8004a56 <HAL_RCC_OscConfig+0x2be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004986:	682b      	ldr	r3, [r5, #0]
 8004988:	075f      	lsls	r7, r3, #29
 800498a:	d5f7      	bpl.n	800497c <HAL_RCC_OscConfig+0x1e4>
 800498c:	e7dc      	b.n	8004948 <HAL_RCC_OscConfig+0x1b0>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800498e:	f001 0103 	and.w	r1, r1, #3
 8004992:	2902      	cmp	r1, #2
 8004994:	f47f af13 	bne.w	80047be <HAL_RCC_OscConfig+0x26>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004998:	4a17      	ldr	r2, [pc, #92]	; (80049f8 <HAL_RCC_OscConfig+0x260>)
 800499a:	6812      	ldr	r2, [r2, #0]
 800499c:	0392      	lsls	r2, r2, #14
 800499e:	f57f af32 	bpl.w	8004806 <HAL_RCC_OscConfig+0x6e>
 80049a2:	6862      	ldr	r2, [r4, #4]
 80049a4:	2a00      	cmp	r2, #0
 80049a6:	f47f af2e 	bne.w	8004806 <HAL_RCC_OscConfig+0x6e>
        return HAL_ERROR;
 80049aa:	2001      	movs	r0, #1
}
 80049ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80049ae:	f001 0103 	and.w	r1, r1, #3
 80049b2:	2901      	cmp	r1, #1
 80049b4:	f47f af36 	bne.w	8004824 <HAL_RCC_OscConfig+0x8c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80049b8:	4a0f      	ldr	r2, [pc, #60]	; (80049f8 <HAL_RCC_OscConfig+0x260>)
 80049ba:	6812      	ldr	r2, [r2, #0]
 80049bc:	05d2      	lsls	r2, r2, #23
 80049be:	d502      	bpl.n	80049c6 <HAL_RCC_OscConfig+0x22e>
 80049c0:	69e2      	ldr	r2, [r4, #28]
 80049c2:	2a80      	cmp	r2, #128	; 0x80
 80049c4:	d1f1      	bne.n	80049aa <HAL_RCC_OscConfig+0x212>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80049c6:	490c      	ldr	r1, [pc, #48]	; (80049f8 <HAL_RCC_OscConfig+0x260>)
 80049c8:	6a20      	ldr	r0, [r4, #32]
 80049ca:	68ca      	ldr	r2, [r1, #12]
 80049cc:	f022 527c 	bic.w	r2, r2, #1056964608	; 0x3f000000
 80049d0:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 80049d4:	60ca      	str	r2, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80049d6:	e743      	b.n	8004860 <HAL_RCC_OscConfig+0xc8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049d8:	4a07      	ldr	r2, [pc, #28]	; (80049f8 <HAL_RCC_OscConfig+0x260>)
 80049da:	6813      	ldr	r3, [r2, #0]
 80049dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049e0:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80049e2:	e701      	b.n	80047e8 <HAL_RCC_OscConfig+0x50>
    PWR->CR1 |= PWR_CR1_DBP;
 80049e4:	4d05      	ldr	r5, [pc, #20]	; (80049fc <HAL_RCC_OscConfig+0x264>)
 80049e6:	682b      	ldr	r3, [r5, #0]
 80049e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049ec:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 80049ee:	f7fd fa2f 	bl	8001e50 <HAL_GetTick>
 80049f2:	4606      	mov	r6, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80049f4:	e009      	b.n	8004a0a <HAL_RCC_OscConfig+0x272>
 80049f6:	bf00      	nop
 80049f8:	58024400 	.word	0x58024400
 80049fc:	58024800 	.word	0x58024800
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a00:	f7fd fa26 	bl	8001e50 <HAL_GetTick>
 8004a04:	1b80      	subs	r0, r0, r6
 8004a06:	2864      	cmp	r0, #100	; 0x64
 8004a08:	d825      	bhi.n	8004a56 <HAL_RCC_OscConfig+0x2be>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004a0a:	682b      	ldr	r3, [r5, #0]
 8004a0c:	05da      	lsls	r2, r3, #23
 8004a0e:	d5f7      	bpl.n	8004a00 <HAL_RCC_OscConfig+0x268>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a10:	68a3      	ldr	r3, [r4, #8]
 8004a12:	2b01      	cmp	r3, #1
 8004a14:	f000 815c 	beq.w	8004cd0 <HAL_RCC_OscConfig+0x538>
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	f000 813a 	beq.w	8004c92 <HAL_RCC_OscConfig+0x4fa>
 8004a1e:	2b05      	cmp	r3, #5
 8004a20:	4ba8      	ldr	r3, [pc, #672]	; (8004cc4 <HAL_RCC_OscConfig+0x52c>)
 8004a22:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004a24:	f000 815a 	beq.w	8004cdc <HAL_RCC_OscConfig+0x544>
 8004a28:	f022 0201 	bic.w	r2, r2, #1
 8004a2c:	671a      	str	r2, [r3, #112]	; 0x70
 8004a2e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004a30:	f022 0204 	bic.w	r2, r2, #4
 8004a34:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 8004a36:	f7fd fa0b 	bl	8001e50 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004a3a:	4ea2      	ldr	r6, [pc, #648]	; (8004cc4 <HAL_RCC_OscConfig+0x52c>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a3c:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8004a40:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004a42:	e004      	b.n	8004a4e <HAL_RCC_OscConfig+0x2b6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a44:	f7fd fa04 	bl	8001e50 <HAL_GetTick>
 8004a48:	1b40      	subs	r0, r0, r5
 8004a4a:	42b8      	cmp	r0, r7
 8004a4c:	d803      	bhi.n	8004a56 <HAL_RCC_OscConfig+0x2be>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004a4e:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8004a50:	079b      	lsls	r3, r3, #30
 8004a52:	d5f7      	bpl.n	8004a44 <HAL_RCC_OscConfig+0x2ac>
 8004a54:	e739      	b.n	80048ca <HAL_RCC_OscConfig+0x132>
            return HAL_TIMEOUT;
 8004a56:	2003      	movs	r0, #3
}
 8004a58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a5a:	4d9a      	ldr	r5, [pc, #616]	; (8004cc4 <HAL_RCC_OscConfig+0x52c>)
 8004a5c:	682b      	ldr	r3, [r5, #0]
 8004a5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a62:	602b      	str	r3, [r5, #0]
 8004a64:	682b      	ldr	r3, [r5, #0]
 8004a66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a6a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004a6c:	f7fd f9f0 	bl	8001e50 <HAL_GetTick>
 8004a70:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004a72:	e004      	b.n	8004a7e <HAL_RCC_OscConfig+0x2e6>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a74:	f7fd f9ec 	bl	8001e50 <HAL_GetTick>
 8004a78:	1b80      	subs	r0, r0, r6
 8004a7a:	2864      	cmp	r0, #100	; 0x64
 8004a7c:	d8eb      	bhi.n	8004a56 <HAL_RCC_OscConfig+0x2be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004a7e:	682b      	ldr	r3, [r5, #0]
 8004a80:	039f      	lsls	r7, r3, #14
 8004a82:	d4f7      	bmi.n	8004a74 <HAL_RCC_OscConfig+0x2dc>
 8004a84:	e6be      	b.n	8004804 <HAL_RCC_OscConfig+0x6c>
      __HAL_RCC_LSI_DISABLE();
 8004a86:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8004a88:	f023 0301 	bic.w	r3, r3, #1
 8004a8c:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8004a8e:	f7fd f9df 	bl	8001e50 <HAL_GetTick>
 8004a92:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004a94:	e004      	b.n	8004aa0 <HAL_RCC_OscConfig+0x308>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a96:	f7fd f9db 	bl	8001e50 <HAL_GetTick>
 8004a9a:	1b80      	subs	r0, r0, r6
 8004a9c:	2802      	cmp	r0, #2
 8004a9e:	d8da      	bhi.n	8004a56 <HAL_RCC_OscConfig+0x2be>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004aa0:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8004aa2:	0799      	lsls	r1, r3, #30
 8004aa4:	d4f7      	bmi.n	8004a96 <HAL_RCC_OscConfig+0x2fe>
 8004aa6:	e6f3      	b.n	8004890 <HAL_RCC_OscConfig+0xf8>
      __HAL_RCC_HSI48_DISABLE();
 8004aa8:	682b      	ldr	r3, [r5, #0]
 8004aaa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004aae:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8004ab0:	f7fd f9ce 	bl	8001e50 <HAL_GetTick>
 8004ab4:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004ab6:	e004      	b.n	8004ac2 <HAL_RCC_OscConfig+0x32a>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004ab8:	f7fd f9ca 	bl	8001e50 <HAL_GetTick>
 8004abc:	1b80      	subs	r0, r0, r6
 8004abe:	2802      	cmp	r0, #2
 8004ac0:	d8c9      	bhi.n	8004a56 <HAL_RCC_OscConfig+0x2be>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004ac2:	682b      	ldr	r3, [r5, #0]
 8004ac4:	0498      	lsls	r0, r3, #18
 8004ac6:	d4f7      	bmi.n	8004ab8 <HAL_RCC_OscConfig+0x320>
 8004ac8:	e6fb      	b.n	80048c2 <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_CSI_DISABLE();
 8004aca:	682b      	ldr	r3, [r5, #0]
 8004acc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ad0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004ad2:	f7fd f9bd 	bl	8001e50 <HAL_GetTick>
 8004ad6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004ad8:	e004      	b.n	8004ae4 <HAL_RCC_OscConfig+0x34c>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004ada:	f7fd f9b9 	bl	8001e50 <HAL_GetTick>
 8004ade:	1b80      	subs	r0, r0, r6
 8004ae0:	2802      	cmp	r0, #2
 8004ae2:	d8b8      	bhi.n	8004a56 <HAL_RCC_OscConfig+0x2be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004ae4:	682b      	ldr	r3, [r5, #0]
 8004ae6:	05df      	lsls	r7, r3, #23
 8004ae8:	d4f7      	bmi.n	8004ada <HAL_RCC_OscConfig+0x342>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004aea:	6823      	ldr	r3, [r4, #0]
 8004aec:	e6b8      	b.n	8004860 <HAL_RCC_OscConfig+0xc8>
        __HAL_RCC_HSI_DISABLE();
 8004aee:	f023 0301 	bic.w	r3, r3, #1
 8004af2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004af4:	f7fd f9ac 	bl	8001e50 <HAL_GetTick>
 8004af8:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004afa:	e004      	b.n	8004b06 <HAL_RCC_OscConfig+0x36e>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004afc:	f7fd f9a8 	bl	8001e50 <HAL_GetTick>
 8004b00:	1b80      	subs	r0, r0, r6
 8004b02:	2802      	cmp	r0, #2
 8004b04:	d8a7      	bhi.n	8004a56 <HAL_RCC_OscConfig+0x2be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004b06:	682b      	ldr	r3, [r5, #0]
 8004b08:	0758      	lsls	r0, r3, #29
 8004b0a:	d4f7      	bmi.n	8004afc <HAL_RCC_OscConfig+0x364>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004b0c:	6823      	ldr	r3, [r4, #0]
 8004b0e:	e67c      	b.n	800480a <HAL_RCC_OscConfig+0x72>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004b10:	0790      	lsls	r0, r2, #30
 8004b12:	f47f af25 	bne.w	8004960 <HAL_RCC_OscConfig+0x1c8>
 8004b16:	e6fd      	b.n	8004914 <HAL_RCC_OscConfig+0x17c>
    return HAL_ERROR;
 8004b18:	2001      	movs	r0, #1
}
 8004b1a:	4770      	bx	lr
        tickstart = HAL_GetTick();
 8004b1c:	f7fd f998 	bl	8001e50 <HAL_GetTick>
 8004b20:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004b22:	e004      	b.n	8004b2e <HAL_RCC_OscConfig+0x396>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b24:	f7fd f994 	bl	8001e50 <HAL_GetTick>
 8004b28:	1b80      	subs	r0, r0, r6
 8004b2a:	2802      	cmp	r0, #2
 8004b2c:	d893      	bhi.n	8004a56 <HAL_RCC_OscConfig+0x2be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004b2e:	682b      	ldr	r3, [r5, #0]
 8004b30:	0199      	lsls	r1, r3, #6
 8004b32:	d4f7      	bmi.n	8004b24 <HAL_RCC_OscConfig+0x38c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b34:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8004b36:	4b64      	ldr	r3, [pc, #400]	; (8004cc8 <HAL_RCC_OscConfig+0x530>)
 8004b38:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004b3a:	400b      	ands	r3, r1
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004b3c:	4963      	ldr	r1, [pc, #396]	; (8004ccc <HAL_RCC_OscConfig+0x534>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004b3e:	4e61      	ldr	r6, [pc, #388]	; (8004cc4 <HAL_RCC_OscConfig+0x52c>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b40:	4313      	orrs	r3, r2
 8004b42:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004b44:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8004b48:	62ab      	str	r3, [r5, #40]	; 0x28
 8004b4a:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	; 0x34
 8004b4e:	3b01      	subs	r3, #1
 8004b50:	3a01      	subs	r2, #1
 8004b52:	025b      	lsls	r3, r3, #9
 8004b54:	0412      	lsls	r2, r2, #16
 8004b56:	b29b      	uxth	r3, r3
 8004b58:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004b60:	3a01      	subs	r2, #1
 8004b62:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b66:	4313      	orrs	r3, r2
 8004b68:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004b6a:	3a01      	subs	r2, #1
 8004b6c:	0612      	lsls	r2, r2, #24
 8004b6e:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8004b72:	4313      	orrs	r3, r2
 8004b74:	632b      	str	r3, [r5, #48]	; 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
 8004b76:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004b78:	f023 0301 	bic.w	r3, r3, #1
 8004b7c:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004b7e:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8004b80:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8004b82:	4011      	ands	r1, r2
 8004b84:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 8004b88:	6369      	str	r1, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004b8a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004b8c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004b8e:	f023 030c 	bic.w	r3, r3, #12
 8004b92:	4313      	orrs	r3, r2
 8004b94:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004b96:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004b98:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8004b9a:	f023 0302 	bic.w	r3, r3, #2
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004ba2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004ba4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ba8:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004baa:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004bac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004bb0:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004bb2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004bb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004bb8:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
 8004bba:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004bbc:	f043 0301 	orr.w	r3, r3, #1
 8004bc0:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 8004bc2:	682b      	ldr	r3, [r5, #0]
 8004bc4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004bc8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004bca:	f7fd f941 	bl	8001e50 <HAL_GetTick>
 8004bce:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004bd0:	e005      	b.n	8004bde <HAL_RCC_OscConfig+0x446>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bd2:	f7fd f93d 	bl	8001e50 <HAL_GetTick>
 8004bd6:	1b00      	subs	r0, r0, r4
 8004bd8:	2802      	cmp	r0, #2
 8004bda:	f63f af3c 	bhi.w	8004a56 <HAL_RCC_OscConfig+0x2be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004bde:	6833      	ldr	r3, [r6, #0]
 8004be0:	019a      	lsls	r2, r3, #6
 8004be2:	d5f6      	bpl.n	8004bd2 <HAL_RCC_OscConfig+0x43a>
 8004be4:	e68e      	b.n	8004904 <HAL_RCC_OscConfig+0x16c>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004be6:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004be8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004bea:	6b2e      	ldr	r6, [r5, #48]	; 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004bec:	f43f ae8b 	beq.w	8004906 <HAL_RCC_OscConfig+0x16e>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bf0:	f002 0303 	and.w	r3, r2, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004bf4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8004bf6:	428b      	cmp	r3, r1
 8004bf8:	f47f aed7 	bne.w	80049aa <HAL_RCC_OscConfig+0x212>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004bfc:	f3c2 1205 	ubfx	r2, r2, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c00:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004c02:	429a      	cmp	r2, r3
 8004c04:	f47f aed1 	bne.w	80049aa <HAL_RCC_OscConfig+0x212>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004c08:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004c0a:	f3c6 0208 	ubfx	r2, r6, #0, #9
 8004c0e:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004c10:	429a      	cmp	r2, r3
 8004c12:	f47f aeca 	bne.w	80049aa <HAL_RCC_OscConfig+0x212>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004c16:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004c18:	f3c6 2246 	ubfx	r2, r6, #9, #7
 8004c1c:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	f47f aec3 	bne.w	80049aa <HAL_RCC_OscConfig+0x212>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004c24:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004c26:	f3c6 4206 	ubfx	r2, r6, #16, #7
 8004c2a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	f47f aebc 	bne.w	80049aa <HAL_RCC_OscConfig+0x212>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004c32:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004c34:	f3c6 6606 	ubfx	r6, r6, #24, #7
 8004c38:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004c3a:	429e      	cmp	r6, r3
 8004c3c:	f47f aeb5 	bne.w	80049aa <HAL_RCC_OscConfig+0x212>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004c40:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004c42:	6ca2      	ldr	r2, [r4, #72]	; 0x48
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004c44:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	f43f ae5b 	beq.w	8004904 <HAL_RCC_OscConfig+0x16c>
          __HAL_RCC_PLLFRACN_DISABLE();
 8004c4e:	4a1d      	ldr	r2, [pc, #116]	; (8004cc4 <HAL_RCC_OscConfig+0x52c>)
 8004c50:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004c52:	f023 0301 	bic.w	r3, r3, #1
 8004c56:	62d3      	str	r3, [r2, #44]	; 0x2c
          tickstart = HAL_GetTick();
 8004c58:	f7fd f8fa 	bl	8001e50 <HAL_GetTick>
 8004c5c:	4605      	mov	r5, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004c5e:	f7fd f8f7 	bl	8001e50 <HAL_GetTick>
 8004c62:	42a8      	cmp	r0, r5
 8004c64:	d0fb      	beq.n	8004c5e <HAL_RCC_OscConfig+0x4c6>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004c66:	4a17      	ldr	r2, [pc, #92]	; (8004cc4 <HAL_RCC_OscConfig+0x52c>)
  return HAL_OK;
 8004c68:	2000      	movs	r0, #0
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004c6a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8004c6c:	4b17      	ldr	r3, [pc, #92]	; (8004ccc <HAL_RCC_OscConfig+0x534>)
 8004c6e:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8004c70:	4023      	ands	r3, r4
 8004c72:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004c76:	6353      	str	r3, [r2, #52]	; 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
 8004c78:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004c7a:	f043 0301 	orr.w	r3, r3, #1
 8004c7e:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8004c80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c82:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004c86:	601a      	str	r2, [r3, #0]
 8004c88:	681a      	ldr	r2, [r3, #0]
 8004c8a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004c8e:	601a      	str	r2, [r3, #0]
 8004c90:	e5aa      	b.n	80047e8 <HAL_RCC_OscConfig+0x50>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c92:	4d0c      	ldr	r5, [pc, #48]	; (8004cc4 <HAL_RCC_OscConfig+0x52c>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c94:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c98:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8004c9a:	f023 0301 	bic.w	r3, r3, #1
 8004c9e:	672b      	str	r3, [r5, #112]	; 0x70
 8004ca0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8004ca2:	f023 0304 	bic.w	r3, r3, #4
 8004ca6:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8004ca8:	f7fd f8d2 	bl	8001e50 <HAL_GetTick>
 8004cac:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004cae:	e005      	b.n	8004cbc <HAL_RCC_OscConfig+0x524>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cb0:	f7fd f8ce 	bl	8001e50 <HAL_GetTick>
 8004cb4:	1b80      	subs	r0, r0, r6
 8004cb6:	42b8      	cmp	r0, r7
 8004cb8:	f63f aecd 	bhi.w	8004a56 <HAL_RCC_OscConfig+0x2be>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004cbc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8004cbe:	0798      	lsls	r0, r3, #30
 8004cc0:	d4f6      	bmi.n	8004cb0 <HAL_RCC_OscConfig+0x518>
 8004cc2:	e602      	b.n	80048ca <HAL_RCC_OscConfig+0x132>
 8004cc4:	58024400 	.word	0x58024400
 8004cc8:	fffffc0c 	.word	0xfffffc0c
 8004ccc:	ffff0007 	.word	0xffff0007
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004cd0:	4a06      	ldr	r2, [pc, #24]	; (8004cec <HAL_RCC_OscConfig+0x554>)
 8004cd2:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8004cd4:	f043 0301 	orr.w	r3, r3, #1
 8004cd8:	6713      	str	r3, [r2, #112]	; 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004cda:	e6ac      	b.n	8004a36 <HAL_RCC_OscConfig+0x29e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004cdc:	f042 0204 	orr.w	r2, r2, #4
 8004ce0:	671a      	str	r2, [r3, #112]	; 0x70
 8004ce2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004ce4:	f042 0201 	orr.w	r2, r2, #1
 8004ce8:	671a      	str	r2, [r3, #112]	; 0x70
 8004cea:	e6a4      	b.n	8004a36 <HAL_RCC_OscConfig+0x29e>
 8004cec:	58024400 	.word	0x58024400

08004cf0 <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004cf0:	4a48      	ldr	r2, [pc, #288]	; (8004e14 <HAL_RCC_GetSysClockFreq+0x124>)
 8004cf2:	6913      	ldr	r3, [r2, #16]
 8004cf4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004cf8:	2b10      	cmp	r3, #16
 8004cfa:	d004      	beq.n	8004d06 <HAL_RCC_GetSysClockFreq+0x16>
 8004cfc:	2b18      	cmp	r3, #24
 8004cfe:	d00d      	beq.n	8004d1c <HAL_RCC_GetSysClockFreq+0x2c>
 8004d00:	b11b      	cbz	r3, 8004d0a <HAL_RCC_GetSysClockFreq+0x1a>
      sysclockfreq = CSI_VALUE;
 8004d02:	4845      	ldr	r0, [pc, #276]	; (8004e18 <HAL_RCC_GetSysClockFreq+0x128>)
 8004d04:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d06:	4845      	ldr	r0, [pc, #276]	; (8004e1c <HAL_RCC_GetSysClockFreq+0x12c>)
 8004d08:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004d0a:	6813      	ldr	r3, [r2, #0]
 8004d0c:	0699      	lsls	r1, r3, #26
 8004d0e:	d54a      	bpl.n	8004da6 <HAL_RCC_GetSysClockFreq+0xb6>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004d10:	6813      	ldr	r3, [r2, #0]
 8004d12:	4843      	ldr	r0, [pc, #268]	; (8004e20 <HAL_RCC_GetSysClockFreq+0x130>)
 8004d14:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8004d18:	40d8      	lsrs	r0, r3
 8004d1a:	4770      	bx	lr
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004d1c:	6a93      	ldr	r3, [r2, #40]	; 0x28
{
 8004d1e:	b430      	push	{r4, r5}
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004d20:	6a94      	ldr	r4, [r2, #40]	; 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004d22:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
      if (pllm != 0U)
 8004d24:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004d28:	6b51      	ldr	r1, [r2, #52]	; 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004d2a:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
 8004d2e:	d038      	beq.n	8004da2 <HAL_RCC_GetSysClockFreq+0xb2>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004d30:	f3c1 01cc 	ubfx	r1, r1, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004d34:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004d38:	f003 0303 	and.w	r3, r3, #3
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004d3c:	fb05 f101 	mul.w	r1, r5, r1
 8004d40:	2b01      	cmp	r3, #1
 8004d42:	ee07 1a90 	vmov	s15, r1
 8004d46:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
        switch (pllsource)
 8004d4a:	d002      	beq.n	8004d52 <HAL_RCC_GetSysClockFreq+0x62>
 8004d4c:	2b02      	cmp	r3, #2
 8004d4e:	d02c      	beq.n	8004daa <HAL_RCC_GetSysClockFreq+0xba>
 8004d50:	b393      	cbz	r3, 8004db8 <HAL_RCC_GetSysClockFreq+0xc8>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004d52:	ee07 0a90 	vmov	s15, r0
 8004d56:	ed9f 5a33 	vldr	s10, [pc, #204]	; 8004e24 <HAL_RCC_GetSysClockFreq+0x134>
 8004d5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004d5e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8004d60:	eec5 6a27 	vdiv.f32	s13, s10, s15
 8004d64:	ed9f 6a30 	vldr	s12, [pc, #192]	; 8004e28 <HAL_RCC_GetSysClockFreq+0x138>
 8004d68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d6c:	ee07 3a90 	vmov	s15, r3
 8004d70:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8004d74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004d78:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8004d7c:	eee7 7a06 	vfma.f32	s15, s14, s12
 8004d80:	ee66 6aa7 	vmul.f32	s13, s13, s15
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004d84:	4b23      	ldr	r3, [pc, #140]	; (8004e14 <HAL_RCC_GetSysClockFreq+0x124>)
 8004d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d88:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8004d8c:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004d8e:	ee07 3a90 	vmov	s15, r3
 8004d92:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004d96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d9e:	ee17 0a90 	vmov	r0, s15
}
 8004da2:	bc30      	pop	{r4, r5}
 8004da4:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004da6:	481e      	ldr	r0, [pc, #120]	; (8004e20 <HAL_RCC_GetSysClockFreq+0x130>)
}
 8004da8:	4770      	bx	lr
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004daa:	ee07 0a90 	vmov	s15, r0
 8004dae:	ed9f 5a1f 	vldr	s10, [pc, #124]	; 8004e2c <HAL_RCC_GetSysClockFreq+0x13c>
 8004db2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004db6:	e7d2      	b.n	8004d5e <HAL_RCC_GetSysClockFreq+0x6e>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004db8:	6813      	ldr	r3, [r2, #0]
 8004dba:	069b      	lsls	r3, r3, #26
 8004dbc:	d522      	bpl.n	8004e04 <HAL_RCC_GetSysClockFreq+0x114>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004dbe:	6814      	ldr	r4, [r2, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004dc0:	ee07 0a90 	vmov	s15, r0
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004dc4:	4916      	ldr	r1, [pc, #88]	; (8004e20 <HAL_RCC_GetSysClockFreq+0x130>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004dc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004dca:	6b13      	ldr	r3, [r2, #48]	; 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004dcc:	f3c4 04c1 	ubfx	r4, r4, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004dd0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004dd4:	ed9f 5a14 	vldr	s10, [pc, #80]	; 8004e28 <HAL_RCC_GetSysClockFreq+0x138>
 8004dd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004ddc:	40e1      	lsrs	r1, r4
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004dde:	ee06 3a10 	vmov	s12, r3
 8004de2:	ee05 1a90 	vmov	s11, r1
 8004de6:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8004dea:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8004dee:	ee36 6a26 	vadd.f32	s12, s12, s13
 8004df2:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 8004df6:	eef0 7a46 	vmov.f32	s15, s12
 8004dfa:	eee7 7a05 	vfma.f32	s15, s14, s10
 8004dfe:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004e02:	e7bf      	b.n	8004d84 <HAL_RCC_GetSysClockFreq+0x94>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004e04:	ee07 0a90 	vmov	s15, r0
 8004e08:	ed9f 5a09 	vldr	s10, [pc, #36]	; 8004e30 <HAL_RCC_GetSysClockFreq+0x140>
 8004e0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e10:	e7a5      	b.n	8004d5e <HAL_RCC_GetSysClockFreq+0x6e>
 8004e12:	bf00      	nop
 8004e14:	58024400 	.word	0x58024400
 8004e18:	003d0900 	.word	0x003d0900
 8004e1c:	017d7840 	.word	0x017d7840
 8004e20:	03d09000 	.word	0x03d09000
 8004e24:	4a742400 	.word	0x4a742400
 8004e28:	39000000 	.word	0x39000000
 8004e2c:	4bbebc20 	.word	0x4bbebc20
 8004e30:	4c742400 	.word	0x4c742400

08004e34 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8004e34:	2800      	cmp	r0, #0
 8004e36:	f000 810c 	beq.w	8005052 <HAL_RCC_ClockConfig+0x21e>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004e3a:	4a8c      	ldr	r2, [pc, #560]	; (800506c <HAL_RCC_ClockConfig+0x238>)
 8004e3c:	6813      	ldr	r3, [r2, #0]
 8004e3e:	f003 030f 	and.w	r3, r3, #15
 8004e42:	428b      	cmp	r3, r1
{
 8004e44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e48:	4604      	mov	r4, r0
 8004e4a:	460d      	mov	r5, r1
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004e4c:	d20c      	bcs.n	8004e68 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e4e:	6813      	ldr	r3, [r2, #0]
 8004e50:	f023 030f 	bic.w	r3, r3, #15
 8004e54:	430b      	orrs	r3, r1
 8004e56:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e58:	6813      	ldr	r3, [r2, #0]
 8004e5a:	f003 030f 	and.w	r3, r3, #15
 8004e5e:	428b      	cmp	r3, r1
 8004e60:	d002      	beq.n	8004e68 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8004e62:	2001      	movs	r0, #1
}
 8004e64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004e68:	6823      	ldr	r3, [r4, #0]
 8004e6a:	075f      	lsls	r7, r3, #29
 8004e6c:	d50b      	bpl.n	8004e86 <HAL_RCC_ClockConfig+0x52>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004e6e:	4980      	ldr	r1, [pc, #512]	; (8005070 <HAL_RCC_ClockConfig+0x23c>)
 8004e70:	6920      	ldr	r0, [r4, #16]
 8004e72:	698a      	ldr	r2, [r1, #24]
 8004e74:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8004e78:	4290      	cmp	r0, r2
 8004e7a:	d904      	bls.n	8004e86 <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004e7c:	698a      	ldr	r2, [r1, #24]
 8004e7e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004e82:	4302      	orrs	r2, r0
 8004e84:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e86:	071e      	lsls	r6, r3, #28
 8004e88:	d50b      	bpl.n	8004ea2 <HAL_RCC_ClockConfig+0x6e>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004e8a:	4979      	ldr	r1, [pc, #484]	; (8005070 <HAL_RCC_ClockConfig+0x23c>)
 8004e8c:	6960      	ldr	r0, [r4, #20]
 8004e8e:	69ca      	ldr	r2, [r1, #28]
 8004e90:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8004e94:	4290      	cmp	r0, r2
 8004e96:	d904      	bls.n	8004ea2 <HAL_RCC_ClockConfig+0x6e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004e98:	69ca      	ldr	r2, [r1, #28]
 8004e9a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004e9e:	4302      	orrs	r2, r0
 8004ea0:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ea2:	06d8      	lsls	r0, r3, #27
 8004ea4:	d50b      	bpl.n	8004ebe <HAL_RCC_ClockConfig+0x8a>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004ea6:	4972      	ldr	r1, [pc, #456]	; (8005070 <HAL_RCC_ClockConfig+0x23c>)
 8004ea8:	69a0      	ldr	r0, [r4, #24]
 8004eaa:	69ca      	ldr	r2, [r1, #28]
 8004eac:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8004eb0:	4290      	cmp	r0, r2
 8004eb2:	d904      	bls.n	8004ebe <HAL_RCC_ClockConfig+0x8a>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004eb4:	69ca      	ldr	r2, [r1, #28]
 8004eb6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004eba:	4302      	orrs	r2, r0
 8004ebc:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004ebe:	0699      	lsls	r1, r3, #26
 8004ec0:	d50b      	bpl.n	8004eda <HAL_RCC_ClockConfig+0xa6>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004ec2:	496b      	ldr	r1, [pc, #428]	; (8005070 <HAL_RCC_ClockConfig+0x23c>)
 8004ec4:	69e0      	ldr	r0, [r4, #28]
 8004ec6:	6a0a      	ldr	r2, [r1, #32]
 8004ec8:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8004ecc:	4290      	cmp	r0, r2
 8004ece:	d904      	bls.n	8004eda <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004ed0:	6a0a      	ldr	r2, [r1, #32]
 8004ed2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004ed6:	4302      	orrs	r2, r0
 8004ed8:	620a      	str	r2, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004eda:	079a      	lsls	r2, r3, #30
 8004edc:	f140 80ab 	bpl.w	8005036 <HAL_RCC_ClockConfig+0x202>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004ee0:	4863      	ldr	r0, [pc, #396]	; (8005070 <HAL_RCC_ClockConfig+0x23c>)
 8004ee2:	68e1      	ldr	r1, [r4, #12]
 8004ee4:	6982      	ldr	r2, [r0, #24]
 8004ee6:	f002 020f 	and.w	r2, r2, #15
 8004eea:	4291      	cmp	r1, r2
 8004eec:	d904      	bls.n	8004ef8 <HAL_RCC_ClockConfig+0xc4>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004eee:	6982      	ldr	r2, [r0, #24]
 8004ef0:	f022 020f 	bic.w	r2, r2, #15
 8004ef4:	430a      	orrs	r2, r1
 8004ef6:	6182      	str	r2, [r0, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ef8:	07d8      	lsls	r0, r3, #31
 8004efa:	d530      	bpl.n	8004f5e <HAL_RCC_ClockConfig+0x12a>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004efc:	4a5c      	ldr	r2, [pc, #368]	; (8005070 <HAL_RCC_ClockConfig+0x23c>)
 8004efe:	68a1      	ldr	r1, [r4, #8]
 8004f00:	6993      	ldr	r3, [r2, #24]
 8004f02:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004f06:	430b      	orrs	r3, r1
 8004f08:	6193      	str	r3, [r2, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f0a:	6861      	ldr	r1, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004f0c:	6813      	ldr	r3, [r2, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f0e:	2902      	cmp	r1, #2
 8004f10:	f000 80a1 	beq.w	8005056 <HAL_RCC_ClockConfig+0x222>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f14:	2903      	cmp	r1, #3
 8004f16:	f000 8098 	beq.w	800504a <HAL_RCC_ClockConfig+0x216>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004f1a:	2901      	cmp	r1, #1
 8004f1c:	f000 80a1 	beq.w	8005062 <HAL_RCC_ClockConfig+0x22e>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004f20:	0758      	lsls	r0, r3, #29
 8004f22:	d59e      	bpl.n	8004e62 <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004f24:	4e52      	ldr	r6, [pc, #328]	; (8005070 <HAL_RCC_ClockConfig+0x23c>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f26:	f241 3888 	movw	r8, #5000	; 0x1388
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004f2a:	6933      	ldr	r3, [r6, #16]
 8004f2c:	f023 0307 	bic.w	r3, r3, #7
 8004f30:	430b      	orrs	r3, r1
 8004f32:	6133      	str	r3, [r6, #16]
    tickstart = HAL_GetTick();
 8004f34:	f7fc ff8c 	bl	8001e50 <HAL_GetTick>
 8004f38:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f3a:	e005      	b.n	8004f48 <HAL_RCC_ClockConfig+0x114>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f3c:	f7fc ff88 	bl	8001e50 <HAL_GetTick>
 8004f40:	1bc0      	subs	r0, r0, r7
 8004f42:	4540      	cmp	r0, r8
 8004f44:	f200 808b 	bhi.w	800505e <HAL_RCC_ClockConfig+0x22a>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f48:	6933      	ldr	r3, [r6, #16]
 8004f4a:	6862      	ldr	r2, [r4, #4]
 8004f4c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004f50:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8004f54:	d1f2      	bne.n	8004f3c <HAL_RCC_ClockConfig+0x108>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f56:	6823      	ldr	r3, [r4, #0]
 8004f58:	0799      	lsls	r1, r3, #30
 8004f5a:	d506      	bpl.n	8004f6a <HAL_RCC_ClockConfig+0x136>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004f5c:	68e1      	ldr	r1, [r4, #12]
 8004f5e:	4844      	ldr	r0, [pc, #272]	; (8005070 <HAL_RCC_ClockConfig+0x23c>)
 8004f60:	6982      	ldr	r2, [r0, #24]
 8004f62:	f002 020f 	and.w	r2, r2, #15
 8004f66:	428a      	cmp	r2, r1
 8004f68:	d869      	bhi.n	800503e <HAL_RCC_ClockConfig+0x20a>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004f6a:	4940      	ldr	r1, [pc, #256]	; (800506c <HAL_RCC_ClockConfig+0x238>)
 8004f6c:	680a      	ldr	r2, [r1, #0]
 8004f6e:	f002 020f 	and.w	r2, r2, #15
 8004f72:	42aa      	cmp	r2, r5
 8004f74:	d90a      	bls.n	8004f8c <HAL_RCC_ClockConfig+0x158>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f76:	680a      	ldr	r2, [r1, #0]
 8004f78:	f022 020f 	bic.w	r2, r2, #15
 8004f7c:	432a      	orrs	r2, r5
 8004f7e:	600a      	str	r2, [r1, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f80:	680a      	ldr	r2, [r1, #0]
 8004f82:	f002 020f 	and.w	r2, r2, #15
 8004f86:	42aa      	cmp	r2, r5
 8004f88:	f47f af6b 	bne.w	8004e62 <HAL_RCC_ClockConfig+0x2e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004f8c:	075a      	lsls	r2, r3, #29
 8004f8e:	d50b      	bpl.n	8004fa8 <HAL_RCC_ClockConfig+0x174>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004f90:	4937      	ldr	r1, [pc, #220]	; (8005070 <HAL_RCC_ClockConfig+0x23c>)
 8004f92:	6920      	ldr	r0, [r4, #16]
 8004f94:	698a      	ldr	r2, [r1, #24]
 8004f96:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8004f9a:	4290      	cmp	r0, r2
 8004f9c:	d204      	bcs.n	8004fa8 <HAL_RCC_ClockConfig+0x174>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004f9e:	698a      	ldr	r2, [r1, #24]
 8004fa0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004fa4:	4302      	orrs	r2, r0
 8004fa6:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fa8:	071f      	lsls	r7, r3, #28
 8004faa:	d50b      	bpl.n	8004fc4 <HAL_RCC_ClockConfig+0x190>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004fac:	4930      	ldr	r1, [pc, #192]	; (8005070 <HAL_RCC_ClockConfig+0x23c>)
 8004fae:	6960      	ldr	r0, [r4, #20]
 8004fb0:	69ca      	ldr	r2, [r1, #28]
 8004fb2:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8004fb6:	4290      	cmp	r0, r2
 8004fb8:	d204      	bcs.n	8004fc4 <HAL_RCC_ClockConfig+0x190>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004fba:	69ca      	ldr	r2, [r1, #28]
 8004fbc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004fc0:	4302      	orrs	r2, r0
 8004fc2:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fc4:	06de      	lsls	r6, r3, #27
 8004fc6:	d50b      	bpl.n	8004fe0 <HAL_RCC_ClockConfig+0x1ac>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004fc8:	4929      	ldr	r1, [pc, #164]	; (8005070 <HAL_RCC_ClockConfig+0x23c>)
 8004fca:	69a0      	ldr	r0, [r4, #24]
 8004fcc:	69ca      	ldr	r2, [r1, #28]
 8004fce:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8004fd2:	4290      	cmp	r0, r2
 8004fd4:	d204      	bcs.n	8004fe0 <HAL_RCC_ClockConfig+0x1ac>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004fd6:	69ca      	ldr	r2, [r1, #28]
 8004fd8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004fdc:	4302      	orrs	r2, r0
 8004fde:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004fe0:	069d      	lsls	r5, r3, #26
 8004fe2:	d50b      	bpl.n	8004ffc <HAL_RCC_ClockConfig+0x1c8>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004fe4:	4a22      	ldr	r2, [pc, #136]	; (8005070 <HAL_RCC_ClockConfig+0x23c>)
 8004fe6:	69e1      	ldr	r1, [r4, #28]
 8004fe8:	6a13      	ldr	r3, [r2, #32]
 8004fea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004fee:	4299      	cmp	r1, r3
 8004ff0:	d204      	bcs.n	8004ffc <HAL_RCC_ClockConfig+0x1c8>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004ff2:	6a13      	ldr	r3, [r2, #32]
 8004ff4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ff8:	430b      	orrs	r3, r1
 8004ffa:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004ffc:	f7ff fe78 	bl	8004cf0 <HAL_RCC_GetSysClockFreq>
 8005000:	4a1b      	ldr	r2, [pc, #108]	; (8005070 <HAL_RCC_ClockConfig+0x23c>)
 8005002:	4603      	mov	r3, r0
 8005004:	481b      	ldr	r0, [pc, #108]	; (8005074 <HAL_RCC_ClockConfig+0x240>)
 8005006:	6991      	ldr	r1, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005008:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800500a:	f3c1 2103 	ubfx	r1, r1, #8, #4
  SystemCoreClock = common_system_clock;
 800500e:	4d1a      	ldr	r5, [pc, #104]	; (8005078 <HAL_RCC_ClockConfig+0x244>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005010:	f002 020f 	and.w	r2, r2, #15
 8005014:	4c19      	ldr	r4, [pc, #100]	; (800507c <HAL_RCC_ClockConfig+0x248>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005016:	5c41      	ldrb	r1, [r0, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005018:	5c82      	ldrb	r2, [r0, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800501a:	f001 011f 	and.w	r1, r1, #31
  halstatus = HAL_InitTick(uwTickPrio);
 800501e:	4818      	ldr	r0, [pc, #96]	; (8005080 <HAL_RCC_ClockConfig+0x24c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005020:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005024:	40cb      	lsrs	r3, r1
  halstatus = HAL_InitTick(uwTickPrio);
 8005026:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = common_system_clock;
 8005028:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800502a:	40d3      	lsrs	r3, r2
 800502c:	6023      	str	r3, [r4, #0]
}
 800502e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
 8005032:	f7fc beab 	b.w	8001d8c <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005036:	07da      	lsls	r2, r3, #31
 8005038:	f53f af60 	bmi.w	8004efc <HAL_RCC_ClockConfig+0xc8>
 800503c:	e795      	b.n	8004f6a <HAL_RCC_ClockConfig+0x136>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800503e:	6982      	ldr	r2, [r0, #24]
 8005040:	f022 020f 	bic.w	r2, r2, #15
 8005044:	430a      	orrs	r2, r1
 8005046:	6182      	str	r2, [r0, #24]
 8005048:	e78f      	b.n	8004f6a <HAL_RCC_ClockConfig+0x136>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800504a:	019f      	lsls	r7, r3, #6
 800504c:	f53f af6a 	bmi.w	8004f24 <HAL_RCC_ClockConfig+0xf0>
 8005050:	e707      	b.n	8004e62 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8005052:	2001      	movs	r0, #1
}
 8005054:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005056:	039b      	lsls	r3, r3, #14
 8005058:	f53f af64 	bmi.w	8004f24 <HAL_RCC_ClockConfig+0xf0>
 800505c:	e701      	b.n	8004e62 <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 800505e:	2003      	movs	r0, #3
 8005060:	e700      	b.n	8004e64 <HAL_RCC_ClockConfig+0x30>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005062:	05de      	lsls	r6, r3, #23
 8005064:	f53f af5e 	bmi.w	8004f24 <HAL_RCC_ClockConfig+0xf0>
 8005068:	e6fb      	b.n	8004e62 <HAL_RCC_ClockConfig+0x2e>
 800506a:	bf00      	nop
 800506c:	52002000 	.word	0x52002000
 8005070:	58024400 	.word	0x58024400
 8005074:	0800d5f0 	.word	0x0800d5f0
 8005078:	24000000 	.word	0x24000000
 800507c:	24000004 	.word	0x24000004
 8005080:	2400000c 	.word	0x2400000c

08005084 <HAL_RCC_GetHCLKFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005084:	4a18      	ldr	r2, [pc, #96]	; (80050e8 <HAL_RCC_GetHCLKFreq+0x64>)
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005086:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005088:	6913      	ldr	r3, [r2, #16]
 800508a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800508e:	2b10      	cmp	r3, #16
 8005090:	d01a      	beq.n	80050c8 <HAL_RCC_GetHCLKFreq+0x44>
 8005092:	2b18      	cmp	r3, #24
 8005094:	d023      	beq.n	80050de <HAL_RCC_GetHCLKFreq+0x5a>
 8005096:	b1cb      	cbz	r3, 80050cc <HAL_RCC_GetHCLKFreq+0x48>
      sysclockfreq = CSI_VALUE;
 8005098:	4814      	ldr	r0, [pc, #80]	; (80050ec <HAL_RCC_GetHCLKFreq+0x68>)
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800509a:	4b13      	ldr	r3, [pc, #76]	; (80050e8 <HAL_RCC_GetHCLKFreq+0x64>)
 800509c:	4914      	ldr	r1, [pc, #80]	; (80050f0 <HAL_RCC_GetHCLKFreq+0x6c>)
 800509e:	699a      	ldr	r2, [r3, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80050a0:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80050a2:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80050a6:	4c13      	ldr	r4, [pc, #76]	; (80050f4 <HAL_RCC_GetHCLKFreq+0x70>)
 80050a8:	f003 030f 	and.w	r3, r3, #15
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80050ac:	4d12      	ldr	r5, [pc, #72]	; (80050f8 <HAL_RCC_GetHCLKFreq+0x74>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80050ae:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80050b0:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80050b2:	f002 021f 	and.w	r2, r2, #31
 80050b6:	fa20 f202 	lsr.w	r2, r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80050ba:	f003 001f 	and.w	r0, r3, #31
 80050be:	fa22 f000 	lsr.w	r0, r2, r0
  SystemCoreClock = common_system_clock;
 80050c2:	602a      	str	r2, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80050c4:	6020      	str	r0, [r4, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 80050c6:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80050c8:	480c      	ldr	r0, [pc, #48]	; (80050fc <HAL_RCC_GetHCLKFreq+0x78>)
 80050ca:	e7e6      	b.n	800509a <HAL_RCC_GetHCLKFreq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80050cc:	6813      	ldr	r3, [r2, #0]
 80050ce:	069b      	lsls	r3, r3, #26
 80050d0:	d508      	bpl.n	80050e4 <HAL_RCC_GetHCLKFreq+0x60>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80050d2:	6813      	ldr	r3, [r2, #0]
 80050d4:	480a      	ldr	r0, [pc, #40]	; (8005100 <HAL_RCC_GetHCLKFreq+0x7c>)
 80050d6:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80050da:	40d8      	lsrs	r0, r3
 80050dc:	e7dd      	b.n	800509a <HAL_RCC_GetHCLKFreq+0x16>
 80050de:	f7ff fad5 	bl	800468c <HAL_RCC_GetSysClockFreq.part.0>
 80050e2:	e7da      	b.n	800509a <HAL_RCC_GetHCLKFreq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80050e4:	4806      	ldr	r0, [pc, #24]	; (8005100 <HAL_RCC_GetHCLKFreq+0x7c>)
 80050e6:	e7d8      	b.n	800509a <HAL_RCC_GetHCLKFreq+0x16>
 80050e8:	58024400 	.word	0x58024400
 80050ec:	003d0900 	.word	0x003d0900
 80050f0:	0800d5f0 	.word	0x0800d5f0
 80050f4:	24000004 	.word	0x24000004
 80050f8:	24000000 	.word	0x24000000
 80050fc:	017d7840 	.word	0x017d7840
 8005100:	03d09000 	.word	0x03d09000

08005104 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005106:	4c3a      	ldr	r4, [pc, #232]	; (80051f0 <RCCEx_PLL2_Config+0xec>)
 8005108:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800510a:	f003 0303 	and.w	r3, r3, #3
 800510e:	2b03      	cmp	r3, #3
 8005110:	d067      	beq.n	80051e2 <RCCEx_PLL2_Config+0xde>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005112:	6823      	ldr	r3, [r4, #0]
 8005114:	4606      	mov	r6, r0
 8005116:	460f      	mov	r7, r1
 8005118:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800511c:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800511e:	f7fc fe97 	bl	8001e50 <HAL_GetTick>
 8005122:	4605      	mov	r5, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005124:	e004      	b.n	8005130 <RCCEx_PLL2_Config+0x2c>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005126:	f7fc fe93 	bl	8001e50 <HAL_GetTick>
 800512a:	1b43      	subs	r3, r0, r5
 800512c:	2b02      	cmp	r3, #2
 800512e:	d856      	bhi.n	80051de <RCCEx_PLL2_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005130:	6823      	ldr	r3, [r4, #0]
 8005132:	011a      	lsls	r2, r3, #4
 8005134:	d4f7      	bmi.n	8005126 <RCCEx_PLL2_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005136:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005138:	6832      	ldr	r2, [r6, #0]
 800513a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800513e:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8005142:	62a3      	str	r3, [r4, #40]	; 0x28
 8005144:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 8005148:	3b01      	subs	r3, #1
 800514a:	3a01      	subs	r2, #1
 800514c:	025b      	lsls	r3, r3, #9
 800514e:	0412      	lsls	r2, r2, #16
 8005150:	b29b      	uxth	r3, r3
 8005152:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8005156:	4313      	orrs	r3, r2
 8005158:	6872      	ldr	r2, [r6, #4]
 800515a:	3a01      	subs	r2, #1
 800515c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005160:	4313      	orrs	r3, r2
 8005162:	6932      	ldr	r2, [r6, #16]
 8005164:	3a01      	subs	r2, #1
 8005166:	0612      	lsls	r2, r2, #24
 8005168:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800516c:	4313      	orrs	r3, r2
 800516e:	63a3      	str	r3, [r4, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005170:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005172:	6972      	ldr	r2, [r6, #20]
 8005174:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005178:	4313      	orrs	r3, r2
 800517a:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800517c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800517e:	69b3      	ldr	r3, [r6, #24]
 8005180:	f022 0220 	bic.w	r2, r2, #32
 8005184:	431a      	orrs	r2, r3

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005186:	4b1b      	ldr	r3, [pc, #108]	; (80051f4 <RCCEx_PLL2_Config+0xf0>)
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005188:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 800518a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800518c:	f022 0210 	bic.w	r2, r2, #16
 8005190:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005192:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8005194:	69f2      	ldr	r2, [r6, #28]
 8005196:	400b      	ands	r3, r1
 8005198:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800519c:	63e3      	str	r3, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800519e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80051a0:	f043 0310 	orr.w	r3, r3, #16
 80051a4:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80051a6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 80051a8:	b1ef      	cbz	r7, 80051e6 <RCCEx_PLL2_Config+0xe2>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80051aa:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80051ac:	bf0c      	ite	eq
 80051ae:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80051b2:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 80051b6:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80051b8:	4c0d      	ldr	r4, [pc, #52]	; (80051f0 <RCCEx_PLL2_Config+0xec>)
 80051ba:	6823      	ldr	r3, [r4, #0]
 80051bc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80051c0:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051c2:	f7fc fe45 	bl	8001e50 <HAL_GetTick>
 80051c6:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80051c8:	e004      	b.n	80051d4 <RCCEx_PLL2_Config+0xd0>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80051ca:	f7fc fe41 	bl	8001e50 <HAL_GetTick>
 80051ce:	1b40      	subs	r0, r0, r5
 80051d0:	2802      	cmp	r0, #2
 80051d2:	d804      	bhi.n	80051de <RCCEx_PLL2_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80051d4:	6823      	ldr	r3, [r4, #0]
 80051d6:	011b      	lsls	r3, r3, #4
 80051d8:	d5f7      	bpl.n	80051ca <RCCEx_PLL2_Config+0xc6>
    }

  }


  return status;
 80051da:	2000      	movs	r0, #0
}
 80051dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 80051de:	2003      	movs	r0, #3
}
 80051e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 80051e2:	2001      	movs	r0, #1
}
 80051e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80051e6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80051ea:	62e3      	str	r3, [r4, #44]	; 0x2c
 80051ec:	e7e4      	b.n	80051b8 <RCCEx_PLL2_Config+0xb4>
 80051ee:	bf00      	nop
 80051f0:	58024400 	.word	0x58024400
 80051f4:	ffff0007 	.word	0xffff0007

080051f8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80051f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80051fa:	4c3a      	ldr	r4, [pc, #232]	; (80052e4 <RCCEx_PLL3_Config+0xec>)
 80051fc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80051fe:	f003 0303 	and.w	r3, r3, #3
 8005202:	2b03      	cmp	r3, #3
 8005204:	d067      	beq.n	80052d6 <RCCEx_PLL3_Config+0xde>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005206:	6823      	ldr	r3, [r4, #0]
 8005208:	4606      	mov	r6, r0
 800520a:	460f      	mov	r7, r1
 800520c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005210:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005212:	f7fc fe1d 	bl	8001e50 <HAL_GetTick>
 8005216:	4605      	mov	r5, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005218:	e004      	b.n	8005224 <RCCEx_PLL3_Config+0x2c>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800521a:	f7fc fe19 	bl	8001e50 <HAL_GetTick>
 800521e:	1b43      	subs	r3, r0, r5
 8005220:	2b02      	cmp	r3, #2
 8005222:	d856      	bhi.n	80052d2 <RCCEx_PLL3_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005224:	6823      	ldr	r3, [r4, #0]
 8005226:	009a      	lsls	r2, r3, #2
 8005228:	d4f7      	bmi.n	800521a <RCCEx_PLL3_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800522a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800522c:	6832      	ldr	r2, [r6, #0]
 800522e:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8005232:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8005236:	62a3      	str	r3, [r4, #40]	; 0x28
 8005238:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 800523c:	3b01      	subs	r3, #1
 800523e:	3a01      	subs	r2, #1
 8005240:	025b      	lsls	r3, r3, #9
 8005242:	0412      	lsls	r2, r2, #16
 8005244:	b29b      	uxth	r3, r3
 8005246:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800524a:	4313      	orrs	r3, r2
 800524c:	6872      	ldr	r2, [r6, #4]
 800524e:	3a01      	subs	r2, #1
 8005250:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005254:	4313      	orrs	r3, r2
 8005256:	6932      	ldr	r2, [r6, #16]
 8005258:	3a01      	subs	r2, #1
 800525a:	0612      	lsls	r2, r2, #24
 800525c:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8005260:	4313      	orrs	r3, r2
 8005262:	6423      	str	r3, [r4, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005264:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005266:	6972      	ldr	r2, [r6, #20]
 8005268:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800526c:	4313      	orrs	r3, r2
 800526e:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005270:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005272:	69b3      	ldr	r3, [r6, #24]
 8005274:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005278:	431a      	orrs	r2, r3

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800527a:	4b1b      	ldr	r3, [pc, #108]	; (80052e8 <RCCEx_PLL3_Config+0xf0>)
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800527c:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 800527e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005280:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005284:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005286:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8005288:	69f2      	ldr	r2, [r6, #28]
 800528a:	400b      	ands	r3, r1
 800528c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8005290:	6463      	str	r3, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005292:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005294:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005298:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800529a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 800529c:	b1ef      	cbz	r7, 80052da <RCCEx_PLL3_Config+0xe2>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800529e:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80052a0:	bf0c      	ite	eq
 80052a2:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80052a6:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 80052aa:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80052ac:	4c0d      	ldr	r4, [pc, #52]	; (80052e4 <RCCEx_PLL3_Config+0xec>)
 80052ae:	6823      	ldr	r3, [r4, #0]
 80052b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052b4:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052b6:	f7fc fdcb 	bl	8001e50 <HAL_GetTick>
 80052ba:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80052bc:	e004      	b.n	80052c8 <RCCEx_PLL3_Config+0xd0>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80052be:	f7fc fdc7 	bl	8001e50 <HAL_GetTick>
 80052c2:	1b40      	subs	r0, r0, r5
 80052c4:	2802      	cmp	r0, #2
 80052c6:	d804      	bhi.n	80052d2 <RCCEx_PLL3_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80052c8:	6823      	ldr	r3, [r4, #0]
 80052ca:	009b      	lsls	r3, r3, #2
 80052cc:	d5f7      	bpl.n	80052be <RCCEx_PLL3_Config+0xc6>
    }

  }


  return status;
 80052ce:	2000      	movs	r0, #0
}
 80052d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 80052d2:	2003      	movs	r0, #3
}
 80052d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 80052d6:	2001      	movs	r0, #1
}
 80052d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80052da:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80052de:	62e3      	str	r3, [r4, #44]	; 0x2c
 80052e0:	e7e4      	b.n	80052ac <RCCEx_PLL3_Config+0xb4>
 80052e2:	bf00      	nop
 80052e4:	58024400 	.word	0x58024400
 80052e8:	ffff0007 	.word	0xffff0007

080052ec <HAL_RCCEx_PeriphCLKConfig>:
{
 80052ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80052f0:	e9d0 3200 	ldrd	r3, r2, [r0]
{
 80052f4:	4604      	mov	r4, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80052f6:	0118      	lsls	r0, r3, #4
 80052f8:	f003 6600 	and.w	r6, r3, #134217728	; 0x8000000
 80052fc:	d51e      	bpl.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x50>
    switch (PeriphClkInit->SpdifrxClockSelection)
 80052fe:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8005300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8005304:	f000 84f6 	beq.w	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0xa08>
 8005308:	d825      	bhi.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800530a:	2900      	cmp	r1, #0
 800530c:	f000 8422 	beq.w	8005b54 <HAL_RCCEx_PeriphCLKConfig+0x868>
 8005310:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8005314:	d122      	bne.n	800535c <HAL_RCCEx_PeriphCLKConfig+0x70>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005316:	2102      	movs	r1, #2
 8005318:	f104 0008 	add.w	r0, r4, #8
 800531c:	f7ff fef2 	bl	8005104 <RCCEx_PLL2_Config>
 8005320:	4606      	mov	r6, r0
    if (ret == HAL_OK)
 8005322:	2e00      	cmp	r6, #0
 8005324:	f040 8527 	bne.w	8005d76 <HAL_RCCEx_PeriphCLKConfig+0xa8a>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005328:	6e61      	ldr	r1, [r4, #100]	; 0x64
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800532a:	e9d4 3200 	ldrd	r3, r2, [r4]
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800532e:	4d9e      	ldr	r5, [pc, #632]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005330:	2600      	movs	r6, #0
 8005332:	6d28      	ldr	r0, [r5, #80]	; 0x50
 8005334:	f420 1040 	bic.w	r0, r0, #3145728	; 0x300000
 8005338:	4301      	orrs	r1, r0
 800533a:	6529      	str	r1, [r5, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800533c:	05d9      	lsls	r1, r3, #23
 800533e:	d511      	bpl.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x78>
    switch (PeriphClkInit->Sai1ClockSelection)
 8005340:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8005342:	2904      	cmp	r1, #4
 8005344:	f200 857a 	bhi.w	8005e3c <HAL_RCCEx_PeriphCLKConfig+0xb50>
 8005348:	e8df f011 	tbh	[pc, r1, lsl #1]
 800534c:	04e504de 	.word	0x04e504de
 8005350:	02f604ee 	.word	0x02f604ee
 8005354:	02f6      	.short	0x02f6
    switch (PeriphClkInit->SpdifrxClockSelection)
 8005356:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
 800535a:	d0e8      	beq.n	800532e <HAL_RCCEx_PeriphCLKConfig+0x42>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800535c:	05d9      	lsls	r1, r3, #23
    switch (PeriphClkInit->SpdifrxClockSelection)
 800535e:	f04f 0601 	mov.w	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005362:	d4ed      	bmi.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0x54>
    switch (PeriphClkInit->Sai1ClockSelection)
 8005364:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005366:	055f      	lsls	r7, r3, #21
 8005368:	d521      	bpl.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0xc2>
    switch (PeriphClkInit->Sai4AClockSelection)
 800536a:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 800536e:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 8005372:	f000 84f6 	beq.w	8005d62 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8005376:	f200 80d6 	bhi.w	8005526 <HAL_RCCEx_PeriphCLKConfig+0x23a>
 800537a:	2900      	cmp	r1, #0
 800537c:	f000 83fd 	beq.w	8005b7a <HAL_RCCEx_PeriphCLKConfig+0x88e>
 8005380:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8005384:	f040 80d9 	bne.w	800553a <HAL_RCCEx_PeriphCLKConfig+0x24e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005388:	2100      	movs	r1, #0
 800538a:	f104 0008 	add.w	r0, r4, #8
 800538e:	f7ff feb9 	bl	8005104 <RCCEx_PLL2_Config>
 8005392:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005394:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005398:	2d00      	cmp	r5, #0
 800539a:	f040 83c3 	bne.w	8005b24 <HAL_RCCEx_PeriphCLKConfig+0x838>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800539e:	4f82      	ldr	r7, [pc, #520]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80053a0:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
 80053a4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80053a6:	f421 0160 	bic.w	r1, r1, #14680064	; 0xe00000
 80053aa:	4301      	orrs	r1, r0
 80053ac:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80053ae:	0518      	lsls	r0, r3, #20
 80053b0:	d521      	bpl.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0x10a>
    switch (PeriphClkInit->Sai4BClockSelection)
 80053b2:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 80053b6:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 80053ba:	f000 84be 	beq.w	8005d3a <HAL_RCCEx_PeriphCLKConfig+0xa4e>
 80053be:	f200 80bf 	bhi.w	8005540 <HAL_RCCEx_PeriphCLKConfig+0x254>
 80053c2:	2900      	cmp	r1, #0
 80053c4:	f000 83cd 	beq.w	8005b62 <HAL_RCCEx_PeriphCLKConfig+0x876>
 80053c8:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 80053cc:	f040 80c2 	bne.w	8005554 <HAL_RCCEx_PeriphCLKConfig+0x268>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80053d0:	2100      	movs	r1, #0
 80053d2:	f104 0008 	add.w	r0, r4, #8
 80053d6:	f7ff fe95 	bl	8005104 <RCCEx_PLL2_Config>
 80053da:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80053dc:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80053e0:	2d00      	cmp	r5, #0
 80053e2:	f040 83a3 	bne.w	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x840>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80053e6:	4f70      	ldr	r7, [pc, #448]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80053e8:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
 80053ec:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80053ee:	f021 61e0 	bic.w	r1, r1, #117440512	; 0x7000000
 80053f2:	4301      	orrs	r1, r0
 80053f4:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80053f6:	0199      	lsls	r1, r3, #6
 80053f8:	d518      	bpl.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x140>
    switch (PeriphClkInit->OspiClockSelection)
 80053fa:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80053fc:	2920      	cmp	r1, #32
 80053fe:	f000 8447 	beq.w	8005c90 <HAL_RCCEx_PeriphCLKConfig+0x9a4>
 8005402:	f200 80aa 	bhi.w	800555a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8005406:	b139      	cbz	r1, 8005418 <HAL_RCCEx_PeriphCLKConfig+0x12c>
 8005408:	2910      	cmp	r1, #16
 800540a:	f040 80a9 	bne.w	8005560 <HAL_RCCEx_PeriphCLKConfig+0x274>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800540e:	4866      	ldr	r0, [pc, #408]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005410:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8005412:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8005416:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
 8005418:	2d00      	cmp	r5, #0
 800541a:	f040 83b6 	bne.w	8005b8a <HAL_RCCEx_PeriphCLKConfig+0x89e>
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800541e:	4f62      	ldr	r7, [pc, #392]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005420:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8005422:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8005424:	f021 0130 	bic.w	r1, r1, #48	; 0x30
 8005428:	4301      	orrs	r1, r0
 800542a:	64f9      	str	r1, [r7, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800542c:	04df      	lsls	r7, r3, #19
 800542e:	d51f      	bpl.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x184>
    switch (PeriphClkInit->Spi123ClockSelection)
 8005430:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8005432:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 8005436:	f000 848a 	beq.w	8005d4e <HAL_RCCEx_PeriphCLKConfig+0xa62>
 800543a:	f200 8094 	bhi.w	8005566 <HAL_RCCEx_PeriphCLKConfig+0x27a>
 800543e:	2900      	cmp	r1, #0
 8005440:	f000 8395 	beq.w	8005b6e <HAL_RCCEx_PeriphCLKConfig+0x882>
 8005444:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8005448:	f040 8095 	bne.w	8005576 <HAL_RCCEx_PeriphCLKConfig+0x28a>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800544c:	2100      	movs	r1, #0
 800544e:	f104 0008 	add.w	r0, r4, #8
 8005452:	f7ff fe57 	bl	8005104 <RCCEx_PLL2_Config>
 8005456:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005458:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800545c:	2d00      	cmp	r5, #0
 800545e:	f040 8363 	bne.w	8005b28 <HAL_RCCEx_PeriphCLKConfig+0x83c>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005462:	4f51      	ldr	r7, [pc, #324]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005464:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8005466:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005468:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 800546c:	4301      	orrs	r1, r0
 800546e:	6539      	str	r1, [r7, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005470:	0498      	lsls	r0, r3, #18
 8005472:	d51c      	bpl.n	80054ae <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    switch (PeriphClkInit->Spi45ClockSelection)
 8005474:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8005476:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 800547a:	f000 83f3 	beq.w	8005c64 <HAL_RCCEx_PeriphCLKConfig+0x978>
 800547e:	d87d      	bhi.n	800557c <HAL_RCCEx_PeriphCLKConfig+0x290>
 8005480:	b159      	cbz	r1, 800549a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8005482:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8005486:	f040 8081 	bne.w	800558c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800548a:	2101      	movs	r1, #1
 800548c:	f104 0008 	add.w	r0, r4, #8
 8005490:	f7ff fe38 	bl	8005104 <RCCEx_PLL2_Config>
 8005494:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005496:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800549a:	2d00      	cmp	r5, #0
 800549c:	f040 8385 	bne.w	8005baa <HAL_RCCEx_PeriphCLKConfig+0x8be>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80054a0:	4f41      	ldr	r7, [pc, #260]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80054a2:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80054a4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80054a6:	f421 21e0 	bic.w	r1, r1, #458752	; 0x70000
 80054aa:	4301      	orrs	r1, r0
 80054ac:	6539      	str	r1, [r7, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80054ae:	0459      	lsls	r1, r3, #17
 80054b0:	d51d      	bpl.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x202>
    switch (PeriphClkInit->Spi6ClockSelection)
 80054b2:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 80054b6:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 80054ba:	f000 83de 	beq.w	8005c7a <HAL_RCCEx_PeriphCLKConfig+0x98e>
 80054be:	d868      	bhi.n	8005592 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80054c0:	b151      	cbz	r1, 80054d8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 80054c2:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 80054c6:	d16c      	bne.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80054c8:	2101      	movs	r1, #1
 80054ca:	f104 0008 	add.w	r0, r4, #8
 80054ce:	f7ff fe19 	bl	8005104 <RCCEx_PLL2_Config>
 80054d2:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80054d4:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80054d8:	2d00      	cmp	r5, #0
 80054da:	f040 8364 	bne.w	8005ba6 <HAL_RCCEx_PeriphCLKConfig+0x8ba>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80054de:	4f32      	ldr	r7, [pc, #200]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80054e0:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 80054e4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80054e6:	f021 41e0 	bic.w	r1, r1, #1879048192	; 0x70000000
 80054ea:	4301      	orrs	r1, r0
 80054ec:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80054ee:	041f      	lsls	r7, r3, #16
 80054f0:	d50d      	bpl.n	800550e <HAL_RCCEx_PeriphCLKConfig+0x222>
    switch (PeriphClkInit->FdcanClockSelection)
 80054f2:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 80054f4:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 80054f8:	f000 8386 	beq.w	8005c08 <HAL_RCCEx_PeriphCLKConfig+0x91c>
 80054fc:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8005500:	f000 823c 	beq.w	800597c <HAL_RCCEx_PeriphCLKConfig+0x690>
 8005504:	2900      	cmp	r1, #0
 8005506:	f000 8241 	beq.w	800598c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
 800550a:	2601      	movs	r6, #1
 800550c:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800550e:	01d8      	lsls	r0, r3, #7
 8005510:	d55b      	bpl.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0x2de>
    switch (PeriphClkInit->FmcClockSelection)
 8005512:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005514:	2903      	cmp	r1, #3
 8005516:	f200 8494 	bhi.w	8005e42 <HAL_RCCEx_PeriphCLKConfig+0xb56>
 800551a:	e8df f011 	tbh	[pc, r1, lsl #1]
 800551e:	004c      	.short	0x004c
 8005520:	037d0047 	.word	0x037d0047
 8005524:	004c      	.short	0x004c
    switch (PeriphClkInit->Sai4AClockSelection)
 8005526:	f421 1000 	bic.w	r0, r1, #2097152	; 0x200000
 800552a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 800552e:	f43f af33 	beq.w	8005398 <HAL_RCCEx_PeriphCLKConfig+0xac>
 8005532:	f5b1 0fc0 	cmp.w	r1, #6291456	; 0x600000
 8005536:	f43f af2f 	beq.w	8005398 <HAL_RCCEx_PeriphCLKConfig+0xac>
 800553a:	2601      	movs	r6, #1
 800553c:	4635      	mov	r5, r6
 800553e:	e736      	b.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0xc2>
    switch (PeriphClkInit->Sai4BClockSelection)
 8005540:	f021 7080 	bic.w	r0, r1, #16777216	; 0x1000000
 8005544:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
 8005548:	f43f af4a 	beq.w	80053e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800554c:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 8005550:	f43f af46 	beq.w	80053e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005554:	2601      	movs	r6, #1
 8005556:	4635      	mov	r5, r6
 8005558:	e74d      	b.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0x10a>
    switch (PeriphClkInit->OspiClockSelection)
 800555a:	2930      	cmp	r1, #48	; 0x30
 800555c:	f43f af5c 	beq.w	8005418 <HAL_RCCEx_PeriphCLKConfig+0x12c>
 8005560:	2601      	movs	r6, #1
 8005562:	4635      	mov	r5, r6
 8005564:	e762      	b.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x140>
    switch (PeriphClkInit->Spi123ClockSelection)
 8005566:	f5b1 5f40 	cmp.w	r1, #12288	; 0x3000
 800556a:	f43f af77 	beq.w	800545c <HAL_RCCEx_PeriphCLKConfig+0x170>
 800556e:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 8005572:	f43f af73 	beq.w	800545c <HAL_RCCEx_PeriphCLKConfig+0x170>
 8005576:	2601      	movs	r6, #1
 8005578:	4635      	mov	r5, r6
 800557a:	e779      	b.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x184>
    switch (PeriphClkInit->Spi45ClockSelection)
 800557c:	f421 3080 	bic.w	r0, r1, #65536	; 0x10000
 8005580:	f5b0 2f80 	cmp.w	r0, #262144	; 0x40000
 8005584:	d089      	beq.n	800549a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8005586:	f5b1 3f40 	cmp.w	r1, #196608	; 0x30000
 800558a:	d086      	beq.n	800549a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 800558c:	2601      	movs	r6, #1
 800558e:	4635      	mov	r5, r6
 8005590:	e78d      	b.n	80054ae <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    switch (PeriphClkInit->Spi6ClockSelection)
 8005592:	f021 5080 	bic.w	r0, r1, #268435456	; 0x10000000
 8005596:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800559a:	d09d      	beq.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 800559c:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
 80055a0:	d09a      	beq.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 80055a2:	2601      	movs	r6, #1
 80055a4:	4635      	mov	r5, r6
 80055a6:	e7a2      	b.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x202>
 80055a8:	58024400 	.word	0x58024400
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055ac:	4839      	ldr	r0, [pc, #228]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 80055ae:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80055b0:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 80055b4:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
 80055b6:	2d00      	cmp	r5, #0
 80055b8:	f040 82f9 	bne.w	8005bae <HAL_RCCEx_PeriphCLKConfig+0x8c2>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80055bc:	4f35      	ldr	r7, [pc, #212]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 80055be:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80055c0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80055c2:	f021 0103 	bic.w	r1, r1, #3
 80055c6:	4301      	orrs	r1, r0
 80055c8:	64f9      	str	r1, [r7, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80055ca:	0259      	lsls	r1, r3, #9
 80055cc:	f100 8210 	bmi.w	80059f0 <HAL_RCCEx_PeriphCLKConfig+0x704>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80055d0:	07d9      	lsls	r1, r3, #31
 80055d2:	d52f      	bpl.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x348>
    switch (PeriphClkInit->Usart16ClockSelection)
 80055d4:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 80055d6:	2928      	cmp	r1, #40	; 0x28
 80055d8:	d82a      	bhi.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80055da:	e8df f011 	tbh	[pc, r1, lsl #1]
 80055de:	01fe      	.short	0x01fe
 80055e0:	00290029 	.word	0x00290029
 80055e4:	00290029 	.word	0x00290029
 80055e8:	00290029 	.word	0x00290029
 80055ec:	01f60029 	.word	0x01f60029
 80055f0:	00290029 	.word	0x00290029
 80055f4:	00290029 	.word	0x00290029
 80055f8:	00290029 	.word	0x00290029
 80055fc:	03e80029 	.word	0x03e80029
 8005600:	00290029 	.word	0x00290029
 8005604:	00290029 	.word	0x00290029
 8005608:	00290029 	.word	0x00290029
 800560c:	01fe0029 	.word	0x01fe0029
 8005610:	00290029 	.word	0x00290029
 8005614:	00290029 	.word	0x00290029
 8005618:	00290029 	.word	0x00290029
 800561c:	01fe0029 	.word	0x01fe0029
 8005620:	00290029 	.word	0x00290029
 8005624:	00290029 	.word	0x00290029
 8005628:	00290029 	.word	0x00290029
 800562c:	01fe0029 	.word	0x01fe0029
 8005630:	2601      	movs	r6, #1
 8005632:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005634:	079f      	lsls	r7, r3, #30
 8005636:	d51d      	bpl.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0x388>
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005638:	6f61      	ldr	r1, [r4, #116]	; 0x74
 800563a:	2905      	cmp	r1, #5
 800563c:	f200 83fb 	bhi.w	8005e36 <HAL_RCCEx_PeriphCLKConfig+0xb4a>
 8005640:	e8df f011 	tbh	[pc, r1, lsl #1]
 8005644:	0006000e 	.word	0x0006000e
 8005648:	000e03a9 	.word	0x000e03a9
 800564c:	000e000e 	.word	0x000e000e
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005650:	2101      	movs	r1, #1
 8005652:	f104 0008 	add.w	r0, r4, #8
 8005656:	f7ff fd55 	bl	8005104 <RCCEx_PLL2_Config>
 800565a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800565c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005660:	2d00      	cmp	r5, #0
 8005662:	f040 829c 	bne.w	8005b9e <HAL_RCCEx_PeriphCLKConfig+0x8b2>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005666:	4f0b      	ldr	r7, [pc, #44]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 8005668:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800566a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800566c:	f021 0107 	bic.w	r1, r1, #7
 8005670:	4301      	orrs	r1, r0
 8005672:	6579      	str	r1, [r7, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005674:	0758      	lsls	r0, r3, #29
 8005676:	d522      	bpl.n	80056be <HAL_RCCEx_PeriphCLKConfig+0x3d2>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005678:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 800567c:	2905      	cmp	r1, #5
 800567e:	f200 83d7 	bhi.w	8005e30 <HAL_RCCEx_PeriphCLKConfig+0xb44>
 8005682:	e8df f011 	tbh	[pc, r1, lsl #1]
 8005686:	0011      	.short	0x0011
 8005688:	037c0009 	.word	0x037c0009
 800568c:	00110011 	.word	0x00110011
 8005690:	0011      	.short	0x0011
 8005692:	bf00      	nop
 8005694:	58024400 	.word	0x58024400
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005698:	2101      	movs	r1, #1
 800569a:	f104 0008 	add.w	r0, r4, #8
 800569e:	f7ff fd31 	bl	8005104 <RCCEx_PLL2_Config>
 80056a2:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80056a4:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80056a8:	2d00      	cmp	r5, #0
 80056aa:	f040 8276 	bne.w	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x8ae>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80056ae:	4fa8      	ldr	r7, [pc, #672]	; (8005950 <HAL_RCCEx_PeriphCLKConfig+0x664>)
 80056b0:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 80056b4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80056b6:	f021 0107 	bic.w	r1, r1, #7
 80056ba:	4301      	orrs	r1, r0
 80056bc:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80056be:	0699      	lsls	r1, r3, #26
 80056c0:	d51f      	bpl.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0x416>
    switch (PeriphClkInit->Lptim1ClockSelection)
 80056c2:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 80056c6:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 80056ca:	f000 82ee 	beq.w	8005caa <HAL_RCCEx_PeriphCLKConfig+0x9be>
 80056ce:	f200 8100 	bhi.w	80058d2 <HAL_RCCEx_PeriphCLKConfig+0x5e6>
 80056d2:	b159      	cbz	r1, 80056ec <HAL_RCCEx_PeriphCLKConfig+0x400>
 80056d4:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 80056d8:	f040 8105 	bne.w	80058e6 <HAL_RCCEx_PeriphCLKConfig+0x5fa>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80056dc:	2100      	movs	r1, #0
 80056de:	f104 0008 	add.w	r0, r4, #8
 80056e2:	f7ff fd0f 	bl	8005104 <RCCEx_PLL2_Config>
 80056e6:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80056e8:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80056ec:	2d00      	cmp	r5, #0
 80056ee:	f040 8250 	bne.w	8005b92 <HAL_RCCEx_PeriphCLKConfig+0x8a6>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80056f2:	4f97      	ldr	r7, [pc, #604]	; (8005950 <HAL_RCCEx_PeriphCLKConfig+0x664>)
 80056f4:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 80056f8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80056fa:	f021 41e0 	bic.w	r1, r1, #1879048192	; 0x70000000
 80056fe:	4301      	orrs	r1, r0
 8005700:	6579      	str	r1, [r7, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005702:	065f      	lsls	r7, r3, #25
 8005704:	d51f      	bpl.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005706:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 800570a:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 800570e:	f000 829e 	beq.w	8005c4e <HAL_RCCEx_PeriphCLKConfig+0x962>
 8005712:	f200 80eb 	bhi.w	80058ec <HAL_RCCEx_PeriphCLKConfig+0x600>
 8005716:	b159      	cbz	r1, 8005730 <HAL_RCCEx_PeriphCLKConfig+0x444>
 8005718:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800571c:	f040 80f0 	bne.w	8005900 <HAL_RCCEx_PeriphCLKConfig+0x614>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005720:	2100      	movs	r1, #0
 8005722:	f104 0008 	add.w	r0, r4, #8
 8005726:	f7ff fced 	bl	8005104 <RCCEx_PLL2_Config>
 800572a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800572c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005730:	2d00      	cmp	r5, #0
 8005732:	f040 8236 	bne.w	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0x8b6>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005736:	4f86      	ldr	r7, [pc, #536]	; (8005950 <HAL_RCCEx_PeriphCLKConfig+0x664>)
 8005738:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
 800573c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800573e:	f421 51e0 	bic.w	r1, r1, #7168	; 0x1c00
 8005742:	4301      	orrs	r1, r0
 8005744:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005746:	0618      	lsls	r0, r3, #24
 8005748:	d51f      	bpl.n	800578a <HAL_RCCEx_PeriphCLKConfig+0x49e>
    switch (PeriphClkInit->Lptim345ClockSelection)
 800574a:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 800574e:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 8005752:	f000 8271 	beq.w	8005c38 <HAL_RCCEx_PeriphCLKConfig+0x94c>
 8005756:	f200 80d6 	bhi.w	8005906 <HAL_RCCEx_PeriphCLKConfig+0x61a>
 800575a:	b159      	cbz	r1, 8005774 <HAL_RCCEx_PeriphCLKConfig+0x488>
 800575c:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 8005760:	f040 80db 	bne.w	800591a <HAL_RCCEx_PeriphCLKConfig+0x62e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005764:	2100      	movs	r1, #0
 8005766:	f104 0008 	add.w	r0, r4, #8
 800576a:	f7ff fccb 	bl	8005104 <RCCEx_PLL2_Config>
 800576e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8005770:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005774:	2d00      	cmp	r5, #0
 8005776:	f040 820a 	bne.w	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x8a2>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800577a:	4f75      	ldr	r7, [pc, #468]	; (8005950 <HAL_RCCEx_PeriphCLKConfig+0x664>)
 800577c:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
 8005780:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005782:	f421 4160 	bic.w	r1, r1, #57344	; 0xe000
 8005786:	4301      	orrs	r1, r0
 8005788:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800578a:	0719      	lsls	r1, r3, #28
 800578c:	d50b      	bpl.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800578e:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8005792:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8005796:	f000 82a1 	beq.w	8005cdc <HAL_RCCEx_PeriphCLKConfig+0x9f0>
    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800579a:	4f6d      	ldr	r7, [pc, #436]	; (8005950 <HAL_RCCEx_PeriphCLKConfig+0x664>)
 800579c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800579e:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 80057a2:	4301      	orrs	r1, r0
 80057a4:	6579      	str	r1, [r7, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80057a6:	06df      	lsls	r7, r3, #27
 80057a8:	d50b      	bpl.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0x4d6>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80057aa:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
 80057ae:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 80057b2:	f000 8286 	beq.w	8005cc2 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80057b6:	4f66      	ldr	r7, [pc, #408]	; (8005950 <HAL_RCCEx_PeriphCLKConfig+0x664>)
 80057b8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80057ba:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 80057be:	4301      	orrs	r1, r0
 80057c0:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80057c2:	0318      	lsls	r0, r3, #12
 80057c4:	d50e      	bpl.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
    switch (PeriphClkInit->AdcClockSelection)
 80057c6:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 80057ca:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 80057ce:	f000 80c1 	beq.w	8005954 <HAL_RCCEx_PeriphCLKConfig+0x668>
 80057d2:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 80057d6:	f000 80c5 	beq.w	8005964 <HAL_RCCEx_PeriphCLKConfig+0x678>
 80057da:	2900      	cmp	r1, #0
 80057dc:	f000 8200 	beq.w	8005be0 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 80057e0:	2601      	movs	r6, #1
 80057e2:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80057e4:	0359      	lsls	r1, r3, #13
 80057e6:	d50f      	bpl.n	8005808 <HAL_RCCEx_PeriphCLKConfig+0x51c>
    switch (PeriphClkInit->UsbClockSelection)
 80057e8:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 80057ec:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80057f0:	f000 80d7 	beq.w	80059a2 <HAL_RCCEx_PeriphCLKConfig+0x6b6>
 80057f4:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
 80057f8:	f000 80db 	beq.w	80059b2 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
 80057fc:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8005800:	f000 81f8 	beq.w	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x908>
 8005804:	2601      	movs	r6, #1
 8005806:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005808:	03df      	lsls	r7, r3, #15
 800580a:	d509      	bpl.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x534>
    switch (PeriphClkInit->SdmmcClockSelection)
 800580c:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800580e:	2900      	cmp	r1, #0
 8005810:	f000 81dd 	beq.w	8005bce <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8005814:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8005818:	f000 818a 	beq.w	8005b30 <HAL_RCCEx_PeriphCLKConfig+0x844>
 800581c:	2601      	movs	r6, #1
 800581e:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005820:	0098      	lsls	r0, r3, #2
 8005822:	f100 8165 	bmi.w	8005af0 <HAL_RCCEx_PeriphCLKConfig+0x804>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005826:	0399      	lsls	r1, r3, #14
 8005828:	d50b      	bpl.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0x556>
    switch (PeriphClkInit->RngClockSelection)
 800582a:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 800582c:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8005830:	f000 81c5 	beq.w	8005bbe <HAL_RCCEx_PeriphCLKConfig+0x8d2>
 8005834:	d974      	bls.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0x634>
 8005836:	f421 7080 	bic.w	r0, r1, #256	; 0x100
 800583a:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800583e:	d071      	beq.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0x638>
 8005840:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005842:	02df      	lsls	r7, r3, #11
 8005844:	d506      	bpl.n	8005854 <HAL_RCCEx_PeriphCLKConfig+0x568>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005846:	4842      	ldr	r0, [pc, #264]	; (8005950 <HAL_RCCEx_PeriphCLKConfig+0x664>)
 8005848:	6f25      	ldr	r5, [r4, #112]	; 0x70
 800584a:	6d01      	ldr	r1, [r0, #80]	; 0x50
 800584c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8005850:	4329      	orrs	r1, r5
 8005852:	6501      	str	r1, [r0, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005854:	029d      	lsls	r5, r3, #10
 8005856:	d506      	bpl.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0x57a>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005858:	483d      	ldr	r0, [pc, #244]	; (8005950 <HAL_RCCEx_PeriphCLKConfig+0x664>)
 800585a:	6ea5      	ldr	r5, [r4, #104]	; 0x68
 800585c:	6d01      	ldr	r1, [r0, #80]	; 0x50
 800585e:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8005862:	4329      	orrs	r1, r5
 8005864:	6501      	str	r1, [r0, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005866:	0058      	lsls	r0, r3, #1
 8005868:	d509      	bpl.n	800587e <HAL_RCCEx_PeriphCLKConfig+0x592>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800586a:	4939      	ldr	r1, [pc, #228]	; (8005950 <HAL_RCCEx_PeriphCLKConfig+0x664>)
 800586c:	6908      	ldr	r0, [r1, #16]
 800586e:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
 8005872:	6108      	str	r0, [r1, #16]
 8005874:	6908      	ldr	r0, [r1, #16]
 8005876:	f8d4 50b4 	ldr.w	r5, [r4, #180]	; 0xb4
 800587a:	4328      	orrs	r0, r5
 800587c:	6108      	str	r0, [r1, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800587e:	2b00      	cmp	r3, #0
 8005880:	da06      	bge.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0x5a4>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005882:	4833      	ldr	r0, [pc, #204]	; (8005950 <HAL_RCCEx_PeriphCLKConfig+0x664>)
 8005884:	6d65      	ldr	r5, [r4, #84]	; 0x54
 8005886:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8005888:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
 800588c:	4329      	orrs	r1, r5
 800588e:	64c1      	str	r1, [r0, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005890:	0219      	lsls	r1, r3, #8
 8005892:	d507      	bpl.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005894:	492e      	ldr	r1, [pc, #184]	; (8005950 <HAL_RCCEx_PeriphCLKConfig+0x664>)
 8005896:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 800589a:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 800589c:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80058a0:	4303      	orrs	r3, r0
 80058a2:	654b      	str	r3, [r1, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80058a4:	07d3      	lsls	r3, r2, #31
 80058a6:	f100 80fe 	bmi.w	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0x7ba>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80058aa:	0797      	lsls	r7, r2, #30
 80058ac:	f100 8108 	bmi.w	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80058b0:	0755      	lsls	r5, r2, #29
 80058b2:	f100 8112 	bmi.w	8005ada <HAL_RCCEx_PeriphCLKConfig+0x7ee>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80058b6:	0710      	lsls	r0, r2, #28
 80058b8:	f100 80ea 	bmi.w	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x7a4>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80058bc:	06d1      	lsls	r1, r2, #27
 80058be:	f100 80d9 	bmi.w	8005a74 <HAL_RCCEx_PeriphCLKConfig+0x788>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80058c2:	0692      	lsls	r2, r2, #26
 80058c4:	f100 8120 	bmi.w	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x81c>
    return HAL_OK;
 80058c8:	1e30      	subs	r0, r6, #0
 80058ca:	bf18      	it	ne
 80058cc:	2001      	movne	r0, #1
}
 80058ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch (PeriphClkInit->Lptim1ClockSelection)
 80058d2:	f021 5080 	bic.w	r0, r1, #268435456	; 0x10000000
 80058d6:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80058da:	f43f af07 	beq.w	80056ec <HAL_RCCEx_PeriphCLKConfig+0x400>
 80058de:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
 80058e2:	f43f af03 	beq.w	80056ec <HAL_RCCEx_PeriphCLKConfig+0x400>
 80058e6:	2601      	movs	r6, #1
 80058e8:	4635      	mov	r5, r6
 80058ea:	e70a      	b.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0x416>
    switch (PeriphClkInit->Lptim2ClockSelection)
 80058ec:	f421 6080 	bic.w	r0, r1, #1024	; 0x400
 80058f0:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 80058f4:	f43f af1c 	beq.w	8005730 <HAL_RCCEx_PeriphCLKConfig+0x444>
 80058f8:	f5b1 6f40 	cmp.w	r1, #3072	; 0xc00
 80058fc:	f43f af18 	beq.w	8005730 <HAL_RCCEx_PeriphCLKConfig+0x444>
 8005900:	2601      	movs	r6, #1
 8005902:	4635      	mov	r5, r6
 8005904:	e71f      	b.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005906:	f421 5000 	bic.w	r0, r1, #8192	; 0x2000
 800590a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800590e:	f43f af31 	beq.w	8005774 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8005912:	f5b1 4fc0 	cmp.w	r1, #24576	; 0x6000
 8005916:	f43f af2d 	beq.w	8005774 <HAL_RCCEx_PeriphCLKConfig+0x488>
 800591a:	2601      	movs	r6, #1
 800591c:	4635      	mov	r5, r6
 800591e:	e734      	b.n	800578a <HAL_RCCEx_PeriphCLKConfig+0x49e>
    switch (PeriphClkInit->RngClockSelection)
 8005920:	2900      	cmp	r1, #0
 8005922:	d18d      	bne.n	8005840 <HAL_RCCEx_PeriphCLKConfig+0x554>
    if (ret == HAL_OK)
 8005924:	2d00      	cmp	r5, #0
 8005926:	f040 8148 	bne.w	8005bba <HAL_RCCEx_PeriphCLKConfig+0x8ce>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800592a:	4d09      	ldr	r5, [pc, #36]	; (8005950 <HAL_RCCEx_PeriphCLKConfig+0x664>)
 800592c:	6d68      	ldr	r0, [r5, #84]	; 0x54
 800592e:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8005932:	4301      	orrs	r1, r0
 8005934:	6569      	str	r1, [r5, #84]	; 0x54
 8005936:	e784      	b.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0x556>
    switch (PeriphClkInit->Sai1ClockSelection)
 8005938:	4635      	mov	r5, r6
    if (ret == HAL_OK)
 800593a:	2d00      	cmp	r5, #0
 800593c:	f040 80f0 	bne.w	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x834>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005940:	4f03      	ldr	r7, [pc, #12]	; (8005950 <HAL_RCCEx_PeriphCLKConfig+0x664>)
 8005942:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005944:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005946:	f021 0107 	bic.w	r1, r1, #7
 800594a:	4301      	orrs	r1, r0
 800594c:	6539      	str	r1, [r7, #80]	; 0x50
 800594e:	e50a      	b.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005950:	58024400 	.word	0x58024400
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005954:	2102      	movs	r1, #2
 8005956:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800595a:	f7ff fc4d 	bl	80051f8 <RCCEx_PLL3_Config>
 800595e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005960:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005964:	2d00      	cmp	r5, #0
 8005966:	f040 810e 	bne.w	8005b86 <HAL_RCCEx_PeriphCLKConfig+0x89a>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800596a:	4fb1      	ldr	r7, [pc, #708]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x944>)
 800596c:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
 8005970:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005972:	f421 3140 	bic.w	r1, r1, #196608	; 0x30000
 8005976:	4301      	orrs	r1, r0
 8005978:	65b9      	str	r1, [r7, #88]	; 0x58
 800597a:	e733      	b.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800597c:	2101      	movs	r1, #1
 800597e:	f104 0008 	add.w	r0, r4, #8
 8005982:	f7ff fbbf 	bl	8005104 <RCCEx_PLL2_Config>
 8005986:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005988:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800598c:	2d00      	cmp	r5, #0
 800598e:	f040 8112 	bne.w	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005992:	4fa7      	ldr	r7, [pc, #668]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x944>)
 8005994:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8005996:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005998:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
 800599c:	4301      	orrs	r1, r0
 800599e:	6539      	str	r1, [r7, #80]	; 0x50
 80059a0:	e5b5      	b.n	800550e <HAL_RCCEx_PeriphCLKConfig+0x222>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80059a2:	2101      	movs	r1, #1
 80059a4:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80059a8:	f7ff fc26 	bl	80051f8 <RCCEx_PLL3_Config>
 80059ac:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80059ae:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80059b2:	2d00      	cmp	r5, #0
 80059b4:	f040 80fd 	bne.w	8005bb2 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80059b8:	4f9d      	ldr	r7, [pc, #628]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x944>)
 80059ba:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 80059be:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80059c0:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 80059c4:	4301      	orrs	r1, r0
 80059c6:	6579      	str	r1, [r7, #84]	; 0x54
 80059c8:	e71e      	b.n	8005808 <HAL_RCCEx_PeriphCLKConfig+0x51c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80059ca:	2101      	movs	r1, #1
 80059cc:	f104 0008 	add.w	r0, r4, #8
 80059d0:	f7ff fb98 	bl	8005104 <RCCEx_PLL2_Config>
 80059d4:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80059d6:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80059da:	2d00      	cmp	r5, #0
 80059dc:	f040 80db 	bne.w	8005b96 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80059e0:	4f93      	ldr	r7, [pc, #588]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x944>)
 80059e2:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 80059e4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80059e6:	f021 0138 	bic.w	r1, r1, #56	; 0x38
 80059ea:	4301      	orrs	r1, r0
 80059ec:	6579      	str	r1, [r7, #84]	; 0x54
 80059ee:	e621      	b.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x348>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80059f0:	4f90      	ldr	r7, [pc, #576]	; (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x948>)
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059f8:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 80059fa:	f7fc fa29 	bl	8001e50 <HAL_GetTick>
 80059fe:	4680      	mov	r8, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005a00:	e006      	b.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0x724>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a02:	f7fc fa25 	bl	8001e50 <HAL_GetTick>
 8005a06:	eba0 0008 	sub.w	r0, r0, r8
 8005a0a:	2864      	cmp	r0, #100	; 0x64
 8005a0c:	f200 81db 	bhi.w	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0xada>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	05db      	lsls	r3, r3, #23
 8005a14:	d5f5      	bpl.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x716>
    if (ret == HAL_OK)
 8005a16:	2d00      	cmp	r5, #0
 8005a18:	f040 8205 	bne.w	8005e26 <HAL_RCCEx_PeriphCLKConfig+0xb3a>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005a1c:	4a84      	ldr	r2, [pc, #528]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x944>)
 8005a1e:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8005a22:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8005a24:	4059      	eors	r1, r3
 8005a26:	f411 7f40 	tst.w	r1, #768	; 0x300
 8005a2a:	d00b      	beq.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0x758>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005a2c:	6f11      	ldr	r1, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 8005a2e:	6f10      	ldr	r0, [r2, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005a30:	f421 7140 	bic.w	r1, r1, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8005a34:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 8005a38:	6710      	str	r0, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005a3a:	6f10      	ldr	r0, [r2, #112]	; 0x70
 8005a3c:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 8005a40:	6710      	str	r0, [r2, #112]	; 0x70
        RCC->BDCR = tmpreg;
 8005a42:	6711      	str	r1, [r2, #112]	; 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005a44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a48:	f000 81cf 	beq.w	8005dea <HAL_RCCEx_PeriphCLKConfig+0xafe>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005a4c:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8005a50:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8005a54:	f000 81dd 	beq.w	8005e12 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8005a58:	4975      	ldr	r1, [pc, #468]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x944>)
 8005a5a:	690a      	ldr	r2, [r1, #16]
 8005a5c:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8005a60:	610a      	str	r2, [r1, #16]
 8005a62:	4873      	ldr	r0, [pc, #460]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x944>)
 8005a64:	f3c3 010b 	ubfx	r1, r3, #0, #12
 8005a68:	6f07      	ldr	r7, [r0, #112]	; 0x70
 8005a6a:	4339      	orrs	r1, r7
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005a6c:	e9d4 3200 	ldrd	r3, r2, [r4]
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005a70:	6701      	str	r1, [r0, #112]	; 0x70
 8005a72:	e5ad      	b.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005a74:	f104 0528 	add.w	r5, r4, #40	; 0x28
 8005a78:	2101      	movs	r1, #1
 8005a7a:	4628      	mov	r0, r5
 8005a7c:	f7ff fbbc 	bl	80051f8 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 8005a80:	2800      	cmp	r0, #0
 8005a82:	f000 80bf 	beq.w	8005c04 <HAL_RCCEx_PeriphCLKConfig+0x918>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005a86:	6863      	ldr	r3, [r4, #4]
 8005a88:	069b      	lsls	r3, r3, #26
 8005a8a:	d546      	bpl.n	8005b1a <HAL_RCCEx_PeriphCLKConfig+0x82e>
 8005a8c:	4606      	mov	r6, r0
 8005a8e:	e03d      	b.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0x820>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005a90:	2100      	movs	r1, #0
 8005a92:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8005a96:	f7ff fbaf 	bl	80051f8 <RCCEx_PLL3_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005a9a:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8005a9c:	2800      	cmp	r0, #0
 8005a9e:	f43f af0d 	beq.w	80058bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005aa2:	4606      	mov	r6, r0
 8005aa4:	e70a      	b.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005aa6:	2100      	movs	r1, #0
 8005aa8:	f104 0008 	add.w	r0, r4, #8
 8005aac:	f7ff fb2a 	bl	8005104 <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005ab0:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8005ab2:	2800      	cmp	r0, #0
 8005ab4:	f43f aef9 	beq.w	80058aa <HAL_RCCEx_PeriphCLKConfig+0x5be>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005ab8:	0797      	lsls	r7, r2, #30
 8005aba:	4606      	mov	r6, r0
 8005abc:	f57f aef8 	bpl.w	80058b0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005ac0:	2101      	movs	r1, #1
 8005ac2:	f104 0008 	add.w	r0, r4, #8
 8005ac6:	f7ff fb1d 	bl	8005104 <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005aca:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8005acc:	2800      	cmp	r0, #0
 8005ace:	f43f aeef 	beq.w	80058b0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005ad2:	0755      	lsls	r5, r2, #29
 8005ad4:	4606      	mov	r6, r0
 8005ad6:	f57f aeee 	bpl.w	80058b6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005ada:	2102      	movs	r1, #2
 8005adc:	f104 0008 	add.w	r0, r4, #8
 8005ae0:	f7ff fb10 	bl	8005104 <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005ae4:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8005ae6:	2800      	cmp	r0, #0
 8005ae8:	f43f aee5 	beq.w	80058b6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005aec:	4606      	mov	r6, r0
 8005aee:	e6e2      	b.n	80058b6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005af0:	2102      	movs	r1, #2
 8005af2:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8005af6:	f7ff fb7f 	bl	80051f8 <RCCEx_PLL3_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005afa:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005afe:	2800      	cmp	r0, #0
 8005b00:	f43f ae91 	beq.w	8005826 <HAL_RCCEx_PeriphCLKConfig+0x53a>
      status = HAL_ERROR;
 8005b04:	2601      	movs	r6, #1
 8005b06:	e68e      	b.n	8005826 <HAL_RCCEx_PeriphCLKConfig+0x53a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005b08:	f104 0528 	add.w	r5, r4, #40	; 0x28
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005b0c:	2102      	movs	r1, #2
 8005b0e:	4628      	mov	r0, r5
 8005b10:	f7ff fb72 	bl	80051f8 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 8005b14:	2800      	cmp	r0, #0
 8005b16:	f43f aed7 	beq.w	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
  return HAL_ERROR;
 8005b1a:	2001      	movs	r0, #1
}
 8005b1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b20:	462e      	mov	r6, r5
 8005b22:	e420      	b.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005b24:	462e      	mov	r6, r5
 8005b26:	e442      	b.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0xc2>
 8005b28:	462e      	mov	r6, r5
 8005b2a:	e4a1      	b.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x184>
 8005b2c:	462e      	mov	r6, r5
 8005b2e:	e462      	b.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0x10a>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005b30:	2102      	movs	r1, #2
 8005b32:	f104 0008 	add.w	r0, r4, #8
 8005b36:	f7ff fae5 	bl	8005104 <RCCEx_PLL2_Config>
 8005b3a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005b3c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005b40:	2d00      	cmp	r5, #0
 8005b42:	d14b      	bne.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0x8f0>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005b44:	4f3a      	ldr	r7, [pc, #232]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x944>)
 8005b46:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8005b48:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8005b4a:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8005b4e:	4301      	orrs	r1, r0
 8005b50:	64f9      	str	r1, [r7, #76]	; 0x4c
 8005b52:	e665      	b.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x534>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b54:	4d36      	ldr	r5, [pc, #216]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x944>)
 8005b56:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8005b58:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 8005b5c:	62e8      	str	r0, [r5, #44]	; 0x2c
    if (ret == HAL_OK)
 8005b5e:	f7ff bbe6 	b.w	800532e <HAL_RCCEx_PeriphCLKConfig+0x42>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b62:	4833      	ldr	r0, [pc, #204]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x944>)
 8005b64:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8005b66:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8005b6a:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
 8005b6c:	e438      	b.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b6e:	4830      	ldr	r0, [pc, #192]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x944>)
 8005b70:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8005b72:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8005b76:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
 8005b78:	e470      	b.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x170>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b7a:	482d      	ldr	r0, [pc, #180]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x944>)
 8005b7c:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8005b7e:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8005b82:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
 8005b84:	e408      	b.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0xac>
 8005b86:	462e      	mov	r6, r5
 8005b88:	e62c      	b.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 8005b8a:	462e      	mov	r6, r5
 8005b8c:	e44e      	b.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x140>
 8005b8e:	462e      	mov	r6, r5
 8005b90:	e5fb      	b.n	800578a <HAL_RCCEx_PeriphCLKConfig+0x49e>
 8005b92:	462e      	mov	r6, r5
 8005b94:	e5b5      	b.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8005b96:	462e      	mov	r6, r5
 8005b98:	e54c      	b.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8005b9a:	462e      	mov	r6, r5
 8005b9c:	e58f      	b.n	80056be <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 8005b9e:	462e      	mov	r6, r5
 8005ba0:	e568      	b.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0x388>
 8005ba2:	462e      	mov	r6, r5
 8005ba4:	e5cf      	b.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0x45a>
 8005ba6:	462e      	mov	r6, r5
 8005ba8:	e4a1      	b.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x202>
 8005baa:	462e      	mov	r6, r5
 8005bac:	e47f      	b.n	80054ae <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8005bae:	462e      	mov	r6, r5
 8005bb0:	e50b      	b.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8005bb2:	462e      	mov	r6, r5
 8005bb4:	e628      	b.n	8005808 <HAL_RCCEx_PeriphCLKConfig+0x51c>
 8005bb6:	462e      	mov	r6, r5
 8005bb8:	e4a9      	b.n	800550e <HAL_RCCEx_PeriphCLKConfig+0x222>
 8005bba:	462e      	mov	r6, r5
 8005bbc:	e641      	b.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0x556>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005bbe:	4f1c      	ldr	r7, [pc, #112]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x944>)
 8005bc0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005bc2:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 8005bc6:	62f8      	str	r0, [r7, #44]	; 0x2c
    if (ret == HAL_OK)
 8005bc8:	2d00      	cmp	r5, #0
 8005bca:	d1f6      	bne.n	8005bba <HAL_RCCEx_PeriphCLKConfig+0x8ce>
 8005bcc:	e6ad      	b.n	800592a <HAL_RCCEx_PeriphCLKConfig+0x63e>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005bce:	4818      	ldr	r0, [pc, #96]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x944>)
 8005bd0:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8005bd2:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8005bd6:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
 8005bd8:	2d00      	cmp	r5, #0
 8005bda:	d0b3      	beq.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x858>
 8005bdc:	462e      	mov	r6, r5
 8005bde:	e61f      	b.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x534>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005be0:	f104 0008 	add.w	r0, r4, #8
 8005be4:	f7ff fa8e 	bl	8005104 <RCCEx_PLL2_Config>
 8005be8:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005bea:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005bee:	2d00      	cmp	r5, #0
 8005bf0:	d1c9      	bne.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0x89a>
 8005bf2:	e6ba      	b.n	800596a <HAL_RCCEx_PeriphCLKConfig+0x67e>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005bf4:	480e      	ldr	r0, [pc, #56]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x944>)
 8005bf6:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8005bf8:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8005bfc:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
 8005bfe:	2d00      	cmp	r5, #0
 8005c00:	d1d7      	bne.n	8005bb2 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
 8005c02:	e6d9      	b.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005c04:	6862      	ldr	r2, [r4, #4]
 8005c06:	e65c      	b.n	80058c2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c08:	4809      	ldr	r0, [pc, #36]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x944>)
 8005c0a:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8005c0c:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8005c10:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
 8005c12:	2d00      	cmp	r5, #0
 8005c14:	d1cf      	bne.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
 8005c16:	e6bc      	b.n	8005992 <HAL_RCCEx_PeriphCLKConfig+0x6a6>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005c18:	2102      	movs	r1, #2
 8005c1a:	f104 0008 	add.w	r0, r4, #8
 8005c1e:	f7ff fa71 	bl	8005104 <RCCEx_PLL2_Config>
 8005c22:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005c24:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005c28:	2d00      	cmp	r5, #0
 8005c2a:	d1c0      	bne.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0x8c2>
 8005c2c:	e4c6      	b.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8005c2e:	bf00      	nop
 8005c30:	58024400 	.word	0x58024400
 8005c34:	58024800 	.word	0x58024800
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005c38:	2102      	movs	r1, #2
 8005c3a:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8005c3e:	f7ff fadb 	bl	80051f8 <RCCEx_PLL3_Config>
 8005c42:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8005c44:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005c48:	2d00      	cmp	r5, #0
 8005c4a:	d1a0      	bne.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 8005c4c:	e595      	b.n	800577a <HAL_RCCEx_PeriphCLKConfig+0x48e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005c4e:	2102      	movs	r1, #2
 8005c50:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8005c54:	f7ff fad0 	bl	80051f8 <RCCEx_PLL3_Config>
 8005c58:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005c5a:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005c5e:	2d00      	cmp	r5, #0
 8005c60:	d19f      	bne.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0x8b6>
 8005c62:	e568      	b.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005c64:	2101      	movs	r1, #1
 8005c66:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8005c6a:	f7ff fac5 	bl	80051f8 <RCCEx_PLL3_Config>
 8005c6e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005c70:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005c74:	2d00      	cmp	r5, #0
 8005c76:	d198      	bne.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x8be>
 8005c78:	e412      	b.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005c7a:	2101      	movs	r1, #1
 8005c7c:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8005c80:	f7ff faba 	bl	80051f8 <RCCEx_PLL3_Config>
 8005c84:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005c86:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005c8a:	2d00      	cmp	r5, #0
 8005c8c:	d18b      	bne.n	8005ba6 <HAL_RCCEx_PeriphCLKConfig+0x8ba>
 8005c8e:	e426      	b.n	80054de <HAL_RCCEx_PeriphCLKConfig+0x1f2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005c90:	2102      	movs	r1, #2
 8005c92:	f104 0008 	add.w	r0, r4, #8
 8005c96:	f7ff fa35 	bl	8005104 <RCCEx_PLL2_Config>
 8005c9a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005c9c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005ca0:	2d00      	cmp	r5, #0
 8005ca2:	f47f af72 	bne.w	8005b8a <HAL_RCCEx_PeriphCLKConfig+0x89e>
 8005ca6:	f7ff bbba 	b.w	800541e <HAL_RCCEx_PeriphCLKConfig+0x132>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005caa:	2102      	movs	r1, #2
 8005cac:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8005cb0:	f7ff faa2 	bl	80051f8 <RCCEx_PLL3_Config>
 8005cb4:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005cb6:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005cba:	2d00      	cmp	r5, #0
 8005cbc:	f47f af69 	bne.w	8005b92 <HAL_RCCEx_PeriphCLKConfig+0x8a6>
 8005cc0:	e517      	b.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x406>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005cc2:	2102      	movs	r1, #2
 8005cc4:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8005cc8:	f7ff fa96 	bl	80051f8 <RCCEx_PLL3_Config>
 8005ccc:	2800      	cmp	r0, #0
 8005cce:	f040 8086 	bne.w	8005dde <HAL_RCCEx_PeriphCLKConfig+0xaf2>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005cd2:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005cd6:	e9d4 3200 	ldrd	r3, r2, [r4]
 8005cda:	e56c      	b.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005cdc:	2102      	movs	r1, #2
 8005cde:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8005ce2:	f7ff fa89 	bl	80051f8 <RCCEx_PLL3_Config>
 8005ce6:	2800      	cmp	r0, #0
 8005ce8:	d173      	bne.n	8005dd2 <HAL_RCCEx_PeriphCLKConfig+0xae6>
    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8005cea:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005cee:	e9d4 3200 	ldrd	r3, r2, [r4]
 8005cf2:	e552      	b.n	800579a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005cf4:	2102      	movs	r1, #2
 8005cf6:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8005cfa:	f7ff fa7d 	bl	80051f8 <RCCEx_PLL3_Config>
 8005cfe:	4606      	mov	r6, r0
    if (ret == HAL_OK)
 8005d00:	2e00      	cmp	r6, #0
 8005d02:	f43f ab11 	beq.w	8005328 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8005d06:	e036      	b.n	8005d76 <HAL_RCCEx_PeriphCLKConfig+0xa8a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d08:	4850      	ldr	r0, [pc, #320]	; (8005e4c <HAL_RCCEx_PeriphCLKConfig+0xb60>)
        break;
 8005d0a:	4635      	mov	r5, r6
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d0c:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8005d0e:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8005d12:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
 8005d14:	e611      	b.n	800593a <HAL_RCCEx_PeriphCLKConfig+0x64e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005d16:	2100      	movs	r1, #0
 8005d18:	f104 0008 	add.w	r0, r4, #8
 8005d1c:	f7ff f9f2 	bl	8005104 <RCCEx_PLL2_Config>
 8005d20:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005d22:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 8005d26:	e608      	b.n	800593a <HAL_RCCEx_PeriphCLKConfig+0x64e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005d28:	2100      	movs	r1, #0
 8005d2a:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8005d2e:	f7ff fa63 	bl	80051f8 <RCCEx_PLL3_Config>
 8005d32:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005d34:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 8005d38:	e5ff      	b.n	800593a <HAL_RCCEx_PeriphCLKConfig+0x64e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005d3a:	2100      	movs	r1, #0
 8005d3c:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8005d40:	f7ff fa5a 	bl	80051f8 <RCCEx_PLL3_Config>
 8005d44:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005d46:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 8005d4a:	f7ff bb49 	b.w	80053e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005d4e:	2100      	movs	r1, #0
 8005d50:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8005d54:	f7ff fa50 	bl	80051f8 <RCCEx_PLL3_Config>
 8005d58:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005d5a:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 8005d5e:	f7ff bb7d 	b.w	800545c <HAL_RCCEx_PeriphCLKConfig+0x170>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005d62:	2100      	movs	r1, #0
 8005d64:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8005d68:	f7ff fa46 	bl	80051f8 <RCCEx_PLL3_Config>
 8005d6c:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005d6e:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 8005d72:	f7ff bb11 	b.w	8005398 <HAL_RCCEx_PeriphCLKConfig+0xac>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005d76:	e9d4 3200 	ldrd	r3, r2, [r4]
 8005d7a:	f7ff badf 	b.w	800533c <HAL_RCCEx_PeriphCLKConfig+0x50>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005d7e:	2101      	movs	r1, #1
 8005d80:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8005d84:	f7ff fa38 	bl	80051f8 <RCCEx_PLL3_Config>
 8005d88:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005d8a:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005d8e:	2d00      	cmp	r5, #0
 8005d90:	f47f af03 	bne.w	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x8ae>
 8005d94:	e48b      	b.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x3c2>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005d96:	2101      	movs	r1, #1
 8005d98:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8005d9c:	f7ff fa2c 	bl	80051f8 <RCCEx_PLL3_Config>
 8005da0:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005da2:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005da6:	2d00      	cmp	r5, #0
 8005da8:	f47f aef9 	bne.w	8005b9e <HAL_RCCEx_PeriphCLKConfig+0x8b2>
 8005dac:	e45b      	b.n	8005666 <HAL_RCCEx_PeriphCLKConfig+0x37a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005dae:	2101      	movs	r1, #1
 8005db0:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8005db4:	f7ff fa20 	bl	80051f8 <RCCEx_PLL3_Config>
 8005db8:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005dba:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005dbe:	2d00      	cmp	r5, #0
 8005dc0:	f47f aee9 	bne.w	8005b96 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
 8005dc4:	e60c      	b.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
        status = ret;
 8005dc6:	2603      	movs	r6, #3
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005dc8:	e9d4 3200 	ldrd	r3, r2, [r4]
 8005dcc:	4635      	mov	r5, r6
 8005dce:	f7ff bbff 	b.w	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8005dd2:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
        status = HAL_ERROR;
 8005dd6:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005dd8:	e9d4 3200 	ldrd	r3, r2, [r4]
 8005ddc:	e4dd      	b.n	800579a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005dde:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
        status = HAL_ERROR;
 8005de2:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005de4:	e9d4 3200 	ldrd	r3, r2, [r4]
 8005de8:	e4e5      	b.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
        tickstart = HAL_GetTick();
 8005dea:	f7fc f831 	bl	8001e50 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005dee:	f8df 805c 	ldr.w	r8, [pc, #92]	; 8005e4c <HAL_RCCEx_PeriphCLKConfig+0xb60>
        tickstart = HAL_GetTick();
 8005df2:	4607      	mov	r7, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005df4:	f241 3988 	movw	r9, #5000	; 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005df8:	e004      	b.n	8005e04 <HAL_RCCEx_PeriphCLKConfig+0xb18>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005dfa:	f7fc f829 	bl	8001e50 <HAL_GetTick>
 8005dfe:	1bc0      	subs	r0, r0, r7
 8005e00:	4548      	cmp	r0, r9
 8005e02:	d8e0      	bhi.n	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0xada>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005e04:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 8005e08:	0798      	lsls	r0, r3, #30
 8005e0a:	d5f6      	bpl.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0xb0e>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005e0c:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8005e10:	e61c      	b.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x760>
 8005e12:	480e      	ldr	r0, [pc, #56]	; (8005e4c <HAL_RCCEx_PeriphCLKConfig+0xb60>)
 8005e14:	4a0e      	ldr	r2, [pc, #56]	; (8005e50 <HAL_RCCEx_PeriphCLKConfig+0xb64>)
 8005e16:	6901      	ldr	r1, [r0, #16]
 8005e18:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 8005e1c:	f421 517c 	bic.w	r1, r1, #16128	; 0x3f00
 8005e20:	430a      	orrs	r2, r1
 8005e22:	6102      	str	r2, [r0, #16]
 8005e24:	e61d      	b.n	8005a62 <HAL_RCCEx_PeriphCLKConfig+0x776>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005e26:	e9d4 3200 	ldrd	r3, r2, [r4]
 8005e2a:	462e      	mov	r6, r5
 8005e2c:	f7ff bbd0 	b.w	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005e30:	2601      	movs	r6, #1
 8005e32:	4635      	mov	r5, r6
 8005e34:	e443      	b.n	80056be <HAL_RCCEx_PeriphCLKConfig+0x3d2>
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005e36:	2601      	movs	r6, #1
 8005e38:	4635      	mov	r5, r6
 8005e3a:	e41b      	b.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0x388>
    switch (PeriphClkInit->Sai1ClockSelection)
 8005e3c:	2601      	movs	r6, #1
 8005e3e:	f7ff ba91 	b.w	8005364 <HAL_RCCEx_PeriphCLKConfig+0x78>
    switch (PeriphClkInit->FmcClockSelection)
 8005e42:	2601      	movs	r6, #1
 8005e44:	4635      	mov	r5, r6
 8005e46:	f7ff bbc0 	b.w	80055ca <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8005e4a:	bf00      	nop
 8005e4c:	58024400 	.word	0x58024400
 8005e50:	00ffffcf 	.word	0x00ffffcf

08005e54 <HAL_RCCEx_CRSConfig>:
  __HAL_RCC_CRS_FORCE_RESET();
 8005e54:	4b19      	ldr	r3, [pc, #100]	; (8005ebc <HAL_RCCEx_CRSConfig+0x68>)
 8005e56:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8005e5a:	f042 0202 	orr.w	r2, r2, #2
{
 8005e5e:	b510      	push	{r4, lr}
  __HAL_RCC_CRS_FORCE_RESET();
 8005e60:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
{
 8005e64:	4604      	mov	r4, r0
  __HAL_RCC_CRS_RELEASE_RESET();
 8005e66:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8005e6a:	f022 0202 	bic.w	r2, r2, #2
 8005e6e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  if ((HAL_GetREVID() <= REV_ID_Y) && (pInit->Source == RCC_CRS_SYNC_SOURCE_USB2))
 8005e72:	f7fc f805 	bl	8001e80 <HAL_GetREVID>
 8005e76:	f241 0303 	movw	r3, #4099	; 0x1003
 8005e7a:	4298      	cmp	r0, r3
    value = (pInit->Prescaler | RCC_CRS_SYNC_SOURCE_PIN | pInit->Polarity);
 8005e7c:	e9d4 1300 	ldrd	r1, r3, [r4]
  if ((HAL_GetREVID() <= REV_ID_Y) && (pInit->Source == RCC_CRS_SYNC_SOURCE_USB2))
 8005e80:	d802      	bhi.n	8005e88 <HAL_RCCEx_CRSConfig+0x34>
 8005e82:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005e86:	d015      	beq.n	8005eb4 <HAL_RCCEx_CRSConfig+0x60>
    value = (pInit->Prescaler | pInit->Source | pInit->Polarity);
 8005e88:	68a2      	ldr	r2, [r4, #8]
 8005e8a:	4311      	orrs	r1, r2
 8005e8c:	4319      	orrs	r1, r3
  WRITE_REG(CRS->CFGR, value);
 8005e8e:	4b0c      	ldr	r3, [pc, #48]	; (8005ec0 <HAL_RCCEx_CRSConfig+0x6c>)
  value |= (pInit->ErrorLimitValue << CRS_CFGR_FELIM_Pos);
 8005e90:	e9d4 2003 	ldrd	r2, r0, [r4, #12]
 8005e94:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8005e98:	430a      	orrs	r2, r1
  WRITE_REG(CRS->CFGR, value);
 8005e9a:	605a      	str	r2, [r3, #4]
  MODIFY_REG(CRS->CR, CRS_CR_TRIM, (pInit->HSI48CalibrationValue << CRS_CR_TRIM_Pos));
 8005e9c:	681a      	ldr	r2, [r3, #0]
 8005e9e:	6961      	ldr	r1, [r4, #20]
 8005ea0:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8005ea4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005ea8:	601a      	str	r2, [r3, #0]
  SET_BIT(CRS->CR, CRS_CR_AUTOTRIMEN | CRS_CR_CEN);
 8005eaa:	681a      	ldr	r2, [r3, #0]
 8005eac:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8005eb0:	601a      	str	r2, [r3, #0]
}
 8005eb2:	bd10      	pop	{r4, pc}
    value = (pInit->Prescaler | RCC_CRS_SYNC_SOURCE_PIN | pInit->Polarity);
 8005eb4:	68a3      	ldr	r3, [r4, #8]
 8005eb6:	4319      	orrs	r1, r3
 8005eb8:	e7e9      	b.n	8005e8e <HAL_RCCEx_CRSConfig+0x3a>
 8005eba:	bf00      	nop
 8005ebc:	58024400 	.word	0x58024400
 8005ec0:	40008400 	.word	0x40008400

08005ec4 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ec4:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005ec6:	4a1b      	ldr	r2, [pc, #108]	; (8005f34 <TIM_OC1_SetConfig+0x70>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ec8:	f023 0301 	bic.w	r3, r3, #1
{
 8005ecc:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ece:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8005ed0:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8005ed2:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8005ed4:	6985      	ldr	r5, [r0, #24]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005ed6:	f023 0302 	bic.w	r3, r3, #2
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005eda:	402a      	ands	r2, r5
  tmpccmrx |= OC_Config->OCMode;
 8005edc:	680d      	ldr	r5, [r1, #0]
 8005ede:	432a      	orrs	r2, r5
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005ee0:	688d      	ldr	r5, [r1, #8]
 8005ee2:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005ee4:	4d14      	ldr	r5, [pc, #80]	; (8005f38 <TIM_OC1_SetConfig+0x74>)
 8005ee6:	42a8      	cmp	r0, r5
 8005ee8:	d00e      	beq.n	8005f08 <TIM_OC1_SetConfig+0x44>
 8005eea:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005eee:	42a8      	cmp	r0, r5
 8005ef0:	d00a      	beq.n	8005f08 <TIM_OC1_SetConfig+0x44>
 8005ef2:	4e12      	ldr	r6, [pc, #72]	; (8005f3c <TIM_OC1_SetConfig+0x78>)
 8005ef4:	f505 4580 	add.w	r5, r5, #16384	; 0x4000
 8005ef8:	42a8      	cmp	r0, r5
 8005efa:	bf18      	it	ne
 8005efc:	42b0      	cmpne	r0, r6
 8005efe:	d003      	beq.n	8005f08 <TIM_OC1_SetConfig+0x44>
 8005f00:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005f04:	42a8      	cmp	r0, r5
 8005f06:	d10d      	bne.n	8005f24 <TIM_OC1_SetConfig+0x60>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005f08:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8005f0a:	f023 0308 	bic.w	r3, r3, #8
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005f0e:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpccer |= OC_Config->OCNPolarity;
 8005f12:	432b      	orrs	r3, r5
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005f14:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpccer &= ~TIM_CCER_CC1NE;
 8005f18:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8005f1c:	ea46 0c05 	orr.w	ip, r6, r5
 8005f20:	ea4c 0404 	orr.w	r4, ip, r4

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005f24:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8005f26:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8005f28:	6182      	str	r2, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8005f2a:	6341      	str	r1, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f2c:	6203      	str	r3, [r0, #32]
}
 8005f2e:	bc70      	pop	{r4, r5, r6}
 8005f30:	4770      	bx	lr
 8005f32:	bf00      	nop
 8005f34:	fffeff8c 	.word	0xfffeff8c
 8005f38:	40010000 	.word	0x40010000
 8005f3c:	40014000 	.word	0x40014000

08005f40 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005f40:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005f42:	4a1c      	ldr	r2, [pc, #112]	; (8005fb4 <TIM_OC3_SetConfig+0x74>)
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005f44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
{
 8005f48:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005f4a:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8005f4c:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8005f4e:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8005f50:	69c5      	ldr	r5, [r0, #28]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005f52:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005f56:	402a      	ands	r2, r5
  tmpccmrx |= OC_Config->OCMode;
 8005f58:	680d      	ldr	r5, [r1, #0]
 8005f5a:	432a      	orrs	r2, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005f5c:	688d      	ldr	r5, [r1, #8]
 8005f5e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005f62:	4d15      	ldr	r5, [pc, #84]	; (8005fb8 <TIM_OC3_SetConfig+0x78>)
 8005f64:	42a8      	cmp	r0, r5
 8005f66:	d00e      	beq.n	8005f86 <TIM_OC3_SetConfig+0x46>
 8005f68:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005f6c:	42a8      	cmp	r0, r5
 8005f6e:	d00a      	beq.n	8005f86 <TIM_OC3_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f70:	4e12      	ldr	r6, [pc, #72]	; (8005fbc <TIM_OC3_SetConfig+0x7c>)
 8005f72:	4d13      	ldr	r5, [pc, #76]	; (8005fc0 <TIM_OC3_SetConfig+0x80>)
 8005f74:	42a8      	cmp	r0, r5
 8005f76:	bf18      	it	ne
 8005f78:	42b0      	cmpne	r0, r6
 8005f7a:	d00b      	beq.n	8005f94 <TIM_OC3_SetConfig+0x54>
 8005f7c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005f80:	42a8      	cmp	r0, r5
 8005f82:	d10f      	bne.n	8005fa4 <TIM_OC3_SetConfig+0x64>
 8005f84:	e006      	b.n	8005f94 <TIM_OC3_SetConfig+0x54>
    tmpccer &= ~TIM_CCER_CC3NP;
 8005f86:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005f8a:	68cd      	ldr	r5, [r1, #12]
 8005f8c:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8005f90:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005f94:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005f98:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
 8005f9c:	ea46 0c05 	orr.w	ip, r6, r5
 8005fa0:	ea44 140c 	orr.w	r4, r4, ip, lsl #4

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005fa4:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8005fa6:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8005fa8:	61c2      	str	r2, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8005faa:	63c1      	str	r1, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fac:	6203      	str	r3, [r0, #32]
}
 8005fae:	bc70      	pop	{r4, r5, r6}
 8005fb0:	4770      	bx	lr
 8005fb2:	bf00      	nop
 8005fb4:	fffeff8c 	.word	0xfffeff8c
 8005fb8:	40010000 	.word	0x40010000
 8005fbc:	40014000 	.word	0x40014000
 8005fc0:	40014400 	.word	0x40014400

08005fc4 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8005fc4:	2800      	cmp	r0, #0
 8005fc6:	f000 80ae 	beq.w	8006126 <HAL_TIM_Base_Init+0x162>
{
 8005fca:	b538      	push	{r3, r4, r5, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8005fcc:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005fd0:	4604      	mov	r4, r0
 8005fd2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d07f      	beq.n	80060da <HAL_TIM_Base_Init+0x116>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005fda:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8005fdc:	2302      	movs	r3, #2
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005fde:	4953      	ldr	r1, [pc, #332]	; (800612c <HAL_TIM_Base_Init+0x168>)
 8005fe0:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  htim->State = HAL_TIM_STATE_BUSY;
 8005fe4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005fe8:	eba2 0101 	sub.w	r1, r2, r1
  tmpcr1 = TIMx->CR1;
 8005fec:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005fee:	fab1 f181 	clz	r1, r1
 8005ff2:	ea4f 1151 	mov.w	r1, r1, lsr #5
 8005ff6:	d04b      	beq.n	8006090 <HAL_TIM_Base_Init+0xcc>
 8005ff8:	2900      	cmp	r1, #0
 8005ffa:	d149      	bne.n	8006090 <HAL_TIM_Base_Init+0xcc>
 8005ffc:	484c      	ldr	r0, [pc, #304]	; (8006130 <HAL_TIM_Base_Init+0x16c>)
 8005ffe:	4d4d      	ldr	r5, [pc, #308]	; (8006134 <HAL_TIM_Base_Init+0x170>)
 8006000:	4282      	cmp	r2, r0
 8006002:	d06f      	beq.n	80060e4 <HAL_TIM_Base_Init+0x120>
 8006004:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8006008:	4282      	cmp	r2, r0
 800600a:	d06b      	beq.n	80060e4 <HAL_TIM_Base_Init+0x120>
 800600c:	1b55      	subs	r5, r2, r5
 800600e:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8006012:	fab5 f585 	clz	r5, r5
 8006016:	4282      	cmp	r2, r0
 8006018:	ea4f 1555 	mov.w	r5, r5, lsr #5
 800601c:	d06b      	beq.n	80060f6 <HAL_TIM_Base_Init+0x132>
 800601e:	2d00      	cmp	r5, #0
 8006020:	d169      	bne.n	80060f6 <HAL_TIM_Base_Init+0x132>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006022:	4945      	ldr	r1, [pc, #276]	; (8006138 <HAL_TIM_Base_Init+0x174>)
 8006024:	428a      	cmp	r2, r1
 8006026:	d070      	beq.n	800610a <HAL_TIM_Base_Init+0x146>
 8006028:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800602c:	428a      	cmp	r2, r1
 800602e:	d06c      	beq.n	800610a <HAL_TIM_Base_Init+0x146>
 8006030:	4842      	ldr	r0, [pc, #264]	; (800613c <HAL_TIM_Base_Init+0x178>)
 8006032:	f5a1 41c8 	sub.w	r1, r1, #25600	; 0x6400
 8006036:	428a      	cmp	r2, r1
 8006038:	bf18      	it	ne
 800603a:	4282      	cmpne	r2, r0
 800603c:	d065      	beq.n	800610a <HAL_TIM_Base_Init+0x146>
 800603e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006042:	428a      	cmp	r2, r1
 8006044:	d061      	beq.n	800610a <HAL_TIM_Base_Init+0x146>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006046:	69a0      	ldr	r0, [r4, #24]
 8006048:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 800604c:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800604e:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 8006050:	6013      	str	r3, [r2, #0]
  TIMx->PSC = Structure->Prescaler;
 8006052:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006054:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006056:	6293      	str	r3, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8006058:	2301      	movs	r3, #1
  return HAL_OK;
 800605a:	2000      	movs	r0, #0
  TIMx->EGR = TIM_EGR_UG;
 800605c:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800605e:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006062:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8006066:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800606a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800606e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8006072:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006076:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800607a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800607e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006082:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8006086:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800608a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800608e:	bd38      	pop	{r3, r4, r5, pc}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006090:	4d28      	ldr	r5, [pc, #160]	; (8006134 <HAL_TIM_Base_Init+0x170>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006092:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8006096:	68a0      	ldr	r0, [r4, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006098:	1b55      	subs	r5, r2, r5
    tmpcr1 |= Structure->CounterMode;
 800609a:	4303      	orrs	r3, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800609c:	fab5 f585 	clz	r5, r5
 80060a0:	096d      	lsrs	r5, r5, #5
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80060a2:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 80060a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80060a8:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80060aa:	69a0      	ldr	r0, [r4, #24]
 80060ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80060b0:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 80060b2:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80060b4:	68e3      	ldr	r3, [r4, #12]
 80060b6:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80060b8:	6863      	ldr	r3, [r4, #4]
 80060ba:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80060bc:	b951      	cbnz	r1, 80060d4 <HAL_TIM_Base_Init+0x110>
 80060be:	b94d      	cbnz	r5, 80060d4 <HAL_TIM_Base_Init+0x110>
 80060c0:	491d      	ldr	r1, [pc, #116]	; (8006138 <HAL_TIM_Base_Init+0x174>)
 80060c2:	4b1f      	ldr	r3, [pc, #124]	; (8006140 <HAL_TIM_Base_Init+0x17c>)
 80060c4:	429a      	cmp	r2, r3
 80060c6:	bf18      	it	ne
 80060c8:	428a      	cmpne	r2, r1
 80060ca:	d003      	beq.n	80060d4 <HAL_TIM_Base_Init+0x110>
 80060cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80060d0:	429a      	cmp	r2, r3
 80060d2:	d1c1      	bne.n	8006058 <HAL_TIM_Base_Init+0x94>
    TIMx->RCR = Structure->RepetitionCounter;
 80060d4:	6963      	ldr	r3, [r4, #20]
 80060d6:	6313      	str	r3, [r2, #48]	; 0x30
 80060d8:	e7be      	b.n	8006058 <HAL_TIM_Base_Init+0x94>
    htim->Lock = HAL_UNLOCKED;
 80060da:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80060de:	f7fb fbc3 	bl	8001868 <HAL_TIM_Base_MspInit>
 80060e2:	e77a      	b.n	8005fda <HAL_TIM_Base_Init+0x16>
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80060e4:	1b55      	subs	r5, r2, r5
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80060e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80060ea:	68a0      	ldr	r0, [r4, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80060ec:	fab5 f585 	clz	r5, r5
    tmpcr1 |= Structure->CounterMode;
 80060f0:	4303      	orrs	r3, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80060f2:	096d      	lsrs	r5, r5, #5
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80060f4:	e7d5      	b.n	80060a2 <HAL_TIM_Base_Init+0xde>
    tmpcr1 |= Structure->CounterMode;
 80060f6:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80060f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80060fc:	4303      	orrs	r3, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80060fe:	4811      	ldr	r0, [pc, #68]	; (8006144 <HAL_TIM_Base_Init+0x180>)
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006100:	4282      	cmp	r2, r0
 8006102:	d0ce      	beq.n	80060a2 <HAL_TIM_Base_Init+0xde>
 8006104:	2d00      	cmp	r5, #0
 8006106:	d1cc      	bne.n	80060a2 <HAL_TIM_Base_Init+0xde>
 8006108:	e78b      	b.n	8006022 <HAL_TIM_Base_Init+0x5e>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800610a:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 800610c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006110:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006112:	4303      	orrs	r3, r0
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006114:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006116:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800611a:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 800611c:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 800611e:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006120:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006122:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006124:	e7cc      	b.n	80060c0 <HAL_TIM_Base_Init+0xfc>
    return HAL_ERROR;
 8006126:	2001      	movs	r0, #1
}
 8006128:	4770      	bx	lr
 800612a:	bf00      	nop
 800612c:	40010000 	.word	0x40010000
 8006130:	40000400 	.word	0x40000400
 8006134:	40010400 	.word	0x40010400
 8006138:	40014000 	.word	0x40014000
 800613c:	40014800 	.word	0x40014800
 8006140:	40014400 	.word	0x40014400
 8006144:	40000c00 	.word	0x40000c00

08006148 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8006148:	2800      	cmp	r0, #0
 800614a:	f000 80ae 	beq.w	80062aa <HAL_TIM_PWM_Init+0x162>
{
 800614e:	b538      	push	{r3, r4, r5, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8006150:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006154:	4604      	mov	r4, r0
 8006156:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800615a:	2b00      	cmp	r3, #0
 800615c:	d07f      	beq.n	800625e <HAL_TIM_PWM_Init+0x116>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800615e:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8006160:	2302      	movs	r3, #2
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006162:	4953      	ldr	r1, [pc, #332]	; (80062b0 <HAL_TIM_PWM_Init+0x168>)
 8006164:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  htim->State = HAL_TIM_STATE_BUSY;
 8006168:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800616c:	eba2 0101 	sub.w	r1, r2, r1
  tmpcr1 = TIMx->CR1;
 8006170:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006172:	fab1 f181 	clz	r1, r1
 8006176:	ea4f 1151 	mov.w	r1, r1, lsr #5
 800617a:	d04b      	beq.n	8006214 <HAL_TIM_PWM_Init+0xcc>
 800617c:	2900      	cmp	r1, #0
 800617e:	d149      	bne.n	8006214 <HAL_TIM_PWM_Init+0xcc>
 8006180:	484c      	ldr	r0, [pc, #304]	; (80062b4 <HAL_TIM_PWM_Init+0x16c>)
 8006182:	4d4d      	ldr	r5, [pc, #308]	; (80062b8 <HAL_TIM_PWM_Init+0x170>)
 8006184:	4282      	cmp	r2, r0
 8006186:	d06f      	beq.n	8006268 <HAL_TIM_PWM_Init+0x120>
 8006188:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800618c:	4282      	cmp	r2, r0
 800618e:	d06b      	beq.n	8006268 <HAL_TIM_PWM_Init+0x120>
 8006190:	1b55      	subs	r5, r2, r5
 8006192:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8006196:	fab5 f585 	clz	r5, r5
 800619a:	4282      	cmp	r2, r0
 800619c:	ea4f 1555 	mov.w	r5, r5, lsr #5
 80061a0:	d06b      	beq.n	800627a <HAL_TIM_PWM_Init+0x132>
 80061a2:	2d00      	cmp	r5, #0
 80061a4:	d169      	bne.n	800627a <HAL_TIM_PWM_Init+0x132>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80061a6:	4945      	ldr	r1, [pc, #276]	; (80062bc <HAL_TIM_PWM_Init+0x174>)
 80061a8:	428a      	cmp	r2, r1
 80061aa:	d070      	beq.n	800628e <HAL_TIM_PWM_Init+0x146>
 80061ac:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80061b0:	428a      	cmp	r2, r1
 80061b2:	d06c      	beq.n	800628e <HAL_TIM_PWM_Init+0x146>
 80061b4:	4842      	ldr	r0, [pc, #264]	; (80062c0 <HAL_TIM_PWM_Init+0x178>)
 80061b6:	f5a1 41c8 	sub.w	r1, r1, #25600	; 0x6400
 80061ba:	428a      	cmp	r2, r1
 80061bc:	bf18      	it	ne
 80061be:	4282      	cmpne	r2, r0
 80061c0:	d065      	beq.n	800628e <HAL_TIM_PWM_Init+0x146>
 80061c2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80061c6:	428a      	cmp	r2, r1
 80061c8:	d061      	beq.n	800628e <HAL_TIM_PWM_Init+0x146>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80061ca:	69a0      	ldr	r0, [r4, #24]
 80061cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 80061d0:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80061d2:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 80061d4:	6013      	str	r3, [r2, #0]
  TIMx->PSC = Structure->Prescaler;
 80061d6:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80061d8:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80061da:	6293      	str	r3, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 80061dc:	2301      	movs	r3, #1
  return HAL_OK;
 80061de:	2000      	movs	r0, #0
  TIMx->EGR = TIM_EGR_UG;
 80061e0:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80061e2:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061e6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80061ea:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80061ee:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80061f2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 80061f6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80061fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061fe:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8006202:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006206:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800620a:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800620e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8006212:	bd38      	pop	{r3, r4, r5, pc}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006214:	4d28      	ldr	r5, [pc, #160]	; (80062b8 <HAL_TIM_PWM_Init+0x170>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006216:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800621a:	68a0      	ldr	r0, [r4, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800621c:	1b55      	subs	r5, r2, r5
    tmpcr1 |= Structure->CounterMode;
 800621e:	4303      	orrs	r3, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006220:	fab5 f585 	clz	r5, r5
 8006224:	096d      	lsrs	r5, r5, #5
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006226:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8006228:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800622c:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800622e:	69a0      	ldr	r0, [r4, #24]
 8006230:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006234:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 8006236:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006238:	68e3      	ldr	r3, [r4, #12]
 800623a:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800623c:	6863      	ldr	r3, [r4, #4]
 800623e:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006240:	b951      	cbnz	r1, 8006258 <HAL_TIM_PWM_Init+0x110>
 8006242:	b94d      	cbnz	r5, 8006258 <HAL_TIM_PWM_Init+0x110>
 8006244:	491d      	ldr	r1, [pc, #116]	; (80062bc <HAL_TIM_PWM_Init+0x174>)
 8006246:	4b1f      	ldr	r3, [pc, #124]	; (80062c4 <HAL_TIM_PWM_Init+0x17c>)
 8006248:	429a      	cmp	r2, r3
 800624a:	bf18      	it	ne
 800624c:	428a      	cmpne	r2, r1
 800624e:	d003      	beq.n	8006258 <HAL_TIM_PWM_Init+0x110>
 8006250:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006254:	429a      	cmp	r2, r3
 8006256:	d1c1      	bne.n	80061dc <HAL_TIM_PWM_Init+0x94>
    TIMx->RCR = Structure->RepetitionCounter;
 8006258:	6963      	ldr	r3, [r4, #20]
 800625a:	6313      	str	r3, [r2, #48]	; 0x30
 800625c:	e7be      	b.n	80061dc <HAL_TIM_PWM_Init+0x94>
    htim->Lock = HAL_UNLOCKED;
 800625e:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8006262:	f7fb fae9 	bl	8001838 <HAL_TIM_PWM_MspInit>
 8006266:	e77a      	b.n	800615e <HAL_TIM_PWM_Init+0x16>
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006268:	1b55      	subs	r5, r2, r5
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800626a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800626e:	68a0      	ldr	r0, [r4, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006270:	fab5 f585 	clz	r5, r5
    tmpcr1 |= Structure->CounterMode;
 8006274:	4303      	orrs	r3, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006276:	096d      	lsrs	r5, r5, #5
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006278:	e7d5      	b.n	8006226 <HAL_TIM_PWM_Init+0xde>
    tmpcr1 |= Structure->CounterMode;
 800627a:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800627c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8006280:	4303      	orrs	r3, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006282:	4811      	ldr	r0, [pc, #68]	; (80062c8 <HAL_TIM_PWM_Init+0x180>)
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006284:	4282      	cmp	r2, r0
 8006286:	d0ce      	beq.n	8006226 <HAL_TIM_PWM_Init+0xde>
 8006288:	2d00      	cmp	r5, #0
 800628a:	d1cc      	bne.n	8006226 <HAL_TIM_PWM_Init+0xde>
 800628c:	e78b      	b.n	80061a6 <HAL_TIM_PWM_Init+0x5e>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800628e:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8006290:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006294:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006296:	4303      	orrs	r3, r0
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006298:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800629a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800629e:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 80062a0:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 80062a2:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80062a4:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80062a6:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80062a8:	e7cc      	b.n	8006244 <HAL_TIM_PWM_Init+0xfc>
    return HAL_ERROR;
 80062aa:	2001      	movs	r0, #1
}
 80062ac:	4770      	bx	lr
 80062ae:	bf00      	nop
 80062b0:	40010000 	.word	0x40010000
 80062b4:	40000400 	.word	0x40000400
 80062b8:	40010400 	.word	0x40010400
 80062bc:	40014000 	.word	0x40014000
 80062c0:	40014800 	.word	0x40014800
 80062c4:	40014400 	.word	0x40014400
 80062c8:	40000c00 	.word	0x40000c00

080062cc <HAL_TIM_PWM_Start>:
 80062cc:	2910      	cmp	r1, #16
 80062ce:	d80a      	bhi.n	80062e6 <HAL_TIM_PWM_Start+0x1a>
 80062d0:	e8df f001 	tbb	[pc, r1]
 80062d4:	0909097a 	.word	0x0909097a
 80062d8:	09090982 	.word	0x09090982
 80062dc:	0909098a 	.word	0x0909098a
 80062e0:	09090992 	.word	0x09090992
 80062e4:	99          	.byte	0x99
 80062e5:	00          	.byte	0x00
 80062e6:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 80062ea:	2b01      	cmp	r3, #1
 80062ec:	f040 8089 	bne.w	8006402 <HAL_TIM_PWM_Start+0x136>
 80062f0:	2910      	cmp	r1, #16
 80062f2:	d80a      	bhi.n	800630a <HAL_TIM_PWM_Start+0x3e>
 80062f4:	e8df f001 	tbb	[pc, r1]
 80062f8:	0909096c 	.word	0x0909096c
 80062fc:	09090974 	.word	0x09090974
 8006300:	0909097c 	.word	0x0909097c
 8006304:	0909098d 	.word	0x0909098d
 8006308:	91          	.byte	0x91
 8006309:	00          	.byte	0x00
 800630a:	2302      	movs	r3, #2
 800630c:	f880 3043 	strb.w	r3, [r0, #67]	; 0x43
 8006310:	6803      	ldr	r3, [r0, #0]
 8006312:	f001 011f 	and.w	r1, r1, #31
 8006316:	2201      	movs	r2, #1
 8006318:	4846      	ldr	r0, [pc, #280]	; (8006434 <HAL_TIM_PWM_Start+0x168>)
 800631a:	b430      	push	{r4, r5}
 800631c:	408a      	lsls	r2, r1
 800631e:	6a1c      	ldr	r4, [r3, #32]
 8006320:	4d45      	ldr	r5, [pc, #276]	; (8006438 <HAL_TIM_PWM_Start+0x16c>)
 8006322:	ea24 0402 	bic.w	r4, r4, r2
 8006326:	4945      	ldr	r1, [pc, #276]	; (800643c <HAL_TIM_PWM_Start+0x170>)
 8006328:	42ab      	cmp	r3, r5
 800632a:	bf18      	it	ne
 800632c:	4283      	cmpne	r3, r0
 800632e:	f505 5570 	add.w	r5, r5, #15360	; 0x3c00
 8006332:	621c      	str	r4, [r3, #32]
 8006334:	6a1c      	ldr	r4, [r3, #32]
 8006336:	bf0c      	ite	eq
 8006338:	2001      	moveq	r0, #1
 800633a:	2000      	movne	r0, #0
 800633c:	4322      	orrs	r2, r4
 800633e:	42ab      	cmp	r3, r5
 8006340:	bf08      	it	eq
 8006342:	f040 0001 	orreq.w	r0, r0, #1
 8006346:	621a      	str	r2, [r3, #32]
 8006348:	4a3d      	ldr	r2, [pc, #244]	; (8006440 <HAL_TIM_PWM_Start+0x174>)
 800634a:	4293      	cmp	r3, r2
 800634c:	bf18      	it	ne
 800634e:	428b      	cmpne	r3, r1
 8006350:	d000      	beq.n	8006354 <HAL_TIM_PWM_Start+0x88>
 8006352:	b118      	cbz	r0, 800635c <HAL_TIM_PWM_Start+0x90>
 8006354:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006356:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800635a:	645a      	str	r2, [r3, #68]	; 0x44
 800635c:	4a39      	ldr	r2, [pc, #228]	; (8006444 <HAL_TIM_PWM_Start+0x178>)
 800635e:	4c3a      	ldr	r4, [pc, #232]	; (8006448 <HAL_TIM_PWM_Start+0x17c>)
 8006360:	4293      	cmp	r3, r2
 8006362:	bf18      	it	ne
 8006364:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 8006368:	4938      	ldr	r1, [pc, #224]	; (800644c <HAL_TIM_PWM_Start+0x180>)
 800636a:	bf0c      	ite	eq
 800636c:	2201      	moveq	r2, #1
 800636e:	2200      	movne	r2, #0
 8006370:	42a3      	cmp	r3, r4
 8006372:	bf08      	it	eq
 8006374:	f042 0201 	orreq.w	r2, r2, #1
 8006378:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
 800637c:	428b      	cmp	r3, r1
 800637e:	bf08      	it	eq
 8006380:	f042 0201 	orreq.w	r2, r2, #1
 8006384:	f501 4154 	add.w	r1, r1, #54272	; 0xd400
 8006388:	42a3      	cmp	r3, r4
 800638a:	bf08      	it	eq
 800638c:	f042 0201 	orreq.w	r2, r2, #1
 8006390:	428b      	cmp	r3, r1
 8006392:	bf08      	it	eq
 8006394:	f042 0201 	orreq.w	r2, r2, #1
 8006398:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800639c:	428b      	cmp	r3, r1
 800639e:	bf08      	it	eq
 80063a0:	f042 0201 	orreq.w	r2, r2, #1
 80063a4:	b90a      	cbnz	r2, 80063aa <HAL_TIM_PWM_Start+0xde>
 80063a6:	2800      	cmp	r0, #0
 80063a8:	d03e      	beq.n	8006428 <HAL_TIM_PWM_Start+0x15c>
 80063aa:	6899      	ldr	r1, [r3, #8]
 80063ac:	4a28      	ldr	r2, [pc, #160]	; (8006450 <HAL_TIM_PWM_Start+0x184>)
 80063ae:	400a      	ands	r2, r1
 80063b0:	2a06      	cmp	r2, #6
 80063b2:	d036      	beq.n	8006422 <HAL_TIM_PWM_Start+0x156>
 80063b4:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80063b8:	d033      	beq.n	8006422 <HAL_TIM_PWM_Start+0x156>
 80063ba:	681a      	ldr	r2, [r3, #0]
 80063bc:	2000      	movs	r0, #0
 80063be:	f042 0201 	orr.w	r2, r2, #1
 80063c2:	601a      	str	r2, [r3, #0]
 80063c4:	bc30      	pop	{r4, r5}
 80063c6:	4770      	bx	lr
 80063c8:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 80063cc:	2b01      	cmp	r3, #1
 80063ce:	d118      	bne.n	8006402 <HAL_TIM_PWM_Start+0x136>
 80063d0:	2302      	movs	r3, #2
 80063d2:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
 80063d6:	e79b      	b.n	8006310 <HAL_TIM_PWM_Start+0x44>
 80063d8:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 80063dc:	2b01      	cmp	r3, #1
 80063de:	d110      	bne.n	8006402 <HAL_TIM_PWM_Start+0x136>
 80063e0:	2302      	movs	r3, #2
 80063e2:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
 80063e6:	e793      	b.n	8006310 <HAL_TIM_PWM_Start+0x44>
 80063e8:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80063ec:	2b01      	cmp	r3, #1
 80063ee:	d108      	bne.n	8006402 <HAL_TIM_PWM_Start+0x136>
 80063f0:	2302      	movs	r3, #2
 80063f2:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 80063f6:	e78b      	b.n	8006310 <HAL_TIM_PWM_Start+0x44>
 80063f8:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80063fc:	2b01      	cmp	r3, #1
 80063fe:	f43f af77 	beq.w	80062f0 <HAL_TIM_PWM_Start+0x24>
 8006402:	2001      	movs	r0, #1
 8006404:	4770      	bx	lr
 8006406:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 800640a:	2b01      	cmp	r3, #1
 800640c:	f43f af70 	beq.w	80062f0 <HAL_TIM_PWM_Start+0x24>
 8006410:	e7f7      	b.n	8006402 <HAL_TIM_PWM_Start+0x136>
 8006412:	2302      	movs	r3, #2
 8006414:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 8006418:	e77a      	b.n	8006310 <HAL_TIM_PWM_Start+0x44>
 800641a:	2302      	movs	r3, #2
 800641c:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
 8006420:	e776      	b.n	8006310 <HAL_TIM_PWM_Start+0x44>
 8006422:	2000      	movs	r0, #0
 8006424:	bc30      	pop	{r4, r5}
 8006426:	4770      	bx	lr
 8006428:	681a      	ldr	r2, [r3, #0]
 800642a:	f042 0201 	orr.w	r2, r2, #1
 800642e:	601a      	str	r2, [r3, #0]
 8006430:	e7c8      	b.n	80063c4 <HAL_TIM_PWM_Start+0xf8>
 8006432:	bf00      	nop
 8006434:	40010000 	.word	0x40010000
 8006438:	40010400 	.word	0x40010400
 800643c:	40014800 	.word	0x40014800
 8006440:	40014400 	.word	0x40014400
 8006444:	40000400 	.word	0x40000400
 8006448:	40000800 	.word	0x40000800
 800644c:	40000c00 	.word	0x40000c00
 8006450:	00010007 	.word	0x00010007

08006454 <HAL_TIM_PWM_Stop>:
 8006454:	6803      	ldr	r3, [r0, #0]
 8006456:	f001 0c1f 	and.w	ip, r1, #31
 800645a:	2201      	movs	r2, #1
 800645c:	b410      	push	{r4}
 800645e:	fa02 f20c 	lsl.w	r2, r2, ip
 8006462:	6a1c      	ldr	r4, [r3, #32]
 8006464:	ea24 0402 	bic.w	r4, r4, r2
 8006468:	4a37      	ldr	r2, [pc, #220]	; (8006548 <HAL_TIM_PWM_Stop+0xf4>)
 800646a:	621c      	str	r4, [r3, #32]
 800646c:	6a1c      	ldr	r4, [r3, #32]
 800646e:	621c      	str	r4, [r3, #32]
 8006470:	4c36      	ldr	r4, [pc, #216]	; (800654c <HAL_TIM_PWM_Stop+0xf8>)
 8006472:	42a3      	cmp	r3, r4
 8006474:	bf18      	it	ne
 8006476:	4293      	cmpne	r3, r2
 8006478:	f504 5470 	add.w	r4, r4, #15360	; 0x3c00
 800647c:	bf0c      	ite	eq
 800647e:	2201      	moveq	r2, #1
 8006480:	2200      	movne	r2, #0
 8006482:	42a3      	cmp	r3, r4
 8006484:	bf08      	it	eq
 8006486:	f042 0201 	orreq.w	r2, r2, #1
 800648a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800648e:	42a3      	cmp	r3, r4
 8006490:	bf08      	it	eq
 8006492:	f042 0201 	orreq.w	r2, r2, #1
 8006496:	b912      	cbnz	r2, 800649e <HAL_TIM_PWM_Stop+0x4a>
 8006498:	4a2d      	ldr	r2, [pc, #180]	; (8006550 <HAL_TIM_PWM_Stop+0xfc>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d10d      	bne.n	80064ba <HAL_TIM_PWM_Stop+0x66>
 800649e:	6a1c      	ldr	r4, [r3, #32]
 80064a0:	f241 1211 	movw	r2, #4369	; 0x1111
 80064a4:	4214      	tst	r4, r2
 80064a6:	d108      	bne.n	80064ba <HAL_TIM_PWM_Stop+0x66>
 80064a8:	6a1c      	ldr	r4, [r3, #32]
 80064aa:	f240 4244 	movw	r2, #1092	; 0x444
 80064ae:	4214      	tst	r4, r2
 80064b0:	d103      	bne.n	80064ba <HAL_TIM_PWM_Stop+0x66>
 80064b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80064b4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80064b8:	645a      	str	r2, [r3, #68]	; 0x44
 80064ba:	6a1c      	ldr	r4, [r3, #32]
 80064bc:	f241 1211 	movw	r2, #4369	; 0x1111
 80064c0:	4214      	tst	r4, r2
 80064c2:	d104      	bne.n	80064ce <HAL_TIM_PWM_Stop+0x7a>
 80064c4:	6a1c      	ldr	r4, [r3, #32]
 80064c6:	f240 4244 	movw	r2, #1092	; 0x444
 80064ca:	4214      	tst	r4, r2
 80064cc:	d013      	beq.n	80064f6 <HAL_TIM_PWM_Stop+0xa2>
 80064ce:	b931      	cbnz	r1, 80064de <HAL_TIM_PWM_Stop+0x8a>
 80064d0:	2301      	movs	r3, #1
 80064d2:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
 80064d6:	2000      	movs	r0, #0
 80064d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80064dc:	4770      	bx	lr
 80064de:	3904      	subs	r1, #4
 80064e0:	290c      	cmp	r1, #12
 80064e2:	d80d      	bhi.n	8006500 <HAL_TIM_PWM_Stop+0xac>
 80064e4:	e8df f001 	tbb	[pc, r1]
 80064e8:	0c0c0c13 	.word	0x0c0c0c13
 80064ec:	0c0c0c1a 	.word	0x0c0c0c1a
 80064f0:	0c0c0c21 	.word	0x0c0c0c21
 80064f4:	28          	.byte	0x28
 80064f5:	00          	.byte	0x00
 80064f6:	681a      	ldr	r2, [r3, #0]
 80064f8:	f022 0201 	bic.w	r2, r2, #1
 80064fc:	601a      	str	r2, [r3, #0]
 80064fe:	e7e6      	b.n	80064ce <HAL_TIM_PWM_Stop+0x7a>
 8006500:	2301      	movs	r3, #1
 8006502:	f880 3043 	strb.w	r3, [r0, #67]	; 0x43
 8006506:	2000      	movs	r0, #0
 8006508:	f85d 4b04 	ldr.w	r4, [sp], #4
 800650c:	4770      	bx	lr
 800650e:	2301      	movs	r3, #1
 8006510:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
 8006514:	2000      	movs	r0, #0
 8006516:	f85d 4b04 	ldr.w	r4, [sp], #4
 800651a:	4770      	bx	lr
 800651c:	2301      	movs	r3, #1
 800651e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8006522:	2000      	movs	r0, #0
 8006524:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006528:	4770      	bx	lr
 800652a:	2301      	movs	r3, #1
 800652c:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 8006530:	2000      	movs	r0, #0
 8006532:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006536:	4770      	bx	lr
 8006538:	2301      	movs	r3, #1
 800653a:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
 800653e:	2000      	movs	r0, #0
 8006540:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006544:	4770      	bx	lr
 8006546:	bf00      	nop
 8006548:	40010000 	.word	0x40010000
 800654c:	40010400 	.word	0x40010400
 8006550:	40014800 	.word	0x40014800

08006554 <HAL_TIM_OnePulse_MspInit>:
 8006554:	4770      	bx	lr
 8006556:	bf00      	nop

08006558 <HAL_TIM_OnePulse_Init>:
  if (htim == NULL)
 8006558:	2800      	cmp	r0, #0
 800655a:	f000 80ab 	beq.w	80066b4 <HAL_TIM_OnePulse_Init+0x15c>
{
 800655e:	b570      	push	{r4, r5, r6, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8006560:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006564:	4604      	mov	r4, r0
 8006566:	460d      	mov	r5, r1
 8006568:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800656c:	2b00      	cmp	r3, #0
 800656e:	d07a      	beq.n	8006666 <HAL_TIM_OnePulse_Init+0x10e>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006570:	6823      	ldr	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8006572:	2202      	movs	r2, #2
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006574:	4950      	ldr	r1, [pc, #320]	; (80066b8 <HAL_TIM_OnePulse_Init+0x160>)
 8006576:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
  htim->State = HAL_TIM_STATE_BUSY;
 800657a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800657e:	eba3 0101 	sub.w	r1, r3, r1
  tmpcr1 = TIMx->CR1;
 8006582:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006584:	fab1 f181 	clz	r1, r1
 8006588:	ea4f 1151 	mov.w	r1, r1, lsr #5
 800658c:	d046      	beq.n	800661c <HAL_TIM_OnePulse_Init+0xc4>
 800658e:	2900      	cmp	r1, #0
 8006590:	d144      	bne.n	800661c <HAL_TIM_OnePulse_Init+0xc4>
 8006592:	484a      	ldr	r0, [pc, #296]	; (80066bc <HAL_TIM_OnePulse_Init+0x164>)
 8006594:	4283      	cmp	r3, r0
 8006596:	d06b      	beq.n	8006670 <HAL_TIM_OnePulse_Init+0x118>
 8006598:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800659c:	4283      	cmp	r3, r0
 800659e:	d067      	beq.n	8006670 <HAL_TIM_OnePulse_Init+0x118>
 80065a0:	4e47      	ldr	r6, [pc, #284]	; (80066c0 <HAL_TIM_OnePulse_Init+0x168>)
 80065a2:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 80065a6:	1b9e      	subs	r6, r3, r6
 80065a8:	4283      	cmp	r3, r0
 80065aa:	fab6 f686 	clz	r6, r6
 80065ae:	ea4f 1656 	mov.w	r6, r6, lsr #5
 80065b2:	d067      	beq.n	8006684 <HAL_TIM_OnePulse_Init+0x12c>
 80065b4:	2e00      	cmp	r6, #0
 80065b6:	d165      	bne.n	8006684 <HAL_TIM_OnePulse_Init+0x12c>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80065b8:	4942      	ldr	r1, [pc, #264]	; (80066c4 <HAL_TIM_OnePulse_Init+0x16c>)
 80065ba:	428b      	cmp	r3, r1
 80065bc:	d06c      	beq.n	8006698 <HAL_TIM_OnePulse_Init+0x140>
 80065be:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80065c2:	428b      	cmp	r3, r1
 80065c4:	d068      	beq.n	8006698 <HAL_TIM_OnePulse_Init+0x140>
 80065c6:	4840      	ldr	r0, [pc, #256]	; (80066c8 <HAL_TIM_OnePulse_Init+0x170>)
 80065c8:	f5a1 41c8 	sub.w	r1, r1, #25600	; 0x6400
 80065cc:	428b      	cmp	r3, r1
 80065ce:	bf18      	it	ne
 80065d0:	4283      	cmpne	r3, r0
 80065d2:	d061      	beq.n	8006698 <HAL_TIM_OnePulse_Init+0x140>
 80065d4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80065d8:	428b      	cmp	r3, r1
 80065da:	d05d      	beq.n	8006698 <HAL_TIM_OnePulse_Init+0x140>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80065dc:	69a1      	ldr	r1, [r4, #24]
 80065de:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80065e2:	430a      	orrs	r2, r1
  TIMx->ARR = (uint32_t)Structure->Period ;
 80065e4:	68e1      	ldr	r1, [r4, #12]
  TIMx->CR1 = tmpcr1;
 80065e6:	601a      	str	r2, [r3, #0]
  TIMx->PSC = Structure->Prescaler;
 80065e8:	6862      	ldr	r2, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80065ea:	62d9      	str	r1, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80065ec:	629a      	str	r2, [r3, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 80065ee:	2201      	movs	r2, #1
  return HAL_OK;
 80065f0:	2000      	movs	r0, #0
  TIMx->EGR = TIM_EGR_UG;
 80065f2:	615a      	str	r2, [r3, #20]
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 80065f4:	6819      	ldr	r1, [r3, #0]
 80065f6:	f021 0108 	bic.w	r1, r1, #8
 80065fa:	6019      	str	r1, [r3, #0]
  htim->Instance->CR1 |= OnePulseMode;
 80065fc:	6819      	ldr	r1, [r3, #0]
 80065fe:	4329      	orrs	r1, r5
 8006600:	6019      	str	r1, [r3, #0]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006602:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006606:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800660a:	f884 203f 	strb.w	r2, [r4, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800660e:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006612:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8006616:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
}
 800661a:	bd70      	pop	{r4, r5, r6, pc}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800661c:	4e28      	ldr	r6, [pc, #160]	; (80066c0 <HAL_TIM_OnePulse_Init+0x168>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800661e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8006622:	68a0      	ldr	r0, [r4, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006624:	1b9e      	subs	r6, r3, r6
    tmpcr1 |= Structure->CounterMode;
 8006626:	4302      	orrs	r2, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006628:	fab6 f686 	clz	r6, r6
 800662c:	0976      	lsrs	r6, r6, #5
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800662e:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8006630:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006634:	4302      	orrs	r2, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006636:	69a0      	ldr	r0, [r4, #24]
 8006638:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800663c:	4302      	orrs	r2, r0
  TIMx->CR1 = tmpcr1;
 800663e:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006640:	68e2      	ldr	r2, [r4, #12]
 8006642:	62da      	str	r2, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006644:	6862      	ldr	r2, [r4, #4]
 8006646:	629a      	str	r2, [r3, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006648:	b951      	cbnz	r1, 8006660 <HAL_TIM_OnePulse_Init+0x108>
 800664a:	b94e      	cbnz	r6, 8006660 <HAL_TIM_OnePulse_Init+0x108>
 800664c:	491d      	ldr	r1, [pc, #116]	; (80066c4 <HAL_TIM_OnePulse_Init+0x16c>)
 800664e:	4a1f      	ldr	r2, [pc, #124]	; (80066cc <HAL_TIM_OnePulse_Init+0x174>)
 8006650:	4293      	cmp	r3, r2
 8006652:	bf18      	it	ne
 8006654:	428b      	cmpne	r3, r1
 8006656:	d003      	beq.n	8006660 <HAL_TIM_OnePulse_Init+0x108>
 8006658:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800665c:	4293      	cmp	r3, r2
 800665e:	d1c6      	bne.n	80065ee <HAL_TIM_OnePulse_Init+0x96>
    TIMx->RCR = Structure->RepetitionCounter;
 8006660:	6962      	ldr	r2, [r4, #20]
 8006662:	631a      	str	r2, [r3, #48]	; 0x30
 8006664:	e7c3      	b.n	80065ee <HAL_TIM_OnePulse_Init+0x96>
    htim->Lock = HAL_UNLOCKED;
 8006666:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_OnePulse_MspInit(htim);
 800666a:	f7ff ff73 	bl	8006554 <HAL_TIM_OnePulse_MspInit>
 800666e:	e77f      	b.n	8006570 <HAL_TIM_OnePulse_Init+0x18>
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006670:	4e13      	ldr	r6, [pc, #76]	; (80066c0 <HAL_TIM_OnePulse_Init+0x168>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006672:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8006676:	68a0      	ldr	r0, [r4, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006678:	1b9e      	subs	r6, r3, r6
    tmpcr1 |= Structure->CounterMode;
 800667a:	4302      	orrs	r2, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800667c:	fab6 f686 	clz	r6, r6
 8006680:	0976      	lsrs	r6, r6, #5
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006682:	e7d4      	b.n	800662e <HAL_TIM_OnePulse_Init+0xd6>
    tmpcr1 |= Structure->CounterMode;
 8006684:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006686:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800668a:	4302      	orrs	r2, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800668c:	4810      	ldr	r0, [pc, #64]	; (80066d0 <HAL_TIM_OnePulse_Init+0x178>)
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800668e:	4283      	cmp	r3, r0
 8006690:	d0cd      	beq.n	800662e <HAL_TIM_OnePulse_Init+0xd6>
 8006692:	2e00      	cmp	r6, #0
 8006694:	d1cb      	bne.n	800662e <HAL_TIM_OnePulse_Init+0xd6>
 8006696:	e78f      	b.n	80065b8 <HAL_TIM_OnePulse_Init+0x60>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006698:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 800669a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800669e:	430a      	orrs	r2, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80066a0:	69a1      	ldr	r1, [r4, #24]
 80066a2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80066a6:	430a      	orrs	r2, r1
  TIMx->ARR = (uint32_t)Structure->Period ;
 80066a8:	68e1      	ldr	r1, [r4, #12]
  TIMx->CR1 = tmpcr1;
 80066aa:	601a      	str	r2, [r3, #0]
  TIMx->PSC = Structure->Prescaler;
 80066ac:	6862      	ldr	r2, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80066ae:	62d9      	str	r1, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80066b0:	629a      	str	r2, [r3, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80066b2:	e7cb      	b.n	800664c <HAL_TIM_OnePulse_Init+0xf4>
    return HAL_ERROR;
 80066b4:	2001      	movs	r0, #1
}
 80066b6:	4770      	bx	lr
 80066b8:	40010000 	.word	0x40010000
 80066bc:	40000400 	.word	0x40000400
 80066c0:	40010400 	.word	0x40010400
 80066c4:	40014000 	.word	0x40014000
 80066c8:	40014800 	.word	0x40014800
 80066cc:	40014400 	.word	0x40014400
 80066d0:	40000c00 	.word	0x40000c00

080066d4 <HAL_TIM_SlaveConfigSynchro>:
  __HAL_LOCK(htim);
 80066d4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80066d8:	2b01      	cmp	r3, #1
 80066da:	d078      	beq.n	80067ce <HAL_TIM_SlaveConfigSynchro+0xfa>
 80066dc:	4602      	mov	r2, r0
  htim->State = HAL_TIM_STATE_BUSY;
 80066de:	2302      	movs	r3, #2
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80066e0:	6800      	ldr	r0, [r0, #0]
{
 80066e2:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 80066e4:	2401      	movs	r4, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80066e6:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  __HAL_LOCK(htim);
 80066ea:	f882 403c 	strb.w	r4, [r2, #60]	; 0x3c

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80066ee:	4c50      	ldr	r4, [pc, #320]	; (8006830 <HAL_TIM_SlaveConfigSynchro+0x15c>)
  tmpsmcr = htim->Instance->SMCR;
 80066f0:	6883      	ldr	r3, [r0, #8]
  tmpsmcr |= sSlaveConfig->InputTrigger;

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80066f2:	680d      	ldr	r5, [r1, #0]
  tmpsmcr &= ~TIM_SMCR_TS;
 80066f4:	401c      	ands	r4, r3
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80066f6:	684b      	ldr	r3, [r1, #4]
 80066f8:	ea44 0c03 	orr.w	ip, r4, r3
  tmpsmcr &= ~TIM_SMCR_SMS;
 80066fc:	4c4d      	ldr	r4, [pc, #308]	; (8006834 <HAL_TIM_SlaveConfigSynchro+0x160>)

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80066fe:	2b60      	cmp	r3, #96	; 0x60
  tmpsmcr &= ~TIM_SMCR_SMS;
 8006700:	ea0c 0404 	and.w	r4, ip, r4
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8006704:	ea44 0405 	orr.w	r4, r4, r5
  htim->Instance->SMCR = tmpsmcr;
 8006708:	6084      	str	r4, [r0, #8]
  switch (sSlaveConfig->InputTrigger)
 800670a:	d07e      	beq.n	800680a <HAL_TIM_SlaveConfigSynchro+0x136>
 800670c:	d826      	bhi.n	800675c <HAL_TIM_SlaveConfigSynchro+0x88>
 800670e:	2b40      	cmp	r3, #64	; 0x40
 8006710:	d06b      	beq.n	80067ea <HAL_TIM_SlaveConfigSynchro+0x116>
 8006712:	d933      	bls.n	800677c <HAL_TIM_SlaveConfigSynchro+0xa8>
 8006714:	2b50      	cmp	r3, #80	; 0x50
 8006716:	d13c      	bne.n	8006792 <HAL_TIM_SlaveConfigSynchro+0xbe>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
                               sSlaveConfig->TriggerPolarity,
 8006718:	688b      	ldr	r3, [r1, #8]
                               sSlaveConfig->TriggerFilter);
 800671a:	690c      	ldr	r4, [r1, #16]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800671c:	6a01      	ldr	r1, [r0, #32]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800671e:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8006722:	4319      	orrs	r1, r3
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006724:	6a03      	ldr	r3, [r0, #32]
 8006726:	f023 0301 	bic.w	r3, r3, #1
 800672a:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800672c:	6983      	ldr	r3, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800672e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006732:	ea43 1304 	orr.w	r3, r3, r4, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006736:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8006738:	6201      	str	r1, [r0, #32]
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800673a:	68c3      	ldr	r3, [r0, #12]
  __HAL_UNLOCK(htim);
 800673c:	2100      	movs	r1, #0
  htim->State = HAL_TIM_STATE_READY;
 800673e:	2401      	movs	r4, #1
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8006740:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006744:	60c3      	str	r3, [r0, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8006746:	68c3      	ldr	r3, [r0, #12]
 8006748:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800674c:	60c3      	str	r3, [r0, #12]
  return HAL_OK;
 800674e:	4608      	mov	r0, r1
  htim->State = HAL_TIM_STATE_READY;
 8006750:	f882 403d 	strb.w	r4, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8006754:	f882 103c 	strb.w	r1, [r2, #60]	; 0x3c
}
 8006758:	bc30      	pop	{r4, r5}
 800675a:	4770      	bx	lr
  switch (sSlaveConfig->InputTrigger)
 800675c:	2b70      	cmp	r3, #112	; 0x70
 800675e:	d038      	beq.n	80067d2 <HAL_TIM_SlaveConfigSynchro+0xfe>
 8006760:	2b6f      	cmp	r3, #111	; 0x6f
 8006762:	d916      	bls.n	8006792 <HAL_TIM_SlaveConfigSynchro+0xbe>
 8006764:	4934      	ldr	r1, [pc, #208]	; (8006838 <HAL_TIM_SlaveConfigSynchro+0x164>)
 8006766:	428b      	cmp	r3, r1
 8006768:	d0e7      	beq.n	800673a <HAL_TIM_SlaveConfigSynchro+0x66>
 800676a:	d91b      	bls.n	80067a4 <HAL_TIM_SlaveConfigSynchro+0xd0>
 800676c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006770:	d0e3      	beq.n	800673a <HAL_TIM_SlaveConfigSynchro+0x66>
 8006772:	d909      	bls.n	8006788 <HAL_TIM_SlaveConfigSynchro+0xb4>
 8006774:	4931      	ldr	r1, [pc, #196]	; (800683c <HAL_TIM_SlaveConfigSynchro+0x168>)
 8006776:	428b      	cmp	r3, r1
 8006778:	d0df      	beq.n	800673a <HAL_TIM_SlaveConfigSynchro+0x66>
 800677a:	e00a      	b.n	8006792 <HAL_TIM_SlaveConfigSynchro+0xbe>
 800677c:	2b20      	cmp	r3, #32
 800677e:	d0dc      	beq.n	800673a <HAL_TIM_SlaveConfigSynchro+0x66>
 8006780:	d91b      	bls.n	80067ba <HAL_TIM_SlaveConfigSynchro+0xe6>
 8006782:	2b30      	cmp	r3, #48	; 0x30
 8006784:	d105      	bne.n	8006792 <HAL_TIM_SlaveConfigSynchro+0xbe>
 8006786:	e7d8      	b.n	800673a <HAL_TIM_SlaveConfigSynchro+0x66>
 8006788:	f023 0310 	bic.w	r3, r3, #16
 800678c:	492c      	ldr	r1, [pc, #176]	; (8006840 <HAL_TIM_SlaveConfigSynchro+0x16c>)
 800678e:	428b      	cmp	r3, r1
 8006790:	d0d3      	beq.n	800673a <HAL_TIM_SlaveConfigSynchro+0x66>
    htim->State = HAL_TIM_STATE_READY;
 8006792:	2301      	movs	r3, #1
    __HAL_UNLOCK(htim);
 8006794:	2100      	movs	r1, #0
    return HAL_ERROR;
 8006796:	4618      	mov	r0, r3
    htim->State = HAL_TIM_STATE_READY;
 8006798:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800679c:	f882 103c 	strb.w	r1, [r2, #60]	; 0x3c
}
 80067a0:	bc30      	pop	{r4, r5}
 80067a2:	4770      	bx	lr
  switch (sSlaveConfig->InputTrigger)
 80067a4:	3930      	subs	r1, #48	; 0x30
 80067a6:	428b      	cmp	r3, r1
 80067a8:	d0c7      	beq.n	800673a <HAL_TIM_SlaveConfigSynchro+0x66>
 80067aa:	d90a      	bls.n	80067c2 <HAL_TIM_SlaveConfigSynchro+0xee>
 80067ac:	4925      	ldr	r1, [pc, #148]	; (8006844 <HAL_TIM_SlaveConfigSynchro+0x170>)
 80067ae:	428b      	cmp	r3, r1
 80067b0:	d0c3      	beq.n	800673a <HAL_TIM_SlaveConfigSynchro+0x66>
 80067b2:	3110      	adds	r1, #16
 80067b4:	428b      	cmp	r3, r1
 80067b6:	d0c0      	beq.n	800673a <HAL_TIM_SlaveConfigSynchro+0x66>
 80067b8:	e7eb      	b.n	8006792 <HAL_TIM_SlaveConfigSynchro+0xbe>
 80067ba:	f033 0310 	bics.w	r3, r3, #16
 80067be:	d1e8      	bne.n	8006792 <HAL_TIM_SlaveConfigSynchro+0xbe>
 80067c0:	e7bb      	b.n	800673a <HAL_TIM_SlaveConfigSynchro+0x66>
 80067c2:	f023 0310 	bic.w	r3, r3, #16
 80067c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80067ca:	d1e2      	bne.n	8006792 <HAL_TIM_SlaveConfigSynchro+0xbe>
 80067cc:	e7b5      	b.n	800673a <HAL_TIM_SlaveConfigSynchro+0x66>
  __HAL_LOCK(htim);
 80067ce:	2002      	movs	r0, #2
}
 80067d0:	4770      	bx	lr

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80067d2:	e9d1 5302 	ldrd	r5, r3, [r1, #8]
  tmpsmcr = TIMx->SMCR;
 80067d6:	6884      	ldr	r4, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80067d8:	432b      	orrs	r3, r5
 80067da:	690d      	ldr	r5, [r1, #16]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80067dc:	f424 417f 	bic.w	r1, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80067e0:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 80067e4:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80067e6:	6083      	str	r3, [r0, #8]
 80067e8:	e7a7      	b.n	800673a <HAL_TIM_SlaveConfigSynchro+0x66>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80067ea:	2d05      	cmp	r5, #5
 80067ec:	d0d1      	beq.n	8006792 <HAL_TIM_SlaveConfigSynchro+0xbe>
      tmpccer = htim->Instance->CCER;
 80067ee:	6a04      	ldr	r4, [r0, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80067f0:	6a03      	ldr	r3, [r0, #32]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80067f2:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80067f4:	f023 0301 	bic.w	r3, r3, #1
 80067f8:	6203      	str	r3, [r0, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80067fa:	6983      	ldr	r3, [r0, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80067fc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8006800:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 8006804:	6183      	str	r3, [r0, #24]
      htim->Instance->CCER = tmpccer;
 8006806:	6204      	str	r4, [r0, #32]
      break;
 8006808:	e797      	b.n	800673a <HAL_TIM_SlaveConfigSynchro+0x66>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800680a:	6a03      	ldr	r3, [r0, #32]
                               sSlaveConfig->TriggerPolarity,
 800680c:	688c      	ldr	r4, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800680e:	f023 0310 	bic.w	r3, r3, #16
                               sSlaveConfig->TriggerFilter);
 8006812:	690d      	ldr	r5, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006814:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006816:	6981      	ldr	r1, [r0, #24]
  tmpccer = TIMx->CCER;
 8006818:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800681a:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800681e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006822:	ea41 3105 	orr.w	r1, r1, r5, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 8006826:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 800682a:	6181      	str	r1, [r0, #24]
  TIMx->CCER = tmpccer;
 800682c:	6203      	str	r3, [r0, #32]
 800682e:	e784      	b.n	800673a <HAL_TIM_SlaveConfigSynchro+0x66>
 8006830:	ffcfff8f 	.word	0xffcfff8f
 8006834:	fffefff8 	.word	0xfffefff8
 8006838:	00100050 	.word	0x00100050
 800683c:	00200010 	.word	0x00200010
 8006840:	00100060 	.word	0x00100060
 8006844:	00100030 	.word	0x00100030

08006848 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006848:	6a03      	ldr	r3, [r0, #32]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800684a:	4a1c      	ldr	r2, [pc, #112]	; (80068bc <TIM_OC2_SetConfig+0x74>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800684c:	f023 0310 	bic.w	r3, r3, #16
{
 8006850:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006852:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8006854:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8006856:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8006858:	6985      	ldr	r5, [r0, #24]
  tmpccer &= ~TIM_CCER_CC2P;
 800685a:	f023 0320 	bic.w	r3, r3, #32
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800685e:	402a      	ands	r2, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006860:	680d      	ldr	r5, [r1, #0]
 8006862:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006866:	688d      	ldr	r5, [r1, #8]
 8006868:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800686c:	4d14      	ldr	r5, [pc, #80]	; (80068c0 <TIM_OC2_SetConfig+0x78>)
 800686e:	42a8      	cmp	r0, r5
 8006870:	d00e      	beq.n	8006890 <TIM_OC2_SetConfig+0x48>
 8006872:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006876:	42a8      	cmp	r0, r5
 8006878:	d00a      	beq.n	8006890 <TIM_OC2_SetConfig+0x48>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800687a:	4e12      	ldr	r6, [pc, #72]	; (80068c4 <TIM_OC2_SetConfig+0x7c>)
 800687c:	4d12      	ldr	r5, [pc, #72]	; (80068c8 <TIM_OC2_SetConfig+0x80>)
 800687e:	42a8      	cmp	r0, r5
 8006880:	bf18      	it	ne
 8006882:	42b0      	cmpne	r0, r6
 8006884:	d00b      	beq.n	800689e <TIM_OC2_SetConfig+0x56>
 8006886:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800688a:	42a8      	cmp	r0, r5
 800688c:	d10f      	bne.n	80068ae <TIM_OC2_SetConfig+0x66>
 800688e:	e006      	b.n	800689e <TIM_OC2_SetConfig+0x56>
    tmpccer &= ~TIM_CCER_CC2NP;
 8006890:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006894:	68cd      	ldr	r5, [r1, #12]
 8006896:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 800689a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800689e:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80068a2:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
 80068a6:	ea46 0c05 	orr.w	ip, r6, r5
 80068aa:	ea44 048c 	orr.w	r4, r4, ip, lsl #2
  TIMx->CCR2 = OC_Config->Pulse;
 80068ae:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80068b0:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80068b2:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80068b4:	6381      	str	r1, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80068b6:	6203      	str	r3, [r0, #32]
}
 80068b8:	bc70      	pop	{r4, r5, r6}
 80068ba:	4770      	bx	lr
 80068bc:	feff8cff 	.word	0xfeff8cff
 80068c0:	40010000 	.word	0x40010000
 80068c4:	40014000 	.word	0x40014000
 80068c8:	40014400 	.word	0x40014400

080068cc <HAL_TIM_PWM_ConfigChannel>:
{
 80068cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 80068ce:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80068d2:	2b01      	cmp	r3, #1
 80068d4:	f000 810d 	beq.w	8006af2 <HAL_TIM_PWM_ConfigChannel+0x226>
 80068d8:	2301      	movs	r3, #1
 80068da:	4604      	mov	r4, r0
 80068dc:	460d      	mov	r5, r1
 80068de:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 80068e2:	2a14      	cmp	r2, #20
 80068e4:	d816      	bhi.n	8006914 <HAL_TIM_PWM_ConfigChannel+0x48>
 80068e6:	e8df f012 	tbh	[pc, r2, lsl #1]
 80068ea:	0058      	.short	0x0058
 80068ec:	00150015 	.word	0x00150015
 80068f0:	00690015 	.word	0x00690015
 80068f4:	00150015 	.word	0x00150015
 80068f8:	007b0015 	.word	0x007b0015
 80068fc:	00150015 	.word	0x00150015
 8006900:	008c0015 	.word	0x008c0015
 8006904:	00150015 	.word	0x00150015
 8006908:	00c90015 	.word	0x00c90015
 800690c:	00150015 	.word	0x00150015
 8006910:	001b0015 	.word	0x001b0015
 8006914:	2201      	movs	r2, #1
  __HAL_UNLOCK(htim);
 8006916:	2300      	movs	r3, #0
}
 8006918:	4610      	mov	r0, r2
  __HAL_UNLOCK(htim);
 800691a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800691e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006920:	6803      	ldr	r3, [r0, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006922:	4975      	ldr	r1, [pc, #468]	; (8006af8 <HAL_TIM_PWM_ConfigChannel+0x22c>)
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006924:	6a1a      	ldr	r2, [r3, #32]
 8006926:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800692a:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 800692c:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 800692e:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 8006930:	6d5e      	ldr	r6, [r3, #84]	; 0x54
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006932:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006936:	4031      	ands	r1, r6
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006938:	682e      	ldr	r6, [r5, #0]
 800693a:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800693e:	68ae      	ldr	r6, [r5, #8]
 8006940:	ea42 5206 	orr.w	r2, r2, r6, lsl #20
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006944:	4e6d      	ldr	r6, [pc, #436]	; (8006afc <HAL_TIM_PWM_ConfigChannel+0x230>)
 8006946:	42b3      	cmp	r3, r6
 8006948:	d00e      	beq.n	8006968 <HAL_TIM_PWM_ConfigChannel+0x9c>
 800694a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800694e:	42b3      	cmp	r3, r6
 8006950:	d00a      	beq.n	8006968 <HAL_TIM_PWM_ConfigChannel+0x9c>
 8006952:	4f6b      	ldr	r7, [pc, #428]	; (8006b00 <HAL_TIM_PWM_ConfigChannel+0x234>)
 8006954:	f506 4680 	add.w	r6, r6, #16384	; 0x4000
 8006958:	42b3      	cmp	r3, r6
 800695a:	bf18      	it	ne
 800695c:	42bb      	cmpne	r3, r7
 800695e:	d003      	beq.n	8006968 <HAL_TIM_PWM_ConfigChannel+0x9c>
 8006960:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8006964:	42b3      	cmp	r3, r6
 8006966:	d104      	bne.n	8006972 <HAL_TIM_PWM_ConfigChannel+0xa6>
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006968:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800696c:	696e      	ldr	r6, [r5, #20]
 800696e:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
  TIMx->CR2 = tmpcr2;
 8006972:	6058      	str	r0, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 8006974:	6559      	str	r1, [r3, #84]	; 0x54
  TIMx->CCR6 = OC_Config->Pulse;
 8006976:	6869      	ldr	r1, [r5, #4]
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006978:	6928      	ldr	r0, [r5, #16]
  TIMx->CCR6 = OC_Config->Pulse;
 800697a:	65d9      	str	r1, [r3, #92]	; 0x5c
  TIMx->CCER = tmpccer;
 800697c:	621a      	str	r2, [r3, #32]
  HAL_StatusTypeDef status = HAL_OK;
 800697e:	2200      	movs	r2, #0
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006980:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006982:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8006986:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006988:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800698a:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800698e:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006990:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006992:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 8006996:	6559      	str	r1, [r3, #84]	; 0x54
      break;
 8006998:	e7bd      	b.n	8006916 <HAL_TIM_PWM_ConfigChannel+0x4a>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800699a:	6800      	ldr	r0, [r0, #0]
 800699c:	f7ff fa92 	bl	8005ec4 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80069a0:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80069a2:	6983      	ldr	r3, [r0, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80069a4:	2200      	movs	r2, #0
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80069a6:	f043 0308 	orr.w	r3, r3, #8
 80069aa:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80069ac:	6983      	ldr	r3, [r0, #24]
 80069ae:	f023 0304 	bic.w	r3, r3, #4
 80069b2:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80069b4:	6983      	ldr	r3, [r0, #24]
 80069b6:	430b      	orrs	r3, r1
 80069b8:	6183      	str	r3, [r0, #24]
      break;
 80069ba:	e7ac      	b.n	8006916 <HAL_TIM_PWM_ConfigChannel+0x4a>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80069bc:	6800      	ldr	r0, [r0, #0]
 80069be:	f7ff ff43 	bl	8006848 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80069c2:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80069c4:	6983      	ldr	r3, [r0, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80069c6:	2200      	movs	r2, #0
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80069c8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80069cc:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80069ce:	6983      	ldr	r3, [r0, #24]
 80069d0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80069d4:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80069d6:	6983      	ldr	r3, [r0, #24]
 80069d8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80069dc:	6183      	str	r3, [r0, #24]
      break;
 80069de:	e79a      	b.n	8006916 <HAL_TIM_PWM_ConfigChannel+0x4a>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80069e0:	6800      	ldr	r0, [r0, #0]
 80069e2:	f7ff faad 	bl	8005f40 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80069e6:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80069e8:	69c3      	ldr	r3, [r0, #28]
  HAL_StatusTypeDef status = HAL_OK;
 80069ea:	2200      	movs	r2, #0
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80069ec:	f043 0308 	orr.w	r3, r3, #8
 80069f0:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80069f2:	69c3      	ldr	r3, [r0, #28]
 80069f4:	f023 0304 	bic.w	r3, r3, #4
 80069f8:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80069fa:	69c3      	ldr	r3, [r0, #28]
 80069fc:	430b      	orrs	r3, r1
 80069fe:	61c3      	str	r3, [r0, #28]
      break;
 8006a00:	e789      	b.n	8006916 <HAL_TIM_PWM_ConfigChannel+0x4a>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006a02:	6803      	ldr	r3, [r0, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006a04:	493f      	ldr	r1, [pc, #252]	; (8006b04 <HAL_TIM_PWM_ConfigChannel+0x238>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006a06:	6a1a      	ldr	r2, [r3, #32]
 8006a08:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006a0c:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8006a0e:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8006a10:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8006a12:	69de      	ldr	r6, [r3, #28]
  tmpccer &= ~TIM_CCER_CC4P;
 8006a14:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006a18:	4031      	ands	r1, r6
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a1a:	682e      	ldr	r6, [r5, #0]
 8006a1c:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006a20:	68ae      	ldr	r6, [r5, #8]
 8006a22:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a26:	4e35      	ldr	r6, [pc, #212]	; (8006afc <HAL_TIM_PWM_ConfigChannel+0x230>)
 8006a28:	42b3      	cmp	r3, r6
 8006a2a:	d00e      	beq.n	8006a4a <HAL_TIM_PWM_ConfigChannel+0x17e>
 8006a2c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8006a30:	42b3      	cmp	r3, r6
 8006a32:	d00a      	beq.n	8006a4a <HAL_TIM_PWM_ConfigChannel+0x17e>
 8006a34:	4f32      	ldr	r7, [pc, #200]	; (8006b00 <HAL_TIM_PWM_ConfigChannel+0x234>)
 8006a36:	f506 4680 	add.w	r6, r6, #16384	; 0x4000
 8006a3a:	42b3      	cmp	r3, r6
 8006a3c:	bf18      	it	ne
 8006a3e:	42bb      	cmpne	r3, r7
 8006a40:	d003      	beq.n	8006a4a <HAL_TIM_PWM_ConfigChannel+0x17e>
 8006a42:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8006a46:	42b3      	cmp	r3, r6
 8006a48:	d104      	bne.n	8006a54 <HAL_TIM_PWM_ConfigChannel+0x188>
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006a4a:	f420 4080 	bic.w	r0, r0, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006a4e:	696e      	ldr	r6, [r5, #20]
 8006a50:	ea40 1086 	orr.w	r0, r0, r6, lsl #6
  TIMx->CR2 = tmpcr2;
 8006a54:	6058      	str	r0, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 8006a56:	61d9      	str	r1, [r3, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8006a58:	6869      	ldr	r1, [r5, #4]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006a5a:	6928      	ldr	r0, [r5, #16]
  TIMx->CCR4 = OC_Config->Pulse;
 8006a5c:	6419      	str	r1, [r3, #64]	; 0x40
  TIMx->CCER = tmpccer;
 8006a5e:	621a      	str	r2, [r3, #32]
  HAL_StatusTypeDef status = HAL_OK;
 8006a60:	2200      	movs	r2, #0
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006a62:	69d9      	ldr	r1, [r3, #28]
 8006a64:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8006a68:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006a6a:	69d9      	ldr	r1, [r3, #28]
 8006a6c:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8006a70:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006a72:	69d9      	ldr	r1, [r3, #28]
 8006a74:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 8006a78:	61d9      	str	r1, [r3, #28]
      break;
 8006a7a:	e74c      	b.n	8006916 <HAL_TIM_PWM_ConfigChannel+0x4a>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006a7c:	6803      	ldr	r3, [r0, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006a7e:	4922      	ldr	r1, [pc, #136]	; (8006b08 <HAL_TIM_PWM_ConfigChannel+0x23c>)
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006a80:	6a1a      	ldr	r2, [r3, #32]
 8006a82:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006a86:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8006a88:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8006a8a:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 8006a8c:	6d5e      	ldr	r6, [r3, #84]	; 0x54
  tmpccer &= ~TIM_CCER_CC5P;
 8006a8e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006a92:	4031      	ands	r1, r6
  tmpccmrx |= OC_Config->OCMode;
 8006a94:	682e      	ldr	r6, [r5, #0]
 8006a96:	4331      	orrs	r1, r6
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006a98:	68ae      	ldr	r6, [r5, #8]
 8006a9a:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a9e:	4e17      	ldr	r6, [pc, #92]	; (8006afc <HAL_TIM_PWM_ConfigChannel+0x230>)
 8006aa0:	42b3      	cmp	r3, r6
 8006aa2:	d00e      	beq.n	8006ac2 <HAL_TIM_PWM_ConfigChannel+0x1f6>
 8006aa4:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8006aa8:	42b3      	cmp	r3, r6
 8006aaa:	d00a      	beq.n	8006ac2 <HAL_TIM_PWM_ConfigChannel+0x1f6>
 8006aac:	4f14      	ldr	r7, [pc, #80]	; (8006b00 <HAL_TIM_PWM_ConfigChannel+0x234>)
 8006aae:	f506 4680 	add.w	r6, r6, #16384	; 0x4000
 8006ab2:	42b3      	cmp	r3, r6
 8006ab4:	bf18      	it	ne
 8006ab6:	42bb      	cmpne	r3, r7
 8006ab8:	d003      	beq.n	8006ac2 <HAL_TIM_PWM_ConfigChannel+0x1f6>
 8006aba:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8006abe:	42b3      	cmp	r3, r6
 8006ac0:	d104      	bne.n	8006acc <HAL_TIM_PWM_ConfigChannel+0x200>
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006ac2:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006ac6:	696e      	ldr	r6, [r5, #20]
 8006ac8:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
  TIMx->CR2 = tmpcr2;
 8006acc:	6058      	str	r0, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 8006ace:	6559      	str	r1, [r3, #84]	; 0x54
  TIMx->CCR5 = OC_Config->Pulse;
 8006ad0:	6869      	ldr	r1, [r5, #4]
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006ad2:	6928      	ldr	r0, [r5, #16]
  TIMx->CCR5 = OC_Config->Pulse;
 8006ad4:	6599      	str	r1, [r3, #88]	; 0x58
  TIMx->CCER = tmpccer;
 8006ad6:	621a      	str	r2, [r3, #32]
  HAL_StatusTypeDef status = HAL_OK;
 8006ad8:	2200      	movs	r2, #0
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006ada:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006adc:	f041 0108 	orr.w	r1, r1, #8
 8006ae0:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006ae2:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006ae4:	f021 0104 	bic.w	r1, r1, #4
 8006ae8:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006aea:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006aec:	4301      	orrs	r1, r0
 8006aee:	6559      	str	r1, [r3, #84]	; 0x54
      break;
 8006af0:	e711      	b.n	8006916 <HAL_TIM_PWM_ConfigChannel+0x4a>
  __HAL_LOCK(htim);
 8006af2:	2202      	movs	r2, #2
}
 8006af4:	4610      	mov	r0, r2
 8006af6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006af8:	feff8fff 	.word	0xfeff8fff
 8006afc:	40010000 	.word	0x40010000
 8006b00:	40014000 	.word	0x40014000
 8006b04:	feff8cff 	.word	0xfeff8cff
 8006b08:	fffeff8f 	.word	0xfffeff8f

08006b0c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b0c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006b10:	2b01      	cmp	r3, #1
 8006b12:	d053      	beq.n	8006bbc <HAL_TIMEx_MasterConfigSynchronization+0xb0>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006b14:	6803      	ldr	r3, [r0, #0]
 8006b16:	4602      	mov	r2, r0
  htim->State = HAL_TIM_STATE_BUSY;
 8006b18:	2002      	movs	r0, #2
{
 8006b1a:	b470      	push	{r4, r5, r6}

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006b1c:	4d28      	ldr	r5, [pc, #160]	; (8006bc0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
  htim->State = HAL_TIM_STATE_BUSY;
 8006b1e:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006b22:	42ab      	cmp	r3, r5
  tmpcr2 = htim->Instance->CR2;
 8006b24:	6858      	ldr	r0, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 8006b26:	689c      	ldr	r4, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006b28:	d03e      	beq.n	8006ba8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8006b2a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006b2e:	42ab      	cmp	r3, r5
 8006b30:	d03a      	beq.n	8006ba8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006b32:	f020 0570 	bic.w	r5, r0, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b36:	4823      	ldr	r0, [pc, #140]	; (8006bc4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006b38:	4e23      	ldr	r6, [pc, #140]	; (8006bc8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8006b3a:	4283      	cmp	r3, r0
 8006b3c:	bf18      	it	ne
 8006b3e:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 8006b42:	bf0c      	ite	eq
 8006b44:	2001      	moveq	r0, #1
 8006b46:	2000      	movne	r0, #0
 8006b48:	42b3      	cmp	r3, r6
 8006b4a:	bf08      	it	eq
 8006b4c:	f040 0001 	orreq.w	r0, r0, #1
 8006b50:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8006b54:	42b3      	cmp	r3, r6
 8006b56:	bf08      	it	eq
 8006b58:	f040 0001 	orreq.w	r0, r0, #1
 8006b5c:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 8006b60:	42b3      	cmp	r3, r6
 8006b62:	bf08      	it	eq
 8006b64:	f040 0001 	orreq.w	r0, r0, #1
 8006b68:	f506 3694 	add.w	r6, r6, #75776	; 0x12800
 8006b6c:	42b3      	cmp	r3, r6
 8006b6e:	bf08      	it	eq
 8006b70:	f040 0001 	orreq.w	r0, r0, #1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006b74:	680e      	ldr	r6, [r1, #0]
 8006b76:	4335      	orrs	r5, r6
  htim->Instance->CR2 = tmpcr2;
 8006b78:	605d      	str	r5, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b7a:	4d14      	ldr	r5, [pc, #80]	; (8006bcc <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8006b7c:	42ab      	cmp	r3, r5
 8006b7e:	bf08      	it	eq
 8006b80:	f040 0001 	orreq.w	r0, r0, #1
 8006b84:	b910      	cbnz	r0, 8006b8c <HAL_TIMEx_MasterConfigSynchronization+0x80>
 8006b86:	4812      	ldr	r0, [pc, #72]	; (8006bd0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006b88:	4283      	cmp	r3, r0
 8006b8a:	d104      	bne.n	8006b96 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006b8c:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006b8e:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006b92:	430c      	orrs	r4, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006b94:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8006b96:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8006b98:	2101      	movs	r1, #1

  return HAL_OK;
 8006b9a:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;
 8006b9c:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8006ba0:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
}
 8006ba4:	bc70      	pop	{r4, r5, r6}
 8006ba6:	4770      	bx	lr
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006ba8:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006baa:	f420 0070 	bic.w	r0, r0, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006bae:	4328      	orrs	r0, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006bb0:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8006bb2:	f020 0070 	bic.w	r0, r0, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006bb6:	4328      	orrs	r0, r5
  htim->Instance->CR2 = tmpcr2;
 8006bb8:	6058      	str	r0, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006bba:	e7e7      	b.n	8006b8c <HAL_TIMEx_MasterConfigSynchronization+0x80>
  __HAL_LOCK(htim);
 8006bbc:	2002      	movs	r0, #2
}
 8006bbe:	4770      	bx	lr
 8006bc0:	40010000 	.word	0x40010000
 8006bc4:	40000400 	.word	0x40000400
 8006bc8:	40000800 	.word	0x40000800
 8006bcc:	4000e000 	.word	0x4000e000
 8006bd0:	4000e400 	.word	0x4000e400

08006bd4 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006bd4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006bd8:	2b01      	cmp	r3, #1
 8006bda:	d045      	beq.n	8006c68 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006bdc:	4602      	mov	r2, r0
 8006bde:	6848      	ldr	r0, [r1, #4]
{
 8006be0:	b410      	push	{r4}
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006be2:	e9d1 4302 	ldrd	r4, r3, [r1, #8]
 8006be6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006bea:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006bec:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006bee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006bf2:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006bf4:	6908      	ldr	r0, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006bf6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006bfa:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006bfc:	694c      	ldr	r4, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006bfe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006c02:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006c04:	6b08      	ldr	r0, [r1, #48]	; 0x30
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006c06:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006c0a:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006c0c:	698c      	ldr	r4, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006c0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006c12:	4303      	orrs	r3, r0

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006c14:	6810      	ldr	r0, [r2, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006c16:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8006c1a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006c1e:	4c13      	ldr	r4, [pc, #76]	; (8006c6c <HAL_TIMEx_ConfigBreakDeadTime+0x98>)
 8006c20:	42a0      	cmp	r0, r4
 8006c22:	d00b      	beq.n	8006c3c <HAL_TIMEx_ConfigBreakDeadTime+0x68>
 8006c24:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8006c28:	42a0      	cmp	r0, r4
 8006c2a:	d007      	beq.n	8006c3c <HAL_TIMEx_ConfigBreakDeadTime+0x68>
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;

  __HAL_UNLOCK(htim);
 8006c2c:	2100      	movs	r1, #0
  htim->Instance->BDTR = tmpbdtr;
 8006c2e:	6443      	str	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(htim);
 8006c30:	f882 103c 	strb.w	r1, [r2, #60]	; 0x3c

  return HAL_OK;
 8006c34:	4608      	mov	r0, r1
}
 8006c36:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006c3a:	4770      	bx	lr
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006c3c:	69cc      	ldr	r4, [r1, #28]
 8006c3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c42:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006c44:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8006c46:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006c4a:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006c4e:	6a0c      	ldr	r4, [r1, #32]
 8006c50:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006c54:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006c56:	6a4c      	ldr	r4, [r1, #36]	; 0x24
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006c58:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006c5a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006c5e:	4323      	orrs	r3, r4
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006c60:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006c64:	430b      	orrs	r3, r1
 8006c66:	e7e1      	b.n	8006c2c <HAL_TIMEx_ConfigBreakDeadTime+0x58>
  __HAL_LOCK(htim);
 8006c68:	2002      	movs	r0, #2
}
 8006c6a:	4770      	bx	lr
 8006c6c:	40010000 	.word	0x40010000

08006c70 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006c70:	b084      	sub	sp, #16
 8006c72:	4684      	mov	ip, r0
 8006c74:	b500      	push	{lr}
 8006c76:	b083      	sub	sp, #12
 8006c78:	f10d 0e14 	add.w	lr, sp, #20
 8006c7c:	e88e 000e 	stmia.w	lr, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006c80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c82:	2b01      	cmp	r3, #1
 8006c84:	d13e      	bne.n	8006d04 <USB_CoreInit+0x94>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006c86:	6b82      	ldr	r2, [r0, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006c88:	f1a3 1342 	sub.w	r3, r3, #4325442	; 0x420042

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
    if (cfg.use_external_vbus == 1U)
 8006c8c:	9911      	ldr	r1, [sp, #68]	; 0x44
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006c8e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    if (cfg.use_external_vbus == 1U)
 8006c92:	2901      	cmp	r1, #1
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006c94:	6382      	str	r2, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006c96:	68c2      	ldr	r2, [r0, #12]
 8006c98:	ea03 0302 	and.w	r3, r3, r2
 8006c9c:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006c9e:	68c3      	ldr	r3, [r0, #12]
 8006ca0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006ca4:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 8006ca6:	d07c      	beq.n	8006da2 <USB_CoreInit+0x132>
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
  __IO uint32_t count = 0U;
 8006ca8:	2300      	movs	r3, #0
  /* Wait for AHB master IDLE state. */
  do
  {
    count++;

    if (count > 200000U)
 8006caa:	4a40      	ldr	r2, [pc, #256]	; (8006dac <USB_CoreInit+0x13c>)
  __IO uint32_t count = 0U;
 8006cac:	9300      	str	r3, [sp, #0]
 8006cae:	e003      	b.n	8006cb8 <USB_CoreInit+0x48>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006cb0:	f8dc 3010 	ldr.w	r3, [ip, #16]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	db41      	blt.n	8006d3c <USB_CoreInit+0xcc>
    count++;
 8006cb8:	9b00      	ldr	r3, [sp, #0]
 8006cba:	3301      	adds	r3, #1
 8006cbc:	9300      	str	r3, [sp, #0]
    if (count > 200000U)
 8006cbe:	9b00      	ldr	r3, [sp, #0]
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d9f5      	bls.n	8006cb0 <USB_CoreInit+0x40>
      return HAL_TIMEOUT;
 8006cc4:	2003      	movs	r0, #3
  if (cfg.dma_enable == 1U)
 8006cc6:	9b07      	ldr	r3, [sp, #28]
 8006cc8:	2b01      	cmp	r3, #1
 8006cca:	d116      	bne.n	8006cfa <USB_CoreInit+0x8a>
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8006ccc:	f8dc 205c 	ldr.w	r2, [ip, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8006cd0:	4b37      	ldr	r3, [pc, #220]	; (8006db0 <USB_CoreInit+0x140>)
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8006cd2:	b292      	uxth	r2, r2
 8006cd4:	f8cc 205c 	str.w	r2, [ip, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8006cd8:	f8dc 205c 	ldr.w	r2, [ip, #92]	; 0x5c
 8006cdc:	4313      	orrs	r3, r2
 8006cde:	f8cc 305c 	str.w	r3, [ip, #92]	; 0x5c
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006ce2:	f8dc 3008 	ldr.w	r3, [ip, #8]
 8006ce6:	f043 0306 	orr.w	r3, r3, #6
 8006cea:	f8cc 3008 	str.w	r3, [ip, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006cee:	f8dc 3008 	ldr.w	r3, [ip, #8]
 8006cf2:	f043 0320 	orr.w	r3, r3, #32
 8006cf6:	f8cc 3008 	str.w	r3, [ip, #8]
}
 8006cfa:	b003      	add	sp, #12
 8006cfc:	f85d eb04 	ldr.w	lr, [sp], #4
 8006d00:	b004      	add	sp, #16
 8006d02:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006d04:	68c3      	ldr	r3, [r0, #12]
  __IO uint32_t count = 0U;
 8006d06:	2100      	movs	r1, #0
    if (count > 200000U)
 8006d08:	4a28      	ldr	r2, [pc, #160]	; (8006dac <USB_CoreInit+0x13c>)
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006d0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d0e:	60c3      	str	r3, [r0, #12]
  __IO uint32_t count = 0U;
 8006d10:	9101      	str	r1, [sp, #4]
 8006d12:	e003      	b.n	8006d1c <USB_CoreInit+0xac>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006d14:	f8dc 3010 	ldr.w	r3, [ip, #16]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	db2c      	blt.n	8006d76 <USB_CoreInit+0x106>
    count++;
 8006d1c:	9b01      	ldr	r3, [sp, #4]
 8006d1e:	3301      	adds	r3, #1
 8006d20:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8006d22:	9b01      	ldr	r3, [sp, #4]
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d9f5      	bls.n	8006d14 <USB_CoreInit+0xa4>
      return HAL_TIMEOUT;
 8006d28:	2003      	movs	r0, #3
    if (cfg.battery_charging_enable == 0U)
 8006d2a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006d2c:	b9e3      	cbnz	r3, 8006d68 <USB_CoreInit+0xf8>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006d2e:	f8dc 3038 	ldr.w	r3, [ip, #56]	; 0x38
 8006d32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d36:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
 8006d3a:	e7c4      	b.n	8006cc6 <USB_CoreInit+0x56>

  /* Core Soft Reset */
  count = 0U;
 8006d3c:	2300      	movs	r3, #0

  do
  {
    count++;

    if (count > 200000U)
 8006d3e:	4a1b      	ldr	r2, [pc, #108]	; (8006dac <USB_CoreInit+0x13c>)
  count = 0U;
 8006d40:	9300      	str	r3, [sp, #0]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006d42:	f8dc 3010 	ldr.w	r3, [ip, #16]
 8006d46:	f043 0301 	orr.w	r3, r3, #1
 8006d4a:	f8cc 3010 	str.w	r3, [ip, #16]
 8006d4e:	e004      	b.n	8006d5a <USB_CoreInit+0xea>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006d50:	f8dc 0010 	ldr.w	r0, [ip, #16]
 8006d54:	f010 0001 	ands.w	r0, r0, #1
 8006d58:	d0b5      	beq.n	8006cc6 <USB_CoreInit+0x56>
    count++;
 8006d5a:	9b00      	ldr	r3, [sp, #0]
 8006d5c:	3301      	adds	r3, #1
 8006d5e:	9300      	str	r3, [sp, #0]
    if (count > 200000U)
 8006d60:	9b00      	ldr	r3, [sp, #0]
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d9f4      	bls.n	8006d50 <USB_CoreInit+0xe0>
 8006d66:	e7ad      	b.n	8006cc4 <USB_CoreInit+0x54>
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006d68:	f8dc 3038 	ldr.w	r3, [ip, #56]	; 0x38
 8006d6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d70:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
 8006d74:	e7a7      	b.n	8006cc6 <USB_CoreInit+0x56>
  count = 0U;
 8006d76:	2300      	movs	r3, #0
    if (count > 200000U)
 8006d78:	4a0c      	ldr	r2, [pc, #48]	; (8006dac <USB_CoreInit+0x13c>)
  count = 0U;
 8006d7a:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006d7c:	f8dc 3010 	ldr.w	r3, [ip, #16]
 8006d80:	f043 0301 	orr.w	r3, r3, #1
 8006d84:	f8cc 3010 	str.w	r3, [ip, #16]
 8006d88:	e004      	b.n	8006d94 <USB_CoreInit+0x124>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006d8a:	f8dc 0010 	ldr.w	r0, [ip, #16]
 8006d8e:	f010 0001 	ands.w	r0, r0, #1
 8006d92:	d0ca      	beq.n	8006d2a <USB_CoreInit+0xba>
    count++;
 8006d94:	9b01      	ldr	r3, [sp, #4]
 8006d96:	3301      	adds	r3, #1
 8006d98:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8006d9a:	9b01      	ldr	r3, [sp, #4]
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d9f4      	bls.n	8006d8a <USB_CoreInit+0x11a>
 8006da0:	e7c2      	b.n	8006d28 <USB_CoreInit+0xb8>
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006da2:	68c3      	ldr	r3, [r0, #12]
 8006da4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006da8:	60c3      	str	r3, [r0, #12]
 8006daa:	e77d      	b.n	8006ca8 <USB_CoreInit+0x38>
 8006dac:	00030d40 	.word	0x00030d40
 8006db0:	03ee0000 	.word	0x03ee0000

08006db4 <USB_SetTurnaroundTime>:
  if (speed == USBD_FS_SPEED)
 8006db4:	2a02      	cmp	r2, #2
{
 8006db6:	4603      	mov	r3, r0
  if (speed == USBD_FS_SPEED)
 8006db8:	d00a      	beq.n	8006dd0 <USB_SetTurnaroundTime+0x1c>
 8006dba:	f44f 5110 	mov.w	r1, #9216	; 0x2400
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006dbe:	68da      	ldr	r2, [r3, #12]
}
 8006dc0:	2000      	movs	r0, #0
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006dc2:	f422 5270 	bic.w	r2, r2, #15360	; 0x3c00
 8006dc6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006dc8:	68da      	ldr	r2, [r3, #12]
 8006dca:	430a      	orrs	r2, r1
 8006dcc:	60da      	str	r2, [r3, #12]
}
 8006dce:	4770      	bx	lr
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006dd0:	4a23      	ldr	r2, [pc, #140]	; (8006e60 <USB_SetTurnaroundTime+0xac>)
 8006dd2:	4824      	ldr	r0, [pc, #144]	; (8006e64 <USB_SetTurnaroundTime+0xb0>)
 8006dd4:	440a      	add	r2, r1
 8006dd6:	4282      	cmp	r2, r0
 8006dd8:	d92c      	bls.n	8006e34 <USB_SetTurnaroundTime+0x80>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006dda:	4a23      	ldr	r2, [pc, #140]	; (8006e68 <USB_SetTurnaroundTime+0xb4>)
 8006ddc:	4823      	ldr	r0, [pc, #140]	; (8006e6c <USB_SetTurnaroundTime+0xb8>)
 8006dde:	440a      	add	r2, r1
 8006de0:	4282      	cmp	r2, r0
 8006de2:	d92a      	bls.n	8006e3a <USB_SetTurnaroundTime+0x86>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006de4:	4a22      	ldr	r2, [pc, #136]	; (8006e70 <USB_SetTurnaroundTime+0xbc>)
 8006de6:	4823      	ldr	r0, [pc, #140]	; (8006e74 <USB_SetTurnaroundTime+0xc0>)
 8006de8:	440a      	add	r2, r1
 8006dea:	4282      	cmp	r2, r0
 8006dec:	d928      	bls.n	8006e40 <USB_SetTurnaroundTime+0x8c>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006dee:	4a22      	ldr	r2, [pc, #136]	; (8006e78 <USB_SetTurnaroundTime+0xc4>)
 8006df0:	4822      	ldr	r0, [pc, #136]	; (8006e7c <USB_SetTurnaroundTime+0xc8>)
 8006df2:	440a      	add	r2, r1
 8006df4:	4282      	cmp	r2, r0
 8006df6:	d326      	bcc.n	8006e46 <USB_SetTurnaroundTime+0x92>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006df8:	4a21      	ldr	r2, [pc, #132]	; (8006e80 <USB_SetTurnaroundTime+0xcc>)
 8006dfa:	4822      	ldr	r0, [pc, #136]	; (8006e84 <USB_SetTurnaroundTime+0xd0>)
 8006dfc:	440a      	add	r2, r1
 8006dfe:	4282      	cmp	r2, r0
 8006e00:	d924      	bls.n	8006e4c <USB_SetTurnaroundTime+0x98>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006e02:	4a21      	ldr	r2, [pc, #132]	; (8006e88 <USB_SetTurnaroundTime+0xd4>)
 8006e04:	4821      	ldr	r0, [pc, #132]	; (8006e8c <USB_SetTurnaroundTime+0xd8>)
 8006e06:	440a      	add	r2, r1
 8006e08:	4282      	cmp	r2, r0
 8006e0a:	d322      	bcc.n	8006e52 <USB_SetTurnaroundTime+0x9e>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006e0c:	4a20      	ldr	r2, [pc, #128]	; (8006e90 <USB_SetTurnaroundTime+0xdc>)
 8006e0e:	4821      	ldr	r0, [pc, #132]	; (8006e94 <USB_SetTurnaroundTime+0xe0>)
 8006e10:	440a      	add	r2, r1
 8006e12:	4282      	cmp	r2, r0
 8006e14:	d3d1      	bcc.n	8006dba <USB_SetTurnaroundTime+0x6>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006e16:	4a20      	ldr	r2, [pc, #128]	; (8006e98 <USB_SetTurnaroundTime+0xe4>)
 8006e18:	4820      	ldr	r0, [pc, #128]	; (8006e9c <USB_SetTurnaroundTime+0xe8>)
 8006e1a:	440a      	add	r2, r1
 8006e1c:	4282      	cmp	r2, r0
 8006e1e:	d31b      	bcc.n	8006e58 <USB_SetTurnaroundTime+0xa4>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006e20:	4a1f      	ldr	r2, [pc, #124]	; (8006ea0 <USB_SetTurnaroundTime+0xec>)
 8006e22:	4820      	ldr	r0, [pc, #128]	; (8006ea4 <USB_SetTurnaroundTime+0xf0>)
 8006e24:	440a      	add	r2, r1
 8006e26:	4282      	cmp	r2, r0
 8006e28:	bf34      	ite	cc
 8006e2a:	f44f 51e0 	movcc.w	r1, #7168	; 0x1c00
 8006e2e:	f44f 51c0 	movcs.w	r1, #6144	; 0x1800
 8006e32:	e7c4      	b.n	8006dbe <USB_SetTurnaroundTime+0xa>
 8006e34:	f44f 5170 	mov.w	r1, #15360	; 0x3c00
 8006e38:	e7c1      	b.n	8006dbe <USB_SetTurnaroundTime+0xa>
 8006e3a:	f44f 5160 	mov.w	r1, #14336	; 0x3800
 8006e3e:	e7be      	b.n	8006dbe <USB_SetTurnaroundTime+0xa>
 8006e40:	f44f 5150 	mov.w	r1, #13312	; 0x3400
 8006e44:	e7bb      	b.n	8006dbe <USB_SetTurnaroundTime+0xa>
 8006e46:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8006e4a:	e7b8      	b.n	8006dbe <USB_SetTurnaroundTime+0xa>
 8006e4c:	f44f 5130 	mov.w	r1, #11264	; 0x2c00
 8006e50:	e7b5      	b.n	8006dbe <USB_SetTurnaroundTime+0xa>
 8006e52:	f44f 5120 	mov.w	r1, #10240	; 0x2800
 8006e56:	e7b2      	b.n	8006dbe <USB_SetTurnaroundTime+0xa>
 8006e58:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006e5c:	e7af      	b.n	8006dbe <USB_SetTurnaroundTime+0xa>
 8006e5e:	bf00      	nop
 8006e60:	ff275340 	.word	0xff275340
 8006e64:	000c34ff 	.word	0x000c34ff
 8006e68:	ff1b1e40 	.word	0xff1b1e40
 8006e6c:	000f423f 	.word	0x000f423f
 8006e70:	ff0bdc00 	.word	0xff0bdc00
 8006e74:	00124f7f 	.word	0x00124f7f
 8006e78:	fef98c80 	.word	0xfef98c80
 8006e7c:	0013d620 	.word	0x0013d620
 8006e80:	fee5b660 	.word	0xfee5b660
 8006e84:	0016e35f 	.word	0x0016e35f
 8006e88:	feced300 	.word	0xfeced300
 8006e8c:	001b7740 	.word	0x001b7740
 8006e90:	feb35bc0 	.word	0xfeb35bc0
 8006e94:	002191c0 	.word	0x002191c0
 8006e98:	fe91ca00 	.word	0xfe91ca00
 8006e9c:	00387520 	.word	0x00387520
 8006ea0:	fe5954e0 	.word	0xfe5954e0
 8006ea4:	00419ce0 	.word	0x00419ce0

08006ea8 <USB_EnableGlobalInt>:
{
 8006ea8:	4603      	mov	r3, r0
}
 8006eaa:	2000      	movs	r0, #0
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006eac:	689a      	ldr	r2, [r3, #8]
 8006eae:	f042 0201 	orr.w	r2, r2, #1
 8006eb2:	609a      	str	r2, [r3, #8]
}
 8006eb4:	4770      	bx	lr
 8006eb6:	bf00      	nop

08006eb8 <USB_DisableGlobalInt>:
{
 8006eb8:	4603      	mov	r3, r0
}
 8006eba:	2000      	movs	r0, #0
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006ebc:	689a      	ldr	r2, [r3, #8]
 8006ebe:	f022 0201 	bic.w	r2, r2, #1
 8006ec2:	609a      	str	r2, [r3, #8]
}
 8006ec4:	4770      	bx	lr
 8006ec6:	bf00      	nop

08006ec8 <USB_SetCurrentMode>:
{
 8006ec8:	b538      	push	{r3, r4, r5, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006eca:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8006ecc:	2901      	cmp	r1, #1
{
 8006ece:	4605      	mov	r5, r0
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006ed0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006ed4:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8006ed6:	d017      	beq.n	8006f08 <USB_SetCurrentMode+0x40>
  else if (mode == USB_DEVICE_MODE)
 8006ed8:	b9a1      	cbnz	r1, 8006f04 <USB_SetCurrentMode+0x3c>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006eda:	68c3      	ldr	r3, [r0, #12]
  uint32_t ms = 0U;
 8006edc:	460c      	mov	r4, r1
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006ede:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006ee2:	60c3      	str	r3, [r0, #12]
 8006ee4:	e001      	b.n	8006eea <USB_SetCurrentMode+0x22>
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006ee6:	2c32      	cmp	r4, #50	; 0x32
 8006ee8:	d00c      	beq.n	8006f04 <USB_SetCurrentMode+0x3c>
      HAL_Delay(1U);
 8006eea:	2001      	movs	r0, #1
      ms++;
 8006eec:	4404      	add	r4, r0
      HAL_Delay(1U);
 8006eee:	f7fa ffb5 	bl	8001e5c <HAL_Delay>
  return ((USBx->GINTSTS) & 0x1U);
 8006ef2:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006ef4:	07db      	lsls	r3, r3, #31
 8006ef6:	d4f6      	bmi.n	8006ee6 <USB_SetCurrentMode+0x1e>
    return HAL_ERROR;
 8006ef8:	f1a4 0032 	sub.w	r0, r4, #50	; 0x32
 8006efc:	fab0 f080 	clz	r0, r0
 8006f00:	0940      	lsrs	r0, r0, #5
}
 8006f02:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8006f04:	2001      	movs	r0, #1
}
 8006f06:	bd38      	pop	{r3, r4, r5, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006f08:	68c3      	ldr	r3, [r0, #12]
  uint32_t ms = 0U;
 8006f0a:	2400      	movs	r4, #0
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006f0c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006f10:	60c3      	str	r3, [r0, #12]
 8006f12:	e001      	b.n	8006f18 <USB_SetCurrentMode+0x50>
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006f14:	2c32      	cmp	r4, #50	; 0x32
 8006f16:	d0f5      	beq.n	8006f04 <USB_SetCurrentMode+0x3c>
      HAL_Delay(1U);
 8006f18:	2001      	movs	r0, #1
      ms++;
 8006f1a:	4404      	add	r4, r0
      HAL_Delay(1U);
 8006f1c:	f7fa ff9e 	bl	8001e5c <HAL_Delay>
  return ((USBx->GINTSTS) & 0x1U);
 8006f20:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006f22:	07da      	lsls	r2, r3, #31
 8006f24:	d5f6      	bpl.n	8006f14 <USB_SetCurrentMode+0x4c>
    return HAL_ERROR;
 8006f26:	f1a4 0032 	sub.w	r0, r4, #50	; 0x32
 8006f2a:	fab0 f080 	clz	r0, r0
 8006f2e:	0940      	lsrs	r0, r0, #5
 8006f30:	e7e7      	b.n	8006f02 <USB_SetCurrentMode+0x3a>
 8006f32:	bf00      	nop

08006f34 <USB_DevInit>:
{
 8006f34:	b084      	sub	sp, #16
 8006f36:	4684      	mov	ip, r0
 8006f38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006f3c:	b083      	sub	sp, #12
 8006f3e:	ac0b      	add	r4, sp, #44	; 0x2c
 8006f40:	e884 000e 	stmia.w	r4, {r1, r2, r3}
    USBx->DIEPTXF[i] = 0U;
 8006f44:	2300      	movs	r3, #0
 8006f46:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8006f48:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
 8006f4c:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
 8006f50:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
 8006f54:	f8c0 3110 	str.w	r3, [r0, #272]	; 0x110
 8006f58:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
 8006f5c:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
 8006f60:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
 8006f64:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
 8006f68:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
 8006f6c:	f8c0 3128 	str.w	r3, [r0, #296]	; 0x128
 8006f70:	f8c0 312c 	str.w	r3, [r0, #300]	; 0x12c
 8006f74:	f8c0 3130 	str.w	r3, [r0, #304]	; 0x130
 8006f78:	f8c0 3134 	str.w	r3, [r0, #308]	; 0x134
 8006f7c:	f8c0 3138 	str.w	r3, [r0, #312]	; 0x138
 8006f80:	f8c0 313c 	str.w	r3, [r0, #316]	; 0x13c
  if (cfg.vbus_sensing_enable == 0U)
 8006f84:	2c00      	cmp	r4, #0
 8006f86:	f040 80b3 	bne.w	80070f0 <USB_DevInit+0x1bc>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006f8a:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8006f8e:	f500 6e00 	add.w	lr, r0, #2048	; 0x800
 8006f92:	f043 0302 	orr.w	r3, r3, #2
 8006f96:	f8ce 3004 	str.w	r3, [lr, #4]
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006f9a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8006f9c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006fa0:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006fa2:	6803      	ldr	r3, [r0, #0]
 8006fa4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006fa8:	6003      	str	r3, [r0, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006faa:	6803      	ldr	r3, [r0, #0]
 8006fac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fb0:	6003      	str	r3, [r0, #0]
  USBx_PCGCCTL = 0U;
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	f8cc 3e00 	str.w	r3, [ip, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006fb8:	f8de 3000 	ldr.w	r3, [lr]
 8006fbc:	f8ce 3000 	str.w	r3, [lr]
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006fc0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006fc2:	2b01      	cmp	r3, #1
 8006fc4:	f000 80c3 	beq.w	800714e <USB_DevInit+0x21a>
  USBx_DEVICE->DCFG |= speed;
 8006fc8:	f8de 3000 	ldr.w	r3, [lr]
 8006fcc:	f043 0303 	orr.w	r3, r3, #3
 8006fd0:	f8ce 3000 	str.w	r3, [lr]
  __IO uint32_t count = 0U;
 8006fd4:	2300      	movs	r3, #0
    if (count > 200000U)
 8006fd6:	4a65      	ldr	r2, [pc, #404]	; (800716c <USB_DevInit+0x238>)
  __IO uint32_t count = 0U;
 8006fd8:	9300      	str	r3, [sp, #0]
 8006fda:	e004      	b.n	8006fe6 <USB_DevInit+0xb2>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006fdc:	f8dc 3010 	ldr.w	r3, [ip, #16]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	f2c0 809f 	blt.w	8007124 <USB_DevInit+0x1f0>
    count++;
 8006fe6:	9b00      	ldr	r3, [sp, #0]
 8006fe8:	3301      	adds	r3, #1
 8006fea:	9300      	str	r3, [sp, #0]
    if (count > 200000U)
 8006fec:	9b00      	ldr	r3, [sp, #0]
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d9f4      	bls.n	8006fdc <USB_DevInit+0xa8>
    ret = HAL_ERROR;
 8006ff2:	2001      	movs	r0, #1
  __IO uint32_t count = 0U;
 8006ff4:	2300      	movs	r3, #0
    if (count > 200000U)
 8006ff6:	4a5d      	ldr	r2, [pc, #372]	; (800716c <USB_DevInit+0x238>)
  __IO uint32_t count = 0U;
 8006ff8:	9301      	str	r3, [sp, #4]
 8006ffa:	e003      	b.n	8007004 <USB_DevInit+0xd0>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006ffc:	f8dc 3010 	ldr.w	r3, [ip, #16]
 8007000:	2b00      	cmp	r3, #0
 8007002:	db7c      	blt.n	80070fe <USB_DevInit+0x1ca>
    count++;
 8007004:	9b01      	ldr	r3, [sp, #4]
 8007006:	3301      	adds	r3, #1
 8007008:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 800700a:	9b01      	ldr	r3, [sp, #4]
 800700c:	4293      	cmp	r3, r2
 800700e:	d9f5      	bls.n	8006ffc <USB_DevInit+0xc8>
    ret = HAL_ERROR;
 8007010:	2001      	movs	r0, #1
  USBx_DEVICE->DIEPMSK = 0U;
 8007012:	2200      	movs	r2, #0
 8007014:	f8ce 2010 	str.w	r2, [lr, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007018:	f8ce 2014 	str.w	r2, [lr, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800701c:	f8ce 201c 	str.w	r2, [lr, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007020:	b1d1      	cbz	r1, 8007058 <USB_DevInit+0x124>
 8007022:	f50c 6310 	add.w	r3, ip, #2304	; 0x900
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007026:	f04f 4890 	mov.w	r8, #1207959552	; 0x48000000
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800702a:	f04f 6900 	mov.w	r9, #134217728	; 0x8000000
      USBx_INEP(i)->DIEPCTL = 0U;
 800702e:	4616      	mov	r6, r2
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007030:	f64f 377f 	movw	r7, #64383	; 0xfb7f
 8007034:	e006      	b.n	8007044 <USB_DevInit+0x110>
      USBx_INEP(i)->DIEPCTL = 0U;
 8007036:	601e      	str	r6, [r3, #0]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007038:	3201      	adds	r2, #1
    USBx_INEP(i)->DIEPTSIZ = 0U;
 800703a:	611e      	str	r6, [r3, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800703c:	609f      	str	r7, [r3, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800703e:	3320      	adds	r3, #32
 8007040:	4291      	cmp	r1, r2
 8007042:	d039      	beq.n	80070b8 <USB_DevInit+0x184>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007044:	681d      	ldr	r5, [r3, #0]
 8007046:	2d00      	cmp	r5, #0
 8007048:	daf5      	bge.n	8007036 <USB_DevInit+0x102>
      if (i == 0U)
 800704a:	b112      	cbz	r2, 8007052 <USB_DevInit+0x11e>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800704c:	f8c3 8000 	str.w	r8, [r3]
 8007050:	e7f2      	b.n	8007038 <USB_DevInit+0x104>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007052:	f8c3 9000 	str.w	r9, [r3]
 8007056:	e7ef      	b.n	8007038 <USB_DevInit+0x104>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007058:	f8de 3010 	ldr.w	r3, [lr, #16]
  USBx->GINTMSK = 0U;
 800705c:	2200      	movs	r2, #0
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800705e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007062:	f8ce 3010 	str.w	r3, [lr, #16]
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007066:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
  USBx->GINTMSK = 0U;
 800706a:	f8cc 2018 	str.w	r2, [ip, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 800706e:	f8cc 3014 	str.w	r3, [ip, #20]
  if (cfg.dma_enable == 0U)
 8007072:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007074:	b92b      	cbnz	r3, 8007082 <USB_DevInit+0x14e>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007076:	f8dc 3018 	ldr.w	r3, [ip, #24]
 800707a:	f043 0310 	orr.w	r3, r3, #16
 800707e:	f8cc 3018 	str.w	r3, [ip, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007082:	f8dc 2018 	ldr.w	r2, [ip, #24]
 8007086:	4b3a      	ldr	r3, [pc, #232]	; (8007170 <USB_DevInit+0x23c>)
 8007088:	4313      	orrs	r3, r2
  if (cfg.Sof_enable != 0U)
 800708a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800708c:	f8cc 3018 	str.w	r3, [ip, #24]
  if (cfg.Sof_enable != 0U)
 8007090:	b12a      	cbz	r2, 800709e <USB_DevInit+0x16a>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007092:	f8dc 3018 	ldr.w	r3, [ip, #24]
 8007096:	f043 0308 	orr.w	r3, r3, #8
 800709a:	f8cc 3018 	str.w	r3, [ip, #24]
  if (cfg.vbus_sensing_enable == 1U)
 800709e:	2c01      	cmp	r4, #1
 80070a0:	d105      	bne.n	80070ae <USB_DevInit+0x17a>
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80070a2:	f8dc 2018 	ldr.w	r2, [ip, #24]
 80070a6:	4b33      	ldr	r3, [pc, #204]	; (8007174 <USB_DevInit+0x240>)
 80070a8:	4313      	orrs	r3, r2
 80070aa:	f8cc 3018 	str.w	r3, [ip, #24]
}
 80070ae:	b003      	add	sp, #12
 80070b0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80070b4:	b004      	add	sp, #16
 80070b6:	4770      	bx	lr
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80070b8:	2200      	movs	r2, #0
 80070ba:	f50c 6330 	add.w	r3, ip, #2816	; 0xb00
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80070be:	f04f 4890 	mov.w	r8, #1207959552	; 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80070c2:	f04f 6900 	mov.w	r9, #134217728	; 0x8000000
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80070c6:	4616      	mov	r6, r2
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80070c8:	f64f 377f 	movw	r7, #64383	; 0xfb7f
 80070cc:	e006      	b.n	80070dc <USB_DevInit+0x1a8>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80070ce:	601e      	str	r6, [r3, #0]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80070d0:	3201      	adds	r2, #1
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80070d2:	611e      	str	r6, [r3, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80070d4:	609f      	str	r7, [r3, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80070d6:	3320      	adds	r3, #32
 80070d8:	4291      	cmp	r1, r2
 80070da:	d0bd      	beq.n	8007058 <USB_DevInit+0x124>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80070dc:	681d      	ldr	r5, [r3, #0]
 80070de:	2d00      	cmp	r5, #0
 80070e0:	daf5      	bge.n	80070ce <USB_DevInit+0x19a>
      if (i == 0U)
 80070e2:	b112      	cbz	r2, 80070ea <USB_DevInit+0x1b6>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80070e4:	f8c3 8000 	str.w	r8, [r3]
 80070e8:	e7f2      	b.n	80070d0 <USB_DevInit+0x19c>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80070ea:	f8c3 9000 	str.w	r9, [r3]
 80070ee:	e7ef      	b.n	80070d0 <USB_DevInit+0x19c>
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80070f0:	6b83      	ldr	r3, [r0, #56]	; 0x38
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80070f2:	f500 6e00 	add.w	lr, r0, #2048	; 0x800
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80070f6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80070fa:	6383      	str	r3, [r0, #56]	; 0x38
 80070fc:	e759      	b.n	8006fb2 <USB_DevInit+0x7e>
  count = 0U;
 80070fe:	2300      	movs	r3, #0
    if (count > 200000U)
 8007100:	4a1a      	ldr	r2, [pc, #104]	; (800716c <USB_DevInit+0x238>)
  count = 0U;
 8007102:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007104:	2310      	movs	r3, #16
 8007106:	f8cc 3010 	str.w	r3, [ip, #16]
 800710a:	e004      	b.n	8007116 <USB_DevInit+0x1e2>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800710c:	f8dc 3010 	ldr.w	r3, [ip, #16]
 8007110:	06db      	lsls	r3, r3, #27
 8007112:	f57f af7e 	bpl.w	8007012 <USB_DevInit+0xde>
    count++;
 8007116:	9b01      	ldr	r3, [sp, #4]
 8007118:	3301      	adds	r3, #1
 800711a:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 800711c:	9b01      	ldr	r3, [sp, #4]
 800711e:	4293      	cmp	r3, r2
 8007120:	d9f4      	bls.n	800710c <USB_DevInit+0x1d8>
 8007122:	e775      	b.n	8007010 <USB_DevInit+0xdc>
  count = 0U;
 8007124:	2300      	movs	r3, #0
    if (count > 200000U)
 8007126:	4a11      	ldr	r2, [pc, #68]	; (800716c <USB_DevInit+0x238>)
  count = 0U;
 8007128:	9300      	str	r3, [sp, #0]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800712a:	f44f 6384 	mov.w	r3, #1056	; 0x420
 800712e:	f8cc 3010 	str.w	r3, [ip, #16]
 8007132:	e005      	b.n	8007140 <USB_DevInit+0x20c>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007134:	f8dc 0010 	ldr.w	r0, [ip, #16]
 8007138:	f010 0020 	ands.w	r0, r0, #32
 800713c:	f43f af5a 	beq.w	8006ff4 <USB_DevInit+0xc0>
    count++;
 8007140:	9b00      	ldr	r3, [sp, #0]
 8007142:	3301      	adds	r3, #1
 8007144:	9300      	str	r3, [sp, #0]
    if (count > 200000U)
 8007146:	9b00      	ldr	r3, [sp, #0]
 8007148:	4293      	cmp	r3, r2
 800714a:	d9f3      	bls.n	8007134 <USB_DevInit+0x200>
 800714c:	e751      	b.n	8006ff2 <USB_DevInit+0xbe>
    if (cfg.speed == USBD_HS_SPEED)
 800714e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007150:	b923      	cbnz	r3, 800715c <USB_DevInit+0x228>
  USBx_DEVICE->DCFG |= speed;
 8007152:	f8de 3000 	ldr.w	r3, [lr]
 8007156:	f8ce 3000 	str.w	r3, [lr]
  return HAL_OK;
 800715a:	e73b      	b.n	8006fd4 <USB_DevInit+0xa0>
  USBx_DEVICE->DCFG |= speed;
 800715c:	f8de 3000 	ldr.w	r3, [lr]
 8007160:	f043 0301 	orr.w	r3, r3, #1
 8007164:	f8ce 3000 	str.w	r3, [lr]
  return HAL_OK;
 8007168:	e734      	b.n	8006fd4 <USB_DevInit+0xa0>
 800716a:	bf00      	nop
 800716c:	00030d40 	.word	0x00030d40
 8007170:	803c3800 	.word	0x803c3800
 8007174:	40000004 	.word	0x40000004

08007178 <USB_FlushTxFifo>:
{
 8007178:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 800717a:	2300      	movs	r3, #0
    if (count > 200000U)
 800717c:	4a12      	ldr	r2, [pc, #72]	; (80071c8 <USB_FlushTxFifo+0x50>)
  __IO uint32_t count = 0U;
 800717e:	9301      	str	r3, [sp, #4]
 8007180:	e002      	b.n	8007188 <USB_FlushTxFifo+0x10>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007182:	6903      	ldr	r3, [r0, #16]
 8007184:	2b00      	cmp	r3, #0
 8007186:	db08      	blt.n	800719a <USB_FlushTxFifo+0x22>
    count++;
 8007188:	9b01      	ldr	r3, [sp, #4]
 800718a:	3301      	adds	r3, #1
 800718c:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 800718e:	9b01      	ldr	r3, [sp, #4]
 8007190:	4293      	cmp	r3, r2
 8007192:	d9f6      	bls.n	8007182 <USB_FlushTxFifo+0xa>
      return HAL_TIMEOUT;
 8007194:	2003      	movs	r0, #3
}
 8007196:	b002      	add	sp, #8
 8007198:	4770      	bx	lr
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800719a:	0189      	lsls	r1, r1, #6
  count = 0U;
 800719c:	2300      	movs	r3, #0
    if (count > 200000U)
 800719e:	4a0a      	ldr	r2, [pc, #40]	; (80071c8 <USB_FlushTxFifo+0x50>)
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80071a0:	f041 0120 	orr.w	r1, r1, #32
  count = 0U;
 80071a4:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80071a6:	6101      	str	r1, [r0, #16]
 80071a8:	e003      	b.n	80071b2 <USB_FlushTxFifo+0x3a>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80071aa:	6903      	ldr	r3, [r0, #16]
 80071ac:	f013 0320 	ands.w	r3, r3, #32
 80071b0:	d006      	beq.n	80071c0 <USB_FlushTxFifo+0x48>
    count++;
 80071b2:	9b01      	ldr	r3, [sp, #4]
 80071b4:	3301      	adds	r3, #1
 80071b6:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 80071b8:	9b01      	ldr	r3, [sp, #4]
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d9f5      	bls.n	80071aa <USB_FlushTxFifo+0x32>
 80071be:	e7e9      	b.n	8007194 <USB_FlushTxFifo+0x1c>
  return HAL_OK;
 80071c0:	4618      	mov	r0, r3
}
 80071c2:	b002      	add	sp, #8
 80071c4:	4770      	bx	lr
 80071c6:	bf00      	nop
 80071c8:	00030d40 	.word	0x00030d40

080071cc <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80071cc:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80071d0:	f013 0006 	ands.w	r0, r3, #6
 80071d4:	d004      	beq.n	80071e0 <USB_GetDevSpeed+0x14>
    speed = 0xFU;
 80071d6:	f013 0f02 	tst.w	r3, #2
 80071da:	bf14      	ite	ne
 80071dc:	2002      	movne	r0, #2
 80071de:	200f      	moveq	r0, #15
}
 80071e0:	4770      	bx	lr
 80071e2:	bf00      	nop

080071e4 <USB_ActivateEndpoint>:
{
 80071e4:	b430      	push	{r4, r5}
  if (ep->is_in == 1U)
 80071e6:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 80071e8:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in == 1U)
 80071ea:	2b01      	cmp	r3, #1
 80071ec:	d020      	beq.n	8007230 <USB_ActivateEndpoint+0x4c>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80071ee:	f002 0c0f 	and.w	ip, r2, #15
 80071f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80071f6:	f8d0 481c 	ldr.w	r4, [r0, #2076]	; 0x81c
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80071fa:	eb00 1242 	add.w	r2, r0, r2, lsl #5
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80071fe:	fa03 f30c 	lsl.w	r3, r3, ip
 8007202:	4323      	orrs	r3, r4
 8007204:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007208:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
 800720c:	041b      	lsls	r3, r3, #16
 800720e:	d40c      	bmi.n	800722a <USB_ActivateEndpoint+0x46>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007210:	688b      	ldr	r3, [r1, #8]
 8007212:	f8d2 4b00 	ldr.w	r4, [r2, #2816]	; 0xb00
 8007216:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800721a:	7908      	ldrb	r0, [r1, #4]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800721c:	4914      	ldr	r1, [pc, #80]	; (8007270 <USB_ActivateEndpoint+0x8c>)
 800721e:	4323      	orrs	r3, r4
 8007220:	ea43 4380 	orr.w	r3, r3, r0, lsl #18
 8007224:	4319      	orrs	r1, r3
 8007226:	f8c2 1b00 	str.w	r1, [r2, #2816]	; 0xb00
}
 800722a:	2000      	movs	r0, #0
 800722c:	bc30      	pop	{r4, r5}
 800722e:	4770      	bx	lr
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007230:	f500 6400 	add.w	r4, r0, #2048	; 0x800
 8007234:	f002 050f 	and.w	r5, r2, #15
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007238:	eb00 1042 	add.w	r0, r0, r2, lsl #5
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800723c:	40ab      	lsls	r3, r5
 800723e:	69e5      	ldr	r5, [r4, #28]
 8007240:	432b      	orrs	r3, r5
 8007242:	61e3      	str	r3, [r4, #28]
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007244:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8007248:	041c      	lsls	r4, r3, #16
 800724a:	d4ee      	bmi.n	800722a <USB_ActivateEndpoint+0x46>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800724c:	688b      	ldr	r3, [r1, #8]
 800724e:	f8d0 5900 	ldr.w	r5, [r0, #2304]	; 0x900
 8007252:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007256:	790c      	ldrb	r4, [r1, #4]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007258:	4905      	ldr	r1, [pc, #20]	; (8007270 <USB_ActivateEndpoint+0x8c>)
 800725a:	432b      	orrs	r3, r5
 800725c:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
 8007260:	ea43 5382 	orr.w	r3, r3, r2, lsl #22
 8007264:	4319      	orrs	r1, r3
}
 8007266:	bc30      	pop	{r4, r5}
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007268:	f8c0 1900 	str.w	r1, [r0, #2304]	; 0x900
}
 800726c:	2000      	movs	r0, #0
 800726e:	4770      	bx	lr
 8007270:	10008000 	.word	0x10008000

08007274 <USB_DeactivateEndpoint>:
  if (ep->is_in == 1U)
 8007274:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8007276:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8007278:	2a01      	cmp	r2, #1
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800727a:	eb00 1c43 	add.w	ip, r0, r3, lsl #5
  if (ep->is_in == 1U)
 800727e:	d02a      	beq.n	80072d6 <USB_DeactivateEndpoint+0x62>
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007280:	f8dc 2b00 	ldr.w	r2, [ip, #2816]	; 0xb00
 8007284:	2a00      	cmp	r2, #0
 8007286:	db19      	blt.n	80072bc <USB_DeactivateEndpoint+0x48>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007288:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800728c:	f003 030f 	and.w	r3, r3, #15
 8007290:	f8d0 183c 	ldr.w	r1, [r0, #2108]	; 0x83c
 8007294:	fa02 f303 	lsl.w	r3, r2, r3
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007298:	4a23      	ldr	r2, [pc, #140]	; (8007328 <USB_DeactivateEndpoint+0xb4>)
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800729a:	ea21 0103 	bic.w	r1, r1, r3
 800729e:	f8c0 183c 	str.w	r1, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80072a2:	f8d0 181c 	ldr.w	r1, [r0, #2076]	; 0x81c
 80072a6:	ea21 0303 	bic.w	r3, r1, r3
 80072aa:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
}
 80072ae:	2000      	movs	r0, #0
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80072b0:	f8dc 3b00 	ldr.w	r3, [ip, #2816]	; 0xb00
 80072b4:	401a      	ands	r2, r3
 80072b6:	f8cc 2b00 	str.w	r2, [ip, #2816]	; 0xb00
}
 80072ba:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80072bc:	f8dc 2b00 	ldr.w	r2, [ip, #2816]	; 0xb00
 80072c0:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 80072c4:	f8cc 2b00 	str.w	r2, [ip, #2816]	; 0xb00
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80072c8:	f8dc 2b00 	ldr.w	r2, [ip, #2816]	; 0xb00
 80072cc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80072d0:	f8cc 2b00 	str.w	r2, [ip, #2816]	; 0xb00
 80072d4:	e7d8      	b.n	8007288 <USB_DeactivateEndpoint+0x14>
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80072d6:	f8dc 2900 	ldr.w	r2, [ip, #2304]	; 0x900
 80072da:	2a00      	cmp	r2, #0
 80072dc:	da0b      	bge.n	80072f6 <USB_DeactivateEndpoint+0x82>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80072de:	f8dc 2900 	ldr.w	r2, [ip, #2304]	; 0x900
 80072e2:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 80072e6:	f8cc 2900 	str.w	r2, [ip, #2304]	; 0x900
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80072ea:	f8dc 2900 	ldr.w	r2, [ip, #2304]	; 0x900
 80072ee:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80072f2:	f8cc 2900 	str.w	r2, [ip, #2304]	; 0x900
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80072f6:	f003 020f 	and.w	r2, r3, #15
 80072fa:	2301      	movs	r3, #1
 80072fc:	f8d0 183c 	ldr.w	r1, [r0, #2108]	; 0x83c
 8007300:	4093      	lsls	r3, r2
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007302:	4a0a      	ldr	r2, [pc, #40]	; (800732c <USB_DeactivateEndpoint+0xb8>)
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007304:	ea21 0103 	bic.w	r1, r1, r3
 8007308:	f8c0 183c 	str.w	r1, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800730c:	f8d0 181c 	ldr.w	r1, [r0, #2076]	; 0x81c
 8007310:	ea21 0303 	bic.w	r3, r1, r3
 8007314:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
}
 8007318:	2000      	movs	r0, #0
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800731a:	f8dc 3900 	ldr.w	r3, [ip, #2304]	; 0x900
 800731e:	401a      	ands	r2, r3
 8007320:	f8cc 2900 	str.w	r2, [ip, #2304]	; 0x900
}
 8007324:	4770      	bx	lr
 8007326:	bf00      	nop
 8007328:	eff37800 	.word	0xeff37800
 800732c:	ec337800 	.word	0xec337800

08007330 <USB_EPStartXfer>:
{
 8007330:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (ep->is_in == 1U)
 8007334:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8007336:	780c      	ldrb	r4, [r1, #0]
  if (ep->is_in == 1U)
 8007338:	2b01      	cmp	r3, #1
 800733a:	d045      	beq.n	80073c8 <USB_EPStartXfer+0x98>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800733c:	eb00 1344 	add.w	r3, r0, r4, lsl #5
 8007340:	4e9a      	ldr	r6, [pc, #616]	; (80075ac <USB_EPStartXfer+0x27c>)
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007342:	4d9b      	ldr	r5, [pc, #620]	; (80075b0 <USB_EPStartXfer+0x280>)
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007344:	f8d3 7b10 	ldr.w	r7, [r3, #2832]	; 0xb10
 8007348:	f503 6c30 	add.w	ip, r3, #2816	; 0xb00
 800734c:	403e      	ands	r6, r7
 800734e:	f8c3 6b10 	str.w	r6, [r3, #2832]	; 0xb10
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007352:	f8d3 6b10 	ldr.w	r6, [r3, #2832]	; 0xb10
 8007356:	4035      	ands	r5, r6
 8007358:	f8c3 5b10 	str.w	r5, [r3, #2832]	; 0xb10
    if (epnum == 0U)
 800735c:	bb7c      	cbnz	r4, 80073be <USB_EPStartXfer+0x8e>
      if (ep->xfer_len > 0U)
 800735e:	690c      	ldr	r4, [r1, #16]
 8007360:	2c00      	cmp	r4, #0
 8007362:	f040 8093 	bne.w	800748c <USB_EPStartXfer+0x15c>
        if (ep->xfer_len > ep->maxpacket)
 8007366:	688c      	ldr	r4, [r1, #8]
      ep->xfer_size = ep->maxpacket;
 8007368:	620c      	str	r4, [r1, #32]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800736a:	f8dc 5010 	ldr.w	r5, [ip, #16]
 800736e:	f3c4 0412 	ubfx	r4, r4, #0, #19
    if (dma == 1U)
 8007372:	2a01      	cmp	r2, #1
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007374:	ea44 0405 	orr.w	r4, r4, r5
 8007378:	f8cc 4010 	str.w	r4, [ip, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800737c:	f8dc 4010 	ldr.w	r4, [ip, #16]
 8007380:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8007384:	f8cc 4010 	str.w	r4, [ip, #16]
    if (dma == 1U)
 8007388:	f000 80a1 	beq.w	80074ce <USB_EPStartXfer+0x19e>
    if (ep->type == EP_TYPE_ISOC)
 800738c:	790a      	ldrb	r2, [r1, #4]
 800738e:	2a01      	cmp	r2, #1
 8007390:	d10c      	bne.n	80073ac <USB_EPStartXfer+0x7c>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007392:	f8d0 2808 	ldr.w	r2, [r0, #2056]	; 0x808
 8007396:	f412 7f80 	tst.w	r2, #256	; 0x100
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800739a:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 800739e:	bf0c      	ite	eq
 80073a0:	f042 5200 	orreq.w	r2, r2, #536870912	; 0x20000000
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80073a4:	f042 5280 	orrne.w	r2, r2, #268435456	; 0x10000000
 80073a8:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80073ac:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
}
 80073b0:	2000      	movs	r0, #0
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80073b2:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 80073b6:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
}
 80073ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (ep->xfer_len == 0U)
 80073be:	690c      	ldr	r4, [r1, #16]
 80073c0:	2c00      	cmp	r4, #0
 80073c2:	d166      	bne.n	8007492 <USB_EPStartXfer+0x162>
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80073c4:	688c      	ldr	r4, [r1, #8]
 80073c6:	e7d0      	b.n	800736a <USB_EPStartXfer+0x3a>
    if (ep->xfer_len == 0U)
 80073c8:	690b      	ldr	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80073ca:	eb00 1644 	add.w	r6, r0, r4, lsl #5
    if (ep->xfer_len == 0U)
 80073ce:	bb2b      	cbnz	r3, 800741c <USB_EPStartXfer+0xec>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80073d0:	f8d6 c910 	ldr.w	ip, [r6, #2320]	; 0x910
    if (dma == 1U)
 80073d4:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80073d6:	4f76      	ldr	r7, [pc, #472]	; (80075b0 <USB_EPStartXfer+0x280>)
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80073d8:	4d74      	ldr	r5, [pc, #464]	; (80075ac <USB_EPStartXfer+0x27c>)
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80073da:	ea0c 0707 	and.w	r7, ip, r7
 80073de:	f8c6 7910 	str.w	r7, [r6, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80073e2:	f8d6 7910 	ldr.w	r7, [r6, #2320]	; 0x910
 80073e6:	f447 2700 	orr.w	r7, r7, #524288	; 0x80000
 80073ea:	f8c6 7910 	str.w	r7, [r6, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80073ee:	f8d6 7910 	ldr.w	r7, [r6, #2320]	; 0x910
 80073f2:	ea05 0507 	and.w	r5, r5, r7
 80073f6:	f8c6 5910 	str.w	r5, [r6, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80073fa:	f506 6510 	add.w	r5, r6, #2304	; 0x900
      if (ep->type == EP_TYPE_ISOC)
 80073fe:	790f      	ldrb	r7, [r1, #4]
    if (dma == 1U)
 8007400:	f000 80b1 	beq.w	8007566 <USB_EPStartXfer+0x236>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007404:	f8d6 c900 	ldr.w	ip, [r6, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 8007408:	2f01      	cmp	r7, #1
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800740a:	f04c 4c04 	orr.w	ip, ip, #2214592512	; 0x84000000
 800740e:	f8c6 c900 	str.w	ip, [r6, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 8007412:	f000 8088 	beq.w	8007526 <USB_EPStartXfer+0x1f6>
}
 8007416:	2000      	movs	r0, #0
 8007418:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800741c:	f8d6 c910 	ldr.w	ip, [r6, #2320]	; 0x910
 8007420:	4f62      	ldr	r7, [pc, #392]	; (80075ac <USB_EPStartXfer+0x27c>)
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007422:	4d63      	ldr	r5, [pc, #396]	; (80075b0 <USB_EPStartXfer+0x280>)
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007424:	ea0c 0707 	and.w	r7, ip, r7
 8007428:	f8c6 7910 	str.w	r7, [r6, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800742c:	f8d6 7910 	ldr.w	r7, [r6, #2320]	; 0x910
 8007430:	403d      	ands	r5, r7
 8007432:	f8c6 5910 	str.w	r5, [r6, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007436:	f506 6510 	add.w	r5, r6, #2304	; 0x900
      if (epnum == 0U)
 800743a:	2c00      	cmp	r4, #0
 800743c:	d14e      	bne.n	80074dc <USB_EPStartXfer+0x1ac>
        if (ep->xfer_len > ep->maxpacket)
 800743e:	688f      	ldr	r7, [r1, #8]
 8007440:	42bb      	cmp	r3, r7
 8007442:	f200 80a0 	bhi.w	8007586 <USB_EPStartXfer+0x256>
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007446:	692f      	ldr	r7, [r5, #16]
 8007448:	f447 2700 	orr.w	r7, r7, #524288	; 0x80000
 800744c:	612f      	str	r7, [r5, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800744e:	f8d5 c010 	ldr.w	ip, [r5, #16]
 8007452:	f3c3 0712 	ubfx	r7, r3, #0, #19
 8007456:	ea47 070c 	orr.w	r7, r7, ip
 800745a:	612f      	str	r7, [r5, #16]
      if (ep->type == EP_TYPE_ISOC)
 800745c:	790f      	ldrb	r7, [r1, #4]
 800745e:	2f01      	cmp	r7, #1
 8007460:	d04d      	beq.n	80074fe <USB_EPStartXfer+0x1ce>
    if (dma == 1U)
 8007462:	2a01      	cmp	r2, #1
 8007464:	f000 808a 	beq.w	800757c <USB_EPStartXfer+0x24c>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007468:	f8d6 2900 	ldr.w	r2, [r6, #2304]	; 0x900
 800746c:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8007470:	f8c6 2900 	str.w	r2, [r6, #2304]	; 0x900
        if (ep->xfer_len > 0U)
 8007474:	2b00      	cmp	r3, #0
 8007476:	d0ce      	beq.n	8007416 <USB_EPStartXfer+0xe6>
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007478:	f004 040f 	and.w	r4, r4, #15
 800747c:	2301      	movs	r3, #1
 800747e:	f8d0 2834 	ldr.w	r2, [r0, #2100]	; 0x834
 8007482:	40a3      	lsls	r3, r4
 8007484:	4313      	orrs	r3, r2
 8007486:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
 800748a:	e7c4      	b.n	8007416 <USB_EPStartXfer+0xe6>
        ep->xfer_len = ep->maxpacket;
 800748c:	688c      	ldr	r4, [r1, #8]
 800748e:	610c      	str	r4, [r1, #16]
 8007490:	e76a      	b.n	8007368 <USB_EPStartXfer+0x38>
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007492:	688d      	ldr	r5, [r1, #8]
    if (dma == 1U)
 8007494:	2a01      	cmp	r2, #1
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007496:	4e47      	ldr	r6, [pc, #284]	; (80075b4 <USB_EPStartXfer+0x284>)
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007498:	442c      	add	r4, r5
 800749a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800749e:	fbb4 f4f5 	udiv	r4, r4, r5
 80074a2:	b2a4      	uxth	r4, r4
        ep->xfer_size = ep->maxpacket * pktcnt;
 80074a4:	fb04 f505 	mul.w	r5, r4, r5
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80074a8:	ea06 44c4 	and.w	r4, r6, r4, lsl #19
 80074ac:	f8dc 6010 	ldr.w	r6, [ip, #16]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80074b0:	620d      	str	r5, [r1, #32]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80074b2:	f3c5 0512 	ubfx	r5, r5, #0, #19
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80074b6:	ea44 0406 	orr.w	r4, r4, r6
 80074ba:	f8cc 4010 	str.w	r4, [ip, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80074be:	f8dc 4010 	ldr.w	r4, [ip, #16]
 80074c2:	ea45 0504 	orr.w	r5, r5, r4
 80074c6:	f8cc 5010 	str.w	r5, [ip, #16]
    if (dma == 1U)
 80074ca:	f47f af5f 	bne.w	800738c <USB_EPStartXfer+0x5c>
      if ((uint32_t)ep->xfer_buff != 0U)
 80074ce:	68ca      	ldr	r2, [r1, #12]
 80074d0:	2a00      	cmp	r2, #0
 80074d2:	f43f af5b 	beq.w	800738c <USB_EPStartXfer+0x5c>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80074d6:	f8cc 2014 	str.w	r2, [ip, #20]
 80074da:	e757      	b.n	800738c <USB_EPStartXfer+0x5c>
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80074dc:	f8d1 e008 	ldr.w	lr, [r1, #8]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80074e0:	4f34      	ldr	r7, [pc, #208]	; (80075b4 <USB_EPStartXfer+0x284>)
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80074e2:	eb03 0c0e 	add.w	ip, r3, lr
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80074e6:	f8d5 8010 	ldr.w	r8, [r5, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80074ea:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 80074ee:	fbbc fcfe 	udiv	ip, ip, lr
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80074f2:	ea07 47cc 	and.w	r7, r7, ip, lsl #19
 80074f6:	ea47 0708 	orr.w	r7, r7, r8
 80074fa:	612f      	str	r7, [r5, #16]
 80074fc:	e7a7      	b.n	800744e <USB_EPStartXfer+0x11e>
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80074fe:	f8d5 c010 	ldr.w	ip, [r5, #16]
    if (dma == 1U)
 8007502:	2a01      	cmp	r2, #1
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007504:	f02c 4cc0 	bic.w	ip, ip, #1610612736	; 0x60000000
 8007508:	f8c5 c010 	str.w	ip, [r5, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800750c:	f8d5 c010 	ldr.w	ip, [r5, #16]
 8007510:	f04c 5c00 	orr.w	ip, ip, #536870912	; 0x20000000
 8007514:	f8c5 c010 	str.w	ip, [r5, #16]
    if (dma == 1U)
 8007518:	d038      	beq.n	800758c <USB_EPStartXfer+0x25c>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800751a:	f8d6 7900 	ldr.w	r7, [r6, #2304]	; 0x900
 800751e:	f047 4704 	orr.w	r7, r7, #2214592512	; 0x84000000
 8007522:	f8c6 7900 	str.w	r7, [r6, #2304]	; 0x900
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007526:	f8d0 6808 	ldr.w	r6, [r0, #2056]	; 0x808
 800752a:	f416 7f80 	tst.w	r6, #256	; 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800752e:	682e      	ldr	r6, [r5, #0]
 8007530:	bf0c      	ite	eq
 8007532:	f046 5600 	orreq.w	r6, r6, #536870912	; 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007536:	f046 5680 	orrne.w	r6, r6, #268435456	; 0x10000000
 800753a:	602e      	str	r6, [r5, #0]
  if (dma == 0U)
 800753c:	2a00      	cmp	r2, #0
 800753e:	f47f af6a 	bne.w	8007416 <USB_EPStartXfer+0xe6>
    count32b = ((uint32_t)len + 3U) / 4U;
 8007542:	b29b      	uxth	r3, r3
 8007544:	3303      	adds	r3, #3
    for (i = 0U; i < count32b; i++)
 8007546:	089a      	lsrs	r2, r3, #2
 8007548:	f43f af65 	beq.w	8007416 <USB_EPStartXfer+0xe6>
        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800754c:	68cb      	ldr	r3, [r1, #12]
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800754e:	eb00 3404 	add.w	r4, r0, r4, lsl #12
 8007552:	eb03 0182 	add.w	r1, r3, r2, lsl #2
 8007556:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
 800755a:	f853 2b04 	ldr.w	r2, [r3], #4
    for (i = 0U; i < count32b; i++)
 800755e:	4299      	cmp	r1, r3
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007560:	6022      	str	r2, [r4, #0]
    for (i = 0U; i < count32b; i++)
 8007562:	d1fa      	bne.n	800755a <USB_EPStartXfer+0x22a>
 8007564:	e757      	b.n	8007416 <USB_EPStartXfer+0xe6>
      if ((uint32_t)ep->dma_addr != 0U)
 8007566:	69cb      	ldr	r3, [r1, #28]
 8007568:	b95b      	cbnz	r3, 8007582 <USB_EPStartXfer+0x252>
      if (ep->type == EP_TYPE_ISOC)
 800756a:	2f01      	cmp	r7, #1
 800756c:	d011      	beq.n	8007592 <USB_EPStartXfer+0x262>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800756e:	682b      	ldr	r3, [r5, #0]
}
 8007570:	2000      	movs	r0, #0
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007572:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007576:	602b      	str	r3, [r5, #0]
}
 8007578:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((uint32_t)ep->dma_addr != 0U)
 800757c:	69cb      	ldr	r3, [r1, #28]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d0f5      	beq.n	800756e <USB_EPStartXfer+0x23e>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007582:	616b      	str	r3, [r5, #20]
 8007584:	e7f1      	b.n	800756a <USB_EPStartXfer+0x23a>
          ep->xfer_len = ep->maxpacket;
 8007586:	463b      	mov	r3, r7
 8007588:	610f      	str	r7, [r1, #16]
 800758a:	e75c      	b.n	8007446 <USB_EPStartXfer+0x116>
      if ((uint32_t)ep->dma_addr != 0U)
 800758c:	69cb      	ldr	r3, [r1, #28]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d1f7      	bne.n	8007582 <USB_EPStartXfer+0x252>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007592:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 8007596:	f413 7f80 	tst.w	r3, #256	; 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800759a:	682b      	ldr	r3, [r5, #0]
 800759c:	bf0c      	ite	eq
 800759e:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80075a2:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 80075a6:	602b      	str	r3, [r5, #0]
 80075a8:	e7e1      	b.n	800756e <USB_EPStartXfer+0x23e>
 80075aa:	bf00      	nop
 80075ac:	fff80000 	.word	0xfff80000
 80075b0:	e007ffff 	.word	0xe007ffff
 80075b4:	1ff80000 	.word	0x1ff80000

080075b8 <USB_EPStopXfer>:
  __IO uint32_t count = 0U;
 80075b8:	2300      	movs	r3, #0
{
 80075ba:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 80075bc:	9301      	str	r3, [sp, #4]
  if (ep->is_in == 1U)
 80075be:	784b      	ldrb	r3, [r1, #1]
 80075c0:	2b01      	cmp	r3, #1
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80075c2:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 80075c4:	d020      	beq.n	8007608 <USB_EPStopXfer+0x50>
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80075c6:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
 80075ca:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 80075ce:	6803      	ldr	r3, [r0, #0]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	db02      	blt.n	80075da <USB_EPStopXfer+0x22>
  HAL_StatusTypeDef ret = HAL_OK;
 80075d4:	2000      	movs	r0, #0
}
 80075d6:	b002      	add	sp, #8
 80075d8:	4770      	bx	lr
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80075da:	6803      	ldr	r3, [r0, #0]
        if (count > 10000U)
 80075dc:	f242 7210 	movw	r2, #10000	; 0x2710
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80075e0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80075e4:	6003      	str	r3, [r0, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80075e6:	6803      	ldr	r3, [r0, #0]
 80075e8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80075ec:	6003      	str	r3, [r0, #0]
 80075ee:	e002      	b.n	80075f6 <USB_EPStopXfer+0x3e>
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80075f0:	6803      	ldr	r3, [r0, #0]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	daee      	bge.n	80075d4 <USB_EPStopXfer+0x1c>
        count++;
 80075f6:	9b01      	ldr	r3, [sp, #4]
 80075f8:	3301      	adds	r3, #1
 80075fa:	9301      	str	r3, [sp, #4]
        if (count > 10000U)
 80075fc:	9b01      	ldr	r3, [sp, #4]
 80075fe:	4293      	cmp	r3, r2
 8007600:	d9f6      	bls.n	80075f0 <USB_EPStopXfer+0x38>
          ret = HAL_ERROR;
 8007602:	2001      	movs	r0, #1
}
 8007604:	b002      	add	sp, #8
 8007606:	4770      	bx	lr
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007608:	f500 6010 	add.w	r0, r0, #2304	; 0x900
 800760c:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8007610:	681a      	ldr	r2, [r3, #0]
 8007612:	2a00      	cmp	r2, #0
 8007614:	dade      	bge.n	80075d4 <USB_EPStopXfer+0x1c>
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007616:	681a      	ldr	r2, [r3, #0]
        if (count > 10000U)
 8007618:	f242 7110 	movw	r1, #10000	; 0x2710
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800761c:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8007620:	601a      	str	r2, [r3, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007622:	681a      	ldr	r2, [r3, #0]
 8007624:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8007628:	601a      	str	r2, [r3, #0]
 800762a:	e002      	b.n	8007632 <USB_EPStopXfer+0x7a>
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800762c:	681a      	ldr	r2, [r3, #0]
 800762e:	2a00      	cmp	r2, #0
 8007630:	dad0      	bge.n	80075d4 <USB_EPStopXfer+0x1c>
        count++;
 8007632:	9a01      	ldr	r2, [sp, #4]
 8007634:	3201      	adds	r2, #1
 8007636:	9201      	str	r2, [sp, #4]
        if (count > 10000U)
 8007638:	9a01      	ldr	r2, [sp, #4]
 800763a:	428a      	cmp	r2, r1
 800763c:	d9f6      	bls.n	800762c <USB_EPStopXfer+0x74>
 800763e:	e7e0      	b.n	8007602 <USB_EPStopXfer+0x4a>

08007640 <USB_WritePacket>:
{
 8007640:	b410      	push	{r4}
 8007642:	f89d 4004 	ldrb.w	r4, [sp, #4]
  if (dma == 0U)
 8007646:	b964      	cbnz	r4, 8007662 <USB_WritePacket+0x22>
    count32b = ((uint32_t)len + 3U) / 4U;
 8007648:	3303      	adds	r3, #3
    for (i = 0U; i < count32b; i++)
 800764a:	089b      	lsrs	r3, r3, #2
 800764c:	d009      	beq.n	8007662 <USB_WritePacket+0x22>
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800764e:	3201      	adds	r2, #1
 8007650:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8007654:	eb00 3002 	add.w	r0, r0, r2, lsl #12
 8007658:	f851 2b04 	ldr.w	r2, [r1], #4
    for (i = 0U; i < count32b; i++)
 800765c:	428b      	cmp	r3, r1
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800765e:	6002      	str	r2, [r0, #0]
    for (i = 0U; i < count32b; i++)
 8007660:	d1fa      	bne.n	8007658 <USB_WritePacket+0x18>
}
 8007662:	2000      	movs	r0, #0
 8007664:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007668:	4770      	bx	lr
 800766a:	bf00      	nop

0800766c <USB_ReadPacket>:
{
 800766c:	b530      	push	{r4, r5, lr}
  for (i = 0U; i < count32b; i++)
 800766e:	ea5f 0e92 	movs.w	lr, r2, lsr #2
  uint16_t remaining_bytes = len % 4U;
 8007672:	f002 0503 	and.w	r5, r2, #3
  for (i = 0U; i < count32b; i++)
 8007676:	d00b      	beq.n	8007690 <USB_ReadPacket+0x24>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007678:	f500 5480 	add.w	r4, r0, #4096	; 0x1000
  uint8_t *pDest = dest;
 800767c:	468c      	mov	ip, r1
  for (i = 0U; i < count32b; i++)
 800767e:	2300      	movs	r3, #0
 8007680:	3301      	adds	r3, #1
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007682:	6822      	ldr	r2, [r4, #0]
  for (i = 0U; i < count32b; i++)
 8007684:	459e      	cmp	lr, r3
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007686:	f84c 2b04 	str.w	r2, [ip], #4
  for (i = 0U; i < count32b; i++)
 800768a:	d1f9      	bne.n	8007680 <USB_ReadPacket+0x14>
    pDest++;
 800768c:	eb01 018e 	add.w	r1, r1, lr, lsl #2
  if (remaining_bytes != 0U)
 8007690:	b16d      	cbz	r5, 80076ae <USB_ReadPacket+0x42>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007692:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
      remaining_bytes--;
 8007696:	1e6b      	subs	r3, r5, #1
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007698:	6802      	ldr	r2, [r0, #0]
      remaining_bytes--;
 800769a:	b29b      	uxth	r3, r3
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800769c:	700a      	strb	r2, [r1, #0]
    } while (remaining_bytes != 0U);
 800769e:	b12b      	cbz	r3, 80076ac <USB_ReadPacket+0x40>
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80076a0:	0a10      	lsrs	r0, r2, #8
    } while (remaining_bytes != 0U);
 80076a2:	2b01      	cmp	r3, #1
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80076a4:	7048      	strb	r0, [r1, #1]
    } while (remaining_bytes != 0U);
 80076a6:	d001      	beq.n	80076ac <USB_ReadPacket+0x40>
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80076a8:	0c12      	lsrs	r2, r2, #16
 80076aa:	708a      	strb	r2, [r1, #2]
      pDest++;
 80076ac:	4429      	add	r1, r5
}
 80076ae:	4608      	mov	r0, r1
 80076b0:	bd30      	pop	{r4, r5, pc}
 80076b2:	bf00      	nop

080076b4 <USB_EPSetStall>:
  if (ep->is_in == 1U)
 80076b4:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 80076b6:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 80076b8:	2a01      	cmp	r2, #1
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80076ba:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  if (ep->is_in == 1U)
 80076be:	d00c      	beq.n	80076da <USB_EPSetStall+0x26>
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80076c0:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 80076c4:	b10b      	cbz	r3, 80076ca <USB_EPSetStall+0x16>
 80076c6:	2a00      	cmp	r2, #0
 80076c8:	da14      	bge.n	80076f4 <USB_EPSetStall+0x40>
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80076ca:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 80076ce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80076d2:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 80076d6:	2000      	movs	r0, #0
 80076d8:	4770      	bx	lr
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80076da:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 80076de:	2a00      	cmp	r2, #0
 80076e0:	db00      	blt.n	80076e4 <USB_EPSetStall+0x30>
 80076e2:	b973      	cbnz	r3, 8007702 <USB_EPSetStall+0x4e>
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80076e4:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 80076e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80076ec:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 80076f0:	2000      	movs	r0, #0
 80076f2:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80076f4:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 80076f8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80076fc:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 8007700:	e7e3      	b.n	80076ca <USB_EPSetStall+0x16>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007702:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8007706:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800770a:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800770e:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8007712:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007716:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 800771a:	e7e9      	b.n	80076f0 <USB_EPSetStall+0x3c>

0800771c <USB_EPClearStall>:
  if (ep->is_in == 1U)
 800771c:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 800771e:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8007720:	2a01      	cmp	r2, #1
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007722:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  if (ep->is_in == 1U)
 8007726:	d013      	beq.n	8007750 <USB_EPClearStall+0x34>
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007728:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800772c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007730:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007734:	790b      	ldrb	r3, [r1, #4]
 8007736:	3b02      	subs	r3, #2
 8007738:	2b01      	cmp	r3, #1
 800773a:	d901      	bls.n	8007740 <USB_EPClearStall+0x24>
}
 800773c:	2000      	movs	r0, #0
 800773e:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007740:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8007744:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007748:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 800774c:	2000      	movs	r0, #0
 800774e:	4770      	bx	lr
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007750:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8007754:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007758:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800775c:	790b      	ldrb	r3, [r1, #4]
 800775e:	3b02      	subs	r3, #2
 8007760:	2b01      	cmp	r3, #1
 8007762:	d8eb      	bhi.n	800773c <USB_EPClearStall+0x20>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007764:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8007768:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800776c:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 8007770:	2000      	movs	r0, #0
 8007772:	4770      	bx	lr

08007774 <USB_SetDevAddress>:
{
 8007774:	4603      	mov	r3, r0
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007776:	0109      	lsls	r1, r1, #4
}
 8007778:	2000      	movs	r0, #0
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800777a:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800777e:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007782:	f422 62fe 	bic.w	r2, r2, #2032	; 0x7f0
 8007786:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800778a:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 800778e:	4311      	orrs	r1, r2
 8007790:	f8c3 1800 	str.w	r1, [r3, #2048]	; 0x800
}
 8007794:	4770      	bx	lr
 8007796:	bf00      	nop

08007798 <USB_DevConnect>:
{
 8007798:	4603      	mov	r3, r0
}
 800779a:	2000      	movs	r0, #0
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800779c:	f8d3 2e00 	ldr.w	r2, [r3, #3584]	; 0xe00
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80077a0:	f503 6100 	add.w	r1, r3, #2048	; 0x800
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80077a4:	f022 0203 	bic.w	r2, r2, #3
 80077a8:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80077ac:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 80077b0:	f023 0302 	bic.w	r3, r3, #2
 80077b4:	604b      	str	r3, [r1, #4]
}
 80077b6:	4770      	bx	lr

080077b8 <USB_DevDisconnect>:
{
 80077b8:	4603      	mov	r3, r0
}
 80077ba:	2000      	movs	r0, #0
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80077bc:	f8d3 2e00 	ldr.w	r2, [r3, #3584]	; 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80077c0:	f503 6100 	add.w	r1, r3, #2048	; 0x800
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80077c4:	f022 0203 	bic.w	r2, r2, #3
 80077c8:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80077cc:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 80077d0:	f043 0302 	orr.w	r3, r3, #2
 80077d4:	604b      	str	r3, [r1, #4]
}
 80077d6:	4770      	bx	lr

080077d8 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 80077d8:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 80077da:	6980      	ldr	r0, [r0, #24]
}
 80077dc:	4010      	ands	r0, r2
 80077de:	4770      	bx	lr

080077e0 <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 80077e0:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80077e4:	f8d0 081c 	ldr.w	r0, [r0, #2076]	; 0x81c
 80077e8:	4018      	ands	r0, r3
}
 80077ea:	0c00      	lsrs	r0, r0, #16
 80077ec:	4770      	bx	lr
 80077ee:	bf00      	nop

080077f0 <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 80077f0:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80077f4:	f8d0 081c 	ldr.w	r0, [r0, #2076]	; 0x81c
 80077f8:	4018      	ands	r0, r3
}
 80077fa:	b280      	uxth	r0, r0
 80077fc:	4770      	bx	lr
 80077fe:	bf00      	nop

08007800 <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007800:	eb00 1141 	add.w	r1, r0, r1, lsl #5
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007804:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007808:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	; 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800780c:	6940      	ldr	r0, [r0, #20]
}
 800780e:	4010      	ands	r0, r2
 8007810:	4770      	bx	lr
 8007812:	bf00      	nop

08007814 <USB_ReadDevInEPInterrupt>:
  msk = USBx_DEVICE->DIEPMSK;
 8007814:	f8d0 2810 	ldr.w	r2, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007818:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800781c:	eb00 1041 	add.w	r0, r0, r1, lsl #5
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007820:	f001 010f 	and.w	r1, r1, #15
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007824:	f8d0 0908 	ldr.w	r0, [r0, #2312]	; 0x908
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007828:	40cb      	lsrs	r3, r1
 800782a:	01db      	lsls	r3, r3, #7
 800782c:	b2db      	uxtb	r3, r3
 800782e:	4313      	orrs	r3, r2
}
 8007830:	4018      	ands	r0, r3
 8007832:	4770      	bx	lr

08007834 <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 8007834:	6940      	ldr	r0, [r0, #20]
}
 8007836:	f000 0001 	and.w	r0, r0, #1
 800783a:	4770      	bx	lr

0800783c <USB_ActivateSetup>:
{
 800783c:	4603      	mov	r3, r0
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800783e:	4a09      	ldr	r2, [pc, #36]	; (8007864 <USB_ActivateSetup+0x28>)
}
 8007840:	2000      	movs	r0, #0
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007842:	f503 6100 	add.w	r1, r3, #2048	; 0x800
{
 8007846:	b410      	push	{r4}
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007848:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
 800784c:	4022      	ands	r2, r4
}
 800784e:	f85d 4b04 	ldr.w	r4, [sp], #4
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007852:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007856:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 800785a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800785e:	604b      	str	r3, [r1, #4]
}
 8007860:	4770      	bx	lr
 8007862:	bf00      	nop
 8007864:	fffff800 	.word	0xfffff800

08007868 <USB_EP0_OutStart>:
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007868:	4b14      	ldr	r3, [pc, #80]	; (80078bc <USB_EP0_OutStart+0x54>)
{
 800786a:	b410      	push	{r4}
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800786c:	6c04      	ldr	r4, [r0, #64]	; 0x40
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800786e:	429c      	cmp	r4, r3
 8007870:	d81a      	bhi.n	80078a8 <USB_EP0_OutStart+0x40>
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007872:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007876:	2300      	movs	r3, #0
  if (dma == 1U)
 8007878:	2901      	cmp	r1, #1
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800787a:	6103      	str	r3, [r0, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800787c:	6903      	ldr	r3, [r0, #16]
 800787e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007882:	6103      	str	r3, [r0, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007884:	6903      	ldr	r3, [r0, #16]
 8007886:	f043 0318 	orr.w	r3, r3, #24
 800788a:	6103      	str	r3, [r0, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800788c:	6903      	ldr	r3, [r0, #16]
 800788e:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007892:	6103      	str	r3, [r0, #16]
  if (dma == 1U)
 8007894:	d104      	bne.n	80078a0 <USB_EP0_OutStart+0x38>
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007896:	6142      	str	r2, [r0, #20]
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007898:	6803      	ldr	r3, [r0, #0]
 800789a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800789e:	6003      	str	r3, [r0, #0]
}
 80078a0:	2000      	movs	r0, #0
 80078a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80078a6:	4770      	bx	lr
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80078a8:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 80078ac:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	dae0      	bge.n	8007876 <USB_EP0_OutStart+0xe>
}
 80078b4:	2000      	movs	r0, #0
 80078b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80078ba:	4770      	bx	lr
 80078bc:	4f54300a 	.word	0x4f54300a

080078c0 <USBD_CDC_EP0_RxReady>:
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80078c0:	f8d0 32d4 	ldr.w	r3, [r0, #724]	; 0x2d4
 80078c4:	eb00 0083 	add.w	r0, r0, r3, lsl #2
{
 80078c8:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80078ca:	f8d0 42c0 	ldr.w	r4, [r0, #704]	; 0x2c0

  if (hcdc == NULL)
 80078ce:	b194      	cbz	r4, 80078f6 <USBD_CDC_EP0_RxReady+0x36>
  {
    return (uint8_t)USBD_FAIL;
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80078d0:	f8d0 32c4 	ldr.w	r3, [r0, #708]	; 0x2c4
 80078d4:	b16b      	cbz	r3, 80078f2 <USBD_CDC_EP0_RxReady+0x32>
 80078d6:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 80078da:	28ff      	cmp	r0, #255	; 0xff
 80078dc:	d009      	beq.n	80078f2 <USBD_CDC_EP0_RxReady+0x32>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80078de:	689b      	ldr	r3, [r3, #8]
 80078e0:	4621      	mov	r1, r4
 80078e2:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 80078e6:	4798      	blx	r3
                                                                     (uint8_t *)hcdc->data,
                                                                     (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 80078e8:	23ff      	movs	r3, #255	; 0xff
  }

  return (uint8_t)USBD_OK;
 80078ea:	2000      	movs	r0, #0
    hcdc->CmdOpCode = 0xFFU;
 80078ec:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
}
 80078f0:	bd10      	pop	{r4, pc}
  return (uint8_t)USBD_OK;
 80078f2:	2000      	movs	r0, #0
}
 80078f4:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 80078f6:	2003      	movs	r0, #3
}
 80078f8:	bd10      	pop	{r4, pc}
 80078fa:	bf00      	nop

080078fc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80078fc:	4603      	mov	r3, r0
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80078fe:	220a      	movs	r2, #10

  return USBD_CDC_DeviceQualifierDesc;
}
 8007900:	4801      	ldr	r0, [pc, #4]	; (8007908 <USBD_CDC_GetDeviceQualifierDescriptor+0xc>)
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007902:	801a      	strh	r2, [r3, #0]
}
 8007904:	4770      	bx	lr
 8007906:	bf00      	nop
 8007908:	2400008c 	.word	0x2400008c

0800790c <USBD_CDC_GetFSCfgDesc>:
{
 800790c:	b570      	push	{r4, r5, r6, lr}
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800790e:	2182      	movs	r1, #130	; 0x82
{
 8007910:	4606      	mov	r6, r0
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007912:	480f      	ldr	r0, [pc, #60]	; (8007950 <USBD_CDC_GetFSCfgDesc+0x44>)
 8007914:	f000 fc02 	bl	800811c <USBD_GetEpDesc>
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007918:	2101      	movs	r1, #1
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800791a:	4605      	mov	r5, r0
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800791c:	480c      	ldr	r0, [pc, #48]	; (8007950 <USBD_CDC_GetFSCfgDesc+0x44>)
 800791e:	f000 fbfd 	bl	800811c <USBD_GetEpDesc>
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007922:	2181      	movs	r1, #129	; 0x81
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007924:	4604      	mov	r4, r0
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007926:	480a      	ldr	r0, [pc, #40]	; (8007950 <USBD_CDC_GetFSCfgDesc+0x44>)
 8007928:	f000 fbf8 	bl	800811c <USBD_GetEpDesc>
  if (pEpCmdDesc != NULL)
 800792c:	b10d      	cbz	r5, 8007932 <USBD_CDC_GetFSCfgDesc+0x26>
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800792e:	2210      	movs	r2, #16
 8007930:	71aa      	strb	r2, [r5, #6]
  if (pEpOutDesc != NULL)
 8007932:	b11c      	cbz	r4, 800793c <USBD_CDC_GetFSCfgDesc+0x30>
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007934:	2100      	movs	r1, #0
 8007936:	2240      	movs	r2, #64	; 0x40
 8007938:	7161      	strb	r1, [r4, #5]
 800793a:	7122      	strb	r2, [r4, #4]
  if (pEpInDesc != NULL)
 800793c:	b118      	cbz	r0, 8007946 <USBD_CDC_GetFSCfgDesc+0x3a>
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800793e:	2100      	movs	r1, #0
 8007940:	2240      	movs	r2, #64	; 0x40
 8007942:	7141      	strb	r1, [r0, #5]
 8007944:	7102      	strb	r2, [r0, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007946:	2343      	movs	r3, #67	; 0x43
}
 8007948:	4801      	ldr	r0, [pc, #4]	; (8007950 <USBD_CDC_GetFSCfgDesc+0x44>)
  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800794a:	8033      	strh	r3, [r6, #0]
}
 800794c:	bd70      	pop	{r4, r5, r6, pc}
 800794e:	bf00      	nop
 8007950:	24000048 	.word	0x24000048

08007954 <USBD_CDC_GetHSCfgDesc>:
{
 8007954:	b570      	push	{r4, r5, r6, lr}
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007956:	2182      	movs	r1, #130	; 0x82
{
 8007958:	4606      	mov	r6, r0
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800795a:	480f      	ldr	r0, [pc, #60]	; (8007998 <USBD_CDC_GetHSCfgDesc+0x44>)
 800795c:	f000 fbde 	bl	800811c <USBD_GetEpDesc>
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007960:	2101      	movs	r1, #1
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007962:	4605      	mov	r5, r0
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007964:	480c      	ldr	r0, [pc, #48]	; (8007998 <USBD_CDC_GetHSCfgDesc+0x44>)
 8007966:	f000 fbd9 	bl	800811c <USBD_GetEpDesc>
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800796a:	2181      	movs	r1, #129	; 0x81
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800796c:	4604      	mov	r4, r0
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800796e:	480a      	ldr	r0, [pc, #40]	; (8007998 <USBD_CDC_GetHSCfgDesc+0x44>)
 8007970:	f000 fbd4 	bl	800811c <USBD_GetEpDesc>
  if (pEpCmdDesc != NULL)
 8007974:	b10d      	cbz	r5, 800797a <USBD_CDC_GetHSCfgDesc+0x26>
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007976:	2210      	movs	r2, #16
 8007978:	71aa      	strb	r2, [r5, #6]
  if (pEpOutDesc != NULL)
 800797a:	b11c      	cbz	r4, 8007984 <USBD_CDC_GetHSCfgDesc+0x30>
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800797c:	2100      	movs	r1, #0
 800797e:	2202      	movs	r2, #2
 8007980:	7121      	strb	r1, [r4, #4]
 8007982:	7162      	strb	r2, [r4, #5]
  if (pEpInDesc != NULL)
 8007984:	b118      	cbz	r0, 800798e <USBD_CDC_GetHSCfgDesc+0x3a>
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007986:	2100      	movs	r1, #0
 8007988:	2202      	movs	r2, #2
 800798a:	7101      	strb	r1, [r0, #4]
 800798c:	7142      	strb	r2, [r0, #5]
  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800798e:	2343      	movs	r3, #67	; 0x43
}
 8007990:	4801      	ldr	r0, [pc, #4]	; (8007998 <USBD_CDC_GetHSCfgDesc+0x44>)
  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007992:	8033      	strh	r3, [r6, #0]
}
 8007994:	bd70      	pop	{r4, r5, r6, pc}
 8007996:	bf00      	nop
 8007998:	24000048 	.word	0x24000048

0800799c <USBD_CDC_DataOut>:
{
 800799c:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800799e:	f8d0 32d4 	ldr.w	r3, [r0, #724]	; 0x2d4
 80079a2:	33b0      	adds	r3, #176	; 0xb0
 80079a4:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80079a8:	b195      	cbz	r5, 80079d0 <USBD_CDC_DataOut+0x34>
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80079aa:	4604      	mov	r4, r0
 80079ac:	f001 f9ec 	bl	8008d88 <USBD_LL_GetRxDataSize>
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80079b0:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 80079b4:	f8d4 32d4 	ldr.w	r3, [r4, #724]	; 0x2d4
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80079b8:	f8c5 020c 	str.w	r0, [r5, #524]	; 0x20c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80079bc:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 80079c0:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 80079c4:	f8d4 32c4 	ldr.w	r3, [r4, #708]	; 0x2c4
 80079c8:	68db      	ldr	r3, [r3, #12]
 80079ca:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 80079cc:	2000      	movs	r0, #0
}
 80079ce:	bd38      	pop	{r3, r4, r5, pc}
    return (uint8_t)USBD_FAIL;
 80079d0:	2003      	movs	r0, #3
}
 80079d2:	bd38      	pop	{r3, r4, r5, pc}

080079d4 <USBD_CDC_DataIn>:
{
 80079d4:	b570      	push	{r4, r5, r6, lr}
 80079d6:	f8d0 42d4 	ldr.w	r4, [r0, #724]	; 0x2d4
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80079da:	f8d0 62c8 	ldr.w	r6, [r0, #712]	; 0x2c8
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80079de:	eb00 0e84 	add.w	lr, r0, r4, lsl #2
 80079e2:	f8de 52c0 	ldr.w	r5, [lr, #704]	; 0x2c0
 80079e6:	b365      	cbz	r5, 8007a42 <USBD_CDC_DataIn+0x6e>
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80079e8:	f001 040f 	and.w	r4, r1, #15
 80079ec:	460a      	mov	r2, r1
 80079ee:	eb04 0c84 	add.w	ip, r4, r4, lsl #2
 80079f2:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 80079f6:	f8dc 3018 	ldr.w	r3, [ip, #24]
 80079fa:	b96b      	cbnz	r3, 8007a18 <USBD_CDC_DataIn+0x44>
    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80079fc:	f8de 32c4 	ldr.w	r3, [lr, #708]	; 0x2c4
    hcdc->TxState = 0U;
 8007a00:	2400      	movs	r4, #0
    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007a02:	691b      	ldr	r3, [r3, #16]
    hcdc->TxState = 0U;
 8007a04:	f8c5 4214 	str.w	r4, [r5, #532]	; 0x214
    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007a08:	b1cb      	cbz	r3, 8007a3e <USBD_CDC_DataIn+0x6a>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007a0a:	f505 7104 	add.w	r1, r5, #528	; 0x210
 8007a0e:	f8d5 0208 	ldr.w	r0, [r5, #520]	; 0x208
 8007a12:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 8007a14:	4620      	mov	r0, r4
}
 8007a16:	bd70      	pop	{r4, r5, r6, pc}
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007a18:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
 8007a1c:	eb06 0684 	add.w	r6, r6, r4, lsl #2
 8007a20:	6c74      	ldr	r4, [r6, #68]	; 0x44
 8007a22:	fbb3 f6f4 	udiv	r6, r3, r4
 8007a26:	fb04 3416 	mls	r4, r4, r6, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007a2a:	2c00      	cmp	r4, #0
 8007a2c:	d1e6      	bne.n	80079fc <USBD_CDC_DataIn+0x28>
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007a2e:	4623      	mov	r3, r4
 8007a30:	4622      	mov	r2, r4
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8007a32:	f8cc 4018 	str.w	r4, [ip, #24]
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007a36:	f001 f98b 	bl	8008d50 <USBD_LL_Transmit>
  return (uint8_t)USBD_OK;
 8007a3a:	4620      	mov	r0, r4
}
 8007a3c:	bd70      	pop	{r4, r5, r6, pc}
  return (uint8_t)USBD_OK;
 8007a3e:	4618      	mov	r0, r3
}
 8007a40:	bd70      	pop	{r4, r5, r6, pc}
    return (uint8_t)USBD_FAIL;
 8007a42:	2003      	movs	r0, #3
}
 8007a44:	bd70      	pop	{r4, r5, r6, pc}
 8007a46:	bf00      	nop

08007a48 <USBD_CDC_Setup>:
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007a48:	f8d0 32d4 	ldr.w	r3, [r0, #724]	; 0x2d4
 8007a4c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
{
 8007a50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a52:	4604      	mov	r4, r0
 8007a54:	b083      	sub	sp, #12
  uint8_t ifalt = 0U;
 8007a56:	2000      	movs	r0, #0
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007a58:	f8d3 72c0 	ldr.w	r7, [r3, #704]	; 0x2c0
  uint8_t ifalt = 0U;
 8007a5c:	f88d 0005 	strb.w	r0, [sp, #5]
  uint16_t status_info = 0U;
 8007a60:	f8ad 0006 	strh.w	r0, [sp, #6]
  if (hcdc == NULL)
 8007a64:	2f00      	cmp	r7, #0
 8007a66:	d066      	beq.n	8007b36 <USBD_CDC_Setup+0xee>
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007a68:	f891 c000 	ldrb.w	ip, [r1]
 8007a6c:	460d      	mov	r5, r1
 8007a6e:	f01c 0660 	ands.w	r6, ip, #96	; 0x60
 8007a72:	d01d      	beq.n	8007ab0 <USBD_CDC_Setup+0x68>
 8007a74:	2e20      	cmp	r6, #32
 8007a76:	d007      	beq.n	8007a88 <USBD_CDC_Setup+0x40>
          USBD_CtlError(pdev, req);
 8007a78:	4629      	mov	r1, r5
 8007a7a:	4620      	mov	r0, r4
          ret = USBD_FAIL;
 8007a7c:	2603      	movs	r6, #3
          USBD_CtlError(pdev, req);
 8007a7e:	f000 fe25 	bl	80086cc <USBD_CtlError>
}
 8007a82:	4630      	mov	r0, r6
 8007a84:	b003      	add	sp, #12
 8007a86:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (req->wLength != 0U)
 8007a88:	88ca      	ldrh	r2, [r1, #6]
 8007a8a:	b37a      	cbz	r2, 8007aec <USBD_CDC_Setup+0xa4>
        if ((req->bmRequest & 0x80U) != 0U)
 8007a8c:	f01c 0f80 	tst.w	ip, #128	; 0x80
 8007a90:	d155      	bne.n	8007b3e <USBD_CDC_Setup+0xf6>
          hcdc->CmdOpCode = req->bRequest;
 8007a92:	784b      	ldrb	r3, [r1, #1]
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007a94:	2a3f      	cmp	r2, #63	; 0x3f
          hcdc->CmdOpCode = req->bRequest;
 8007a96:	f887 3200 	strb.w	r3, [r7, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007a9a:	d960      	bls.n	8007b5e <USBD_CDC_Setup+0x116>
 8007a9c:	2340      	movs	r3, #64	; 0x40
 8007a9e:	461a      	mov	r2, r3
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007aa0:	4639      	mov	r1, r7
 8007aa2:	4620      	mov	r0, r4
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007aa4:	f887 3201 	strb.w	r3, [r7, #513]	; 0x201
  USBD_StatusTypeDef ret = USBD_OK;
 8007aa8:	2600      	movs	r6, #0
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007aaa:	f000 fe5d 	bl	8008768 <USBD_CtlPrepareRx>
 8007aae:	e7e8      	b.n	8007a82 <USBD_CDC_Setup+0x3a>
      switch (req->bRequest)
 8007ab0:	784b      	ldrb	r3, [r1, #1]
 8007ab2:	2b0b      	cmp	r3, #11
 8007ab4:	d8e0      	bhi.n	8007a78 <USBD_CDC_Setup+0x30>
 8007ab6:	a201      	add	r2, pc, #4	; (adr r2, 8007abc <USBD_CDC_Setup+0x74>)
 8007ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007abc:	08007b1f 	.word	0x08007b1f
 8007ac0:	08007a83 	.word	0x08007a83
 8007ac4:	08007a79 	.word	0x08007a79
 8007ac8:	08007a79 	.word	0x08007a79
 8007acc:	08007a79 	.word	0x08007a79
 8007ad0:	08007a79 	.word	0x08007a79
 8007ad4:	08007a79 	.word	0x08007a79
 8007ad8:	08007a79 	.word	0x08007a79
 8007adc:	08007a79 	.word	0x08007a79
 8007ae0:	08007a79 	.word	0x08007a79
 8007ae4:	08007b09 	.word	0x08007b09
 8007ae8:	08007aff 	.word	0x08007aff
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007aec:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
  USBD_StatusTypeDef ret = USBD_OK;
 8007af0:	4616      	mov	r6, r2
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007af2:	7848      	ldrb	r0, [r1, #1]
 8007af4:	689b      	ldr	r3, [r3, #8]
 8007af6:	4798      	blx	r3
}
 8007af8:	4630      	mov	r0, r6
 8007afa:	b003      	add	sp, #12
 8007afc:	bdf0      	pop	{r4, r5, r6, r7, pc}
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007afe:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8007b02:	2b03      	cmp	r3, #3
 8007b04:	d0bd      	beq.n	8007a82 <USBD_CDC_Setup+0x3a>
 8007b06:	e7b7      	b.n	8007a78 <USBD_CDC_Setup+0x30>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b08:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8007b0c:	2b03      	cmp	r3, #3
 8007b0e:	d1b3      	bne.n	8007a78 <USBD_CDC_Setup+0x30>
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007b10:	2201      	movs	r2, #1
 8007b12:	f10d 0105 	add.w	r1, sp, #5
 8007b16:	4620      	mov	r0, r4
 8007b18:	f000 fe0e 	bl	8008738 <USBD_CtlSendData>
 8007b1c:	e7b1      	b.n	8007a82 <USBD_CDC_Setup+0x3a>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b1e:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
 8007b22:	2a03      	cmp	r2, #3
 8007b24:	d1a8      	bne.n	8007a78 <USBD_CDC_Setup+0x30>
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007b26:	2202      	movs	r2, #2
 8007b28:	f10d 0106 	add.w	r1, sp, #6
 8007b2c:	4620      	mov	r0, r4
  USBD_StatusTypeDef ret = USBD_OK;
 8007b2e:	461e      	mov	r6, r3
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007b30:	f000 fe02 	bl	8008738 <USBD_CtlSendData>
 8007b34:	e7a5      	b.n	8007a82 <USBD_CDC_Setup+0x3a>
    return (uint8_t)USBD_FAIL;
 8007b36:	2603      	movs	r6, #3
}
 8007b38:	4630      	mov	r0, r6
 8007b3a:	b003      	add	sp, #12
 8007b3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007b3e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007b42:	4639      	mov	r1, r7
  USBD_StatusTypeDef ret = USBD_OK;
 8007b44:	4606      	mov	r6, r0
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007b46:	7868      	ldrb	r0, [r5, #1]
 8007b48:	689b      	ldr	r3, [r3, #8]
 8007b4a:	4798      	blx	r3
          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007b4c:	88ea      	ldrh	r2, [r5, #6]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007b4e:	4639      	mov	r1, r7
 8007b50:	4620      	mov	r0, r4
 8007b52:	2a07      	cmp	r2, #7
 8007b54:	bf28      	it	cs
 8007b56:	2207      	movcs	r2, #7
 8007b58:	f000 fdee 	bl	8008738 <USBD_CtlSendData>
 8007b5c:	e791      	b.n	8007a82 <USBD_CDC_Setup+0x3a>
 8007b5e:	b2d3      	uxtb	r3, r2
 8007b60:	e79e      	b.n	8007aa0 <USBD_CDC_Setup+0x58>
 8007b62:	bf00      	nop

08007b64 <USBD_CDC_DeInit>:
{
 8007b64:	b538      	push	{r3, r4, r5, lr}
 8007b66:	4604      	mov	r4, r0
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007b68:	2500      	movs	r5, #0
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007b6a:	2181      	movs	r1, #129	; 0x81
 8007b6c:	f001 f8a4 	bl	8008cb8 <USBD_LL_CloseEP>
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8007b70:	2101      	movs	r1, #1
 8007b72:	4620      	mov	r0, r4
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007b74:	8725      	strh	r5, [r4, #56]	; 0x38
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8007b76:	f001 f89f 	bl	8008cb8 <USBD_LL_CloseEP>
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8007b7a:	2182      	movs	r1, #130	; 0x82
 8007b7c:	4620      	mov	r0, r4
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8007b7e:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8007b82:	f001 f899 	bl	8008cb8 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007b86:	f8d4 32d4 	ldr.w	r3, [r4, #724]	; 0x2d4
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8007b8a:	64e5      	str	r5, [r4, #76]	; 0x4c
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007b8c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007b90:	f8d3 22c0 	ldr.w	r2, [r3, #704]	; 0x2c0
 8007b94:	b18a      	cbz	r2, 8007bba <USBD_CDC_DeInit+0x56>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007b96:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007b9a:	685b      	ldr	r3, [r3, #4]
 8007b9c:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007b9e:	f8d4 32d4 	ldr.w	r3, [r4, #724]	; 0x2d4
 8007ba2:	33b0      	adds	r3, #176	; 0xb0
 8007ba4:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 8007ba8:	f001 f8f6 	bl	8008d98 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007bac:	f8d4 32d4 	ldr.w	r3, [r4, #724]	; 0x2d4
 8007bb0:	33b0      	adds	r3, #176	; 0xb0
 8007bb2:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
    pdev->pClassData = NULL;
 8007bb6:	f8c4 52bc 	str.w	r5, [r4, #700]	; 0x2bc
}
 8007bba:	2000      	movs	r0, #0
 8007bbc:	bd38      	pop	{r3, r4, r5, pc}
 8007bbe:	bf00      	nop

08007bc0 <USBD_CDC_Init>:
{
 8007bc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bc4:	4604      	mov	r4, r0
  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007bc6:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007bca:	f001 f8e1 	bl	8008d90 <USBD_static_malloc>
  if (hcdc == NULL)
 8007bce:	4605      	mov	r5, r0
 8007bd0:	2800      	cmp	r0, #0
 8007bd2:	d061      	beq.n	8007c98 <USBD_CDC_Init+0xd8>
  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007bd4:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8007bd8:	2100      	movs	r1, #0
 8007bda:	f003 fc8a 	bl	800b4f2 <memset>
  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007bde:	f8d4 32d4 	ldr.w	r3, [r4, #724]	; 0x2d4
 8007be2:	33b0      	adds	r3, #176	; 0xb0
 8007be4:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007be8:	7c23      	ldrb	r3, [r4, #16]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007bea:	f8c4 52bc 	str.w	r5, [r4, #700]	; 0x2bc
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007bee:	b3d3      	cbz	r3, 8007c66 <USBD_CDC_Init+0xa6>
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007bf0:	2340      	movs	r3, #64	; 0x40
 8007bf2:	2202      	movs	r2, #2
 8007bf4:	2181      	movs	r1, #129	; 0x81
 8007bf6:	4620      	mov	r0, r4
 8007bf8:	f001 f84c 	bl	8008c94 <USBD_LL_OpenEP>
    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007bfc:	2101      	movs	r1, #1
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007bfe:	2340      	movs	r3, #64	; 0x40
 8007c00:	2202      	movs	r2, #2
 8007c02:	4620      	mov	r0, r4
    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007c04:	8721      	strh	r1, [r4, #56]	; 0x38
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007c06:	f001 f845 	bl	8008c94 <USBD_LL_OpenEP>
    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007c0a:	2701      	movs	r7, #1
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007c0c:	2210      	movs	r2, #16
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007c0e:	2308      	movs	r3, #8
 8007c10:	2182      	movs	r1, #130	; 0x82
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007c12:	f8a4 204e 	strh.w	r2, [r4, #78]	; 0x4e
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007c16:	4620      	mov	r0, r4
 8007c18:	2203      	movs	r2, #3
    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007c1a:	f8a4 7178 	strh.w	r7, [r4, #376]	; 0x178
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007c1e:	f001 f839 	bl	8008c94 <USBD_LL_OpenEP>
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007c22:	f8d4 32d4 	ldr.w	r3, [r4, #724]	; 0x2d4
  hcdc->RxBuffer = NULL;
 8007c26:	2600      	movs	r6, #0
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007c28:	f8a4 704c 	strh.w	r7, [r4, #76]	; 0x4c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007c2c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
  hcdc->RxBuffer = NULL;
 8007c30:	f8c5 6204 	str.w	r6, [r5, #516]	; 0x204
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007c34:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	4798      	blx	r3
  if (hcdc->RxBuffer == NULL)
 8007c3c:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
  hcdc->TxState = 0U;
 8007c40:	f8c5 6214 	str.w	r6, [r5, #532]	; 0x214
  hcdc->RxState = 0U;
 8007c44:	f8c5 6218 	str.w	r6, [r5, #536]	; 0x218
  if (hcdc->RxBuffer == NULL)
 8007c48:	b382      	cbz	r2, 8007cac <USBD_CDC_Init+0xec>
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c4a:	f894 8010 	ldrb.w	r8, [r4, #16]
 8007c4e:	f1b8 0f00 	cmp.w	r8, #0
 8007c52:	d118      	bne.n	8007c86 <USBD_CDC_Init+0xc6>
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007c54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007c58:	4639      	mov	r1, r7
 8007c5a:	4620      	mov	r0, r4
 8007c5c:	f001 f886 	bl	8008d6c <USBD_LL_PrepareReceive>
}
 8007c60:	4640      	mov	r0, r8
 8007c62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007c66:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007c6a:	2202      	movs	r2, #2
 8007c6c:	2181      	movs	r1, #129	; 0x81
 8007c6e:	4620      	mov	r0, r4
 8007c70:	f001 f810 	bl	8008c94 <USBD_LL_OpenEP>
    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007c74:	2101      	movs	r1, #1
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007c76:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007c7a:	2202      	movs	r2, #2
 8007c7c:	4620      	mov	r0, r4
    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007c7e:	8721      	strh	r1, [r4, #56]	; 0x38
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007c80:	f001 f808 	bl	8008c94 <USBD_LL_OpenEP>
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007c84:	e7c1      	b.n	8007c0a <USBD_CDC_Init+0x4a>
  return (uint8_t)USBD_OK;
 8007c86:	46b0      	mov	r8, r6
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007c88:	2340      	movs	r3, #64	; 0x40
 8007c8a:	4639      	mov	r1, r7
 8007c8c:	4620      	mov	r0, r4
 8007c8e:	f001 f86d 	bl	8008d6c <USBD_LL_PrepareReceive>
}
 8007c92:	4640      	mov	r0, r8
 8007c94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007c98:	f8d4 32d4 	ldr.w	r3, [r4, #724]	; 0x2d4
    return (uint8_t)USBD_EMEM;
 8007c9c:	f04f 0802 	mov.w	r8, #2
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007ca0:	33b0      	adds	r3, #176	; 0xb0
 8007ca2:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
}
 8007ca6:	4640      	mov	r0, r8
 8007ca8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return (uint8_t)USBD_EMEM;
 8007cac:	f04f 0802 	mov.w	r8, #2
 8007cb0:	e7d6      	b.n	8007c60 <USBD_CDC_Init+0xa0>
 8007cb2:	bf00      	nop

08007cb4 <USBD_CDC_GetOtherSpeedCfgDesc>:
 8007cb4:	b570      	push	{r4, r5, r6, lr}
 8007cb6:	2182      	movs	r1, #130	; 0x82
 8007cb8:	4606      	mov	r6, r0
 8007cba:	480f      	ldr	r0, [pc, #60]	; (8007cf8 <USBD_CDC_GetOtherSpeedCfgDesc+0x44>)
 8007cbc:	f000 fa2e 	bl	800811c <USBD_GetEpDesc>
 8007cc0:	2101      	movs	r1, #1
 8007cc2:	4605      	mov	r5, r0
 8007cc4:	480c      	ldr	r0, [pc, #48]	; (8007cf8 <USBD_CDC_GetOtherSpeedCfgDesc+0x44>)
 8007cc6:	f000 fa29 	bl	800811c <USBD_GetEpDesc>
 8007cca:	2181      	movs	r1, #129	; 0x81
 8007ccc:	4604      	mov	r4, r0
 8007cce:	480a      	ldr	r0, [pc, #40]	; (8007cf8 <USBD_CDC_GetOtherSpeedCfgDesc+0x44>)
 8007cd0:	f000 fa24 	bl	800811c <USBD_GetEpDesc>
 8007cd4:	b10d      	cbz	r5, 8007cda <USBD_CDC_GetOtherSpeedCfgDesc+0x26>
 8007cd6:	2210      	movs	r2, #16
 8007cd8:	71aa      	strb	r2, [r5, #6]
 8007cda:	b11c      	cbz	r4, 8007ce4 <USBD_CDC_GetOtherSpeedCfgDesc+0x30>
 8007cdc:	2100      	movs	r1, #0
 8007cde:	2240      	movs	r2, #64	; 0x40
 8007ce0:	7161      	strb	r1, [r4, #5]
 8007ce2:	7122      	strb	r2, [r4, #4]
 8007ce4:	b118      	cbz	r0, 8007cee <USBD_CDC_GetOtherSpeedCfgDesc+0x3a>
 8007ce6:	2100      	movs	r1, #0
 8007ce8:	2240      	movs	r2, #64	; 0x40
 8007cea:	7141      	strb	r1, [r0, #5]
 8007cec:	7102      	strb	r2, [r0, #4]
 8007cee:	2343      	movs	r3, #67	; 0x43
 8007cf0:	4801      	ldr	r0, [pc, #4]	; (8007cf8 <USBD_CDC_GetOtherSpeedCfgDesc+0x44>)
 8007cf2:	8033      	strh	r3, [r6, #0]
 8007cf4:	bd70      	pop	{r4, r5, r6, pc}
 8007cf6:	bf00      	nop
 8007cf8:	24000048 	.word	0x24000048

08007cfc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007cfc:	4603      	mov	r3, r0
  if (fops == NULL)
 8007cfe:	b139      	cbz	r1, 8007d10 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
  }

  pdev->pUserData[pdev->classId] = fops;
 8007d00:	f8d0 22d4 	ldr.w	r2, [r0, #724]	; 0x2d4

  return (uint8_t)USBD_OK;
 8007d04:	2000      	movs	r0, #0
  pdev->pUserData[pdev->classId] = fops;
 8007d06:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8007d0a:	f8c3 12c4 	str.w	r1, [r3, #708]	; 0x2c4
  return (uint8_t)USBD_OK;
 8007d0e:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 8007d10:	2003      	movs	r0, #3
}
 8007d12:	4770      	bx	lr

08007d14 <USBD_CDC_SetTxBuffer>:
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007d14:	f8d0 32d4 	ldr.w	r3, [r0, #724]	; 0x2d4
 8007d18:	33b0      	adds	r3, #176	; 0xb0
 8007d1a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007d1e:	b12b      	cbz	r3, 8007d2c <USBD_CDC_SetTxBuffer+0x18>
  }

  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;

  return (uint8_t)USBD_OK;
 8007d20:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 8007d22:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007d26:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  return (uint8_t)USBD_OK;
 8007d2a:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 8007d2c:	2003      	movs	r0, #3
}
 8007d2e:	4770      	bx	lr

08007d30 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007d30:	f8d0 32d4 	ldr.w	r3, [r0, #724]	; 0x2d4
 8007d34:	33b0      	adds	r3, #176	; 0xb0
 8007d36:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]

  if (hcdc == NULL)
 8007d3a:	b11b      	cbz	r3, 8007d44 <USBD_CDC_SetRxBuffer+0x14>
    return (uint8_t)USBD_FAIL;
  }

  hcdc->RxBuffer = pbuff;

  return (uint8_t)USBD_OK;
 8007d3c:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 8007d3e:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
  return (uint8_t)USBD_OK;
 8007d42:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 8007d44:	2003      	movs	r0, #3
}
 8007d46:	4770      	bx	lr

08007d48 <USBD_CDC_TransmitPacket>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007d48:	f8d0 32d4 	ldr.w	r3, [r0, #724]	; 0x2d4
 8007d4c:	33b0      	adds	r3, #176	; 0xb0
 8007d4e:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007d52:	b192      	cbz	r2, 8007d7a <USBD_CDC_TransmitPacket+0x32>
{
 8007d54:	b510      	push	{r4, lr}
  {
    return (uint8_t)USBD_FAIL;
  }

  if (hcdc->TxState == 0U)
 8007d56:	f8d2 4214 	ldr.w	r4, [r2, #532]	; 0x214
 8007d5a:	b10c      	cbz	r4, 8007d60 <USBD_CDC_TransmitPacket+0x18>
  USBD_StatusTypeDef ret = USBD_BUSY;
 8007d5c:	2001      	movs	r0, #1

    ret = USBD_OK;
  }

  return (uint8_t)ret;
}
 8007d5e:	bd10      	pop	{r4, pc}
    hcdc->TxState = 1U;
 8007d60:	2301      	movs	r3, #1
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8007d62:	2181      	movs	r1, #129	; 0x81
    hcdc->TxState = 1U;
 8007d64:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8007d68:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8007d6c:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8007d70:	62c3      	str	r3, [r0, #44]	; 0x2c
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8007d72:	f000 ffed 	bl	8008d50 <USBD_LL_Transmit>
    ret = USBD_OK;
 8007d76:	4620      	mov	r0, r4
}
 8007d78:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 8007d7a:	2003      	movs	r0, #3
}
 8007d7c:	4770      	bx	lr
 8007d7e:	bf00      	nop

08007d80 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007d80:	f8d0 22d4 	ldr.w	r2, [r0, #724]	; 0x2d4
 8007d84:	32b0      	adds	r2, #176	; 0xb0
 8007d86:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
{
 8007d8a:	b510      	push	{r4, lr}
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007d8c:	b19a      	cbz	r2, 8007db6 <USBD_CDC_ReceivePacket+0x36>
  {
    return (uint8_t)USBD_FAIL;
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d8e:	7c04      	ldrb	r4, [r0, #16]
 8007d90:	b144      	cbz	r4, 8007da4 <USBD_CDC_ReceivePacket+0x24>
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007d92:	2400      	movs	r4, #0
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007d94:	2340      	movs	r3, #64	; 0x40
 8007d96:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8007d9a:	2101      	movs	r1, #1
 8007d9c:	f000 ffe6 	bl	8008d6c <USBD_LL_PrepareReceive>
}
 8007da0:	4620      	mov	r0, r4
 8007da2:	bd10      	pop	{r4, pc}
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007da4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007da8:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8007dac:	2101      	movs	r1, #1
 8007dae:	f000 ffdd 	bl	8008d6c <USBD_LL_PrepareReceive>
}
 8007db2:	4620      	mov	r0, r4
 8007db4:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 8007db6:	2403      	movs	r4, #3
}
 8007db8:	4620      	mov	r0, r4
 8007dba:	bd10      	pop	{r4, pc}

08007dbc <USBD_Init>:
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007dbc:	b178      	cbz	r0, 8007dde <USBD_Init+0x22>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	f8c0 32b8 	str.w	r3, [r0, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8007dc4:	f8c0 32c4 	str.w	r3, [r0, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007dc8:	f8c0 32d0 	str.w	r3, [r0, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007dcc:	b109      	cbz	r1, 8007dd2 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 8007dce:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007dd2:	2301      	movs	r3, #1
  pdev->id = id;
 8007dd4:	7002      	strb	r2, [r0, #0]
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007dd6:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007dda:	f000 bf09 	b.w	8008bf0 <USBD_LL_Init>

  return ret;
}
 8007dde:	2003      	movs	r0, #3
 8007de0:	4770      	bx	lr
 8007de2:	bf00      	nop

08007de4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007de4:	b510      	push	{r4, lr}
  uint16_t len = 0U;
 8007de6:	2300      	movs	r3, #0
{
 8007de8:	b082      	sub	sp, #8
  uint16_t len = 0U;
 8007dea:	f8ad 3006 	strh.w	r3, [sp, #6]

  if (pclass == NULL)
 8007dee:	b189      	cbz	r1, 8007e14 <USBD_RegisterClass+0x30>
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007df0:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8007df2:	4604      	mov	r4, r0
  pdev->pClass[0] = pclass;
 8007df4:	f8c0 12b8 	str.w	r1, [r0, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007df8:	b123      	cbz	r3, 8007e04 <USBD_RegisterClass+0x20>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007dfa:	f10d 0006 	add.w	r0, sp, #6
 8007dfe:	4798      	blx	r3
 8007e00:	f8c4 02d0 	str.w	r0, [r4, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007e04:	f8d4 32d8 	ldr.w	r3, [r4, #728]	; 0x2d8

  return USBD_OK;
 8007e08:	2000      	movs	r0, #0
  pdev->NumClasses ++;
 8007e0a:	3301      	adds	r3, #1
 8007e0c:	f8c4 32d8 	str.w	r3, [r4, #728]	; 0x2d8
}
 8007e10:	b002      	add	sp, #8
 8007e12:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 8007e14:	2003      	movs	r0, #3
}
 8007e16:	b002      	add	sp, #8
 8007e18:	bd10      	pop	{r4, pc}
 8007e1a:	bf00      	nop

08007e1c <USBD_Start>:
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007e1c:	f000 bf2c 	b.w	8008c78 <USBD_LL_Start>

08007e20 <USBD_SetClassConfig>:
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007e20:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8007e24:	b10b      	cbz	r3, 8007e2a <USBD_SetClassConfig+0xa>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	4718      	bx	r3
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	4770      	bx	lr
 8007e2e:	bf00      	nop

08007e30 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007e30:	b508      	push	{r3, lr}
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007e32:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8007e36:	685b      	ldr	r3, [r3, #4]
 8007e38:	4798      	blx	r3
  {
    ret = USBD_FAIL;
 8007e3a:	2800      	cmp	r0, #0
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 8007e3c:	bf18      	it	ne
 8007e3e:	2003      	movne	r0, #3
 8007e40:	bd08      	pop	{r3, pc}
 8007e42:	bf00      	nop

08007e44 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007e44:	b538      	push	{r3, r4, r5, lr}
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007e46:	f200 25aa 	addw	r5, r0, #682	; 0x2aa
{
 8007e4a:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007e4c:	4628      	mov	r0, r5
 8007e4e:	f000 fc31 	bl	80086b4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;

  pdev->ep0_data_len = pdev->request.wLength;
 8007e52:	f8b4 32b0 	ldrh.w	r3, [r4, #688]	; 0x2b0

  switch (pdev->request.bmRequest & 0x1FU)
 8007e56:	f894 12aa 	ldrb.w	r1, [r4, #682]	; 0x2aa
  pdev->ep0_state = USBD_EP0_SETUP;
 8007e5a:	2201      	movs	r2, #1
  pdev->ep0_data_len = pdev->request.wLength;
 8007e5c:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
 8007e60:	f001 031f 	and.w	r3, r1, #31
  pdev->ep0_state = USBD_EP0_SETUP;
 8007e64:	f8c4 2294 	str.w	r2, [r4, #660]	; 0x294
  switch (pdev->request.bmRequest & 0x1FU)
 8007e68:	4293      	cmp	r3, r2
 8007e6a:	d009      	beq.n	8007e80 <USBD_LL_SetupStage+0x3c>
 8007e6c:	2b02      	cmp	r3, #2
 8007e6e:	d013      	beq.n	8007e98 <USBD_LL_SetupStage+0x54>
 8007e70:	b163      	cbz	r3, 8007e8c <USBD_LL_SetupStage+0x48>
    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007e72:	4620      	mov	r0, r4
 8007e74:	f001 0180 	and.w	r1, r1, #128	; 0x80
      break;
  }

  return ret;
}
 8007e78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007e7c:	f000 bf2a 	b.w	8008cd4 <USBD_LL_StallEP>
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007e80:	4629      	mov	r1, r5
 8007e82:	4620      	mov	r0, r4
}
 8007e84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007e88:	f000 bb24 	b.w	80084d4 <USBD_StdItfReq>
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007e8c:	4629      	mov	r1, r5
 8007e8e:	4620      	mov	r0, r4
}
 8007e90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007e94:	f000 b958 	b.w	8008148 <USBD_StdDevReq>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007e98:	4629      	mov	r1, r5
 8007e9a:	4620      	mov	r0, r4
}
 8007e9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007ea0:	f000 bb5a 	b.w	8008558 <USBD_StdEPReq>

08007ea4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007ea4:	b570      	push	{r4, r5, r6, lr}
 8007ea6:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
  uint8_t idx;

  if (epnum == 0U)
 8007ea8:	b931      	cbnz	r1, 8007eb8 <USBD_LL_DataOutStage+0x14>
 8007eaa:	460b      	mov	r3, r1
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007eac:	f8d0 1294 	ldr.w	r1, [r0, #660]	; 0x294
 8007eb0:	2903      	cmp	r1, #3
 8007eb2:	d010      	beq.n	8007ed6 <USBD_LL_DataOutStage+0x32>
      }
    }
  }

  return USBD_OK;
}
 8007eb4:	2000      	movs	r0, #0
 8007eb6:	bd70      	pop	{r4, r5, r6, pc}
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007eb8:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8007ebc:	2b03      	cmp	r3, #3
 8007ebe:	d1f9      	bne.n	8007eb4 <USBD_LL_DataOutStage+0x10>
        if (pdev->pClass[idx]->DataOut != NULL)
 8007ec0:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8007ec4:	699b      	ldr	r3, [r3, #24]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d0f4      	beq.n	8007eb4 <USBD_LL_DataOutStage+0x10>
          pdev->classId = idx;
 8007eca:	2200      	movs	r2, #0
}
 8007ecc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
          pdev->classId = idx;
 8007ed0:	f8c0 22d4 	str.w	r2, [r0, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007ed4:	4718      	bx	r3
      if (pep->rem_length > pep->maxpacket)
 8007ed6:	e9d0 1557 	ldrd	r1, r5, [r0, #348]	; 0x15c
 8007eda:	42a9      	cmp	r1, r5
 8007edc:	d808      	bhi.n	8007ef0 <USBD_LL_DataOutStage+0x4c>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ede:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8007ee2:	2a03      	cmp	r2, #3
 8007ee4:	d00f      	beq.n	8007f06 <USBD_LL_DataOutStage+0x62>
        (void)USBD_CtlSendStatus(pdev);
 8007ee6:	4620      	mov	r0, r4
 8007ee8:	f000 fc56 	bl	8008798 <USBD_CtlSendStatus>
}
 8007eec:	2000      	movs	r0, #0
 8007eee:	bd70      	pop	{r4, r5, r6, pc}
        pep->rem_length -= pep->maxpacket;
 8007ef0:	1b4b      	subs	r3, r1, r5
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007ef2:	4611      	mov	r1, r2
 8007ef4:	462a      	mov	r2, r5
 8007ef6:	429d      	cmp	r5, r3
        pep->rem_length -= pep->maxpacket;
 8007ef8:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007efc:	bf28      	it	cs
 8007efe:	461a      	movcs	r2, r3
 8007f00:	f000 fc40 	bl	8008784 <USBD_CtlContinueRx>
 8007f04:	e7d6      	b.n	8007eb4 <USBD_LL_DataOutStage+0x10>
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007f06:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
 8007f0a:	6912      	ldr	r2, [r2, #16]
 8007f0c:	2a00      	cmp	r2, #0
 8007f0e:	d0ea      	beq.n	8007ee6 <USBD_LL_DataOutStage+0x42>
              pdev->classId = idx;
 8007f10:	f8c0 32d4 	str.w	r3, [r0, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007f14:	4790      	blx	r2
 8007f16:	e7e6      	b.n	8007ee6 <USBD_LL_DataOutStage+0x42>

08007f18 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007f18:	b570      	push	{r4, r5, r6, lr}
 8007f1a:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007f1c:	b959      	cbnz	r1, 8007f36 <USBD_LL_DataInStage+0x1e>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007f1e:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 8007f22:	2b02      	cmp	r3, #2
 8007f24:	d016      	beq.n	8007f54 <USBD_LL_DataInStage+0x3c>
          (void)USBD_CtlReceiveStatus(pdev);
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8007f26:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 8007f2a:	b113      	cbz	r3, 8007f32 <USBD_LL_DataInStage+0x1a>
    {
      (void)USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
      }
    }
  }

  return USBD_OK;
}
 8007f32:	2000      	movs	r0, #0
 8007f34:	bd70      	pop	{r4, r5, r6, pc}
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f36:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8007f3a:	2b03      	cmp	r3, #3
 8007f3c:	d1f9      	bne.n	8007f32 <USBD_LL_DataInStage+0x1a>
        if (pdev->pClass[idx]->DataIn != NULL)
 8007f3e:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8007f42:	695b      	ldr	r3, [r3, #20]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d0f4      	beq.n	8007f32 <USBD_LL_DataInStage+0x1a>
          pdev->classId = idx;
 8007f48:	2200      	movs	r2, #0
}
 8007f4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
          pdev->classId = idx;
 8007f4e:	f8c0 22d4 	str.w	r2, [r0, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007f52:	4718      	bx	r3
      if (pep->rem_length > pep->maxpacket)
 8007f54:	e9d0 3607 	ldrd	r3, r6, [r0, #28]
 8007f58:	460d      	mov	r5, r1
 8007f5a:	42b3      	cmp	r3, r6
 8007f5c:	d810      	bhi.n	8007f80 <USBD_LL_DataInStage+0x68>
        if ((pep->maxpacket == pep->rem_length) &&
 8007f5e:	d01c      	beq.n	8007f9a <USBD_LL_DataInStage+0x82>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f60:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8007f64:	2b03      	cmp	r3, #3
 8007f66:	d02b      	beq.n	8007fc0 <USBD_LL_DataInStage+0xa8>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007f68:	2180      	movs	r1, #128	; 0x80
 8007f6a:	4620      	mov	r0, r4
 8007f6c:	f000 feb2 	bl	8008cd4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007f70:	4620      	mov	r0, r4
 8007f72:	f000 fc1d 	bl	80087b0 <USBD_CtlReceiveStatus>
    if (pdev->dev_test_mode != 0U)
 8007f76:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d0d9      	beq.n	8007f32 <USBD_LL_DataInStage+0x1a>
 8007f7e:	e7d5      	b.n	8007f2c <USBD_LL_DataInStage+0x14>
        pep->rem_length -= pep->maxpacket;
 8007f80:	1b9b      	subs	r3, r3, r6
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007f82:	4611      	mov	r1, r2
        pep->rem_length -= pep->maxpacket;
 8007f84:	61c3      	str	r3, [r0, #28]
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007f86:	461a      	mov	r2, r3
 8007f88:	f000 fbe4 	bl	8008754 <USBD_CtlContinueSendData>
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007f8c:	462b      	mov	r3, r5
 8007f8e:	462a      	mov	r2, r5
 8007f90:	4629      	mov	r1, r5
 8007f92:	4620      	mov	r0, r4
 8007f94:	f000 feea 	bl	8008d6c <USBD_LL_PrepareReceive>
 8007f98:	e7c5      	b.n	8007f26 <USBD_LL_DataInStage+0xe>
            (pep->total_length >= pep->maxpacket) &&
 8007f9a:	6982      	ldr	r2, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 8007f9c:	4293      	cmp	r3, r2
 8007f9e:	d8df      	bhi.n	8007f60 <USBD_LL_DataInStage+0x48>
            (pep->total_length >= pep->maxpacket) &&
 8007fa0:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
 8007fa4:	429a      	cmp	r2, r3
 8007fa6:	d2db      	bcs.n	8007f60 <USBD_LL_DataInStage+0x48>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007fa8:	460a      	mov	r2, r1
 8007faa:	f000 fbd3 	bl	8008754 <USBD_CtlContinueSendData>
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007fae:	462b      	mov	r3, r5
 8007fb0:	462a      	mov	r2, r5
 8007fb2:	4629      	mov	r1, r5
 8007fb4:	4620      	mov	r0, r4
          pdev->ep0_data_len = 0U;
 8007fb6:	f8c4 5298 	str.w	r5, [r4, #664]	; 0x298
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007fba:	f000 fed7 	bl	8008d6c <USBD_LL_PrepareReceive>
 8007fbe:	e7b2      	b.n	8007f26 <USBD_LL_DataInStage+0xe>
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007fc0:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8007fc4:	68db      	ldr	r3, [r3, #12]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d0ce      	beq.n	8007f68 <USBD_LL_DataInStage+0x50>
              pdev->classId = 0U;
 8007fca:	2200      	movs	r2, #0
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007fcc:	4620      	mov	r0, r4
              pdev->classId = 0U;
 8007fce:	f8c4 22d4 	str.w	r2, [r4, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007fd2:	4798      	blx	r3
 8007fd4:	e7c8      	b.n	8007f68 <USBD_LL_DataInStage+0x50>
 8007fd6:	bf00      	nop

08007fd8 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBD_StatusTypeDef ret = USBD_OK;

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
 8007fda:	2100      	movs	r1, #0
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007fdc:	2201      	movs	r2, #1
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007fde:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
{
 8007fe2:	4604      	mov	r4, r0
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007fe4:	f880 229c 	strb.w	r2, [r0, #668]	; 0x29c
  pdev->dev_config = 0U;
 8007fe8:	6041      	str	r1, [r0, #4]
  pdev->ep0_state = USBD_EP0_IDLE;
 8007fea:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
  pdev->dev_remote_wakeup = 0U;
 8007fee:	f8c0 12a4 	str.w	r1, [r0, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8007ff2:	f880 12a0 	strb.w	r1, [r0, #672]	; 0x2a0
  if (pdev->pClass[0] != NULL)
 8007ff6:	b11b      	cbz	r3, 8008000 <USBD_LL_Reset+0x28>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007ff8:	685b      	ldr	r3, [r3, #4]
 8007ffa:	b10b      	cbz	r3, 8008000 <USBD_LL_Reset+0x28>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007ffc:	4798      	blx	r3
 8007ffe:	b9b0      	cbnz	r0, 800802e <USBD_LL_Reset+0x56>
  USBD_StatusTypeDef ret = USBD_OK;
 8008000:	2700      	movs	r7, #0
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008002:	2340      	movs	r3, #64	; 0x40
 8008004:	2200      	movs	r2, #0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008006:	2601      	movs	r6, #1
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008008:	4620      	mov	r0, r4

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800800a:	461d      	mov	r5, r3
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800800c:	4611      	mov	r1, r2
 800800e:	f000 fe41 	bl	8008c94 <USBD_LL_OpenEP>

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008012:	2200      	movs	r2, #0
 8008014:	462b      	mov	r3, r5
 8008016:	2180      	movs	r1, #128	; 0x80
 8008018:	4620      	mov	r0, r4
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800801a:	f8a4 6164 	strh.w	r6, [r4, #356]	; 0x164
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800801e:	f8c4 5160 	str.w	r5, [r4, #352]	; 0x160
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008022:	f000 fe37 	bl	8008c94 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;

  return ret;
}
 8008026:	4638      	mov	r0, r7
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008028:	84a6      	strh	r6, [r4, #36]	; 0x24
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800802a:	6225      	str	r5, [r4, #32]
}
 800802c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ret = USBD_FAIL;
 800802e:	2703      	movs	r7, #3
 8008030:	e7e7      	b.n	8008002 <USBD_LL_Reset+0x2a>
 8008032:	bf00      	nop

08008034 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008034:	4603      	mov	r3, r0
  pdev->dev_speed = speed;

  return USBD_OK;
}
 8008036:	2000      	movs	r0, #0
  pdev->dev_speed = speed;
 8008038:	7419      	strb	r1, [r3, #16]
}
 800803a:	4770      	bx	lr

0800803c <USBD_LL_Suspend>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800803c:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
{
 8008040:	4603      	mov	r3, r0
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8008042:	2a04      	cmp	r2, #4
 8008044:	d004      	beq.n	8008050 <USBD_LL_Suspend+0x14>
  {
    pdev->dev_old_state = pdev->dev_state;
 8008046:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800804a:	b2d2      	uxtb	r2, r2
 800804c:	f880 229d 	strb.w	r2, [r0, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008050:	2204      	movs	r2, #4

  return USBD_OK;
}
 8008052:	2000      	movs	r0, #0
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008054:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
}
 8008058:	4770      	bx	lr
 800805a:	bf00      	nop

0800805c <USBD_LL_Resume>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800805c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8008060:	2b04      	cmp	r3, #4
 8008062:	d104      	bne.n	800806e <USBD_LL_Resume+0x12>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008064:	f890 329d 	ldrb.w	r3, [r0, #669]	; 0x29d
 8008068:	b2db      	uxtb	r3, r3
 800806a:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 800806e:	2000      	movs	r0, #0
 8008070:	4770      	bx	lr
 8008072:	bf00      	nop

08008074 <USBD_LL_SOF>:
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008074:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8008078:	2a03      	cmp	r2, #3
 800807a:	d001      	beq.n	8008080 <USBD_LL_SOF+0xc>
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
}
 800807c:	2000      	movs	r0, #0
 800807e:	4770      	bx	lr
{
 8008080:	b508      	push	{r3, lr}
    if (pdev->pClass[0] != NULL)
 8008082:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8008086:	b113      	cbz	r3, 800808e <USBD_LL_SOF+0x1a>
      if (pdev->pClass[0]->SOF != NULL)
 8008088:	69db      	ldr	r3, [r3, #28]
 800808a:	b103      	cbz	r3, 800808e <USBD_LL_SOF+0x1a>
        (void)pdev->pClass[0]->SOF(pdev);
 800808c:	4798      	blx	r3
}
 800808e:	2000      	movs	r0, #0
 8008090:	bd08      	pop	{r3, pc}
 8008092:	bf00      	nop

08008094 <USBD_LL_IsoINIncomplete>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
  if (pdev->pClass[pdev->classId] == NULL)
 8008094:	f8d0 22d4 	ldr.w	r2, [r0, #724]	; 0x2d4
 8008098:	32ae      	adds	r2, #174	; 0xae
 800809a:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 800809e:	b15a      	cbz	r2, 80080b8 <USBD_LL_IsoINIncomplete+0x24>
{
 80080a0:	b508      	push	{r3, lr}
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080a2:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80080a6:	2b03      	cmp	r3, #3
 80080a8:	d001      	beq.n	80080ae <USBD_LL_IsoINIncomplete+0x1a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 80080aa:	2000      	movs	r0, #0
}
 80080ac:	bd08      	pop	{r3, pc}
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80080ae:	6a13      	ldr	r3, [r2, #32]
 80080b0:	b123      	cbz	r3, 80080bc <USBD_LL_IsoINIncomplete+0x28>
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80080b2:	4798      	blx	r3
  return USBD_OK;
 80080b4:	2000      	movs	r0, #0
}
 80080b6:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 80080b8:	2003      	movs	r0, #3
}
 80080ba:	4770      	bx	lr
  return USBD_OK;
 80080bc:	4618      	mov	r0, r3
}
 80080be:	bd08      	pop	{r3, pc}

080080c0 <USBD_LL_IsoOUTIncomplete>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
  if (pdev->pClass[pdev->classId] == NULL)
 80080c0:	f8d0 22d4 	ldr.w	r2, [r0, #724]	; 0x2d4
 80080c4:	32ae      	adds	r2, #174	; 0xae
 80080c6:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 80080ca:	b15a      	cbz	r2, 80080e4 <USBD_LL_IsoOUTIncomplete+0x24>
{
 80080cc:	b508      	push	{r3, lr}
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080ce:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80080d2:	2b03      	cmp	r3, #3
 80080d4:	d001      	beq.n	80080da <USBD_LL_IsoOUTIncomplete+0x1a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 80080d6:	2000      	movs	r0, #0
}
 80080d8:	bd08      	pop	{r3, pc}
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80080da:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80080dc:	b123      	cbz	r3, 80080e8 <USBD_LL_IsoOUTIncomplete+0x28>
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80080de:	4798      	blx	r3
  return USBD_OK;
 80080e0:	2000      	movs	r0, #0
}
 80080e2:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 80080e4:	2003      	movs	r0, #3
}
 80080e6:	4770      	bx	lr
  return USBD_OK;
 80080e8:	4618      	mov	r0, r3
}
 80080ea:	bd08      	pop	{r3, pc}

080080ec <USBD_LL_DevConnected>:
 80080ec:	2000      	movs	r0, #0
 80080ee:	4770      	bx	lr

080080f0 <USBD_LL_DevDisconnected>:
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
  USBD_StatusTypeDef   ret = USBD_OK;

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80080f0:	2101      	movs	r1, #1
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80080f2:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
  pdev->dev_state = USBD_STATE_DEFAULT;
 80080f6:	f880 129c 	strb.w	r1, [r0, #668]	; 0x29c
  if (pdev->pClass[0] != NULL)
 80080fa:	b142      	cbz	r2, 800810e <USBD_LL_DevDisconnected+0x1e>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80080fc:	6852      	ldr	r2, [r2, #4]
 80080fe:	7901      	ldrb	r1, [r0, #4]
{
 8008100:	b508      	push	{r3, lr}
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008102:	4790      	blx	r2
 8008104:	b908      	cbnz	r0, 800810a <USBD_LL_DevDisconnected+0x1a>
  USBD_StatusTypeDef   ret = USBD_OK;
 8008106:	2000      	movs	r0, #0
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 8008108:	bd08      	pop	{r3, pc}
      ret = USBD_FAIL;
 800810a:	2003      	movs	r0, #3
}
 800810c:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef   ret = USBD_OK;
 800810e:	2000      	movs	r0, #0
}
 8008110:	4770      	bx	lr
 8008112:	bf00      	nop

08008114 <USBD_CoreFindIF>:
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
#endif /* USE_USBD_COMPOSITE */
}
 8008114:	2000      	movs	r0, #0
 8008116:	4770      	bx	lr

08008118 <USBD_CoreFindEP>:
 8008118:	2000      	movs	r0, #0
 800811a:	4770      	bx	lr

0800811c <USBD_GetEpDesc>:
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
  USBD_EpDescTypeDef *pEpDesc = NULL;
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800811c:	7802      	ldrb	r2, [r0, #0]
 800811e:	f8b0 c002 	ldrh.w	ip, [r0, #2]
 8008122:	b293      	uxth	r3, r2
 8008124:	4594      	cmp	ip, r2
 8008126:	d803      	bhi.n	8008130 <USBD_GetEpDesc+0x14>
 8008128:	e00c      	b.n	8008144 <USBD_GetEpDesc+0x28>
  {
    ptr = desc->bLength;

    while (ptr < desc->wTotalLength)
 800812a:	459c      	cmp	ip, r3
 800812c:	d90a      	bls.n	8008144 <USBD_GetEpDesc+0x28>
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;

  *ptr += pnext->bLength;
 800812e:	7802      	ldrb	r2, [r0, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008130:	4410      	add	r0, r2
  *ptr += pnext->bLength;
 8008132:	4413      	add	r3, r2
      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008134:	7842      	ldrb	r2, [r0, #1]
  *ptr += pnext->bLength;
 8008136:	b29b      	uxth	r3, r3
      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008138:	2a05      	cmp	r2, #5
 800813a:	d1f6      	bne.n	800812a <USBD_GetEpDesc+0xe>
        if (pEpDesc->bEndpointAddress == EpAddr)
 800813c:	7882      	ldrb	r2, [r0, #2]
 800813e:	428a      	cmp	r2, r1
 8008140:	d1f3      	bne.n	800812a <USBD_GetEpDesc+0xe>
}
 8008142:	4770      	bx	lr
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008144:	2000      	movs	r0, #0
}
 8008146:	4770      	bx	lr

08008148 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008148:	b5f0      	push	{r4, r5, r6, r7, lr}
 800814a:	780c      	ldrb	r4, [r1, #0]
 800814c:	b083      	sub	sp, #12
 800814e:	460e      	mov	r6, r1
 8008150:	4605      	mov	r5, r0
  USBD_StatusTypeDef ret = USBD_OK;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008152:	f004 0460 	and.w	r4, r4, #96	; 0x60
 8008156:	2c20      	cmp	r4, #32
 8008158:	d00e      	beq.n	8008178 <USBD_StdDevReq+0x30>
 800815a:	2c40      	cmp	r4, #64	; 0x40
 800815c:	d00c      	beq.n	8008178 <USBD_StdDevReq+0x30>
 800815e:	b1bc      	cbz	r4, 8008190 <USBD_StdDevReq+0x48>
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008160:	2180      	movs	r1, #128	; 0x80
 8008162:	4628      	mov	r0, r5
 8008164:	f000 fdb6 	bl	8008cd4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008168:	2100      	movs	r1, #0
 800816a:	4628      	mov	r0, r5
  USBD_StatusTypeDef ret = USBD_OK;
 800816c:	460c      	mov	r4, r1
  (void)USBD_LL_StallEP(pdev, 0U);
 800816e:	f000 fdb1 	bl	8008cd4 <USBD_LL_StallEP>
}
 8008172:	4620      	mov	r0, r4
 8008174:	b003      	add	sp, #12
 8008176:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008178:	f8d5 32d4 	ldr.w	r3, [r5, #724]	; 0x2d4
 800817c:	4631      	mov	r1, r6
 800817e:	4628      	mov	r0, r5
 8008180:	33ae      	adds	r3, #174	; 0xae
 8008182:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8008186:	689b      	ldr	r3, [r3, #8]
}
 8008188:	b003      	add	sp, #12
 800818a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800818e:	4718      	bx	r3
      switch (req->bRequest)
 8008190:	784b      	ldrb	r3, [r1, #1]
 8008192:	2b09      	cmp	r3, #9
 8008194:	d8e4      	bhi.n	8008160 <USBD_StdDevReq+0x18>
 8008196:	a201      	add	r2, pc, #4	; (adr r2, 800819c <USBD_StdDevReq+0x54>)
 8008198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800819c:	080081fd 	.word	0x080081fd
 80081a0:	08008227 	.word	0x08008227
 80081a4:	08008161 	.word	0x08008161
 80081a8:	08008245 	.word	0x08008245
 80081ac:	08008161 	.word	0x08008161
 80081b0:	08008267 	.word	0x08008267
 80081b4:	0800829f 	.word	0x0800829f
 80081b8:	08008161 	.word	0x08008161
 80081bc:	080082f1 	.word	0x080082f1
 80081c0:	080081c5 	.word	0x080081c5
  cfgidx = (uint8_t)(req->wValue);
 80081c4:	7889      	ldrb	r1, [r1, #2]
 80081c6:	4eb5      	ldr	r6, [pc, #724]	; (800849c <USBD_StdDevReq+0x354>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80081c8:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 80081ca:	7031      	strb	r1, [r6, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80081cc:	f200 8168 	bhi.w	80084a0 <USBD_StdDevReq+0x358>
  switch (pdev->dev_state)
 80081d0:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80081d4:	2b02      	cmp	r3, #2
 80081d6:	b2df      	uxtb	r7, r3
 80081d8:	f000 8123 	beq.w	8008422 <USBD_StdDevReq+0x2da>
 80081dc:	2f03      	cmp	r7, #3
 80081de:	f000 8134 	beq.w	800844a <USBD_StdDevReq+0x302>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 80081e2:	2180      	movs	r1, #128	; 0x80
      ret = USBD_FAIL;
 80081e4:	2403      	movs	r4, #3
  (void)USBD_LL_StallEP(pdev, 0x80U);
 80081e6:	f000 fd75 	bl	8008cd4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80081ea:	2100      	movs	r1, #0
 80081ec:	4628      	mov	r0, r5
 80081ee:	f000 fd71 	bl	8008cd4 <USBD_LL_StallEP>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80081f2:	7831      	ldrb	r1, [r6, #0]
 80081f4:	4628      	mov	r0, r5
 80081f6:	f7ff fe1b 	bl	8007e30 <USBD_ClrClassConfig>
      break;
 80081fa:	e7ba      	b.n	8008172 <USBD_StdDevReq+0x2a>
  switch (pdev->dev_state)
 80081fc:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8008200:	3a01      	subs	r2, #1
 8008202:	2a02      	cmp	r2, #2
 8008204:	d824      	bhi.n	8008250 <USBD_StdDevReq+0x108>
      if (req->wLength != 0x2U)
 8008206:	88ca      	ldrh	r2, [r1, #6]
 8008208:	2a02      	cmp	r2, #2
 800820a:	d121      	bne.n	8008250 <USBD_StdDevReq+0x108>
      if (pdev->dev_remote_wakeup != 0U)
 800820c:	f8d0 42a4 	ldr.w	r4, [r0, #676]	; 0x2a4
 8008210:	4601      	mov	r1, r0
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008212:	2c00      	cmp	r4, #0
  USBD_StatusTypeDef ret = USBD_OK;
 8008214:	461c      	mov	r4, r3
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008216:	bf14      	ite	ne
 8008218:	2303      	movne	r3, #3
 800821a:	2301      	moveq	r3, #1
 800821c:	f841 3f0c 	str.w	r3, [r1, #12]!
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008220:	f000 fa8a 	bl	8008738 <USBD_CtlSendData>
      break;
 8008224:	e7a5      	b.n	8008172 <USBD_StdDevReq+0x2a>
  switch (pdev->dev_state)
 8008226:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800822a:	3b01      	subs	r3, #1
 800822c:	2b02      	cmp	r3, #2
 800822e:	d80f      	bhi.n	8008250 <USBD_StdDevReq+0x108>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008230:	884b      	ldrh	r3, [r1, #2]
 8008232:	2b01      	cmp	r3, #1
 8008234:	d19d      	bne.n	8008172 <USBD_StdDevReq+0x2a>
        pdev->dev_remote_wakeup = 0U;
 8008236:	2300      	movs	r3, #0
        (void)USBD_CtlSendStatus(pdev);
 8008238:	4628      	mov	r0, r5
        pdev->dev_remote_wakeup = 0U;
 800823a:	f8c5 32a4 	str.w	r3, [r5, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800823e:	f000 faab 	bl	8008798 <USBD_CtlSendStatus>
 8008242:	e796      	b.n	8008172 <USBD_StdDevReq+0x2a>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008244:	884b      	ldrh	r3, [r1, #2]
 8008246:	2b01      	cmp	r3, #1
 8008248:	d0f6      	beq.n	8008238 <USBD_StdDevReq+0xf0>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800824a:	2b02      	cmp	r3, #2
 800824c:	f000 811e 	beq.w	800848c <USBD_StdDevReq+0x344>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008250:	2180      	movs	r1, #128	; 0x80
 8008252:	4628      	mov	r0, r5
 8008254:	f000 fd3e 	bl	8008cd4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008258:	2100      	movs	r1, #0
 800825a:	4628      	mov	r0, r5
 800825c:	f000 fd3a 	bl	8008cd4 <USBD_LL_StallEP>
}
 8008260:	4620      	mov	r0, r4
 8008262:	b003      	add	sp, #12
 8008264:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008266:	888b      	ldrh	r3, [r1, #4]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d1f1      	bne.n	8008250 <USBD_StdDevReq+0x108>
 800826c:	88cb      	ldrh	r3, [r1, #6]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d1ee      	bne.n	8008250 <USBD_StdDevReq+0x108>
 8008272:	884e      	ldrh	r6, [r1, #2]
 8008274:	2e7f      	cmp	r6, #127	; 0x7f
 8008276:	d8eb      	bhi.n	8008250 <USBD_StdDevReq+0x108>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008278:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800827c:	2b03      	cmp	r3, #3
 800827e:	d0e7      	beq.n	8008250 <USBD_StdDevReq+0x108>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008280:	b2f1      	uxtb	r1, r6
      pdev->dev_address = dev_addr;
 8008282:	f880 129e 	strb.w	r1, [r0, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008286:	f000 fd55 	bl	8008d34 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800828a:	4628      	mov	r0, r5
 800828c:	f000 fa84 	bl	8008798 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8008290:	2e00      	cmp	r6, #0
 8008292:	f040 80f7 	bne.w	8008484 <USBD_StdDevReq+0x33c>
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008296:	2301      	movs	r3, #1
 8008298:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 800829c:	e769      	b.n	8008172 <USBD_StdDevReq+0x2a>
  uint16_t len = 0U;
 800829e:	2300      	movs	r3, #0
  switch (req->wValue >> 8)
 80082a0:	884a      	ldrh	r2, [r1, #2]
  uint16_t len = 0U;
 80082a2:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 80082a6:	0a13      	lsrs	r3, r2, #8
 80082a8:	3b01      	subs	r3, #1
 80082aa:	2b0e      	cmp	r3, #14
 80082ac:	d8d0      	bhi.n	8008250 <USBD_StdDevReq+0x108>
 80082ae:	a101      	add	r1, pc, #4	; (adr r1, 80082b4 <USBD_StdDevReq+0x16c>)
 80082b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80082b4:	080083a7 	.word	0x080083a7
 80082b8:	0800838d 	.word	0x0800838d
 80082bc:	0800837b 	.word	0x0800837b
 80082c0:	08008251 	.word	0x08008251
 80082c4:	08008251 	.word	0x08008251
 80082c8:	08008365 	.word	0x08008365
 80082cc:	0800834b 	.word	0x0800834b
 80082d0:	08008251 	.word	0x08008251
 80082d4:	08008251 	.word	0x08008251
 80082d8:	08008251 	.word	0x08008251
 80082dc:	08008251 	.word	0x08008251
 80082e0:	08008251 	.word	0x08008251
 80082e4:	08008251 	.word	0x08008251
 80082e8:	08008251 	.word	0x08008251
 80082ec:	08008317 	.word	0x08008317
  if (req->wLength != 1U)
 80082f0:	88ca      	ldrh	r2, [r1, #6]
 80082f2:	2a01      	cmp	r2, #1
 80082f4:	d1ac      	bne.n	8008250 <USBD_StdDevReq+0x108>
    switch (pdev->dev_state)
 80082f6:	f890 129c 	ldrb.w	r1, [r0, #668]	; 0x29c
 80082fa:	2902      	cmp	r1, #2
 80082fc:	b2cb      	uxtb	r3, r1
 80082fe:	f200 8089 	bhi.w	8008414 <USBD_StdDevReq+0x2cc>
 8008302:	2b00      	cmp	r3, #0
 8008304:	f43f af2c 	beq.w	8008160 <USBD_StdDevReq+0x18>
        pdev->dev_default_config = 0U;
 8008308:	4601      	mov	r1, r0
 800830a:	2300      	movs	r3, #0
 800830c:	f841 3f08 	str.w	r3, [r1, #8]!
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008310:	f000 fa12 	bl	8008738 <USBD_CtlSendData>
        break;
 8008314:	e72d      	b.n	8008172 <USBD_StdDevReq+0x2a>
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8008316:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800831a:	69db      	ldr	r3, [r3, #28]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d097      	beq.n	8008250 <USBD_StdDevReq+0x108>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008320:	f10d 0106 	add.w	r1, sp, #6
 8008324:	7c28      	ldrb	r0, [r5, #16]
 8008326:	4798      	blx	r3
  if (req->wLength != 0U)
 8008328:	88f2      	ldrh	r2, [r6, #6]
 800832a:	2a00      	cmp	r2, #0
 800832c:	d06e      	beq.n	800840c <USBD_StdDevReq+0x2c4>
    if (len != 0U)
 800832e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d08c      	beq.n	8008250 <USBD_StdDevReq+0x108>
      len = MIN(len, req->wLength);
 8008336:	429a      	cmp	r2, r3
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008338:	4601      	mov	r1, r0
 800833a:	4628      	mov	r0, r5
      len = MIN(len, req->wLength);
 800833c:	bf28      	it	cs
 800833e:	461a      	movcs	r2, r3
 8008340:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008344:	f000 f9f8 	bl	8008738 <USBD_CtlSendData>
 8008348:	e713      	b.n	8008172 <USBD_StdDevReq+0x2a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800834a:	7c03      	ldrb	r3, [r0, #16]
 800834c:	2b00      	cmp	r3, #0
 800834e:	f47f af7f 	bne.w	8008250 <USBD_StdDevReq+0x108>
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008352:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8008356:	f10d 0006 	add.w	r0, sp, #6
 800835a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800835c:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800835e:	2307      	movs	r3, #7
 8008360:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8008362:	e7e1      	b.n	8008328 <USBD_StdDevReq+0x1e0>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008364:	7c03      	ldrb	r3, [r0, #16]
 8008366:	2b00      	cmp	r3, #0
 8008368:	f47f af72 	bne.w	8008250 <USBD_StdDevReq+0x108>
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800836c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8008370:	f10d 0006 	add.w	r0, sp, #6
 8008374:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008376:	4798      	blx	r3
  if (err != 0U)
 8008378:	e7d6      	b.n	8008328 <USBD_StdDevReq+0x1e0>
      switch ((uint8_t)(req->wValue))
 800837a:	b2d2      	uxtb	r2, r2
 800837c:	2a05      	cmp	r2, #5
 800837e:	f63f af67 	bhi.w	8008250 <USBD_StdDevReq+0x108>
 8008382:	e8df f002 	tbb	[pc, r2]
 8008386:	3036      	.short	0x3036
 8008388:	181e242a 	.word	0x181e242a
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800838c:	7c03      	ldrb	r3, [r0, #16]
 800838e:	2b00      	cmp	r3, #0
 8008390:	f040 808f 	bne.w	80084b2 <USBD_StdDevReq+0x36a>
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008394:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8008398:	f10d 0006 	add.w	r0, sp, #6
 800839c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800839e:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80083a0:	2302      	movs	r3, #2
 80083a2:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 80083a4:	e7c0      	b.n	8008328 <USBD_StdDevReq+0x1e0>
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80083a6:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80083aa:	f10d 0106 	add.w	r1, sp, #6
 80083ae:	7c00      	ldrb	r0, [r0, #16]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	4798      	blx	r3
  if (err != 0U)
 80083b4:	e7b8      	b.n	8008328 <USBD_StdDevReq+0x1e0>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80083b6:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80083ba:	699b      	ldr	r3, [r3, #24]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d1af      	bne.n	8008320 <USBD_StdDevReq+0x1d8>
 80083c0:	e746      	b.n	8008250 <USBD_StdDevReq+0x108>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80083c2:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80083c6:	695b      	ldr	r3, [r3, #20]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d1a9      	bne.n	8008320 <USBD_StdDevReq+0x1d8>
 80083cc:	e740      	b.n	8008250 <USBD_StdDevReq+0x108>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80083ce:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80083d2:	691b      	ldr	r3, [r3, #16]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d1a3      	bne.n	8008320 <USBD_StdDevReq+0x1d8>
 80083d8:	e73a      	b.n	8008250 <USBD_StdDevReq+0x108>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80083da:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80083de:	68db      	ldr	r3, [r3, #12]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d19d      	bne.n	8008320 <USBD_StdDevReq+0x1d8>
 80083e4:	e734      	b.n	8008250 <USBD_StdDevReq+0x108>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80083e6:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80083ea:	689b      	ldr	r3, [r3, #8]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d197      	bne.n	8008320 <USBD_StdDevReq+0x1d8>
 80083f0:	e72e      	b.n	8008250 <USBD_StdDevReq+0x108>
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80083f2:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80083f6:	685b      	ldr	r3, [r3, #4]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d191      	bne.n	8008320 <USBD_StdDevReq+0x1d8>
 80083fc:	e728      	b.n	8008250 <USBD_StdDevReq+0x108>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80083fe:	2302      	movs	r3, #2
        pdev->dev_config = cfgidx;
 8008400:	6041      	str	r1, [r0, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8008402:	460c      	mov	r4, r1
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008404:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008408:	f7ff fd12 	bl	8007e30 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800840c:	4628      	mov	r0, r5
 800840e:	f000 f9c3 	bl	8008798 <USBD_CtlSendStatus>
 8008412:	e6ae      	b.n	8008172 <USBD_StdDevReq+0x2a>
    switch (pdev->dev_state)
 8008414:	2b03      	cmp	r3, #3
 8008416:	f47f aea3 	bne.w	8008160 <USBD_StdDevReq+0x18>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800841a:	1d01      	adds	r1, r0, #4
 800841c:	f000 f98c 	bl	8008738 <USBD_CtlSendData>
        break;
 8008420:	e6a7      	b.n	8008172 <USBD_StdDevReq+0x2a>
      if (cfgidx != 0U)
 8008422:	2900      	cmp	r1, #0
 8008424:	d0f2      	beq.n	800840c <USBD_StdDevReq+0x2c4>
        pdev->dev_config = cfgidx;
 8008426:	2101      	movs	r1, #1
 8008428:	6041      	str	r1, [r0, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800842a:	f7ff fcf9 	bl	8007e20 <USBD_SetClassConfig>
        if (ret != USBD_OK)
 800842e:	4604      	mov	r4, r0
 8008430:	2800      	cmp	r0, #0
 8008432:	d047      	beq.n	80084c4 <USBD_StdDevReq+0x37c>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008434:	2180      	movs	r1, #128	; 0x80
 8008436:	4628      	mov	r0, r5
 8008438:	f000 fc4c 	bl	8008cd4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800843c:	2100      	movs	r1, #0
 800843e:	4628      	mov	r0, r5
 8008440:	f000 fc48 	bl	8008cd4 <USBD_LL_StallEP>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008444:	f885 729c 	strb.w	r7, [r5, #668]	; 0x29c
 8008448:	e693      	b.n	8008172 <USBD_StdDevReq+0x2a>
      if (cfgidx == 0U)
 800844a:	2900      	cmp	r1, #0
 800844c:	d0d7      	beq.n	80083fe <USBD_StdDevReq+0x2b6>
      else if (cfgidx != pdev->dev_config)
 800844e:	6841      	ldr	r1, [r0, #4]
 8008450:	2901      	cmp	r1, #1
 8008452:	d0db      	beq.n	800840c <USBD_StdDevReq+0x2c4>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008454:	b2c9      	uxtb	r1, r1
 8008456:	f7ff fceb 	bl	8007e30 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800845a:	7831      	ldrb	r1, [r6, #0]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800845c:	4628      	mov	r0, r5
        pdev->dev_config = cfgidx;
 800845e:	6069      	str	r1, [r5, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008460:	f7ff fcde 	bl	8007e20 <USBD_SetClassConfig>
        if (ret != USBD_OK)
 8008464:	4606      	mov	r6, r0
 8008466:	2800      	cmp	r0, #0
 8008468:	d0d0      	beq.n	800840c <USBD_StdDevReq+0x2c4>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800846a:	2180      	movs	r1, #128	; 0x80
 800846c:	4628      	mov	r0, r5
 800846e:	f000 fc31 	bl	8008cd4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008472:	2100      	movs	r1, #0
 8008474:	4628      	mov	r0, r5
 8008476:	4634      	mov	r4, r6
 8008478:	f000 fc2c 	bl	8008cd4 <USBD_LL_StallEP>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800847c:	7929      	ldrb	r1, [r5, #4]
 800847e:	4628      	mov	r0, r5
 8008480:	f7ff fcd6 	bl	8007e30 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008484:	2302      	movs	r3, #2
 8008486:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 800848a:	e672      	b.n	8008172 <USBD_StdDevReq+0x2a>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800848c:	888b      	ldrh	r3, [r1, #4]
 800848e:	0a1b      	lsrs	r3, r3, #8
 8008490:	f880 32a0 	strb.w	r3, [r0, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008494:	f000 f980 	bl	8008798 <USBD_CtlSendStatus>
 8008498:	e66b      	b.n	8008172 <USBD_StdDevReq+0x2a>
 800849a:	bf00      	nop
 800849c:	240007c4 	.word	0x240007c4
  (void)USBD_LL_StallEP(pdev, 0x80U);
 80084a0:	2180      	movs	r1, #128	; 0x80
    return USBD_FAIL;
 80084a2:	2403      	movs	r4, #3
  (void)USBD_LL_StallEP(pdev, 0x80U);
 80084a4:	f000 fc16 	bl	8008cd4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80084a8:	2100      	movs	r1, #0
 80084aa:	4628      	mov	r0, r5
 80084ac:	f000 fc12 	bl	8008cd4 <USBD_LL_StallEP>
    return USBD_FAIL;
 80084b0:	e65f      	b.n	8008172 <USBD_StdDevReq+0x2a>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80084b2:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80084b6:	f10d 0006 	add.w	r0, sp, #6
 80084ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084bc:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80084be:	2302      	movs	r3, #2
 80084c0:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 80084c2:	e731      	b.n	8008328 <USBD_StdDevReq+0x1e0>
          (void)USBD_CtlSendStatus(pdev);
 80084c4:	4628      	mov	r0, r5
 80084c6:	f000 f967 	bl	8008798 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80084ca:	2303      	movs	r3, #3
 80084cc:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 80084d0:	e64f      	b.n	8008172 <USBD_StdDevReq+0x2a>
 80084d2:	bf00      	nop

080084d4 <USBD_StdItfReq>:
{
 80084d4:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80084d6:	780b      	ldrb	r3, [r1, #0]
{
 80084d8:	460d      	mov	r5, r1
 80084da:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80084dc:	f003 0260 	and.w	r2, r3, #96	; 0x60
 80084e0:	2a40      	cmp	r2, #64	; 0x40
 80084e2:	d00b      	beq.n	80084fc <USBD_StdItfReq+0x28>
 80084e4:	065b      	lsls	r3, r3, #25
 80084e6:	d509      	bpl.n	80084fc <USBD_StdItfReq+0x28>
  USBD_StatusTypeDef ret = USBD_OK;
 80084e8:	2500      	movs	r5, #0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 80084ea:	2180      	movs	r1, #128	; 0x80
 80084ec:	f000 fbf2 	bl	8008cd4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80084f0:	4620      	mov	r0, r4
 80084f2:	4629      	mov	r1, r5
 80084f4:	f000 fbee 	bl	8008cd4 <USBD_LL_StallEP>
}
 80084f8:	4628      	mov	r0, r5
 80084fa:	bd38      	pop	{r3, r4, r5, pc}
      switch (pdev->dev_state)
 80084fc:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8008500:	3b01      	subs	r3, #1
 8008502:	2b02      	cmp	r3, #2
 8008504:	d802      	bhi.n	800850c <USBD_StdItfReq+0x38>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008506:	7929      	ldrb	r1, [r5, #4]
 8008508:	2901      	cmp	r1, #1
 800850a:	d90a      	bls.n	8008522 <USBD_StdItfReq+0x4e>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800850c:	2180      	movs	r1, #128	; 0x80
 800850e:	4620      	mov	r0, r4
 8008510:	f000 fbe0 	bl	8008cd4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008514:	2100      	movs	r1, #0
 8008516:	4620      	mov	r0, r4
  USBD_StatusTypeDef ret = USBD_OK;
 8008518:	460d      	mov	r5, r1
  (void)USBD_LL_StallEP(pdev, 0U);
 800851a:	f000 fbdb 	bl	8008cd4 <USBD_LL_StallEP>
}
 800851e:	4628      	mov	r0, r5
 8008520:	bd38      	pop	{r3, r4, r5, pc}
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008522:	4620      	mov	r0, r4
 8008524:	f7ff fdf6 	bl	8008114 <USBD_CoreFindIF>
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008528:	b990      	cbnz	r0, 8008550 <USBD_StdItfReq+0x7c>
              if (pdev->pClass[idx]->Setup != NULL)
 800852a:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 800852e:	689b      	ldr	r3, [r3, #8]
 8008530:	b173      	cbz	r3, 8008550 <USBD_StdItfReq+0x7c>
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008532:	4629      	mov	r1, r5
                pdev->classId = idx;
 8008534:	f8c4 02d4 	str.w	r0, [r4, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008538:	4620      	mov	r0, r4
 800853a:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 800853c:	88eb      	ldrh	r3, [r5, #6]
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800853e:	4605      	mov	r5, r0
            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008540:	2b00      	cmp	r3, #0
 8008542:	d1d9      	bne.n	80084f8 <USBD_StdItfReq+0x24>
 8008544:	2800      	cmp	r0, #0
 8008546:	d1d7      	bne.n	80084f8 <USBD_StdItfReq+0x24>
              (void)USBD_CtlSendStatus(pdev);
 8008548:	4620      	mov	r0, r4
 800854a:	f000 f925 	bl	8008798 <USBD_CtlSendStatus>
 800854e:	e7d3      	b.n	80084f8 <USBD_StdItfReq+0x24>
              ret = USBD_FAIL;
 8008550:	2503      	movs	r5, #3
}
 8008552:	4628      	mov	r0, r5
 8008554:	bd38      	pop	{r3, r4, r5, pc}
 8008556:	bf00      	nop

08008558 <USBD_StdEPReq>:
{
 8008558:	b530      	push	{r4, r5, lr}
 800855a:	460c      	mov	r4, r1
  ep_addr = LOBYTE(req->wIndex);
 800855c:	888a      	ldrh	r2, [r1, #4]
{
 800855e:	b083      	sub	sp, #12
 8008560:	4605      	mov	r5, r0
  ep_addr = LOBYTE(req->wIndex);
 8008562:	7823      	ldrb	r3, [r4, #0]
 8008564:	b2d1      	uxtb	r1, r2
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008566:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800856a:	2b20      	cmp	r3, #32
 800856c:	d01e      	beq.n	80085ac <USBD_StdEPReq+0x54>
 800856e:	2b40      	cmp	r3, #64	; 0x40
 8008570:	d01c      	beq.n	80085ac <USBD_StdEPReq+0x54>
 8008572:	b36b      	cbz	r3, 80085d0 <USBD_StdEPReq+0x78>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008574:	2180      	movs	r1, #128	; 0x80
 8008576:	4628      	mov	r0, r5
 8008578:	f000 fbac 	bl	8008cd4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800857c:	2100      	movs	r1, #0
 800857e:	4628      	mov	r0, r5
 8008580:	f000 fba8 	bl	8008cd4 <USBD_LL_StallEP>
}
 8008584:	2000      	movs	r0, #0
 8008586:	b003      	add	sp, #12
 8008588:	bd30      	pop	{r4, r5, pc}
          switch (pdev->dev_state)
 800858a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800858e:	2b02      	cmp	r3, #2
 8008590:	b2da      	uxtb	r2, r3
 8008592:	d059      	beq.n	8008648 <USBD_StdEPReq+0xf0>
 8008594:	2a03      	cmp	r2, #3
 8008596:	d1ed      	bne.n	8008574 <USBD_StdEPReq+0x1c>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008598:	8863      	ldrh	r3, [r4, #2]
 800859a:	2b00      	cmp	r3, #0
 800859c:	d1f2      	bne.n	8008584 <USBD_StdEPReq+0x2c>
                if ((ep_addr & 0x7FU) != 0x00U)
 800859e:	064b      	lsls	r3, r1, #25
 80085a0:	d17f      	bne.n	80086a2 <USBD_StdEPReq+0x14a>
                (void)USBD_CtlSendStatus(pdev);
 80085a2:	4628      	mov	r0, r5
 80085a4:	9101      	str	r1, [sp, #4]
 80085a6:	f000 f8f7 	bl	8008798 <USBD_CtlSendStatus>
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80085aa:	9901      	ldr	r1, [sp, #4]
 80085ac:	4628      	mov	r0, r5
 80085ae:	f7ff fdb3 	bl	8008118 <USBD_CoreFindEP>
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80085b2:	2800      	cmp	r0, #0
 80085b4:	d1e6      	bne.n	8008584 <USBD_StdEPReq+0x2c>
                  if (pdev->pClass[idx]->Setup != NULL)
 80085b6:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
                  pdev->classId = idx;
 80085ba:	f8c5 02d4 	str.w	r0, [r5, #724]	; 0x2d4
                  if (pdev->pClass[idx]->Setup != NULL)
 80085be:	689b      	ldr	r3, [r3, #8]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d0df      	beq.n	8008584 <USBD_StdEPReq+0x2c>
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80085c4:	4621      	mov	r1, r4
 80085c6:	4628      	mov	r0, r5
}
 80085c8:	b003      	add	sp, #12
 80085ca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80085ce:	4718      	bx	r3
      switch (req->bRequest)
 80085d0:	7863      	ldrb	r3, [r4, #1]
 80085d2:	2b01      	cmp	r3, #1
 80085d4:	d0d9      	beq.n	800858a <USBD_StdEPReq+0x32>
 80085d6:	2b03      	cmp	r3, #3
 80085d8:	d024      	beq.n	8008624 <USBD_StdEPReq+0xcc>
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d1ca      	bne.n	8008574 <USBD_StdEPReq+0x1c>
          switch (pdev->dev_state)
 80085de:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80085e2:	2b02      	cmp	r3, #2
 80085e4:	b2d8      	uxtb	r0, r3
 80085e6:	d038      	beq.n	800865a <USBD_StdEPReq+0x102>
 80085e8:	2803      	cmp	r0, #3
 80085ea:	d1c3      	bne.n	8008574 <USBD_StdEPReq+0x1c>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80085ec:	f001 030f 	and.w	r3, r1, #15
              if ((ep_addr & 0x80U) == 0x80U)
 80085f0:	0612      	lsls	r2, r2, #24
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80085f2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80085f6:	eb05 0383 	add.w	r3, r5, r3, lsl #2
              if ((ep_addr & 0x80U) == 0x80U)
 80085fa:	d43f      	bmi.n	800867c <USBD_StdEPReq+0x124>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80085fc:	f8b3 3164 	ldrh.w	r3, [r3, #356]	; 0x164
 8008600:	2b00      	cmp	r3, #0
 8008602:	d0b7      	beq.n	8008574 <USBD_StdEPReq+0x1c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008604:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 8008608:	2414      	movs	r4, #20
 800860a:	fb04 5403 	mla	r4, r4, r3, r5
 800860e:	f504 74aa 	add.w	r4, r4, #340	; 0x154
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008612:	2b00      	cmp	r3, #0
 8008614:	d13e      	bne.n	8008694 <USBD_StdEPReq+0x13c>
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008616:	2202      	movs	r2, #2
 8008618:	4621      	mov	r1, r4
 800861a:	4628      	mov	r0, r5
                pep->status = 0x0000U;
 800861c:	6023      	str	r3, [r4, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800861e:	f000 f88b 	bl	8008738 <USBD_CtlSendData>
              break;
 8008622:	e7af      	b.n	8008584 <USBD_StdEPReq+0x2c>
          switch (pdev->dev_state)
 8008624:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8008628:	2b02      	cmp	r3, #2
 800862a:	b2da      	uxtb	r2, r3
 800862c:	d00c      	beq.n	8008648 <USBD_StdEPReq+0xf0>
 800862e:	2a03      	cmp	r2, #3
 8008630:	d1a0      	bne.n	8008574 <USBD_StdEPReq+0x1c>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008632:	8863      	ldrh	r3, [r4, #2]
 8008634:	b923      	cbnz	r3, 8008640 <USBD_StdEPReq+0xe8>
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008636:	0648      	lsls	r0, r1, #25
 8008638:	d002      	beq.n	8008640 <USBD_StdEPReq+0xe8>
 800863a:	88e3      	ldrh	r3, [r4, #6]
 800863c:	2b00      	cmp	r3, #0
 800863e:	d035      	beq.n	80086ac <USBD_StdEPReq+0x154>
              (void)USBD_CtlSendStatus(pdev);
 8008640:	4628      	mov	r0, r5
 8008642:	f000 f8a9 	bl	8008798 <USBD_CtlSendStatus>
              break;
 8008646:	e79d      	b.n	8008584 <USBD_StdEPReq+0x2c>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008648:	064a      	lsls	r2, r1, #25
 800864a:	d093      	beq.n	8008574 <USBD_StdEPReq+0x1c>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800864c:	f000 fb42 	bl	8008cd4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008650:	2180      	movs	r1, #128	; 0x80
 8008652:	4628      	mov	r0, r5
 8008654:	f000 fb3e 	bl	8008cd4 <USBD_LL_StallEP>
 8008658:	e794      	b.n	8008584 <USBD_StdEPReq+0x2c>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800865a:	0648      	lsls	r0, r1, #25
 800865c:	d18a      	bne.n	8008574 <USBD_StdEPReq+0x1c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800865e:	0611      	lsls	r1, r2, #24
              pep->status = 0x0000U;
 8008660:	f04f 0300 	mov.w	r3, #0
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008664:	f04f 0202 	mov.w	r2, #2
 8008668:	4628      	mov	r0, r5
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800866a:	bf4c      	ite	mi
 800866c:	f105 0114 	addmi.w	r1, r5, #20
 8008670:	f505 71aa 	addpl.w	r1, r5, #340	; 0x154
              pep->status = 0x0000U;
 8008674:	600b      	str	r3, [r1, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008676:	f000 f85f 	bl	8008738 <USBD_CtlSendData>
              break;
 800867a:	e783      	b.n	8008584 <USBD_StdEPReq+0x2c>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800867c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800867e:	2b00      	cmp	r3, #0
 8008680:	f43f af78 	beq.w	8008574 <USBD_StdEPReq+0x1c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008684:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 8008688:	1c5c      	adds	r4, r3, #1
 800868a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800868e:	eb05 0484 	add.w	r4, r5, r4, lsl #2
 8008692:	e7be      	b.n	8008612 <USBD_StdEPReq+0xba>
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008694:	4628      	mov	r0, r5
 8008696:	f000 fb39 	bl	8008d0c <USBD_LL_IsStallEP>
 800869a:	1e03      	subs	r3, r0, #0
 800869c:	bf18      	it	ne
 800869e:	2301      	movne	r3, #1
 80086a0:	e7b9      	b.n	8008616 <USBD_StdEPReq+0xbe>
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80086a2:	9101      	str	r1, [sp, #4]
 80086a4:	f000 fb24 	bl	8008cf0 <USBD_LL_ClearStallEP>
 80086a8:	9901      	ldr	r1, [sp, #4]
 80086aa:	e77a      	b.n	80085a2 <USBD_StdEPReq+0x4a>
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80086ac:	4628      	mov	r0, r5
 80086ae:	f000 fb11 	bl	8008cd4 <USBD_LL_StallEP>
 80086b2:	e7c5      	b.n	8008640 <USBD_StdEPReq+0xe8>

080086b4 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 80086b4:	780b      	ldrb	r3, [r1, #0]
 80086b6:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 80086b8:	784b      	ldrb	r3, [r1, #1]
 80086ba:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pbuff);
 80086bc:	884b      	ldrh	r3, [r1, #2]
 80086be:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pbuff);
 80086c0:	888b      	ldrh	r3, [r1, #4]
 80086c2:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pbuff);
 80086c4:	88cb      	ldrh	r3, [r1, #6]
 80086c6:	80c3      	strh	r3, [r0, #6]
}
 80086c8:	4770      	bx	lr
 80086ca:	bf00      	nop

080086cc <USBD_CtlError>:
{
 80086cc:	b510      	push	{r4, lr}
 80086ce:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 80086d0:	2180      	movs	r1, #128	; 0x80
 80086d2:	f000 faff 	bl	8008cd4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80086d6:	2100      	movs	r1, #0
 80086d8:	4620      	mov	r0, r4
}
 80086da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  (void)USBD_LL_StallEP(pdev, 0U);
 80086de:	f000 baf9 	b.w	8008cd4 <USBD_LL_StallEP>
 80086e2:	bf00      	nop

080086e4 <USBD_GetString>:
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
  uint8_t idx = 0U;
  uint8_t *pdesc;

  if (desc == NULL)
 80086e4:	b318      	cbz	r0, 800872e <USBD_GetString+0x4a>
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 80086e6:	7803      	ldrb	r3, [r0, #0]
{
 80086e8:	b430      	push	{r4, r5}
  while (*pbuff != (uint8_t)'\0')
 80086ea:	b30b      	cbz	r3, 8008730 <USBD_GetString+0x4c>
 80086ec:	4604      	mov	r4, r0
 80086ee:	f1c0 0c01 	rsb	ip, r0, #1
  {
    len++;
 80086f2:	eb04 030c 	add.w	r3, r4, ip
  while (*pbuff != (uint8_t)'\0')
 80086f6:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 80086fa:	b2db      	uxtb	r3, r3
 80086fc:	2d00      	cmp	r5, #0
 80086fe:	d1f8      	bne.n	80086f2 <USBD_GetString+0xe>
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008700:	3301      	adds	r3, #1
 8008702:	005b      	lsls	r3, r3, #1
 8008704:	b2dc      	uxtb	r4, r3
 8008706:	8013      	strh	r3, [r2, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008708:	2303      	movs	r3, #3
  unicode[idx] = *(uint8_t *)len;
 800870a:	700c      	strb	r4, [r1, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800870c:	704b      	strb	r3, [r1, #1]
  while (*pdesc != (uint8_t)'\0')
 800870e:	7804      	ldrb	r4, [r0, #0]
 8008710:	b15c      	cbz	r4, 800872a <USBD_GetString+0x46>
  idx++;
 8008712:	2302      	movs	r3, #2
    unicode[idx] = 0U;
 8008714:	2500      	movs	r5, #0
    idx++;
 8008716:	1c5a      	adds	r2, r3, #1
    unicode[idx] = *pdesc;
 8008718:	54cc      	strb	r4, [r1, r3]
    idx++;
 800871a:	3302      	adds	r3, #2
    unicode[idx] = 0U;
 800871c:	b2d2      	uxtb	r2, r2
    idx++;
 800871e:	b2db      	uxtb	r3, r3
    unicode[idx] = 0U;
 8008720:	548d      	strb	r5, [r1, r2]
  while (*pdesc != (uint8_t)'\0')
 8008722:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 8008726:	2c00      	cmp	r4, #0
 8008728:	d1f5      	bne.n	8008716 <USBD_GetString+0x32>
}
 800872a:	bc30      	pop	{r4, r5}
 800872c:	4770      	bx	lr
 800872e:	4770      	bx	lr
  while (*pbuff != (uint8_t)'\0')
 8008730:	2402      	movs	r4, #2
 8008732:	4623      	mov	r3, r4
 8008734:	e7e7      	b.n	8008706 <USBD_GetString+0x22>
 8008736:	bf00      	nop

08008738 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008738:	b510      	push	{r4, lr}
 800873a:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800873c:	2402      	movs	r4, #2
{
 800873e:	460a      	mov	r2, r1
#else
  pdev->ep_in[0].rem_length = len;
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008740:	2100      	movs	r1, #0
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008742:	f8c0 4294 	str.w	r4, [r0, #660]	; 0x294
  pdev->ep_in[0].rem_length = len;
 8008746:	e9c0 3306 	strd	r3, r3, [r0, #24]
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800874a:	f000 fb01 	bl	8008d50 <USBD_LL_Transmit>

  return USBD_OK;
}
 800874e:	2000      	movs	r0, #0
 8008750:	bd10      	pop	{r4, pc}
 8008752:	bf00      	nop

08008754 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008754:	468c      	mov	ip, r1
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008756:	2100      	movs	r1, #0
{
 8008758:	b508      	push	{r3, lr}
 800875a:	4613      	mov	r3, r2
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800875c:	4662      	mov	r2, ip
 800875e:	f000 faf7 	bl	8008d50 <USBD_LL_Transmit>

  return USBD_OK;
}
 8008762:	2000      	movs	r0, #0
 8008764:	bd08      	pop	{r3, pc}
 8008766:	bf00      	nop

08008768 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008768:	b510      	push	{r4, lr}
 800876a:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800876c:	2403      	movs	r4, #3
{
 800876e:	460a      	mov	r2, r1
#else
  pdev->ep_out[0].rem_length = len;
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008770:	2100      	movs	r1, #0
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008772:	f8c0 4294 	str.w	r4, [r0, #660]	; 0x294
  pdev->ep_out[0].rem_length = len;
 8008776:	e9c0 3356 	strd	r3, r3, [r0, #344]	; 0x158
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800877a:	f000 faf7 	bl	8008d6c <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800877e:	2000      	movs	r0, #0
 8008780:	bd10      	pop	{r4, pc}
 8008782:	bf00      	nop

08008784 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008784:	468c      	mov	ip, r1
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008786:	2100      	movs	r1, #0
{
 8008788:	b508      	push	{r3, lr}
 800878a:	4613      	mov	r3, r2
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800878c:	4662      	mov	r2, ip
 800878e:	f000 faed 	bl	8008d6c <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8008792:	2000      	movs	r0, #0
 8008794:	bd08      	pop	{r3, pc}
 8008796:	bf00      	nop

08008798 <USBD_CtlSendStatus>:
{
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008798:	2300      	movs	r3, #0
{
 800879a:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800879c:	2404      	movs	r4, #4
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800879e:	461a      	mov	r2, r3
 80087a0:	4619      	mov	r1, r3
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80087a2:	f8c0 4294 	str.w	r4, [r0, #660]	; 0x294
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80087a6:	f000 fad3 	bl	8008d50 <USBD_LL_Transmit>

  return USBD_OK;
}
 80087aa:	2000      	movs	r0, #0
 80087ac:	bd10      	pop	{r4, pc}
 80087ae:	bf00      	nop

080087b0 <USBD_CtlReceiveStatus>:
{
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80087b0:	2300      	movs	r3, #0
{
 80087b2:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80087b4:	2405      	movs	r4, #5
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80087b6:	461a      	mov	r2, r3
 80087b8:	4619      	mov	r1, r3
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80087ba:	f8c0 4294 	str.w	r4, [r0, #660]	; 0x294
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80087be:	f000 fad5 	bl	8008d6c <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80087c2:	2000      	movs	r0, #0
 80087c4:	bd10      	pop	{r4, pc}
 80087c6:	bf00      	nop

080087c8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80087c8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 80087ca:	2201      	movs	r2, #1
 80087cc:	4919      	ldr	r1, [pc, #100]	; (8008834 <MX_USB_DEVICE_Init+0x6c>)
 80087ce:	481a      	ldr	r0, [pc, #104]	; (8008838 <MX_USB_DEVICE_Init+0x70>)
 80087d0:	f7ff faf4 	bl	8007dbc <USBD_Init>
 80087d4:	b988      	cbnz	r0, 80087fa <MX_USB_DEVICE_Init+0x32>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 80087d6:	4919      	ldr	r1, [pc, #100]	; (800883c <MX_USB_DEVICE_Init+0x74>)
 80087d8:	4817      	ldr	r0, [pc, #92]	; (8008838 <MX_USB_DEVICE_Init+0x70>)
 80087da:	f7ff fb03 	bl	8007de4 <USBD_RegisterClass>
 80087de:	b9a0      	cbnz	r0, 800880a <MX_USB_DEVICE_Init+0x42>
  {
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 80087e0:	4917      	ldr	r1, [pc, #92]	; (8008840 <MX_USB_DEVICE_Init+0x78>)
 80087e2:	4815      	ldr	r0, [pc, #84]	; (8008838 <MX_USB_DEVICE_Init+0x70>)
 80087e4:	f7ff fa8a 	bl	8007cfc <USBD_CDC_RegisterInterface>
 80087e8:	b9b8      	cbnz	r0, 800881a <MX_USB_DEVICE_Init+0x52>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 80087ea:	4813      	ldr	r0, [pc, #76]	; (8008838 <MX_USB_DEVICE_Init+0x70>)
 80087ec:	f7ff fb16 	bl	8007e1c <USBD_Start>
 80087f0:	b9d0      	cbnz	r0, 8008828 <MX_USB_DEVICE_Init+0x60>

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80087f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_PWREx_EnableUSBVoltageDetector();
 80087f6:	f7fb bf41 	b.w	800467c <HAL_PWREx_EnableUSBVoltageDetector>
    Error_Handler();
 80087fa:	f7f8 fbe3 	bl	8000fc4 <Error_Handler>
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 80087fe:	490f      	ldr	r1, [pc, #60]	; (800883c <MX_USB_DEVICE_Init+0x74>)
 8008800:	480d      	ldr	r0, [pc, #52]	; (8008838 <MX_USB_DEVICE_Init+0x70>)
 8008802:	f7ff faef 	bl	8007de4 <USBD_RegisterClass>
 8008806:	2800      	cmp	r0, #0
 8008808:	d0ea      	beq.n	80087e0 <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 800880a:	f7f8 fbdb 	bl	8000fc4 <Error_Handler>
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 800880e:	490c      	ldr	r1, [pc, #48]	; (8008840 <MX_USB_DEVICE_Init+0x78>)
 8008810:	4809      	ldr	r0, [pc, #36]	; (8008838 <MX_USB_DEVICE_Init+0x70>)
 8008812:	f7ff fa73 	bl	8007cfc <USBD_CDC_RegisterInterface>
 8008816:	2800      	cmp	r0, #0
 8008818:	d0e7      	beq.n	80087ea <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 800881a:	f7f8 fbd3 	bl	8000fc4 <Error_Handler>
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 800881e:	4806      	ldr	r0, [pc, #24]	; (8008838 <MX_USB_DEVICE_Init+0x70>)
 8008820:	f7ff fafc 	bl	8007e1c <USBD_Start>
 8008824:	2800      	cmp	r0, #0
 8008826:	d0e4      	beq.n	80087f2 <MX_USB_DEVICE_Init+0x2a>
    Error_Handler();
 8008828:	f7f8 fbcc 	bl	8000fc4 <Error_Handler>
}
 800882c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_PWREx_EnableUSBVoltageDetector();
 8008830:	f7fb bf24 	b.w	800467c <HAL_PWREx_EnableUSBVoltageDetector>
 8008834:	240000ac 	.word	0x240000ac
 8008838:	240007c8 	.word	0x240007c8
 800883c:	24000010 	.word	0x24000010
 8008840:	24000098 	.word	0x24000098

08008844 <CDC_DeInit_HS>:
static int8_t CDC_DeInit_HS(void)
{
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
  /* USER CODE END 9 */
}
 8008844:	2000      	movs	r0, #0
 8008846:	4770      	bx	lr

08008848 <CDC_Control_HS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 10 */
}
 8008848:	2000      	movs	r0, #0
 800884a:	4770      	bx	lr

0800884c <CDC_TransmitCplt_HS>:
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
}
 800884c:	2000      	movs	r0, #0
 800884e:	4770      	bx	lr

08008850 <CDC_Receive_HS>:
{
 8008850:	b510      	push	{r4, lr}
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 8008852:	4c05      	ldr	r4, [pc, #20]	; (8008868 <CDC_Receive_HS+0x18>)
{
 8008854:	4601      	mov	r1, r0
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 8008856:	4620      	mov	r0, r4
 8008858:	f7ff fa6a 	bl	8007d30 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 800885c:	4620      	mov	r0, r4
 800885e:	f7ff fa8f 	bl	8007d80 <USBD_CDC_ReceivePacket>
}
 8008862:	2000      	movs	r0, #0
 8008864:	bd10      	pop	{r4, pc}
 8008866:	bf00      	nop
 8008868:	240007c8 	.word	0x240007c8

0800886c <CDC_Init_HS>:
{
 800886c:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 800886e:	4c06      	ldr	r4, [pc, #24]	; (8008888 <CDC_Init_HS+0x1c>)
 8008870:	2200      	movs	r2, #0
 8008872:	4906      	ldr	r1, [pc, #24]	; (800888c <CDC_Init_HS+0x20>)
 8008874:	4620      	mov	r0, r4
 8008876:	f7ff fa4d 	bl	8007d14 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 800887a:	4905      	ldr	r1, [pc, #20]	; (8008890 <CDC_Init_HS+0x24>)
 800887c:	4620      	mov	r0, r4
 800887e:	f7ff fa57 	bl	8007d30 <USBD_CDC_SetRxBuffer>
}
 8008882:	2000      	movs	r0, #0
 8008884:	bd10      	pop	{r4, pc}
 8008886:	bf00      	nop
 8008888:	240007c8 	.word	0x240007c8
 800888c:	240012a4 	.word	0x240012a4
 8008890:	24000aa4 	.word	0x24000aa4

08008894 <CDC_Transmit_HS>:
{
 8008894:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 8008896:	4c09      	ldr	r4, [pc, #36]	; (80088bc <CDC_Transmit_HS+0x28>)
 8008898:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
  if (hcdc->TxState != 0){
 800889c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80088a0:	b10b      	cbz	r3, 80088a6 <CDC_Transmit_HS+0x12>
}
 80088a2:	2001      	movs	r0, #1
 80088a4:	bd10      	pop	{r4, pc}
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 80088a6:	460a      	mov	r2, r1
 80088a8:	4601      	mov	r1, r0
 80088aa:	4620      	mov	r0, r4
 80088ac:	f7ff fa32 	bl	8007d14 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 80088b0:	4620      	mov	r0, r4
}
 80088b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 80088b6:	f7ff ba47 	b.w	8007d48 <USBD_CDC_TransmitPacket>
 80088ba:	bf00      	nop
 80088bc:	240007c8 	.word	0x240007c8

080088c0 <USBD_HS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 80088c0:	2312      	movs	r3, #18
  return USBD_HS_DeviceDesc;
}
 80088c2:	4801      	ldr	r0, [pc, #4]	; (80088c8 <USBD_HS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_HS_DeviceDesc);
 80088c4:	800b      	strh	r3, [r1, #0]
}
 80088c6:	4770      	bx	lr
 80088c8:	240000cc 	.word	0x240000cc

080088cc <USBD_HS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80088cc:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 80088ce:	4801      	ldr	r0, [pc, #4]	; (80088d4 <USBD_HS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 80088d0:	800b      	strh	r3, [r1, #0]
}
 80088d2:	4770      	bx	lr
 80088d4:	240000e0 	.word	0x240000e0

080088d8 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80088d8:	b510      	push	{r4, lr}
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80088da:	4c04      	ldr	r4, [pc, #16]	; (80088ec <USBD_HS_ManufacturerStrDescriptor+0x14>)
{
 80088dc:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80088de:	4804      	ldr	r0, [pc, #16]	; (80088f0 <USBD_HS_ManufacturerStrDescriptor+0x18>)
 80088e0:	4621      	mov	r1, r4
 80088e2:	f7ff feff 	bl	80086e4 <USBD_GetString>
  return USBD_StrDesc;
}
 80088e6:	4620      	mov	r0, r4
 80088e8:	bd10      	pop	{r4, pc}
 80088ea:	bf00      	nop
 80088ec:	24001aa4 	.word	0x24001aa4
 80088f0:	08023e88 	.word	0x08023e88

080088f4 <USBD_HS_ProductStrDescriptor>:
{
 80088f4:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 80088f6:	4c04      	ldr	r4, [pc, #16]	; (8008908 <USBD_HS_ProductStrDescriptor+0x14>)
{
 80088f8:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 80088fa:	4804      	ldr	r0, [pc, #16]	; (800890c <USBD_HS_ProductStrDescriptor+0x18>)
 80088fc:	4621      	mov	r1, r4
 80088fe:	f7ff fef1 	bl	80086e4 <USBD_GetString>
}
 8008902:	4620      	mov	r0, r4
 8008904:	bd10      	pop	{r4, pc}
 8008906:	bf00      	nop
 8008908:	24001aa4 	.word	0x24001aa4
 800890c:	08023e9c 	.word	0x08023e9c

08008910 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008910:	b510      	push	{r4, lr}
  if(speed == USBD_SPEED_HIGH)
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8008912:	4c04      	ldr	r4, [pc, #16]	; (8008924 <USBD_HS_ConfigStrDescriptor+0x14>)
{
 8008914:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8008916:	4804      	ldr	r0, [pc, #16]	; (8008928 <USBD_HS_ConfigStrDescriptor+0x18>)
 8008918:	4621      	mov	r1, r4
 800891a:	f7ff fee3 	bl	80086e4 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 800891e:	4620      	mov	r0, r4
 8008920:	bd10      	pop	{r4, pc}
 8008922:	bf00      	nop
 8008924:	24001aa4 	.word	0x24001aa4
 8008928:	08023eb4 	.word	0x08023eb4

0800892c <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800892c:	b510      	push	{r4, lr}
  if(speed == 0)
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800892e:	4c04      	ldr	r4, [pc, #16]	; (8008940 <USBD_HS_InterfaceStrDescriptor+0x14>)
{
 8008930:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8008932:	4804      	ldr	r0, [pc, #16]	; (8008944 <USBD_HS_InterfaceStrDescriptor+0x18>)
 8008934:	4621      	mov	r1, r4
 8008936:	f7ff fed5 	bl	80086e4 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 800893a:	4620      	mov	r0, r4
 800893c:	bd10      	pop	{r4, pc}
 800893e:	bf00      	nop
 8008940:	24001aa4 	.word	0x24001aa4
 8008944:	08023ec0 	.word	0x08023ec0

08008948 <USBD_HS_SerialStrDescriptor>:
{
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008948:	4a46      	ldr	r2, [pc, #280]	; (8008a64 <USBD_HS_SerialStrDescriptor+0x11c>)
  *length = USB_SIZ_STRING_SERIAL;
 800894a:	f04f 0c1a 	mov.w	ip, #26
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800894e:	f8d2 3800 	ldr.w	r3, [r2, #2048]	; 0x800
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
  deviceserial2 = *(uint32_t *) DEVICE_ID3;

  deviceserial0 += deviceserial2;
 8008952:	f8d2 0808 	ldr.w	r0, [r2, #2056]	; 0x808
  *length = USB_SIZ_STRING_SERIAL;
 8008956:	f8a1 c000 	strh.w	ip, [r1]

  if (deviceserial0 != 0)
 800895a:	181b      	adds	r3, r3, r0
 800895c:	d101      	bne.n	8008962 <USBD_HS_SerialStrDescriptor+0x1a>
}
 800895e:	4842      	ldr	r0, [pc, #264]	; (8008a68 <USBD_HS_SerialStrDescriptor+0x120>)
 8008960:	4770      	bx	lr
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
  {
    if (((value >> 28)) < 0xA)
 8008962:	0f18      	lsrs	r0, r3, #28
 8008964:	f1b3 4f20 	cmp.w	r3, #2684354560	; 0xa0000000
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008968:	f8d2 1804 	ldr.w	r1, [r2, #2052]	; 0x804
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 800896c:	f04f 0c00 	mov.w	ip, #0
      pbuf[2 * idx] = (value >> 28) + '0';
 8008970:	4a3d      	ldr	r2, [pc, #244]	; (8008a68 <USBD_HS_SerialStrDescriptor+0x120>)
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008972:	bf2c      	ite	cs
 8008974:	3037      	addcs	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8008976:	3030      	addcc	r0, #48	; 0x30
    pbuf[2 * idx + 1] = 0;
 8008978:	f882 c003 	strb.w	ip, [r2, #3]
 800897c:	f04f 0c00 	mov.w	ip, #0
      pbuf[2 * idx] = (value >> 28) + '0';
 8008980:	7090      	strb	r0, [r2, #2]
    if (((value >> 28)) < 0xA)
 8008982:	f3c3 6003 	ubfx	r0, r3, #24, #4
    pbuf[2 * idx + 1] = 0;
 8008986:	f882 c005 	strb.w	ip, [r2, #5]
 800898a:	f04f 0c00 	mov.w	ip, #0
    if (((value >> 28)) < 0xA)
 800898e:	2809      	cmp	r0, #9
    pbuf[2 * idx + 1] = 0;
 8008990:	f882 c007 	strb.w	ip, [r2, #7]
 8008994:	f04f 0c00 	mov.w	ip, #0
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008998:	bf8c      	ite	hi
 800899a:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800899c:	3030      	addls	r0, #48	; 0x30
    pbuf[2 * idx + 1] = 0;
 800899e:	f882 c009 	strb.w	ip, [r2, #9]
 80089a2:	f04f 0c00 	mov.w	ip, #0
      pbuf[2 * idx] = (value >> 28) + '0';
 80089a6:	7110      	strb	r0, [r2, #4]
    if (((value >> 28)) < 0xA)
 80089a8:	f3c3 5003 	ubfx	r0, r3, #20, #4
    pbuf[2 * idx + 1] = 0;
 80089ac:	f882 c00b 	strb.w	ip, [r2, #11]
 80089b0:	f04f 0c00 	mov.w	ip, #0
    if (((value >> 28)) < 0xA)
 80089b4:	2809      	cmp	r0, #9
    pbuf[2 * idx + 1] = 0;
 80089b6:	f882 c00d 	strb.w	ip, [r2, #13]
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80089ba:	bf8c      	ite	hi
 80089bc:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 80089be:	3030      	addls	r0, #48	; 0x30
 80089c0:	7190      	strb	r0, [r2, #6]
    if (((value >> 28)) < 0xA)
 80089c2:	f3c3 4003 	ubfx	r0, r3, #16, #4
 80089c6:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80089c8:	bf8c      	ite	hi
 80089ca:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 80089cc:	3030      	addls	r0, #48	; 0x30
 80089ce:	7210      	strb	r0, [r2, #8]
    if (((value >> 28)) < 0xA)
 80089d0:	f3c3 3003 	ubfx	r0, r3, #12, #4
 80089d4:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80089d6:	bf8c      	ite	hi
 80089d8:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 80089da:	3030      	addls	r0, #48	; 0x30
 80089dc:	7290      	strb	r0, [r2, #10]
    if (((value >> 28)) < 0xA)
 80089de:	f3c3 2003 	ubfx	r0, r3, #8, #4
 80089e2:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80089e4:	bf8c      	ite	hi
 80089e6:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 80089e8:	3030      	addls	r0, #48	; 0x30
 80089ea:	7310      	strb	r0, [r2, #12]
    if (((value >> 28)) < 0xA)
 80089ec:	f3c3 1003 	ubfx	r0, r3, #4, #4
 80089f0:	f003 030f 	and.w	r3, r3, #15
 80089f4:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80089f6:	bf8c      	ite	hi
 80089f8:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 80089fa:	3030      	addls	r0, #48	; 0x30
    if (((value >> 28)) < 0xA)
 80089fc:	2b09      	cmp	r3, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 80089fe:	7390      	strb	r0, [r2, #14]
    pbuf[2 * idx + 1] = 0;
 8008a00:	f04f 0000 	mov.w	r0, #0
      pbuf[2 * idx] = (value >> 28) + '0';
 8008a04:	bf94      	ite	ls
 8008a06:	3330      	addls	r3, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008a08:	3337      	addhi	r3, #55	; 0x37
    if (((value >> 28)) < 0xA)
 8008a0a:	f1b1 4f20 	cmp.w	r1, #2684354560	; 0xa0000000
    pbuf[2 * idx + 1] = 0;
 8008a0e:	73d0      	strb	r0, [r2, #15]
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008a10:	7413      	strb	r3, [r2, #16]
    if (((value >> 28)) < 0xA)
 8008a12:	ea4f 7311 	mov.w	r3, r1, lsr #28
    pbuf[2 * idx + 1] = 0;
 8008a16:	f04f 0000 	mov.w	r0, #0
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008a1a:	bf2c      	ite	cs
 8008a1c:	3337      	addcs	r3, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8008a1e:	3330      	addcc	r3, #48	; 0x30
    pbuf[2 * idx + 1] = 0;
 8008a20:	7450      	strb	r0, [r2, #17]
 8008a22:	2000      	movs	r0, #0
      pbuf[2 * idx] = (value >> 28) + '0';
 8008a24:	7493      	strb	r3, [r2, #18]
    if (((value >> 28)) < 0xA)
 8008a26:	f3c1 6303 	ubfx	r3, r1, #24, #4
    pbuf[2 * idx + 1] = 0;
 8008a2a:	74d0      	strb	r0, [r2, #19]
 8008a2c:	2000      	movs	r0, #0
    if (((value >> 28)) < 0xA)
 8008a2e:	2b09      	cmp	r3, #9
    pbuf[2 * idx + 1] = 0;
 8008a30:	7550      	strb	r0, [r2, #21]
 8008a32:	f04f 0000 	mov.w	r0, #0
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008a36:	bf8c      	ite	hi
 8008a38:	3337      	addhi	r3, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8008a3a:	3330      	addls	r3, #48	; 0x30
    pbuf[2 * idx + 1] = 0;
 8008a3c:	75d0      	strb	r0, [r2, #23]
      pbuf[2 * idx] = (value >> 28) + '0';
 8008a3e:	7513      	strb	r3, [r2, #20]
    if (((value >> 28)) < 0xA)
 8008a40:	f3c1 5303 	ubfx	r3, r1, #20, #4
}
 8008a44:	4808      	ldr	r0, [pc, #32]	; (8008a68 <USBD_HS_SerialStrDescriptor+0x120>)
    if (((value >> 28)) < 0xA)
 8008a46:	2b09      	cmp	r3, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008a48:	bf8c      	ite	hi
 8008a4a:	3337      	addhi	r3, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8008a4c:	3330      	addls	r3, #48	; 0x30
 8008a4e:	7593      	strb	r3, [r2, #22]
    if (((value >> 28)) < 0xA)
 8008a50:	f3c1 4303 	ubfx	r3, r1, #16, #4
 8008a54:	2b09      	cmp	r3, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 8008a56:	bf94      	ite	ls
 8008a58:	3330      	addls	r3, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008a5a:	3337      	addhi	r3, #55	; 0x37
 8008a5c:	7613      	strb	r3, [r2, #24]
    pbuf[2 * idx + 1] = 0;
 8008a5e:	2300      	movs	r3, #0
 8008a60:	7653      	strb	r3, [r2, #25]
}
 8008a62:	4770      	bx	lr
 8008a64:	1ff1e000 	.word	0x1ff1e000
 8008a68:	240000e4 	.word	0x240000e4
 8008a6c:	00000000 	.word	0x00000000

08008a70 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008a70:	b530      	push	{r4, r5, lr}
 8008a72:	b0b7      	sub	sp, #220	; 0xdc
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008a74:	2100      	movs	r1, #0
{
 8008a76:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8008a78:	22b8      	movs	r2, #184	; 0xb8
 8008a7a:	a808      	add	r0, sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008a7c:	9106      	str	r1, [sp, #24]
 8008a7e:	e9cd 1102 	strd	r1, r1, [sp, #8]
 8008a82:	e9cd 1104 	strd	r1, r1, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8008a86:	f002 fd34 	bl	800b4f2 <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 8008a8a:	4b25      	ldr	r3, [pc, #148]	; (8008b20 <HAL_PCD_MspInit+0xb0>)
 8008a8c:	6822      	ldr	r2, [r4, #0]
 8008a8e:	429a      	cmp	r2, r3
 8008a90:	d001      	beq.n	8008a96 <HAL_PCD_MspInit+0x26>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8008a92:	b037      	add	sp, #220	; 0xdc
 8008a94:	bd30      	pop	{r4, r5, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8008a96:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 8008a9a:	2500      	movs	r5, #0
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8008a9c:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008aa0:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8008aa2:	e9cd 4508 	strd	r4, r5, [sp, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8008aa6:	9329      	str	r3, [sp, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008aa8:	f7fc fc20 	bl	80052ec <HAL_RCCEx_PeriphCLKConfig>
 8008aac:	bb70      	cbnz	r0, 8008b0c <HAL_PCD_MspInit+0x9c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008aae:	4c1d      	ldr	r4, [pc, #116]	; (8008b24 <HAL_PCD_MspInit+0xb4>)
    HAL_PWREx_EnableUSBVoltageDetector();
 8008ab0:	f7fb fde4 	bl	800467c <HAL_PWREx_EnableUSBVoltageDetector>
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ab4:	2500      	movs	r5, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008ab6:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008ab8:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008abc:	481a      	ldr	r0, [pc, #104]	; (8008b28 <HAL_PCD_MspInit+0xb8>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008abe:	f043 0301 	orr.w	r3, r3, #1
 8008ac2:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8008ac6:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008aca:	9504      	str	r5, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008acc:	f003 0301 	and.w	r3, r3, #1
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8008ad0:	ed9f 7b11 	vldr	d7, [pc, #68]	; 8008b18 <HAL_PCD_MspInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008ad4:	9300      	str	r3, [sp, #0]
 8008ad6:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8008ad8:	ed8d 7b02 	vstr	d7, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008adc:	f7fa fc82 	bl	80033e4 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8008ae0:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 8008ae4:	462a      	mov	r2, r5
 8008ae6:	4629      	mov	r1, r5
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8008ae8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 8008aec:	204d      	movs	r0, #77	; 0x4d
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8008aee:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
 8008af2:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 8008af6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008afa:	9301      	str	r3, [sp, #4]
 8008afc:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 8008afe:	f7f9 f9d7 	bl	8001eb0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8008b02:	204d      	movs	r0, #77	; 0x4d
 8008b04:	f7f9 fa12 	bl	8001f2c <HAL_NVIC_EnableIRQ>
}
 8008b08:	b037      	add	sp, #220	; 0xdc
 8008b0a:	bd30      	pop	{r4, r5, pc}
      Error_Handler();
 8008b0c:	f7f8 fa5a 	bl	8000fc4 <Error_Handler>
 8008b10:	e7cd      	b.n	8008aae <HAL_PCD_MspInit+0x3e>
 8008b12:	bf00      	nop
 8008b14:	f3af 8000 	nop.w
 8008b18:	00000200 	.word	0x00000200
 8008b1c:	00000000 	.word	0x00000000
 8008b20:	40040000 	.word	0x40040000
 8008b24:	58024400 	.word	0x58024400
 8008b28:	58020000 	.word	0x58020000

08008b2c <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008b2c:	f200 41c4 	addw	r1, r0, #1220	; 0x4c4
 8008b30:	f8d0 0508 	ldr.w	r0, [r0, #1288]	; 0x508
 8008b34:	f7ff b986 	b.w	8007e44 <USBD_LL_SetupStage>

08008b38 <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008b38:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 8008b3c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8008b40:	f8d0 0508 	ldr.w	r0, [r0, #1288]	; 0x508
 8008b44:	f8d3 2288 	ldr.w	r2, [r3, #648]	; 0x288
 8008b48:	f7ff b9ac 	b.w	8007ea4 <USBD_LL_DataOutStage>

08008b4c <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008b4c:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 8008b50:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8008b54:	f8d0 0508 	ldr.w	r0, [r0, #1288]	; 0x508
 8008b58:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008b5a:	f7ff b9dd 	b.w	8007f18 <USBD_LL_DataInStage>
 8008b5e:	bf00      	nop

08008b60 <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008b60:	f8d0 0508 	ldr.w	r0, [r0, #1288]	; 0x508
 8008b64:	f7ff ba86 	b.w	8008074 <USBD_LL_SOF>

08008b68 <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8008b68:	6901      	ldr	r1, [r0, #16]
{
 8008b6a:	b510      	push	{r4, lr}
 8008b6c:	4604      	mov	r4, r0
  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8008b6e:	b111      	cbz	r1, 8008b76 <HAL_PCD_ResetCallback+0xe>
  {
    speed = USBD_SPEED_HIGH;
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008b70:	2902      	cmp	r1, #2
 8008b72:	d10a      	bne.n	8008b8a <HAL_PCD_ResetCallback+0x22>
  {
    speed = USBD_SPEED_FULL;
 8008b74:	2101      	movs	r1, #1
  else
  {
    Error_Handler();
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008b76:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
 8008b7a:	f7ff fa5b 	bl	8008034 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008b7e:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
}
 8008b82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008b86:	f7ff ba27 	b.w	8007fd8 <USBD_LL_Reset>
    Error_Handler();
 8008b8a:	f7f8 fa1b 	bl	8000fc4 <Error_Handler>
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008b8e:	2101      	movs	r1, #1
 8008b90:	e7f1      	b.n	8008b76 <HAL_PCD_ResetCallback+0xe>
 8008b92:	bf00      	nop

08008b94 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b94:	b510      	push	{r4, lr}
 8008b96:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008b98:	f8d0 0508 	ldr.w	r0, [r0, #1288]	; 0x508
 8008b9c:	f7ff fa4e 	bl	800803c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008ba0:	6822      	ldr	r2, [r4, #0]
 8008ba2:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 8008ba6:	f043 0301 	orr.w	r3, r3, #1
 8008baa:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008bae:	6a23      	ldr	r3, [r4, #32]
 8008bb0:	b123      	cbz	r3, 8008bbc <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008bb2:	4a03      	ldr	r2, [pc, #12]	; (8008bc0 <HAL_PCD_SuspendCallback+0x2c>)
 8008bb4:	6913      	ldr	r3, [r2, #16]
 8008bb6:	f043 0306 	orr.w	r3, r3, #6
 8008bba:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008bbc:	bd10      	pop	{r4, pc}
 8008bbe:	bf00      	nop
 8008bc0:	e000ed00 	.word	0xe000ed00

08008bc4 <HAL_PCD_ResumeCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008bc4:	f8d0 0508 	ldr.w	r0, [r0, #1288]	; 0x508
 8008bc8:	f7ff ba48 	b.w	800805c <USBD_LL_Resume>

08008bcc <HAL_PCD_ISOOUTIncompleteCallback>:
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008bcc:	f8d0 0508 	ldr.w	r0, [r0, #1288]	; 0x508
 8008bd0:	f7ff ba76 	b.w	80080c0 <USBD_LL_IsoOUTIncomplete>

08008bd4 <HAL_PCD_ISOINIncompleteCallback>:
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008bd4:	f8d0 0508 	ldr.w	r0, [r0, #1288]	; 0x508
 8008bd8:	f7ff ba5c 	b.w	8008094 <USBD_LL_IsoINIncomplete>

08008bdc <HAL_PCD_ConnectCallback>:
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008bdc:	f8d0 0508 	ldr.w	r0, [r0, #1288]	; 0x508
 8008be0:	f7ff ba84 	b.w	80080ec <USBD_LL_DevConnected>

08008be4 <HAL_PCD_DisconnectCallback>:
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008be4:	f8d0 0508 	ldr.w	r0, [r0, #1288]	; 0x508
 8008be8:	f7ff ba82 	b.w	80080f0 <USBD_LL_DevDisconnected>
 8008bec:	0000      	movs	r0, r0
	...

08008bf0 <USBD_LL_Init>:
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 8008bf0:	7802      	ldrb	r2, [r0, #0]
 8008bf2:	2a01      	cmp	r2, #1
 8008bf4:	d001      	beq.n	8008bfa <USBD_LL_Init+0xa>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
}
 8008bf6:	2000      	movs	r0, #0
 8008bf8:	4770      	bx	lr
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8008bfa:	ed9f 7b19 	vldr	d7, [pc, #100]	; 8008c60 <USBD_LL_Init+0x70>
  hpcd_USB_OTG_HS.pData = pdev;
 8008bfe:	4b1c      	ldr	r3, [pc, #112]	; (8008c70 <USBD_LL_Init+0x80>)
  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8008c00:	491c      	ldr	r1, [pc, #112]	; (8008c74 <USBD_LL_Init+0x84>)
{
 8008c02:	b510      	push	{r4, lr}
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8008c04:	ed83 7b06 	vstr	d7, [r3, #24]
 8008c08:	ed9f 7b17 	vldr	d7, [pc, #92]	; 8008c68 <USBD_LL_Init+0x78>
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 8008c0c:	2409      	movs	r4, #9
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = ENABLE;
 8008c0e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8008c10:	6019      	str	r1, [r3, #0]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8008c12:	2200      	movs	r2, #0
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 8008c14:	2102      	movs	r1, #2
  hpcd_USB_OTG_HS.pData = pdev;
 8008c16:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_HS;
 8008c1a:	f8c0 32c8 	str.w	r3, [r0, #712]	; 0x2c8
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8008c1e:	4618      	mov	r0, r3
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 8008c20:	605c      	str	r4, [r3, #4]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8008c22:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8008c24:	635a      	str	r2, [r3, #52]	; 0x34
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8008c26:	ed83 7b08 	vstr	d7, [r3, #32]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 8008c2a:	e9c3 2103 	strd	r2, r1, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8008c2e:	f7fa fd05 	bl	800363c <HAL_PCD_Init>
 8008c32:	b988      	cbnz	r0, 8008c58 <USBD_LL_Init+0x68>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 8008c34:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008c38:	480d      	ldr	r0, [pc, #52]	; (8008c70 <USBD_LL_Init+0x80>)
 8008c3a:	f7fb fcdb 	bl	80045f4 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 8008c3e:	2280      	movs	r2, #128	; 0x80
 8008c40:	2100      	movs	r1, #0
 8008c42:	480b      	ldr	r0, [pc, #44]	; (8008c70 <USBD_LL_Init+0x80>)
 8008c44:	f7fb fcb0 	bl	80045a8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 8008c48:	f44f 72ba 	mov.w	r2, #372	; 0x174
 8008c4c:	2101      	movs	r1, #1
 8008c4e:	4808      	ldr	r0, [pc, #32]	; (8008c70 <USBD_LL_Init+0x80>)
 8008c50:	f7fb fcaa 	bl	80045a8 <HAL_PCDEx_SetTxFiFo>
}
 8008c54:	2000      	movs	r0, #0
 8008c56:	bd10      	pop	{r4, pc}
    Error_Handler( );
 8008c58:	f7f8 f9b4 	bl	8000fc4 <Error_Handler>
 8008c5c:	e7ea      	b.n	8008c34 <USBD_LL_Init+0x44>
 8008c5e:	bf00      	nop
 8008c60:	00000002 	.word	0x00000002
	...
 8008c70:	24001ca8 	.word	0x24001ca8
 8008c74:	40040000 	.word	0x40040000

08008c78 <USBD_LL_Start>:
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_Start(pdev->pData);
 8008c78:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
{
 8008c7c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 8008c7e:	f7fa fd73 	bl	8003768 <HAL_PCD_Start>
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 8008c82:	2803      	cmp	r0, #3
 8008c84:	d802      	bhi.n	8008c8c <USBD_LL_Start+0x14>
 8008c86:	4b02      	ldr	r3, [pc, #8]	; (8008c90 <USBD_LL_Start+0x18>)
 8008c88:	5c18      	ldrb	r0, [r3, r0]
}
 8008c8a:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_Start(pdev->pData);
 8008c8c:	2003      	movs	r0, #3
}
 8008c8e:	bd08      	pop	{r3, pc}
 8008c90:	08023ed0 	.word	0x08023ed0

08008c94 <USBD_LL_OpenEP>:
{
 8008c94:	4694      	mov	ip, r2
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008c96:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
{
 8008c9a:	461a      	mov	r2, r3
 8008c9c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008c9e:	4663      	mov	r3, ip
 8008ca0:	f7fb fb40 	bl	8004324 <HAL_PCD_EP_Open>
  switch (hal_status)
 8008ca4:	2803      	cmp	r0, #3
 8008ca6:	d802      	bhi.n	8008cae <USBD_LL_OpenEP+0x1a>
 8008ca8:	4b02      	ldr	r3, [pc, #8]	; (8008cb4 <USBD_LL_OpenEP+0x20>)
 8008caa:	5c18      	ldrb	r0, [r3, r0]
}
 8008cac:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008cae:	2003      	movs	r0, #3
}
 8008cb0:	bd08      	pop	{r3, pc}
 8008cb2:	bf00      	nop
 8008cb4:	08023ed0 	.word	0x08023ed0

08008cb8 <USBD_LL_CloseEP>:
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008cb8:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
{
 8008cbc:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008cbe:	f7fb fb6f 	bl	80043a0 <HAL_PCD_EP_Close>
  switch (hal_status)
 8008cc2:	2803      	cmp	r0, #3
 8008cc4:	d802      	bhi.n	8008ccc <USBD_LL_CloseEP+0x14>
 8008cc6:	4b02      	ldr	r3, [pc, #8]	; (8008cd0 <USBD_LL_CloseEP+0x18>)
 8008cc8:	5c18      	ldrb	r0, [r3, r0]
}
 8008cca:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008ccc:	2003      	movs	r0, #3
}
 8008cce:	bd08      	pop	{r3, pc}
 8008cd0:	08023ed0 	.word	0x08023ed0

08008cd4 <USBD_LL_StallEP>:
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008cd4:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
{
 8008cd8:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008cda:	f7fb fbe5 	bl	80044a8 <HAL_PCD_EP_SetStall>
  switch (hal_status)
 8008cde:	2803      	cmp	r0, #3
 8008ce0:	d802      	bhi.n	8008ce8 <USBD_LL_StallEP+0x14>
 8008ce2:	4b02      	ldr	r3, [pc, #8]	; (8008cec <USBD_LL_StallEP+0x18>)
 8008ce4:	5c18      	ldrb	r0, [r3, r0]
}
 8008ce6:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008ce8:	2003      	movs	r0, #3
}
 8008cea:	bd08      	pop	{r3, pc}
 8008cec:	08023ed0 	.word	0x08023ed0

08008cf0 <USBD_LL_ClearStallEP>:
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008cf0:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
{
 8008cf4:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008cf6:	f7fb fc1b 	bl	8004530 <HAL_PCD_EP_ClrStall>
  switch (hal_status)
 8008cfa:	2803      	cmp	r0, #3
 8008cfc:	d802      	bhi.n	8008d04 <USBD_LL_ClearStallEP+0x14>
 8008cfe:	4b02      	ldr	r3, [pc, #8]	; (8008d08 <USBD_LL_ClearStallEP+0x18>)
 8008d00:	5c18      	ldrb	r0, [r3, r0]
}
 8008d02:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008d04:	2003      	movs	r0, #3
}
 8008d06:	bd08      	pop	{r3, pc}
 8008d08:	08023ed0 	.word	0x08023ed0

08008d0c <USBD_LL_IsStallEP>:
  if((ep_addr & 0x80) == 0x80)
 8008d0c:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008d0e:	f8d0 32c8 	ldr.w	r3, [r0, #712]	; 0x2c8
  if((ep_addr & 0x80) == 0x80)
 8008d12:	d406      	bmi.n	8008d22 <USBD_LL_IsStallEP+0x16>
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008d14:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8008d18:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8008d1c:	f893 027e 	ldrb.w	r0, [r3, #638]	; 0x27e
}
 8008d20:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008d22:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8008d26:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8008d2a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8008d2e:	f893 003e 	ldrb.w	r0, [r3, #62]	; 0x3e
 8008d32:	4770      	bx	lr

08008d34 <USBD_LL_SetUSBAddress>:
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008d34:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
{
 8008d38:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008d3a:	f7fb fadd 	bl	80042f8 <HAL_PCD_SetAddress>
  switch (hal_status)
 8008d3e:	2803      	cmp	r0, #3
 8008d40:	d802      	bhi.n	8008d48 <USBD_LL_SetUSBAddress+0x14>
 8008d42:	4b02      	ldr	r3, [pc, #8]	; (8008d4c <USBD_LL_SetUSBAddress+0x18>)
 8008d44:	5c18      	ldrb	r0, [r3, r0]
}
 8008d46:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008d48:	2003      	movs	r0, #3
}
 8008d4a:	bd08      	pop	{r3, pc}
 8008d4c:	08023ed0 	.word	0x08023ed0

08008d50 <USBD_LL_Transmit>:
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008d50:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
{
 8008d54:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008d56:	f7fb fb85 	bl	8004464 <HAL_PCD_EP_Transmit>
  switch (hal_status)
 8008d5a:	2803      	cmp	r0, #3
 8008d5c:	d802      	bhi.n	8008d64 <USBD_LL_Transmit+0x14>
 8008d5e:	4b02      	ldr	r3, [pc, #8]	; (8008d68 <USBD_LL_Transmit+0x18>)
 8008d60:	5c18      	ldrb	r0, [r3, r0]
}
 8008d62:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008d64:	2003      	movs	r0, #3
}
 8008d66:	bd08      	pop	{r3, pc}
 8008d68:	08023ed0 	.word	0x08023ed0

08008d6c <USBD_LL_PrepareReceive>:
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008d6c:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
{
 8008d70:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008d72:	f7fb fb4b 	bl	800440c <HAL_PCD_EP_Receive>
  switch (hal_status)
 8008d76:	2803      	cmp	r0, #3
 8008d78:	d802      	bhi.n	8008d80 <USBD_LL_PrepareReceive+0x14>
 8008d7a:	4b02      	ldr	r3, [pc, #8]	; (8008d84 <USBD_LL_PrepareReceive+0x18>)
 8008d7c:	5c18      	ldrb	r0, [r3, r0]
}
 8008d7e:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008d80:	2003      	movs	r0, #3
}
 8008d82:	bd08      	pop	{r3, pc}
 8008d84:	08023ed0 	.word	0x08023ed0

08008d88 <USBD_LL_GetRxDataSize>:
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008d88:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
 8008d8c:	f7fb bb60 	b.w	8004450 <HAL_PCD_EP_GetRxCount>

08008d90 <USBD_static_malloc>:
}
 8008d90:	4800      	ldr	r0, [pc, #0]	; (8008d94 <USBD_static_malloc+0x4>)
 8008d92:	4770      	bx	lr
 8008d94:	240021b4 	.word	0x240021b4

08008d98 <USBD_static_free>:
}
 8008d98:	4770      	bx	lr
 8008d9a:	bf00      	nop

08008d9c <arm_q15_to_float>:
 8008d9c:	b470      	push	{r4, r5, r6}
 8008d9e:	0896      	lsrs	r6, r2, #2
 8008da0:	d038      	beq.n	8008e14 <arm_q15_to_float+0x78>
 8008da2:	f100 0408 	add.w	r4, r0, #8
 8008da6:	f101 0310 	add.w	r3, r1, #16
 8008daa:	4635      	mov	r5, r6
 8008dac:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8008e68 <arm_q15_to_float+0xcc>
 8008db0:	f934 cc08 	ldrsh.w	ip, [r4, #-8]
 8008db4:	3d01      	subs	r5, #1
 8008db6:	f104 0408 	add.w	r4, r4, #8
 8008dba:	f103 0310 	add.w	r3, r3, #16
 8008dbe:	ee07 ca90 	vmov	s15, ip
 8008dc2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008dc6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008dca:	ed43 7a08 	vstr	s15, [r3, #-32]	; 0xffffffe0
 8008dce:	f934 cc0e 	ldrsh.w	ip, [r4, #-14]
 8008dd2:	ee07 ca90 	vmov	s15, ip
 8008dd6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008dda:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008dde:	ed43 7a07 	vstr	s15, [r3, #-28]	; 0xffffffe4
 8008de2:	f934 cc0c 	ldrsh.w	ip, [r4, #-12]
 8008de6:	ee07 ca90 	vmov	s15, ip
 8008dea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008dee:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008df2:	ed43 7a06 	vstr	s15, [r3, #-24]	; 0xffffffe8
 8008df6:	f934 cc0a 	ldrsh.w	ip, [r4, #-10]
 8008dfa:	ee07 ca90 	vmov	s15, ip
 8008dfe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008e02:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008e06:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 8008e0a:	d1d1      	bne.n	8008db0 <arm_q15_to_float+0x14>
 8008e0c:	eb01 1106 	add.w	r1, r1, r6, lsl #4
 8008e10:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
 8008e14:	f012 0203 	ands.w	r2, r2, #3
 8008e18:	d023      	beq.n	8008e62 <arm_q15_to_float+0xc6>
 8008e1a:	f9b0 3000 	ldrsh.w	r3, [r0]
 8008e1e:	3a01      	subs	r2, #1
 8008e20:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8008e68 <arm_q15_to_float+0xcc>
 8008e24:	ee07 3a90 	vmov	s15, r3
 8008e28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008e2c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008e30:	edc1 7a00 	vstr	s15, [r1]
 8008e34:	d015      	beq.n	8008e62 <arm_q15_to_float+0xc6>
 8008e36:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8008e3a:	2a01      	cmp	r2, #1
 8008e3c:	ee07 3a90 	vmov	s15, r3
 8008e40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008e44:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008e48:	edc1 7a01 	vstr	s15, [r1, #4]
 8008e4c:	d009      	beq.n	8008e62 <arm_q15_to_float+0xc6>
 8008e4e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8008e52:	ee07 3a90 	vmov	s15, r3
 8008e56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008e5a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008e5e:	edc1 7a02 	vstr	s15, [r1, #8]
 8008e62:	bc70      	pop	{r4, r5, r6}
 8008e64:	4770      	bx	lr
 8008e66:	bf00      	nop
 8008e68:	38000000 	.word	0x38000000

08008e6c <arm_float_to_q15>:
 8008e6c:	b4f0      	push	{r4, r5, r6, r7}
 8008e6e:	0897      	lsrs	r7, r2, #2
 8008e70:	d063      	beq.n	8008f3a <arm_float_to_q15+0xce>
 8008e72:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8008e76:	f100 0410 	add.w	r4, r0, #16
 8008e7a:	eefe 5a00 	vmov.f32	s11, #224	; 0xbf000000 -0.5
 8008e7e:	f101 0508 	add.w	r5, r1, #8
 8008e82:	463e      	mov	r6, r7
 8008e84:	eddf 6a51 	vldr	s13, [pc, #324]	; 8008fcc <arm_float_to_q15+0x160>
 8008e88:	ed54 7a04 	vldr	s15, [r4, #-16]
 8008e8c:	3508      	adds	r5, #8
 8008e8e:	3410      	adds	r4, #16
 8008e90:	ee27 7aa6 	vmul.f32	s14, s15, s13
 8008e94:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8008e98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e9c:	fe76 7a25 	vselgt.f32	s15, s12, s11
 8008ea0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008ea4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008ea8:	ee17 3a90 	vmov	r3, s15
 8008eac:	f303 030f 	ssat	r3, #16, r3
 8008eb0:	f825 3c10 	strh.w	r3, [r5, #-16]
 8008eb4:	ed54 7a07 	vldr	s15, [r4, #-28]	; 0xffffffe4
 8008eb8:	ee27 7aa6 	vmul.f32	s14, s15, s13
 8008ebc:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8008ec0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ec4:	fe76 7a25 	vselgt.f32	s15, s12, s11
 8008ec8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008ecc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008ed0:	ee17 3a90 	vmov	r3, s15
 8008ed4:	f303 030f 	ssat	r3, #16, r3
 8008ed8:	f825 3c0e 	strh.w	r3, [r5, #-14]
 8008edc:	ed54 7a06 	vldr	s15, [r4, #-24]	; 0xffffffe8
 8008ee0:	ee27 7aa6 	vmul.f32	s14, s15, s13
 8008ee4:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8008ee8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008eec:	fe76 7a25 	vselgt.f32	s15, s12, s11
 8008ef0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008ef4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008ef8:	ee17 3a90 	vmov	r3, s15
 8008efc:	f303 030f 	ssat	r3, #16, r3
 8008f00:	f825 3c0c 	strh.w	r3, [r5, #-12]
 8008f04:	ed54 7a05 	vldr	s15, [r4, #-20]	; 0xffffffec
 8008f08:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008f0c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008f10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f14:	bfcc      	ite	gt
 8008f16:	ee77 7a86 	vaddgt.f32	s15, s15, s12
 8008f1a:	ee77 7ac6 	vsuble.f32	s15, s15, s12
 8008f1e:	3e01      	subs	r6, #1
 8008f20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008f24:	ee17 3a90 	vmov	r3, s15
 8008f28:	f303 030f 	ssat	r3, #16, r3
 8008f2c:	f825 3c0a 	strh.w	r3, [r5, #-10]
 8008f30:	d1aa      	bne.n	8008e88 <arm_float_to_q15+0x1c>
 8008f32:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 8008f36:	eb00 1007 	add.w	r0, r0, r7, lsl #4
 8008f3a:	f012 0203 	ands.w	r2, r2, #3
 8008f3e:	d042      	beq.n	8008fc6 <arm_float_to_q15+0x15a>
 8008f40:	edd0 7a00 	vldr	s15, [r0]
 8008f44:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8008f48:	eddf 5a20 	vldr	s11, [pc, #128]	; 8008fcc <arm_float_to_q15+0x160>
 8008f4c:	eebe 6a00 	vmov.f32	s12, #224	; 0xbf000000 -0.5
 8008f50:	ee67 6aa5 	vmul.f32	s13, s15, s11
 8008f54:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8008f58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f5c:	fe77 7a06 	vselgt.f32	s15, s14, s12
 8008f60:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f64:	3a01      	subs	r2, #1
 8008f66:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008f6a:	ee17 3a90 	vmov	r3, s15
 8008f6e:	f303 030f 	ssat	r3, #16, r3
 8008f72:	800b      	strh	r3, [r1, #0]
 8008f74:	d027      	beq.n	8008fc6 <arm_float_to_q15+0x15a>
 8008f76:	edd0 7a01 	vldr	s15, [r0, #4]
 8008f7a:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8008f7e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008f82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f86:	fe77 6a06 	vselgt.f32	s13, s14, s12
 8008f8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f8e:	2a01      	cmp	r2, #1
 8008f90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008f94:	ee17 3a90 	vmov	r3, s15
 8008f98:	f303 030f 	ssat	r3, #16, r3
 8008f9c:	804b      	strh	r3, [r1, #2]
 8008f9e:	d012      	beq.n	8008fc6 <arm_float_to_q15+0x15a>
 8008fa0:	edd0 7a02 	vldr	s15, [r0, #8]
 8008fa4:	ee67 5aa5 	vmul.f32	s11, s15, s11
 8008fa8:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 8008fac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fb0:	fe37 7a06 	vselgt.f32	s14, s14, s12
 8008fb4:	ee37 7a25 	vadd.f32	s14, s14, s11
 8008fb8:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8008fbc:	ee17 3a10 	vmov	r3, s14
 8008fc0:	f303 030f 	ssat	r3, #16, r3
 8008fc4:	808b      	strh	r3, [r1, #4]
 8008fc6:	bcf0      	pop	{r4, r5, r6, r7}
 8008fc8:	4770      	bx	lr
 8008fca:	bf00      	nop
 8008fcc:	47000000 	.word	0x47000000

08008fd0 <arm_rfft_32_fast_init_f32>:
 8008fd0:	b180      	cbz	r0, 8008ff4 <arm_rfft_32_fast_init_f32+0x24>
 8008fd2:	4603      	mov	r3, r0
 8008fd4:	2220      	movs	r2, #32
 8008fd6:	2010      	movs	r0, #16
 8008fd8:	4908      	ldr	r1, [pc, #32]	; (8008ffc <arm_rfft_32_fast_init_f32+0x2c>)
 8008fda:	b430      	push	{r4, r5}
 8008fdc:	2514      	movs	r5, #20
 8008fde:	4c08      	ldr	r4, [pc, #32]	; (8009000 <arm_rfft_32_fast_init_f32+0x30>)
 8008fe0:	821a      	strh	r2, [r3, #16]
 8008fe2:	4a08      	ldr	r2, [pc, #32]	; (8009004 <arm_rfft_32_fast_init_f32+0x34>)
 8008fe4:	8018      	strh	r0, [r3, #0]
 8008fe6:	2000      	movs	r0, #0
 8008fe8:	819d      	strh	r5, [r3, #12]
 8008fea:	615a      	str	r2, [r3, #20]
 8008fec:	e9c3 1401 	strd	r1, r4, [r3, #4]
 8008ff0:	bc30      	pop	{r4, r5}
 8008ff2:	4770      	bx	lr
 8008ff4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008ff8:	4770      	bx	lr
 8008ffa:	bf00      	nop
 8008ffc:	080297bc 	.word	0x080297bc
 8009000:	08024e84 	.word	0x08024e84
 8009004:	0803253c 	.word	0x0803253c

08009008 <arm_rfft_64_fast_init_f32>:
 8009008:	b180      	cbz	r0, 800902c <arm_rfft_64_fast_init_f32+0x24>
 800900a:	4603      	mov	r3, r0
 800900c:	2240      	movs	r2, #64	; 0x40
 800900e:	2020      	movs	r0, #32
 8009010:	4908      	ldr	r1, [pc, #32]	; (8009034 <arm_rfft_64_fast_init_f32+0x2c>)
 8009012:	b430      	push	{r4, r5}
 8009014:	2530      	movs	r5, #48	; 0x30
 8009016:	4c08      	ldr	r4, [pc, #32]	; (8009038 <arm_rfft_64_fast_init_f32+0x30>)
 8009018:	821a      	strh	r2, [r3, #16]
 800901a:	4a08      	ldr	r2, [pc, #32]	; (800903c <arm_rfft_64_fast_init_f32+0x34>)
 800901c:	8018      	strh	r0, [r3, #0]
 800901e:	2000      	movs	r0, #0
 8009020:	819d      	strh	r5, [r3, #12]
 8009022:	615a      	str	r2, [r3, #20]
 8009024:	e9c3 1401 	strd	r1, r4, [r3, #4]
 8009028:	bc30      	pop	{r4, r5}
 800902a:	4770      	bx	lr
 800902c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009030:	4770      	bx	lr
 8009032:	bf00      	nop
 8009034:	0802e03c 	.word	0x0802e03c
 8009038:	08026fdc 	.word	0x08026fdc
 800903c:	08036dbc 	.word	0x08036dbc

08009040 <arm_rfft_256_fast_init_f32>:
 8009040:	b188      	cbz	r0, 8009066 <arm_rfft_256_fast_init_f32+0x26>
 8009042:	4603      	mov	r3, r0
 8009044:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009048:	2080      	movs	r0, #128	; 0x80
 800904a:	4908      	ldr	r1, [pc, #32]	; (800906c <arm_rfft_256_fast_init_f32+0x2c>)
 800904c:	b430      	push	{r4, r5}
 800904e:	25d0      	movs	r5, #208	; 0xd0
 8009050:	4c07      	ldr	r4, [pc, #28]	; (8009070 <arm_rfft_256_fast_init_f32+0x30>)
 8009052:	821a      	strh	r2, [r3, #16]
 8009054:	4a07      	ldr	r2, [pc, #28]	; (8009074 <arm_rfft_256_fast_init_f32+0x34>)
 8009056:	8018      	strh	r0, [r3, #0]
 8009058:	2000      	movs	r0, #0
 800905a:	819d      	strh	r5, [r3, #12]
 800905c:	615a      	str	r2, [r3, #20]
 800905e:	e9c3 1401 	strd	r1, r4, [r3, #4]
 8009062:	bc30      	pop	{r4, r5}
 8009064:	4770      	bx	lr
 8009066:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800906a:	4770      	bx	lr
 800906c:	080293bc 	.word	0x080293bc
 8009070:	08024ce4 	.word	0x08024ce4
 8009074:	0803213c 	.word	0x0803213c

08009078 <arm_rfft_512_fast_init_f32>:
 8009078:	b198      	cbz	r0, 80090a2 <arm_rfft_512_fast_init_f32+0x2a>
 800907a:	4603      	mov	r3, r0
 800907c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009080:	f44f 7080 	mov.w	r0, #256	; 0x100
 8009084:	4908      	ldr	r1, [pc, #32]	; (80090a8 <arm_rfft_512_fast_init_f32+0x30>)
 8009086:	b430      	push	{r4, r5}
 8009088:	f44f 75dc 	mov.w	r5, #440	; 0x1b8
 800908c:	4c07      	ldr	r4, [pc, #28]	; (80090ac <arm_rfft_512_fast_init_f32+0x34>)
 800908e:	821a      	strh	r2, [r3, #16]
 8009090:	4a07      	ldr	r2, [pc, #28]	; (80090b0 <arm_rfft_512_fast_init_f32+0x38>)
 8009092:	8018      	strh	r0, [r3, #0]
 8009094:	2000      	movs	r0, #0
 8009096:	819d      	strh	r5, [r3, #12]
 8009098:	615a      	str	r2, [r3, #20]
 800909a:	e9c3 1401 	strd	r1, r4, [r3, #4]
 800909e:	bc30      	pop	{r4, r5}
 80090a0:	4770      	bx	lr
 80090a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80090a6:	4770      	bx	lr
 80090a8:	0802d83c 	.word	0x0802d83c
 80090ac:	08026c6c 	.word	0x08026c6c
 80090b0:	080365bc 	.word	0x080365bc

080090b4 <arm_rfft_1024_fast_init_f32>:
 80090b4:	b198      	cbz	r0, 80090de <arm_rfft_1024_fast_init_f32+0x2a>
 80090b6:	4603      	mov	r3, r0
 80090b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80090bc:	f44f 7000 	mov.w	r0, #512	; 0x200
 80090c0:	4908      	ldr	r1, [pc, #32]	; (80090e4 <arm_rfft_1024_fast_init_f32+0x30>)
 80090c2:	b430      	push	{r4, r5}
 80090c4:	f44f 75e0 	mov.w	r5, #448	; 0x1c0
 80090c8:	4c07      	ldr	r4, [pc, #28]	; (80090e8 <arm_rfft_1024_fast_init_f32+0x34>)
 80090ca:	821a      	strh	r2, [r3, #16]
 80090cc:	4a07      	ldr	r2, [pc, #28]	; (80090ec <arm_rfft_1024_fast_init_f32+0x38>)
 80090ce:	8018      	strh	r0, [r3, #0]
 80090d0:	2000      	movs	r0, #0
 80090d2:	819d      	strh	r5, [r3, #12]
 80090d4:	615a      	str	r2, [r3, #20]
 80090d6:	e9c3 1401 	strd	r1, r4, [r3, #4]
 80090da:	bc30      	pop	{r4, r5}
 80090dc:	4770      	bx	lr
 80090de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80090e2:	4770      	bx	lr
 80090e4:	0802e13c 	.word	0x0802e13c
 80090e8:	0802703c 	.word	0x0802703c
 80090ec:	0802f13c 	.word	0x0802f13c

080090f0 <arm_rfft_2048_fast_init_f32>:
 80090f0:	b198      	cbz	r0, 800911a <arm_rfft_2048_fast_init_f32+0x2a>
 80090f2:	4603      	mov	r3, r0
 80090f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80090f8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80090fc:	4908      	ldr	r1, [pc, #32]	; (8009120 <arm_rfft_2048_fast_init_f32+0x30>)
 80090fe:	b430      	push	{r4, r5}
 8009100:	f44f 65e1 	mov.w	r5, #1800	; 0x708
 8009104:	4c07      	ldr	r4, [pc, #28]	; (8009124 <arm_rfft_2048_fast_init_f32+0x34>)
 8009106:	821a      	strh	r2, [r3, #16]
 8009108:	4a07      	ldr	r2, [pc, #28]	; (8009128 <arm_rfft_2048_fast_init_f32+0x38>)
 800910a:	8018      	strh	r0, [r3, #0]
 800910c:	2000      	movs	r0, #0
 800910e:	819d      	strh	r5, [r3, #12]
 8009110:	615a      	str	r2, [r3, #20]
 8009112:	e9c3 1401 	strd	r1, r4, [r3, #4]
 8009116:	bc30      	pop	{r4, r5}
 8009118:	4770      	bx	lr
 800911a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800911e:	4770      	bx	lr
 8009120:	080273bc 	.word	0x080273bc
 8009124:	08023ed4 	.word	0x08023ed4
 8009128:	0803013c 	.word	0x0803013c

0800912c <arm_rfft_4096_fast_init_f32>:
 800912c:	b198      	cbz	r0, 8009156 <arm_rfft_4096_fast_init_f32+0x2a>
 800912e:	4603      	mov	r3, r0
 8009130:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009134:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8009138:	4908      	ldr	r1, [pc, #32]	; (800915c <arm_rfft_4096_fast_init_f32+0x30>)
 800913a:	b430      	push	{r4, r5}
 800913c:	f44f 656e 	mov.w	r5, #3808	; 0xee0
 8009140:	4c07      	ldr	r4, [pc, #28]	; (8009160 <arm_rfft_4096_fast_init_f32+0x34>)
 8009142:	821a      	strh	r2, [r3, #16]
 8009144:	4a07      	ldr	r2, [pc, #28]	; (8009164 <arm_rfft_4096_fast_init_f32+0x38>)
 8009146:	8018      	strh	r0, [r3, #0]
 8009148:	2000      	movs	r0, #0
 800914a:	819d      	strh	r5, [r3, #12]
 800914c:	615a      	str	r2, [r3, #20]
 800914e:	e9c3 1401 	strd	r1, r4, [r3, #4]
 8009152:	bc30      	pop	{r4, r5}
 8009154:	4770      	bx	lr
 8009156:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800915a:	4770      	bx	lr
 800915c:	0802983c 	.word	0x0802983c
 8009160:	08024eac 	.word	0x08024eac
 8009164:	080325bc 	.word	0x080325bc

08009168 <arm_rfft_fast_init_f32>:
 8009168:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800916c:	d01f      	beq.n	80091ae <arm_rfft_fast_init_f32+0x46>
 800916e:	d90b      	bls.n	8009188 <arm_rfft_fast_init_f32+0x20>
 8009170:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8009174:	d019      	beq.n	80091aa <arm_rfft_fast_init_f32+0x42>
 8009176:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800917a:	d012      	beq.n	80091a2 <arm_rfft_fast_init_f32+0x3a>
 800917c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8009180:	d00d      	beq.n	800919e <arm_rfft_fast_init_f32+0x36>
 8009182:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009186:	4770      	bx	lr
 8009188:	2940      	cmp	r1, #64	; 0x40
 800918a:	d00c      	beq.n	80091a6 <arm_rfft_fast_init_f32+0x3e>
 800918c:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8009190:	d003      	beq.n	800919a <arm_rfft_fast_init_f32+0x32>
 8009192:	2920      	cmp	r1, #32
 8009194:	d1f5      	bne.n	8009182 <arm_rfft_fast_init_f32+0x1a>
 8009196:	4b07      	ldr	r3, [pc, #28]	; (80091b4 <arm_rfft_fast_init_f32+0x4c>)
 8009198:	4718      	bx	r3
 800919a:	4b07      	ldr	r3, [pc, #28]	; (80091b8 <arm_rfft_fast_init_f32+0x50>)
 800919c:	4718      	bx	r3
 800919e:	4b07      	ldr	r3, [pc, #28]	; (80091bc <arm_rfft_fast_init_f32+0x54>)
 80091a0:	4718      	bx	r3
 80091a2:	4b07      	ldr	r3, [pc, #28]	; (80091c0 <arm_rfft_fast_init_f32+0x58>)
 80091a4:	4718      	bx	r3
 80091a6:	4b07      	ldr	r3, [pc, #28]	; (80091c4 <arm_rfft_fast_init_f32+0x5c>)
 80091a8:	e7f6      	b.n	8009198 <arm_rfft_fast_init_f32+0x30>
 80091aa:	4b07      	ldr	r3, [pc, #28]	; (80091c8 <arm_rfft_fast_init_f32+0x60>)
 80091ac:	e7f4      	b.n	8009198 <arm_rfft_fast_init_f32+0x30>
 80091ae:	4b07      	ldr	r3, [pc, #28]	; (80091cc <arm_rfft_fast_init_f32+0x64>)
 80091b0:	e7f2      	b.n	8009198 <arm_rfft_fast_init_f32+0x30>
 80091b2:	bf00      	nop
 80091b4:	08008fd1 	.word	0x08008fd1
 80091b8:	08009041 	.word	0x08009041
 80091bc:	080090b5 	.word	0x080090b5
 80091c0:	0800912d 	.word	0x0800912d
 80091c4:	08009009 	.word	0x08009009
 80091c8:	080090f1 	.word	0x080090f1
 80091cc:	08009079 	.word	0x08009079

080091d0 <stage_rfft_f32>:
 80091d0:	b470      	push	{r4, r5, r6}
 80091d2:	edd1 7a00 	vldr	s15, [r1]
 80091d6:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80091da:	ed91 7a01 	vldr	s14, [r1, #4]
 80091de:	f101 0510 	add.w	r5, r1, #16
 80091e2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80091e6:	8806      	ldrh	r6, [r0, #0]
 80091e8:	ee37 7a07 	vadd.f32	s14, s14, s14
 80091ec:	6943      	ldr	r3, [r0, #20]
 80091ee:	1e70      	subs	r0, r6, #1
 80091f0:	eeb0 4a46 	vmov.f32	s8, s12
 80091f4:	f102 0410 	add.w	r4, r2, #16
 80091f8:	3310      	adds	r3, #16
 80091fa:	ee77 6a87 	vadd.f32	s13, s15, s14
 80091fe:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8009202:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009206:	3908      	subs	r1, #8
 8009208:	ee26 7a86 	vmul.f32	s14, s13, s12
 800920c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8009210:	ed82 7a00 	vstr	s14, [r2]
 8009214:	edc2 7a01 	vstr	s15, [r2, #4]
 8009218:	ed15 6a02 	vldr	s12, [r5, #-8]
 800921c:	3801      	subs	r0, #1
 800921e:	ed91 7a02 	vldr	s14, [r1, #8]
 8009222:	f105 0508 	add.w	r5, r5, #8
 8009226:	ed53 6a02 	vldr	s13, [r3, #-8]
 800922a:	f1a1 0108 	sub.w	r1, r1, #8
 800922e:	ee77 5a46 	vsub.f32	s11, s14, s12
 8009232:	edd1 4a05 	vldr	s9, [r1, #20]
 8009236:	ed55 7a03 	vldr	s15, [r5, #-12]
 800923a:	ee37 7a06 	vadd.f32	s14, s14, s12
 800923e:	ed13 6a01 	vldr	s12, [r3, #-4]
 8009242:	f104 0408 	add.w	r4, r4, #8
 8009246:	ee66 3aa5 	vmul.f32	s7, s13, s11
 800924a:	f103 0308 	add.w	r3, r3, #8
 800924e:	ee34 5aa7 	vadd.f32	s10, s9, s15
 8009252:	ee66 5a25 	vmul.f32	s11, s12, s11
 8009256:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800925a:	ee37 7a23 	vadd.f32	s14, s14, s7
 800925e:	ee66 6a85 	vmul.f32	s13, s13, s10
 8009262:	ee26 6a05 	vmul.f32	s12, s12, s10
 8009266:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800926a:	ee37 7a06 	vadd.f32	s14, s14, s12
 800926e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009272:	ee27 7a04 	vmul.f32	s14, s14, s8
 8009276:	ee67 7a84 	vmul.f32	s15, s15, s8
 800927a:	ed04 7a04 	vstr	s14, [r4, #-16]
 800927e:	ed44 7a03 	vstr	s15, [r4, #-12]
 8009282:	d1c9      	bne.n	8009218 <stage_rfft_f32+0x48>
 8009284:	bc70      	pop	{r4, r5, r6}
 8009286:	4770      	bx	lr

08009288 <merge_rfft_f32>:
 8009288:	b410      	push	{r4}
 800928a:	edd1 7a00 	vldr	s15, [r1]
 800928e:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 8009292:	edd1 6a01 	vldr	s13, [r1, #4]
 8009296:	8804      	ldrh	r4, [r0, #0]
 8009298:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800929c:	6940      	ldr	r0, [r0, #20]
 800929e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80092a2:	3c01      	subs	r4, #1
 80092a4:	ee27 7a04 	vmul.f32	s14, s14, s8
 80092a8:	ee67 7a84 	vmul.f32	s15, s15, s8
 80092ac:	ed82 7a00 	vstr	s14, [r2]
 80092b0:	edc2 7a01 	vstr	s15, [r2, #4]
 80092b4:	b3dc      	cbz	r4, 800932e <merge_rfft_f32+0xa6>
 80092b6:	00e3      	lsls	r3, r4, #3
 80092b8:	3010      	adds	r0, #16
 80092ba:	3210      	adds	r2, #16
 80092bc:	3b08      	subs	r3, #8
 80092be:	440b      	add	r3, r1
 80092c0:	3110      	adds	r1, #16
 80092c2:	ed11 6a02 	vldr	s12, [r1, #-8]
 80092c6:	3c01      	subs	r4, #1
 80092c8:	ed93 7a02 	vldr	s14, [r3, #8]
 80092cc:	f101 0108 	add.w	r1, r1, #8
 80092d0:	ed50 6a02 	vldr	s13, [r0, #-8]
 80092d4:	f1a3 0308 	sub.w	r3, r3, #8
 80092d8:	ee76 5a47 	vsub.f32	s11, s12, s14
 80092dc:	edd3 4a05 	vldr	s9, [r3, #20]
 80092e0:	ed51 7a03 	vldr	s15, [r1, #-12]
 80092e4:	ee37 7a06 	vadd.f32	s14, s14, s12
 80092e8:	ed10 6a01 	vldr	s12, [r0, #-4]
 80092ec:	f102 0208 	add.w	r2, r2, #8
 80092f0:	ee66 3aa5 	vmul.f32	s7, s13, s11
 80092f4:	f100 0008 	add.w	r0, r0, #8
 80092f8:	ee34 5aa7 	vadd.f32	s10, s9, s15
 80092fc:	ee66 5a25 	vmul.f32	s11, s12, s11
 8009300:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8009304:	ee37 7a63 	vsub.f32	s14, s14, s7
 8009308:	ee66 6a85 	vmul.f32	s13, s13, s10
 800930c:	ee26 6a05 	vmul.f32	s12, s12, s10
 8009310:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8009314:	ee37 7a46 	vsub.f32	s14, s14, s12
 8009318:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800931c:	ee27 7a04 	vmul.f32	s14, s14, s8
 8009320:	ee67 7a84 	vmul.f32	s15, s15, s8
 8009324:	ed02 7a04 	vstr	s14, [r2, #-16]
 8009328:	ed42 7a03 	vstr	s15, [r2, #-12]
 800932c:	d1c9      	bne.n	80092c2 <merge_rfft_f32+0x3a>
 800932e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009332:	4770      	bx	lr

08009334 <arm_rfft_fast_f32>:
 8009334:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009338:	8a05      	ldrh	r5, [r0, #16]
 800933a:	4604      	mov	r4, r0
 800933c:	4617      	mov	r7, r2
 800933e:	461e      	mov	r6, r3
 8009340:	086d      	lsrs	r5, r5, #1
 8009342:	8005      	strh	r5, [r0, #0]
 8009344:	b14b      	cbz	r3, 800935a <arm_rfft_fast_f32+0x26>
 8009346:	f7ff ff9f 	bl	8009288 <merge_rfft_f32>
 800934a:	4632      	mov	r2, r6
 800934c:	4639      	mov	r1, r7
 800934e:	4620      	mov	r0, r4
 8009350:	2301      	movs	r3, #1
 8009352:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009356:	f000 bb35 	b.w	80099c4 <arm_cfft_f32>
 800935a:	4688      	mov	r8, r1
 800935c:	461a      	mov	r2, r3
 800935e:	2301      	movs	r3, #1
 8009360:	f000 fb30 	bl	80099c4 <arm_cfft_f32>
 8009364:	463a      	mov	r2, r7
 8009366:	4641      	mov	r1, r8
 8009368:	4620      	mov	r0, r4
 800936a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800936e:	f7ff bf2f 	b.w	80091d0 <stage_rfft_f32>
 8009372:	bf00      	nop

08009374 <arm_cfft_radix8by2_f32>:
 8009374:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009378:	4607      	mov	r7, r0
 800937a:	4608      	mov	r0, r1
 800937c:	ed2d 8b06 	vpush	{d8-d10}
 8009380:	f8b7 c000 	ldrh.w	ip, [r7]
 8009384:	687a      	ldr	r2, [r7, #4]
 8009386:	ea4f 015c 	mov.w	r1, ip, lsr #1
 800938a:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 800938e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8009392:	f000 80ac 	beq.w	80094ee <arm_cfft_radix8by2_f32+0x17a>
 8009396:	008c      	lsls	r4, r1, #2
 8009398:	f100 0310 	add.w	r3, r0, #16
 800939c:	3210      	adds	r2, #16
 800939e:	f108 0610 	add.w	r6, r8, #16
 80093a2:	3410      	adds	r4, #16
 80093a4:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 80093a8:	1905      	adds	r5, r0, r4
 80093aa:	4444      	add	r4, r8
 80093ac:	ed16 7a04 	vldr	s14, [r6, #-16]
 80093b0:	3310      	adds	r3, #16
 80093b2:	ed53 4a08 	vldr	s9, [r3, #-32]	; 0xffffffe0
 80093b6:	3510      	adds	r5, #16
 80093b8:	ed56 0a03 	vldr	s1, [r6, #-12]
 80093bc:	3210      	adds	r2, #16
 80093be:	ee74 9a87 	vadd.f32	s19, s9, s14
 80093c2:	ed56 7a02 	vldr	s15, [r6, #-8]
 80093c6:	ed56 2a01 	vldr	s5, [r6, #-4]
 80093ca:	ee74 4ac7 	vsub.f32	s9, s9, s14
 80093ce:	ed54 5a04 	vldr	s11, [r4, #-16]
 80093d2:	3610      	adds	r6, #16
 80093d4:	ed14 5a03 	vldr	s10, [r4, #-12]
 80093d8:	3410      	adds	r4, #16
 80093da:	ed14 3a06 	vldr	s6, [r4, #-24]	; 0xffffffe8
 80093de:	ed13 2a05 	vldr	s4, [r3, #-20]	; 0xffffffec
 80093e2:	ed55 6a08 	vldr	s13, [r5, #-32]	; 0xffffffe0
 80093e6:	ed55 3a06 	vldr	s7, [r5, #-24]	; 0xffffffe8
 80093ea:	ed15 4a05 	vldr	s8, [r5, #-20]	; 0xffffffec
 80093ee:	ee36 9aa5 	vadd.f32	s18, s13, s11
 80093f2:	ed14 6a05 	vldr	s12, [r4, #-20]	; 0xffffffec
 80093f6:	ee33 8a83 	vadd.f32	s16, s7, s6
 80093fa:	ed13 7a07 	vldr	s14, [r3, #-28]	; 0xffffffe4
 80093fe:	ee75 5ae6 	vsub.f32	s11, s11, s13
 8009402:	ed53 1a06 	vldr	s3, [r3, #-24]	; 0xffffffe8
 8009406:	ee34 0a06 	vadd.f32	s0, s8, s12
 800940a:	ed15 1a07 	vldr	s2, [r5, #-28]	; 0xffffffe4
 800940e:	ee77 aa20 	vadd.f32	s21, s14, s1
 8009412:	ed43 9a08 	vstr	s19, [r3, #-32]	; 0xffffffe0
 8009416:	ee31 aaa7 	vadd.f32	s20, s3, s15
 800941a:	ee72 9a22 	vadd.f32	s19, s4, s5
 800941e:	ee71 8a05 	vadd.f32	s17, s2, s10
 8009422:	ed43 aa07 	vstr	s21, [r3, #-28]	; 0xffffffe4
 8009426:	ee37 7a60 	vsub.f32	s14, s14, s1
 800942a:	ed03 aa06 	vstr	s20, [r3, #-24]	; 0xffffffe8
 800942e:	ee35 5a41 	vsub.f32	s10, s10, s2
 8009432:	ed43 9a05 	vstr	s19, [r3, #-20]	; 0xffffffec
 8009436:	ee36 6a44 	vsub.f32	s12, s12, s8
 800943a:	ed05 9a08 	vstr	s18, [r5, #-32]	; 0xffffffe0
 800943e:	ed45 8a07 	vstr	s17, [r5, #-28]	; 0xffffffe4
 8009442:	ee71 1ae7 	vsub.f32	s3, s3, s15
 8009446:	ed05 8a06 	vstr	s16, [r5, #-24]	; 0xffffffe8
 800944a:	ee72 7a62 	vsub.f32	s15, s4, s5
 800944e:	ed05 0a05 	vstr	s0, [r5, #-20]	; 0xffffffec
 8009452:	ee73 2a63 	vsub.f32	s5, s6, s7
 8009456:	ed12 4a08 	vldr	s8, [r2, #-32]	; 0xffffffe0
 800945a:	4563      	cmp	r3, ip
 800945c:	ed52 6a07 	vldr	s13, [r2, #-28]	; 0xffffffe4
 8009460:	ee24 3a84 	vmul.f32	s6, s9, s8
 8009464:	ee27 2a26 	vmul.f32	s4, s14, s13
 8009468:	ee64 4aa6 	vmul.f32	s9, s9, s13
 800946c:	ee65 3aa6 	vmul.f32	s7, s11, s13
 8009470:	ee27 7a04 	vmul.f32	s14, s14, s8
 8009474:	ee65 5a84 	vmul.f32	s11, s11, s8
 8009478:	ee65 6a26 	vmul.f32	s13, s10, s13
 800947c:	ee25 5a04 	vmul.f32	s10, s10, s8
 8009480:	ee37 7a64 	vsub.f32	s14, s14, s9
 8009484:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8009488:	ee33 4a02 	vadd.f32	s8, s6, s4
 800948c:	ee33 5ac5 	vsub.f32	s10, s7, s10
 8009490:	ed06 7a07 	vstr	s14, [r6, #-28]	; 0xffffffe4
 8009494:	ed06 4a08 	vstr	s8, [r6, #-32]	; 0xffffffe0
 8009498:	ed04 5a08 	vstr	s10, [r4, #-32]	; 0xffffffe0
 800949c:	ed44 6a07 	vstr	s13, [r4, #-28]	; 0xffffffe4
 80094a0:	ed52 6a06 	vldr	s13, [r2, #-24]	; 0xffffffe8
 80094a4:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
 80094a8:	ee61 4aa6 	vmul.f32	s9, s3, s13
 80094ac:	ee27 4a87 	vmul.f32	s8, s15, s14
 80094b0:	ee61 5a87 	vmul.f32	s11, s3, s14
 80094b4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80094b8:	ee22 5a87 	vmul.f32	s10, s5, s14
 80094bc:	ee26 7a07 	vmul.f32	s14, s12, s14
 80094c0:	ee26 6a26 	vmul.f32	s12, s12, s13
 80094c4:	ee62 6aa6 	vmul.f32	s13, s5, s13
 80094c8:	ee74 4a84 	vadd.f32	s9, s9, s8
 80094cc:	ee77 7ae5 	vsub.f32	s15, s15, s11
 80094d0:	ee35 6a46 	vsub.f32	s12, s10, s12
 80094d4:	ee37 7a26 	vadd.f32	s14, s14, s13
 80094d8:	ed46 4a06 	vstr	s9, [r6, #-24]	; 0xffffffe8
 80094dc:	ed46 7a05 	vstr	s15, [r6, #-20]	; 0xffffffec
 80094e0:	ed04 6a06 	vstr	s12, [r4, #-24]	; 0xffffffe8
 80094e4:	ed04 7a05 	vstr	s14, [r4, #-20]	; 0xffffffec
 80094e8:	f47f af60 	bne.w	80093ac <arm_cfft_radix8by2_f32+0x38>
 80094ec:	687a      	ldr	r2, [r7, #4]
 80094ee:	b28c      	uxth	r4, r1
 80094f0:	2302      	movs	r3, #2
 80094f2:	4621      	mov	r1, r4
 80094f4:	f000 ff3a 	bl	800a36c <arm_radix8_butterfly_f32>
 80094f8:	4621      	mov	r1, r4
 80094fa:	687a      	ldr	r2, [r7, #4]
 80094fc:	4640      	mov	r0, r8
 80094fe:	2302      	movs	r3, #2
 8009500:	ecbd 8b06 	vpop	{d8-d10}
 8009504:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009508:	f000 bf30 	b.w	800a36c <arm_radix8_butterfly_f32>

0800950c <arm_cfft_radix8by4_f32>:
 800950c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009510:	ed2d 8b04 	vpush	{d8-d9}
 8009514:	8804      	ldrh	r4, [r0, #0]
 8009516:	b08d      	sub	sp, #52	; 0x34
 8009518:	6842      	ldr	r2, [r0, #4]
 800951a:	460d      	mov	r5, r1
 800951c:	0864      	lsrs	r4, r4, #1
 800951e:	edd1 7a00 	vldr	s15, [r1]
 8009522:	edd1 5a01 	vldr	s11, [r1, #4]
 8009526:	00a3      	lsls	r3, r4, #2
 8009528:	18ce      	adds	r6, r1, r3
 800952a:	18f7      	adds	r7, r6, r3
 800952c:	ed96 7a00 	vldr	s14, [r6]
 8009530:	ed96 4a01 	vldr	s8, [r6, #4]
 8009534:	ed97 6a00 	vldr	s12, [r7]
 8009538:	edd7 4a01 	vldr	s9, [r7, #4]
 800953c:	ee77 6a86 	vadd.f32	s13, s15, s12
 8009540:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8009544:	ee35 6aa4 	vadd.f32	s12, s11, s9
 8009548:	ee77 2a26 	vadd.f32	s5, s14, s13
 800954c:	ee75 5ae4 	vsub.f32	s11, s11, s9
 8009550:	ee74 3a27 	vadd.f32	s7, s8, s15
 8009554:	ee76 4a44 	vsub.f32	s9, s12, s8
 8009558:	ee76 6ac7 	vsub.f32	s13, s13, s14
 800955c:	ee77 7ac4 	vsub.f32	s15, s15, s8
 8009560:	ee35 4ac7 	vsub.f32	s8, s11, s14
 8009564:	ee37 7a25 	vadd.f32	s14, s14, s11
 8009568:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800956c:	0860      	lsrs	r0, r4, #1
 800956e:	f102 0408 	add.w	r4, r2, #8
 8009572:	9405      	str	r4, [sp, #20]
 8009574:	f102 0410 	add.w	r4, r2, #16
 8009578:	9009      	str	r0, [sp, #36]	; 0x24
 800957a:	f1a0 0902 	sub.w	r9, r0, #2
 800957e:	9403      	str	r4, [sp, #12]
 8009580:	18fc      	adds	r4, r7, r3
 8009582:	f102 0018 	add.w	r0, r2, #24
 8009586:	ed94 5a00 	vldr	s10, [r4]
 800958a:	ed94 3a01 	vldr	s6, [r4, #4]
 800958e:	ee72 2a85 	vadd.f32	s5, s5, s10
 8009592:	9004      	str	r0, [sp, #16]
 8009594:	ee73 3ac3 	vsub.f32	s7, s7, s6
 8009598:	4620      	mov	r0, r4
 800959a:	ee76 6ac5 	vsub.f32	s13, s13, s10
 800959e:	9408      	str	r4, [sp, #32]
 80095a0:	ee12 ca90 	vmov	ip, s5
 80095a4:	ee74 5ac3 	vsub.f32	s11, s9, s6
 80095a8:	ee77 7a83 	vadd.f32	s15, s15, s6
 80095ac:	f845 cb08 	str.w	ip, [r5], #8
 80095b0:	ee13 ca90 	vmov	ip, s7
 80095b4:	ed96 2a01 	vldr	s4, [r6, #4]
 80095b8:	ee74 4a05 	vadd.f32	s9, s8, s10
 80095bc:	edd4 2a01 	vldr	s5, [r4, #4]
 80095c0:	ee37 7a45 	vsub.f32	s14, s14, s10
 80095c4:	ee36 6a02 	vadd.f32	s12, s12, s4
 80095c8:	9500      	str	r5, [sp, #0]
 80095ca:	460d      	mov	r5, r1
 80095cc:	ee36 6a22 	vadd.f32	s12, s12, s5
 80095d0:	ed81 6a01 	vstr	s12, [r1, #4]
 80095d4:	4631      	mov	r1, r6
 80095d6:	f841 cb08 	str.w	ip, [r1], #8
 80095da:	ee16 ca90 	vmov	ip, s13
 80095de:	9106      	str	r1, [sp, #24]
 80095e0:	4639      	mov	r1, r7
 80095e2:	edc6 4a01 	vstr	s9, [r6, #4]
 80095e6:	f841 cb08 	str.w	ip, [r1], #8
 80095ea:	9102      	str	r1, [sp, #8]
 80095ec:	ee17 1a90 	vmov	r1, s15
 80095f0:	edc7 5a01 	vstr	s11, [r7, #4]
 80095f4:	f840 1b08 	str.w	r1, [r0], #8
 80095f8:	ea5f 0159 	movs.w	r1, r9, lsr #1
 80095fc:	9001      	str	r0, [sp, #4]
 80095fe:	ed84 7a01 	vstr	s14, [r4, #4]
 8009602:	9107      	str	r1, [sp, #28]
 8009604:	f000 8135 	beq.w	8009872 <arm_cfft_radix8by4_f32+0x366>
 8009608:	3b0c      	subs	r3, #12
 800960a:	f102 0920 	add.w	r9, r2, #32
 800960e:	f102 0830 	add.w	r8, r2, #48	; 0x30
 8009612:	4622      	mov	r2, r4
 8009614:	468b      	mov	fp, r1
 8009616:	f105 0e10 	add.w	lr, r5, #16
 800961a:	4423      	add	r3, r4
 800961c:	f1a6 0c0c 	sub.w	ip, r6, #12
 8009620:	f8dd a00c 	ldr.w	sl, [sp, #12]
 8009624:	f106 0010 	add.w	r0, r6, #16
 8009628:	f1a7 010c 	sub.w	r1, r7, #12
 800962c:	f107 0510 	add.w	r5, r7, #16
 8009630:	3c0c      	subs	r4, #12
 8009632:	3210      	adds	r2, #16
 8009634:	ed15 7a02 	vldr	s14, [r5, #-8]
 8009638:	f1bb 0b01 	subs.w	fp, fp, #1
 800963c:	ed5e 7a02 	vldr	s15, [lr, #-8]
 8009640:	f1ac 0c08 	sub.w	ip, ip, #8
 8009644:	ed50 6a02 	vldr	s13, [r0, #-8]
 8009648:	f10e 0e08 	add.w	lr, lr, #8
 800964c:	ee77 1a87 	vadd.f32	s3, s15, s14
 8009650:	ed52 4a02 	vldr	s9, [r2, #-8]
 8009654:	ed55 5a01 	vldr	s11, [r5, #-4]
 8009658:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800965c:	ed1e 7a03 	vldr	s14, [lr, #-12]
 8009660:	f10a 0a08 	add.w	sl, sl, #8
 8009664:	ee36 6aa1 	vadd.f32	s12, s13, s3
 8009668:	ed10 3a01 	vldr	s6, [r0, #-4]
 800966c:	ee37 4a25 	vadd.f32	s8, s14, s11
 8009670:	ed52 3a01 	vldr	s7, [r2, #-4]
 8009674:	ee37 7a65 	vsub.f32	s14, s14, s11
 8009678:	f100 0008 	add.w	r0, r0, #8
 800967c:	ee36 6a24 	vadd.f32	s12, s12, s9
 8009680:	f1a1 0108 	sub.w	r1, r1, #8
 8009684:	ee73 2a27 	vadd.f32	s5, s6, s15
 8009688:	f109 0910 	add.w	r9, r9, #16
 800968c:	ee77 7ac3 	vsub.f32	s15, s15, s6
 8009690:	f105 0508 	add.w	r5, r5, #8
 8009694:	ed0e 6a04 	vstr	s12, [lr, #-16]
 8009698:	ee37 5a66 	vsub.f32	s10, s14, s13
 800969c:	ed50 5a03 	vldr	s11, [r0, #-12]
 80096a0:	ee71 1ae6 	vsub.f32	s3, s3, s13
 80096a4:	ed12 6a01 	vldr	s12, [r2, #-4]
 80096a8:	ee36 7a87 	vadd.f32	s14, s13, s14
 80096ac:	ee74 5a25 	vadd.f32	s11, s8, s11
 80096b0:	f1a4 0408 	sub.w	r4, r4, #8
 80096b4:	ee34 4a43 	vsub.f32	s8, s8, s6
 80096b8:	f108 0818 	add.w	r8, r8, #24
 80096bc:	ee32 0ae3 	vsub.f32	s0, s5, s7
 80096c0:	f102 0208 	add.w	r2, r2, #8
 80096c4:	ee75 5a86 	vadd.f32	s11, s11, s12
 80096c8:	f1a3 0308 	sub.w	r3, r3, #8
 80096cc:	ee34 6a63 	vsub.f32	s12, s8, s7
 80096d0:	ee77 3aa3 	vadd.f32	s7, s15, s7
 80096d4:	ed4e 5a03 	vstr	s11, [lr, #-12]
 80096d8:	ee35 5a24 	vadd.f32	s10, s10, s9
 80096dc:	ed94 4a04 	vldr	s8, [r4, #16]
 80096e0:	ee71 1ae4 	vsub.f32	s3, s3, s9
 80096e4:	ed9c 3a04 	vldr	s6, [ip, #16]
 80096e8:	ee37 7a64 	vsub.f32	s14, s14, s9
 80096ec:	edd1 7a04 	vldr	s15, [r1, #16]
 80096f0:	ee73 6a04 	vadd.f32	s13, s6, s8
 80096f4:	ed93 8a04 	vldr	s16, [r3, #16]
 80096f8:	edd4 5a03 	vldr	s11, [r4, #12]
 80096fc:	ee33 3a44 	vsub.f32	s6, s6, s8
 8009700:	ed9c 2a03 	vldr	s4, [ip, #12]
 8009704:	ee77 8ac8 	vsub.f32	s17, s15, s16
 8009708:	ee77 0aa6 	vadd.f32	s1, s15, s13
 800970c:	ed91 1a03 	vldr	s2, [r1, #12]
 8009710:	ee32 4a25 	vadd.f32	s8, s4, s11
 8009714:	edd3 2a03 	vldr	s5, [r3, #12]
 8009718:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800971c:	ee70 0a88 	vadd.f32	s1, s1, s16
 8009720:	ee73 4a41 	vsub.f32	s9, s6, s2
 8009724:	ee32 2a65 	vsub.f32	s4, s4, s11
 8009728:	edcc 0a04 	vstr	s1, [ip, #16]
 800972c:	ee74 0a41 	vsub.f32	s1, s8, s2
 8009730:	edd1 6a03 	vldr	s13, [r1, #12]
 8009734:	ee74 4aa2 	vadd.f32	s9, s9, s5
 8009738:	ed93 9a03 	vldr	s18, [r3, #12]
 800973c:	ee78 5a82 	vadd.f32	s11, s17, s4
 8009740:	ee34 4a26 	vadd.f32	s8, s8, s13
 8009744:	ee70 0ae2 	vsub.f32	s1, s1, s5
 8009748:	ee72 2ac1 	vsub.f32	s5, s5, s2
 800974c:	ee34 4a09 	vadd.f32	s8, s8, s18
 8009750:	ee77 7ac8 	vsub.f32	s15, s15, s16
 8009754:	ee32 3ac3 	vsub.f32	s6, s5, s6
 8009758:	ed8c 4a03 	vstr	s8, [ip, #12]
 800975c:	ee38 2ac2 	vsub.f32	s4, s17, s4
 8009760:	ed1a 1a03 	vldr	s2, [sl, #-12]
 8009764:	ed1a 4a04 	vldr	s8, [sl, #-16]
 8009768:	ee60 2a01 	vmul.f32	s5, s0, s2
 800976c:	ee64 6a81 	vmul.f32	s13, s9, s2
 8009770:	ee20 8a04 	vmul.f32	s16, s0, s8
 8009774:	ee64 4a84 	vmul.f32	s9, s9, s8
 8009778:	ee25 0a01 	vmul.f32	s0, s10, s2
 800977c:	ee25 5a04 	vmul.f32	s10, s10, s8
 8009780:	ee25 4a84 	vmul.f32	s8, s11, s8
 8009784:	ee65 5a81 	vmul.f32	s11, s11, s2
 8009788:	ee35 5a62 	vsub.f32	s10, s10, s5
 800978c:	ee36 4ac4 	vsub.f32	s8, s13, s8
 8009790:	ee75 5aa4 	vadd.f32	s11, s11, s9
 8009794:	ee38 1a00 	vadd.f32	s2, s16, s0
 8009798:	ed00 5a03 	vstr	s10, [r0, #-12]
 800979c:	ed00 1a04 	vstr	s2, [r0, #-16]
 80097a0:	ed81 4a04 	vstr	s8, [r1, #16]
 80097a4:	edc1 5a03 	vstr	s11, [r1, #12]
 80097a8:	ed19 5a08 	vldr	s10, [r9, #-32]	; 0xffffffe0
 80097ac:	ed59 5a07 	vldr	s11, [r9, #-28]	; 0xffffffe4
 80097b0:	ee67 4ac5 	vnmul.f32	s9, s15, s10
 80097b4:	ee66 2a25 	vmul.f32	s5, s12, s11
 80097b8:	ee67 6aa5 	vmul.f32	s13, s15, s11
 80097bc:	ee21 4a85 	vmul.f32	s8, s3, s10
 80097c0:	ee60 7a85 	vmul.f32	s15, s1, s10
 80097c4:	ee61 1aa5 	vmul.f32	s3, s3, s11
 80097c8:	ee26 6a05 	vmul.f32	s12, s12, s10
 80097cc:	ee60 5aa5 	vmul.f32	s11, s1, s11
 80097d0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80097d4:	ee34 5a22 	vadd.f32	s10, s8, s5
 80097d8:	ee36 6a61 	vsub.f32	s12, s12, s3
 80097dc:	ee74 5ae5 	vsub.f32	s11, s9, s11
 80097e0:	ed05 5a04 	vstr	s10, [r5, #-16]
 80097e4:	ed05 6a03 	vstr	s12, [r5, #-12]
 80097e8:	edc4 5a04 	vstr	s11, [r4, #16]
 80097ec:	edc4 6a03 	vstr	s13, [r4, #12]
 80097f0:	ed58 2a0c 	vldr	s5, [r8, #-48]	; 0xffffffd0
 80097f4:	ed58 7a0b 	vldr	s15, [r8, #-44]	; 0xffffffd4
 80097f8:	ee23 6aa2 	vmul.f32	s12, s7, s5
 80097fc:	ee67 5a27 	vmul.f32	s11, s14, s15
 8009800:	ee63 6a27 	vmul.f32	s13, s6, s15
 8009804:	ee63 3aa7 	vmul.f32	s7, s7, s15
 8009808:	ee27 7a22 	vmul.f32	s14, s14, s5
 800980c:	ee62 7a27 	vmul.f32	s15, s4, s15
 8009810:	ee23 3a22 	vmul.f32	s6, s6, s5
 8009814:	ee22 2a22 	vmul.f32	s4, s4, s5
 8009818:	ee36 6a25 	vadd.f32	s12, s12, s11
 800981c:	ee37 7a63 	vsub.f32	s14, s14, s7
 8009820:	ee36 2ac2 	vsub.f32	s4, s13, s4
 8009824:	ee77 7a83 	vadd.f32	s15, s15, s6
 8009828:	ed02 6a04 	vstr	s12, [r2, #-16]
 800982c:	ed02 7a03 	vstr	s14, [r2, #-12]
 8009830:	ed83 2a04 	vstr	s4, [r3, #16]
 8009834:	edc3 7a03 	vstr	s15, [r3, #12]
 8009838:	f47f aefc 	bne.w	8009634 <arm_cfft_radix8by4_f32+0x128>
 800983c:	9907      	ldr	r1, [sp, #28]
 800983e:	9803      	ldr	r0, [sp, #12]
 8009840:	00cb      	lsls	r3, r1, #3
 8009842:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8009846:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800984a:	9103      	str	r1, [sp, #12]
 800984c:	9900      	ldr	r1, [sp, #0]
 800984e:	4419      	add	r1, r3
 8009850:	9100      	str	r1, [sp, #0]
 8009852:	9905      	ldr	r1, [sp, #20]
 8009854:	4419      	add	r1, r3
 8009856:	9105      	str	r1, [sp, #20]
 8009858:	9906      	ldr	r1, [sp, #24]
 800985a:	4419      	add	r1, r3
 800985c:	9106      	str	r1, [sp, #24]
 800985e:	9902      	ldr	r1, [sp, #8]
 8009860:	4419      	add	r1, r3
 8009862:	9102      	str	r1, [sp, #8]
 8009864:	9901      	ldr	r1, [sp, #4]
 8009866:	4419      	add	r1, r3
 8009868:	9b04      	ldr	r3, [sp, #16]
 800986a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800986e:	9101      	str	r1, [sp, #4]
 8009870:	9304      	str	r3, [sp, #16]
 8009872:	9b00      	ldr	r3, [sp, #0]
 8009874:	9902      	ldr	r1, [sp, #8]
 8009876:	ed93 7a00 	vldr	s14, [r3]
 800987a:	edd1 7a00 	vldr	s15, [r1]
 800987e:	9a06      	ldr	r2, [sp, #24]
 8009880:	ee37 6a27 	vadd.f32	s12, s14, s15
 8009884:	9d01      	ldr	r5, [sp, #4]
 8009886:	edd2 6a00 	vldr	s13, [r2]
 800988a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800988e:	9b02      	ldr	r3, [sp, #8]
 8009890:	ee76 3a86 	vadd.f32	s7, s13, s12
 8009894:	ed95 3a00 	vldr	s6, [r5]
 8009898:	ed93 5a01 	vldr	s10, [r3, #4]
 800989c:	ee36 6a66 	vsub.f32	s12, s12, s13
 80098a0:	9b00      	ldr	r3, [sp, #0]
 80098a2:	ee73 3a83 	vadd.f32	s7, s7, s6
 80098a6:	edd5 2a01 	vldr	s5, [r5, #4]
 80098aa:	ed93 4a01 	vldr	s8, [r3, #4]
 80098ae:	ee36 6a43 	vsub.f32	s12, s12, s6
 80098b2:	9b00      	ldr	r3, [sp, #0]
 80098b4:	ee74 5a05 	vadd.f32	s11, s8, s10
 80098b8:	edd2 7a01 	vldr	s15, [r2, #4]
 80098bc:	edc3 3a00 	vstr	s7, [r3]
 80098c0:	ee34 4a45 	vsub.f32	s8, s8, s10
 80098c4:	edd2 3a01 	vldr	s7, [r2, #4]
 80098c8:	ee77 4a87 	vadd.f32	s9, s15, s14
 80098cc:	ed95 2a01 	vldr	s4, [r5, #4]
 80098d0:	ee75 3aa3 	vadd.f32	s7, s11, s7
 80098d4:	9d05      	ldr	r5, [sp, #20]
 80098d6:	ee34 5a66 	vsub.f32	s10, s8, s13
 80098da:	9b00      	ldr	r3, [sp, #0]
 80098dc:	ee74 4ae2 	vsub.f32	s9, s9, s5
 80098e0:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 80098e4:	ee73 3a82 	vadd.f32	s7, s7, s4
 80098e8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80098ea:	ee35 5a03 	vadd.f32	s10, s10, s6
 80098ee:	4621      	mov	r1, r4
 80098f0:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80098f4:	edc3 3a01 	vstr	s7, [r3, #4]
 80098f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80098fc:	edd5 3a00 	vldr	s7, [r5]
 8009900:	ee76 6a84 	vadd.f32	s13, s13, s8
 8009904:	ed95 7a01 	vldr	s14, [r5, #4]
 8009908:	ee75 5ae2 	vsub.f32	s11, s11, s5
 800990c:	ee24 4aa3 	vmul.f32	s8, s9, s7
 8009910:	2304      	movs	r3, #4
 8009912:	ee64 4a87 	vmul.f32	s9, s9, s14
 8009916:	ee25 7a07 	vmul.f32	s14, s10, s14
 800991a:	ee25 5a23 	vmul.f32	s10, s10, s7
 800991e:	ee77 7aa2 	vadd.f32	s15, s15, s5
 8009922:	ee34 7a07 	vadd.f32	s14, s8, s14
 8009926:	ee35 5a64 	vsub.f32	s10, s10, s9
 800992a:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800992e:	ed82 7a00 	vstr	s14, [r2]
 8009932:	ed82 5a01 	vstr	s10, [r2, #4]
 8009936:	9a03      	ldr	r2, [sp, #12]
 8009938:	edd2 4a01 	vldr	s9, [r2, #4]
 800993c:	ed92 7a00 	vldr	s14, [r2]
 8009940:	9a02      	ldr	r2, [sp, #8]
 8009942:	ee26 5a07 	vmul.f32	s10, s12, s14
 8009946:	ee26 6a24 	vmul.f32	s12, s12, s9
 800994a:	ee25 7a87 	vmul.f32	s14, s11, s14
 800994e:	ee65 5aa4 	vmul.f32	s11, s11, s9
 8009952:	ee37 6a46 	vsub.f32	s12, s14, s12
 8009956:	ee75 5a25 	vadd.f32	s11, s10, s11
 800995a:	edc2 5a00 	vstr	s11, [r2]
 800995e:	ed82 6a01 	vstr	s12, [r2, #4]
 8009962:	9a04      	ldr	r2, [sp, #16]
 8009964:	9d01      	ldr	r5, [sp, #4]
 8009966:	edd2 5a01 	vldr	s11, [r2, #4]
 800996a:	ed92 7a00 	vldr	s14, [r2]
 800996e:	ee27 6a87 	vmul.f32	s12, s15, s14
 8009972:	ee26 7a87 	vmul.f32	s14, s13, s14
 8009976:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800997a:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800997e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009982:	ee76 6a26 	vadd.f32	s13, s12, s13
 8009986:	edc5 7a01 	vstr	s15, [r5, #4]
 800998a:	edc5 6a00 	vstr	s13, [r5]
 800998e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8009990:	686a      	ldr	r2, [r5, #4]
 8009992:	f000 fceb 	bl	800a36c <arm_radix8_butterfly_f32>
 8009996:	4630      	mov	r0, r6
 8009998:	4621      	mov	r1, r4
 800999a:	686a      	ldr	r2, [r5, #4]
 800999c:	2304      	movs	r3, #4
 800999e:	f000 fce5 	bl	800a36c <arm_radix8_butterfly_f32>
 80099a2:	4638      	mov	r0, r7
 80099a4:	4621      	mov	r1, r4
 80099a6:	686a      	ldr	r2, [r5, #4]
 80099a8:	2304      	movs	r3, #4
 80099aa:	f000 fcdf 	bl	800a36c <arm_radix8_butterfly_f32>
 80099ae:	4621      	mov	r1, r4
 80099b0:	686a      	ldr	r2, [r5, #4]
 80099b2:	2304      	movs	r3, #4
 80099b4:	9808      	ldr	r0, [sp, #32]
 80099b6:	b00d      	add	sp, #52	; 0x34
 80099b8:	ecbd 8b04 	vpop	{d8-d9}
 80099bc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099c0:	f000 bcd4 	b.w	800a36c <arm_radix8_butterfly_f32>

080099c4 <arm_cfft_f32>:
 80099c4:	2a01      	cmp	r2, #1
 80099c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099ca:	4606      	mov	r6, r0
 80099cc:	4617      	mov	r7, r2
 80099ce:	460c      	mov	r4, r1
 80099d0:	4698      	mov	r8, r3
 80099d2:	8805      	ldrh	r5, [r0, #0]
 80099d4:	d055      	beq.n	8009a82 <arm_cfft_f32+0xbe>
 80099d6:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 80099da:	d061      	beq.n	8009aa0 <arm_cfft_f32+0xdc>
 80099dc:	d916      	bls.n	8009a0c <arm_cfft_f32+0x48>
 80099de:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 80099e2:	d01a      	beq.n	8009a1a <arm_cfft_f32+0x56>
 80099e4:	d946      	bls.n	8009a74 <arm_cfft_f32+0xb0>
 80099e6:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 80099ea:	d059      	beq.n	8009aa0 <arm_cfft_f32+0xdc>
 80099ec:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 80099f0:	d105      	bne.n	80099fe <arm_cfft_f32+0x3a>
 80099f2:	2301      	movs	r3, #1
 80099f4:	6872      	ldr	r2, [r6, #4]
 80099f6:	4629      	mov	r1, r5
 80099f8:	4620      	mov	r0, r4
 80099fa:	f000 fcb7 	bl	800a36c <arm_radix8_butterfly_f32>
 80099fe:	f1b8 0f00 	cmp.w	r8, #0
 8009a02:	d111      	bne.n	8009a28 <arm_cfft_f32+0x64>
 8009a04:	2f01      	cmp	r7, #1
 8009a06:	d016      	beq.n	8009a36 <arm_cfft_f32+0x72>
 8009a08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a0c:	2d20      	cmp	r5, #32
 8009a0e:	d047      	beq.n	8009aa0 <arm_cfft_f32+0xdc>
 8009a10:	d934      	bls.n	8009a7c <arm_cfft_f32+0xb8>
 8009a12:	2d40      	cmp	r5, #64	; 0x40
 8009a14:	d0ed      	beq.n	80099f2 <arm_cfft_f32+0x2e>
 8009a16:	2d80      	cmp	r5, #128	; 0x80
 8009a18:	d1f1      	bne.n	80099fe <arm_cfft_f32+0x3a>
 8009a1a:	4621      	mov	r1, r4
 8009a1c:	4630      	mov	r0, r6
 8009a1e:	f7ff fca9 	bl	8009374 <arm_cfft_radix8by2_f32>
 8009a22:	f1b8 0f00 	cmp.w	r8, #0
 8009a26:	d0ed      	beq.n	8009a04 <arm_cfft_f32+0x40>
 8009a28:	68b2      	ldr	r2, [r6, #8]
 8009a2a:	4620      	mov	r0, r4
 8009a2c:	89b1      	ldrh	r1, [r6, #12]
 8009a2e:	f000 f83f 	bl	8009ab0 <arm_bitreversal_32>
 8009a32:	2f01      	cmp	r7, #1
 8009a34:	d1e8      	bne.n	8009a08 <arm_cfft_f32+0x44>
 8009a36:	ee07 5a90 	vmov	s15, r5
 8009a3a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009a3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a42:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8009a46:	2d00      	cmp	r5, #0
 8009a48:	d0de      	beq.n	8009a08 <arm_cfft_f32+0x44>
 8009a4a:	f104 0108 	add.w	r1, r4, #8
 8009a4e:	2300      	movs	r3, #0
 8009a50:	ed11 7a02 	vldr	s14, [r1, #-8]
 8009a54:	3301      	adds	r3, #1
 8009a56:	ed51 7a01 	vldr	s15, [r1, #-4]
 8009a5a:	3108      	adds	r1, #8
 8009a5c:	429d      	cmp	r5, r3
 8009a5e:	ee27 7a26 	vmul.f32	s14, s14, s13
 8009a62:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8009a66:	ed01 7a04 	vstr	s14, [r1, #-16]
 8009a6a:	ed41 7a03 	vstr	s15, [r1, #-12]
 8009a6e:	d1ef      	bne.n	8009a50 <arm_cfft_f32+0x8c>
 8009a70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a74:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8009a78:	d0bb      	beq.n	80099f2 <arm_cfft_f32+0x2e>
 8009a7a:	e7c0      	b.n	80099fe <arm_cfft_f32+0x3a>
 8009a7c:	2d10      	cmp	r5, #16
 8009a7e:	d0cc      	beq.n	8009a1a <arm_cfft_f32+0x56>
 8009a80:	e7bd      	b.n	80099fe <arm_cfft_f32+0x3a>
 8009a82:	b195      	cbz	r5, 8009aaa <arm_cfft_f32+0xe6>
 8009a84:	f101 030c 	add.w	r3, r1, #12
 8009a88:	2200      	movs	r2, #0
 8009a8a:	ed53 7a02 	vldr	s15, [r3, #-8]
 8009a8e:	3201      	adds	r2, #1
 8009a90:	3308      	adds	r3, #8
 8009a92:	eef1 7a67 	vneg.f32	s15, s15
 8009a96:	4295      	cmp	r5, r2
 8009a98:	ed43 7a04 	vstr	s15, [r3, #-16]
 8009a9c:	d1f5      	bne.n	8009a8a <arm_cfft_f32+0xc6>
 8009a9e:	e79a      	b.n	80099d6 <arm_cfft_f32+0x12>
 8009aa0:	4621      	mov	r1, r4
 8009aa2:	4630      	mov	r0, r6
 8009aa4:	f7ff fd32 	bl	800950c <arm_cfft_radix8by4_f32>
 8009aa8:	e7a9      	b.n	80099fe <arm_cfft_f32+0x3a>
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d0ac      	beq.n	8009a08 <arm_cfft_f32+0x44>
 8009aae:	e7bb      	b.n	8009a28 <arm_cfft_f32+0x64>

08009ab0 <arm_bitreversal_32>:
 8009ab0:	b321      	cbz	r1, 8009afc <arm_bitreversal_32+0x4c>
 8009ab2:	f102 0c02 	add.w	ip, r2, #2
 8009ab6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009aba:	4690      	mov	r8, r2
 8009abc:	2500      	movs	r5, #0
 8009abe:	f838 4015 	ldrh.w	r4, [r8, r5, lsl #1]
 8009ac2:	f83c 3015 	ldrh.w	r3, [ip, r5, lsl #1]
 8009ac6:	3502      	adds	r5, #2
 8009ac8:	08a4      	lsrs	r4, r4, #2
 8009aca:	089b      	lsrs	r3, r3, #2
 8009acc:	428d      	cmp	r5, r1
 8009ace:	ea4f 0784 	mov.w	r7, r4, lsl #2
 8009ad2:	f850 e024 	ldr.w	lr, [r0, r4, lsl #2]
 8009ad6:	ea4f 0683 	mov.w	r6, r3, lsl #2
 8009ada:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 8009ade:	f107 0704 	add.w	r7, r7, #4
 8009ae2:	f106 0604 	add.w	r6, r6, #4
 8009ae6:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 8009aea:	f840 e023 	str.w	lr, [r0, r3, lsl #2]
 8009aee:	59c4      	ldr	r4, [r0, r7]
 8009af0:	5983      	ldr	r3, [r0, r6]
 8009af2:	51c3      	str	r3, [r0, r7]
 8009af4:	5184      	str	r4, [r0, r6]
 8009af6:	d3e2      	bcc.n	8009abe <arm_bitreversal_32+0xe>
 8009af8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009afc:	4770      	bx	lr
 8009afe:	bf00      	nop

08009b00 <arm_fir_decimate_q15>:
 8009b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b04:	4604      	mov	r4, r0
 8009b06:	b08f      	sub	sp, #60	; 0x3c
 8009b08:	4617      	mov	r7, r2
 8009b0a:	8866      	ldrh	r6, [r4, #2]
 8009b0c:	9002      	str	r0, [sp, #8]
 8009b0e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8009b12:	920b      	str	r2, [sp, #44]	; 0x2c
 8009b14:	7822      	ldrb	r2, [r4, #0]
 8009b16:	4430      	add	r0, r6
 8009b18:	f8d4 9008 	ldr.w	r9, [r4, #8]
 8009b1c:	6864      	ldr	r4, [r4, #4]
 8009b1e:	eb09 0040 	add.w	r0, r9, r0, lsl #1
 8009b22:	960a      	str	r6, [sp, #40]	; 0x28
 8009b24:	9406      	str	r4, [sp, #24]
 8009b26:	9001      	str	r0, [sp, #4]
 8009b28:	fbb3 f3f2 	udiv	r3, r3, r2
 8009b2c:	f003 0001 	and.w	r0, r3, #1
 8009b30:	085b      	lsrs	r3, r3, #1
 8009b32:	900c      	str	r0, [sp, #48]	; 0x30
 8009b34:	930d      	str	r3, [sp, #52]	; 0x34
 8009b36:	f000 8096 	beq.w	8009c66 <arm_fir_decimate_q15+0x166>
 8009b3a:	f006 0503 	and.w	r5, r6, #3
 8009b3e:	08b0      	lsrs	r0, r6, #2
 8009b40:	9508      	str	r5, [sp, #32]
 8009b42:	463d      	mov	r5, r7
 8009b44:	9007      	str	r0, [sp, #28]
 8009b46:	3504      	adds	r5, #4
 8009b48:	e9cd 3503 	strd	r3, r5, [sp, #12]
 8009b4c:	00c3      	lsls	r3, r0, #3
 8009b4e:	eb04 0803 	add.w	r8, r4, r3
 8009b52:	9309      	str	r3, [sp, #36]	; 0x24
 8009b54:	9c01      	ldr	r4, [sp, #4]
 8009b56:	1d08      	adds	r0, r1, #4
 8009b58:	2702      	movs	r7, #2
 8009b5a:	1d23      	adds	r3, r4, #4
 8009b5c:	4625      	mov	r5, r4
 8009b5e:	fb12 f607 	smulbb	r6, r2, r7
 8009b62:	4299      	cmp	r1, r3
 8009b64:	bf38      	it	cc
 8009b66:	4284      	cmpcc	r4, r0
 8009b68:	d36d      	bcc.n	8009c46 <arm_fir_decimate_q15+0x146>
 8009b6a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009b6e:	fb17 0202 	smlabb	r2, r7, r2, r0
 8009b72:	2a09      	cmp	r2, #9
 8009b74:	d967      	bls.n	8009c46 <arm_fir_decimate_q15+0x146>
 8009b76:	1eb2      	subs	r2, r6, #2
 8009b78:	460c      	mov	r4, r1
 8009b7a:	4628      	mov	r0, r5
 8009b7c:	2300      	movs	r3, #0
 8009b7e:	0852      	lsrs	r2, r2, #1
 8009b80:	3201      	adds	r2, #1
 8009b82:	3301      	adds	r3, #1
 8009b84:	f854 5b04 	ldr.w	r5, [r4], #4
 8009b88:	429a      	cmp	r2, r3
 8009b8a:	f840 5b04 	str.w	r5, [r0], #4
 8009b8e:	d8f8      	bhi.n	8009b82 <arm_fir_decimate_q15+0x82>
 8009b90:	9b02      	ldr	r3, [sp, #8]
 8009b92:	0076      	lsls	r6, r6, #1
 8009b94:	9a01      	ldr	r2, [sp, #4]
 8009b96:	781b      	ldrb	r3, [r3, #0]
 8009b98:	4431      	add	r1, r6
 8009b9a:	4432      	add	r2, r6
 8009b9c:	9305      	str	r3, [sp, #20]
 8009b9e:	eb09 0e43 	add.w	lr, r9, r3, lsl #1
 8009ba2:	9b07      	ldr	r3, [sp, #28]
 8009ba4:	9201      	str	r2, [sp, #4]
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	f000 80f6 	beq.w	8009d98 <arm_fir_decimate_q15+0x298>
 8009bac:	2300      	movs	r3, #0
 8009bae:	46f4      	mov	ip, lr
 8009bb0:	464f      	mov	r7, r9
 8009bb2:	9d06      	ldr	r5, [sp, #24]
 8009bb4:	461c      	mov	r4, r3
 8009bb6:	461a      	mov	r2, r3
 8009bb8:	4618      	mov	r0, r3
 8009bba:	682e      	ldr	r6, [r5, #0]
 8009bbc:	f8d7 b000 	ldr.w	fp, [r7]
 8009bc0:	f8dc a000 	ldr.w	sl, [ip]
 8009bc4:	fbcb 20c6 	smlald	r2, r0, fp, r6
 8009bc8:	fbca 34c6 	smlald	r3, r4, sl, r6
 8009bcc:	686e      	ldr	r6, [r5, #4]
 8009bce:	3708      	adds	r7, #8
 8009bd0:	f857 bc04 	ldr.w	fp, [r7, #-4]
 8009bd4:	3508      	adds	r5, #8
 8009bd6:	f8dc a004 	ldr.w	sl, [ip, #4]
 8009bda:	f10c 0c08 	add.w	ip, ip, #8
 8009bde:	fbcb 20c6 	smlald	r2, r0, fp, r6
 8009be2:	fbca 34c6 	smlald	r3, r4, sl, r6
 8009be6:	45a8      	cmp	r8, r5
 8009be8:	d1e7      	bne.n	8009bba <arm_fir_decimate_q15+0xba>
 8009bea:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009bec:	44b6      	add	lr, r6
 8009bee:	eb09 0a06 	add.w	sl, r9, r6
 8009bf2:	9e08      	ldr	r6, [sp, #32]
 8009bf4:	b166      	cbz	r6, 8009c10 <arm_fir_decimate_q15+0x110>
 8009bf6:	4637      	mov	r7, r6
 8009bf8:	f93e cb02 	ldrsh.w	ip, [lr], #2
 8009bfc:	f93a bb02 	ldrsh.w	fp, [sl], #2
 8009c00:	f935 6b02 	ldrsh.w	r6, [r5], #2
 8009c04:	fbcb 20c6 	smlald	r2, r0, fp, r6
 8009c08:	fbcc 34c6 	smlald	r3, r4, ip, r6
 8009c0c:	3f01      	subs	r7, #1
 8009c0e:	d1f3      	bne.n	8009bf8 <arm_fir_decimate_q15+0xf8>
 8009c10:	0bd2      	lsrs	r2, r2, #15
 8009c12:	0bdb      	lsrs	r3, r3, #15
 8009c14:	ea42 4240 	orr.w	r2, r2, r0, lsl #17
 8009c18:	9804      	ldr	r0, [sp, #16]
 8009c1a:	ea43 4344 	orr.w	r3, r3, r4, lsl #17
 8009c1e:	f303 030f 	ssat	r3, #16, r3
 8009c22:	f820 3c02 	strh.w	r3, [r0, #-2]
 8009c26:	1d03      	adds	r3, r0, #4
 8009c28:	f302 020f 	ssat	r2, #16, r2
 8009c2c:	9304      	str	r3, [sp, #16]
 8009c2e:	9b03      	ldr	r3, [sp, #12]
 8009c30:	f820 2c04 	strh.w	r2, [r0, #-4]
 8009c34:	3b01      	subs	r3, #1
 8009c36:	9a05      	ldr	r2, [sp, #20]
 8009c38:	9303      	str	r3, [sp, #12]
 8009c3a:	eb09 0982 	add.w	r9, r9, r2, lsl #2
 8009c3e:	d00d      	beq.n	8009c5c <arm_fir_decimate_q15+0x15c>
 8009c40:	9b02      	ldr	r3, [sp, #8]
 8009c42:	781a      	ldrb	r2, [r3, #0]
 8009c44:	e786      	b.n	8009b54 <arm_fir_decimate_q15+0x54>
 8009c46:	9b01      	ldr	r3, [sp, #4]
 8009c48:	460a      	mov	r2, r1
 8009c4a:	1e98      	subs	r0, r3, #2
 8009c4c:	4633      	mov	r3, r6
 8009c4e:	f932 4b02 	ldrsh.w	r4, [r2], #2
 8009c52:	3b01      	subs	r3, #1
 8009c54:	f820 4f02 	strh.w	r4, [r0, #2]!
 8009c58:	d1f9      	bne.n	8009c4e <arm_fir_decimate_q15+0x14e>
 8009c5a:	e799      	b.n	8009b90 <arm_fir_decimate_q15+0x90>
 8009c5c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009c5e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009c60:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8009c64:	930b      	str	r3, [sp, #44]	; 0x2c
 8009c66:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d056      	beq.n	8009d1a <arm_fir_decimate_q15+0x21a>
 8009c6c:	9801      	ldr	r0, [sp, #4]
 8009c6e:	1d0b      	adds	r3, r1, #4
 8009c70:	9c02      	ldr	r4, [sp, #8]
 8009c72:	1d02      	adds	r2, r0, #4
 8009c74:	7825      	ldrb	r5, [r4, #0]
 8009c76:	4298      	cmp	r0, r3
 8009c78:	bf38      	it	cc
 8009c7a:	4291      	cmpcc	r1, r2
 8009c7c:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8009c80:	f0c0 8090 	bcc.w	8009da4 <arm_fir_decimate_q15+0x2a4>
 8009c84:	2a09      	cmp	r2, #9
 8009c86:	f240 808d 	bls.w	8009da4 <arm_fir_decimate_q15+0x2a4>
 8009c8a:	1eab      	subs	r3, r5, #2
 8009c8c:	460c      	mov	r4, r1
 8009c8e:	2200      	movs	r2, #0
 8009c90:	085b      	lsrs	r3, r3, #1
 8009c92:	3301      	adds	r3, #1
 8009c94:	3201      	adds	r2, #1
 8009c96:	f854 6b04 	ldr.w	r6, [r4], #4
 8009c9a:	4293      	cmp	r3, r2
 8009c9c:	f840 6b04 	str.w	r6, [r0], #4
 8009ca0:	d8f8      	bhi.n	8009c94 <arm_fir_decimate_q15+0x194>
 8009ca2:	ebb5 0f43 	cmp.w	r5, r3, lsl #1
 8009ca6:	d004      	beq.n	8009cb2 <arm_fir_decimate_q15+0x1b2>
 8009ca8:	f931 2023 	ldrsh.w	r2, [r1, r3, lsl #2]
 8009cac:	9901      	ldr	r1, [sp, #4]
 8009cae:	f821 2023 	strh.w	r2, [r1, r3, lsl #2]
 8009cb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009cb4:	089a      	lsrs	r2, r3, #2
 8009cb6:	f000 8083 	beq.w	8009dc0 <arm_fir_decimate_q15+0x2c0>
 8009cba:	00d5      	lsls	r5, r2, #3
 8009cbc:	2200      	movs	r2, #0
 8009cbe:	9806      	ldr	r0, [sp, #24]
 8009cc0:	4649      	mov	r1, r9
 8009cc2:	eb09 0405 	add.w	r4, r9, r5
 8009cc6:	4613      	mov	r3, r2
 8009cc8:	f8d0 c000 	ldr.w	ip, [r0]
 8009ccc:	3008      	adds	r0, #8
 8009cce:	f850 7c04 	ldr.w	r7, [r0, #-4]
 8009cd2:	680e      	ldr	r6, [r1, #0]
 8009cd4:	fbc6 23cc 	smlald	r2, r3, r6, ip
 8009cd8:	684e      	ldr	r6, [r1, #4]
 8009cda:	3108      	adds	r1, #8
 8009cdc:	fbc6 23c7 	smlald	r2, r3, r6, r7
 8009ce0:	428c      	cmp	r4, r1
 8009ce2:	d1f1      	bne.n	8009cc8 <arm_fir_decimate_q15+0x1c8>
 8009ce4:	9806      	ldr	r0, [sp, #24]
 8009ce6:	4428      	add	r0, r5
 8009ce8:	9006      	str	r0, [sp, #24]
 8009cea:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009cec:	f010 0003 	ands.w	r0, r0, #3
 8009cf0:	d008      	beq.n	8009d04 <arm_fir_decimate_q15+0x204>
 8009cf2:	9e06      	ldr	r6, [sp, #24]
 8009cf4:	f931 4b02 	ldrsh.w	r4, [r1], #2
 8009cf8:	f936 5b02 	ldrsh.w	r5, [r6], #2
 8009cfc:	fbc4 23c5 	smlald	r2, r3, r4, r5
 8009d00:	3801      	subs	r0, #1
 8009d02:	d1f7      	bne.n	8009cf4 <arm_fir_decimate_q15+0x1f4>
 8009d04:	9902      	ldr	r1, [sp, #8]
 8009d06:	0bd2      	lsrs	r2, r2, #15
 8009d08:	7809      	ldrb	r1, [r1, #0]
 8009d0a:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
 8009d0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d10:	eb09 0941 	add.w	r9, r9, r1, lsl #1
 8009d14:	f302 020f 	ssat	r2, #16, r2
 8009d18:	801a      	strh	r2, [r3, #0]
 8009d1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d1c:	1e5e      	subs	r6, r3, #1
 8009d1e:	9b02      	ldr	r3, [sp, #8]
 8009d20:	08b0      	lsrs	r0, r6, #2
 8009d22:	689f      	ldr	r7, [r3, #8]
 8009d24:	d025      	beq.n	8009d72 <arm_fir_decimate_q15+0x272>
 8009d26:	f109 0208 	add.w	r2, r9, #8
 8009d2a:	f107 0408 	add.w	r4, r7, #8
 8009d2e:	1e43      	subs	r3, r0, #1
 8009d30:	4611      	mov	r1, r2
 8009d32:	4622      	mov	r2, r4
 8009d34:	45a1      	cmp	r9, r4
 8009d36:	bf38      	it	cc
 8009d38:	428f      	cmpcc	r7, r1
 8009d3a:	bf2c      	ite	cs
 8009d3c:	2201      	movcs	r2, #1
 8009d3e:	2200      	movcc	r2, #0
 8009d40:	2b04      	cmp	r3, #4
 8009d42:	bf94      	ite	ls
 8009d44:	2300      	movls	r3, #0
 8009d46:	f002 0301 	andhi.w	r3, r2, #1
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d03b      	beq.n	8009dc6 <arm_fir_decimate_q15+0x2c6>
 8009d4e:	ea47 0309 	orr.w	r3, r7, r9
 8009d52:	075b      	lsls	r3, r3, #29
 8009d54:	d137      	bne.n	8009dc6 <arm_fir_decimate_q15+0x2c6>
 8009d56:	f1a9 0108 	sub.w	r1, r9, #8
 8009d5a:	463a      	mov	r2, r7
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	3301      	adds	r3, #1
 8009d60:	e9f1 4502 	ldrd	r4, r5, [r1, #8]!
 8009d64:	4298      	cmp	r0, r3
 8009d66:	e8e2 4502 	strd	r4, r5, [r2], #8
 8009d6a:	d1f8      	bne.n	8009d5e <arm_fir_decimate_q15+0x25e>
 8009d6c:	00c0      	lsls	r0, r0, #3
 8009d6e:	4407      	add	r7, r0
 8009d70:	4481      	add	r9, r0
 8009d72:	f016 0603 	ands.w	r6, r6, #3
 8009d76:	d00c      	beq.n	8009d92 <arm_fir_decimate_q15+0x292>
 8009d78:	f9b9 3000 	ldrsh.w	r3, [r9]
 8009d7c:	3e01      	subs	r6, #1
 8009d7e:	803b      	strh	r3, [r7, #0]
 8009d80:	d007      	beq.n	8009d92 <arm_fir_decimate_q15+0x292>
 8009d82:	f9b9 3002 	ldrsh.w	r3, [r9, #2]
 8009d86:	2e01      	cmp	r6, #1
 8009d88:	807b      	strh	r3, [r7, #2]
 8009d8a:	d002      	beq.n	8009d92 <arm_fir_decimate_q15+0x292>
 8009d8c:	f9b9 3004 	ldrsh.w	r3, [r9, #4]
 8009d90:	80bb      	strh	r3, [r7, #4]
 8009d92:	b00f      	add	sp, #60	; 0x3c
 8009d94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d98:	4618      	mov	r0, r3
 8009d9a:	46ca      	mov	sl, r9
 8009d9c:	9d06      	ldr	r5, [sp, #24]
 8009d9e:	461c      	mov	r4, r3
 8009da0:	461a      	mov	r2, r3
 8009da2:	e726      	b.n	8009bf2 <arm_fir_decimate_q15+0xf2>
 8009da4:	9b01      	ldr	r3, [sp, #4]
 8009da6:	3b02      	subs	r3, #2
 8009da8:	e000      	b.n	8009dac <arm_fir_decimate_q15+0x2ac>
 8009daa:	3a01      	subs	r2, #1
 8009dac:	f931 0b02 	ldrsh.w	r0, [r1], #2
 8009db0:	f823 0f02 	strh.w	r0, [r3, #2]!
 8009db4:	2a00      	cmp	r2, #0
 8009db6:	d1f8      	bne.n	8009daa <arm_fir_decimate_q15+0x2aa>
 8009db8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009dba:	089a      	lsrs	r2, r3, #2
 8009dbc:	f47f af7d 	bne.w	8009cba <arm_fir_decimate_q15+0x1ba>
 8009dc0:	4649      	mov	r1, r9
 8009dc2:	4613      	mov	r3, r2
 8009dc4:	e791      	b.n	8009cea <arm_fir_decimate_q15+0x1ea>
 8009dc6:	463a      	mov	r2, r7
 8009dc8:	464b      	mov	r3, r9
 8009dca:	4601      	mov	r1, r0
 8009dcc:	681c      	ldr	r4, [r3, #0]
 8009dce:	3901      	subs	r1, #1
 8009dd0:	f103 0308 	add.w	r3, r3, #8
 8009dd4:	f102 0208 	add.w	r2, r2, #8
 8009dd8:	f842 4c08 	str.w	r4, [r2, #-8]
 8009ddc:	f853 4c04 	ldr.w	r4, [r3, #-4]
 8009de0:	f842 4c04 	str.w	r4, [r2, #-4]
 8009de4:	d1f2      	bne.n	8009dcc <arm_fir_decimate_q15+0x2cc>
 8009de6:	e7c1      	b.n	8009d6c <arm_fir_decimate_q15+0x26c>

08009de8 <arm_fir_decimate_init_q15>:
 8009de8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009dec:	e9dd 8c06 	ldrd	r8, ip, [sp, #24]
 8009df0:	fbbc f4f2 	udiv	r4, ip, r2
 8009df4:	fb02 c414 	mls	r4, r2, r4, ip
 8009df8:	b99c      	cbnz	r4, 8009e22 <arm_fir_decimate_init_q15+0x3a>
 8009dfa:	460f      	mov	r7, r1
 8009dfc:	4616      	mov	r6, r2
 8009dfe:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8009e02:	4605      	mov	r5, r0
 8009e04:	443a      	add	r2, r7
 8009e06:	8069      	strh	r1, [r5, #2]
 8009e08:	6043      	str	r3, [r0, #4]
 8009e0a:	4621      	mov	r1, r4
 8009e0c:	4462      	add	r2, ip
 8009e0e:	4640      	mov	r0, r8
 8009e10:	0052      	lsls	r2, r2, #1
 8009e12:	f001 fb6e 	bl	800b4f2 <memset>
 8009e16:	4620      	mov	r0, r4
 8009e18:	f8c5 8008 	str.w	r8, [r5, #8]
 8009e1c:	702e      	strb	r6, [r5, #0]
 8009e1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e22:	f06f 0001 	mvn.w	r0, #1
 8009e26:	e7fa      	b.n	8009e1e <arm_fir_decimate_init_q15+0x36>

08009e28 <arm_cmplx_mult_cmplx_f32>:
 8009e28:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 8009e2c:	b4f0      	push	{r4, r5, r6, r7}
 8009e2e:	d073      	beq.n	8009f18 <arm_cmplx_mult_cmplx_f32+0xf0>
 8009e30:	f100 0620 	add.w	r6, r0, #32
 8009e34:	f101 0520 	add.w	r5, r1, #32
 8009e38:	f102 0420 	add.w	r4, r2, #32
 8009e3c:	4667      	mov	r7, ip
 8009e3e:	ed55 5a07 	vldr	s11, [r5, #-28]	; 0xffffffe4
 8009e42:	3f01      	subs	r7, #1
 8009e44:	ed56 7a08 	vldr	s15, [r6, #-32]	; 0xffffffe0
 8009e48:	f105 0520 	add.w	r5, r5, #32
 8009e4c:	ed15 7a10 	vldr	s14, [r5, #-64]	; 0xffffffc0
 8009e50:	f106 0620 	add.w	r6, r6, #32
 8009e54:	ed56 6a0f 	vldr	s13, [r6, #-60]	; 0xffffffc4
 8009e58:	f104 0420 	add.w	r4, r4, #32
 8009e5c:	ee27 6a87 	vmul.f32	s12, s15, s14
 8009e60:	ee26 7a87 	vmul.f32	s14, s13, s14
 8009e64:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8009e68:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8009e6c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009e70:	ee76 6a66 	vsub.f32	s13, s12, s13
 8009e74:	ed44 7a0f 	vstr	s15, [r4, #-60]	; 0xffffffc4
 8009e78:	ed44 6a10 	vstr	s13, [r4, #-64]	; 0xffffffc0
 8009e7c:	ed55 5a0d 	vldr	s11, [r5, #-52]	; 0xffffffcc
 8009e80:	ed56 7a0e 	vldr	s15, [r6, #-56]	; 0xffffffc8
 8009e84:	ed15 7a0e 	vldr	s14, [r5, #-56]	; 0xffffffc8
 8009e88:	ed56 6a0d 	vldr	s13, [r6, #-52]	; 0xffffffcc
 8009e8c:	ee27 6a87 	vmul.f32	s12, s15, s14
 8009e90:	ee26 7a87 	vmul.f32	s14, s13, s14
 8009e94:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8009e98:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8009e9c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009ea0:	ee76 6a66 	vsub.f32	s13, s12, s13
 8009ea4:	ed44 7a0d 	vstr	s15, [r4, #-52]	; 0xffffffcc
 8009ea8:	ed44 6a0e 	vstr	s13, [r4, #-56]	; 0xffffffc8
 8009eac:	ed55 5a0b 	vldr	s11, [r5, #-44]	; 0xffffffd4
 8009eb0:	ed56 7a0c 	vldr	s15, [r6, #-48]	; 0xffffffd0
 8009eb4:	ed15 7a0c 	vldr	s14, [r5, #-48]	; 0xffffffd0
 8009eb8:	ed56 6a0b 	vldr	s13, [r6, #-44]	; 0xffffffd4
 8009ebc:	ee27 6a87 	vmul.f32	s12, s15, s14
 8009ec0:	ee26 7a87 	vmul.f32	s14, s13, s14
 8009ec4:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8009ec8:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8009ecc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009ed0:	ee76 6a66 	vsub.f32	s13, s12, s13
 8009ed4:	ed44 7a0b 	vstr	s15, [r4, #-44]	; 0xffffffd4
 8009ed8:	ed44 6a0c 	vstr	s13, [r4, #-48]	; 0xffffffd0
 8009edc:	ed56 7a0a 	vldr	s15, [r6, #-40]	; 0xffffffd8
 8009ee0:	ed15 7a0a 	vldr	s14, [r5, #-40]	; 0xffffffd8
 8009ee4:	ed56 6a09 	vldr	s13, [r6, #-36]	; 0xffffffdc
 8009ee8:	ed55 5a09 	vldr	s11, [r5, #-36]	; 0xffffffdc
 8009eec:	ee27 6a87 	vmul.f32	s12, s15, s14
 8009ef0:	ee26 7a87 	vmul.f32	s14, s13, s14
 8009ef4:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8009ef8:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8009efc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009f00:	ee76 6a66 	vsub.f32	s13, s12, s13
 8009f04:	ed44 7a09 	vstr	s15, [r4, #-36]	; 0xffffffdc
 8009f08:	ed44 6a0a 	vstr	s13, [r4, #-40]	; 0xffffffd8
 8009f0c:	d197      	bne.n	8009e3e <arm_cmplx_mult_cmplx_f32+0x16>
 8009f0e:	ea4f 144c 	mov.w	r4, ip, lsl #5
 8009f12:	4420      	add	r0, r4
 8009f14:	4421      	add	r1, r4
 8009f16:	4422      	add	r2, r4
 8009f18:	f013 0303 	ands.w	r3, r3, #3
 8009f1c:	d04b      	beq.n	8009fb6 <arm_cmplx_mult_cmplx_f32+0x18e>
 8009f1e:	edd0 5a00 	vldr	s11, [r0]
 8009f22:	3b01      	subs	r3, #1
 8009f24:	edd1 7a00 	vldr	s15, [r1]
 8009f28:	edd0 6a01 	vldr	s13, [r0, #4]
 8009f2c:	ed91 7a01 	vldr	s14, [r1, #4]
 8009f30:	ee27 6aa5 	vmul.f32	s12, s15, s11
 8009f34:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8009f38:	ee67 6a26 	vmul.f32	s13, s14, s13
 8009f3c:	ee27 7a25 	vmul.f32	s14, s14, s11
 8009f40:	ee76 6a66 	vsub.f32	s13, s12, s13
 8009f44:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009f48:	edc2 6a00 	vstr	s13, [r2]
 8009f4c:	edc2 7a01 	vstr	s15, [r2, #4]
 8009f50:	d031      	beq.n	8009fb6 <arm_cmplx_mult_cmplx_f32+0x18e>
 8009f52:	edd0 7a02 	vldr	s15, [r0, #8]
 8009f56:	2b01      	cmp	r3, #1
 8009f58:	ed91 7a02 	vldr	s14, [r1, #8]
 8009f5c:	edd0 6a03 	vldr	s13, [r0, #12]
 8009f60:	edd1 5a03 	vldr	s11, [r1, #12]
 8009f64:	ee27 6a87 	vmul.f32	s12, s15, s14
 8009f68:	ee26 7a87 	vmul.f32	s14, s13, s14
 8009f6c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8009f70:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8009f74:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009f78:	ee76 6a66 	vsub.f32	s13, s12, s13
 8009f7c:	edc2 7a03 	vstr	s15, [r2, #12]
 8009f80:	edc2 6a02 	vstr	s13, [r2, #8]
 8009f84:	d017      	beq.n	8009fb6 <arm_cmplx_mult_cmplx_f32+0x18e>
 8009f86:	edd0 7a04 	vldr	s15, [r0, #16]
 8009f8a:	ed91 7a04 	vldr	s14, [r1, #16]
 8009f8e:	edd0 6a05 	vldr	s13, [r0, #20]
 8009f92:	edd1 5a05 	vldr	s11, [r1, #20]
 8009f96:	ee27 6a87 	vmul.f32	s12, s15, s14
 8009f9a:	ee26 7a87 	vmul.f32	s14, s13, s14
 8009f9e:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8009fa2:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8009fa6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009faa:	ee76 6a66 	vsub.f32	s13, s12, s13
 8009fae:	edc2 7a05 	vstr	s15, [r2, #20]
 8009fb2:	edc2 6a04 	vstr	s13, [r2, #16]
 8009fb6:	bcf0      	pop	{r4, r5, r6, r7}
 8009fb8:	4770      	bx	lr
 8009fba:	bf00      	nop

08009fbc <arm_cmplx_mag_f32>:
 8009fbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fc0:	0897      	lsrs	r7, r2, #2
 8009fc2:	ed2d 8b02 	vpush	{d8}
 8009fc6:	b084      	sub	sp, #16
 8009fc8:	d077      	beq.n	800a0ba <arm_cmplx_mag_f32+0xfe>
 8009fca:	f100 0420 	add.w	r4, r0, #32
 8009fce:	f101 0510 	add.w	r5, r1, #16
 8009fd2:	463e      	mov	r6, r7
 8009fd4:	f04f 0800 	mov.w	r8, #0
 8009fd8:	ed14 0a08 	vldr	s0, [r4, #-32]	; 0xffffffe0
 8009fdc:	ed54 7a07 	vldr	s15, [r4, #-28]	; 0xffffffe4
 8009fe0:	ee20 0a00 	vmul.f32	s0, s0, s0
 8009fe4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009fe8:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009fec:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8009ff0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ff4:	f2c0 80c1 	blt.w	800a17a <arm_cmplx_mag_f32+0x1be>
 8009ff8:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8009ffc:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800a000:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a004:	f100 80d4 	bmi.w	800a1b0 <arm_cmplx_mag_f32+0x1f4>
 800a008:	ed05 8a04 	vstr	s16, [r5, #-16]
 800a00c:	ed14 0a06 	vldr	s0, [r4, #-24]	; 0xffffffe8
 800a010:	ed54 7a05 	vldr	s15, [r4, #-20]	; 0xffffffec
 800a014:	ee20 0a00 	vmul.f32	s0, s0, s0
 800a018:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a01c:	ee30 0a27 	vadd.f32	s0, s0, s15
 800a020:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800a024:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a028:	f2c0 80a4 	blt.w	800a174 <arm_cmplx_mag_f32+0x1b8>
 800a02c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800a030:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800a034:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a038:	f100 80a8 	bmi.w	800a18c <arm_cmplx_mag_f32+0x1d0>
 800a03c:	ed05 8a03 	vstr	s16, [r5, #-12]
 800a040:	ed14 0a04 	vldr	s0, [r4, #-16]
 800a044:	ed54 7a03 	vldr	s15, [r4, #-12]
 800a048:	ee20 0a00 	vmul.f32	s0, s0, s0
 800a04c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a050:	ee30 0a27 	vadd.f32	s0, s0, s15
 800a054:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800a058:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a05c:	f2c0 8087 	blt.w	800a16e <arm_cmplx_mag_f32+0x1b2>
 800a060:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800a064:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800a068:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a06c:	f100 8097 	bmi.w	800a19e <arm_cmplx_mag_f32+0x1e2>
 800a070:	ed05 8a02 	vstr	s16, [r5, #-8]
 800a074:	ed14 0a02 	vldr	s0, [r4, #-8]
 800a078:	ed54 7a01 	vldr	s15, [r4, #-4]
 800a07c:	ee20 0a00 	vmul.f32	s0, s0, s0
 800a080:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a084:	ee30 0a27 	vadd.f32	s0, s0, s15
 800a088:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800a08c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a090:	db6a      	blt.n	800a168 <arm_cmplx_mag_f32+0x1ac>
 800a092:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800a096:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800a09a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a09e:	f100 8090 	bmi.w	800a1c2 <arm_cmplx_mag_f32+0x206>
 800a0a2:	ed05 8a01 	vstr	s16, [r5, #-4]
 800a0a6:	3e01      	subs	r6, #1
 800a0a8:	f104 0420 	add.w	r4, r4, #32
 800a0ac:	f105 0510 	add.w	r5, r5, #16
 800a0b0:	d192      	bne.n	8009fd8 <arm_cmplx_mag_f32+0x1c>
 800a0b2:	eb00 1047 	add.w	r0, r0, r7, lsl #5
 800a0b6:	eb01 1107 	add.w	r1, r1, r7, lsl #4
 800a0ba:	f012 0203 	ands.w	r2, r2, #3
 800a0be:	d04e      	beq.n	800a15e <arm_cmplx_mag_f32+0x1a2>
 800a0c0:	ed90 0a00 	vldr	s0, [r0]
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	edd0 7a01 	vldr	s15, [r0, #4]
 800a0ca:	ee20 0a00 	vmul.f32	s0, s0, s0
 800a0ce:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a0d2:	ee37 0a80 	vadd.f32	s0, s15, s0
 800a0d6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800a0da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0de:	db4f      	blt.n	800a180 <arm_cmplx_mag_f32+0x1c4>
 800a0e0:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800a0e4:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800a0e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0ec:	d472      	bmi.n	800a1d4 <arm_cmplx_mag_f32+0x218>
 800a0ee:	ed81 8a00 	vstr	s16, [r1]
 800a0f2:	3a01      	subs	r2, #1
 800a0f4:	d033      	beq.n	800a15e <arm_cmplx_mag_f32+0x1a2>
 800a0f6:	ed90 0a02 	vldr	s0, [r0, #8]
 800a0fa:	2300      	movs	r3, #0
 800a0fc:	edd0 7a03 	vldr	s15, [r0, #12]
 800a100:	ee20 0a00 	vmul.f32	s0, s0, s0
 800a104:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a108:	ee37 0a80 	vadd.f32	s0, s15, s0
 800a10c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800a110:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a114:	db36      	blt.n	800a184 <arm_cmplx_mag_f32+0x1c8>
 800a116:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800a11a:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800a11e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a122:	d460      	bmi.n	800a1e6 <arm_cmplx_mag_f32+0x22a>
 800a124:	ed81 8a01 	vstr	s16, [r1, #4]
 800a128:	2a01      	cmp	r2, #1
 800a12a:	d018      	beq.n	800a15e <arm_cmplx_mag_f32+0x1a2>
 800a12c:	ed90 0a04 	vldr	s0, [r0, #16]
 800a130:	2300      	movs	r3, #0
 800a132:	edd0 7a05 	vldr	s15, [r0, #20]
 800a136:	ee20 0a00 	vmul.f32	s0, s0, s0
 800a13a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a13e:	ee30 0a27 	vadd.f32	s0, s0, s15
 800a142:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800a146:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a14a:	db1d      	blt.n	800a188 <arm_cmplx_mag_f32+0x1cc>
 800a14c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800a150:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800a154:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a158:	d44e      	bmi.n	800a1f8 <arm_cmplx_mag_f32+0x23c>
 800a15a:	ed81 8a02 	vstr	s16, [r1, #8]
 800a15e:	b004      	add	sp, #16
 800a160:	ecbd 8b02 	vpop	{d8}
 800a164:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a168:	f845 8c04 	str.w	r8, [r5, #-4]
 800a16c:	e79b      	b.n	800a0a6 <arm_cmplx_mag_f32+0xea>
 800a16e:	f845 8c08 	str.w	r8, [r5, #-8]
 800a172:	e77f      	b.n	800a074 <arm_cmplx_mag_f32+0xb8>
 800a174:	f845 8c0c 	str.w	r8, [r5, #-12]
 800a178:	e762      	b.n	800a040 <arm_cmplx_mag_f32+0x84>
 800a17a:	f845 8c10 	str.w	r8, [r5, #-16]
 800a17e:	e745      	b.n	800a00c <arm_cmplx_mag_f32+0x50>
 800a180:	600b      	str	r3, [r1, #0]
 800a182:	e7b6      	b.n	800a0f2 <arm_cmplx_mag_f32+0x136>
 800a184:	604b      	str	r3, [r1, #4]
 800a186:	e7cf      	b.n	800a128 <arm_cmplx_mag_f32+0x16c>
 800a188:	608b      	str	r3, [r1, #8]
 800a18a:	e7e8      	b.n	800a15e <arm_cmplx_mag_f32+0x1a2>
 800a18c:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800a190:	9001      	str	r0, [sp, #4]
 800a192:	f003 f96b 	bl	800d46c <sqrtf>
 800a196:	9801      	ldr	r0, [sp, #4]
 800a198:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800a19c:	e74e      	b.n	800a03c <arm_cmplx_mag_f32+0x80>
 800a19e:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800a1a2:	9001      	str	r0, [sp, #4]
 800a1a4:	f003 f962 	bl	800d46c <sqrtf>
 800a1a8:	9801      	ldr	r0, [sp, #4]
 800a1aa:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800a1ae:	e75f      	b.n	800a070 <arm_cmplx_mag_f32+0xb4>
 800a1b0:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800a1b4:	9001      	str	r0, [sp, #4]
 800a1b6:	f003 f959 	bl	800d46c <sqrtf>
 800a1ba:	9801      	ldr	r0, [sp, #4]
 800a1bc:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800a1c0:	e722      	b.n	800a008 <arm_cmplx_mag_f32+0x4c>
 800a1c2:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800a1c6:	9001      	str	r0, [sp, #4]
 800a1c8:	f003 f950 	bl	800d46c <sqrtf>
 800a1cc:	9801      	ldr	r0, [sp, #4]
 800a1ce:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800a1d2:	e766      	b.n	800a0a2 <arm_cmplx_mag_f32+0xe6>
 800a1d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a1d8:	9201      	str	r2, [sp, #4]
 800a1da:	f003 f947 	bl	800d46c <sqrtf>
 800a1de:	9903      	ldr	r1, [sp, #12]
 800a1e0:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 800a1e4:	e783      	b.n	800a0ee <arm_cmplx_mag_f32+0x132>
 800a1e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a1ea:	9201      	str	r2, [sp, #4]
 800a1ec:	f003 f93e 	bl	800d46c <sqrtf>
 800a1f0:	9903      	ldr	r1, [sp, #12]
 800a1f2:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 800a1f6:	e795      	b.n	800a124 <arm_cmplx_mag_f32+0x168>
 800a1f8:	9101      	str	r1, [sp, #4]
 800a1fa:	f003 f937 	bl	800d46c <sqrtf>
 800a1fe:	9901      	ldr	r1, [sp, #4]
 800a200:	e7ab      	b.n	800a15a <arm_cmplx_mag_f32+0x19e>
 800a202:	bf00      	nop

0800a204 <arm_cmplx_conj_f32>:
 800a204:	b4f0      	push	{r4, r5, r6, r7}
 800a206:	0897      	lsrs	r7, r2, #2
 800a208:	d035      	beq.n	800a276 <arm_cmplx_conj_f32+0x72>
 800a20a:	f100 0420 	add.w	r4, r0, #32
 800a20e:	f101 0320 	add.w	r3, r1, #32
 800a212:	463d      	mov	r5, r7
 800a214:	f854 6c20 	ldr.w	r6, [r4, #-32]
 800a218:	3d01      	subs	r5, #1
 800a21a:	f104 0420 	add.w	r4, r4, #32
 800a21e:	f103 0320 	add.w	r3, r3, #32
 800a222:	f843 6c40 	str.w	r6, [r3, #-64]
 800a226:	ed54 7a0f 	vldr	s15, [r4, #-60]	; 0xffffffc4
 800a22a:	eef1 7a67 	vneg.f32	s15, s15
 800a22e:	ed43 7a0f 	vstr	s15, [r3, #-60]	; 0xffffffc4
 800a232:	f854 6c38 	ldr.w	r6, [r4, #-56]
 800a236:	f843 6c38 	str.w	r6, [r3, #-56]
 800a23a:	ed54 7a0d 	vldr	s15, [r4, #-52]	; 0xffffffcc
 800a23e:	eef1 7a67 	vneg.f32	s15, s15
 800a242:	ed43 7a0d 	vstr	s15, [r3, #-52]	; 0xffffffcc
 800a246:	f854 6c30 	ldr.w	r6, [r4, #-48]
 800a24a:	f843 6c30 	str.w	r6, [r3, #-48]
 800a24e:	ed54 7a0b 	vldr	s15, [r4, #-44]	; 0xffffffd4
 800a252:	eef1 7a67 	vneg.f32	s15, s15
 800a256:	ed43 7a0b 	vstr	s15, [r3, #-44]	; 0xffffffd4
 800a25a:	f854 6c28 	ldr.w	r6, [r4, #-40]
 800a25e:	f843 6c28 	str.w	r6, [r3, #-40]
 800a262:	ed54 7a09 	vldr	s15, [r4, #-36]	; 0xffffffdc
 800a266:	eef1 7a67 	vneg.f32	s15, s15
 800a26a:	ed43 7a09 	vstr	s15, [r3, #-36]	; 0xffffffdc
 800a26e:	d1d1      	bne.n	800a214 <arm_cmplx_conj_f32+0x10>
 800a270:	017f      	lsls	r7, r7, #5
 800a272:	4438      	add	r0, r7
 800a274:	4439      	add	r1, r7
 800a276:	f012 0203 	ands.w	r2, r2, #3
 800a27a:	d01b      	beq.n	800a2b4 <arm_cmplx_conj_f32+0xb0>
 800a27c:	6803      	ldr	r3, [r0, #0]
 800a27e:	3a01      	subs	r2, #1
 800a280:	600b      	str	r3, [r1, #0]
 800a282:	edd0 7a01 	vldr	s15, [r0, #4]
 800a286:	eef1 7a67 	vneg.f32	s15, s15
 800a28a:	edc1 7a01 	vstr	s15, [r1, #4]
 800a28e:	d011      	beq.n	800a2b4 <arm_cmplx_conj_f32+0xb0>
 800a290:	6883      	ldr	r3, [r0, #8]
 800a292:	2a01      	cmp	r2, #1
 800a294:	608b      	str	r3, [r1, #8]
 800a296:	edd0 7a03 	vldr	s15, [r0, #12]
 800a29a:	eef1 7a67 	vneg.f32	s15, s15
 800a29e:	edc1 7a03 	vstr	s15, [r1, #12]
 800a2a2:	d007      	beq.n	800a2b4 <arm_cmplx_conj_f32+0xb0>
 800a2a4:	6903      	ldr	r3, [r0, #16]
 800a2a6:	610b      	str	r3, [r1, #16]
 800a2a8:	edd0 7a05 	vldr	s15, [r0, #20]
 800a2ac:	eef1 7a67 	vneg.f32	s15, s15
 800a2b0:	edc1 7a05 	vstr	s15, [r1, #20]
 800a2b4:	bcf0      	pop	{r4, r5, r6, r7}
 800a2b6:	4770      	bx	lr

0800a2b8 <arm_mult_f32>:
 800a2b8:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 800a2bc:	b4f0      	push	{r4, r5, r6, r7}
 800a2be:	d033      	beq.n	800a328 <arm_mult_f32+0x70>
 800a2c0:	f100 0610 	add.w	r6, r0, #16
 800a2c4:	f101 0510 	add.w	r5, r1, #16
 800a2c8:	f102 0410 	add.w	r4, r2, #16
 800a2cc:	4667      	mov	r7, ip
 800a2ce:	ed15 7a04 	vldr	s14, [r5, #-16]
 800a2d2:	3f01      	subs	r7, #1
 800a2d4:	ed56 7a04 	vldr	s15, [r6, #-16]
 800a2d8:	f105 0510 	add.w	r5, r5, #16
 800a2dc:	f106 0610 	add.w	r6, r6, #16
 800a2e0:	f104 0410 	add.w	r4, r4, #16
 800a2e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a2e8:	ed44 7a08 	vstr	s15, [r4, #-32]	; 0xffffffe0
 800a2ec:	ed15 7a07 	vldr	s14, [r5, #-28]	; 0xffffffe4
 800a2f0:	ed56 7a07 	vldr	s15, [r6, #-28]	; 0xffffffe4
 800a2f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a2f8:	ed44 7a07 	vstr	s15, [r4, #-28]	; 0xffffffe4
 800a2fc:	ed15 7a06 	vldr	s14, [r5, #-24]	; 0xffffffe8
 800a300:	ed56 7a06 	vldr	s15, [r6, #-24]	; 0xffffffe8
 800a304:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a308:	ed44 7a06 	vstr	s15, [r4, #-24]	; 0xffffffe8
 800a30c:	ed56 7a05 	vldr	s15, [r6, #-20]	; 0xffffffec
 800a310:	ed15 7a05 	vldr	s14, [r5, #-20]	; 0xffffffec
 800a314:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a318:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 800a31c:	d1d7      	bne.n	800a2ce <arm_mult_f32+0x16>
 800a31e:	ea4f 140c 	mov.w	r4, ip, lsl #4
 800a322:	4420      	add	r0, r4
 800a324:	4421      	add	r1, r4
 800a326:	4422      	add	r2, r4
 800a328:	f013 0303 	ands.w	r3, r3, #3
 800a32c:	d01b      	beq.n	800a366 <arm_mult_f32+0xae>
 800a32e:	edd1 7a00 	vldr	s15, [r1]
 800a332:	3b01      	subs	r3, #1
 800a334:	ed90 7a00 	vldr	s14, [r0]
 800a338:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a33c:	edc2 7a00 	vstr	s15, [r2]
 800a340:	d011      	beq.n	800a366 <arm_mult_f32+0xae>
 800a342:	edd0 7a01 	vldr	s15, [r0, #4]
 800a346:	2b01      	cmp	r3, #1
 800a348:	ed91 7a01 	vldr	s14, [r1, #4]
 800a34c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a350:	edc2 7a01 	vstr	s15, [r2, #4]
 800a354:	d007      	beq.n	800a366 <arm_mult_f32+0xae>
 800a356:	edd0 7a02 	vldr	s15, [r0, #8]
 800a35a:	ed91 7a02 	vldr	s14, [r1, #8]
 800a35e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a362:	edc2 7a02 	vstr	s15, [r2, #8]
 800a366:	bcf0      	pop	{r4, r5, r6, r7}
 800a368:	4770      	bx	lr
 800a36a:	bf00      	nop

0800a36c <arm_radix8_butterfly_f32>:
 800a36c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a370:	ed2d 8b10 	vpush	{d8-d15}
 800a374:	b095      	sub	sp, #84	; 0x54
 800a376:	468a      	mov	sl, r1
 800a378:	468b      	mov	fp, r1
 800a37a:	eddf 8abb 	vldr	s17, [pc, #748]	; 800a668 <arm_radix8_butterfly_f32+0x2fc>
 800a37e:	9012      	str	r0, [sp, #72]	; 0x48
 800a380:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 800a384:	4603      	mov	r3, r0
 800a386:	3304      	adds	r3, #4
 800a388:	9313      	str	r3, [sp, #76]	; 0x4c
 800a38a:	ea4f 02db 	mov.w	r2, fp, lsr #3
 800a38e:	9912      	ldr	r1, [sp, #72]	; 0x48
 800a390:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a394:	f8dd c04c 	ldr.w	ip, [sp, #76]	; 0x4c
 800a398:	ea4f 09c2 	mov.w	r9, r2, lsl #3
 800a39c:	920f      	str	r2, [sp, #60]	; 0x3c
 800a39e:	9303      	str	r3, [sp, #12]
 800a3a0:	0153      	lsls	r3, r2, #5
 800a3a2:	0114      	lsls	r4, r2, #4
 800a3a4:	eba9 0002 	sub.w	r0, r9, r2
 800a3a8:	18ce      	adds	r6, r1, r3
 800a3aa:	9302      	str	r3, [sp, #8]
 800a3ac:	0097      	lsls	r7, r2, #2
 800a3ae:	4613      	mov	r3, r2
 800a3b0:	eb06 0509 	add.w	r5, r6, r9
 800a3b4:	9004      	str	r0, [sp, #16]
 800a3b6:	eb03 0843 	add.w	r8, r3, r3, lsl #1
 800a3ba:	1bd2      	subs	r2, r2, r7
 800a3bc:	eb05 0109 	add.w	r1, r5, r9
 800a3c0:	441f      	add	r7, r3
 800a3c2:	9405      	str	r4, [sp, #20]
 800a3c4:	f109 0004 	add.w	r0, r9, #4
 800a3c8:	9101      	str	r1, [sp, #4]
 800a3ca:	1d21      	adds	r1, r4, #4
 800a3cc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a3ce:	f04f 0e00 	mov.w	lr, #0
 800a3d2:	9c01      	ldr	r4, [sp, #4]
 800a3d4:	4418      	add	r0, r3
 800a3d6:	4419      	add	r1, r3
 800a3d8:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 800a3dc:	9b02      	ldr	r3, [sp, #8]
 800a3de:	00fc      	lsls	r4, r7, #3
 800a3e0:	18d7      	adds	r7, r2, r3
 800a3e2:	9b04      	ldr	r3, [sp, #16]
 800a3e4:	9406      	str	r4, [sp, #24]
 800a3e6:	00db      	lsls	r3, r3, #3
 800a3e8:	9c01      	ldr	r4, [sp, #4]
 800a3ea:	9307      	str	r3, [sp, #28]
 800a3ec:	ea4f 1308 	mov.w	r3, r8, lsl #4
 800a3f0:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 800a3f4:	9304      	str	r3, [sp, #16]
 800a3f6:	9b03      	ldr	r3, [sp, #12]
 800a3f8:	edd6 6a00 	vldr	s13, [r6]
 800a3fc:	44de      	add	lr, fp
 800a3fe:	ed5c 7a01 	vldr	s15, [ip, #-4]
 800a402:	ed94 7a00 	vldr	s14, [r4]
 800a406:	45f2      	cmp	sl, lr
 800a408:	ed10 6a01 	vldr	s12, [r0, #-4]
 800a40c:	ee37 2aa6 	vadd.f32	s4, s15, s13
 800a410:	edd5 2a00 	vldr	s5, [r5]
 800a414:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800a418:	edd7 3a00 	vldr	s7, [r7]
 800a41c:	ed11 5a01 	vldr	s10, [r1, #-4]
 800a420:	ee36 3a22 	vadd.f32	s6, s12, s5
 800a424:	edd2 6a00 	vldr	s13, [r2]
 800a428:	ee75 5a07 	vadd.f32	s11, s10, s14
 800a42c:	ee36 4aa3 	vadd.f32	s8, s13, s7
 800a430:	ee76 6ae3 	vsub.f32	s13, s13, s7
 800a434:	ee72 4a25 	vadd.f32	s9, s4, s11
 800a438:	ee73 3a04 	vadd.f32	s7, s6, s8
 800a43c:	ee35 5a47 	vsub.f32	s10, s10, s14
 800a440:	ee36 7a62 	vsub.f32	s14, s12, s5
 800a444:	ee32 2a65 	vsub.f32	s4, s4, s11
 800a448:	ee74 5aa3 	vadd.f32	s11, s9, s7
 800a44c:	ee74 4ae3 	vsub.f32	s9, s9, s7
 800a450:	ee37 6a66 	vsub.f32	s12, s14, s13
 800a454:	ed4c 5a01 	vstr	s11, [ip, #-4]
 800a458:	ee33 3a44 	vsub.f32	s6, s6, s8
 800a45c:	edc6 4a00 	vstr	s9, [r6]
 800a460:	ee37 7a26 	vadd.f32	s14, s14, s13
 800a464:	ed97 4a01 	vldr	s8, [r7, #4]
 800a468:	ee66 6a28 	vmul.f32	s13, s12, s17
 800a46c:	edd0 5a00 	vldr	s11, [r0]
 800a470:	ed95 6a01 	vldr	s12, [r5, #4]
 800a474:	ee27 7a28 	vmul.f32	s14, s14, s17
 800a478:	edd2 3a01 	vldr	s7, [r2, #4]
 800a47c:	ee77 2aa6 	vadd.f32	s5, s15, s13
 800a480:	ee75 4ac6 	vsub.f32	s9, s11, s12
 800a484:	ed96 1a01 	vldr	s2, [r6, #4]
 800a488:	ee33 0ac4 	vsub.f32	s0, s7, s8
 800a48c:	edd4 0a01 	vldr	s1, [r4, #4]
 800a490:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800a494:	eddc 6a00 	vldr	s13, [ip]
 800a498:	ee75 5a86 	vadd.f32	s11, s11, s12
 800a49c:	ed91 6a00 	vldr	s12, [r1]
 800a4a0:	ee73 3a84 	vadd.f32	s7, s7, s8
 800a4a4:	ee74 1a80 	vadd.f32	s3, s9, s0
 800a4a8:	ee36 4a81 	vadd.f32	s8, s13, s2
 800a4ac:	ee74 4ac0 	vsub.f32	s9, s9, s0
 800a4b0:	ee76 6ac1 	vsub.f32	s13, s13, s2
 800a4b4:	ee36 1a20 	vadd.f32	s2, s12, s1
 800a4b8:	ee61 1aa8 	vmul.f32	s3, s3, s17
 800a4bc:	ee36 6a60 	vsub.f32	s12, s12, s1
 800a4c0:	ee64 4aa8 	vmul.f32	s9, s9, s17
 800a4c4:	ee75 0aa3 	vadd.f32	s1, s11, s7
 800a4c8:	ee75 5ae3 	vsub.f32	s11, s11, s7
 800a4cc:	ee74 3a01 	vadd.f32	s7, s8, s2
 800a4d0:	ee34 4a41 	vsub.f32	s8, s8, s2
 800a4d4:	ee36 1a21 	vadd.f32	s2, s12, s3
 800a4d8:	ee33 0aa0 	vadd.f32	s0, s7, s1
 800a4dc:	ee36 6a61 	vsub.f32	s12, s12, s3
 800a4e0:	ee73 3ae0 	vsub.f32	s7, s7, s1
 800a4e4:	ee76 1aa4 	vadd.f32	s3, s13, s9
 800a4e8:	ed8c 0a00 	vstr	s0, [ip]
 800a4ec:	ee76 6ae4 	vsub.f32	s13, s13, s9
 800a4f0:	449c      	add	ip, r3
 800a4f2:	ee75 4a07 	vadd.f32	s9, s10, s14
 800a4f6:	edc6 3a01 	vstr	s7, [r6, #4]
 800a4fa:	ee35 7a47 	vsub.f32	s14, s10, s14
 800a4fe:	441e      	add	r6, r3
 800a500:	ee32 5a25 	vadd.f32	s10, s4, s11
 800a504:	ee72 5a65 	vsub.f32	s11, s4, s11
 800a508:	ee72 3a81 	vadd.f32	s7, s5, s2
 800a50c:	ed01 5a01 	vstr	s10, [r1, #-4]
 800a510:	ee34 2a43 	vsub.f32	s4, s8, s6
 800a514:	edc4 5a00 	vstr	s11, [r4]
 800a518:	ee37 5a86 	vadd.f32	s10, s15, s12
 800a51c:	ee71 5ae4 	vsub.f32	s11, s3, s9
 800a520:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800a524:	ed81 2a00 	vstr	s4, [r1]
 800a528:	ee36 6ac7 	vsub.f32	s12, s13, s14
 800a52c:	4419      	add	r1, r3
 800a52e:	ee33 4a04 	vadd.f32	s8, s6, s8
 800a532:	ee72 2ac1 	vsub.f32	s5, s5, s2
 800a536:	ee74 4aa1 	vadd.f32	s9, s9, s3
 800a53a:	ee37 7a26 	vadd.f32	s14, s14, s13
 800a53e:	ed84 4a01 	vstr	s8, [r4, #4]
 800a542:	ed40 3a01 	vstr	s7, [r0, #-4]
 800a546:	441c      	add	r4, r3
 800a548:	edc7 2a00 	vstr	s5, [r7]
 800a54c:	ed85 5a00 	vstr	s10, [r5]
 800a550:	edc2 7a00 	vstr	s15, [r2]
 800a554:	edc0 5a00 	vstr	s11, [r0]
 800a558:	4418      	add	r0, r3
 800a55a:	edc7 4a01 	vstr	s9, [r7, #4]
 800a55e:	441f      	add	r7, r3
 800a560:	ed85 6a01 	vstr	s12, [r5, #4]
 800a564:	441d      	add	r5, r3
 800a566:	ed82 7a01 	vstr	s14, [r2, #4]
 800a56a:	441a      	add	r2, r3
 800a56c:	f63f af44 	bhi.w	800a3f8 <arm_radix8_butterfly_f32+0x8c>
 800a570:	469c      	mov	ip, r3
 800a572:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a574:	2b07      	cmp	r3, #7
 800a576:	f240 81b6 	bls.w	800a8e6 <arm_radix8_butterfly_f32+0x57a>
 800a57a:	9a02      	ldr	r2, [sp, #8]
 800a57c:	f109 0608 	add.w	r6, r9, #8
 800a580:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a582:	f108 0408 	add.w	r4, r8, #8
 800a586:	3208      	adds	r2, #8
 800a588:	9f06      	ldr	r7, [sp, #24]
 800a58a:	9d04      	ldr	r5, [sp, #16]
 800a58c:	189a      	adds	r2, r3, r2
 800a58e:	3708      	adds	r7, #8
 800a590:	3508      	adds	r5, #8
 800a592:	9807      	ldr	r0, [sp, #28]
 800a594:	920c      	str	r2, [sp, #48]	; 0x30
 800a596:	199a      	adds	r2, r3, r6
 800a598:	9905      	ldr	r1, [sp, #20]
 800a59a:	3008      	adds	r0, #8
 800a59c:	920b      	str	r2, [sp, #44]	; 0x2c
 800a59e:	19da      	adds	r2, r3, r7
 800a5a0:	310c      	adds	r1, #12
 800a5a2:	920a      	str	r2, [sp, #40]	; 0x28
 800a5a4:	195a      	adds	r2, r3, r5
 800a5a6:	9209      	str	r2, [sp, #36]	; 0x24
 800a5a8:	191a      	adds	r2, r3, r4
 800a5aa:	9208      	str	r2, [sp, #32]
 800a5ac:	181a      	adds	r2, r3, r0
 800a5ae:	9207      	str	r2, [sp, #28]
 800a5b0:	185a      	adds	r2, r3, r1
 800a5b2:	330c      	adds	r3, #12
 800a5b4:	9205      	str	r2, [sp, #20]
 800a5b6:	9306      	str	r3, [sp, #24]
 800a5b8:	2301      	movs	r3, #1
 800a5ba:	9304      	str	r3, [sp, #16]
 800a5bc:	2300      	movs	r3, #0
 800a5be:	930d      	str	r3, [sp, #52]	; 0x34
 800a5c0:	4663      	mov	r3, ip
 800a5c2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a5c4:	9910      	ldr	r1, [sp, #64]	; 0x40
 800a5c6:	f8dd c014 	ldr.w	ip, [sp, #20]
 800a5ca:	440a      	add	r2, r1
 800a5cc:	9f06      	ldr	r7, [sp, #24]
 800a5ce:	9e07      	ldr	r6, [sp, #28]
 800a5d0:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 800a5d4:	920d      	str	r2, [sp, #52]	; 0x34
 800a5d6:	eba2 0e82 	sub.w	lr, r2, r2, lsl #2
 800a5da:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a5dc:	9d08      	ldr	r5, [sp, #32]
 800a5de:	4442      	add	r2, r8
 800a5e0:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800a5e2:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a5e4:	eb02 0108 	add.w	r1, r2, r8
 800a5e8:	ed92 ea00 	vldr	s28, [r2]
 800a5ec:	eb01 0208 	add.w	r2, r1, r8
 800a5f0:	edd1 da00 	vldr	s27, [r1]
 800a5f4:	eb02 0108 	add.w	r1, r2, r8
 800a5f8:	ed92 da00 	vldr	s26, [r2]
 800a5fc:	eb01 0208 	add.w	r2, r1, r8
 800a600:	edd1 ca00 	vldr	s25, [r1]
 800a604:	eb02 0108 	add.w	r1, r2, r8
 800a608:	ed92 ca00 	vldr	s24, [r2]
 800a60c:	eb01 0208 	add.w	r2, r1, r8
 800a610:	edd1 ba00 	vldr	s23, [r1]
 800a614:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a616:	eb02 1e0e 	add.w	lr, r2, lr, lsl #4
 800a61a:	ed92 ba00 	vldr	s22, [r2]
 800a61e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a620:	eb0e 0908 	add.w	r9, lr, r8
 800a624:	910e      	str	r1, [sp, #56]	; 0x38
 800a626:	9201      	str	r2, [sp, #4]
 800a628:	eb09 0208 	add.w	r2, r9, r8
 800a62c:	ed99 aa01 	vldr	s20, [r9, #4]
 800a630:	edde aa01 	vldr	s21, [lr, #4]
 800a634:	eb02 0908 	add.w	r9, r2, r8
 800a638:	edd2 9a01 	vldr	s19, [r2, #4]
 800a63c:	f8dd e010 	ldr.w	lr, [sp, #16]
 800a640:	eb09 0208 	add.w	r2, r9, r8
 800a644:	ed99 9a01 	vldr	s18, [r9, #4]
 800a648:	eb02 0908 	add.w	r9, r2, r8
 800a64c:	ed92 8a01 	vldr	s16, [r2, #4]
 800a650:	9a01      	ldr	r2, [sp, #4]
 800a652:	edd9 7a01 	vldr	s15, [r9, #4]
 800a656:	44c8      	add	r8, r9
 800a658:	edcd 7a02 	vstr	s15, [sp, #8]
 800a65c:	edd8 7a01 	vldr	s15, [r8, #4]
 800a660:	edcd 7a03 	vstr	s15, [sp, #12]
 800a664:	990e      	ldr	r1, [sp, #56]	; 0x38
 800a666:	e001      	b.n	800a66c <arm_radix8_butterfly_f32+0x300>
 800a668:	3f3504f3 	.word	0x3f3504f3
 800a66c:	ed92 7a00 	vldr	s14, [r2]
 800a670:	44de      	add	lr, fp
 800a672:	ed17 1a01 	vldr	s2, [r7, #-4]
 800a676:	ed90 5a00 	vldr	s10, [r0]
 800a67a:	45f2      	cmp	sl, lr
 800a67c:	ed1c fa01 	vldr	s30, [ip, #-4]
 800a680:	ee31 3a07 	vadd.f32	s6, s2, s14
 800a684:	edd6 5a00 	vldr	s11, [r6]
 800a688:	ee31 1a47 	vsub.f32	s2, s2, s14
 800a68c:	edd4 7a00 	vldr	s15, [r4]
 800a690:	ed95 7a00 	vldr	s14, [r5]
 800a694:	ed91 4a00 	vldr	s8, [r1]
 800a698:	ee3f 6a27 	vadd.f32	s12, s30, s15
 800a69c:	ee77 6a25 	vadd.f32	s13, s14, s11
 800a6a0:	edd7 ea00 	vldr	s29, [r7]
 800a6a4:	ee74 fa05 	vadd.f32	s31, s8, s10
 800a6a8:	ee73 1a06 	vadd.f32	s3, s6, s12
 800a6ac:	ee34 4a45 	vsub.f32	s8, s8, s10
 800a6b0:	ee3f 5aa6 	vadd.f32	s10, s31, s13
 800a6b4:	ee37 7a65 	vsub.f32	s14, s14, s11
 800a6b8:	ee33 3a46 	vsub.f32	s6, s6, s12
 800a6bc:	ee31 6a85 	vadd.f32	s12, s3, s10
 800a6c0:	ee7f 7a67 	vsub.f32	s15, s30, s15
 800a6c4:	ee34 fa07 	vadd.f32	s30, s8, s14
 800a6c8:	ed07 6a01 	vstr	s12, [r7, #-4]
 800a6cc:	ee34 4a47 	vsub.f32	s8, s8, s14
 800a6d0:	edd5 3a01 	vldr	s7, [r5, #4]
 800a6d4:	ee7f fae6 	vsub.f32	s31, s31, s13
 800a6d8:	ed90 7a01 	vldr	s14, [r0, #4]
 800a6dc:	ee2f fa28 	vmul.f32	s30, s30, s17
 800a6e0:	edd1 5a01 	vldr	s11, [r1, #4]
 800a6e4:	ee24 4a28 	vmul.f32	s8, s8, s17
 800a6e8:	ed96 6a01 	vldr	s12, [r6, #4]
 800a6ec:	ee31 5ac5 	vsub.f32	s10, s3, s10
 800a6f0:	ee75 0ac7 	vsub.f32	s1, s11, s14
 800a6f4:	edd2 6a01 	vldr	s13, [r2, #4]
 800a6f8:	ee73 2ac6 	vsub.f32	s5, s7, s12
 800a6fc:	edd4 4a01 	vldr	s9, [r4, #4]
 800a700:	ee75 5a87 	vadd.f32	s11, s11, s14
 800a704:	ed9c 7a00 	vldr	s14, [ip]
 800a708:	ee37 2a8f 	vadd.f32	s4, s15, s30
 800a70c:	ee33 6a86 	vadd.f32	s12, s7, s12
 800a710:	ee37 facf 	vsub.f32	s30, s15, s30
 800a714:	ee7e 3aa6 	vadd.f32	s7, s29, s13
 800a718:	ee70 7ae2 	vsub.f32	s15, s1, s5
 800a71c:	ee7e eae6 	vsub.f32	s29, s29, s13
 800a720:	ee70 2aa2 	vadd.f32	s5, s1, s5
 800a724:	ee77 6a24 	vadd.f32	s13, s14, s9
 800a728:	ee75 0a86 	vadd.f32	s1, s11, s12
 800a72c:	ee37 7a64 	vsub.f32	s14, s14, s9
 800a730:	ee33 0aa6 	vadd.f32	s0, s7, s13
 800a734:	ee67 7aa8 	vmul.f32	s15, s15, s17
 800a738:	ee62 2aa8 	vmul.f32	s5, s5, s17
 800a73c:	ee35 6ac6 	vsub.f32	s12, s11, s12
 800a740:	ee73 3ae6 	vsub.f32	s7, s7, s13
 800a744:	ee7e 5aa7 	vadd.f32	s11, s29, s15
 800a748:	ee77 4a22 	vadd.f32	s9, s14, s5
 800a74c:	ee7e eae7 	vsub.f32	s29, s29, s15
 800a750:	ee77 7a62 	vsub.f32	s15, s14, s5
 800a754:	ee71 2a04 	vadd.f32	s5, s2, s8
 800a758:	ee31 7a44 	vsub.f32	s14, s2, s8
 800a75c:	ee30 1a60 	vsub.f32	s2, s0, s1
 800a760:	ee73 1a06 	vadd.f32	s3, s6, s12
 800a764:	ee33 6a46 	vsub.f32	s12, s6, s12
 800a768:	ee33 3aef 	vsub.f32	s6, s7, s31
 800a76c:	ee7f 6aa3 	vadd.f32	s13, s31, s7
 800a770:	ee3e 4acf 	vsub.f32	s8, s29, s30
 800a774:	ee75 3ac2 	vsub.f32	s7, s11, s4
 800a778:	ee72 5a25 	vadd.f32	s11, s4, s11
 800a77c:	ee32 2aa4 	vadd.f32	s4, s5, s9
 800a780:	ee72 4ae4 	vsub.f32	s9, s5, s9
 800a784:	ee77 2a27 	vadd.f32	s5, s14, s15
 800a788:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a78c:	ee7f 7a2e 	vadd.f32	s15, s30, s29
 800a790:	ee2c fa85 	vmul.f32	s30, s25, s10
 800a794:	ee69 ea01 	vmul.f32	s29, s18, s2
 800a798:	ee29 5a05 	vmul.f32	s10, s18, s10
 800a79c:	ee2c 1a81 	vmul.f32	s2, s25, s2
 800a7a0:	ee6d faa1 	vmul.f32	s31, s27, s3
 800a7a4:	ee70 0a20 	vadd.f32	s1, s0, s1
 800a7a8:	ee6a 1a21 	vmul.f32	s3, s20, s3
 800a7ac:	ee2a 0a03 	vmul.f32	s0, s20, s6
 800a7b0:	ee2d 3a83 	vmul.f32	s6, s27, s6
 800a7b4:	edc7 0a00 	vstr	s1, [r7]
 800a7b8:	ee7f ea2e 	vadd.f32	s29, s30, s29
 800a7bc:	441f      	add	r7, r3
 800a7be:	ee2a faa3 	vmul.f32	s30, s21, s7
 800a7c2:	ee31 5a45 	vsub.f32	s10, s2, s10
 800a7c6:	ee6e 3a23 	vmul.f32	s7, s28, s7
 800a7ca:	edc2 ea00 	vstr	s29, [r2]
 800a7ce:	ee3f 0a80 	vadd.f32	s0, s31, s0
 800a7d2:	ee33 3a61 	vsub.f32	s6, s6, s3
 800a7d6:	ed82 5a01 	vstr	s10, [r2, #4]
 800a7da:	ee6e 0a02 	vmul.f32	s1, s28, s4
 800a7de:	edcd 3a01 	vstr	s7, [sp, #4]
 800a7e2:	ed9d 5a03 	vldr	s10, [sp, #12]
 800a7e6:	ee6b ea86 	vmul.f32	s29, s23, s12
 800a7ea:	eddd 3a02 	vldr	s7, [sp, #8]
 800a7ee:	ee6b fa24 	vmul.f32	s31, s22, s9
 800a7f2:	ed0c 0a01 	vstr	s0, [ip, #-4]
 800a7f6:	ee65 4a24 	vmul.f32	s9, s10, s9
 800a7fa:	ed8c 3a00 	vstr	s6, [ip]
 800a7fe:	ee23 1aa6 	vmul.f32	s2, s7, s13
 800a802:	ee23 6a86 	vmul.f32	s12, s7, s12
 800a806:	eddd 3a01 	vldr	s7, [sp, #4]
 800a80a:	ee25 5a25 	vmul.f32	s10, s10, s11
 800a80e:	441a      	add	r2, r3
 800a810:	ee2c 0a22 	vmul.f32	s0, s24, s5
 800a814:	449c      	add	ip, r3
 800a816:	ee68 1a04 	vmul.f32	s3, s16, s8
 800a81a:	ee70 0a8f 	vadd.f32	s1, s1, s30
 800a81e:	ee2d 3a07 	vmul.f32	s6, s26, s14
 800a822:	ee29 faa7 	vmul.f32	s30, s19, s15
 800a826:	ee2a 2a82 	vmul.f32	s4, s21, s4
 800a82a:	ee6b 6aa6 	vmul.f32	s13, s23, s13
 800a82e:	ee6b 5a25 	vmul.f32	s11, s22, s11
 800a832:	ee68 2a22 	vmul.f32	s5, s16, s5
 800a836:	ee2c 4a04 	vmul.f32	s8, s24, s8
 800a83a:	ee29 7a87 	vmul.f32	s14, s19, s14
 800a83e:	ee6d 7a27 	vmul.f32	s15, s26, s15
 800a842:	ee73 3ac2 	vsub.f32	s7, s7, s4
 800a846:	ee7e ea81 	vadd.f32	s29, s29, s2
 800a84a:	ee36 6ac6 	vsub.f32	s12, s13, s12
 800a84e:	ee3f 5a85 	vadd.f32	s10, s31, s10
 800a852:	ee75 4ae4 	vsub.f32	s9, s11, s9
 800a856:	edc4 ea00 	vstr	s29, [r4]
 800a85a:	ee30 0a21 	vadd.f32	s0, s0, s3
 800a85e:	ed84 6a01 	vstr	s12, [r4, #4]
 800a862:	ee74 2a62 	vsub.f32	s5, s8, s5
 800a866:	edc1 0a00 	vstr	s1, [r1]
 800a86a:	ee33 3a0f 	vadd.f32	s6, s6, s30
 800a86e:	edc1 3a01 	vstr	s7, [r1, #4]
 800a872:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800a876:	ed86 5a00 	vstr	s10, [r6]
 800a87a:	edc6 4a01 	vstr	s9, [r6, #4]
 800a87e:	4419      	add	r1, r3
 800a880:	ed80 0a00 	vstr	s0, [r0]
 800a884:	441c      	add	r4, r3
 800a886:	edc0 2a01 	vstr	s5, [r0, #4]
 800a88a:	441e      	add	r6, r3
 800a88c:	ed85 3a00 	vstr	s6, [r5]
 800a890:	4418      	add	r0, r3
 800a892:	ed85 7a01 	vstr	s14, [r5, #4]
 800a896:	441d      	add	r5, r3
 800a898:	f63f aee8 	bhi.w	800a66c <arm_radix8_butterfly_f32+0x300>
 800a89c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a89e:	9a04      	ldr	r2, [sp, #16]
 800a8a0:	3108      	adds	r1, #8
 800a8a2:	3201      	adds	r2, #1
 800a8a4:	910c      	str	r1, [sp, #48]	; 0x30
 800a8a6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a8a8:	9204      	str	r2, [sp, #16]
 800a8aa:	3108      	adds	r1, #8
 800a8ac:	910b      	str	r1, [sp, #44]	; 0x2c
 800a8ae:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a8b0:	3108      	adds	r1, #8
 800a8b2:	910a      	str	r1, [sp, #40]	; 0x28
 800a8b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a8b6:	3108      	adds	r1, #8
 800a8b8:	9109      	str	r1, [sp, #36]	; 0x24
 800a8ba:	9908      	ldr	r1, [sp, #32]
 800a8bc:	3108      	adds	r1, #8
 800a8be:	9108      	str	r1, [sp, #32]
 800a8c0:	9907      	ldr	r1, [sp, #28]
 800a8c2:	3108      	adds	r1, #8
 800a8c4:	9107      	str	r1, [sp, #28]
 800a8c6:	9906      	ldr	r1, [sp, #24]
 800a8c8:	3108      	adds	r1, #8
 800a8ca:	9106      	str	r1, [sp, #24]
 800a8cc:	9905      	ldr	r1, [sp, #20]
 800a8ce:	3108      	adds	r1, #8
 800a8d0:	9105      	str	r1, [sp, #20]
 800a8d2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a8d4:	4291      	cmp	r1, r2
 800a8d6:	f47f ae74 	bne.w	800a5c2 <arm_radix8_butterfly_f32+0x256>
 800a8da:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a8dc:	468b      	mov	fp, r1
 800a8de:	00db      	lsls	r3, r3, #3
 800a8e0:	b29b      	uxth	r3, r3
 800a8e2:	9310      	str	r3, [sp, #64]	; 0x40
 800a8e4:	e551      	b.n	800a38a <arm_radix8_butterfly_f32+0x1e>
 800a8e6:	b015      	add	sp, #84	; 0x54
 800a8e8:	ecbd 8b10 	vpop	{d8-d15}
 800a8ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a8f0 <malloc>:
 800a8f0:	4b02      	ldr	r3, [pc, #8]	; (800a8fc <malloc+0xc>)
 800a8f2:	4601      	mov	r1, r0
 800a8f4:	6818      	ldr	r0, [r3, #0]
 800a8f6:	f000 b823 	b.w	800a940 <_malloc_r>
 800a8fa:	bf00      	nop
 800a8fc:	24000158 	.word	0x24000158

0800a900 <sbrk_aligned>:
 800a900:	b570      	push	{r4, r5, r6, lr}
 800a902:	4e0e      	ldr	r6, [pc, #56]	; (800a93c <sbrk_aligned+0x3c>)
 800a904:	460c      	mov	r4, r1
 800a906:	6831      	ldr	r1, [r6, #0]
 800a908:	4605      	mov	r5, r0
 800a90a:	b911      	cbnz	r1, 800a912 <sbrk_aligned+0x12>
 800a90c:	f000 fe32 	bl	800b574 <_sbrk_r>
 800a910:	6030      	str	r0, [r6, #0]
 800a912:	4621      	mov	r1, r4
 800a914:	4628      	mov	r0, r5
 800a916:	f000 fe2d 	bl	800b574 <_sbrk_r>
 800a91a:	1c43      	adds	r3, r0, #1
 800a91c:	d00a      	beq.n	800a934 <sbrk_aligned+0x34>
 800a91e:	1cc4      	adds	r4, r0, #3
 800a920:	f024 0403 	bic.w	r4, r4, #3
 800a924:	42a0      	cmp	r0, r4
 800a926:	d007      	beq.n	800a938 <sbrk_aligned+0x38>
 800a928:	1a21      	subs	r1, r4, r0
 800a92a:	4628      	mov	r0, r5
 800a92c:	f000 fe22 	bl	800b574 <_sbrk_r>
 800a930:	3001      	adds	r0, #1
 800a932:	d101      	bne.n	800a938 <sbrk_aligned+0x38>
 800a934:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800a938:	4620      	mov	r0, r4
 800a93a:	bd70      	pop	{r4, r5, r6, pc}
 800a93c:	240023d8 	.word	0x240023d8

0800a940 <_malloc_r>:
 800a940:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a944:	1ccd      	adds	r5, r1, #3
 800a946:	f025 0503 	bic.w	r5, r5, #3
 800a94a:	3508      	adds	r5, #8
 800a94c:	2d0c      	cmp	r5, #12
 800a94e:	bf38      	it	cc
 800a950:	250c      	movcc	r5, #12
 800a952:	2d00      	cmp	r5, #0
 800a954:	4607      	mov	r7, r0
 800a956:	db01      	blt.n	800a95c <_malloc_r+0x1c>
 800a958:	42a9      	cmp	r1, r5
 800a95a:	d905      	bls.n	800a968 <_malloc_r+0x28>
 800a95c:	230c      	movs	r3, #12
 800a95e:	603b      	str	r3, [r7, #0]
 800a960:	2600      	movs	r6, #0
 800a962:	4630      	mov	r0, r6
 800a964:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a968:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800aa3c <_malloc_r+0xfc>
 800a96c:	f000 f868 	bl	800aa40 <__malloc_lock>
 800a970:	f8d8 3000 	ldr.w	r3, [r8]
 800a974:	461c      	mov	r4, r3
 800a976:	bb5c      	cbnz	r4, 800a9d0 <_malloc_r+0x90>
 800a978:	4629      	mov	r1, r5
 800a97a:	4638      	mov	r0, r7
 800a97c:	f7ff ffc0 	bl	800a900 <sbrk_aligned>
 800a980:	1c43      	adds	r3, r0, #1
 800a982:	4604      	mov	r4, r0
 800a984:	d155      	bne.n	800aa32 <_malloc_r+0xf2>
 800a986:	f8d8 4000 	ldr.w	r4, [r8]
 800a98a:	4626      	mov	r6, r4
 800a98c:	2e00      	cmp	r6, #0
 800a98e:	d145      	bne.n	800aa1c <_malloc_r+0xdc>
 800a990:	2c00      	cmp	r4, #0
 800a992:	d048      	beq.n	800aa26 <_malloc_r+0xe6>
 800a994:	6823      	ldr	r3, [r4, #0]
 800a996:	4631      	mov	r1, r6
 800a998:	4638      	mov	r0, r7
 800a99a:	eb04 0903 	add.w	r9, r4, r3
 800a99e:	f000 fde9 	bl	800b574 <_sbrk_r>
 800a9a2:	4581      	cmp	r9, r0
 800a9a4:	d13f      	bne.n	800aa26 <_malloc_r+0xe6>
 800a9a6:	6821      	ldr	r1, [r4, #0]
 800a9a8:	1a6d      	subs	r5, r5, r1
 800a9aa:	4629      	mov	r1, r5
 800a9ac:	4638      	mov	r0, r7
 800a9ae:	f7ff ffa7 	bl	800a900 <sbrk_aligned>
 800a9b2:	3001      	adds	r0, #1
 800a9b4:	d037      	beq.n	800aa26 <_malloc_r+0xe6>
 800a9b6:	6823      	ldr	r3, [r4, #0]
 800a9b8:	442b      	add	r3, r5
 800a9ba:	6023      	str	r3, [r4, #0]
 800a9bc:	f8d8 3000 	ldr.w	r3, [r8]
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d038      	beq.n	800aa36 <_malloc_r+0xf6>
 800a9c4:	685a      	ldr	r2, [r3, #4]
 800a9c6:	42a2      	cmp	r2, r4
 800a9c8:	d12b      	bne.n	800aa22 <_malloc_r+0xe2>
 800a9ca:	2200      	movs	r2, #0
 800a9cc:	605a      	str	r2, [r3, #4]
 800a9ce:	e00f      	b.n	800a9f0 <_malloc_r+0xb0>
 800a9d0:	6822      	ldr	r2, [r4, #0]
 800a9d2:	1b52      	subs	r2, r2, r5
 800a9d4:	d41f      	bmi.n	800aa16 <_malloc_r+0xd6>
 800a9d6:	2a0b      	cmp	r2, #11
 800a9d8:	d917      	bls.n	800aa0a <_malloc_r+0xca>
 800a9da:	1961      	adds	r1, r4, r5
 800a9dc:	42a3      	cmp	r3, r4
 800a9de:	6025      	str	r5, [r4, #0]
 800a9e0:	bf18      	it	ne
 800a9e2:	6059      	strne	r1, [r3, #4]
 800a9e4:	6863      	ldr	r3, [r4, #4]
 800a9e6:	bf08      	it	eq
 800a9e8:	f8c8 1000 	streq.w	r1, [r8]
 800a9ec:	5162      	str	r2, [r4, r5]
 800a9ee:	604b      	str	r3, [r1, #4]
 800a9f0:	4638      	mov	r0, r7
 800a9f2:	f104 060b 	add.w	r6, r4, #11
 800a9f6:	f000 f829 	bl	800aa4c <__malloc_unlock>
 800a9fa:	f026 0607 	bic.w	r6, r6, #7
 800a9fe:	1d23      	adds	r3, r4, #4
 800aa00:	1af2      	subs	r2, r6, r3
 800aa02:	d0ae      	beq.n	800a962 <_malloc_r+0x22>
 800aa04:	1b9b      	subs	r3, r3, r6
 800aa06:	50a3      	str	r3, [r4, r2]
 800aa08:	e7ab      	b.n	800a962 <_malloc_r+0x22>
 800aa0a:	42a3      	cmp	r3, r4
 800aa0c:	6862      	ldr	r2, [r4, #4]
 800aa0e:	d1dd      	bne.n	800a9cc <_malloc_r+0x8c>
 800aa10:	f8c8 2000 	str.w	r2, [r8]
 800aa14:	e7ec      	b.n	800a9f0 <_malloc_r+0xb0>
 800aa16:	4623      	mov	r3, r4
 800aa18:	6864      	ldr	r4, [r4, #4]
 800aa1a:	e7ac      	b.n	800a976 <_malloc_r+0x36>
 800aa1c:	4634      	mov	r4, r6
 800aa1e:	6876      	ldr	r6, [r6, #4]
 800aa20:	e7b4      	b.n	800a98c <_malloc_r+0x4c>
 800aa22:	4613      	mov	r3, r2
 800aa24:	e7cc      	b.n	800a9c0 <_malloc_r+0x80>
 800aa26:	230c      	movs	r3, #12
 800aa28:	603b      	str	r3, [r7, #0]
 800aa2a:	4638      	mov	r0, r7
 800aa2c:	f000 f80e 	bl	800aa4c <__malloc_unlock>
 800aa30:	e797      	b.n	800a962 <_malloc_r+0x22>
 800aa32:	6025      	str	r5, [r4, #0]
 800aa34:	e7dc      	b.n	800a9f0 <_malloc_r+0xb0>
 800aa36:	605b      	str	r3, [r3, #4]
 800aa38:	deff      	udf	#255	; 0xff
 800aa3a:	bf00      	nop
 800aa3c:	240023d4 	.word	0x240023d4

0800aa40 <__malloc_lock>:
 800aa40:	4801      	ldr	r0, [pc, #4]	; (800aa48 <__malloc_lock+0x8>)
 800aa42:	f000 bde3 	b.w	800b60c <__retarget_lock_acquire_recursive>
 800aa46:	bf00      	nop
 800aa48:	2400251c 	.word	0x2400251c

0800aa4c <__malloc_unlock>:
 800aa4c:	4801      	ldr	r0, [pc, #4]	; (800aa54 <__malloc_unlock+0x8>)
 800aa4e:	f000 bdde 	b.w	800b60e <__retarget_lock_release_recursive>
 800aa52:	bf00      	nop
 800aa54:	2400251c 	.word	0x2400251c

0800aa58 <__cvt>:
 800aa58:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aa5a:	ed2d 8b02 	vpush	{d8}
 800aa5e:	eeb0 8b40 	vmov.f64	d8, d0
 800aa62:	b085      	sub	sp, #20
 800aa64:	4617      	mov	r7, r2
 800aa66:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800aa68:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800aa6a:	ee18 2a90 	vmov	r2, s17
 800aa6e:	f025 0520 	bic.w	r5, r5, #32
 800aa72:	2a00      	cmp	r2, #0
 800aa74:	bfb6      	itet	lt
 800aa76:	222d      	movlt	r2, #45	; 0x2d
 800aa78:	2200      	movge	r2, #0
 800aa7a:	eeb1 8b40 	vneglt.f64	d8, d0
 800aa7e:	2d46      	cmp	r5, #70	; 0x46
 800aa80:	460c      	mov	r4, r1
 800aa82:	701a      	strb	r2, [r3, #0]
 800aa84:	d004      	beq.n	800aa90 <__cvt+0x38>
 800aa86:	2d45      	cmp	r5, #69	; 0x45
 800aa88:	d100      	bne.n	800aa8c <__cvt+0x34>
 800aa8a:	3401      	adds	r4, #1
 800aa8c:	2102      	movs	r1, #2
 800aa8e:	e000      	b.n	800aa92 <__cvt+0x3a>
 800aa90:	2103      	movs	r1, #3
 800aa92:	ab03      	add	r3, sp, #12
 800aa94:	9301      	str	r3, [sp, #4]
 800aa96:	ab02      	add	r3, sp, #8
 800aa98:	9300      	str	r3, [sp, #0]
 800aa9a:	4622      	mov	r2, r4
 800aa9c:	4633      	mov	r3, r6
 800aa9e:	eeb0 0b48 	vmov.f64	d0, d8
 800aaa2:	f000 fe3d 	bl	800b720 <_dtoa_r>
 800aaa6:	2d47      	cmp	r5, #71	; 0x47
 800aaa8:	d101      	bne.n	800aaae <__cvt+0x56>
 800aaaa:	07fb      	lsls	r3, r7, #31
 800aaac:	d51a      	bpl.n	800aae4 <__cvt+0x8c>
 800aaae:	2d46      	cmp	r5, #70	; 0x46
 800aab0:	eb00 0204 	add.w	r2, r0, r4
 800aab4:	d10c      	bne.n	800aad0 <__cvt+0x78>
 800aab6:	7803      	ldrb	r3, [r0, #0]
 800aab8:	2b30      	cmp	r3, #48	; 0x30
 800aaba:	d107      	bne.n	800aacc <__cvt+0x74>
 800aabc:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800aac0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aac4:	bf1c      	itt	ne
 800aac6:	f1c4 0401 	rsbne	r4, r4, #1
 800aaca:	6034      	strne	r4, [r6, #0]
 800aacc:	6833      	ldr	r3, [r6, #0]
 800aace:	441a      	add	r2, r3
 800aad0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800aad4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aad8:	bf08      	it	eq
 800aada:	9203      	streq	r2, [sp, #12]
 800aadc:	2130      	movs	r1, #48	; 0x30
 800aade:	9b03      	ldr	r3, [sp, #12]
 800aae0:	4293      	cmp	r3, r2
 800aae2:	d307      	bcc.n	800aaf4 <__cvt+0x9c>
 800aae4:	9b03      	ldr	r3, [sp, #12]
 800aae6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800aae8:	1a1b      	subs	r3, r3, r0
 800aaea:	6013      	str	r3, [r2, #0]
 800aaec:	b005      	add	sp, #20
 800aaee:	ecbd 8b02 	vpop	{d8}
 800aaf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aaf4:	1c5c      	adds	r4, r3, #1
 800aaf6:	9403      	str	r4, [sp, #12]
 800aaf8:	7019      	strb	r1, [r3, #0]
 800aafa:	e7f0      	b.n	800aade <__cvt+0x86>

0800aafc <__exponent>:
 800aafc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aafe:	4603      	mov	r3, r0
 800ab00:	2900      	cmp	r1, #0
 800ab02:	bfb8      	it	lt
 800ab04:	4249      	neglt	r1, r1
 800ab06:	f803 2b02 	strb.w	r2, [r3], #2
 800ab0a:	bfb4      	ite	lt
 800ab0c:	222d      	movlt	r2, #45	; 0x2d
 800ab0e:	222b      	movge	r2, #43	; 0x2b
 800ab10:	2909      	cmp	r1, #9
 800ab12:	7042      	strb	r2, [r0, #1]
 800ab14:	dd2a      	ble.n	800ab6c <__exponent+0x70>
 800ab16:	f10d 0207 	add.w	r2, sp, #7
 800ab1a:	4617      	mov	r7, r2
 800ab1c:	260a      	movs	r6, #10
 800ab1e:	4694      	mov	ip, r2
 800ab20:	fb91 f5f6 	sdiv	r5, r1, r6
 800ab24:	fb06 1415 	mls	r4, r6, r5, r1
 800ab28:	3430      	adds	r4, #48	; 0x30
 800ab2a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800ab2e:	460c      	mov	r4, r1
 800ab30:	2c63      	cmp	r4, #99	; 0x63
 800ab32:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 800ab36:	4629      	mov	r1, r5
 800ab38:	dcf1      	bgt.n	800ab1e <__exponent+0x22>
 800ab3a:	3130      	adds	r1, #48	; 0x30
 800ab3c:	f1ac 0402 	sub.w	r4, ip, #2
 800ab40:	f802 1c01 	strb.w	r1, [r2, #-1]
 800ab44:	1c41      	adds	r1, r0, #1
 800ab46:	4622      	mov	r2, r4
 800ab48:	42ba      	cmp	r2, r7
 800ab4a:	d30a      	bcc.n	800ab62 <__exponent+0x66>
 800ab4c:	f10d 0209 	add.w	r2, sp, #9
 800ab50:	eba2 020c 	sub.w	r2, r2, ip
 800ab54:	42bc      	cmp	r4, r7
 800ab56:	bf88      	it	hi
 800ab58:	2200      	movhi	r2, #0
 800ab5a:	4413      	add	r3, r2
 800ab5c:	1a18      	subs	r0, r3, r0
 800ab5e:	b003      	add	sp, #12
 800ab60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab62:	f812 5b01 	ldrb.w	r5, [r2], #1
 800ab66:	f801 5f01 	strb.w	r5, [r1, #1]!
 800ab6a:	e7ed      	b.n	800ab48 <__exponent+0x4c>
 800ab6c:	2330      	movs	r3, #48	; 0x30
 800ab6e:	3130      	adds	r1, #48	; 0x30
 800ab70:	7083      	strb	r3, [r0, #2]
 800ab72:	70c1      	strb	r1, [r0, #3]
 800ab74:	1d03      	adds	r3, r0, #4
 800ab76:	e7f1      	b.n	800ab5c <__exponent+0x60>

0800ab78 <_printf_float>:
 800ab78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab7c:	b08b      	sub	sp, #44	; 0x2c
 800ab7e:	460c      	mov	r4, r1
 800ab80:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800ab84:	4616      	mov	r6, r2
 800ab86:	461f      	mov	r7, r3
 800ab88:	4605      	mov	r5, r0
 800ab8a:	f000 fcbb 	bl	800b504 <_localeconv_r>
 800ab8e:	f8d0 b000 	ldr.w	fp, [r0]
 800ab92:	4658      	mov	r0, fp
 800ab94:	f7f5 fc0c 	bl	80003b0 <strlen>
 800ab98:	2300      	movs	r3, #0
 800ab9a:	9308      	str	r3, [sp, #32]
 800ab9c:	f8d8 3000 	ldr.w	r3, [r8]
 800aba0:	f894 9018 	ldrb.w	r9, [r4, #24]
 800aba4:	6822      	ldr	r2, [r4, #0]
 800aba6:	3307      	adds	r3, #7
 800aba8:	f023 0307 	bic.w	r3, r3, #7
 800abac:	f103 0108 	add.w	r1, r3, #8
 800abb0:	f8c8 1000 	str.w	r1, [r8]
 800abb4:	ed93 0b00 	vldr	d0, [r3]
 800abb8:	ed9f 6b97 	vldr	d6, [pc, #604]	; 800ae18 <_printf_float+0x2a0>
 800abbc:	eeb0 7bc0 	vabs.f64	d7, d0
 800abc0:	eeb4 7b46 	vcmp.f64	d7, d6
 800abc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abc8:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 800abcc:	4682      	mov	sl, r0
 800abce:	dd24      	ble.n	800ac1a <_printf_float+0xa2>
 800abd0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800abd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abd8:	d502      	bpl.n	800abe0 <_printf_float+0x68>
 800abda:	232d      	movs	r3, #45	; 0x2d
 800abdc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800abe0:	498f      	ldr	r1, [pc, #572]	; (800ae20 <_printf_float+0x2a8>)
 800abe2:	4b90      	ldr	r3, [pc, #576]	; (800ae24 <_printf_float+0x2ac>)
 800abe4:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800abe8:	bf94      	ite	ls
 800abea:	4688      	movls	r8, r1
 800abec:	4698      	movhi	r8, r3
 800abee:	2303      	movs	r3, #3
 800abf0:	6123      	str	r3, [r4, #16]
 800abf2:	f022 0204 	bic.w	r2, r2, #4
 800abf6:	2300      	movs	r3, #0
 800abf8:	6022      	str	r2, [r4, #0]
 800abfa:	9304      	str	r3, [sp, #16]
 800abfc:	9700      	str	r7, [sp, #0]
 800abfe:	4633      	mov	r3, r6
 800ac00:	aa09      	add	r2, sp, #36	; 0x24
 800ac02:	4621      	mov	r1, r4
 800ac04:	4628      	mov	r0, r5
 800ac06:	f000 f9d1 	bl	800afac <_printf_common>
 800ac0a:	3001      	adds	r0, #1
 800ac0c:	f040 808a 	bne.w	800ad24 <_printf_float+0x1ac>
 800ac10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ac14:	b00b      	add	sp, #44	; 0x2c
 800ac16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac1a:	eeb4 0b40 	vcmp.f64	d0, d0
 800ac1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac22:	d709      	bvc.n	800ac38 <_printf_float+0xc0>
 800ac24:	ee10 3a90 	vmov	r3, s1
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	bfbc      	itt	lt
 800ac2c:	232d      	movlt	r3, #45	; 0x2d
 800ac2e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800ac32:	497d      	ldr	r1, [pc, #500]	; (800ae28 <_printf_float+0x2b0>)
 800ac34:	4b7d      	ldr	r3, [pc, #500]	; (800ae2c <_printf_float+0x2b4>)
 800ac36:	e7d5      	b.n	800abe4 <_printf_float+0x6c>
 800ac38:	6863      	ldr	r3, [r4, #4]
 800ac3a:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800ac3e:	9104      	str	r1, [sp, #16]
 800ac40:	1c59      	adds	r1, r3, #1
 800ac42:	d13c      	bne.n	800acbe <_printf_float+0x146>
 800ac44:	2306      	movs	r3, #6
 800ac46:	6063      	str	r3, [r4, #4]
 800ac48:	2300      	movs	r3, #0
 800ac4a:	9303      	str	r3, [sp, #12]
 800ac4c:	ab08      	add	r3, sp, #32
 800ac4e:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800ac52:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ac56:	ab07      	add	r3, sp, #28
 800ac58:	6861      	ldr	r1, [r4, #4]
 800ac5a:	9300      	str	r3, [sp, #0]
 800ac5c:	6022      	str	r2, [r4, #0]
 800ac5e:	f10d 031b 	add.w	r3, sp, #27
 800ac62:	4628      	mov	r0, r5
 800ac64:	f7ff fef8 	bl	800aa58 <__cvt>
 800ac68:	9b04      	ldr	r3, [sp, #16]
 800ac6a:	9907      	ldr	r1, [sp, #28]
 800ac6c:	2b47      	cmp	r3, #71	; 0x47
 800ac6e:	4680      	mov	r8, r0
 800ac70:	d108      	bne.n	800ac84 <_printf_float+0x10c>
 800ac72:	1cc8      	adds	r0, r1, #3
 800ac74:	db02      	blt.n	800ac7c <_printf_float+0x104>
 800ac76:	6863      	ldr	r3, [r4, #4]
 800ac78:	4299      	cmp	r1, r3
 800ac7a:	dd41      	ble.n	800ad00 <_printf_float+0x188>
 800ac7c:	f1a9 0902 	sub.w	r9, r9, #2
 800ac80:	fa5f f989 	uxtb.w	r9, r9
 800ac84:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800ac88:	d820      	bhi.n	800accc <_printf_float+0x154>
 800ac8a:	3901      	subs	r1, #1
 800ac8c:	464a      	mov	r2, r9
 800ac8e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ac92:	9107      	str	r1, [sp, #28]
 800ac94:	f7ff ff32 	bl	800aafc <__exponent>
 800ac98:	9a08      	ldr	r2, [sp, #32]
 800ac9a:	9004      	str	r0, [sp, #16]
 800ac9c:	1813      	adds	r3, r2, r0
 800ac9e:	2a01      	cmp	r2, #1
 800aca0:	6123      	str	r3, [r4, #16]
 800aca2:	dc02      	bgt.n	800acaa <_printf_float+0x132>
 800aca4:	6822      	ldr	r2, [r4, #0]
 800aca6:	07d2      	lsls	r2, r2, #31
 800aca8:	d501      	bpl.n	800acae <_printf_float+0x136>
 800acaa:	3301      	adds	r3, #1
 800acac:	6123      	str	r3, [r4, #16]
 800acae:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d0a2      	beq.n	800abfc <_printf_float+0x84>
 800acb6:	232d      	movs	r3, #45	; 0x2d
 800acb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800acbc:	e79e      	b.n	800abfc <_printf_float+0x84>
 800acbe:	9904      	ldr	r1, [sp, #16]
 800acc0:	2947      	cmp	r1, #71	; 0x47
 800acc2:	d1c1      	bne.n	800ac48 <_printf_float+0xd0>
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d1bf      	bne.n	800ac48 <_printf_float+0xd0>
 800acc8:	2301      	movs	r3, #1
 800acca:	e7bc      	b.n	800ac46 <_printf_float+0xce>
 800accc:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800acd0:	d118      	bne.n	800ad04 <_printf_float+0x18c>
 800acd2:	2900      	cmp	r1, #0
 800acd4:	6863      	ldr	r3, [r4, #4]
 800acd6:	dd0b      	ble.n	800acf0 <_printf_float+0x178>
 800acd8:	6121      	str	r1, [r4, #16]
 800acda:	b913      	cbnz	r3, 800ace2 <_printf_float+0x16a>
 800acdc:	6822      	ldr	r2, [r4, #0]
 800acde:	07d0      	lsls	r0, r2, #31
 800ace0:	d502      	bpl.n	800ace8 <_printf_float+0x170>
 800ace2:	3301      	adds	r3, #1
 800ace4:	440b      	add	r3, r1
 800ace6:	6123      	str	r3, [r4, #16]
 800ace8:	2300      	movs	r3, #0
 800acea:	65a1      	str	r1, [r4, #88]	; 0x58
 800acec:	9304      	str	r3, [sp, #16]
 800acee:	e7de      	b.n	800acae <_printf_float+0x136>
 800acf0:	b913      	cbnz	r3, 800acf8 <_printf_float+0x180>
 800acf2:	6822      	ldr	r2, [r4, #0]
 800acf4:	07d2      	lsls	r2, r2, #31
 800acf6:	d501      	bpl.n	800acfc <_printf_float+0x184>
 800acf8:	3302      	adds	r3, #2
 800acfa:	e7f4      	b.n	800ace6 <_printf_float+0x16e>
 800acfc:	2301      	movs	r3, #1
 800acfe:	e7f2      	b.n	800ace6 <_printf_float+0x16e>
 800ad00:	f04f 0967 	mov.w	r9, #103	; 0x67
 800ad04:	9b08      	ldr	r3, [sp, #32]
 800ad06:	4299      	cmp	r1, r3
 800ad08:	db05      	blt.n	800ad16 <_printf_float+0x19e>
 800ad0a:	6823      	ldr	r3, [r4, #0]
 800ad0c:	6121      	str	r1, [r4, #16]
 800ad0e:	07d8      	lsls	r0, r3, #31
 800ad10:	d5ea      	bpl.n	800ace8 <_printf_float+0x170>
 800ad12:	1c4b      	adds	r3, r1, #1
 800ad14:	e7e7      	b.n	800ace6 <_printf_float+0x16e>
 800ad16:	2900      	cmp	r1, #0
 800ad18:	bfd4      	ite	le
 800ad1a:	f1c1 0202 	rsble	r2, r1, #2
 800ad1e:	2201      	movgt	r2, #1
 800ad20:	4413      	add	r3, r2
 800ad22:	e7e0      	b.n	800ace6 <_printf_float+0x16e>
 800ad24:	6823      	ldr	r3, [r4, #0]
 800ad26:	055a      	lsls	r2, r3, #21
 800ad28:	d407      	bmi.n	800ad3a <_printf_float+0x1c2>
 800ad2a:	6923      	ldr	r3, [r4, #16]
 800ad2c:	4642      	mov	r2, r8
 800ad2e:	4631      	mov	r1, r6
 800ad30:	4628      	mov	r0, r5
 800ad32:	47b8      	blx	r7
 800ad34:	3001      	adds	r0, #1
 800ad36:	d12a      	bne.n	800ad8e <_printf_float+0x216>
 800ad38:	e76a      	b.n	800ac10 <_printf_float+0x98>
 800ad3a:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800ad3e:	f240 80e0 	bls.w	800af02 <_printf_float+0x38a>
 800ad42:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800ad46:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ad4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad4e:	d133      	bne.n	800adb8 <_printf_float+0x240>
 800ad50:	4a37      	ldr	r2, [pc, #220]	; (800ae30 <_printf_float+0x2b8>)
 800ad52:	2301      	movs	r3, #1
 800ad54:	4631      	mov	r1, r6
 800ad56:	4628      	mov	r0, r5
 800ad58:	47b8      	blx	r7
 800ad5a:	3001      	adds	r0, #1
 800ad5c:	f43f af58 	beq.w	800ac10 <_printf_float+0x98>
 800ad60:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800ad64:	429a      	cmp	r2, r3
 800ad66:	db02      	blt.n	800ad6e <_printf_float+0x1f6>
 800ad68:	6823      	ldr	r3, [r4, #0]
 800ad6a:	07d8      	lsls	r0, r3, #31
 800ad6c:	d50f      	bpl.n	800ad8e <_printf_float+0x216>
 800ad6e:	4653      	mov	r3, sl
 800ad70:	465a      	mov	r2, fp
 800ad72:	4631      	mov	r1, r6
 800ad74:	4628      	mov	r0, r5
 800ad76:	47b8      	blx	r7
 800ad78:	3001      	adds	r0, #1
 800ad7a:	f43f af49 	beq.w	800ac10 <_printf_float+0x98>
 800ad7e:	f04f 0800 	mov.w	r8, #0
 800ad82:	f104 091a 	add.w	r9, r4, #26
 800ad86:	9b08      	ldr	r3, [sp, #32]
 800ad88:	3b01      	subs	r3, #1
 800ad8a:	4543      	cmp	r3, r8
 800ad8c:	dc09      	bgt.n	800ada2 <_printf_float+0x22a>
 800ad8e:	6823      	ldr	r3, [r4, #0]
 800ad90:	079b      	lsls	r3, r3, #30
 800ad92:	f100 8106 	bmi.w	800afa2 <_printf_float+0x42a>
 800ad96:	68e0      	ldr	r0, [r4, #12]
 800ad98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad9a:	4298      	cmp	r0, r3
 800ad9c:	bfb8      	it	lt
 800ad9e:	4618      	movlt	r0, r3
 800ada0:	e738      	b.n	800ac14 <_printf_float+0x9c>
 800ada2:	2301      	movs	r3, #1
 800ada4:	464a      	mov	r2, r9
 800ada6:	4631      	mov	r1, r6
 800ada8:	4628      	mov	r0, r5
 800adaa:	47b8      	blx	r7
 800adac:	3001      	adds	r0, #1
 800adae:	f43f af2f 	beq.w	800ac10 <_printf_float+0x98>
 800adb2:	f108 0801 	add.w	r8, r8, #1
 800adb6:	e7e6      	b.n	800ad86 <_printf_float+0x20e>
 800adb8:	9b07      	ldr	r3, [sp, #28]
 800adba:	2b00      	cmp	r3, #0
 800adbc:	dc3a      	bgt.n	800ae34 <_printf_float+0x2bc>
 800adbe:	4a1c      	ldr	r2, [pc, #112]	; (800ae30 <_printf_float+0x2b8>)
 800adc0:	2301      	movs	r3, #1
 800adc2:	4631      	mov	r1, r6
 800adc4:	4628      	mov	r0, r5
 800adc6:	47b8      	blx	r7
 800adc8:	3001      	adds	r0, #1
 800adca:	f43f af21 	beq.w	800ac10 <_printf_float+0x98>
 800adce:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 800add2:	4313      	orrs	r3, r2
 800add4:	d102      	bne.n	800addc <_printf_float+0x264>
 800add6:	6823      	ldr	r3, [r4, #0]
 800add8:	07d9      	lsls	r1, r3, #31
 800adda:	d5d8      	bpl.n	800ad8e <_printf_float+0x216>
 800addc:	4653      	mov	r3, sl
 800adde:	465a      	mov	r2, fp
 800ade0:	4631      	mov	r1, r6
 800ade2:	4628      	mov	r0, r5
 800ade4:	47b8      	blx	r7
 800ade6:	3001      	adds	r0, #1
 800ade8:	f43f af12 	beq.w	800ac10 <_printf_float+0x98>
 800adec:	f04f 0900 	mov.w	r9, #0
 800adf0:	f104 0a1a 	add.w	sl, r4, #26
 800adf4:	9b07      	ldr	r3, [sp, #28]
 800adf6:	425b      	negs	r3, r3
 800adf8:	454b      	cmp	r3, r9
 800adfa:	dc01      	bgt.n	800ae00 <_printf_float+0x288>
 800adfc:	9b08      	ldr	r3, [sp, #32]
 800adfe:	e795      	b.n	800ad2c <_printf_float+0x1b4>
 800ae00:	2301      	movs	r3, #1
 800ae02:	4652      	mov	r2, sl
 800ae04:	4631      	mov	r1, r6
 800ae06:	4628      	mov	r0, r5
 800ae08:	47b8      	blx	r7
 800ae0a:	3001      	adds	r0, #1
 800ae0c:	f43f af00 	beq.w	800ac10 <_printf_float+0x98>
 800ae10:	f109 0901 	add.w	r9, r9, #1
 800ae14:	e7ee      	b.n	800adf4 <_printf_float+0x27c>
 800ae16:	bf00      	nop
 800ae18:	ffffffff 	.word	0xffffffff
 800ae1c:	7fefffff 	.word	0x7fefffff
 800ae20:	08036ebc 	.word	0x08036ebc
 800ae24:	08036ec0 	.word	0x08036ec0
 800ae28:	08036ec4 	.word	0x08036ec4
 800ae2c:	08036ec8 	.word	0x08036ec8
 800ae30:	08036ecc 	.word	0x08036ecc
 800ae34:	9a08      	ldr	r2, [sp, #32]
 800ae36:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ae38:	429a      	cmp	r2, r3
 800ae3a:	bfa8      	it	ge
 800ae3c:	461a      	movge	r2, r3
 800ae3e:	2a00      	cmp	r2, #0
 800ae40:	4691      	mov	r9, r2
 800ae42:	dc38      	bgt.n	800aeb6 <_printf_float+0x33e>
 800ae44:	2300      	movs	r3, #0
 800ae46:	9305      	str	r3, [sp, #20]
 800ae48:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ae4c:	f104 021a 	add.w	r2, r4, #26
 800ae50:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ae52:	9905      	ldr	r1, [sp, #20]
 800ae54:	9304      	str	r3, [sp, #16]
 800ae56:	eba3 0309 	sub.w	r3, r3, r9
 800ae5a:	428b      	cmp	r3, r1
 800ae5c:	dc33      	bgt.n	800aec6 <_printf_float+0x34e>
 800ae5e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800ae62:	429a      	cmp	r2, r3
 800ae64:	db3c      	blt.n	800aee0 <_printf_float+0x368>
 800ae66:	6823      	ldr	r3, [r4, #0]
 800ae68:	07da      	lsls	r2, r3, #31
 800ae6a:	d439      	bmi.n	800aee0 <_printf_float+0x368>
 800ae6c:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 800ae70:	eba2 0903 	sub.w	r9, r2, r3
 800ae74:	9b04      	ldr	r3, [sp, #16]
 800ae76:	1ad2      	subs	r2, r2, r3
 800ae78:	4591      	cmp	r9, r2
 800ae7a:	bfa8      	it	ge
 800ae7c:	4691      	movge	r9, r2
 800ae7e:	f1b9 0f00 	cmp.w	r9, #0
 800ae82:	dc35      	bgt.n	800aef0 <_printf_float+0x378>
 800ae84:	f04f 0800 	mov.w	r8, #0
 800ae88:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ae8c:	f104 0a1a 	add.w	sl, r4, #26
 800ae90:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800ae94:	1a9b      	subs	r3, r3, r2
 800ae96:	eba3 0309 	sub.w	r3, r3, r9
 800ae9a:	4543      	cmp	r3, r8
 800ae9c:	f77f af77 	ble.w	800ad8e <_printf_float+0x216>
 800aea0:	2301      	movs	r3, #1
 800aea2:	4652      	mov	r2, sl
 800aea4:	4631      	mov	r1, r6
 800aea6:	4628      	mov	r0, r5
 800aea8:	47b8      	blx	r7
 800aeaa:	3001      	adds	r0, #1
 800aeac:	f43f aeb0 	beq.w	800ac10 <_printf_float+0x98>
 800aeb0:	f108 0801 	add.w	r8, r8, #1
 800aeb4:	e7ec      	b.n	800ae90 <_printf_float+0x318>
 800aeb6:	4613      	mov	r3, r2
 800aeb8:	4631      	mov	r1, r6
 800aeba:	4642      	mov	r2, r8
 800aebc:	4628      	mov	r0, r5
 800aebe:	47b8      	blx	r7
 800aec0:	3001      	adds	r0, #1
 800aec2:	d1bf      	bne.n	800ae44 <_printf_float+0x2cc>
 800aec4:	e6a4      	b.n	800ac10 <_printf_float+0x98>
 800aec6:	2301      	movs	r3, #1
 800aec8:	4631      	mov	r1, r6
 800aeca:	4628      	mov	r0, r5
 800aecc:	9204      	str	r2, [sp, #16]
 800aece:	47b8      	blx	r7
 800aed0:	3001      	adds	r0, #1
 800aed2:	f43f ae9d 	beq.w	800ac10 <_printf_float+0x98>
 800aed6:	9b05      	ldr	r3, [sp, #20]
 800aed8:	9a04      	ldr	r2, [sp, #16]
 800aeda:	3301      	adds	r3, #1
 800aedc:	9305      	str	r3, [sp, #20]
 800aede:	e7b7      	b.n	800ae50 <_printf_float+0x2d8>
 800aee0:	4653      	mov	r3, sl
 800aee2:	465a      	mov	r2, fp
 800aee4:	4631      	mov	r1, r6
 800aee6:	4628      	mov	r0, r5
 800aee8:	47b8      	blx	r7
 800aeea:	3001      	adds	r0, #1
 800aeec:	d1be      	bne.n	800ae6c <_printf_float+0x2f4>
 800aeee:	e68f      	b.n	800ac10 <_printf_float+0x98>
 800aef0:	9a04      	ldr	r2, [sp, #16]
 800aef2:	464b      	mov	r3, r9
 800aef4:	4442      	add	r2, r8
 800aef6:	4631      	mov	r1, r6
 800aef8:	4628      	mov	r0, r5
 800aefa:	47b8      	blx	r7
 800aefc:	3001      	adds	r0, #1
 800aefe:	d1c1      	bne.n	800ae84 <_printf_float+0x30c>
 800af00:	e686      	b.n	800ac10 <_printf_float+0x98>
 800af02:	9a08      	ldr	r2, [sp, #32]
 800af04:	2a01      	cmp	r2, #1
 800af06:	dc01      	bgt.n	800af0c <_printf_float+0x394>
 800af08:	07db      	lsls	r3, r3, #31
 800af0a:	d537      	bpl.n	800af7c <_printf_float+0x404>
 800af0c:	2301      	movs	r3, #1
 800af0e:	4642      	mov	r2, r8
 800af10:	4631      	mov	r1, r6
 800af12:	4628      	mov	r0, r5
 800af14:	47b8      	blx	r7
 800af16:	3001      	adds	r0, #1
 800af18:	f43f ae7a 	beq.w	800ac10 <_printf_float+0x98>
 800af1c:	4653      	mov	r3, sl
 800af1e:	465a      	mov	r2, fp
 800af20:	4631      	mov	r1, r6
 800af22:	4628      	mov	r0, r5
 800af24:	47b8      	blx	r7
 800af26:	3001      	adds	r0, #1
 800af28:	f43f ae72 	beq.w	800ac10 <_printf_float+0x98>
 800af2c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800af30:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800af34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af38:	9b08      	ldr	r3, [sp, #32]
 800af3a:	d01a      	beq.n	800af72 <_printf_float+0x3fa>
 800af3c:	3b01      	subs	r3, #1
 800af3e:	f108 0201 	add.w	r2, r8, #1
 800af42:	4631      	mov	r1, r6
 800af44:	4628      	mov	r0, r5
 800af46:	47b8      	blx	r7
 800af48:	3001      	adds	r0, #1
 800af4a:	d10e      	bne.n	800af6a <_printf_float+0x3f2>
 800af4c:	e660      	b.n	800ac10 <_printf_float+0x98>
 800af4e:	2301      	movs	r3, #1
 800af50:	464a      	mov	r2, r9
 800af52:	4631      	mov	r1, r6
 800af54:	4628      	mov	r0, r5
 800af56:	47b8      	blx	r7
 800af58:	3001      	adds	r0, #1
 800af5a:	f43f ae59 	beq.w	800ac10 <_printf_float+0x98>
 800af5e:	f108 0801 	add.w	r8, r8, #1
 800af62:	9b08      	ldr	r3, [sp, #32]
 800af64:	3b01      	subs	r3, #1
 800af66:	4543      	cmp	r3, r8
 800af68:	dcf1      	bgt.n	800af4e <_printf_float+0x3d6>
 800af6a:	9b04      	ldr	r3, [sp, #16]
 800af6c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800af70:	e6dd      	b.n	800ad2e <_printf_float+0x1b6>
 800af72:	f04f 0800 	mov.w	r8, #0
 800af76:	f104 091a 	add.w	r9, r4, #26
 800af7a:	e7f2      	b.n	800af62 <_printf_float+0x3ea>
 800af7c:	2301      	movs	r3, #1
 800af7e:	4642      	mov	r2, r8
 800af80:	e7df      	b.n	800af42 <_printf_float+0x3ca>
 800af82:	2301      	movs	r3, #1
 800af84:	464a      	mov	r2, r9
 800af86:	4631      	mov	r1, r6
 800af88:	4628      	mov	r0, r5
 800af8a:	47b8      	blx	r7
 800af8c:	3001      	adds	r0, #1
 800af8e:	f43f ae3f 	beq.w	800ac10 <_printf_float+0x98>
 800af92:	f108 0801 	add.w	r8, r8, #1
 800af96:	68e3      	ldr	r3, [r4, #12]
 800af98:	9909      	ldr	r1, [sp, #36]	; 0x24
 800af9a:	1a5b      	subs	r3, r3, r1
 800af9c:	4543      	cmp	r3, r8
 800af9e:	dcf0      	bgt.n	800af82 <_printf_float+0x40a>
 800afa0:	e6f9      	b.n	800ad96 <_printf_float+0x21e>
 800afa2:	f04f 0800 	mov.w	r8, #0
 800afa6:	f104 0919 	add.w	r9, r4, #25
 800afaa:	e7f4      	b.n	800af96 <_printf_float+0x41e>

0800afac <_printf_common>:
 800afac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800afb0:	4616      	mov	r6, r2
 800afb2:	4699      	mov	r9, r3
 800afb4:	688a      	ldr	r2, [r1, #8]
 800afb6:	690b      	ldr	r3, [r1, #16]
 800afb8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800afbc:	4293      	cmp	r3, r2
 800afbe:	bfb8      	it	lt
 800afc0:	4613      	movlt	r3, r2
 800afc2:	6033      	str	r3, [r6, #0]
 800afc4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800afc8:	4607      	mov	r7, r0
 800afca:	460c      	mov	r4, r1
 800afcc:	b10a      	cbz	r2, 800afd2 <_printf_common+0x26>
 800afce:	3301      	adds	r3, #1
 800afd0:	6033      	str	r3, [r6, #0]
 800afd2:	6823      	ldr	r3, [r4, #0]
 800afd4:	0699      	lsls	r1, r3, #26
 800afd6:	bf42      	ittt	mi
 800afd8:	6833      	ldrmi	r3, [r6, #0]
 800afda:	3302      	addmi	r3, #2
 800afdc:	6033      	strmi	r3, [r6, #0]
 800afde:	6825      	ldr	r5, [r4, #0]
 800afe0:	f015 0506 	ands.w	r5, r5, #6
 800afe4:	d106      	bne.n	800aff4 <_printf_common+0x48>
 800afe6:	f104 0a19 	add.w	sl, r4, #25
 800afea:	68e3      	ldr	r3, [r4, #12]
 800afec:	6832      	ldr	r2, [r6, #0]
 800afee:	1a9b      	subs	r3, r3, r2
 800aff0:	42ab      	cmp	r3, r5
 800aff2:	dc26      	bgt.n	800b042 <_printf_common+0x96>
 800aff4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800aff8:	1e13      	subs	r3, r2, #0
 800affa:	6822      	ldr	r2, [r4, #0]
 800affc:	bf18      	it	ne
 800affe:	2301      	movne	r3, #1
 800b000:	0692      	lsls	r2, r2, #26
 800b002:	d42b      	bmi.n	800b05c <_printf_common+0xb0>
 800b004:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b008:	4649      	mov	r1, r9
 800b00a:	4638      	mov	r0, r7
 800b00c:	47c0      	blx	r8
 800b00e:	3001      	adds	r0, #1
 800b010:	d01e      	beq.n	800b050 <_printf_common+0xa4>
 800b012:	6823      	ldr	r3, [r4, #0]
 800b014:	6922      	ldr	r2, [r4, #16]
 800b016:	f003 0306 	and.w	r3, r3, #6
 800b01a:	2b04      	cmp	r3, #4
 800b01c:	bf02      	ittt	eq
 800b01e:	68e5      	ldreq	r5, [r4, #12]
 800b020:	6833      	ldreq	r3, [r6, #0]
 800b022:	1aed      	subeq	r5, r5, r3
 800b024:	68a3      	ldr	r3, [r4, #8]
 800b026:	bf0c      	ite	eq
 800b028:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b02c:	2500      	movne	r5, #0
 800b02e:	4293      	cmp	r3, r2
 800b030:	bfc4      	itt	gt
 800b032:	1a9b      	subgt	r3, r3, r2
 800b034:	18ed      	addgt	r5, r5, r3
 800b036:	2600      	movs	r6, #0
 800b038:	341a      	adds	r4, #26
 800b03a:	42b5      	cmp	r5, r6
 800b03c:	d11a      	bne.n	800b074 <_printf_common+0xc8>
 800b03e:	2000      	movs	r0, #0
 800b040:	e008      	b.n	800b054 <_printf_common+0xa8>
 800b042:	2301      	movs	r3, #1
 800b044:	4652      	mov	r2, sl
 800b046:	4649      	mov	r1, r9
 800b048:	4638      	mov	r0, r7
 800b04a:	47c0      	blx	r8
 800b04c:	3001      	adds	r0, #1
 800b04e:	d103      	bne.n	800b058 <_printf_common+0xac>
 800b050:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b054:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b058:	3501      	adds	r5, #1
 800b05a:	e7c6      	b.n	800afea <_printf_common+0x3e>
 800b05c:	18e1      	adds	r1, r4, r3
 800b05e:	1c5a      	adds	r2, r3, #1
 800b060:	2030      	movs	r0, #48	; 0x30
 800b062:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b066:	4422      	add	r2, r4
 800b068:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b06c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b070:	3302      	adds	r3, #2
 800b072:	e7c7      	b.n	800b004 <_printf_common+0x58>
 800b074:	2301      	movs	r3, #1
 800b076:	4622      	mov	r2, r4
 800b078:	4649      	mov	r1, r9
 800b07a:	4638      	mov	r0, r7
 800b07c:	47c0      	blx	r8
 800b07e:	3001      	adds	r0, #1
 800b080:	d0e6      	beq.n	800b050 <_printf_common+0xa4>
 800b082:	3601      	adds	r6, #1
 800b084:	e7d9      	b.n	800b03a <_printf_common+0x8e>
	...

0800b088 <_printf_i>:
 800b088:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b08c:	7e0f      	ldrb	r7, [r1, #24]
 800b08e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b090:	2f78      	cmp	r7, #120	; 0x78
 800b092:	4691      	mov	r9, r2
 800b094:	4680      	mov	r8, r0
 800b096:	460c      	mov	r4, r1
 800b098:	469a      	mov	sl, r3
 800b09a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b09e:	d807      	bhi.n	800b0b0 <_printf_i+0x28>
 800b0a0:	2f62      	cmp	r7, #98	; 0x62
 800b0a2:	d80a      	bhi.n	800b0ba <_printf_i+0x32>
 800b0a4:	2f00      	cmp	r7, #0
 800b0a6:	f000 80d4 	beq.w	800b252 <_printf_i+0x1ca>
 800b0aa:	2f58      	cmp	r7, #88	; 0x58
 800b0ac:	f000 80c0 	beq.w	800b230 <_printf_i+0x1a8>
 800b0b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b0b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b0b8:	e03a      	b.n	800b130 <_printf_i+0xa8>
 800b0ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b0be:	2b15      	cmp	r3, #21
 800b0c0:	d8f6      	bhi.n	800b0b0 <_printf_i+0x28>
 800b0c2:	a101      	add	r1, pc, #4	; (adr r1, 800b0c8 <_printf_i+0x40>)
 800b0c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b0c8:	0800b121 	.word	0x0800b121
 800b0cc:	0800b135 	.word	0x0800b135
 800b0d0:	0800b0b1 	.word	0x0800b0b1
 800b0d4:	0800b0b1 	.word	0x0800b0b1
 800b0d8:	0800b0b1 	.word	0x0800b0b1
 800b0dc:	0800b0b1 	.word	0x0800b0b1
 800b0e0:	0800b135 	.word	0x0800b135
 800b0e4:	0800b0b1 	.word	0x0800b0b1
 800b0e8:	0800b0b1 	.word	0x0800b0b1
 800b0ec:	0800b0b1 	.word	0x0800b0b1
 800b0f0:	0800b0b1 	.word	0x0800b0b1
 800b0f4:	0800b239 	.word	0x0800b239
 800b0f8:	0800b161 	.word	0x0800b161
 800b0fc:	0800b1f3 	.word	0x0800b1f3
 800b100:	0800b0b1 	.word	0x0800b0b1
 800b104:	0800b0b1 	.word	0x0800b0b1
 800b108:	0800b25b 	.word	0x0800b25b
 800b10c:	0800b0b1 	.word	0x0800b0b1
 800b110:	0800b161 	.word	0x0800b161
 800b114:	0800b0b1 	.word	0x0800b0b1
 800b118:	0800b0b1 	.word	0x0800b0b1
 800b11c:	0800b1fb 	.word	0x0800b1fb
 800b120:	682b      	ldr	r3, [r5, #0]
 800b122:	1d1a      	adds	r2, r3, #4
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	602a      	str	r2, [r5, #0]
 800b128:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b12c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b130:	2301      	movs	r3, #1
 800b132:	e09f      	b.n	800b274 <_printf_i+0x1ec>
 800b134:	6820      	ldr	r0, [r4, #0]
 800b136:	682b      	ldr	r3, [r5, #0]
 800b138:	0607      	lsls	r7, r0, #24
 800b13a:	f103 0104 	add.w	r1, r3, #4
 800b13e:	6029      	str	r1, [r5, #0]
 800b140:	d501      	bpl.n	800b146 <_printf_i+0xbe>
 800b142:	681e      	ldr	r6, [r3, #0]
 800b144:	e003      	b.n	800b14e <_printf_i+0xc6>
 800b146:	0646      	lsls	r6, r0, #25
 800b148:	d5fb      	bpl.n	800b142 <_printf_i+0xba>
 800b14a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800b14e:	2e00      	cmp	r6, #0
 800b150:	da03      	bge.n	800b15a <_printf_i+0xd2>
 800b152:	232d      	movs	r3, #45	; 0x2d
 800b154:	4276      	negs	r6, r6
 800b156:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b15a:	485a      	ldr	r0, [pc, #360]	; (800b2c4 <_printf_i+0x23c>)
 800b15c:	230a      	movs	r3, #10
 800b15e:	e012      	b.n	800b186 <_printf_i+0xfe>
 800b160:	682b      	ldr	r3, [r5, #0]
 800b162:	6820      	ldr	r0, [r4, #0]
 800b164:	1d19      	adds	r1, r3, #4
 800b166:	6029      	str	r1, [r5, #0]
 800b168:	0605      	lsls	r5, r0, #24
 800b16a:	d501      	bpl.n	800b170 <_printf_i+0xe8>
 800b16c:	681e      	ldr	r6, [r3, #0]
 800b16e:	e002      	b.n	800b176 <_printf_i+0xee>
 800b170:	0641      	lsls	r1, r0, #25
 800b172:	d5fb      	bpl.n	800b16c <_printf_i+0xe4>
 800b174:	881e      	ldrh	r6, [r3, #0]
 800b176:	4853      	ldr	r0, [pc, #332]	; (800b2c4 <_printf_i+0x23c>)
 800b178:	2f6f      	cmp	r7, #111	; 0x6f
 800b17a:	bf0c      	ite	eq
 800b17c:	2308      	moveq	r3, #8
 800b17e:	230a      	movne	r3, #10
 800b180:	2100      	movs	r1, #0
 800b182:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b186:	6865      	ldr	r5, [r4, #4]
 800b188:	60a5      	str	r5, [r4, #8]
 800b18a:	2d00      	cmp	r5, #0
 800b18c:	bfa2      	ittt	ge
 800b18e:	6821      	ldrge	r1, [r4, #0]
 800b190:	f021 0104 	bicge.w	r1, r1, #4
 800b194:	6021      	strge	r1, [r4, #0]
 800b196:	b90e      	cbnz	r6, 800b19c <_printf_i+0x114>
 800b198:	2d00      	cmp	r5, #0
 800b19a:	d04b      	beq.n	800b234 <_printf_i+0x1ac>
 800b19c:	4615      	mov	r5, r2
 800b19e:	fbb6 f1f3 	udiv	r1, r6, r3
 800b1a2:	fb03 6711 	mls	r7, r3, r1, r6
 800b1a6:	5dc7      	ldrb	r7, [r0, r7]
 800b1a8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b1ac:	4637      	mov	r7, r6
 800b1ae:	42bb      	cmp	r3, r7
 800b1b0:	460e      	mov	r6, r1
 800b1b2:	d9f4      	bls.n	800b19e <_printf_i+0x116>
 800b1b4:	2b08      	cmp	r3, #8
 800b1b6:	d10b      	bne.n	800b1d0 <_printf_i+0x148>
 800b1b8:	6823      	ldr	r3, [r4, #0]
 800b1ba:	07de      	lsls	r6, r3, #31
 800b1bc:	d508      	bpl.n	800b1d0 <_printf_i+0x148>
 800b1be:	6923      	ldr	r3, [r4, #16]
 800b1c0:	6861      	ldr	r1, [r4, #4]
 800b1c2:	4299      	cmp	r1, r3
 800b1c4:	bfde      	ittt	le
 800b1c6:	2330      	movle	r3, #48	; 0x30
 800b1c8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b1cc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800b1d0:	1b52      	subs	r2, r2, r5
 800b1d2:	6122      	str	r2, [r4, #16]
 800b1d4:	f8cd a000 	str.w	sl, [sp]
 800b1d8:	464b      	mov	r3, r9
 800b1da:	aa03      	add	r2, sp, #12
 800b1dc:	4621      	mov	r1, r4
 800b1de:	4640      	mov	r0, r8
 800b1e0:	f7ff fee4 	bl	800afac <_printf_common>
 800b1e4:	3001      	adds	r0, #1
 800b1e6:	d14a      	bne.n	800b27e <_printf_i+0x1f6>
 800b1e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b1ec:	b004      	add	sp, #16
 800b1ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1f2:	6823      	ldr	r3, [r4, #0]
 800b1f4:	f043 0320 	orr.w	r3, r3, #32
 800b1f8:	6023      	str	r3, [r4, #0]
 800b1fa:	4833      	ldr	r0, [pc, #204]	; (800b2c8 <_printf_i+0x240>)
 800b1fc:	2778      	movs	r7, #120	; 0x78
 800b1fe:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b202:	6823      	ldr	r3, [r4, #0]
 800b204:	6829      	ldr	r1, [r5, #0]
 800b206:	061f      	lsls	r7, r3, #24
 800b208:	f851 6b04 	ldr.w	r6, [r1], #4
 800b20c:	d402      	bmi.n	800b214 <_printf_i+0x18c>
 800b20e:	065f      	lsls	r7, r3, #25
 800b210:	bf48      	it	mi
 800b212:	b2b6      	uxthmi	r6, r6
 800b214:	07df      	lsls	r7, r3, #31
 800b216:	bf48      	it	mi
 800b218:	f043 0320 	orrmi.w	r3, r3, #32
 800b21c:	6029      	str	r1, [r5, #0]
 800b21e:	bf48      	it	mi
 800b220:	6023      	strmi	r3, [r4, #0]
 800b222:	b91e      	cbnz	r6, 800b22c <_printf_i+0x1a4>
 800b224:	6823      	ldr	r3, [r4, #0]
 800b226:	f023 0320 	bic.w	r3, r3, #32
 800b22a:	6023      	str	r3, [r4, #0]
 800b22c:	2310      	movs	r3, #16
 800b22e:	e7a7      	b.n	800b180 <_printf_i+0xf8>
 800b230:	4824      	ldr	r0, [pc, #144]	; (800b2c4 <_printf_i+0x23c>)
 800b232:	e7e4      	b.n	800b1fe <_printf_i+0x176>
 800b234:	4615      	mov	r5, r2
 800b236:	e7bd      	b.n	800b1b4 <_printf_i+0x12c>
 800b238:	682b      	ldr	r3, [r5, #0]
 800b23a:	6826      	ldr	r6, [r4, #0]
 800b23c:	6961      	ldr	r1, [r4, #20]
 800b23e:	1d18      	adds	r0, r3, #4
 800b240:	6028      	str	r0, [r5, #0]
 800b242:	0635      	lsls	r5, r6, #24
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	d501      	bpl.n	800b24c <_printf_i+0x1c4>
 800b248:	6019      	str	r1, [r3, #0]
 800b24a:	e002      	b.n	800b252 <_printf_i+0x1ca>
 800b24c:	0670      	lsls	r0, r6, #25
 800b24e:	d5fb      	bpl.n	800b248 <_printf_i+0x1c0>
 800b250:	8019      	strh	r1, [r3, #0]
 800b252:	2300      	movs	r3, #0
 800b254:	6123      	str	r3, [r4, #16]
 800b256:	4615      	mov	r5, r2
 800b258:	e7bc      	b.n	800b1d4 <_printf_i+0x14c>
 800b25a:	682b      	ldr	r3, [r5, #0]
 800b25c:	1d1a      	adds	r2, r3, #4
 800b25e:	602a      	str	r2, [r5, #0]
 800b260:	681d      	ldr	r5, [r3, #0]
 800b262:	6862      	ldr	r2, [r4, #4]
 800b264:	2100      	movs	r1, #0
 800b266:	4628      	mov	r0, r5
 800b268:	f7f5 f852 	bl	8000310 <memchr>
 800b26c:	b108      	cbz	r0, 800b272 <_printf_i+0x1ea>
 800b26e:	1b40      	subs	r0, r0, r5
 800b270:	6060      	str	r0, [r4, #4]
 800b272:	6863      	ldr	r3, [r4, #4]
 800b274:	6123      	str	r3, [r4, #16]
 800b276:	2300      	movs	r3, #0
 800b278:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b27c:	e7aa      	b.n	800b1d4 <_printf_i+0x14c>
 800b27e:	6923      	ldr	r3, [r4, #16]
 800b280:	462a      	mov	r2, r5
 800b282:	4649      	mov	r1, r9
 800b284:	4640      	mov	r0, r8
 800b286:	47d0      	blx	sl
 800b288:	3001      	adds	r0, #1
 800b28a:	d0ad      	beq.n	800b1e8 <_printf_i+0x160>
 800b28c:	6823      	ldr	r3, [r4, #0]
 800b28e:	079b      	lsls	r3, r3, #30
 800b290:	d413      	bmi.n	800b2ba <_printf_i+0x232>
 800b292:	68e0      	ldr	r0, [r4, #12]
 800b294:	9b03      	ldr	r3, [sp, #12]
 800b296:	4298      	cmp	r0, r3
 800b298:	bfb8      	it	lt
 800b29a:	4618      	movlt	r0, r3
 800b29c:	e7a6      	b.n	800b1ec <_printf_i+0x164>
 800b29e:	2301      	movs	r3, #1
 800b2a0:	4632      	mov	r2, r6
 800b2a2:	4649      	mov	r1, r9
 800b2a4:	4640      	mov	r0, r8
 800b2a6:	47d0      	blx	sl
 800b2a8:	3001      	adds	r0, #1
 800b2aa:	d09d      	beq.n	800b1e8 <_printf_i+0x160>
 800b2ac:	3501      	adds	r5, #1
 800b2ae:	68e3      	ldr	r3, [r4, #12]
 800b2b0:	9903      	ldr	r1, [sp, #12]
 800b2b2:	1a5b      	subs	r3, r3, r1
 800b2b4:	42ab      	cmp	r3, r5
 800b2b6:	dcf2      	bgt.n	800b29e <_printf_i+0x216>
 800b2b8:	e7eb      	b.n	800b292 <_printf_i+0x20a>
 800b2ba:	2500      	movs	r5, #0
 800b2bc:	f104 0619 	add.w	r6, r4, #25
 800b2c0:	e7f5      	b.n	800b2ae <_printf_i+0x226>
 800b2c2:	bf00      	nop
 800b2c4:	08036ece 	.word	0x08036ece
 800b2c8:	08036edf 	.word	0x08036edf

0800b2cc <std>:
 800b2cc:	2300      	movs	r3, #0
 800b2ce:	b510      	push	{r4, lr}
 800b2d0:	4604      	mov	r4, r0
 800b2d2:	e9c0 3300 	strd	r3, r3, [r0]
 800b2d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b2da:	6083      	str	r3, [r0, #8]
 800b2dc:	8181      	strh	r1, [r0, #12]
 800b2de:	6643      	str	r3, [r0, #100]	; 0x64
 800b2e0:	81c2      	strh	r2, [r0, #14]
 800b2e2:	6183      	str	r3, [r0, #24]
 800b2e4:	4619      	mov	r1, r3
 800b2e6:	2208      	movs	r2, #8
 800b2e8:	305c      	adds	r0, #92	; 0x5c
 800b2ea:	f000 f902 	bl	800b4f2 <memset>
 800b2ee:	4b05      	ldr	r3, [pc, #20]	; (800b304 <std+0x38>)
 800b2f0:	6263      	str	r3, [r4, #36]	; 0x24
 800b2f2:	4b05      	ldr	r3, [pc, #20]	; (800b308 <std+0x3c>)
 800b2f4:	62a3      	str	r3, [r4, #40]	; 0x28
 800b2f6:	4b05      	ldr	r3, [pc, #20]	; (800b30c <std+0x40>)
 800b2f8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b2fa:	4b05      	ldr	r3, [pc, #20]	; (800b310 <std+0x44>)
 800b2fc:	6224      	str	r4, [r4, #32]
 800b2fe:	6323      	str	r3, [r4, #48]	; 0x30
 800b300:	bd10      	pop	{r4, pc}
 800b302:	bf00      	nop
 800b304:	0800b46d 	.word	0x0800b46d
 800b308:	0800b48f 	.word	0x0800b48f
 800b30c:	0800b4c7 	.word	0x0800b4c7
 800b310:	0800b4eb 	.word	0x0800b4eb

0800b314 <stdio_exit_handler>:
 800b314:	4a02      	ldr	r2, [pc, #8]	; (800b320 <stdio_exit_handler+0xc>)
 800b316:	4903      	ldr	r1, [pc, #12]	; (800b324 <stdio_exit_handler+0x10>)
 800b318:	4803      	ldr	r0, [pc, #12]	; (800b328 <stdio_exit_handler+0x14>)
 800b31a:	f000 b869 	b.w	800b3f0 <_fwalk_sglue>
 800b31e:	bf00      	nop
 800b320:	24000100 	.word	0x24000100
 800b324:	0800cd45 	.word	0x0800cd45
 800b328:	2400010c 	.word	0x2400010c

0800b32c <cleanup_stdio>:
 800b32c:	6841      	ldr	r1, [r0, #4]
 800b32e:	4b0c      	ldr	r3, [pc, #48]	; (800b360 <cleanup_stdio+0x34>)
 800b330:	4299      	cmp	r1, r3
 800b332:	b510      	push	{r4, lr}
 800b334:	4604      	mov	r4, r0
 800b336:	d001      	beq.n	800b33c <cleanup_stdio+0x10>
 800b338:	f001 fd04 	bl	800cd44 <_fflush_r>
 800b33c:	68a1      	ldr	r1, [r4, #8]
 800b33e:	4b09      	ldr	r3, [pc, #36]	; (800b364 <cleanup_stdio+0x38>)
 800b340:	4299      	cmp	r1, r3
 800b342:	d002      	beq.n	800b34a <cleanup_stdio+0x1e>
 800b344:	4620      	mov	r0, r4
 800b346:	f001 fcfd 	bl	800cd44 <_fflush_r>
 800b34a:	68e1      	ldr	r1, [r4, #12]
 800b34c:	4b06      	ldr	r3, [pc, #24]	; (800b368 <cleanup_stdio+0x3c>)
 800b34e:	4299      	cmp	r1, r3
 800b350:	d004      	beq.n	800b35c <cleanup_stdio+0x30>
 800b352:	4620      	mov	r0, r4
 800b354:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b358:	f001 bcf4 	b.w	800cd44 <_fflush_r>
 800b35c:	bd10      	pop	{r4, pc}
 800b35e:	bf00      	nop
 800b360:	240023dc 	.word	0x240023dc
 800b364:	24002444 	.word	0x24002444
 800b368:	240024ac 	.word	0x240024ac

0800b36c <global_stdio_init.part.0>:
 800b36c:	b510      	push	{r4, lr}
 800b36e:	4b0b      	ldr	r3, [pc, #44]	; (800b39c <global_stdio_init.part.0+0x30>)
 800b370:	4c0b      	ldr	r4, [pc, #44]	; (800b3a0 <global_stdio_init.part.0+0x34>)
 800b372:	4a0c      	ldr	r2, [pc, #48]	; (800b3a4 <global_stdio_init.part.0+0x38>)
 800b374:	601a      	str	r2, [r3, #0]
 800b376:	4620      	mov	r0, r4
 800b378:	2200      	movs	r2, #0
 800b37a:	2104      	movs	r1, #4
 800b37c:	f7ff ffa6 	bl	800b2cc <std>
 800b380:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800b384:	2201      	movs	r2, #1
 800b386:	2109      	movs	r1, #9
 800b388:	f7ff ffa0 	bl	800b2cc <std>
 800b38c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800b390:	2202      	movs	r2, #2
 800b392:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b396:	2112      	movs	r1, #18
 800b398:	f7ff bf98 	b.w	800b2cc <std>
 800b39c:	24002514 	.word	0x24002514
 800b3a0:	240023dc 	.word	0x240023dc
 800b3a4:	0800b315 	.word	0x0800b315

0800b3a8 <__sfp_lock_acquire>:
 800b3a8:	4801      	ldr	r0, [pc, #4]	; (800b3b0 <__sfp_lock_acquire+0x8>)
 800b3aa:	f000 b92f 	b.w	800b60c <__retarget_lock_acquire_recursive>
 800b3ae:	bf00      	nop
 800b3b0:	2400251d 	.word	0x2400251d

0800b3b4 <__sfp_lock_release>:
 800b3b4:	4801      	ldr	r0, [pc, #4]	; (800b3bc <__sfp_lock_release+0x8>)
 800b3b6:	f000 b92a 	b.w	800b60e <__retarget_lock_release_recursive>
 800b3ba:	bf00      	nop
 800b3bc:	2400251d 	.word	0x2400251d

0800b3c0 <__sinit>:
 800b3c0:	b510      	push	{r4, lr}
 800b3c2:	4604      	mov	r4, r0
 800b3c4:	f7ff fff0 	bl	800b3a8 <__sfp_lock_acquire>
 800b3c8:	6a23      	ldr	r3, [r4, #32]
 800b3ca:	b11b      	cbz	r3, 800b3d4 <__sinit+0x14>
 800b3cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b3d0:	f7ff bff0 	b.w	800b3b4 <__sfp_lock_release>
 800b3d4:	4b04      	ldr	r3, [pc, #16]	; (800b3e8 <__sinit+0x28>)
 800b3d6:	6223      	str	r3, [r4, #32]
 800b3d8:	4b04      	ldr	r3, [pc, #16]	; (800b3ec <__sinit+0x2c>)
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d1f5      	bne.n	800b3cc <__sinit+0xc>
 800b3e0:	f7ff ffc4 	bl	800b36c <global_stdio_init.part.0>
 800b3e4:	e7f2      	b.n	800b3cc <__sinit+0xc>
 800b3e6:	bf00      	nop
 800b3e8:	0800b32d 	.word	0x0800b32d
 800b3ec:	24002514 	.word	0x24002514

0800b3f0 <_fwalk_sglue>:
 800b3f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b3f4:	4607      	mov	r7, r0
 800b3f6:	4688      	mov	r8, r1
 800b3f8:	4614      	mov	r4, r2
 800b3fa:	2600      	movs	r6, #0
 800b3fc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b400:	f1b9 0901 	subs.w	r9, r9, #1
 800b404:	d505      	bpl.n	800b412 <_fwalk_sglue+0x22>
 800b406:	6824      	ldr	r4, [r4, #0]
 800b408:	2c00      	cmp	r4, #0
 800b40a:	d1f7      	bne.n	800b3fc <_fwalk_sglue+0xc>
 800b40c:	4630      	mov	r0, r6
 800b40e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b412:	89ab      	ldrh	r3, [r5, #12]
 800b414:	2b01      	cmp	r3, #1
 800b416:	d907      	bls.n	800b428 <_fwalk_sglue+0x38>
 800b418:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b41c:	3301      	adds	r3, #1
 800b41e:	d003      	beq.n	800b428 <_fwalk_sglue+0x38>
 800b420:	4629      	mov	r1, r5
 800b422:	4638      	mov	r0, r7
 800b424:	47c0      	blx	r8
 800b426:	4306      	orrs	r6, r0
 800b428:	3568      	adds	r5, #104	; 0x68
 800b42a:	e7e9      	b.n	800b400 <_fwalk_sglue+0x10>

0800b42c <siprintf>:
 800b42c:	b40e      	push	{r1, r2, r3}
 800b42e:	b500      	push	{lr}
 800b430:	b09c      	sub	sp, #112	; 0x70
 800b432:	ab1d      	add	r3, sp, #116	; 0x74
 800b434:	9002      	str	r0, [sp, #8]
 800b436:	9006      	str	r0, [sp, #24]
 800b438:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b43c:	4809      	ldr	r0, [pc, #36]	; (800b464 <siprintf+0x38>)
 800b43e:	9107      	str	r1, [sp, #28]
 800b440:	9104      	str	r1, [sp, #16]
 800b442:	4909      	ldr	r1, [pc, #36]	; (800b468 <siprintf+0x3c>)
 800b444:	f853 2b04 	ldr.w	r2, [r3], #4
 800b448:	9105      	str	r1, [sp, #20]
 800b44a:	6800      	ldr	r0, [r0, #0]
 800b44c:	9301      	str	r3, [sp, #4]
 800b44e:	a902      	add	r1, sp, #8
 800b450:	f001 faf4 	bl	800ca3c <_svfiprintf_r>
 800b454:	9b02      	ldr	r3, [sp, #8]
 800b456:	2200      	movs	r2, #0
 800b458:	701a      	strb	r2, [r3, #0]
 800b45a:	b01c      	add	sp, #112	; 0x70
 800b45c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b460:	b003      	add	sp, #12
 800b462:	4770      	bx	lr
 800b464:	24000158 	.word	0x24000158
 800b468:	ffff0208 	.word	0xffff0208

0800b46c <__sread>:
 800b46c:	b510      	push	{r4, lr}
 800b46e:	460c      	mov	r4, r1
 800b470:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b474:	f000 f86c 	bl	800b550 <_read_r>
 800b478:	2800      	cmp	r0, #0
 800b47a:	bfab      	itete	ge
 800b47c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b47e:	89a3      	ldrhlt	r3, [r4, #12]
 800b480:	181b      	addge	r3, r3, r0
 800b482:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b486:	bfac      	ite	ge
 800b488:	6563      	strge	r3, [r4, #84]	; 0x54
 800b48a:	81a3      	strhlt	r3, [r4, #12]
 800b48c:	bd10      	pop	{r4, pc}

0800b48e <__swrite>:
 800b48e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b492:	461f      	mov	r7, r3
 800b494:	898b      	ldrh	r3, [r1, #12]
 800b496:	05db      	lsls	r3, r3, #23
 800b498:	4605      	mov	r5, r0
 800b49a:	460c      	mov	r4, r1
 800b49c:	4616      	mov	r6, r2
 800b49e:	d505      	bpl.n	800b4ac <__swrite+0x1e>
 800b4a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4a4:	2302      	movs	r3, #2
 800b4a6:	2200      	movs	r2, #0
 800b4a8:	f000 f840 	bl	800b52c <_lseek_r>
 800b4ac:	89a3      	ldrh	r3, [r4, #12]
 800b4ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b4b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b4b6:	81a3      	strh	r3, [r4, #12]
 800b4b8:	4632      	mov	r2, r6
 800b4ba:	463b      	mov	r3, r7
 800b4bc:	4628      	mov	r0, r5
 800b4be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b4c2:	f000 b867 	b.w	800b594 <_write_r>

0800b4c6 <__sseek>:
 800b4c6:	b510      	push	{r4, lr}
 800b4c8:	460c      	mov	r4, r1
 800b4ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4ce:	f000 f82d 	bl	800b52c <_lseek_r>
 800b4d2:	1c43      	adds	r3, r0, #1
 800b4d4:	89a3      	ldrh	r3, [r4, #12]
 800b4d6:	bf15      	itete	ne
 800b4d8:	6560      	strne	r0, [r4, #84]	; 0x54
 800b4da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b4de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b4e2:	81a3      	strheq	r3, [r4, #12]
 800b4e4:	bf18      	it	ne
 800b4e6:	81a3      	strhne	r3, [r4, #12]
 800b4e8:	bd10      	pop	{r4, pc}

0800b4ea <__sclose>:
 800b4ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4ee:	f000 b80d 	b.w	800b50c <_close_r>

0800b4f2 <memset>:
 800b4f2:	4402      	add	r2, r0
 800b4f4:	4603      	mov	r3, r0
 800b4f6:	4293      	cmp	r3, r2
 800b4f8:	d100      	bne.n	800b4fc <memset+0xa>
 800b4fa:	4770      	bx	lr
 800b4fc:	f803 1b01 	strb.w	r1, [r3], #1
 800b500:	e7f9      	b.n	800b4f6 <memset+0x4>
	...

0800b504 <_localeconv_r>:
 800b504:	4800      	ldr	r0, [pc, #0]	; (800b508 <_localeconv_r+0x4>)
 800b506:	4770      	bx	lr
 800b508:	2400024c 	.word	0x2400024c

0800b50c <_close_r>:
 800b50c:	b538      	push	{r3, r4, r5, lr}
 800b50e:	4d06      	ldr	r5, [pc, #24]	; (800b528 <_close_r+0x1c>)
 800b510:	2300      	movs	r3, #0
 800b512:	4604      	mov	r4, r0
 800b514:	4608      	mov	r0, r1
 800b516:	602b      	str	r3, [r5, #0]
 800b518:	f7f5 ff20 	bl	800135c <_close>
 800b51c:	1c43      	adds	r3, r0, #1
 800b51e:	d102      	bne.n	800b526 <_close_r+0x1a>
 800b520:	682b      	ldr	r3, [r5, #0]
 800b522:	b103      	cbz	r3, 800b526 <_close_r+0x1a>
 800b524:	6023      	str	r3, [r4, #0]
 800b526:	bd38      	pop	{r3, r4, r5, pc}
 800b528:	24002518 	.word	0x24002518

0800b52c <_lseek_r>:
 800b52c:	b538      	push	{r3, r4, r5, lr}
 800b52e:	4d07      	ldr	r5, [pc, #28]	; (800b54c <_lseek_r+0x20>)
 800b530:	4604      	mov	r4, r0
 800b532:	4608      	mov	r0, r1
 800b534:	4611      	mov	r1, r2
 800b536:	2200      	movs	r2, #0
 800b538:	602a      	str	r2, [r5, #0]
 800b53a:	461a      	mov	r2, r3
 800b53c:	f7f5 ff1a 	bl	8001374 <_lseek>
 800b540:	1c43      	adds	r3, r0, #1
 800b542:	d102      	bne.n	800b54a <_lseek_r+0x1e>
 800b544:	682b      	ldr	r3, [r5, #0]
 800b546:	b103      	cbz	r3, 800b54a <_lseek_r+0x1e>
 800b548:	6023      	str	r3, [r4, #0]
 800b54a:	bd38      	pop	{r3, r4, r5, pc}
 800b54c:	24002518 	.word	0x24002518

0800b550 <_read_r>:
 800b550:	b538      	push	{r3, r4, r5, lr}
 800b552:	4d07      	ldr	r5, [pc, #28]	; (800b570 <_read_r+0x20>)
 800b554:	4604      	mov	r4, r0
 800b556:	4608      	mov	r0, r1
 800b558:	4611      	mov	r1, r2
 800b55a:	2200      	movs	r2, #0
 800b55c:	602a      	str	r2, [r5, #0]
 800b55e:	461a      	mov	r2, r3
 800b560:	f7f5 fee0 	bl	8001324 <_read>
 800b564:	1c43      	adds	r3, r0, #1
 800b566:	d102      	bne.n	800b56e <_read_r+0x1e>
 800b568:	682b      	ldr	r3, [r5, #0]
 800b56a:	b103      	cbz	r3, 800b56e <_read_r+0x1e>
 800b56c:	6023      	str	r3, [r4, #0]
 800b56e:	bd38      	pop	{r3, r4, r5, pc}
 800b570:	24002518 	.word	0x24002518

0800b574 <_sbrk_r>:
 800b574:	b538      	push	{r3, r4, r5, lr}
 800b576:	4d06      	ldr	r5, [pc, #24]	; (800b590 <_sbrk_r+0x1c>)
 800b578:	2300      	movs	r3, #0
 800b57a:	4604      	mov	r4, r0
 800b57c:	4608      	mov	r0, r1
 800b57e:	602b      	str	r3, [r5, #0]
 800b580:	f7f5 fefa 	bl	8001378 <_sbrk>
 800b584:	1c43      	adds	r3, r0, #1
 800b586:	d102      	bne.n	800b58e <_sbrk_r+0x1a>
 800b588:	682b      	ldr	r3, [r5, #0]
 800b58a:	b103      	cbz	r3, 800b58e <_sbrk_r+0x1a>
 800b58c:	6023      	str	r3, [r4, #0]
 800b58e:	bd38      	pop	{r3, r4, r5, pc}
 800b590:	24002518 	.word	0x24002518

0800b594 <_write_r>:
 800b594:	b538      	push	{r3, r4, r5, lr}
 800b596:	4d07      	ldr	r5, [pc, #28]	; (800b5b4 <_write_r+0x20>)
 800b598:	4604      	mov	r4, r0
 800b59a:	4608      	mov	r0, r1
 800b59c:	4611      	mov	r1, r2
 800b59e:	2200      	movs	r2, #0
 800b5a0:	602a      	str	r2, [r5, #0]
 800b5a2:	461a      	mov	r2, r3
 800b5a4:	f7f5 fecc 	bl	8001340 <_write>
 800b5a8:	1c43      	adds	r3, r0, #1
 800b5aa:	d102      	bne.n	800b5b2 <_write_r+0x1e>
 800b5ac:	682b      	ldr	r3, [r5, #0]
 800b5ae:	b103      	cbz	r3, 800b5b2 <_write_r+0x1e>
 800b5b0:	6023      	str	r3, [r4, #0]
 800b5b2:	bd38      	pop	{r3, r4, r5, pc}
 800b5b4:	24002518 	.word	0x24002518

0800b5b8 <__errno>:
 800b5b8:	4b01      	ldr	r3, [pc, #4]	; (800b5c0 <__errno+0x8>)
 800b5ba:	6818      	ldr	r0, [r3, #0]
 800b5bc:	4770      	bx	lr
 800b5be:	bf00      	nop
 800b5c0:	24000158 	.word	0x24000158

0800b5c4 <__libc_init_array>:
 800b5c4:	b570      	push	{r4, r5, r6, lr}
 800b5c6:	4d0d      	ldr	r5, [pc, #52]	; (800b5fc <__libc_init_array+0x38>)
 800b5c8:	4c0d      	ldr	r4, [pc, #52]	; (800b600 <__libc_init_array+0x3c>)
 800b5ca:	1b64      	subs	r4, r4, r5
 800b5cc:	10a4      	asrs	r4, r4, #2
 800b5ce:	2600      	movs	r6, #0
 800b5d0:	42a6      	cmp	r6, r4
 800b5d2:	d109      	bne.n	800b5e8 <__libc_init_array+0x24>
 800b5d4:	4d0b      	ldr	r5, [pc, #44]	; (800b604 <__libc_init_array+0x40>)
 800b5d6:	4c0c      	ldr	r4, [pc, #48]	; (800b608 <__libc_init_array+0x44>)
 800b5d8:	f001 ff6a 	bl	800d4b0 <_init>
 800b5dc:	1b64      	subs	r4, r4, r5
 800b5de:	10a4      	asrs	r4, r4, #2
 800b5e0:	2600      	movs	r6, #0
 800b5e2:	42a6      	cmp	r6, r4
 800b5e4:	d105      	bne.n	800b5f2 <__libc_init_array+0x2e>
 800b5e6:	bd70      	pop	{r4, r5, r6, pc}
 800b5e8:	f855 3b04 	ldr.w	r3, [r5], #4
 800b5ec:	4798      	blx	r3
 800b5ee:	3601      	adds	r6, #1
 800b5f0:	e7ee      	b.n	800b5d0 <__libc_init_array+0xc>
 800b5f2:	f855 3b04 	ldr.w	r3, [r5], #4
 800b5f6:	4798      	blx	r3
 800b5f8:	3601      	adds	r6, #1
 800b5fa:	e7f2      	b.n	800b5e2 <__libc_init_array+0x1e>
 800b5fc:	0803722c 	.word	0x0803722c
 800b600:	0803722c 	.word	0x0803722c
 800b604:	0803722c 	.word	0x0803722c
 800b608:	08037230 	.word	0x08037230

0800b60c <__retarget_lock_acquire_recursive>:
 800b60c:	4770      	bx	lr

0800b60e <__retarget_lock_release_recursive>:
 800b60e:	4770      	bx	lr

0800b610 <quorem>:
 800b610:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b614:	6903      	ldr	r3, [r0, #16]
 800b616:	690c      	ldr	r4, [r1, #16]
 800b618:	42a3      	cmp	r3, r4
 800b61a:	4607      	mov	r7, r0
 800b61c:	db7e      	blt.n	800b71c <quorem+0x10c>
 800b61e:	3c01      	subs	r4, #1
 800b620:	f101 0814 	add.w	r8, r1, #20
 800b624:	f100 0514 	add.w	r5, r0, #20
 800b628:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b62c:	9301      	str	r3, [sp, #4]
 800b62e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b632:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b636:	3301      	adds	r3, #1
 800b638:	429a      	cmp	r2, r3
 800b63a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b63e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b642:	fbb2 f6f3 	udiv	r6, r2, r3
 800b646:	d331      	bcc.n	800b6ac <quorem+0x9c>
 800b648:	f04f 0e00 	mov.w	lr, #0
 800b64c:	4640      	mov	r0, r8
 800b64e:	46ac      	mov	ip, r5
 800b650:	46f2      	mov	sl, lr
 800b652:	f850 2b04 	ldr.w	r2, [r0], #4
 800b656:	b293      	uxth	r3, r2
 800b658:	fb06 e303 	mla	r3, r6, r3, lr
 800b65c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b660:	0c1a      	lsrs	r2, r3, #16
 800b662:	b29b      	uxth	r3, r3
 800b664:	ebaa 0303 	sub.w	r3, sl, r3
 800b668:	f8dc a000 	ldr.w	sl, [ip]
 800b66c:	fa13 f38a 	uxtah	r3, r3, sl
 800b670:	fb06 220e 	mla	r2, r6, lr, r2
 800b674:	9300      	str	r3, [sp, #0]
 800b676:	9b00      	ldr	r3, [sp, #0]
 800b678:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b67c:	b292      	uxth	r2, r2
 800b67e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b682:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b686:	f8bd 3000 	ldrh.w	r3, [sp]
 800b68a:	4581      	cmp	r9, r0
 800b68c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b690:	f84c 3b04 	str.w	r3, [ip], #4
 800b694:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b698:	d2db      	bcs.n	800b652 <quorem+0x42>
 800b69a:	f855 300b 	ldr.w	r3, [r5, fp]
 800b69e:	b92b      	cbnz	r3, 800b6ac <quorem+0x9c>
 800b6a0:	9b01      	ldr	r3, [sp, #4]
 800b6a2:	3b04      	subs	r3, #4
 800b6a4:	429d      	cmp	r5, r3
 800b6a6:	461a      	mov	r2, r3
 800b6a8:	d32c      	bcc.n	800b704 <quorem+0xf4>
 800b6aa:	613c      	str	r4, [r7, #16]
 800b6ac:	4638      	mov	r0, r7
 800b6ae:	f001 f86b 	bl	800c788 <__mcmp>
 800b6b2:	2800      	cmp	r0, #0
 800b6b4:	db22      	blt.n	800b6fc <quorem+0xec>
 800b6b6:	3601      	adds	r6, #1
 800b6b8:	4629      	mov	r1, r5
 800b6ba:	2000      	movs	r0, #0
 800b6bc:	f858 2b04 	ldr.w	r2, [r8], #4
 800b6c0:	f8d1 c000 	ldr.w	ip, [r1]
 800b6c4:	b293      	uxth	r3, r2
 800b6c6:	1ac3      	subs	r3, r0, r3
 800b6c8:	0c12      	lsrs	r2, r2, #16
 800b6ca:	fa13 f38c 	uxtah	r3, r3, ip
 800b6ce:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800b6d2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b6d6:	b29b      	uxth	r3, r3
 800b6d8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b6dc:	45c1      	cmp	r9, r8
 800b6de:	f841 3b04 	str.w	r3, [r1], #4
 800b6e2:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b6e6:	d2e9      	bcs.n	800b6bc <quorem+0xac>
 800b6e8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b6ec:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b6f0:	b922      	cbnz	r2, 800b6fc <quorem+0xec>
 800b6f2:	3b04      	subs	r3, #4
 800b6f4:	429d      	cmp	r5, r3
 800b6f6:	461a      	mov	r2, r3
 800b6f8:	d30a      	bcc.n	800b710 <quorem+0x100>
 800b6fa:	613c      	str	r4, [r7, #16]
 800b6fc:	4630      	mov	r0, r6
 800b6fe:	b003      	add	sp, #12
 800b700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b704:	6812      	ldr	r2, [r2, #0]
 800b706:	3b04      	subs	r3, #4
 800b708:	2a00      	cmp	r2, #0
 800b70a:	d1ce      	bne.n	800b6aa <quorem+0x9a>
 800b70c:	3c01      	subs	r4, #1
 800b70e:	e7c9      	b.n	800b6a4 <quorem+0x94>
 800b710:	6812      	ldr	r2, [r2, #0]
 800b712:	3b04      	subs	r3, #4
 800b714:	2a00      	cmp	r2, #0
 800b716:	d1f0      	bne.n	800b6fa <quorem+0xea>
 800b718:	3c01      	subs	r4, #1
 800b71a:	e7eb      	b.n	800b6f4 <quorem+0xe4>
 800b71c:	2000      	movs	r0, #0
 800b71e:	e7ee      	b.n	800b6fe <quorem+0xee>

0800b720 <_dtoa_r>:
 800b720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b724:	ed2d 8b02 	vpush	{d8}
 800b728:	69c5      	ldr	r5, [r0, #28]
 800b72a:	b091      	sub	sp, #68	; 0x44
 800b72c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b730:	ec59 8b10 	vmov	r8, r9, d0
 800b734:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800b736:	9106      	str	r1, [sp, #24]
 800b738:	4606      	mov	r6, r0
 800b73a:	9208      	str	r2, [sp, #32]
 800b73c:	930c      	str	r3, [sp, #48]	; 0x30
 800b73e:	b975      	cbnz	r5, 800b75e <_dtoa_r+0x3e>
 800b740:	2010      	movs	r0, #16
 800b742:	f7ff f8d5 	bl	800a8f0 <malloc>
 800b746:	4602      	mov	r2, r0
 800b748:	61f0      	str	r0, [r6, #28]
 800b74a:	b920      	cbnz	r0, 800b756 <_dtoa_r+0x36>
 800b74c:	4ba6      	ldr	r3, [pc, #664]	; (800b9e8 <_dtoa_r+0x2c8>)
 800b74e:	21ef      	movs	r1, #239	; 0xef
 800b750:	48a6      	ldr	r0, [pc, #664]	; (800b9ec <_dtoa_r+0x2cc>)
 800b752:	f001 fb47 	bl	800cde4 <__assert_func>
 800b756:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b75a:	6005      	str	r5, [r0, #0]
 800b75c:	60c5      	str	r5, [r0, #12]
 800b75e:	69f3      	ldr	r3, [r6, #28]
 800b760:	6819      	ldr	r1, [r3, #0]
 800b762:	b151      	cbz	r1, 800b77a <_dtoa_r+0x5a>
 800b764:	685a      	ldr	r2, [r3, #4]
 800b766:	604a      	str	r2, [r1, #4]
 800b768:	2301      	movs	r3, #1
 800b76a:	4093      	lsls	r3, r2
 800b76c:	608b      	str	r3, [r1, #8]
 800b76e:	4630      	mov	r0, r6
 800b770:	f000 fdce 	bl	800c310 <_Bfree>
 800b774:	69f3      	ldr	r3, [r6, #28]
 800b776:	2200      	movs	r2, #0
 800b778:	601a      	str	r2, [r3, #0]
 800b77a:	f1b9 0300 	subs.w	r3, r9, #0
 800b77e:	bfbb      	ittet	lt
 800b780:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b784:	9303      	strlt	r3, [sp, #12]
 800b786:	2300      	movge	r3, #0
 800b788:	2201      	movlt	r2, #1
 800b78a:	bfac      	ite	ge
 800b78c:	6023      	strge	r3, [r4, #0]
 800b78e:	6022      	strlt	r2, [r4, #0]
 800b790:	4b97      	ldr	r3, [pc, #604]	; (800b9f0 <_dtoa_r+0x2d0>)
 800b792:	9c03      	ldr	r4, [sp, #12]
 800b794:	43a3      	bics	r3, r4
 800b796:	d11c      	bne.n	800b7d2 <_dtoa_r+0xb2>
 800b798:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b79a:	f242 730f 	movw	r3, #9999	; 0x270f
 800b79e:	6013      	str	r3, [r2, #0]
 800b7a0:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800b7a4:	ea53 0308 	orrs.w	r3, r3, r8
 800b7a8:	f000 84fb 	beq.w	800c1a2 <_dtoa_r+0xa82>
 800b7ac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b7ae:	b963      	cbnz	r3, 800b7ca <_dtoa_r+0xaa>
 800b7b0:	4b90      	ldr	r3, [pc, #576]	; (800b9f4 <_dtoa_r+0x2d4>)
 800b7b2:	e020      	b.n	800b7f6 <_dtoa_r+0xd6>
 800b7b4:	4b90      	ldr	r3, [pc, #576]	; (800b9f8 <_dtoa_r+0x2d8>)
 800b7b6:	9301      	str	r3, [sp, #4]
 800b7b8:	3308      	adds	r3, #8
 800b7ba:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800b7bc:	6013      	str	r3, [r2, #0]
 800b7be:	9801      	ldr	r0, [sp, #4]
 800b7c0:	b011      	add	sp, #68	; 0x44
 800b7c2:	ecbd 8b02 	vpop	{d8}
 800b7c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7ca:	4b8a      	ldr	r3, [pc, #552]	; (800b9f4 <_dtoa_r+0x2d4>)
 800b7cc:	9301      	str	r3, [sp, #4]
 800b7ce:	3303      	adds	r3, #3
 800b7d0:	e7f3      	b.n	800b7ba <_dtoa_r+0x9a>
 800b7d2:	ed9d 8b02 	vldr	d8, [sp, #8]
 800b7d6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800b7da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7de:	d10c      	bne.n	800b7fa <_dtoa_r+0xda>
 800b7e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b7e2:	2301      	movs	r3, #1
 800b7e4:	6013      	str	r3, [r2, #0]
 800b7e6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	f000 84d7 	beq.w	800c19c <_dtoa_r+0xa7c>
 800b7ee:	4b83      	ldr	r3, [pc, #524]	; (800b9fc <_dtoa_r+0x2dc>)
 800b7f0:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800b7f2:	6013      	str	r3, [r2, #0]
 800b7f4:	3b01      	subs	r3, #1
 800b7f6:	9301      	str	r3, [sp, #4]
 800b7f8:	e7e1      	b.n	800b7be <_dtoa_r+0x9e>
 800b7fa:	aa0e      	add	r2, sp, #56	; 0x38
 800b7fc:	a90f      	add	r1, sp, #60	; 0x3c
 800b7fe:	4630      	mov	r0, r6
 800b800:	eeb0 0b48 	vmov.f64	d0, d8
 800b804:	f001 f866 	bl	800c8d4 <__d2b>
 800b808:	f3c4 530a 	ubfx	r3, r4, #20, #11
 800b80c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b80e:	4605      	mov	r5, r0
 800b810:	2b00      	cmp	r3, #0
 800b812:	d046      	beq.n	800b8a2 <_dtoa_r+0x182>
 800b814:	eeb0 7b48 	vmov.f64	d7, d8
 800b818:	ee18 1a90 	vmov	r1, s17
 800b81c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800b820:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 800b824:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800b828:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b82c:	2000      	movs	r0, #0
 800b82e:	ee07 1a90 	vmov	s15, r1
 800b832:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 800b836:	ed9f 5b66 	vldr	d5, [pc, #408]	; 800b9d0 <_dtoa_r+0x2b0>
 800b83a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800b83e:	ed9f 6b66 	vldr	d6, [pc, #408]	; 800b9d8 <_dtoa_r+0x2b8>
 800b842:	eea7 6b05 	vfma.f64	d6, d7, d5
 800b846:	ed9f 5b66 	vldr	d5, [pc, #408]	; 800b9e0 <_dtoa_r+0x2c0>
 800b84a:	ee07 3a90 	vmov	s15, r3
 800b84e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800b852:	eeb0 7b46 	vmov.f64	d7, d6
 800b856:	eea4 7b05 	vfma.f64	d7, d4, d5
 800b85a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800b85e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800b862:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b866:	ee16 ba90 	vmov	fp, s13
 800b86a:	9009      	str	r0, [sp, #36]	; 0x24
 800b86c:	d508      	bpl.n	800b880 <_dtoa_r+0x160>
 800b86e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800b872:	eeb4 6b47 	vcmp.f64	d6, d7
 800b876:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b87a:	bf18      	it	ne
 800b87c:	f10b 3bff 	addne.w	fp, fp, #4294967295	; 0xffffffff
 800b880:	f1bb 0f16 	cmp.w	fp, #22
 800b884:	d82b      	bhi.n	800b8de <_dtoa_r+0x1be>
 800b886:	495e      	ldr	r1, [pc, #376]	; (800ba00 <_dtoa_r+0x2e0>)
 800b888:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 800b88c:	ed91 7b00 	vldr	d7, [r1]
 800b890:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800b894:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b898:	d501      	bpl.n	800b89e <_dtoa_r+0x17e>
 800b89a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800b89e:	2100      	movs	r1, #0
 800b8a0:	e01e      	b.n	800b8e0 <_dtoa_r+0x1c0>
 800b8a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b8a4:	4413      	add	r3, r2
 800b8a6:	f203 4132 	addw	r1, r3, #1074	; 0x432
 800b8aa:	2920      	cmp	r1, #32
 800b8ac:	bfc1      	itttt	gt
 800b8ae:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 800b8b2:	408c      	lslgt	r4, r1
 800b8b4:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 800b8b8:	fa28 f101 	lsrgt.w	r1, r8, r1
 800b8bc:	bfd6      	itet	le
 800b8be:	f1c1 0120 	rsble	r1, r1, #32
 800b8c2:	4321      	orrgt	r1, r4
 800b8c4:	fa08 f101 	lslle.w	r1, r8, r1
 800b8c8:	ee07 1a90 	vmov	s15, r1
 800b8cc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800b8d0:	3b01      	subs	r3, #1
 800b8d2:	ee17 1a90 	vmov	r1, s15
 800b8d6:	2001      	movs	r0, #1
 800b8d8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800b8dc:	e7a7      	b.n	800b82e <_dtoa_r+0x10e>
 800b8de:	2101      	movs	r1, #1
 800b8e0:	1ad2      	subs	r2, r2, r3
 800b8e2:	1e53      	subs	r3, r2, #1
 800b8e4:	9305      	str	r3, [sp, #20]
 800b8e6:	bf45      	ittet	mi
 800b8e8:	f1c2 0301 	rsbmi	r3, r2, #1
 800b8ec:	9304      	strmi	r3, [sp, #16]
 800b8ee:	2300      	movpl	r3, #0
 800b8f0:	2300      	movmi	r3, #0
 800b8f2:	bf4c      	ite	mi
 800b8f4:	9305      	strmi	r3, [sp, #20]
 800b8f6:	9304      	strpl	r3, [sp, #16]
 800b8f8:	f1bb 0f00 	cmp.w	fp, #0
 800b8fc:	910b      	str	r1, [sp, #44]	; 0x2c
 800b8fe:	db18      	blt.n	800b932 <_dtoa_r+0x212>
 800b900:	9b05      	ldr	r3, [sp, #20]
 800b902:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800b906:	445b      	add	r3, fp
 800b908:	9305      	str	r3, [sp, #20]
 800b90a:	2300      	movs	r3, #0
 800b90c:	9a06      	ldr	r2, [sp, #24]
 800b90e:	2a09      	cmp	r2, #9
 800b910:	d848      	bhi.n	800b9a4 <_dtoa_r+0x284>
 800b912:	2a05      	cmp	r2, #5
 800b914:	bfc4      	itt	gt
 800b916:	3a04      	subgt	r2, #4
 800b918:	9206      	strgt	r2, [sp, #24]
 800b91a:	9a06      	ldr	r2, [sp, #24]
 800b91c:	f1a2 0202 	sub.w	r2, r2, #2
 800b920:	bfcc      	ite	gt
 800b922:	2400      	movgt	r4, #0
 800b924:	2401      	movle	r4, #1
 800b926:	2a03      	cmp	r2, #3
 800b928:	d847      	bhi.n	800b9ba <_dtoa_r+0x29a>
 800b92a:	e8df f002 	tbb	[pc, r2]
 800b92e:	2d0b      	.short	0x2d0b
 800b930:	392b      	.short	0x392b
 800b932:	9b04      	ldr	r3, [sp, #16]
 800b934:	2200      	movs	r2, #0
 800b936:	eba3 030b 	sub.w	r3, r3, fp
 800b93a:	9304      	str	r3, [sp, #16]
 800b93c:	920a      	str	r2, [sp, #40]	; 0x28
 800b93e:	f1cb 0300 	rsb	r3, fp, #0
 800b942:	e7e3      	b.n	800b90c <_dtoa_r+0x1ec>
 800b944:	2200      	movs	r2, #0
 800b946:	9207      	str	r2, [sp, #28]
 800b948:	9a08      	ldr	r2, [sp, #32]
 800b94a:	2a00      	cmp	r2, #0
 800b94c:	dc38      	bgt.n	800b9c0 <_dtoa_r+0x2a0>
 800b94e:	f04f 0a01 	mov.w	sl, #1
 800b952:	46d1      	mov	r9, sl
 800b954:	4652      	mov	r2, sl
 800b956:	f8cd a020 	str.w	sl, [sp, #32]
 800b95a:	69f7      	ldr	r7, [r6, #28]
 800b95c:	2100      	movs	r1, #0
 800b95e:	2004      	movs	r0, #4
 800b960:	f100 0c14 	add.w	ip, r0, #20
 800b964:	4594      	cmp	ip, r2
 800b966:	d930      	bls.n	800b9ca <_dtoa_r+0x2aa>
 800b968:	6079      	str	r1, [r7, #4]
 800b96a:	4630      	mov	r0, r6
 800b96c:	930d      	str	r3, [sp, #52]	; 0x34
 800b96e:	f000 fc8f 	bl	800c290 <_Balloc>
 800b972:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b974:	9001      	str	r0, [sp, #4]
 800b976:	4602      	mov	r2, r0
 800b978:	2800      	cmp	r0, #0
 800b97a:	d145      	bne.n	800ba08 <_dtoa_r+0x2e8>
 800b97c:	4b21      	ldr	r3, [pc, #132]	; (800ba04 <_dtoa_r+0x2e4>)
 800b97e:	f240 11af 	movw	r1, #431	; 0x1af
 800b982:	e6e5      	b.n	800b750 <_dtoa_r+0x30>
 800b984:	2201      	movs	r2, #1
 800b986:	e7de      	b.n	800b946 <_dtoa_r+0x226>
 800b988:	2200      	movs	r2, #0
 800b98a:	9207      	str	r2, [sp, #28]
 800b98c:	9a08      	ldr	r2, [sp, #32]
 800b98e:	eb0b 0a02 	add.w	sl, fp, r2
 800b992:	f10a 0901 	add.w	r9, sl, #1
 800b996:	464a      	mov	r2, r9
 800b998:	2a01      	cmp	r2, #1
 800b99a:	bfb8      	it	lt
 800b99c:	2201      	movlt	r2, #1
 800b99e:	e7dc      	b.n	800b95a <_dtoa_r+0x23a>
 800b9a0:	2201      	movs	r2, #1
 800b9a2:	e7f2      	b.n	800b98a <_dtoa_r+0x26a>
 800b9a4:	2401      	movs	r4, #1
 800b9a6:	2200      	movs	r2, #0
 800b9a8:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800b9ac:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800b9b0:	2100      	movs	r1, #0
 800b9b2:	46d1      	mov	r9, sl
 800b9b4:	2212      	movs	r2, #18
 800b9b6:	9108      	str	r1, [sp, #32]
 800b9b8:	e7cf      	b.n	800b95a <_dtoa_r+0x23a>
 800b9ba:	2201      	movs	r2, #1
 800b9bc:	9207      	str	r2, [sp, #28]
 800b9be:	e7f5      	b.n	800b9ac <_dtoa_r+0x28c>
 800b9c0:	f8dd a020 	ldr.w	sl, [sp, #32]
 800b9c4:	46d1      	mov	r9, sl
 800b9c6:	4652      	mov	r2, sl
 800b9c8:	e7c7      	b.n	800b95a <_dtoa_r+0x23a>
 800b9ca:	3101      	adds	r1, #1
 800b9cc:	0040      	lsls	r0, r0, #1
 800b9ce:	e7c7      	b.n	800b960 <_dtoa_r+0x240>
 800b9d0:	636f4361 	.word	0x636f4361
 800b9d4:	3fd287a7 	.word	0x3fd287a7
 800b9d8:	8b60c8b3 	.word	0x8b60c8b3
 800b9dc:	3fc68a28 	.word	0x3fc68a28
 800b9e0:	509f79fb 	.word	0x509f79fb
 800b9e4:	3fd34413 	.word	0x3fd34413
 800b9e8:	08036efd 	.word	0x08036efd
 800b9ec:	08036f14 	.word	0x08036f14
 800b9f0:	7ff00000 	.word	0x7ff00000
 800b9f4:	08036ef9 	.word	0x08036ef9
 800b9f8:	08036ef0 	.word	0x08036ef0
 800b9fc:	08036ecd 	.word	0x08036ecd
 800ba00:	08037000 	.word	0x08037000
 800ba04:	08036f6c 	.word	0x08036f6c
 800ba08:	69f2      	ldr	r2, [r6, #28]
 800ba0a:	9901      	ldr	r1, [sp, #4]
 800ba0c:	6011      	str	r1, [r2, #0]
 800ba0e:	f1b9 0f0e 	cmp.w	r9, #14
 800ba12:	d86c      	bhi.n	800baee <_dtoa_r+0x3ce>
 800ba14:	2c00      	cmp	r4, #0
 800ba16:	d06a      	beq.n	800baee <_dtoa_r+0x3ce>
 800ba18:	f1bb 0f00 	cmp.w	fp, #0
 800ba1c:	f340 80a0 	ble.w	800bb60 <_dtoa_r+0x440>
 800ba20:	4ac1      	ldr	r2, [pc, #772]	; (800bd28 <_dtoa_r+0x608>)
 800ba22:	f00b 010f 	and.w	r1, fp, #15
 800ba26:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800ba2a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800ba2e:	ed92 7b00 	vldr	d7, [r2]
 800ba32:	ea4f 122b 	mov.w	r2, fp, asr #4
 800ba36:	f000 8087 	beq.w	800bb48 <_dtoa_r+0x428>
 800ba3a:	49bc      	ldr	r1, [pc, #752]	; (800bd2c <_dtoa_r+0x60c>)
 800ba3c:	ed91 6b08 	vldr	d6, [r1, #32]
 800ba40:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800ba44:	ed8d 6b02 	vstr	d6, [sp, #8]
 800ba48:	f002 020f 	and.w	r2, r2, #15
 800ba4c:	2103      	movs	r1, #3
 800ba4e:	48b7      	ldr	r0, [pc, #732]	; (800bd2c <_dtoa_r+0x60c>)
 800ba50:	2a00      	cmp	r2, #0
 800ba52:	d17b      	bne.n	800bb4c <_dtoa_r+0x42c>
 800ba54:	ed9d 6b02 	vldr	d6, [sp, #8]
 800ba58:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800ba5c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ba60:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ba62:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ba66:	2a00      	cmp	r2, #0
 800ba68:	f000 80a0 	beq.w	800bbac <_dtoa_r+0x48c>
 800ba6c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800ba70:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800ba74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba78:	f140 8098 	bpl.w	800bbac <_dtoa_r+0x48c>
 800ba7c:	f1b9 0f00 	cmp.w	r9, #0
 800ba80:	f000 8094 	beq.w	800bbac <_dtoa_r+0x48c>
 800ba84:	f1ba 0f00 	cmp.w	sl, #0
 800ba88:	dd2f      	ble.n	800baea <_dtoa_r+0x3ca>
 800ba8a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800ba8e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ba92:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ba96:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 800ba9a:	3101      	adds	r1, #1
 800ba9c:	4654      	mov	r4, sl
 800ba9e:	ed9d 6b02 	vldr	d6, [sp, #8]
 800baa2:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800baa6:	ee07 1a90 	vmov	s15, r1
 800baaa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800baae:	eea7 5b06 	vfma.f64	d5, d7, d6
 800bab2:	ee15 7a90 	vmov	r7, s11
 800bab6:	ec51 0b15 	vmov	r0, r1, d5
 800baba:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 800babe:	2c00      	cmp	r4, #0
 800bac0:	d177      	bne.n	800bbb2 <_dtoa_r+0x492>
 800bac2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800bac6:	ee36 6b47 	vsub.f64	d6, d6, d7
 800baca:	ec41 0b17 	vmov	d7, r0, r1
 800bace:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800bad2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bad6:	f300 826a 	bgt.w	800bfae <_dtoa_r+0x88e>
 800bada:	eeb1 7b47 	vneg.f64	d7, d7
 800bade:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800bae2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bae6:	f100 8260 	bmi.w	800bfaa <_dtoa_r+0x88a>
 800baea:	ed8d 8b02 	vstr	d8, [sp, #8]
 800baee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800baf0:	2a00      	cmp	r2, #0
 800baf2:	f2c0 811d 	blt.w	800bd30 <_dtoa_r+0x610>
 800baf6:	f1bb 0f0e 	cmp.w	fp, #14
 800bafa:	f300 8119 	bgt.w	800bd30 <_dtoa_r+0x610>
 800bafe:	4b8a      	ldr	r3, [pc, #552]	; (800bd28 <_dtoa_r+0x608>)
 800bb00:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800bb04:	ed93 6b00 	vldr	d6, [r3]
 800bb08:	9b08      	ldr	r3, [sp, #32]
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	f280 80b7 	bge.w	800bc7e <_dtoa_r+0x55e>
 800bb10:	f1b9 0f00 	cmp.w	r9, #0
 800bb14:	f300 80b3 	bgt.w	800bc7e <_dtoa_r+0x55e>
 800bb18:	f040 8246 	bne.w	800bfa8 <_dtoa_r+0x888>
 800bb1c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800bb20:	ee26 6b07 	vmul.f64	d6, d6, d7
 800bb24:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bb28:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800bb2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb30:	464c      	mov	r4, r9
 800bb32:	464f      	mov	r7, r9
 800bb34:	f280 821c 	bge.w	800bf70 <_dtoa_r+0x850>
 800bb38:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800bb3c:	2331      	movs	r3, #49	; 0x31
 800bb3e:	f808 3b01 	strb.w	r3, [r8], #1
 800bb42:	f10b 0b01 	add.w	fp, fp, #1
 800bb46:	e218      	b.n	800bf7a <_dtoa_r+0x85a>
 800bb48:	2102      	movs	r1, #2
 800bb4a:	e780      	b.n	800ba4e <_dtoa_r+0x32e>
 800bb4c:	07d4      	lsls	r4, r2, #31
 800bb4e:	d504      	bpl.n	800bb5a <_dtoa_r+0x43a>
 800bb50:	ed90 6b00 	vldr	d6, [r0]
 800bb54:	3101      	adds	r1, #1
 800bb56:	ee27 7b06 	vmul.f64	d7, d7, d6
 800bb5a:	1052      	asrs	r2, r2, #1
 800bb5c:	3008      	adds	r0, #8
 800bb5e:	e777      	b.n	800ba50 <_dtoa_r+0x330>
 800bb60:	d022      	beq.n	800bba8 <_dtoa_r+0x488>
 800bb62:	f1cb 0200 	rsb	r2, fp, #0
 800bb66:	4970      	ldr	r1, [pc, #448]	; (800bd28 <_dtoa_r+0x608>)
 800bb68:	f002 000f 	and.w	r0, r2, #15
 800bb6c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800bb70:	ed91 7b00 	vldr	d7, [r1]
 800bb74:	ee28 7b07 	vmul.f64	d7, d8, d7
 800bb78:	ed8d 7b02 	vstr	d7, [sp, #8]
 800bb7c:	486b      	ldr	r0, [pc, #428]	; (800bd2c <_dtoa_r+0x60c>)
 800bb7e:	1112      	asrs	r2, r2, #4
 800bb80:	2400      	movs	r4, #0
 800bb82:	2102      	movs	r1, #2
 800bb84:	b92a      	cbnz	r2, 800bb92 <_dtoa_r+0x472>
 800bb86:	2c00      	cmp	r4, #0
 800bb88:	f43f af6a 	beq.w	800ba60 <_dtoa_r+0x340>
 800bb8c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800bb90:	e766      	b.n	800ba60 <_dtoa_r+0x340>
 800bb92:	07d7      	lsls	r7, r2, #31
 800bb94:	d505      	bpl.n	800bba2 <_dtoa_r+0x482>
 800bb96:	ed90 6b00 	vldr	d6, [r0]
 800bb9a:	3101      	adds	r1, #1
 800bb9c:	2401      	movs	r4, #1
 800bb9e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800bba2:	1052      	asrs	r2, r2, #1
 800bba4:	3008      	adds	r0, #8
 800bba6:	e7ed      	b.n	800bb84 <_dtoa_r+0x464>
 800bba8:	2102      	movs	r1, #2
 800bbaa:	e759      	b.n	800ba60 <_dtoa_r+0x340>
 800bbac:	465a      	mov	r2, fp
 800bbae:	464c      	mov	r4, r9
 800bbb0:	e775      	b.n	800ba9e <_dtoa_r+0x37e>
 800bbb2:	ec41 0b17 	vmov	d7, r0, r1
 800bbb6:	495c      	ldr	r1, [pc, #368]	; (800bd28 <_dtoa_r+0x608>)
 800bbb8:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 800bbbc:	ed11 4b02 	vldr	d4, [r1, #-8]
 800bbc0:	9901      	ldr	r1, [sp, #4]
 800bbc2:	440c      	add	r4, r1
 800bbc4:	9907      	ldr	r1, [sp, #28]
 800bbc6:	b351      	cbz	r1, 800bc1e <_dtoa_r+0x4fe>
 800bbc8:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800bbcc:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800bbd0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800bbd4:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800bbd8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800bbdc:	ee35 7b47 	vsub.f64	d7, d5, d7
 800bbe0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800bbe4:	ee14 1a90 	vmov	r1, s9
 800bbe8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800bbec:	3130      	adds	r1, #48	; 0x30
 800bbee:	ee36 6b45 	vsub.f64	d6, d6, d5
 800bbf2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800bbf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bbfa:	f808 1b01 	strb.w	r1, [r8], #1
 800bbfe:	d439      	bmi.n	800bc74 <_dtoa_r+0x554>
 800bc00:	ee32 5b46 	vsub.f64	d5, d2, d6
 800bc04:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800bc08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc0c:	d472      	bmi.n	800bcf4 <_dtoa_r+0x5d4>
 800bc0e:	45a0      	cmp	r8, r4
 800bc10:	f43f af6b 	beq.w	800baea <_dtoa_r+0x3ca>
 800bc14:	ee27 7b03 	vmul.f64	d7, d7, d3
 800bc18:	ee26 6b03 	vmul.f64	d6, d6, d3
 800bc1c:	e7e0      	b.n	800bbe0 <_dtoa_r+0x4c0>
 800bc1e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800bc22:	ee27 7b04 	vmul.f64	d7, d7, d4
 800bc26:	4620      	mov	r0, r4
 800bc28:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800bc2c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800bc30:	ee14 1a90 	vmov	r1, s9
 800bc34:	3130      	adds	r1, #48	; 0x30
 800bc36:	f808 1b01 	strb.w	r1, [r8], #1
 800bc3a:	45a0      	cmp	r8, r4
 800bc3c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800bc40:	ee36 6b45 	vsub.f64	d6, d6, d5
 800bc44:	d118      	bne.n	800bc78 <_dtoa_r+0x558>
 800bc46:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800bc4a:	ee37 4b05 	vadd.f64	d4, d7, d5
 800bc4e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800bc52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc56:	dc4d      	bgt.n	800bcf4 <_dtoa_r+0x5d4>
 800bc58:	ee35 5b47 	vsub.f64	d5, d5, d7
 800bc5c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800bc60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc64:	f57f af41 	bpl.w	800baea <_dtoa_r+0x3ca>
 800bc68:	4680      	mov	r8, r0
 800bc6a:	3801      	subs	r0, #1
 800bc6c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800bc70:	2b30      	cmp	r3, #48	; 0x30
 800bc72:	d0f9      	beq.n	800bc68 <_dtoa_r+0x548>
 800bc74:	4693      	mov	fp, r2
 800bc76:	e02a      	b.n	800bcce <_dtoa_r+0x5ae>
 800bc78:	ee26 6b03 	vmul.f64	d6, d6, d3
 800bc7c:	e7d6      	b.n	800bc2c <_dtoa_r+0x50c>
 800bc7e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bc82:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800bc86:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800bc8a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800bc8e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800bc92:	ee15 3a10 	vmov	r3, s10
 800bc96:	3330      	adds	r3, #48	; 0x30
 800bc98:	f808 3b01 	strb.w	r3, [r8], #1
 800bc9c:	9b01      	ldr	r3, [sp, #4]
 800bc9e:	eba8 0303 	sub.w	r3, r8, r3
 800bca2:	4599      	cmp	r9, r3
 800bca4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800bca8:	eea3 7b46 	vfms.f64	d7, d3, d6
 800bcac:	d133      	bne.n	800bd16 <_dtoa_r+0x5f6>
 800bcae:	ee37 7b07 	vadd.f64	d7, d7, d7
 800bcb2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800bcb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bcba:	dc1a      	bgt.n	800bcf2 <_dtoa_r+0x5d2>
 800bcbc:	eeb4 7b46 	vcmp.f64	d7, d6
 800bcc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bcc4:	d103      	bne.n	800bcce <_dtoa_r+0x5ae>
 800bcc6:	ee15 3a10 	vmov	r3, s10
 800bcca:	07d9      	lsls	r1, r3, #31
 800bccc:	d411      	bmi.n	800bcf2 <_dtoa_r+0x5d2>
 800bcce:	4629      	mov	r1, r5
 800bcd0:	4630      	mov	r0, r6
 800bcd2:	f000 fb1d 	bl	800c310 <_Bfree>
 800bcd6:	2300      	movs	r3, #0
 800bcd8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bcda:	f888 3000 	strb.w	r3, [r8]
 800bcde:	f10b 0301 	add.w	r3, fp, #1
 800bce2:	6013      	str	r3, [r2, #0]
 800bce4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	f43f ad69 	beq.w	800b7be <_dtoa_r+0x9e>
 800bcec:	f8c3 8000 	str.w	r8, [r3]
 800bcf0:	e565      	b.n	800b7be <_dtoa_r+0x9e>
 800bcf2:	465a      	mov	r2, fp
 800bcf4:	4643      	mov	r3, r8
 800bcf6:	4698      	mov	r8, r3
 800bcf8:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 800bcfc:	2939      	cmp	r1, #57	; 0x39
 800bcfe:	d106      	bne.n	800bd0e <_dtoa_r+0x5ee>
 800bd00:	9901      	ldr	r1, [sp, #4]
 800bd02:	4299      	cmp	r1, r3
 800bd04:	d1f7      	bne.n	800bcf6 <_dtoa_r+0x5d6>
 800bd06:	9801      	ldr	r0, [sp, #4]
 800bd08:	2130      	movs	r1, #48	; 0x30
 800bd0a:	3201      	adds	r2, #1
 800bd0c:	7001      	strb	r1, [r0, #0]
 800bd0e:	7819      	ldrb	r1, [r3, #0]
 800bd10:	3101      	adds	r1, #1
 800bd12:	7019      	strb	r1, [r3, #0]
 800bd14:	e7ae      	b.n	800bc74 <_dtoa_r+0x554>
 800bd16:	ee27 7b04 	vmul.f64	d7, d7, d4
 800bd1a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800bd1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd22:	d1b2      	bne.n	800bc8a <_dtoa_r+0x56a>
 800bd24:	e7d3      	b.n	800bcce <_dtoa_r+0x5ae>
 800bd26:	bf00      	nop
 800bd28:	08037000 	.word	0x08037000
 800bd2c:	08036fd8 	.word	0x08036fd8
 800bd30:	9907      	ldr	r1, [sp, #28]
 800bd32:	2900      	cmp	r1, #0
 800bd34:	f000 80d0 	beq.w	800bed8 <_dtoa_r+0x7b8>
 800bd38:	9906      	ldr	r1, [sp, #24]
 800bd3a:	2901      	cmp	r1, #1
 800bd3c:	f300 80b4 	bgt.w	800bea8 <_dtoa_r+0x788>
 800bd40:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bd42:	2900      	cmp	r1, #0
 800bd44:	f000 80ac 	beq.w	800bea0 <_dtoa_r+0x780>
 800bd48:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800bd4c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800bd50:	461c      	mov	r4, r3
 800bd52:	9309      	str	r3, [sp, #36]	; 0x24
 800bd54:	9b04      	ldr	r3, [sp, #16]
 800bd56:	4413      	add	r3, r2
 800bd58:	9304      	str	r3, [sp, #16]
 800bd5a:	9b05      	ldr	r3, [sp, #20]
 800bd5c:	2101      	movs	r1, #1
 800bd5e:	4413      	add	r3, r2
 800bd60:	4630      	mov	r0, r6
 800bd62:	9305      	str	r3, [sp, #20]
 800bd64:	f000 fb8a 	bl	800c47c <__i2b>
 800bd68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd6a:	4607      	mov	r7, r0
 800bd6c:	f1b8 0f00 	cmp.w	r8, #0
 800bd70:	d00d      	beq.n	800bd8e <_dtoa_r+0x66e>
 800bd72:	9a05      	ldr	r2, [sp, #20]
 800bd74:	2a00      	cmp	r2, #0
 800bd76:	dd0a      	ble.n	800bd8e <_dtoa_r+0x66e>
 800bd78:	4542      	cmp	r2, r8
 800bd7a:	9904      	ldr	r1, [sp, #16]
 800bd7c:	bfa8      	it	ge
 800bd7e:	4642      	movge	r2, r8
 800bd80:	1a89      	subs	r1, r1, r2
 800bd82:	9104      	str	r1, [sp, #16]
 800bd84:	9905      	ldr	r1, [sp, #20]
 800bd86:	eba8 0802 	sub.w	r8, r8, r2
 800bd8a:	1a8a      	subs	r2, r1, r2
 800bd8c:	9205      	str	r2, [sp, #20]
 800bd8e:	b303      	cbz	r3, 800bdd2 <_dtoa_r+0x6b2>
 800bd90:	9a07      	ldr	r2, [sp, #28]
 800bd92:	2a00      	cmp	r2, #0
 800bd94:	f000 80a5 	beq.w	800bee2 <_dtoa_r+0x7c2>
 800bd98:	2c00      	cmp	r4, #0
 800bd9a:	dd13      	ble.n	800bdc4 <_dtoa_r+0x6a4>
 800bd9c:	4639      	mov	r1, r7
 800bd9e:	4622      	mov	r2, r4
 800bda0:	4630      	mov	r0, r6
 800bda2:	930d      	str	r3, [sp, #52]	; 0x34
 800bda4:	f000 fc2a 	bl	800c5fc <__pow5mult>
 800bda8:	462a      	mov	r2, r5
 800bdaa:	4601      	mov	r1, r0
 800bdac:	4607      	mov	r7, r0
 800bdae:	4630      	mov	r0, r6
 800bdb0:	f000 fb7a 	bl	800c4a8 <__multiply>
 800bdb4:	4629      	mov	r1, r5
 800bdb6:	9009      	str	r0, [sp, #36]	; 0x24
 800bdb8:	4630      	mov	r0, r6
 800bdba:	f000 faa9 	bl	800c310 <_Bfree>
 800bdbe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bdc0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bdc2:	4615      	mov	r5, r2
 800bdc4:	1b1a      	subs	r2, r3, r4
 800bdc6:	d004      	beq.n	800bdd2 <_dtoa_r+0x6b2>
 800bdc8:	4629      	mov	r1, r5
 800bdca:	4630      	mov	r0, r6
 800bdcc:	f000 fc16 	bl	800c5fc <__pow5mult>
 800bdd0:	4605      	mov	r5, r0
 800bdd2:	2101      	movs	r1, #1
 800bdd4:	4630      	mov	r0, r6
 800bdd6:	f000 fb51 	bl	800c47c <__i2b>
 800bdda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	4604      	mov	r4, r0
 800bde0:	f340 8081 	ble.w	800bee6 <_dtoa_r+0x7c6>
 800bde4:	461a      	mov	r2, r3
 800bde6:	4601      	mov	r1, r0
 800bde8:	4630      	mov	r0, r6
 800bdea:	f000 fc07 	bl	800c5fc <__pow5mult>
 800bdee:	9b06      	ldr	r3, [sp, #24]
 800bdf0:	2b01      	cmp	r3, #1
 800bdf2:	4604      	mov	r4, r0
 800bdf4:	dd7a      	ble.n	800beec <_dtoa_r+0x7cc>
 800bdf6:	2300      	movs	r3, #0
 800bdf8:	9309      	str	r3, [sp, #36]	; 0x24
 800bdfa:	6922      	ldr	r2, [r4, #16]
 800bdfc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800be00:	6910      	ldr	r0, [r2, #16]
 800be02:	f000 faed 	bl	800c3e0 <__hi0bits>
 800be06:	f1c0 0020 	rsb	r0, r0, #32
 800be0a:	9b05      	ldr	r3, [sp, #20]
 800be0c:	4418      	add	r0, r3
 800be0e:	f010 001f 	ands.w	r0, r0, #31
 800be12:	f000 8093 	beq.w	800bf3c <_dtoa_r+0x81c>
 800be16:	f1c0 0220 	rsb	r2, r0, #32
 800be1a:	2a04      	cmp	r2, #4
 800be1c:	f340 8085 	ble.w	800bf2a <_dtoa_r+0x80a>
 800be20:	9b04      	ldr	r3, [sp, #16]
 800be22:	f1c0 001c 	rsb	r0, r0, #28
 800be26:	4403      	add	r3, r0
 800be28:	9304      	str	r3, [sp, #16]
 800be2a:	9b05      	ldr	r3, [sp, #20]
 800be2c:	4480      	add	r8, r0
 800be2e:	4403      	add	r3, r0
 800be30:	9305      	str	r3, [sp, #20]
 800be32:	9b04      	ldr	r3, [sp, #16]
 800be34:	2b00      	cmp	r3, #0
 800be36:	dd05      	ble.n	800be44 <_dtoa_r+0x724>
 800be38:	4629      	mov	r1, r5
 800be3a:	461a      	mov	r2, r3
 800be3c:	4630      	mov	r0, r6
 800be3e:	f000 fc37 	bl	800c6b0 <__lshift>
 800be42:	4605      	mov	r5, r0
 800be44:	9b05      	ldr	r3, [sp, #20]
 800be46:	2b00      	cmp	r3, #0
 800be48:	dd05      	ble.n	800be56 <_dtoa_r+0x736>
 800be4a:	4621      	mov	r1, r4
 800be4c:	461a      	mov	r2, r3
 800be4e:	4630      	mov	r0, r6
 800be50:	f000 fc2e 	bl	800c6b0 <__lshift>
 800be54:	4604      	mov	r4, r0
 800be56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d071      	beq.n	800bf40 <_dtoa_r+0x820>
 800be5c:	4621      	mov	r1, r4
 800be5e:	4628      	mov	r0, r5
 800be60:	f000 fc92 	bl	800c788 <__mcmp>
 800be64:	2800      	cmp	r0, #0
 800be66:	da6b      	bge.n	800bf40 <_dtoa_r+0x820>
 800be68:	2300      	movs	r3, #0
 800be6a:	4629      	mov	r1, r5
 800be6c:	220a      	movs	r2, #10
 800be6e:	4630      	mov	r0, r6
 800be70:	f000 fa70 	bl	800c354 <__multadd>
 800be74:	9b07      	ldr	r3, [sp, #28]
 800be76:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800be7a:	4605      	mov	r5, r0
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	f000 8197 	beq.w	800c1b0 <_dtoa_r+0xa90>
 800be82:	4639      	mov	r1, r7
 800be84:	2300      	movs	r3, #0
 800be86:	220a      	movs	r2, #10
 800be88:	4630      	mov	r0, r6
 800be8a:	f000 fa63 	bl	800c354 <__multadd>
 800be8e:	f1ba 0f00 	cmp.w	sl, #0
 800be92:	4607      	mov	r7, r0
 800be94:	f300 8093 	bgt.w	800bfbe <_dtoa_r+0x89e>
 800be98:	9b06      	ldr	r3, [sp, #24]
 800be9a:	2b02      	cmp	r3, #2
 800be9c:	dc57      	bgt.n	800bf4e <_dtoa_r+0x82e>
 800be9e:	e08e      	b.n	800bfbe <_dtoa_r+0x89e>
 800bea0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bea2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800bea6:	e751      	b.n	800bd4c <_dtoa_r+0x62c>
 800bea8:	f109 34ff 	add.w	r4, r9, #4294967295	; 0xffffffff
 800beac:	42a3      	cmp	r3, r4
 800beae:	bfbf      	itttt	lt
 800beb0:	1ae2      	sublt	r2, r4, r3
 800beb2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800beb4:	189b      	addlt	r3, r3, r2
 800beb6:	930a      	strlt	r3, [sp, #40]	; 0x28
 800beb8:	bfae      	itee	ge
 800beba:	1b1c      	subge	r4, r3, r4
 800bebc:	4623      	movlt	r3, r4
 800bebe:	2400      	movlt	r4, #0
 800bec0:	f1b9 0f00 	cmp.w	r9, #0
 800bec4:	bfb5      	itete	lt
 800bec6:	9a04      	ldrlt	r2, [sp, #16]
 800bec8:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800becc:	eba2 0809 	sublt.w	r8, r2, r9
 800bed0:	464a      	movge	r2, r9
 800bed2:	bfb8      	it	lt
 800bed4:	2200      	movlt	r2, #0
 800bed6:	e73c      	b.n	800bd52 <_dtoa_r+0x632>
 800bed8:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800bedc:	9f07      	ldr	r7, [sp, #28]
 800bede:	461c      	mov	r4, r3
 800bee0:	e744      	b.n	800bd6c <_dtoa_r+0x64c>
 800bee2:	461a      	mov	r2, r3
 800bee4:	e770      	b.n	800bdc8 <_dtoa_r+0x6a8>
 800bee6:	9b06      	ldr	r3, [sp, #24]
 800bee8:	2b01      	cmp	r3, #1
 800beea:	dc18      	bgt.n	800bf1e <_dtoa_r+0x7fe>
 800beec:	9b02      	ldr	r3, [sp, #8]
 800beee:	b9b3      	cbnz	r3, 800bf1e <_dtoa_r+0x7fe>
 800bef0:	9b03      	ldr	r3, [sp, #12]
 800bef2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800bef6:	b9a2      	cbnz	r2, 800bf22 <_dtoa_r+0x802>
 800bef8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800befc:	0d12      	lsrs	r2, r2, #20
 800befe:	0512      	lsls	r2, r2, #20
 800bf00:	b18a      	cbz	r2, 800bf26 <_dtoa_r+0x806>
 800bf02:	9b04      	ldr	r3, [sp, #16]
 800bf04:	3301      	adds	r3, #1
 800bf06:	9304      	str	r3, [sp, #16]
 800bf08:	9b05      	ldr	r3, [sp, #20]
 800bf0a:	3301      	adds	r3, #1
 800bf0c:	9305      	str	r3, [sp, #20]
 800bf0e:	2301      	movs	r3, #1
 800bf10:	9309      	str	r3, [sp, #36]	; 0x24
 800bf12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	f47f af70 	bne.w	800bdfa <_dtoa_r+0x6da>
 800bf1a:	2001      	movs	r0, #1
 800bf1c:	e775      	b.n	800be0a <_dtoa_r+0x6ea>
 800bf1e:	2300      	movs	r3, #0
 800bf20:	e7f6      	b.n	800bf10 <_dtoa_r+0x7f0>
 800bf22:	9b02      	ldr	r3, [sp, #8]
 800bf24:	e7f4      	b.n	800bf10 <_dtoa_r+0x7f0>
 800bf26:	9209      	str	r2, [sp, #36]	; 0x24
 800bf28:	e7f3      	b.n	800bf12 <_dtoa_r+0x7f2>
 800bf2a:	d082      	beq.n	800be32 <_dtoa_r+0x712>
 800bf2c:	9b04      	ldr	r3, [sp, #16]
 800bf2e:	321c      	adds	r2, #28
 800bf30:	4413      	add	r3, r2
 800bf32:	9304      	str	r3, [sp, #16]
 800bf34:	9b05      	ldr	r3, [sp, #20]
 800bf36:	4490      	add	r8, r2
 800bf38:	4413      	add	r3, r2
 800bf3a:	e779      	b.n	800be30 <_dtoa_r+0x710>
 800bf3c:	4602      	mov	r2, r0
 800bf3e:	e7f5      	b.n	800bf2c <_dtoa_r+0x80c>
 800bf40:	f1b9 0f00 	cmp.w	r9, #0
 800bf44:	dc36      	bgt.n	800bfb4 <_dtoa_r+0x894>
 800bf46:	9b06      	ldr	r3, [sp, #24]
 800bf48:	2b02      	cmp	r3, #2
 800bf4a:	dd33      	ble.n	800bfb4 <_dtoa_r+0x894>
 800bf4c:	46ca      	mov	sl, r9
 800bf4e:	f1ba 0f00 	cmp.w	sl, #0
 800bf52:	d10d      	bne.n	800bf70 <_dtoa_r+0x850>
 800bf54:	4621      	mov	r1, r4
 800bf56:	4653      	mov	r3, sl
 800bf58:	2205      	movs	r2, #5
 800bf5a:	4630      	mov	r0, r6
 800bf5c:	f000 f9fa 	bl	800c354 <__multadd>
 800bf60:	4601      	mov	r1, r0
 800bf62:	4604      	mov	r4, r0
 800bf64:	4628      	mov	r0, r5
 800bf66:	f000 fc0f 	bl	800c788 <__mcmp>
 800bf6a:	2800      	cmp	r0, #0
 800bf6c:	f73f ade4 	bgt.w	800bb38 <_dtoa_r+0x418>
 800bf70:	9b08      	ldr	r3, [sp, #32]
 800bf72:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800bf76:	ea6f 0b03 	mvn.w	fp, r3
 800bf7a:	f04f 0900 	mov.w	r9, #0
 800bf7e:	4621      	mov	r1, r4
 800bf80:	4630      	mov	r0, r6
 800bf82:	f000 f9c5 	bl	800c310 <_Bfree>
 800bf86:	2f00      	cmp	r7, #0
 800bf88:	f43f aea1 	beq.w	800bcce <_dtoa_r+0x5ae>
 800bf8c:	f1b9 0f00 	cmp.w	r9, #0
 800bf90:	d005      	beq.n	800bf9e <_dtoa_r+0x87e>
 800bf92:	45b9      	cmp	r9, r7
 800bf94:	d003      	beq.n	800bf9e <_dtoa_r+0x87e>
 800bf96:	4649      	mov	r1, r9
 800bf98:	4630      	mov	r0, r6
 800bf9a:	f000 f9b9 	bl	800c310 <_Bfree>
 800bf9e:	4639      	mov	r1, r7
 800bfa0:	4630      	mov	r0, r6
 800bfa2:	f000 f9b5 	bl	800c310 <_Bfree>
 800bfa6:	e692      	b.n	800bcce <_dtoa_r+0x5ae>
 800bfa8:	2400      	movs	r4, #0
 800bfaa:	4627      	mov	r7, r4
 800bfac:	e7e0      	b.n	800bf70 <_dtoa_r+0x850>
 800bfae:	4693      	mov	fp, r2
 800bfb0:	4627      	mov	r7, r4
 800bfb2:	e5c1      	b.n	800bb38 <_dtoa_r+0x418>
 800bfb4:	9b07      	ldr	r3, [sp, #28]
 800bfb6:	46ca      	mov	sl, r9
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	f000 8100 	beq.w	800c1be <_dtoa_r+0xa9e>
 800bfbe:	f1b8 0f00 	cmp.w	r8, #0
 800bfc2:	dd05      	ble.n	800bfd0 <_dtoa_r+0x8b0>
 800bfc4:	4639      	mov	r1, r7
 800bfc6:	4642      	mov	r2, r8
 800bfc8:	4630      	mov	r0, r6
 800bfca:	f000 fb71 	bl	800c6b0 <__lshift>
 800bfce:	4607      	mov	r7, r0
 800bfd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d05d      	beq.n	800c092 <_dtoa_r+0x972>
 800bfd6:	6879      	ldr	r1, [r7, #4]
 800bfd8:	4630      	mov	r0, r6
 800bfda:	f000 f959 	bl	800c290 <_Balloc>
 800bfde:	4680      	mov	r8, r0
 800bfe0:	b928      	cbnz	r0, 800bfee <_dtoa_r+0x8ce>
 800bfe2:	4b82      	ldr	r3, [pc, #520]	; (800c1ec <_dtoa_r+0xacc>)
 800bfe4:	4602      	mov	r2, r0
 800bfe6:	f240 21ef 	movw	r1, #751	; 0x2ef
 800bfea:	f7ff bbb1 	b.w	800b750 <_dtoa_r+0x30>
 800bfee:	693a      	ldr	r2, [r7, #16]
 800bff0:	3202      	adds	r2, #2
 800bff2:	0092      	lsls	r2, r2, #2
 800bff4:	f107 010c 	add.w	r1, r7, #12
 800bff8:	300c      	adds	r0, #12
 800bffa:	f000 fee5 	bl	800cdc8 <memcpy>
 800bffe:	2201      	movs	r2, #1
 800c000:	4641      	mov	r1, r8
 800c002:	4630      	mov	r0, r6
 800c004:	f000 fb54 	bl	800c6b0 <__lshift>
 800c008:	9b01      	ldr	r3, [sp, #4]
 800c00a:	3301      	adds	r3, #1
 800c00c:	9304      	str	r3, [sp, #16]
 800c00e:	9b01      	ldr	r3, [sp, #4]
 800c010:	4453      	add	r3, sl
 800c012:	9308      	str	r3, [sp, #32]
 800c014:	9b02      	ldr	r3, [sp, #8]
 800c016:	f003 0301 	and.w	r3, r3, #1
 800c01a:	46b9      	mov	r9, r7
 800c01c:	9307      	str	r3, [sp, #28]
 800c01e:	4607      	mov	r7, r0
 800c020:	9b04      	ldr	r3, [sp, #16]
 800c022:	4621      	mov	r1, r4
 800c024:	3b01      	subs	r3, #1
 800c026:	4628      	mov	r0, r5
 800c028:	9302      	str	r3, [sp, #8]
 800c02a:	f7ff faf1 	bl	800b610 <quorem>
 800c02e:	4603      	mov	r3, r0
 800c030:	3330      	adds	r3, #48	; 0x30
 800c032:	9005      	str	r0, [sp, #20]
 800c034:	4649      	mov	r1, r9
 800c036:	4628      	mov	r0, r5
 800c038:	9309      	str	r3, [sp, #36]	; 0x24
 800c03a:	f000 fba5 	bl	800c788 <__mcmp>
 800c03e:	463a      	mov	r2, r7
 800c040:	4682      	mov	sl, r0
 800c042:	4621      	mov	r1, r4
 800c044:	4630      	mov	r0, r6
 800c046:	f000 fbbb 	bl	800c7c0 <__mdiff>
 800c04a:	68c2      	ldr	r2, [r0, #12]
 800c04c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c04e:	4680      	mov	r8, r0
 800c050:	bb0a      	cbnz	r2, 800c096 <_dtoa_r+0x976>
 800c052:	4601      	mov	r1, r0
 800c054:	4628      	mov	r0, r5
 800c056:	f000 fb97 	bl	800c788 <__mcmp>
 800c05a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c05c:	4602      	mov	r2, r0
 800c05e:	4641      	mov	r1, r8
 800c060:	4630      	mov	r0, r6
 800c062:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800c066:	f000 f953 	bl	800c310 <_Bfree>
 800c06a:	9b06      	ldr	r3, [sp, #24]
 800c06c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c06e:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800c072:	ea43 0102 	orr.w	r1, r3, r2
 800c076:	9b07      	ldr	r3, [sp, #28]
 800c078:	4319      	orrs	r1, r3
 800c07a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c07c:	d10d      	bne.n	800c09a <_dtoa_r+0x97a>
 800c07e:	2b39      	cmp	r3, #57	; 0x39
 800c080:	d029      	beq.n	800c0d6 <_dtoa_r+0x9b6>
 800c082:	f1ba 0f00 	cmp.w	sl, #0
 800c086:	dd01      	ble.n	800c08c <_dtoa_r+0x96c>
 800c088:	9b05      	ldr	r3, [sp, #20]
 800c08a:	3331      	adds	r3, #49	; 0x31
 800c08c:	9a02      	ldr	r2, [sp, #8]
 800c08e:	7013      	strb	r3, [r2, #0]
 800c090:	e775      	b.n	800bf7e <_dtoa_r+0x85e>
 800c092:	4638      	mov	r0, r7
 800c094:	e7b8      	b.n	800c008 <_dtoa_r+0x8e8>
 800c096:	2201      	movs	r2, #1
 800c098:	e7e1      	b.n	800c05e <_dtoa_r+0x93e>
 800c09a:	f1ba 0f00 	cmp.w	sl, #0
 800c09e:	db06      	blt.n	800c0ae <_dtoa_r+0x98e>
 800c0a0:	9906      	ldr	r1, [sp, #24]
 800c0a2:	ea41 0a0a 	orr.w	sl, r1, sl
 800c0a6:	9907      	ldr	r1, [sp, #28]
 800c0a8:	ea5a 0a01 	orrs.w	sl, sl, r1
 800c0ac:	d120      	bne.n	800c0f0 <_dtoa_r+0x9d0>
 800c0ae:	2a00      	cmp	r2, #0
 800c0b0:	ddec      	ble.n	800c08c <_dtoa_r+0x96c>
 800c0b2:	4629      	mov	r1, r5
 800c0b4:	2201      	movs	r2, #1
 800c0b6:	4630      	mov	r0, r6
 800c0b8:	9304      	str	r3, [sp, #16]
 800c0ba:	f000 faf9 	bl	800c6b0 <__lshift>
 800c0be:	4621      	mov	r1, r4
 800c0c0:	4605      	mov	r5, r0
 800c0c2:	f000 fb61 	bl	800c788 <__mcmp>
 800c0c6:	2800      	cmp	r0, #0
 800c0c8:	9b04      	ldr	r3, [sp, #16]
 800c0ca:	dc02      	bgt.n	800c0d2 <_dtoa_r+0x9b2>
 800c0cc:	d1de      	bne.n	800c08c <_dtoa_r+0x96c>
 800c0ce:	07da      	lsls	r2, r3, #31
 800c0d0:	d5dc      	bpl.n	800c08c <_dtoa_r+0x96c>
 800c0d2:	2b39      	cmp	r3, #57	; 0x39
 800c0d4:	d1d8      	bne.n	800c088 <_dtoa_r+0x968>
 800c0d6:	9a02      	ldr	r2, [sp, #8]
 800c0d8:	2339      	movs	r3, #57	; 0x39
 800c0da:	7013      	strb	r3, [r2, #0]
 800c0dc:	4643      	mov	r3, r8
 800c0de:	4698      	mov	r8, r3
 800c0e0:	3b01      	subs	r3, #1
 800c0e2:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800c0e6:	2a39      	cmp	r2, #57	; 0x39
 800c0e8:	d051      	beq.n	800c18e <_dtoa_r+0xa6e>
 800c0ea:	3201      	adds	r2, #1
 800c0ec:	701a      	strb	r2, [r3, #0]
 800c0ee:	e746      	b.n	800bf7e <_dtoa_r+0x85e>
 800c0f0:	2a00      	cmp	r2, #0
 800c0f2:	dd03      	ble.n	800c0fc <_dtoa_r+0x9dc>
 800c0f4:	2b39      	cmp	r3, #57	; 0x39
 800c0f6:	d0ee      	beq.n	800c0d6 <_dtoa_r+0x9b6>
 800c0f8:	3301      	adds	r3, #1
 800c0fa:	e7c7      	b.n	800c08c <_dtoa_r+0x96c>
 800c0fc:	9a04      	ldr	r2, [sp, #16]
 800c0fe:	9908      	ldr	r1, [sp, #32]
 800c100:	f802 3c01 	strb.w	r3, [r2, #-1]
 800c104:	428a      	cmp	r2, r1
 800c106:	d02b      	beq.n	800c160 <_dtoa_r+0xa40>
 800c108:	4629      	mov	r1, r5
 800c10a:	2300      	movs	r3, #0
 800c10c:	220a      	movs	r2, #10
 800c10e:	4630      	mov	r0, r6
 800c110:	f000 f920 	bl	800c354 <__multadd>
 800c114:	45b9      	cmp	r9, r7
 800c116:	4605      	mov	r5, r0
 800c118:	f04f 0300 	mov.w	r3, #0
 800c11c:	f04f 020a 	mov.w	r2, #10
 800c120:	4649      	mov	r1, r9
 800c122:	4630      	mov	r0, r6
 800c124:	d107      	bne.n	800c136 <_dtoa_r+0xa16>
 800c126:	f000 f915 	bl	800c354 <__multadd>
 800c12a:	4681      	mov	r9, r0
 800c12c:	4607      	mov	r7, r0
 800c12e:	9b04      	ldr	r3, [sp, #16]
 800c130:	3301      	adds	r3, #1
 800c132:	9304      	str	r3, [sp, #16]
 800c134:	e774      	b.n	800c020 <_dtoa_r+0x900>
 800c136:	f000 f90d 	bl	800c354 <__multadd>
 800c13a:	4639      	mov	r1, r7
 800c13c:	4681      	mov	r9, r0
 800c13e:	2300      	movs	r3, #0
 800c140:	220a      	movs	r2, #10
 800c142:	4630      	mov	r0, r6
 800c144:	f000 f906 	bl	800c354 <__multadd>
 800c148:	4607      	mov	r7, r0
 800c14a:	e7f0      	b.n	800c12e <_dtoa_r+0xa0e>
 800c14c:	f1ba 0f00 	cmp.w	sl, #0
 800c150:	9a01      	ldr	r2, [sp, #4]
 800c152:	bfcc      	ite	gt
 800c154:	46d0      	movgt	r8, sl
 800c156:	f04f 0801 	movle.w	r8, #1
 800c15a:	4490      	add	r8, r2
 800c15c:	f04f 0900 	mov.w	r9, #0
 800c160:	4629      	mov	r1, r5
 800c162:	2201      	movs	r2, #1
 800c164:	4630      	mov	r0, r6
 800c166:	9302      	str	r3, [sp, #8]
 800c168:	f000 faa2 	bl	800c6b0 <__lshift>
 800c16c:	4621      	mov	r1, r4
 800c16e:	4605      	mov	r5, r0
 800c170:	f000 fb0a 	bl	800c788 <__mcmp>
 800c174:	2800      	cmp	r0, #0
 800c176:	dcb1      	bgt.n	800c0dc <_dtoa_r+0x9bc>
 800c178:	d102      	bne.n	800c180 <_dtoa_r+0xa60>
 800c17a:	9b02      	ldr	r3, [sp, #8]
 800c17c:	07db      	lsls	r3, r3, #31
 800c17e:	d4ad      	bmi.n	800c0dc <_dtoa_r+0x9bc>
 800c180:	4643      	mov	r3, r8
 800c182:	4698      	mov	r8, r3
 800c184:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c188:	2a30      	cmp	r2, #48	; 0x30
 800c18a:	d0fa      	beq.n	800c182 <_dtoa_r+0xa62>
 800c18c:	e6f7      	b.n	800bf7e <_dtoa_r+0x85e>
 800c18e:	9a01      	ldr	r2, [sp, #4]
 800c190:	429a      	cmp	r2, r3
 800c192:	d1a4      	bne.n	800c0de <_dtoa_r+0x9be>
 800c194:	f10b 0b01 	add.w	fp, fp, #1
 800c198:	2331      	movs	r3, #49	; 0x31
 800c19a:	e778      	b.n	800c08e <_dtoa_r+0x96e>
 800c19c:	4b14      	ldr	r3, [pc, #80]	; (800c1f0 <_dtoa_r+0xad0>)
 800c19e:	f7ff bb2a 	b.w	800b7f6 <_dtoa_r+0xd6>
 800c1a2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	f47f ab05 	bne.w	800b7b4 <_dtoa_r+0x94>
 800c1aa:	4b12      	ldr	r3, [pc, #72]	; (800c1f4 <_dtoa_r+0xad4>)
 800c1ac:	f7ff bb23 	b.w	800b7f6 <_dtoa_r+0xd6>
 800c1b0:	f1ba 0f00 	cmp.w	sl, #0
 800c1b4:	dc03      	bgt.n	800c1be <_dtoa_r+0xa9e>
 800c1b6:	9b06      	ldr	r3, [sp, #24]
 800c1b8:	2b02      	cmp	r3, #2
 800c1ba:	f73f aec8 	bgt.w	800bf4e <_dtoa_r+0x82e>
 800c1be:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800c1c2:	4621      	mov	r1, r4
 800c1c4:	4628      	mov	r0, r5
 800c1c6:	f7ff fa23 	bl	800b610 <quorem>
 800c1ca:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800c1ce:	f808 3b01 	strb.w	r3, [r8], #1
 800c1d2:	9a01      	ldr	r2, [sp, #4]
 800c1d4:	eba8 0202 	sub.w	r2, r8, r2
 800c1d8:	4592      	cmp	sl, r2
 800c1da:	ddb7      	ble.n	800c14c <_dtoa_r+0xa2c>
 800c1dc:	4629      	mov	r1, r5
 800c1de:	2300      	movs	r3, #0
 800c1e0:	220a      	movs	r2, #10
 800c1e2:	4630      	mov	r0, r6
 800c1e4:	f000 f8b6 	bl	800c354 <__multadd>
 800c1e8:	4605      	mov	r5, r0
 800c1ea:	e7ea      	b.n	800c1c2 <_dtoa_r+0xaa2>
 800c1ec:	08036f6c 	.word	0x08036f6c
 800c1f0:	08036ecc 	.word	0x08036ecc
 800c1f4:	08036ef0 	.word	0x08036ef0

0800c1f8 <_free_r>:
 800c1f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c1fa:	2900      	cmp	r1, #0
 800c1fc:	d044      	beq.n	800c288 <_free_r+0x90>
 800c1fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c202:	9001      	str	r0, [sp, #4]
 800c204:	2b00      	cmp	r3, #0
 800c206:	f1a1 0404 	sub.w	r4, r1, #4
 800c20a:	bfb8      	it	lt
 800c20c:	18e4      	addlt	r4, r4, r3
 800c20e:	f7fe fc17 	bl	800aa40 <__malloc_lock>
 800c212:	4a1e      	ldr	r2, [pc, #120]	; (800c28c <_free_r+0x94>)
 800c214:	9801      	ldr	r0, [sp, #4]
 800c216:	6813      	ldr	r3, [r2, #0]
 800c218:	b933      	cbnz	r3, 800c228 <_free_r+0x30>
 800c21a:	6063      	str	r3, [r4, #4]
 800c21c:	6014      	str	r4, [r2, #0]
 800c21e:	b003      	add	sp, #12
 800c220:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c224:	f7fe bc12 	b.w	800aa4c <__malloc_unlock>
 800c228:	42a3      	cmp	r3, r4
 800c22a:	d908      	bls.n	800c23e <_free_r+0x46>
 800c22c:	6825      	ldr	r5, [r4, #0]
 800c22e:	1961      	adds	r1, r4, r5
 800c230:	428b      	cmp	r3, r1
 800c232:	bf01      	itttt	eq
 800c234:	6819      	ldreq	r1, [r3, #0]
 800c236:	685b      	ldreq	r3, [r3, #4]
 800c238:	1949      	addeq	r1, r1, r5
 800c23a:	6021      	streq	r1, [r4, #0]
 800c23c:	e7ed      	b.n	800c21a <_free_r+0x22>
 800c23e:	461a      	mov	r2, r3
 800c240:	685b      	ldr	r3, [r3, #4]
 800c242:	b10b      	cbz	r3, 800c248 <_free_r+0x50>
 800c244:	42a3      	cmp	r3, r4
 800c246:	d9fa      	bls.n	800c23e <_free_r+0x46>
 800c248:	6811      	ldr	r1, [r2, #0]
 800c24a:	1855      	adds	r5, r2, r1
 800c24c:	42a5      	cmp	r5, r4
 800c24e:	d10b      	bne.n	800c268 <_free_r+0x70>
 800c250:	6824      	ldr	r4, [r4, #0]
 800c252:	4421      	add	r1, r4
 800c254:	1854      	adds	r4, r2, r1
 800c256:	42a3      	cmp	r3, r4
 800c258:	6011      	str	r1, [r2, #0]
 800c25a:	d1e0      	bne.n	800c21e <_free_r+0x26>
 800c25c:	681c      	ldr	r4, [r3, #0]
 800c25e:	685b      	ldr	r3, [r3, #4]
 800c260:	6053      	str	r3, [r2, #4]
 800c262:	440c      	add	r4, r1
 800c264:	6014      	str	r4, [r2, #0]
 800c266:	e7da      	b.n	800c21e <_free_r+0x26>
 800c268:	d902      	bls.n	800c270 <_free_r+0x78>
 800c26a:	230c      	movs	r3, #12
 800c26c:	6003      	str	r3, [r0, #0]
 800c26e:	e7d6      	b.n	800c21e <_free_r+0x26>
 800c270:	6825      	ldr	r5, [r4, #0]
 800c272:	1961      	adds	r1, r4, r5
 800c274:	428b      	cmp	r3, r1
 800c276:	bf04      	itt	eq
 800c278:	6819      	ldreq	r1, [r3, #0]
 800c27a:	685b      	ldreq	r3, [r3, #4]
 800c27c:	6063      	str	r3, [r4, #4]
 800c27e:	bf04      	itt	eq
 800c280:	1949      	addeq	r1, r1, r5
 800c282:	6021      	streq	r1, [r4, #0]
 800c284:	6054      	str	r4, [r2, #4]
 800c286:	e7ca      	b.n	800c21e <_free_r+0x26>
 800c288:	b003      	add	sp, #12
 800c28a:	bd30      	pop	{r4, r5, pc}
 800c28c:	240023d4 	.word	0x240023d4

0800c290 <_Balloc>:
 800c290:	b570      	push	{r4, r5, r6, lr}
 800c292:	69c6      	ldr	r6, [r0, #28]
 800c294:	4604      	mov	r4, r0
 800c296:	460d      	mov	r5, r1
 800c298:	b976      	cbnz	r6, 800c2b8 <_Balloc+0x28>
 800c29a:	2010      	movs	r0, #16
 800c29c:	f7fe fb28 	bl	800a8f0 <malloc>
 800c2a0:	4602      	mov	r2, r0
 800c2a2:	61e0      	str	r0, [r4, #28]
 800c2a4:	b920      	cbnz	r0, 800c2b0 <_Balloc+0x20>
 800c2a6:	4b18      	ldr	r3, [pc, #96]	; (800c308 <_Balloc+0x78>)
 800c2a8:	4818      	ldr	r0, [pc, #96]	; (800c30c <_Balloc+0x7c>)
 800c2aa:	216b      	movs	r1, #107	; 0x6b
 800c2ac:	f000 fd9a 	bl	800cde4 <__assert_func>
 800c2b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c2b4:	6006      	str	r6, [r0, #0]
 800c2b6:	60c6      	str	r6, [r0, #12]
 800c2b8:	69e6      	ldr	r6, [r4, #28]
 800c2ba:	68f3      	ldr	r3, [r6, #12]
 800c2bc:	b183      	cbz	r3, 800c2e0 <_Balloc+0x50>
 800c2be:	69e3      	ldr	r3, [r4, #28]
 800c2c0:	68db      	ldr	r3, [r3, #12]
 800c2c2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c2c6:	b9b8      	cbnz	r0, 800c2f8 <_Balloc+0x68>
 800c2c8:	2101      	movs	r1, #1
 800c2ca:	fa01 f605 	lsl.w	r6, r1, r5
 800c2ce:	1d72      	adds	r2, r6, #5
 800c2d0:	0092      	lsls	r2, r2, #2
 800c2d2:	4620      	mov	r0, r4
 800c2d4:	f000 fda4 	bl	800ce20 <_calloc_r>
 800c2d8:	b160      	cbz	r0, 800c2f4 <_Balloc+0x64>
 800c2da:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c2de:	e00e      	b.n	800c2fe <_Balloc+0x6e>
 800c2e0:	2221      	movs	r2, #33	; 0x21
 800c2e2:	2104      	movs	r1, #4
 800c2e4:	4620      	mov	r0, r4
 800c2e6:	f000 fd9b 	bl	800ce20 <_calloc_r>
 800c2ea:	69e3      	ldr	r3, [r4, #28]
 800c2ec:	60f0      	str	r0, [r6, #12]
 800c2ee:	68db      	ldr	r3, [r3, #12]
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d1e4      	bne.n	800c2be <_Balloc+0x2e>
 800c2f4:	2000      	movs	r0, #0
 800c2f6:	bd70      	pop	{r4, r5, r6, pc}
 800c2f8:	6802      	ldr	r2, [r0, #0]
 800c2fa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c2fe:	2300      	movs	r3, #0
 800c300:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c304:	e7f7      	b.n	800c2f6 <_Balloc+0x66>
 800c306:	bf00      	nop
 800c308:	08036efd 	.word	0x08036efd
 800c30c:	08036f7d 	.word	0x08036f7d

0800c310 <_Bfree>:
 800c310:	b570      	push	{r4, r5, r6, lr}
 800c312:	69c6      	ldr	r6, [r0, #28]
 800c314:	4605      	mov	r5, r0
 800c316:	460c      	mov	r4, r1
 800c318:	b976      	cbnz	r6, 800c338 <_Bfree+0x28>
 800c31a:	2010      	movs	r0, #16
 800c31c:	f7fe fae8 	bl	800a8f0 <malloc>
 800c320:	4602      	mov	r2, r0
 800c322:	61e8      	str	r0, [r5, #28]
 800c324:	b920      	cbnz	r0, 800c330 <_Bfree+0x20>
 800c326:	4b09      	ldr	r3, [pc, #36]	; (800c34c <_Bfree+0x3c>)
 800c328:	4809      	ldr	r0, [pc, #36]	; (800c350 <_Bfree+0x40>)
 800c32a:	218f      	movs	r1, #143	; 0x8f
 800c32c:	f000 fd5a 	bl	800cde4 <__assert_func>
 800c330:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c334:	6006      	str	r6, [r0, #0]
 800c336:	60c6      	str	r6, [r0, #12]
 800c338:	b13c      	cbz	r4, 800c34a <_Bfree+0x3a>
 800c33a:	69eb      	ldr	r3, [r5, #28]
 800c33c:	6862      	ldr	r2, [r4, #4]
 800c33e:	68db      	ldr	r3, [r3, #12]
 800c340:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c344:	6021      	str	r1, [r4, #0]
 800c346:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c34a:	bd70      	pop	{r4, r5, r6, pc}
 800c34c:	08036efd 	.word	0x08036efd
 800c350:	08036f7d 	.word	0x08036f7d

0800c354 <__multadd>:
 800c354:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c358:	690d      	ldr	r5, [r1, #16]
 800c35a:	4607      	mov	r7, r0
 800c35c:	460c      	mov	r4, r1
 800c35e:	461e      	mov	r6, r3
 800c360:	f101 0c14 	add.w	ip, r1, #20
 800c364:	2000      	movs	r0, #0
 800c366:	f8dc 3000 	ldr.w	r3, [ip]
 800c36a:	b299      	uxth	r1, r3
 800c36c:	fb02 6101 	mla	r1, r2, r1, r6
 800c370:	0c1e      	lsrs	r6, r3, #16
 800c372:	0c0b      	lsrs	r3, r1, #16
 800c374:	fb02 3306 	mla	r3, r2, r6, r3
 800c378:	b289      	uxth	r1, r1
 800c37a:	3001      	adds	r0, #1
 800c37c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c380:	4285      	cmp	r5, r0
 800c382:	f84c 1b04 	str.w	r1, [ip], #4
 800c386:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c38a:	dcec      	bgt.n	800c366 <__multadd+0x12>
 800c38c:	b30e      	cbz	r6, 800c3d2 <__multadd+0x7e>
 800c38e:	68a3      	ldr	r3, [r4, #8]
 800c390:	42ab      	cmp	r3, r5
 800c392:	dc19      	bgt.n	800c3c8 <__multadd+0x74>
 800c394:	6861      	ldr	r1, [r4, #4]
 800c396:	4638      	mov	r0, r7
 800c398:	3101      	adds	r1, #1
 800c39a:	f7ff ff79 	bl	800c290 <_Balloc>
 800c39e:	4680      	mov	r8, r0
 800c3a0:	b928      	cbnz	r0, 800c3ae <__multadd+0x5a>
 800c3a2:	4602      	mov	r2, r0
 800c3a4:	4b0c      	ldr	r3, [pc, #48]	; (800c3d8 <__multadd+0x84>)
 800c3a6:	480d      	ldr	r0, [pc, #52]	; (800c3dc <__multadd+0x88>)
 800c3a8:	21ba      	movs	r1, #186	; 0xba
 800c3aa:	f000 fd1b 	bl	800cde4 <__assert_func>
 800c3ae:	6922      	ldr	r2, [r4, #16]
 800c3b0:	3202      	adds	r2, #2
 800c3b2:	f104 010c 	add.w	r1, r4, #12
 800c3b6:	0092      	lsls	r2, r2, #2
 800c3b8:	300c      	adds	r0, #12
 800c3ba:	f000 fd05 	bl	800cdc8 <memcpy>
 800c3be:	4621      	mov	r1, r4
 800c3c0:	4638      	mov	r0, r7
 800c3c2:	f7ff ffa5 	bl	800c310 <_Bfree>
 800c3c6:	4644      	mov	r4, r8
 800c3c8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c3cc:	3501      	adds	r5, #1
 800c3ce:	615e      	str	r6, [r3, #20]
 800c3d0:	6125      	str	r5, [r4, #16]
 800c3d2:	4620      	mov	r0, r4
 800c3d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c3d8:	08036f6c 	.word	0x08036f6c
 800c3dc:	08036f7d 	.word	0x08036f7d

0800c3e0 <__hi0bits>:
 800c3e0:	0c03      	lsrs	r3, r0, #16
 800c3e2:	041b      	lsls	r3, r3, #16
 800c3e4:	b9d3      	cbnz	r3, 800c41c <__hi0bits+0x3c>
 800c3e6:	0400      	lsls	r0, r0, #16
 800c3e8:	2310      	movs	r3, #16
 800c3ea:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c3ee:	bf04      	itt	eq
 800c3f0:	0200      	lsleq	r0, r0, #8
 800c3f2:	3308      	addeq	r3, #8
 800c3f4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c3f8:	bf04      	itt	eq
 800c3fa:	0100      	lsleq	r0, r0, #4
 800c3fc:	3304      	addeq	r3, #4
 800c3fe:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c402:	bf04      	itt	eq
 800c404:	0080      	lsleq	r0, r0, #2
 800c406:	3302      	addeq	r3, #2
 800c408:	2800      	cmp	r0, #0
 800c40a:	db05      	blt.n	800c418 <__hi0bits+0x38>
 800c40c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c410:	f103 0301 	add.w	r3, r3, #1
 800c414:	bf08      	it	eq
 800c416:	2320      	moveq	r3, #32
 800c418:	4618      	mov	r0, r3
 800c41a:	4770      	bx	lr
 800c41c:	2300      	movs	r3, #0
 800c41e:	e7e4      	b.n	800c3ea <__hi0bits+0xa>

0800c420 <__lo0bits>:
 800c420:	6803      	ldr	r3, [r0, #0]
 800c422:	f013 0207 	ands.w	r2, r3, #7
 800c426:	d00c      	beq.n	800c442 <__lo0bits+0x22>
 800c428:	07d9      	lsls	r1, r3, #31
 800c42a:	d422      	bmi.n	800c472 <__lo0bits+0x52>
 800c42c:	079a      	lsls	r2, r3, #30
 800c42e:	bf49      	itett	mi
 800c430:	085b      	lsrmi	r3, r3, #1
 800c432:	089b      	lsrpl	r3, r3, #2
 800c434:	6003      	strmi	r3, [r0, #0]
 800c436:	2201      	movmi	r2, #1
 800c438:	bf5c      	itt	pl
 800c43a:	6003      	strpl	r3, [r0, #0]
 800c43c:	2202      	movpl	r2, #2
 800c43e:	4610      	mov	r0, r2
 800c440:	4770      	bx	lr
 800c442:	b299      	uxth	r1, r3
 800c444:	b909      	cbnz	r1, 800c44a <__lo0bits+0x2a>
 800c446:	0c1b      	lsrs	r3, r3, #16
 800c448:	2210      	movs	r2, #16
 800c44a:	b2d9      	uxtb	r1, r3
 800c44c:	b909      	cbnz	r1, 800c452 <__lo0bits+0x32>
 800c44e:	3208      	adds	r2, #8
 800c450:	0a1b      	lsrs	r3, r3, #8
 800c452:	0719      	lsls	r1, r3, #28
 800c454:	bf04      	itt	eq
 800c456:	091b      	lsreq	r3, r3, #4
 800c458:	3204      	addeq	r2, #4
 800c45a:	0799      	lsls	r1, r3, #30
 800c45c:	bf04      	itt	eq
 800c45e:	089b      	lsreq	r3, r3, #2
 800c460:	3202      	addeq	r2, #2
 800c462:	07d9      	lsls	r1, r3, #31
 800c464:	d403      	bmi.n	800c46e <__lo0bits+0x4e>
 800c466:	085b      	lsrs	r3, r3, #1
 800c468:	f102 0201 	add.w	r2, r2, #1
 800c46c:	d003      	beq.n	800c476 <__lo0bits+0x56>
 800c46e:	6003      	str	r3, [r0, #0]
 800c470:	e7e5      	b.n	800c43e <__lo0bits+0x1e>
 800c472:	2200      	movs	r2, #0
 800c474:	e7e3      	b.n	800c43e <__lo0bits+0x1e>
 800c476:	2220      	movs	r2, #32
 800c478:	e7e1      	b.n	800c43e <__lo0bits+0x1e>
	...

0800c47c <__i2b>:
 800c47c:	b510      	push	{r4, lr}
 800c47e:	460c      	mov	r4, r1
 800c480:	2101      	movs	r1, #1
 800c482:	f7ff ff05 	bl	800c290 <_Balloc>
 800c486:	4602      	mov	r2, r0
 800c488:	b928      	cbnz	r0, 800c496 <__i2b+0x1a>
 800c48a:	4b05      	ldr	r3, [pc, #20]	; (800c4a0 <__i2b+0x24>)
 800c48c:	4805      	ldr	r0, [pc, #20]	; (800c4a4 <__i2b+0x28>)
 800c48e:	f240 1145 	movw	r1, #325	; 0x145
 800c492:	f000 fca7 	bl	800cde4 <__assert_func>
 800c496:	2301      	movs	r3, #1
 800c498:	6144      	str	r4, [r0, #20]
 800c49a:	6103      	str	r3, [r0, #16]
 800c49c:	bd10      	pop	{r4, pc}
 800c49e:	bf00      	nop
 800c4a0:	08036f6c 	.word	0x08036f6c
 800c4a4:	08036f7d 	.word	0x08036f7d

0800c4a8 <__multiply>:
 800c4a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4ac:	4691      	mov	r9, r2
 800c4ae:	690a      	ldr	r2, [r1, #16]
 800c4b0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c4b4:	429a      	cmp	r2, r3
 800c4b6:	bfb8      	it	lt
 800c4b8:	460b      	movlt	r3, r1
 800c4ba:	460c      	mov	r4, r1
 800c4bc:	bfbc      	itt	lt
 800c4be:	464c      	movlt	r4, r9
 800c4c0:	4699      	movlt	r9, r3
 800c4c2:	6927      	ldr	r7, [r4, #16]
 800c4c4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c4c8:	68a3      	ldr	r3, [r4, #8]
 800c4ca:	6861      	ldr	r1, [r4, #4]
 800c4cc:	eb07 060a 	add.w	r6, r7, sl
 800c4d0:	42b3      	cmp	r3, r6
 800c4d2:	b085      	sub	sp, #20
 800c4d4:	bfb8      	it	lt
 800c4d6:	3101      	addlt	r1, #1
 800c4d8:	f7ff feda 	bl	800c290 <_Balloc>
 800c4dc:	b930      	cbnz	r0, 800c4ec <__multiply+0x44>
 800c4de:	4602      	mov	r2, r0
 800c4e0:	4b44      	ldr	r3, [pc, #272]	; (800c5f4 <__multiply+0x14c>)
 800c4e2:	4845      	ldr	r0, [pc, #276]	; (800c5f8 <__multiply+0x150>)
 800c4e4:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800c4e8:	f000 fc7c 	bl	800cde4 <__assert_func>
 800c4ec:	f100 0514 	add.w	r5, r0, #20
 800c4f0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c4f4:	462b      	mov	r3, r5
 800c4f6:	2200      	movs	r2, #0
 800c4f8:	4543      	cmp	r3, r8
 800c4fa:	d321      	bcc.n	800c540 <__multiply+0x98>
 800c4fc:	f104 0314 	add.w	r3, r4, #20
 800c500:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c504:	f109 0314 	add.w	r3, r9, #20
 800c508:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c50c:	9202      	str	r2, [sp, #8]
 800c50e:	1b3a      	subs	r2, r7, r4
 800c510:	3a15      	subs	r2, #21
 800c512:	f022 0203 	bic.w	r2, r2, #3
 800c516:	3204      	adds	r2, #4
 800c518:	f104 0115 	add.w	r1, r4, #21
 800c51c:	428f      	cmp	r7, r1
 800c51e:	bf38      	it	cc
 800c520:	2204      	movcc	r2, #4
 800c522:	9201      	str	r2, [sp, #4]
 800c524:	9a02      	ldr	r2, [sp, #8]
 800c526:	9303      	str	r3, [sp, #12]
 800c528:	429a      	cmp	r2, r3
 800c52a:	d80c      	bhi.n	800c546 <__multiply+0x9e>
 800c52c:	2e00      	cmp	r6, #0
 800c52e:	dd03      	ble.n	800c538 <__multiply+0x90>
 800c530:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c534:	2b00      	cmp	r3, #0
 800c536:	d05b      	beq.n	800c5f0 <__multiply+0x148>
 800c538:	6106      	str	r6, [r0, #16]
 800c53a:	b005      	add	sp, #20
 800c53c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c540:	f843 2b04 	str.w	r2, [r3], #4
 800c544:	e7d8      	b.n	800c4f8 <__multiply+0x50>
 800c546:	f8b3 a000 	ldrh.w	sl, [r3]
 800c54a:	f1ba 0f00 	cmp.w	sl, #0
 800c54e:	d024      	beq.n	800c59a <__multiply+0xf2>
 800c550:	f104 0e14 	add.w	lr, r4, #20
 800c554:	46a9      	mov	r9, r5
 800c556:	f04f 0c00 	mov.w	ip, #0
 800c55a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c55e:	f8d9 1000 	ldr.w	r1, [r9]
 800c562:	fa1f fb82 	uxth.w	fp, r2
 800c566:	b289      	uxth	r1, r1
 800c568:	fb0a 110b 	mla	r1, sl, fp, r1
 800c56c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c570:	f8d9 2000 	ldr.w	r2, [r9]
 800c574:	4461      	add	r1, ip
 800c576:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c57a:	fb0a c20b 	mla	r2, sl, fp, ip
 800c57e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c582:	b289      	uxth	r1, r1
 800c584:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c588:	4577      	cmp	r7, lr
 800c58a:	f849 1b04 	str.w	r1, [r9], #4
 800c58e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c592:	d8e2      	bhi.n	800c55a <__multiply+0xb2>
 800c594:	9a01      	ldr	r2, [sp, #4]
 800c596:	f845 c002 	str.w	ip, [r5, r2]
 800c59a:	9a03      	ldr	r2, [sp, #12]
 800c59c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c5a0:	3304      	adds	r3, #4
 800c5a2:	f1b9 0f00 	cmp.w	r9, #0
 800c5a6:	d021      	beq.n	800c5ec <__multiply+0x144>
 800c5a8:	6829      	ldr	r1, [r5, #0]
 800c5aa:	f104 0c14 	add.w	ip, r4, #20
 800c5ae:	46ae      	mov	lr, r5
 800c5b0:	f04f 0a00 	mov.w	sl, #0
 800c5b4:	f8bc b000 	ldrh.w	fp, [ip]
 800c5b8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c5bc:	fb09 220b 	mla	r2, r9, fp, r2
 800c5c0:	4452      	add	r2, sl
 800c5c2:	b289      	uxth	r1, r1
 800c5c4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c5c8:	f84e 1b04 	str.w	r1, [lr], #4
 800c5cc:	f85c 1b04 	ldr.w	r1, [ip], #4
 800c5d0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c5d4:	f8be 1000 	ldrh.w	r1, [lr]
 800c5d8:	fb09 110a 	mla	r1, r9, sl, r1
 800c5dc:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800c5e0:	4567      	cmp	r7, ip
 800c5e2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c5e6:	d8e5      	bhi.n	800c5b4 <__multiply+0x10c>
 800c5e8:	9a01      	ldr	r2, [sp, #4]
 800c5ea:	50a9      	str	r1, [r5, r2]
 800c5ec:	3504      	adds	r5, #4
 800c5ee:	e799      	b.n	800c524 <__multiply+0x7c>
 800c5f0:	3e01      	subs	r6, #1
 800c5f2:	e79b      	b.n	800c52c <__multiply+0x84>
 800c5f4:	08036f6c 	.word	0x08036f6c
 800c5f8:	08036f7d 	.word	0x08036f7d

0800c5fc <__pow5mult>:
 800c5fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c600:	4615      	mov	r5, r2
 800c602:	f012 0203 	ands.w	r2, r2, #3
 800c606:	4606      	mov	r6, r0
 800c608:	460f      	mov	r7, r1
 800c60a:	d007      	beq.n	800c61c <__pow5mult+0x20>
 800c60c:	4c25      	ldr	r4, [pc, #148]	; (800c6a4 <__pow5mult+0xa8>)
 800c60e:	3a01      	subs	r2, #1
 800c610:	2300      	movs	r3, #0
 800c612:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c616:	f7ff fe9d 	bl	800c354 <__multadd>
 800c61a:	4607      	mov	r7, r0
 800c61c:	10ad      	asrs	r5, r5, #2
 800c61e:	d03d      	beq.n	800c69c <__pow5mult+0xa0>
 800c620:	69f4      	ldr	r4, [r6, #28]
 800c622:	b97c      	cbnz	r4, 800c644 <__pow5mult+0x48>
 800c624:	2010      	movs	r0, #16
 800c626:	f7fe f963 	bl	800a8f0 <malloc>
 800c62a:	4602      	mov	r2, r0
 800c62c:	61f0      	str	r0, [r6, #28]
 800c62e:	b928      	cbnz	r0, 800c63c <__pow5mult+0x40>
 800c630:	4b1d      	ldr	r3, [pc, #116]	; (800c6a8 <__pow5mult+0xac>)
 800c632:	481e      	ldr	r0, [pc, #120]	; (800c6ac <__pow5mult+0xb0>)
 800c634:	f240 11b3 	movw	r1, #435	; 0x1b3
 800c638:	f000 fbd4 	bl	800cde4 <__assert_func>
 800c63c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c640:	6004      	str	r4, [r0, #0]
 800c642:	60c4      	str	r4, [r0, #12]
 800c644:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800c648:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c64c:	b94c      	cbnz	r4, 800c662 <__pow5mult+0x66>
 800c64e:	f240 2171 	movw	r1, #625	; 0x271
 800c652:	4630      	mov	r0, r6
 800c654:	f7ff ff12 	bl	800c47c <__i2b>
 800c658:	2300      	movs	r3, #0
 800c65a:	f8c8 0008 	str.w	r0, [r8, #8]
 800c65e:	4604      	mov	r4, r0
 800c660:	6003      	str	r3, [r0, #0]
 800c662:	f04f 0900 	mov.w	r9, #0
 800c666:	07eb      	lsls	r3, r5, #31
 800c668:	d50a      	bpl.n	800c680 <__pow5mult+0x84>
 800c66a:	4639      	mov	r1, r7
 800c66c:	4622      	mov	r2, r4
 800c66e:	4630      	mov	r0, r6
 800c670:	f7ff ff1a 	bl	800c4a8 <__multiply>
 800c674:	4639      	mov	r1, r7
 800c676:	4680      	mov	r8, r0
 800c678:	4630      	mov	r0, r6
 800c67a:	f7ff fe49 	bl	800c310 <_Bfree>
 800c67e:	4647      	mov	r7, r8
 800c680:	106d      	asrs	r5, r5, #1
 800c682:	d00b      	beq.n	800c69c <__pow5mult+0xa0>
 800c684:	6820      	ldr	r0, [r4, #0]
 800c686:	b938      	cbnz	r0, 800c698 <__pow5mult+0x9c>
 800c688:	4622      	mov	r2, r4
 800c68a:	4621      	mov	r1, r4
 800c68c:	4630      	mov	r0, r6
 800c68e:	f7ff ff0b 	bl	800c4a8 <__multiply>
 800c692:	6020      	str	r0, [r4, #0]
 800c694:	f8c0 9000 	str.w	r9, [r0]
 800c698:	4604      	mov	r4, r0
 800c69a:	e7e4      	b.n	800c666 <__pow5mult+0x6a>
 800c69c:	4638      	mov	r0, r7
 800c69e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c6a2:	bf00      	nop
 800c6a4:	080370c8 	.word	0x080370c8
 800c6a8:	08036efd 	.word	0x08036efd
 800c6ac:	08036f7d 	.word	0x08036f7d

0800c6b0 <__lshift>:
 800c6b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c6b4:	460c      	mov	r4, r1
 800c6b6:	6849      	ldr	r1, [r1, #4]
 800c6b8:	6923      	ldr	r3, [r4, #16]
 800c6ba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c6be:	68a3      	ldr	r3, [r4, #8]
 800c6c0:	4607      	mov	r7, r0
 800c6c2:	4691      	mov	r9, r2
 800c6c4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c6c8:	f108 0601 	add.w	r6, r8, #1
 800c6cc:	42b3      	cmp	r3, r6
 800c6ce:	db0b      	blt.n	800c6e8 <__lshift+0x38>
 800c6d0:	4638      	mov	r0, r7
 800c6d2:	f7ff fddd 	bl	800c290 <_Balloc>
 800c6d6:	4605      	mov	r5, r0
 800c6d8:	b948      	cbnz	r0, 800c6ee <__lshift+0x3e>
 800c6da:	4602      	mov	r2, r0
 800c6dc:	4b28      	ldr	r3, [pc, #160]	; (800c780 <__lshift+0xd0>)
 800c6de:	4829      	ldr	r0, [pc, #164]	; (800c784 <__lshift+0xd4>)
 800c6e0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800c6e4:	f000 fb7e 	bl	800cde4 <__assert_func>
 800c6e8:	3101      	adds	r1, #1
 800c6ea:	005b      	lsls	r3, r3, #1
 800c6ec:	e7ee      	b.n	800c6cc <__lshift+0x1c>
 800c6ee:	2300      	movs	r3, #0
 800c6f0:	f100 0114 	add.w	r1, r0, #20
 800c6f4:	f100 0210 	add.w	r2, r0, #16
 800c6f8:	4618      	mov	r0, r3
 800c6fa:	4553      	cmp	r3, sl
 800c6fc:	db33      	blt.n	800c766 <__lshift+0xb6>
 800c6fe:	6920      	ldr	r0, [r4, #16]
 800c700:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c704:	f104 0314 	add.w	r3, r4, #20
 800c708:	f019 091f 	ands.w	r9, r9, #31
 800c70c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c710:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c714:	d02b      	beq.n	800c76e <__lshift+0xbe>
 800c716:	f1c9 0e20 	rsb	lr, r9, #32
 800c71a:	468a      	mov	sl, r1
 800c71c:	2200      	movs	r2, #0
 800c71e:	6818      	ldr	r0, [r3, #0]
 800c720:	fa00 f009 	lsl.w	r0, r0, r9
 800c724:	4310      	orrs	r0, r2
 800c726:	f84a 0b04 	str.w	r0, [sl], #4
 800c72a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c72e:	459c      	cmp	ip, r3
 800c730:	fa22 f20e 	lsr.w	r2, r2, lr
 800c734:	d8f3      	bhi.n	800c71e <__lshift+0x6e>
 800c736:	ebac 0304 	sub.w	r3, ip, r4
 800c73a:	3b15      	subs	r3, #21
 800c73c:	f023 0303 	bic.w	r3, r3, #3
 800c740:	3304      	adds	r3, #4
 800c742:	f104 0015 	add.w	r0, r4, #21
 800c746:	4584      	cmp	ip, r0
 800c748:	bf38      	it	cc
 800c74a:	2304      	movcc	r3, #4
 800c74c:	50ca      	str	r2, [r1, r3]
 800c74e:	b10a      	cbz	r2, 800c754 <__lshift+0xa4>
 800c750:	f108 0602 	add.w	r6, r8, #2
 800c754:	3e01      	subs	r6, #1
 800c756:	4638      	mov	r0, r7
 800c758:	612e      	str	r6, [r5, #16]
 800c75a:	4621      	mov	r1, r4
 800c75c:	f7ff fdd8 	bl	800c310 <_Bfree>
 800c760:	4628      	mov	r0, r5
 800c762:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c766:	f842 0f04 	str.w	r0, [r2, #4]!
 800c76a:	3301      	adds	r3, #1
 800c76c:	e7c5      	b.n	800c6fa <__lshift+0x4a>
 800c76e:	3904      	subs	r1, #4
 800c770:	f853 2b04 	ldr.w	r2, [r3], #4
 800c774:	f841 2f04 	str.w	r2, [r1, #4]!
 800c778:	459c      	cmp	ip, r3
 800c77a:	d8f9      	bhi.n	800c770 <__lshift+0xc0>
 800c77c:	e7ea      	b.n	800c754 <__lshift+0xa4>
 800c77e:	bf00      	nop
 800c780:	08036f6c 	.word	0x08036f6c
 800c784:	08036f7d 	.word	0x08036f7d

0800c788 <__mcmp>:
 800c788:	b530      	push	{r4, r5, lr}
 800c78a:	6902      	ldr	r2, [r0, #16]
 800c78c:	690c      	ldr	r4, [r1, #16]
 800c78e:	1b12      	subs	r2, r2, r4
 800c790:	d10e      	bne.n	800c7b0 <__mcmp+0x28>
 800c792:	f100 0314 	add.w	r3, r0, #20
 800c796:	3114      	adds	r1, #20
 800c798:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c79c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c7a0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c7a4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c7a8:	42a5      	cmp	r5, r4
 800c7aa:	d003      	beq.n	800c7b4 <__mcmp+0x2c>
 800c7ac:	d305      	bcc.n	800c7ba <__mcmp+0x32>
 800c7ae:	2201      	movs	r2, #1
 800c7b0:	4610      	mov	r0, r2
 800c7b2:	bd30      	pop	{r4, r5, pc}
 800c7b4:	4283      	cmp	r3, r0
 800c7b6:	d3f3      	bcc.n	800c7a0 <__mcmp+0x18>
 800c7b8:	e7fa      	b.n	800c7b0 <__mcmp+0x28>
 800c7ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c7be:	e7f7      	b.n	800c7b0 <__mcmp+0x28>

0800c7c0 <__mdiff>:
 800c7c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7c4:	460c      	mov	r4, r1
 800c7c6:	4606      	mov	r6, r0
 800c7c8:	4611      	mov	r1, r2
 800c7ca:	4620      	mov	r0, r4
 800c7cc:	4690      	mov	r8, r2
 800c7ce:	f7ff ffdb 	bl	800c788 <__mcmp>
 800c7d2:	1e05      	subs	r5, r0, #0
 800c7d4:	d110      	bne.n	800c7f8 <__mdiff+0x38>
 800c7d6:	4629      	mov	r1, r5
 800c7d8:	4630      	mov	r0, r6
 800c7da:	f7ff fd59 	bl	800c290 <_Balloc>
 800c7de:	b930      	cbnz	r0, 800c7ee <__mdiff+0x2e>
 800c7e0:	4b3a      	ldr	r3, [pc, #232]	; (800c8cc <__mdiff+0x10c>)
 800c7e2:	4602      	mov	r2, r0
 800c7e4:	f240 2137 	movw	r1, #567	; 0x237
 800c7e8:	4839      	ldr	r0, [pc, #228]	; (800c8d0 <__mdiff+0x110>)
 800c7ea:	f000 fafb 	bl	800cde4 <__assert_func>
 800c7ee:	2301      	movs	r3, #1
 800c7f0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c7f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7f8:	bfa4      	itt	ge
 800c7fa:	4643      	movge	r3, r8
 800c7fc:	46a0      	movge	r8, r4
 800c7fe:	4630      	mov	r0, r6
 800c800:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c804:	bfa6      	itte	ge
 800c806:	461c      	movge	r4, r3
 800c808:	2500      	movge	r5, #0
 800c80a:	2501      	movlt	r5, #1
 800c80c:	f7ff fd40 	bl	800c290 <_Balloc>
 800c810:	b920      	cbnz	r0, 800c81c <__mdiff+0x5c>
 800c812:	4b2e      	ldr	r3, [pc, #184]	; (800c8cc <__mdiff+0x10c>)
 800c814:	4602      	mov	r2, r0
 800c816:	f240 2145 	movw	r1, #581	; 0x245
 800c81a:	e7e5      	b.n	800c7e8 <__mdiff+0x28>
 800c81c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c820:	6926      	ldr	r6, [r4, #16]
 800c822:	60c5      	str	r5, [r0, #12]
 800c824:	f104 0914 	add.w	r9, r4, #20
 800c828:	f108 0514 	add.w	r5, r8, #20
 800c82c:	f100 0e14 	add.w	lr, r0, #20
 800c830:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c834:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c838:	f108 0210 	add.w	r2, r8, #16
 800c83c:	46f2      	mov	sl, lr
 800c83e:	2100      	movs	r1, #0
 800c840:	f859 3b04 	ldr.w	r3, [r9], #4
 800c844:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c848:	fa11 f88b 	uxtah	r8, r1, fp
 800c84c:	b299      	uxth	r1, r3
 800c84e:	0c1b      	lsrs	r3, r3, #16
 800c850:	eba8 0801 	sub.w	r8, r8, r1
 800c854:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c858:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c85c:	fa1f f888 	uxth.w	r8, r8
 800c860:	1419      	asrs	r1, r3, #16
 800c862:	454e      	cmp	r6, r9
 800c864:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c868:	f84a 3b04 	str.w	r3, [sl], #4
 800c86c:	d8e8      	bhi.n	800c840 <__mdiff+0x80>
 800c86e:	1b33      	subs	r3, r6, r4
 800c870:	3b15      	subs	r3, #21
 800c872:	f023 0303 	bic.w	r3, r3, #3
 800c876:	3304      	adds	r3, #4
 800c878:	3415      	adds	r4, #21
 800c87a:	42a6      	cmp	r6, r4
 800c87c:	bf38      	it	cc
 800c87e:	2304      	movcc	r3, #4
 800c880:	441d      	add	r5, r3
 800c882:	4473      	add	r3, lr
 800c884:	469e      	mov	lr, r3
 800c886:	462e      	mov	r6, r5
 800c888:	4566      	cmp	r6, ip
 800c88a:	d30e      	bcc.n	800c8aa <__mdiff+0xea>
 800c88c:	f10c 0203 	add.w	r2, ip, #3
 800c890:	1b52      	subs	r2, r2, r5
 800c892:	f022 0203 	bic.w	r2, r2, #3
 800c896:	3d03      	subs	r5, #3
 800c898:	45ac      	cmp	ip, r5
 800c89a:	bf38      	it	cc
 800c89c:	2200      	movcc	r2, #0
 800c89e:	4413      	add	r3, r2
 800c8a0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800c8a4:	b17a      	cbz	r2, 800c8c6 <__mdiff+0x106>
 800c8a6:	6107      	str	r7, [r0, #16]
 800c8a8:	e7a4      	b.n	800c7f4 <__mdiff+0x34>
 800c8aa:	f856 8b04 	ldr.w	r8, [r6], #4
 800c8ae:	fa11 f288 	uxtah	r2, r1, r8
 800c8b2:	1414      	asrs	r4, r2, #16
 800c8b4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c8b8:	b292      	uxth	r2, r2
 800c8ba:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c8be:	f84e 2b04 	str.w	r2, [lr], #4
 800c8c2:	1421      	asrs	r1, r4, #16
 800c8c4:	e7e0      	b.n	800c888 <__mdiff+0xc8>
 800c8c6:	3f01      	subs	r7, #1
 800c8c8:	e7ea      	b.n	800c8a0 <__mdiff+0xe0>
 800c8ca:	bf00      	nop
 800c8cc:	08036f6c 	.word	0x08036f6c
 800c8d0:	08036f7d 	.word	0x08036f7d

0800c8d4 <__d2b>:
 800c8d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c8d8:	460f      	mov	r7, r1
 800c8da:	2101      	movs	r1, #1
 800c8dc:	ec59 8b10 	vmov	r8, r9, d0
 800c8e0:	4616      	mov	r6, r2
 800c8e2:	f7ff fcd5 	bl	800c290 <_Balloc>
 800c8e6:	4604      	mov	r4, r0
 800c8e8:	b930      	cbnz	r0, 800c8f8 <__d2b+0x24>
 800c8ea:	4602      	mov	r2, r0
 800c8ec:	4b24      	ldr	r3, [pc, #144]	; (800c980 <__d2b+0xac>)
 800c8ee:	4825      	ldr	r0, [pc, #148]	; (800c984 <__d2b+0xb0>)
 800c8f0:	f240 310f 	movw	r1, #783	; 0x30f
 800c8f4:	f000 fa76 	bl	800cde4 <__assert_func>
 800c8f8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c8fc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c900:	bb2d      	cbnz	r5, 800c94e <__d2b+0x7a>
 800c902:	9301      	str	r3, [sp, #4]
 800c904:	f1b8 0300 	subs.w	r3, r8, #0
 800c908:	d026      	beq.n	800c958 <__d2b+0x84>
 800c90a:	4668      	mov	r0, sp
 800c90c:	9300      	str	r3, [sp, #0]
 800c90e:	f7ff fd87 	bl	800c420 <__lo0bits>
 800c912:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c916:	b1e8      	cbz	r0, 800c954 <__d2b+0x80>
 800c918:	f1c0 0320 	rsb	r3, r0, #32
 800c91c:	fa02 f303 	lsl.w	r3, r2, r3
 800c920:	430b      	orrs	r3, r1
 800c922:	40c2      	lsrs	r2, r0
 800c924:	6163      	str	r3, [r4, #20]
 800c926:	9201      	str	r2, [sp, #4]
 800c928:	9b01      	ldr	r3, [sp, #4]
 800c92a:	61a3      	str	r3, [r4, #24]
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	bf14      	ite	ne
 800c930:	2202      	movne	r2, #2
 800c932:	2201      	moveq	r2, #1
 800c934:	6122      	str	r2, [r4, #16]
 800c936:	b1bd      	cbz	r5, 800c968 <__d2b+0x94>
 800c938:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c93c:	4405      	add	r5, r0
 800c93e:	603d      	str	r5, [r7, #0]
 800c940:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c944:	6030      	str	r0, [r6, #0]
 800c946:	4620      	mov	r0, r4
 800c948:	b003      	add	sp, #12
 800c94a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c94e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c952:	e7d6      	b.n	800c902 <__d2b+0x2e>
 800c954:	6161      	str	r1, [r4, #20]
 800c956:	e7e7      	b.n	800c928 <__d2b+0x54>
 800c958:	a801      	add	r0, sp, #4
 800c95a:	f7ff fd61 	bl	800c420 <__lo0bits>
 800c95e:	9b01      	ldr	r3, [sp, #4]
 800c960:	6163      	str	r3, [r4, #20]
 800c962:	3020      	adds	r0, #32
 800c964:	2201      	movs	r2, #1
 800c966:	e7e5      	b.n	800c934 <__d2b+0x60>
 800c968:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c96c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c970:	6038      	str	r0, [r7, #0]
 800c972:	6918      	ldr	r0, [r3, #16]
 800c974:	f7ff fd34 	bl	800c3e0 <__hi0bits>
 800c978:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c97c:	e7e2      	b.n	800c944 <__d2b+0x70>
 800c97e:	bf00      	nop
 800c980:	08036f6c 	.word	0x08036f6c
 800c984:	08036f7d 	.word	0x08036f7d

0800c988 <__ssputs_r>:
 800c988:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c98c:	688e      	ldr	r6, [r1, #8]
 800c98e:	461f      	mov	r7, r3
 800c990:	42be      	cmp	r6, r7
 800c992:	680b      	ldr	r3, [r1, #0]
 800c994:	4682      	mov	sl, r0
 800c996:	460c      	mov	r4, r1
 800c998:	4690      	mov	r8, r2
 800c99a:	d82c      	bhi.n	800c9f6 <__ssputs_r+0x6e>
 800c99c:	898a      	ldrh	r2, [r1, #12]
 800c99e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c9a2:	d026      	beq.n	800c9f2 <__ssputs_r+0x6a>
 800c9a4:	6965      	ldr	r5, [r4, #20]
 800c9a6:	6909      	ldr	r1, [r1, #16]
 800c9a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c9ac:	eba3 0901 	sub.w	r9, r3, r1
 800c9b0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c9b4:	1c7b      	adds	r3, r7, #1
 800c9b6:	444b      	add	r3, r9
 800c9b8:	106d      	asrs	r5, r5, #1
 800c9ba:	429d      	cmp	r5, r3
 800c9bc:	bf38      	it	cc
 800c9be:	461d      	movcc	r5, r3
 800c9c0:	0553      	lsls	r3, r2, #21
 800c9c2:	d527      	bpl.n	800ca14 <__ssputs_r+0x8c>
 800c9c4:	4629      	mov	r1, r5
 800c9c6:	f7fd ffbb 	bl	800a940 <_malloc_r>
 800c9ca:	4606      	mov	r6, r0
 800c9cc:	b360      	cbz	r0, 800ca28 <__ssputs_r+0xa0>
 800c9ce:	6921      	ldr	r1, [r4, #16]
 800c9d0:	464a      	mov	r2, r9
 800c9d2:	f000 f9f9 	bl	800cdc8 <memcpy>
 800c9d6:	89a3      	ldrh	r3, [r4, #12]
 800c9d8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c9dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c9e0:	81a3      	strh	r3, [r4, #12]
 800c9e2:	6126      	str	r6, [r4, #16]
 800c9e4:	6165      	str	r5, [r4, #20]
 800c9e6:	444e      	add	r6, r9
 800c9e8:	eba5 0509 	sub.w	r5, r5, r9
 800c9ec:	6026      	str	r6, [r4, #0]
 800c9ee:	60a5      	str	r5, [r4, #8]
 800c9f0:	463e      	mov	r6, r7
 800c9f2:	42be      	cmp	r6, r7
 800c9f4:	d900      	bls.n	800c9f8 <__ssputs_r+0x70>
 800c9f6:	463e      	mov	r6, r7
 800c9f8:	6820      	ldr	r0, [r4, #0]
 800c9fa:	4632      	mov	r2, r6
 800c9fc:	4641      	mov	r1, r8
 800c9fe:	f000 f9c9 	bl	800cd94 <memmove>
 800ca02:	68a3      	ldr	r3, [r4, #8]
 800ca04:	1b9b      	subs	r3, r3, r6
 800ca06:	60a3      	str	r3, [r4, #8]
 800ca08:	6823      	ldr	r3, [r4, #0]
 800ca0a:	4433      	add	r3, r6
 800ca0c:	6023      	str	r3, [r4, #0]
 800ca0e:	2000      	movs	r0, #0
 800ca10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca14:	462a      	mov	r2, r5
 800ca16:	f000 fa2b 	bl	800ce70 <_realloc_r>
 800ca1a:	4606      	mov	r6, r0
 800ca1c:	2800      	cmp	r0, #0
 800ca1e:	d1e0      	bne.n	800c9e2 <__ssputs_r+0x5a>
 800ca20:	6921      	ldr	r1, [r4, #16]
 800ca22:	4650      	mov	r0, sl
 800ca24:	f7ff fbe8 	bl	800c1f8 <_free_r>
 800ca28:	230c      	movs	r3, #12
 800ca2a:	f8ca 3000 	str.w	r3, [sl]
 800ca2e:	89a3      	ldrh	r3, [r4, #12]
 800ca30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ca34:	81a3      	strh	r3, [r4, #12]
 800ca36:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ca3a:	e7e9      	b.n	800ca10 <__ssputs_r+0x88>

0800ca3c <_svfiprintf_r>:
 800ca3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca40:	4698      	mov	r8, r3
 800ca42:	898b      	ldrh	r3, [r1, #12]
 800ca44:	061b      	lsls	r3, r3, #24
 800ca46:	b09d      	sub	sp, #116	; 0x74
 800ca48:	4607      	mov	r7, r0
 800ca4a:	460d      	mov	r5, r1
 800ca4c:	4614      	mov	r4, r2
 800ca4e:	d50e      	bpl.n	800ca6e <_svfiprintf_r+0x32>
 800ca50:	690b      	ldr	r3, [r1, #16]
 800ca52:	b963      	cbnz	r3, 800ca6e <_svfiprintf_r+0x32>
 800ca54:	2140      	movs	r1, #64	; 0x40
 800ca56:	f7fd ff73 	bl	800a940 <_malloc_r>
 800ca5a:	6028      	str	r0, [r5, #0]
 800ca5c:	6128      	str	r0, [r5, #16]
 800ca5e:	b920      	cbnz	r0, 800ca6a <_svfiprintf_r+0x2e>
 800ca60:	230c      	movs	r3, #12
 800ca62:	603b      	str	r3, [r7, #0]
 800ca64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ca68:	e0d0      	b.n	800cc0c <_svfiprintf_r+0x1d0>
 800ca6a:	2340      	movs	r3, #64	; 0x40
 800ca6c:	616b      	str	r3, [r5, #20]
 800ca6e:	2300      	movs	r3, #0
 800ca70:	9309      	str	r3, [sp, #36]	; 0x24
 800ca72:	2320      	movs	r3, #32
 800ca74:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ca78:	f8cd 800c 	str.w	r8, [sp, #12]
 800ca7c:	2330      	movs	r3, #48	; 0x30
 800ca7e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800cc24 <_svfiprintf_r+0x1e8>
 800ca82:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ca86:	f04f 0901 	mov.w	r9, #1
 800ca8a:	4623      	mov	r3, r4
 800ca8c:	469a      	mov	sl, r3
 800ca8e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ca92:	b10a      	cbz	r2, 800ca98 <_svfiprintf_r+0x5c>
 800ca94:	2a25      	cmp	r2, #37	; 0x25
 800ca96:	d1f9      	bne.n	800ca8c <_svfiprintf_r+0x50>
 800ca98:	ebba 0b04 	subs.w	fp, sl, r4
 800ca9c:	d00b      	beq.n	800cab6 <_svfiprintf_r+0x7a>
 800ca9e:	465b      	mov	r3, fp
 800caa0:	4622      	mov	r2, r4
 800caa2:	4629      	mov	r1, r5
 800caa4:	4638      	mov	r0, r7
 800caa6:	f7ff ff6f 	bl	800c988 <__ssputs_r>
 800caaa:	3001      	adds	r0, #1
 800caac:	f000 80a9 	beq.w	800cc02 <_svfiprintf_r+0x1c6>
 800cab0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cab2:	445a      	add	r2, fp
 800cab4:	9209      	str	r2, [sp, #36]	; 0x24
 800cab6:	f89a 3000 	ldrb.w	r3, [sl]
 800caba:	2b00      	cmp	r3, #0
 800cabc:	f000 80a1 	beq.w	800cc02 <_svfiprintf_r+0x1c6>
 800cac0:	2300      	movs	r3, #0
 800cac2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cac6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800caca:	f10a 0a01 	add.w	sl, sl, #1
 800cace:	9304      	str	r3, [sp, #16]
 800cad0:	9307      	str	r3, [sp, #28]
 800cad2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cad6:	931a      	str	r3, [sp, #104]	; 0x68
 800cad8:	4654      	mov	r4, sl
 800cada:	2205      	movs	r2, #5
 800cadc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cae0:	4850      	ldr	r0, [pc, #320]	; (800cc24 <_svfiprintf_r+0x1e8>)
 800cae2:	f7f3 fc15 	bl	8000310 <memchr>
 800cae6:	9a04      	ldr	r2, [sp, #16]
 800cae8:	b9d8      	cbnz	r0, 800cb22 <_svfiprintf_r+0xe6>
 800caea:	06d0      	lsls	r0, r2, #27
 800caec:	bf44      	itt	mi
 800caee:	2320      	movmi	r3, #32
 800caf0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800caf4:	0711      	lsls	r1, r2, #28
 800caf6:	bf44      	itt	mi
 800caf8:	232b      	movmi	r3, #43	; 0x2b
 800cafa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cafe:	f89a 3000 	ldrb.w	r3, [sl]
 800cb02:	2b2a      	cmp	r3, #42	; 0x2a
 800cb04:	d015      	beq.n	800cb32 <_svfiprintf_r+0xf6>
 800cb06:	9a07      	ldr	r2, [sp, #28]
 800cb08:	4654      	mov	r4, sl
 800cb0a:	2000      	movs	r0, #0
 800cb0c:	f04f 0c0a 	mov.w	ip, #10
 800cb10:	4621      	mov	r1, r4
 800cb12:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cb16:	3b30      	subs	r3, #48	; 0x30
 800cb18:	2b09      	cmp	r3, #9
 800cb1a:	d94d      	bls.n	800cbb8 <_svfiprintf_r+0x17c>
 800cb1c:	b1b0      	cbz	r0, 800cb4c <_svfiprintf_r+0x110>
 800cb1e:	9207      	str	r2, [sp, #28]
 800cb20:	e014      	b.n	800cb4c <_svfiprintf_r+0x110>
 800cb22:	eba0 0308 	sub.w	r3, r0, r8
 800cb26:	fa09 f303 	lsl.w	r3, r9, r3
 800cb2a:	4313      	orrs	r3, r2
 800cb2c:	9304      	str	r3, [sp, #16]
 800cb2e:	46a2      	mov	sl, r4
 800cb30:	e7d2      	b.n	800cad8 <_svfiprintf_r+0x9c>
 800cb32:	9b03      	ldr	r3, [sp, #12]
 800cb34:	1d19      	adds	r1, r3, #4
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	9103      	str	r1, [sp, #12]
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	bfbb      	ittet	lt
 800cb3e:	425b      	neglt	r3, r3
 800cb40:	f042 0202 	orrlt.w	r2, r2, #2
 800cb44:	9307      	strge	r3, [sp, #28]
 800cb46:	9307      	strlt	r3, [sp, #28]
 800cb48:	bfb8      	it	lt
 800cb4a:	9204      	strlt	r2, [sp, #16]
 800cb4c:	7823      	ldrb	r3, [r4, #0]
 800cb4e:	2b2e      	cmp	r3, #46	; 0x2e
 800cb50:	d10c      	bne.n	800cb6c <_svfiprintf_r+0x130>
 800cb52:	7863      	ldrb	r3, [r4, #1]
 800cb54:	2b2a      	cmp	r3, #42	; 0x2a
 800cb56:	d134      	bne.n	800cbc2 <_svfiprintf_r+0x186>
 800cb58:	9b03      	ldr	r3, [sp, #12]
 800cb5a:	1d1a      	adds	r2, r3, #4
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	9203      	str	r2, [sp, #12]
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	bfb8      	it	lt
 800cb64:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800cb68:	3402      	adds	r4, #2
 800cb6a:	9305      	str	r3, [sp, #20]
 800cb6c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800cc34 <_svfiprintf_r+0x1f8>
 800cb70:	7821      	ldrb	r1, [r4, #0]
 800cb72:	2203      	movs	r2, #3
 800cb74:	4650      	mov	r0, sl
 800cb76:	f7f3 fbcb 	bl	8000310 <memchr>
 800cb7a:	b138      	cbz	r0, 800cb8c <_svfiprintf_r+0x150>
 800cb7c:	9b04      	ldr	r3, [sp, #16]
 800cb7e:	eba0 000a 	sub.w	r0, r0, sl
 800cb82:	2240      	movs	r2, #64	; 0x40
 800cb84:	4082      	lsls	r2, r0
 800cb86:	4313      	orrs	r3, r2
 800cb88:	3401      	adds	r4, #1
 800cb8a:	9304      	str	r3, [sp, #16]
 800cb8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb90:	4825      	ldr	r0, [pc, #148]	; (800cc28 <_svfiprintf_r+0x1ec>)
 800cb92:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cb96:	2206      	movs	r2, #6
 800cb98:	f7f3 fbba 	bl	8000310 <memchr>
 800cb9c:	2800      	cmp	r0, #0
 800cb9e:	d038      	beq.n	800cc12 <_svfiprintf_r+0x1d6>
 800cba0:	4b22      	ldr	r3, [pc, #136]	; (800cc2c <_svfiprintf_r+0x1f0>)
 800cba2:	bb1b      	cbnz	r3, 800cbec <_svfiprintf_r+0x1b0>
 800cba4:	9b03      	ldr	r3, [sp, #12]
 800cba6:	3307      	adds	r3, #7
 800cba8:	f023 0307 	bic.w	r3, r3, #7
 800cbac:	3308      	adds	r3, #8
 800cbae:	9303      	str	r3, [sp, #12]
 800cbb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cbb2:	4433      	add	r3, r6
 800cbb4:	9309      	str	r3, [sp, #36]	; 0x24
 800cbb6:	e768      	b.n	800ca8a <_svfiprintf_r+0x4e>
 800cbb8:	fb0c 3202 	mla	r2, ip, r2, r3
 800cbbc:	460c      	mov	r4, r1
 800cbbe:	2001      	movs	r0, #1
 800cbc0:	e7a6      	b.n	800cb10 <_svfiprintf_r+0xd4>
 800cbc2:	2300      	movs	r3, #0
 800cbc4:	3401      	adds	r4, #1
 800cbc6:	9305      	str	r3, [sp, #20]
 800cbc8:	4619      	mov	r1, r3
 800cbca:	f04f 0c0a 	mov.w	ip, #10
 800cbce:	4620      	mov	r0, r4
 800cbd0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cbd4:	3a30      	subs	r2, #48	; 0x30
 800cbd6:	2a09      	cmp	r2, #9
 800cbd8:	d903      	bls.n	800cbe2 <_svfiprintf_r+0x1a6>
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d0c6      	beq.n	800cb6c <_svfiprintf_r+0x130>
 800cbde:	9105      	str	r1, [sp, #20]
 800cbe0:	e7c4      	b.n	800cb6c <_svfiprintf_r+0x130>
 800cbe2:	fb0c 2101 	mla	r1, ip, r1, r2
 800cbe6:	4604      	mov	r4, r0
 800cbe8:	2301      	movs	r3, #1
 800cbea:	e7f0      	b.n	800cbce <_svfiprintf_r+0x192>
 800cbec:	ab03      	add	r3, sp, #12
 800cbee:	9300      	str	r3, [sp, #0]
 800cbf0:	462a      	mov	r2, r5
 800cbf2:	4b0f      	ldr	r3, [pc, #60]	; (800cc30 <_svfiprintf_r+0x1f4>)
 800cbf4:	a904      	add	r1, sp, #16
 800cbf6:	4638      	mov	r0, r7
 800cbf8:	f7fd ffbe 	bl	800ab78 <_printf_float>
 800cbfc:	1c42      	adds	r2, r0, #1
 800cbfe:	4606      	mov	r6, r0
 800cc00:	d1d6      	bne.n	800cbb0 <_svfiprintf_r+0x174>
 800cc02:	89ab      	ldrh	r3, [r5, #12]
 800cc04:	065b      	lsls	r3, r3, #25
 800cc06:	f53f af2d 	bmi.w	800ca64 <_svfiprintf_r+0x28>
 800cc0a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cc0c:	b01d      	add	sp, #116	; 0x74
 800cc0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc12:	ab03      	add	r3, sp, #12
 800cc14:	9300      	str	r3, [sp, #0]
 800cc16:	462a      	mov	r2, r5
 800cc18:	4b05      	ldr	r3, [pc, #20]	; (800cc30 <_svfiprintf_r+0x1f4>)
 800cc1a:	a904      	add	r1, sp, #16
 800cc1c:	4638      	mov	r0, r7
 800cc1e:	f7fe fa33 	bl	800b088 <_printf_i>
 800cc22:	e7eb      	b.n	800cbfc <_svfiprintf_r+0x1c0>
 800cc24:	080370d4 	.word	0x080370d4
 800cc28:	080370de 	.word	0x080370de
 800cc2c:	0800ab79 	.word	0x0800ab79
 800cc30:	0800c989 	.word	0x0800c989
 800cc34:	080370da 	.word	0x080370da

0800cc38 <__sflush_r>:
 800cc38:	898a      	ldrh	r2, [r1, #12]
 800cc3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc3e:	4605      	mov	r5, r0
 800cc40:	0710      	lsls	r0, r2, #28
 800cc42:	460c      	mov	r4, r1
 800cc44:	d458      	bmi.n	800ccf8 <__sflush_r+0xc0>
 800cc46:	684b      	ldr	r3, [r1, #4]
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	dc05      	bgt.n	800cc58 <__sflush_r+0x20>
 800cc4c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	dc02      	bgt.n	800cc58 <__sflush_r+0x20>
 800cc52:	2000      	movs	r0, #0
 800cc54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc58:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cc5a:	2e00      	cmp	r6, #0
 800cc5c:	d0f9      	beq.n	800cc52 <__sflush_r+0x1a>
 800cc5e:	2300      	movs	r3, #0
 800cc60:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cc64:	682f      	ldr	r7, [r5, #0]
 800cc66:	6a21      	ldr	r1, [r4, #32]
 800cc68:	602b      	str	r3, [r5, #0]
 800cc6a:	d032      	beq.n	800ccd2 <__sflush_r+0x9a>
 800cc6c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cc6e:	89a3      	ldrh	r3, [r4, #12]
 800cc70:	075a      	lsls	r2, r3, #29
 800cc72:	d505      	bpl.n	800cc80 <__sflush_r+0x48>
 800cc74:	6863      	ldr	r3, [r4, #4]
 800cc76:	1ac0      	subs	r0, r0, r3
 800cc78:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cc7a:	b10b      	cbz	r3, 800cc80 <__sflush_r+0x48>
 800cc7c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cc7e:	1ac0      	subs	r0, r0, r3
 800cc80:	2300      	movs	r3, #0
 800cc82:	4602      	mov	r2, r0
 800cc84:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cc86:	6a21      	ldr	r1, [r4, #32]
 800cc88:	4628      	mov	r0, r5
 800cc8a:	47b0      	blx	r6
 800cc8c:	1c43      	adds	r3, r0, #1
 800cc8e:	89a3      	ldrh	r3, [r4, #12]
 800cc90:	d106      	bne.n	800cca0 <__sflush_r+0x68>
 800cc92:	6829      	ldr	r1, [r5, #0]
 800cc94:	291d      	cmp	r1, #29
 800cc96:	d82b      	bhi.n	800ccf0 <__sflush_r+0xb8>
 800cc98:	4a29      	ldr	r2, [pc, #164]	; (800cd40 <__sflush_r+0x108>)
 800cc9a:	410a      	asrs	r2, r1
 800cc9c:	07d6      	lsls	r6, r2, #31
 800cc9e:	d427      	bmi.n	800ccf0 <__sflush_r+0xb8>
 800cca0:	2200      	movs	r2, #0
 800cca2:	6062      	str	r2, [r4, #4]
 800cca4:	04d9      	lsls	r1, r3, #19
 800cca6:	6922      	ldr	r2, [r4, #16]
 800cca8:	6022      	str	r2, [r4, #0]
 800ccaa:	d504      	bpl.n	800ccb6 <__sflush_r+0x7e>
 800ccac:	1c42      	adds	r2, r0, #1
 800ccae:	d101      	bne.n	800ccb4 <__sflush_r+0x7c>
 800ccb0:	682b      	ldr	r3, [r5, #0]
 800ccb2:	b903      	cbnz	r3, 800ccb6 <__sflush_r+0x7e>
 800ccb4:	6560      	str	r0, [r4, #84]	; 0x54
 800ccb6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ccb8:	602f      	str	r7, [r5, #0]
 800ccba:	2900      	cmp	r1, #0
 800ccbc:	d0c9      	beq.n	800cc52 <__sflush_r+0x1a>
 800ccbe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ccc2:	4299      	cmp	r1, r3
 800ccc4:	d002      	beq.n	800cccc <__sflush_r+0x94>
 800ccc6:	4628      	mov	r0, r5
 800ccc8:	f7ff fa96 	bl	800c1f8 <_free_r>
 800cccc:	2000      	movs	r0, #0
 800ccce:	6360      	str	r0, [r4, #52]	; 0x34
 800ccd0:	e7c0      	b.n	800cc54 <__sflush_r+0x1c>
 800ccd2:	2301      	movs	r3, #1
 800ccd4:	4628      	mov	r0, r5
 800ccd6:	47b0      	blx	r6
 800ccd8:	1c41      	adds	r1, r0, #1
 800ccda:	d1c8      	bne.n	800cc6e <__sflush_r+0x36>
 800ccdc:	682b      	ldr	r3, [r5, #0]
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d0c5      	beq.n	800cc6e <__sflush_r+0x36>
 800cce2:	2b1d      	cmp	r3, #29
 800cce4:	d001      	beq.n	800ccea <__sflush_r+0xb2>
 800cce6:	2b16      	cmp	r3, #22
 800cce8:	d101      	bne.n	800ccee <__sflush_r+0xb6>
 800ccea:	602f      	str	r7, [r5, #0]
 800ccec:	e7b1      	b.n	800cc52 <__sflush_r+0x1a>
 800ccee:	89a3      	ldrh	r3, [r4, #12]
 800ccf0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ccf4:	81a3      	strh	r3, [r4, #12]
 800ccf6:	e7ad      	b.n	800cc54 <__sflush_r+0x1c>
 800ccf8:	690f      	ldr	r7, [r1, #16]
 800ccfa:	2f00      	cmp	r7, #0
 800ccfc:	d0a9      	beq.n	800cc52 <__sflush_r+0x1a>
 800ccfe:	0793      	lsls	r3, r2, #30
 800cd00:	680e      	ldr	r6, [r1, #0]
 800cd02:	bf08      	it	eq
 800cd04:	694b      	ldreq	r3, [r1, #20]
 800cd06:	600f      	str	r7, [r1, #0]
 800cd08:	bf18      	it	ne
 800cd0a:	2300      	movne	r3, #0
 800cd0c:	eba6 0807 	sub.w	r8, r6, r7
 800cd10:	608b      	str	r3, [r1, #8]
 800cd12:	f1b8 0f00 	cmp.w	r8, #0
 800cd16:	dd9c      	ble.n	800cc52 <__sflush_r+0x1a>
 800cd18:	6a21      	ldr	r1, [r4, #32]
 800cd1a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cd1c:	4643      	mov	r3, r8
 800cd1e:	463a      	mov	r2, r7
 800cd20:	4628      	mov	r0, r5
 800cd22:	47b0      	blx	r6
 800cd24:	2800      	cmp	r0, #0
 800cd26:	dc06      	bgt.n	800cd36 <__sflush_r+0xfe>
 800cd28:	89a3      	ldrh	r3, [r4, #12]
 800cd2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cd2e:	81a3      	strh	r3, [r4, #12]
 800cd30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cd34:	e78e      	b.n	800cc54 <__sflush_r+0x1c>
 800cd36:	4407      	add	r7, r0
 800cd38:	eba8 0800 	sub.w	r8, r8, r0
 800cd3c:	e7e9      	b.n	800cd12 <__sflush_r+0xda>
 800cd3e:	bf00      	nop
 800cd40:	dfbffffe 	.word	0xdfbffffe

0800cd44 <_fflush_r>:
 800cd44:	b538      	push	{r3, r4, r5, lr}
 800cd46:	690b      	ldr	r3, [r1, #16]
 800cd48:	4605      	mov	r5, r0
 800cd4a:	460c      	mov	r4, r1
 800cd4c:	b913      	cbnz	r3, 800cd54 <_fflush_r+0x10>
 800cd4e:	2500      	movs	r5, #0
 800cd50:	4628      	mov	r0, r5
 800cd52:	bd38      	pop	{r3, r4, r5, pc}
 800cd54:	b118      	cbz	r0, 800cd5e <_fflush_r+0x1a>
 800cd56:	6a03      	ldr	r3, [r0, #32]
 800cd58:	b90b      	cbnz	r3, 800cd5e <_fflush_r+0x1a>
 800cd5a:	f7fe fb31 	bl	800b3c0 <__sinit>
 800cd5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d0f3      	beq.n	800cd4e <_fflush_r+0xa>
 800cd66:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cd68:	07d0      	lsls	r0, r2, #31
 800cd6a:	d404      	bmi.n	800cd76 <_fflush_r+0x32>
 800cd6c:	0599      	lsls	r1, r3, #22
 800cd6e:	d402      	bmi.n	800cd76 <_fflush_r+0x32>
 800cd70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cd72:	f7fe fc4b 	bl	800b60c <__retarget_lock_acquire_recursive>
 800cd76:	4628      	mov	r0, r5
 800cd78:	4621      	mov	r1, r4
 800cd7a:	f7ff ff5d 	bl	800cc38 <__sflush_r>
 800cd7e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cd80:	07da      	lsls	r2, r3, #31
 800cd82:	4605      	mov	r5, r0
 800cd84:	d4e4      	bmi.n	800cd50 <_fflush_r+0xc>
 800cd86:	89a3      	ldrh	r3, [r4, #12]
 800cd88:	059b      	lsls	r3, r3, #22
 800cd8a:	d4e1      	bmi.n	800cd50 <_fflush_r+0xc>
 800cd8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cd8e:	f7fe fc3e 	bl	800b60e <__retarget_lock_release_recursive>
 800cd92:	e7dd      	b.n	800cd50 <_fflush_r+0xc>

0800cd94 <memmove>:
 800cd94:	4288      	cmp	r0, r1
 800cd96:	b510      	push	{r4, lr}
 800cd98:	eb01 0402 	add.w	r4, r1, r2
 800cd9c:	d902      	bls.n	800cda4 <memmove+0x10>
 800cd9e:	4284      	cmp	r4, r0
 800cda0:	4623      	mov	r3, r4
 800cda2:	d807      	bhi.n	800cdb4 <memmove+0x20>
 800cda4:	1e43      	subs	r3, r0, #1
 800cda6:	42a1      	cmp	r1, r4
 800cda8:	d008      	beq.n	800cdbc <memmove+0x28>
 800cdaa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cdae:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cdb2:	e7f8      	b.n	800cda6 <memmove+0x12>
 800cdb4:	4402      	add	r2, r0
 800cdb6:	4601      	mov	r1, r0
 800cdb8:	428a      	cmp	r2, r1
 800cdba:	d100      	bne.n	800cdbe <memmove+0x2a>
 800cdbc:	bd10      	pop	{r4, pc}
 800cdbe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cdc2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cdc6:	e7f7      	b.n	800cdb8 <memmove+0x24>

0800cdc8 <memcpy>:
 800cdc8:	440a      	add	r2, r1
 800cdca:	4291      	cmp	r1, r2
 800cdcc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800cdd0:	d100      	bne.n	800cdd4 <memcpy+0xc>
 800cdd2:	4770      	bx	lr
 800cdd4:	b510      	push	{r4, lr}
 800cdd6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cdda:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cdde:	4291      	cmp	r1, r2
 800cde0:	d1f9      	bne.n	800cdd6 <memcpy+0xe>
 800cde2:	bd10      	pop	{r4, pc}

0800cde4 <__assert_func>:
 800cde4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cde6:	4614      	mov	r4, r2
 800cde8:	461a      	mov	r2, r3
 800cdea:	4b09      	ldr	r3, [pc, #36]	; (800ce10 <__assert_func+0x2c>)
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	4605      	mov	r5, r0
 800cdf0:	68d8      	ldr	r0, [r3, #12]
 800cdf2:	b14c      	cbz	r4, 800ce08 <__assert_func+0x24>
 800cdf4:	4b07      	ldr	r3, [pc, #28]	; (800ce14 <__assert_func+0x30>)
 800cdf6:	9100      	str	r1, [sp, #0]
 800cdf8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cdfc:	4906      	ldr	r1, [pc, #24]	; (800ce18 <__assert_func+0x34>)
 800cdfe:	462b      	mov	r3, r5
 800ce00:	f000 f872 	bl	800cee8 <fiprintf>
 800ce04:	f000 f882 	bl	800cf0c <abort>
 800ce08:	4b04      	ldr	r3, [pc, #16]	; (800ce1c <__assert_func+0x38>)
 800ce0a:	461c      	mov	r4, r3
 800ce0c:	e7f3      	b.n	800cdf6 <__assert_func+0x12>
 800ce0e:	bf00      	nop
 800ce10:	24000158 	.word	0x24000158
 800ce14:	080370ef 	.word	0x080370ef
 800ce18:	080370fc 	.word	0x080370fc
 800ce1c:	0803712a 	.word	0x0803712a

0800ce20 <_calloc_r>:
 800ce20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ce22:	fba1 2402 	umull	r2, r4, r1, r2
 800ce26:	b94c      	cbnz	r4, 800ce3c <_calloc_r+0x1c>
 800ce28:	4611      	mov	r1, r2
 800ce2a:	9201      	str	r2, [sp, #4]
 800ce2c:	f7fd fd88 	bl	800a940 <_malloc_r>
 800ce30:	9a01      	ldr	r2, [sp, #4]
 800ce32:	4605      	mov	r5, r0
 800ce34:	b930      	cbnz	r0, 800ce44 <_calloc_r+0x24>
 800ce36:	4628      	mov	r0, r5
 800ce38:	b003      	add	sp, #12
 800ce3a:	bd30      	pop	{r4, r5, pc}
 800ce3c:	220c      	movs	r2, #12
 800ce3e:	6002      	str	r2, [r0, #0]
 800ce40:	2500      	movs	r5, #0
 800ce42:	e7f8      	b.n	800ce36 <_calloc_r+0x16>
 800ce44:	4621      	mov	r1, r4
 800ce46:	f7fe fb54 	bl	800b4f2 <memset>
 800ce4a:	e7f4      	b.n	800ce36 <_calloc_r+0x16>

0800ce4c <__ascii_mbtowc>:
 800ce4c:	b082      	sub	sp, #8
 800ce4e:	b901      	cbnz	r1, 800ce52 <__ascii_mbtowc+0x6>
 800ce50:	a901      	add	r1, sp, #4
 800ce52:	b142      	cbz	r2, 800ce66 <__ascii_mbtowc+0x1a>
 800ce54:	b14b      	cbz	r3, 800ce6a <__ascii_mbtowc+0x1e>
 800ce56:	7813      	ldrb	r3, [r2, #0]
 800ce58:	600b      	str	r3, [r1, #0]
 800ce5a:	7812      	ldrb	r2, [r2, #0]
 800ce5c:	1e10      	subs	r0, r2, #0
 800ce5e:	bf18      	it	ne
 800ce60:	2001      	movne	r0, #1
 800ce62:	b002      	add	sp, #8
 800ce64:	4770      	bx	lr
 800ce66:	4610      	mov	r0, r2
 800ce68:	e7fb      	b.n	800ce62 <__ascii_mbtowc+0x16>
 800ce6a:	f06f 0001 	mvn.w	r0, #1
 800ce6e:	e7f8      	b.n	800ce62 <__ascii_mbtowc+0x16>

0800ce70 <_realloc_r>:
 800ce70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce74:	4680      	mov	r8, r0
 800ce76:	4614      	mov	r4, r2
 800ce78:	460e      	mov	r6, r1
 800ce7a:	b921      	cbnz	r1, 800ce86 <_realloc_r+0x16>
 800ce7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ce80:	4611      	mov	r1, r2
 800ce82:	f7fd bd5d 	b.w	800a940 <_malloc_r>
 800ce86:	b92a      	cbnz	r2, 800ce94 <_realloc_r+0x24>
 800ce88:	f7ff f9b6 	bl	800c1f8 <_free_r>
 800ce8c:	4625      	mov	r5, r4
 800ce8e:	4628      	mov	r0, r5
 800ce90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce94:	f000 f841 	bl	800cf1a <_malloc_usable_size_r>
 800ce98:	4284      	cmp	r4, r0
 800ce9a:	4607      	mov	r7, r0
 800ce9c:	d802      	bhi.n	800cea4 <_realloc_r+0x34>
 800ce9e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cea2:	d812      	bhi.n	800ceca <_realloc_r+0x5a>
 800cea4:	4621      	mov	r1, r4
 800cea6:	4640      	mov	r0, r8
 800cea8:	f7fd fd4a 	bl	800a940 <_malloc_r>
 800ceac:	4605      	mov	r5, r0
 800ceae:	2800      	cmp	r0, #0
 800ceb0:	d0ed      	beq.n	800ce8e <_realloc_r+0x1e>
 800ceb2:	42bc      	cmp	r4, r7
 800ceb4:	4622      	mov	r2, r4
 800ceb6:	4631      	mov	r1, r6
 800ceb8:	bf28      	it	cs
 800ceba:	463a      	movcs	r2, r7
 800cebc:	f7ff ff84 	bl	800cdc8 <memcpy>
 800cec0:	4631      	mov	r1, r6
 800cec2:	4640      	mov	r0, r8
 800cec4:	f7ff f998 	bl	800c1f8 <_free_r>
 800cec8:	e7e1      	b.n	800ce8e <_realloc_r+0x1e>
 800ceca:	4635      	mov	r5, r6
 800cecc:	e7df      	b.n	800ce8e <_realloc_r+0x1e>

0800cece <__ascii_wctomb>:
 800cece:	b149      	cbz	r1, 800cee4 <__ascii_wctomb+0x16>
 800ced0:	2aff      	cmp	r2, #255	; 0xff
 800ced2:	bf85      	ittet	hi
 800ced4:	238a      	movhi	r3, #138	; 0x8a
 800ced6:	6003      	strhi	r3, [r0, #0]
 800ced8:	700a      	strbls	r2, [r1, #0]
 800ceda:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800cede:	bf98      	it	ls
 800cee0:	2001      	movls	r0, #1
 800cee2:	4770      	bx	lr
 800cee4:	4608      	mov	r0, r1
 800cee6:	4770      	bx	lr

0800cee8 <fiprintf>:
 800cee8:	b40e      	push	{r1, r2, r3}
 800ceea:	b503      	push	{r0, r1, lr}
 800ceec:	4601      	mov	r1, r0
 800ceee:	ab03      	add	r3, sp, #12
 800cef0:	4805      	ldr	r0, [pc, #20]	; (800cf08 <fiprintf+0x20>)
 800cef2:	f853 2b04 	ldr.w	r2, [r3], #4
 800cef6:	6800      	ldr	r0, [r0, #0]
 800cef8:	9301      	str	r3, [sp, #4]
 800cefa:	f000 f83f 	bl	800cf7c <_vfiprintf_r>
 800cefe:	b002      	add	sp, #8
 800cf00:	f85d eb04 	ldr.w	lr, [sp], #4
 800cf04:	b003      	add	sp, #12
 800cf06:	4770      	bx	lr
 800cf08:	24000158 	.word	0x24000158

0800cf0c <abort>:
 800cf0c:	b508      	push	{r3, lr}
 800cf0e:	2006      	movs	r0, #6
 800cf10:	f000 fa0c 	bl	800d32c <raise>
 800cf14:	2001      	movs	r0, #1
 800cf16:	f7f4 f9ff 	bl	8001318 <_exit>

0800cf1a <_malloc_usable_size_r>:
 800cf1a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cf1e:	1f18      	subs	r0, r3, #4
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	bfbc      	itt	lt
 800cf24:	580b      	ldrlt	r3, [r1, r0]
 800cf26:	18c0      	addlt	r0, r0, r3
 800cf28:	4770      	bx	lr

0800cf2a <__sfputc_r>:
 800cf2a:	6893      	ldr	r3, [r2, #8]
 800cf2c:	3b01      	subs	r3, #1
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	b410      	push	{r4}
 800cf32:	6093      	str	r3, [r2, #8]
 800cf34:	da08      	bge.n	800cf48 <__sfputc_r+0x1e>
 800cf36:	6994      	ldr	r4, [r2, #24]
 800cf38:	42a3      	cmp	r3, r4
 800cf3a:	db01      	blt.n	800cf40 <__sfputc_r+0x16>
 800cf3c:	290a      	cmp	r1, #10
 800cf3e:	d103      	bne.n	800cf48 <__sfputc_r+0x1e>
 800cf40:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cf44:	f000 b934 	b.w	800d1b0 <__swbuf_r>
 800cf48:	6813      	ldr	r3, [r2, #0]
 800cf4a:	1c58      	adds	r0, r3, #1
 800cf4c:	6010      	str	r0, [r2, #0]
 800cf4e:	7019      	strb	r1, [r3, #0]
 800cf50:	4608      	mov	r0, r1
 800cf52:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cf56:	4770      	bx	lr

0800cf58 <__sfputs_r>:
 800cf58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf5a:	4606      	mov	r6, r0
 800cf5c:	460f      	mov	r7, r1
 800cf5e:	4614      	mov	r4, r2
 800cf60:	18d5      	adds	r5, r2, r3
 800cf62:	42ac      	cmp	r4, r5
 800cf64:	d101      	bne.n	800cf6a <__sfputs_r+0x12>
 800cf66:	2000      	movs	r0, #0
 800cf68:	e007      	b.n	800cf7a <__sfputs_r+0x22>
 800cf6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf6e:	463a      	mov	r2, r7
 800cf70:	4630      	mov	r0, r6
 800cf72:	f7ff ffda 	bl	800cf2a <__sfputc_r>
 800cf76:	1c43      	adds	r3, r0, #1
 800cf78:	d1f3      	bne.n	800cf62 <__sfputs_r+0xa>
 800cf7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800cf7c <_vfiprintf_r>:
 800cf7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf80:	460d      	mov	r5, r1
 800cf82:	b09d      	sub	sp, #116	; 0x74
 800cf84:	4614      	mov	r4, r2
 800cf86:	4698      	mov	r8, r3
 800cf88:	4606      	mov	r6, r0
 800cf8a:	b118      	cbz	r0, 800cf94 <_vfiprintf_r+0x18>
 800cf8c:	6a03      	ldr	r3, [r0, #32]
 800cf8e:	b90b      	cbnz	r3, 800cf94 <_vfiprintf_r+0x18>
 800cf90:	f7fe fa16 	bl	800b3c0 <__sinit>
 800cf94:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cf96:	07d9      	lsls	r1, r3, #31
 800cf98:	d405      	bmi.n	800cfa6 <_vfiprintf_r+0x2a>
 800cf9a:	89ab      	ldrh	r3, [r5, #12]
 800cf9c:	059a      	lsls	r2, r3, #22
 800cf9e:	d402      	bmi.n	800cfa6 <_vfiprintf_r+0x2a>
 800cfa0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cfa2:	f7fe fb33 	bl	800b60c <__retarget_lock_acquire_recursive>
 800cfa6:	89ab      	ldrh	r3, [r5, #12]
 800cfa8:	071b      	lsls	r3, r3, #28
 800cfaa:	d501      	bpl.n	800cfb0 <_vfiprintf_r+0x34>
 800cfac:	692b      	ldr	r3, [r5, #16]
 800cfae:	b99b      	cbnz	r3, 800cfd8 <_vfiprintf_r+0x5c>
 800cfb0:	4629      	mov	r1, r5
 800cfb2:	4630      	mov	r0, r6
 800cfb4:	f000 f93a 	bl	800d22c <__swsetup_r>
 800cfb8:	b170      	cbz	r0, 800cfd8 <_vfiprintf_r+0x5c>
 800cfba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cfbc:	07dc      	lsls	r4, r3, #31
 800cfbe:	d504      	bpl.n	800cfca <_vfiprintf_r+0x4e>
 800cfc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cfc4:	b01d      	add	sp, #116	; 0x74
 800cfc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfca:	89ab      	ldrh	r3, [r5, #12]
 800cfcc:	0598      	lsls	r0, r3, #22
 800cfce:	d4f7      	bmi.n	800cfc0 <_vfiprintf_r+0x44>
 800cfd0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cfd2:	f7fe fb1c 	bl	800b60e <__retarget_lock_release_recursive>
 800cfd6:	e7f3      	b.n	800cfc0 <_vfiprintf_r+0x44>
 800cfd8:	2300      	movs	r3, #0
 800cfda:	9309      	str	r3, [sp, #36]	; 0x24
 800cfdc:	2320      	movs	r3, #32
 800cfde:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cfe2:	f8cd 800c 	str.w	r8, [sp, #12]
 800cfe6:	2330      	movs	r3, #48	; 0x30
 800cfe8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800d19c <_vfiprintf_r+0x220>
 800cfec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cff0:	f04f 0901 	mov.w	r9, #1
 800cff4:	4623      	mov	r3, r4
 800cff6:	469a      	mov	sl, r3
 800cff8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cffc:	b10a      	cbz	r2, 800d002 <_vfiprintf_r+0x86>
 800cffe:	2a25      	cmp	r2, #37	; 0x25
 800d000:	d1f9      	bne.n	800cff6 <_vfiprintf_r+0x7a>
 800d002:	ebba 0b04 	subs.w	fp, sl, r4
 800d006:	d00b      	beq.n	800d020 <_vfiprintf_r+0xa4>
 800d008:	465b      	mov	r3, fp
 800d00a:	4622      	mov	r2, r4
 800d00c:	4629      	mov	r1, r5
 800d00e:	4630      	mov	r0, r6
 800d010:	f7ff ffa2 	bl	800cf58 <__sfputs_r>
 800d014:	3001      	adds	r0, #1
 800d016:	f000 80a9 	beq.w	800d16c <_vfiprintf_r+0x1f0>
 800d01a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d01c:	445a      	add	r2, fp
 800d01e:	9209      	str	r2, [sp, #36]	; 0x24
 800d020:	f89a 3000 	ldrb.w	r3, [sl]
 800d024:	2b00      	cmp	r3, #0
 800d026:	f000 80a1 	beq.w	800d16c <_vfiprintf_r+0x1f0>
 800d02a:	2300      	movs	r3, #0
 800d02c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d030:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d034:	f10a 0a01 	add.w	sl, sl, #1
 800d038:	9304      	str	r3, [sp, #16]
 800d03a:	9307      	str	r3, [sp, #28]
 800d03c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d040:	931a      	str	r3, [sp, #104]	; 0x68
 800d042:	4654      	mov	r4, sl
 800d044:	2205      	movs	r2, #5
 800d046:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d04a:	4854      	ldr	r0, [pc, #336]	; (800d19c <_vfiprintf_r+0x220>)
 800d04c:	f7f3 f960 	bl	8000310 <memchr>
 800d050:	9a04      	ldr	r2, [sp, #16]
 800d052:	b9d8      	cbnz	r0, 800d08c <_vfiprintf_r+0x110>
 800d054:	06d1      	lsls	r1, r2, #27
 800d056:	bf44      	itt	mi
 800d058:	2320      	movmi	r3, #32
 800d05a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d05e:	0713      	lsls	r3, r2, #28
 800d060:	bf44      	itt	mi
 800d062:	232b      	movmi	r3, #43	; 0x2b
 800d064:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d068:	f89a 3000 	ldrb.w	r3, [sl]
 800d06c:	2b2a      	cmp	r3, #42	; 0x2a
 800d06e:	d015      	beq.n	800d09c <_vfiprintf_r+0x120>
 800d070:	9a07      	ldr	r2, [sp, #28]
 800d072:	4654      	mov	r4, sl
 800d074:	2000      	movs	r0, #0
 800d076:	f04f 0c0a 	mov.w	ip, #10
 800d07a:	4621      	mov	r1, r4
 800d07c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d080:	3b30      	subs	r3, #48	; 0x30
 800d082:	2b09      	cmp	r3, #9
 800d084:	d94d      	bls.n	800d122 <_vfiprintf_r+0x1a6>
 800d086:	b1b0      	cbz	r0, 800d0b6 <_vfiprintf_r+0x13a>
 800d088:	9207      	str	r2, [sp, #28]
 800d08a:	e014      	b.n	800d0b6 <_vfiprintf_r+0x13a>
 800d08c:	eba0 0308 	sub.w	r3, r0, r8
 800d090:	fa09 f303 	lsl.w	r3, r9, r3
 800d094:	4313      	orrs	r3, r2
 800d096:	9304      	str	r3, [sp, #16]
 800d098:	46a2      	mov	sl, r4
 800d09a:	e7d2      	b.n	800d042 <_vfiprintf_r+0xc6>
 800d09c:	9b03      	ldr	r3, [sp, #12]
 800d09e:	1d19      	adds	r1, r3, #4
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	9103      	str	r1, [sp, #12]
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	bfbb      	ittet	lt
 800d0a8:	425b      	neglt	r3, r3
 800d0aa:	f042 0202 	orrlt.w	r2, r2, #2
 800d0ae:	9307      	strge	r3, [sp, #28]
 800d0b0:	9307      	strlt	r3, [sp, #28]
 800d0b2:	bfb8      	it	lt
 800d0b4:	9204      	strlt	r2, [sp, #16]
 800d0b6:	7823      	ldrb	r3, [r4, #0]
 800d0b8:	2b2e      	cmp	r3, #46	; 0x2e
 800d0ba:	d10c      	bne.n	800d0d6 <_vfiprintf_r+0x15a>
 800d0bc:	7863      	ldrb	r3, [r4, #1]
 800d0be:	2b2a      	cmp	r3, #42	; 0x2a
 800d0c0:	d134      	bne.n	800d12c <_vfiprintf_r+0x1b0>
 800d0c2:	9b03      	ldr	r3, [sp, #12]
 800d0c4:	1d1a      	adds	r2, r3, #4
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	9203      	str	r2, [sp, #12]
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	bfb8      	it	lt
 800d0ce:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800d0d2:	3402      	adds	r4, #2
 800d0d4:	9305      	str	r3, [sp, #20]
 800d0d6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800d1ac <_vfiprintf_r+0x230>
 800d0da:	7821      	ldrb	r1, [r4, #0]
 800d0dc:	2203      	movs	r2, #3
 800d0de:	4650      	mov	r0, sl
 800d0e0:	f7f3 f916 	bl	8000310 <memchr>
 800d0e4:	b138      	cbz	r0, 800d0f6 <_vfiprintf_r+0x17a>
 800d0e6:	9b04      	ldr	r3, [sp, #16]
 800d0e8:	eba0 000a 	sub.w	r0, r0, sl
 800d0ec:	2240      	movs	r2, #64	; 0x40
 800d0ee:	4082      	lsls	r2, r0
 800d0f0:	4313      	orrs	r3, r2
 800d0f2:	3401      	adds	r4, #1
 800d0f4:	9304      	str	r3, [sp, #16]
 800d0f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d0fa:	4829      	ldr	r0, [pc, #164]	; (800d1a0 <_vfiprintf_r+0x224>)
 800d0fc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d100:	2206      	movs	r2, #6
 800d102:	f7f3 f905 	bl	8000310 <memchr>
 800d106:	2800      	cmp	r0, #0
 800d108:	d03f      	beq.n	800d18a <_vfiprintf_r+0x20e>
 800d10a:	4b26      	ldr	r3, [pc, #152]	; (800d1a4 <_vfiprintf_r+0x228>)
 800d10c:	bb1b      	cbnz	r3, 800d156 <_vfiprintf_r+0x1da>
 800d10e:	9b03      	ldr	r3, [sp, #12]
 800d110:	3307      	adds	r3, #7
 800d112:	f023 0307 	bic.w	r3, r3, #7
 800d116:	3308      	adds	r3, #8
 800d118:	9303      	str	r3, [sp, #12]
 800d11a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d11c:	443b      	add	r3, r7
 800d11e:	9309      	str	r3, [sp, #36]	; 0x24
 800d120:	e768      	b.n	800cff4 <_vfiprintf_r+0x78>
 800d122:	fb0c 3202 	mla	r2, ip, r2, r3
 800d126:	460c      	mov	r4, r1
 800d128:	2001      	movs	r0, #1
 800d12a:	e7a6      	b.n	800d07a <_vfiprintf_r+0xfe>
 800d12c:	2300      	movs	r3, #0
 800d12e:	3401      	adds	r4, #1
 800d130:	9305      	str	r3, [sp, #20]
 800d132:	4619      	mov	r1, r3
 800d134:	f04f 0c0a 	mov.w	ip, #10
 800d138:	4620      	mov	r0, r4
 800d13a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d13e:	3a30      	subs	r2, #48	; 0x30
 800d140:	2a09      	cmp	r2, #9
 800d142:	d903      	bls.n	800d14c <_vfiprintf_r+0x1d0>
 800d144:	2b00      	cmp	r3, #0
 800d146:	d0c6      	beq.n	800d0d6 <_vfiprintf_r+0x15a>
 800d148:	9105      	str	r1, [sp, #20]
 800d14a:	e7c4      	b.n	800d0d6 <_vfiprintf_r+0x15a>
 800d14c:	fb0c 2101 	mla	r1, ip, r1, r2
 800d150:	4604      	mov	r4, r0
 800d152:	2301      	movs	r3, #1
 800d154:	e7f0      	b.n	800d138 <_vfiprintf_r+0x1bc>
 800d156:	ab03      	add	r3, sp, #12
 800d158:	9300      	str	r3, [sp, #0]
 800d15a:	462a      	mov	r2, r5
 800d15c:	4b12      	ldr	r3, [pc, #72]	; (800d1a8 <_vfiprintf_r+0x22c>)
 800d15e:	a904      	add	r1, sp, #16
 800d160:	4630      	mov	r0, r6
 800d162:	f7fd fd09 	bl	800ab78 <_printf_float>
 800d166:	4607      	mov	r7, r0
 800d168:	1c78      	adds	r0, r7, #1
 800d16a:	d1d6      	bne.n	800d11a <_vfiprintf_r+0x19e>
 800d16c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d16e:	07d9      	lsls	r1, r3, #31
 800d170:	d405      	bmi.n	800d17e <_vfiprintf_r+0x202>
 800d172:	89ab      	ldrh	r3, [r5, #12]
 800d174:	059a      	lsls	r2, r3, #22
 800d176:	d402      	bmi.n	800d17e <_vfiprintf_r+0x202>
 800d178:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d17a:	f7fe fa48 	bl	800b60e <__retarget_lock_release_recursive>
 800d17e:	89ab      	ldrh	r3, [r5, #12]
 800d180:	065b      	lsls	r3, r3, #25
 800d182:	f53f af1d 	bmi.w	800cfc0 <_vfiprintf_r+0x44>
 800d186:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d188:	e71c      	b.n	800cfc4 <_vfiprintf_r+0x48>
 800d18a:	ab03      	add	r3, sp, #12
 800d18c:	9300      	str	r3, [sp, #0]
 800d18e:	462a      	mov	r2, r5
 800d190:	4b05      	ldr	r3, [pc, #20]	; (800d1a8 <_vfiprintf_r+0x22c>)
 800d192:	a904      	add	r1, sp, #16
 800d194:	4630      	mov	r0, r6
 800d196:	f7fd ff77 	bl	800b088 <_printf_i>
 800d19a:	e7e4      	b.n	800d166 <_vfiprintf_r+0x1ea>
 800d19c:	080370d4 	.word	0x080370d4
 800d1a0:	080370de 	.word	0x080370de
 800d1a4:	0800ab79 	.word	0x0800ab79
 800d1a8:	0800cf59 	.word	0x0800cf59
 800d1ac:	080370da 	.word	0x080370da

0800d1b0 <__swbuf_r>:
 800d1b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1b2:	460e      	mov	r6, r1
 800d1b4:	4614      	mov	r4, r2
 800d1b6:	4605      	mov	r5, r0
 800d1b8:	b118      	cbz	r0, 800d1c2 <__swbuf_r+0x12>
 800d1ba:	6a03      	ldr	r3, [r0, #32]
 800d1bc:	b90b      	cbnz	r3, 800d1c2 <__swbuf_r+0x12>
 800d1be:	f7fe f8ff 	bl	800b3c0 <__sinit>
 800d1c2:	69a3      	ldr	r3, [r4, #24]
 800d1c4:	60a3      	str	r3, [r4, #8]
 800d1c6:	89a3      	ldrh	r3, [r4, #12]
 800d1c8:	071a      	lsls	r2, r3, #28
 800d1ca:	d525      	bpl.n	800d218 <__swbuf_r+0x68>
 800d1cc:	6923      	ldr	r3, [r4, #16]
 800d1ce:	b31b      	cbz	r3, 800d218 <__swbuf_r+0x68>
 800d1d0:	6823      	ldr	r3, [r4, #0]
 800d1d2:	6922      	ldr	r2, [r4, #16]
 800d1d4:	1a98      	subs	r0, r3, r2
 800d1d6:	6963      	ldr	r3, [r4, #20]
 800d1d8:	b2f6      	uxtb	r6, r6
 800d1da:	4283      	cmp	r3, r0
 800d1dc:	4637      	mov	r7, r6
 800d1de:	dc04      	bgt.n	800d1ea <__swbuf_r+0x3a>
 800d1e0:	4621      	mov	r1, r4
 800d1e2:	4628      	mov	r0, r5
 800d1e4:	f7ff fdae 	bl	800cd44 <_fflush_r>
 800d1e8:	b9e0      	cbnz	r0, 800d224 <__swbuf_r+0x74>
 800d1ea:	68a3      	ldr	r3, [r4, #8]
 800d1ec:	3b01      	subs	r3, #1
 800d1ee:	60a3      	str	r3, [r4, #8]
 800d1f0:	6823      	ldr	r3, [r4, #0]
 800d1f2:	1c5a      	adds	r2, r3, #1
 800d1f4:	6022      	str	r2, [r4, #0]
 800d1f6:	701e      	strb	r6, [r3, #0]
 800d1f8:	6962      	ldr	r2, [r4, #20]
 800d1fa:	1c43      	adds	r3, r0, #1
 800d1fc:	429a      	cmp	r2, r3
 800d1fe:	d004      	beq.n	800d20a <__swbuf_r+0x5a>
 800d200:	89a3      	ldrh	r3, [r4, #12]
 800d202:	07db      	lsls	r3, r3, #31
 800d204:	d506      	bpl.n	800d214 <__swbuf_r+0x64>
 800d206:	2e0a      	cmp	r6, #10
 800d208:	d104      	bne.n	800d214 <__swbuf_r+0x64>
 800d20a:	4621      	mov	r1, r4
 800d20c:	4628      	mov	r0, r5
 800d20e:	f7ff fd99 	bl	800cd44 <_fflush_r>
 800d212:	b938      	cbnz	r0, 800d224 <__swbuf_r+0x74>
 800d214:	4638      	mov	r0, r7
 800d216:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d218:	4621      	mov	r1, r4
 800d21a:	4628      	mov	r0, r5
 800d21c:	f000 f806 	bl	800d22c <__swsetup_r>
 800d220:	2800      	cmp	r0, #0
 800d222:	d0d5      	beq.n	800d1d0 <__swbuf_r+0x20>
 800d224:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800d228:	e7f4      	b.n	800d214 <__swbuf_r+0x64>
	...

0800d22c <__swsetup_r>:
 800d22c:	b538      	push	{r3, r4, r5, lr}
 800d22e:	4b2a      	ldr	r3, [pc, #168]	; (800d2d8 <__swsetup_r+0xac>)
 800d230:	4605      	mov	r5, r0
 800d232:	6818      	ldr	r0, [r3, #0]
 800d234:	460c      	mov	r4, r1
 800d236:	b118      	cbz	r0, 800d240 <__swsetup_r+0x14>
 800d238:	6a03      	ldr	r3, [r0, #32]
 800d23a:	b90b      	cbnz	r3, 800d240 <__swsetup_r+0x14>
 800d23c:	f7fe f8c0 	bl	800b3c0 <__sinit>
 800d240:	89a3      	ldrh	r3, [r4, #12]
 800d242:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d246:	0718      	lsls	r0, r3, #28
 800d248:	d422      	bmi.n	800d290 <__swsetup_r+0x64>
 800d24a:	06d9      	lsls	r1, r3, #27
 800d24c:	d407      	bmi.n	800d25e <__swsetup_r+0x32>
 800d24e:	2309      	movs	r3, #9
 800d250:	602b      	str	r3, [r5, #0]
 800d252:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d256:	81a3      	strh	r3, [r4, #12]
 800d258:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d25c:	e034      	b.n	800d2c8 <__swsetup_r+0x9c>
 800d25e:	0758      	lsls	r0, r3, #29
 800d260:	d512      	bpl.n	800d288 <__swsetup_r+0x5c>
 800d262:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d264:	b141      	cbz	r1, 800d278 <__swsetup_r+0x4c>
 800d266:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d26a:	4299      	cmp	r1, r3
 800d26c:	d002      	beq.n	800d274 <__swsetup_r+0x48>
 800d26e:	4628      	mov	r0, r5
 800d270:	f7fe ffc2 	bl	800c1f8 <_free_r>
 800d274:	2300      	movs	r3, #0
 800d276:	6363      	str	r3, [r4, #52]	; 0x34
 800d278:	89a3      	ldrh	r3, [r4, #12]
 800d27a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d27e:	81a3      	strh	r3, [r4, #12]
 800d280:	2300      	movs	r3, #0
 800d282:	6063      	str	r3, [r4, #4]
 800d284:	6923      	ldr	r3, [r4, #16]
 800d286:	6023      	str	r3, [r4, #0]
 800d288:	89a3      	ldrh	r3, [r4, #12]
 800d28a:	f043 0308 	orr.w	r3, r3, #8
 800d28e:	81a3      	strh	r3, [r4, #12]
 800d290:	6923      	ldr	r3, [r4, #16]
 800d292:	b94b      	cbnz	r3, 800d2a8 <__swsetup_r+0x7c>
 800d294:	89a3      	ldrh	r3, [r4, #12]
 800d296:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d29a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d29e:	d003      	beq.n	800d2a8 <__swsetup_r+0x7c>
 800d2a0:	4621      	mov	r1, r4
 800d2a2:	4628      	mov	r0, r5
 800d2a4:	f000 f884 	bl	800d3b0 <__smakebuf_r>
 800d2a8:	89a0      	ldrh	r0, [r4, #12]
 800d2aa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d2ae:	f010 0301 	ands.w	r3, r0, #1
 800d2b2:	d00a      	beq.n	800d2ca <__swsetup_r+0x9e>
 800d2b4:	2300      	movs	r3, #0
 800d2b6:	60a3      	str	r3, [r4, #8]
 800d2b8:	6963      	ldr	r3, [r4, #20]
 800d2ba:	425b      	negs	r3, r3
 800d2bc:	61a3      	str	r3, [r4, #24]
 800d2be:	6923      	ldr	r3, [r4, #16]
 800d2c0:	b943      	cbnz	r3, 800d2d4 <__swsetup_r+0xa8>
 800d2c2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d2c6:	d1c4      	bne.n	800d252 <__swsetup_r+0x26>
 800d2c8:	bd38      	pop	{r3, r4, r5, pc}
 800d2ca:	0781      	lsls	r1, r0, #30
 800d2cc:	bf58      	it	pl
 800d2ce:	6963      	ldrpl	r3, [r4, #20]
 800d2d0:	60a3      	str	r3, [r4, #8]
 800d2d2:	e7f4      	b.n	800d2be <__swsetup_r+0x92>
 800d2d4:	2000      	movs	r0, #0
 800d2d6:	e7f7      	b.n	800d2c8 <__swsetup_r+0x9c>
 800d2d8:	24000158 	.word	0x24000158

0800d2dc <_raise_r>:
 800d2dc:	291f      	cmp	r1, #31
 800d2de:	b538      	push	{r3, r4, r5, lr}
 800d2e0:	4604      	mov	r4, r0
 800d2e2:	460d      	mov	r5, r1
 800d2e4:	d904      	bls.n	800d2f0 <_raise_r+0x14>
 800d2e6:	2316      	movs	r3, #22
 800d2e8:	6003      	str	r3, [r0, #0]
 800d2ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d2ee:	bd38      	pop	{r3, r4, r5, pc}
 800d2f0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800d2f2:	b112      	cbz	r2, 800d2fa <_raise_r+0x1e>
 800d2f4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d2f8:	b94b      	cbnz	r3, 800d30e <_raise_r+0x32>
 800d2fa:	4620      	mov	r0, r4
 800d2fc:	f000 f830 	bl	800d360 <_getpid_r>
 800d300:	462a      	mov	r2, r5
 800d302:	4601      	mov	r1, r0
 800d304:	4620      	mov	r0, r4
 800d306:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d30a:	f000 b817 	b.w	800d33c <_kill_r>
 800d30e:	2b01      	cmp	r3, #1
 800d310:	d00a      	beq.n	800d328 <_raise_r+0x4c>
 800d312:	1c59      	adds	r1, r3, #1
 800d314:	d103      	bne.n	800d31e <_raise_r+0x42>
 800d316:	2316      	movs	r3, #22
 800d318:	6003      	str	r3, [r0, #0]
 800d31a:	2001      	movs	r0, #1
 800d31c:	e7e7      	b.n	800d2ee <_raise_r+0x12>
 800d31e:	2400      	movs	r4, #0
 800d320:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d324:	4628      	mov	r0, r5
 800d326:	4798      	blx	r3
 800d328:	2000      	movs	r0, #0
 800d32a:	e7e0      	b.n	800d2ee <_raise_r+0x12>

0800d32c <raise>:
 800d32c:	4b02      	ldr	r3, [pc, #8]	; (800d338 <raise+0xc>)
 800d32e:	4601      	mov	r1, r0
 800d330:	6818      	ldr	r0, [r3, #0]
 800d332:	f7ff bfd3 	b.w	800d2dc <_raise_r>
 800d336:	bf00      	nop
 800d338:	24000158 	.word	0x24000158

0800d33c <_kill_r>:
 800d33c:	b538      	push	{r3, r4, r5, lr}
 800d33e:	4d07      	ldr	r5, [pc, #28]	; (800d35c <_kill_r+0x20>)
 800d340:	2300      	movs	r3, #0
 800d342:	4604      	mov	r4, r0
 800d344:	4608      	mov	r0, r1
 800d346:	4611      	mov	r1, r2
 800d348:	602b      	str	r3, [r5, #0]
 800d34a:	f7f3 ffdb 	bl	8001304 <_kill>
 800d34e:	1c43      	adds	r3, r0, #1
 800d350:	d102      	bne.n	800d358 <_kill_r+0x1c>
 800d352:	682b      	ldr	r3, [r5, #0]
 800d354:	b103      	cbz	r3, 800d358 <_kill_r+0x1c>
 800d356:	6023      	str	r3, [r4, #0]
 800d358:	bd38      	pop	{r3, r4, r5, pc}
 800d35a:	bf00      	nop
 800d35c:	24002518 	.word	0x24002518

0800d360 <_getpid_r>:
 800d360:	f7f3 bfce 	b.w	8001300 <_getpid>

0800d364 <__swhatbuf_r>:
 800d364:	b570      	push	{r4, r5, r6, lr}
 800d366:	460c      	mov	r4, r1
 800d368:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d36c:	2900      	cmp	r1, #0
 800d36e:	b096      	sub	sp, #88	; 0x58
 800d370:	4615      	mov	r5, r2
 800d372:	461e      	mov	r6, r3
 800d374:	da0d      	bge.n	800d392 <__swhatbuf_r+0x2e>
 800d376:	89a3      	ldrh	r3, [r4, #12]
 800d378:	f013 0f80 	tst.w	r3, #128	; 0x80
 800d37c:	f04f 0100 	mov.w	r1, #0
 800d380:	bf0c      	ite	eq
 800d382:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800d386:	2340      	movne	r3, #64	; 0x40
 800d388:	2000      	movs	r0, #0
 800d38a:	6031      	str	r1, [r6, #0]
 800d38c:	602b      	str	r3, [r5, #0]
 800d38e:	b016      	add	sp, #88	; 0x58
 800d390:	bd70      	pop	{r4, r5, r6, pc}
 800d392:	466a      	mov	r2, sp
 800d394:	f000 f848 	bl	800d428 <_fstat_r>
 800d398:	2800      	cmp	r0, #0
 800d39a:	dbec      	blt.n	800d376 <__swhatbuf_r+0x12>
 800d39c:	9901      	ldr	r1, [sp, #4]
 800d39e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800d3a2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800d3a6:	4259      	negs	r1, r3
 800d3a8:	4159      	adcs	r1, r3
 800d3aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d3ae:	e7eb      	b.n	800d388 <__swhatbuf_r+0x24>

0800d3b0 <__smakebuf_r>:
 800d3b0:	898b      	ldrh	r3, [r1, #12]
 800d3b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d3b4:	079d      	lsls	r5, r3, #30
 800d3b6:	4606      	mov	r6, r0
 800d3b8:	460c      	mov	r4, r1
 800d3ba:	d507      	bpl.n	800d3cc <__smakebuf_r+0x1c>
 800d3bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d3c0:	6023      	str	r3, [r4, #0]
 800d3c2:	6123      	str	r3, [r4, #16]
 800d3c4:	2301      	movs	r3, #1
 800d3c6:	6163      	str	r3, [r4, #20]
 800d3c8:	b002      	add	sp, #8
 800d3ca:	bd70      	pop	{r4, r5, r6, pc}
 800d3cc:	ab01      	add	r3, sp, #4
 800d3ce:	466a      	mov	r2, sp
 800d3d0:	f7ff ffc8 	bl	800d364 <__swhatbuf_r>
 800d3d4:	9900      	ldr	r1, [sp, #0]
 800d3d6:	4605      	mov	r5, r0
 800d3d8:	4630      	mov	r0, r6
 800d3da:	f7fd fab1 	bl	800a940 <_malloc_r>
 800d3de:	b948      	cbnz	r0, 800d3f4 <__smakebuf_r+0x44>
 800d3e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d3e4:	059a      	lsls	r2, r3, #22
 800d3e6:	d4ef      	bmi.n	800d3c8 <__smakebuf_r+0x18>
 800d3e8:	f023 0303 	bic.w	r3, r3, #3
 800d3ec:	f043 0302 	orr.w	r3, r3, #2
 800d3f0:	81a3      	strh	r3, [r4, #12]
 800d3f2:	e7e3      	b.n	800d3bc <__smakebuf_r+0xc>
 800d3f4:	89a3      	ldrh	r3, [r4, #12]
 800d3f6:	6020      	str	r0, [r4, #0]
 800d3f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d3fc:	81a3      	strh	r3, [r4, #12]
 800d3fe:	9b00      	ldr	r3, [sp, #0]
 800d400:	6163      	str	r3, [r4, #20]
 800d402:	9b01      	ldr	r3, [sp, #4]
 800d404:	6120      	str	r0, [r4, #16]
 800d406:	b15b      	cbz	r3, 800d420 <__smakebuf_r+0x70>
 800d408:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d40c:	4630      	mov	r0, r6
 800d40e:	f000 f81d 	bl	800d44c <_isatty_r>
 800d412:	b128      	cbz	r0, 800d420 <__smakebuf_r+0x70>
 800d414:	89a3      	ldrh	r3, [r4, #12]
 800d416:	f023 0303 	bic.w	r3, r3, #3
 800d41a:	f043 0301 	orr.w	r3, r3, #1
 800d41e:	81a3      	strh	r3, [r4, #12]
 800d420:	89a3      	ldrh	r3, [r4, #12]
 800d422:	431d      	orrs	r5, r3
 800d424:	81a5      	strh	r5, [r4, #12]
 800d426:	e7cf      	b.n	800d3c8 <__smakebuf_r+0x18>

0800d428 <_fstat_r>:
 800d428:	b538      	push	{r3, r4, r5, lr}
 800d42a:	4d07      	ldr	r5, [pc, #28]	; (800d448 <_fstat_r+0x20>)
 800d42c:	2300      	movs	r3, #0
 800d42e:	4604      	mov	r4, r0
 800d430:	4608      	mov	r0, r1
 800d432:	4611      	mov	r1, r2
 800d434:	602b      	str	r3, [r5, #0]
 800d436:	f7f3 ff95 	bl	8001364 <_fstat>
 800d43a:	1c43      	adds	r3, r0, #1
 800d43c:	d102      	bne.n	800d444 <_fstat_r+0x1c>
 800d43e:	682b      	ldr	r3, [r5, #0]
 800d440:	b103      	cbz	r3, 800d444 <_fstat_r+0x1c>
 800d442:	6023      	str	r3, [r4, #0]
 800d444:	bd38      	pop	{r3, r4, r5, pc}
 800d446:	bf00      	nop
 800d448:	24002518 	.word	0x24002518

0800d44c <_isatty_r>:
 800d44c:	b538      	push	{r3, r4, r5, lr}
 800d44e:	4d06      	ldr	r5, [pc, #24]	; (800d468 <_isatty_r+0x1c>)
 800d450:	2300      	movs	r3, #0
 800d452:	4604      	mov	r4, r0
 800d454:	4608      	mov	r0, r1
 800d456:	602b      	str	r3, [r5, #0]
 800d458:	f7f3 ff8a 	bl	8001370 <_isatty>
 800d45c:	1c43      	adds	r3, r0, #1
 800d45e:	d102      	bne.n	800d466 <_isatty_r+0x1a>
 800d460:	682b      	ldr	r3, [r5, #0]
 800d462:	b103      	cbz	r3, 800d466 <_isatty_r+0x1a>
 800d464:	6023      	str	r3, [r4, #0]
 800d466:	bd38      	pop	{r3, r4, r5, pc}
 800d468:	24002518 	.word	0x24002518

0800d46c <sqrtf>:
 800d46c:	b508      	push	{r3, lr}
 800d46e:	ed2d 8b02 	vpush	{d8}
 800d472:	eeb0 8a40 	vmov.f32	s16, s0
 800d476:	f000 f817 	bl	800d4a8 <__ieee754_sqrtf>
 800d47a:	eeb4 8a48 	vcmp.f32	s16, s16
 800d47e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d482:	d60c      	bvs.n	800d49e <sqrtf+0x32>
 800d484:	eddf 8a07 	vldr	s17, [pc, #28]	; 800d4a4 <sqrtf+0x38>
 800d488:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800d48c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d490:	d505      	bpl.n	800d49e <sqrtf+0x32>
 800d492:	f7fe f891 	bl	800b5b8 <__errno>
 800d496:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800d49a:	2321      	movs	r3, #33	; 0x21
 800d49c:	6003      	str	r3, [r0, #0]
 800d49e:	ecbd 8b02 	vpop	{d8}
 800d4a2:	bd08      	pop	{r3, pc}
 800d4a4:	00000000 	.word	0x00000000

0800d4a8 <__ieee754_sqrtf>:
 800d4a8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800d4ac:	4770      	bx	lr
	...

0800d4b0 <_init>:
 800d4b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4b2:	bf00      	nop
 800d4b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d4b6:	bc08      	pop	{r3}
 800d4b8:	469e      	mov	lr, r3
 800d4ba:	4770      	bx	lr

0800d4bc <_fini>:
 800d4bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4be:	bf00      	nop
 800d4c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d4c2:	bc08      	pop	{r3}
 800d4c4:	469e      	mov	lr, r3
 800d4c6:	4770      	bx	lr
