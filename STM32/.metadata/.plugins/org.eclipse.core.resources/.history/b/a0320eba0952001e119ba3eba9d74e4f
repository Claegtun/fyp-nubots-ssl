/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2023 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "dma.h"
#include "eth.h"
#include "spi.h"
#include "tim.h"
#include "usart.h"
#include "usb_otg.h"
#include "gpio.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
//#define SERIAL_NPARA

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */

volatile static uint16_t data_buffer[4][1024];
volatile static uint32_t rx_buffer[1024];

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void DMA_TIM8_callback(DMA_HandleTypeDef* hdma);

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_DMA_Init();
  MX_USB_OTG_HS_USB_Init();
  MX_ETH_Init();
  MX_SPI1_Init();
  MX_TIM8_Init();
  MX_TIM2_Init();
  MX_USART3_UART_Init();
  MX_TIM3_Init();
  MX_SPI2_Init();
  MX_SPI3_Init();
  MX_SPI4_Init();
  MX_TIM4_Init();
  MX_TIM23_Init();
  /* USER CODE BEGIN 2 */

  // Disable the count.
  //TIM8->CR1 &= ~TIM_CR1_CEN;
  // Select TI2 as the input.
  //TIM8->CCMR1 |= TIM_CCMR1_CC2S_0;
  // ?
  //TIM8->CCER |= TIM_CCER_CC2P;
  //TIM8->ARR = 11;
  //TIM8->CCR1 = 6;
  //TIM8->RCR = 32;

  // Disable the count.
  //TIM3->CR1 &= ~TIM_CR1_CEN;
  // Select TI2 as the input.
  //TIM3->CCMR1 |= TIM_CCMR1_CC2S_0;
  // ?
  //TIM3->CCER |= TIM_CCER_CC2P;
  //TIM3->ARR = 399;
  //TIM3->CCR1 = 1;

#ifndef SERIAL_NPARA
  CLEAR_BIT(TIM8->CR1, TIM_CR1_ARPE);
  TIM8->ARR = 53; //27
  TIM8->CCR1 = 40; //14
  TIM8->RCR = 7;
  SET_BIT(TIM8->CR1, TIM_CR1_ARPE);

  //SET_BIT(TIM8->CCER, TIM_CCER_CC1P);
#endif

  // Reset the ADC.
  HAL_GPIO_WritePin(ADC_RESET_GPIO_Port, ADC_RESET_Pin, GPIO_PIN_SET);
  HAL_Delay(1); // > 3 us
  HAL_GPIO_WritePin(ADC_RESET_GPIO_Port, ADC_RESET_Pin, GPIO_PIN_RESET);
  HAL_Delay(1); // > 253 us

#ifndef SERIAL_NPARA
  GPIOE->MODER = 0x00000000UL;

  //__HAL_TIM_ENABLE_DMA(&htim8, TIM_DMA_UPDATE);
  //htim8.hdma[TIM_DMA_ID_UPDATE]->XferCpltCallback = DMA_TIM8_callback;
  //HAL_DMA_Start_IT(htim8.hdma[TIM_DMA_ID_UPDATE], (uint32_t)&GPIOE->IDR, (uint32_t)rx_buffer, 8);

  TIM23->ARR = 434;
  TIM23->CCR1 = 430;

  __HAL_TIM_ENABLE_DMA(&htim23, TIM_DMA_CC1);
  htim8.hdma[TIM_DMA_ID_CC1]->XferCpltCallback = DMA_TIM8_callback;
  HAL_DMA_Start_IT(htim23.hdma[TIM_DMA_ID_CC1], (uint32_t)&GPIOE->IDR, (uint32_t)rx_buffer, 8);
#endif

  // Start the SCLK timer, the nCS timer, and the CONVST timer respectively.
  HAL_TIM_PWM_Start(&htim23, TIM_CHANNEL_1);
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);

#ifdef SERIAL_NPARA
  // Write to the configuration register that four data lines are needed.
  uint16_t tx_buffer[2] = {0x0210, 0x0000};
  uint16_t rx_buffer[2] = {0xAAAA, 0x0008};
  do {
	  tx_buffer[0] = 0x0210;
	  HAL_SPI_Transmit(&hspi1, (uint8_t*)&tx_buffer[0], 1, HAL_MAX_DELAY);
	  tx_buffer[0] = 0x4210;
	  HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&tx_buffer, (uint8_t*)&rx_buffer, 2, HAL_MAX_DELAY);
  } while(rx_buffer[1] != 0x0010);

  // Begin receiving data.
  CLEAR_BIT(TIM2->CR1, TIM_CR1_CEN);
  HAL_SPI_Receive_DMA(&hspi1, (uint8_t*)data_buffer[0], 1024);
  HAL_SPI_Receive_DMA(&hspi2, (uint8_t*)data_buffer[1], 1024);
  HAL_SPI_Receive_DMA(&hspi3, (uint8_t*)data_buffer[2], 1024);
  HAL_SPI_Receive_DMA(&hspi4, (uint8_t*)data_buffer[3], 1024);
  SET_BIT(TIM2->CR1, TIM_CR1_CEN);
#endif

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
	  HAL_Delay(500);
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 275;
  RCC_OscInitStruct.PLL.PLLP = 1;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
  {
    Error_Handler();
  }
}

/* USER CODE BEGIN 4 */

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
	if (hspi == &hspi1) {
		volatile int robert_frost = 0;
	}
}

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) {
	if (hspi == &hspi1) {
		volatile int robert_frost = 0;
	}
}

void DMA_TIM8_callback(DMA_HandleTypeDef* hdma) {
	if (hdma == htim8.hdma[TIM_DMA_ID_CC1]) {
		volatile int robert_frost = 0;
		HAL_GPIO_TogglePin(SIG_0_GPIO_Port, SIG_0_Pin);
	}
}


/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
