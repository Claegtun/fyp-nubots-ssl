
dev_board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ad64  080002cc  080002cc  000102cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800b030  0800b030  0001b030  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800b070  0800b070  0001b070  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800b078  0800b078  0001b078  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800b07c  0800b07c  0001b07c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  0800b080  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000010  0800b090  00020010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000070  0800b0f0  00020070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b88  240000d0  0800b150  000200d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000c58  0800b150  00020c58  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200fe  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d4a8  00000000  00000000  00020141  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000351a  00000000  00000000  0003d5e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001510  00000000  00000000  00040b08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001066  00000000  00000000  00042018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000358f0  00000000  00000000  0004307e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001de36  00000000  00000000  0007896e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00155ebc  00000000  00000000  000967a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000591c  00000000  00000000  001ec660  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008b  00000000  00000000  001f1f7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	; (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	; (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	240000d0 	.word	0x240000d0
 80002e8:	00000000 	.word	0x00000000
 80002ec:	0800b018 	.word	0x0800b018

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	; (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	; (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	; (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	240000d4 	.word	0x240000d4
 8000308:	0800b018 	.word	0x0800b018

0800030c <__aeabi_uldivmod>:
 800030c:	b953      	cbnz	r3, 8000324 <__aeabi_uldivmod+0x18>
 800030e:	b94a      	cbnz	r2, 8000324 <__aeabi_uldivmod+0x18>
 8000310:	2900      	cmp	r1, #0
 8000312:	bf08      	it	eq
 8000314:	2800      	cmpeq	r0, #0
 8000316:	bf1c      	itt	ne
 8000318:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800031c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000320:	f000 b970 	b.w	8000604 <__aeabi_idiv0>
 8000324:	f1ad 0c08 	sub.w	ip, sp, #8
 8000328:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800032c:	f000 f806 	bl	800033c <__udivmoddi4>
 8000330:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000338:	b004      	add	sp, #16
 800033a:	4770      	bx	lr

0800033c <__udivmoddi4>:
 800033c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000340:	9e08      	ldr	r6, [sp, #32]
 8000342:	460d      	mov	r5, r1
 8000344:	4604      	mov	r4, r0
 8000346:	460f      	mov	r7, r1
 8000348:	2b00      	cmp	r3, #0
 800034a:	d14a      	bne.n	80003e2 <__udivmoddi4+0xa6>
 800034c:	428a      	cmp	r2, r1
 800034e:	4694      	mov	ip, r2
 8000350:	d965      	bls.n	800041e <__udivmoddi4+0xe2>
 8000352:	fab2 f382 	clz	r3, r2
 8000356:	b143      	cbz	r3, 800036a <__udivmoddi4+0x2e>
 8000358:	fa02 fc03 	lsl.w	ip, r2, r3
 800035c:	f1c3 0220 	rsb	r2, r3, #32
 8000360:	409f      	lsls	r7, r3
 8000362:	fa20 f202 	lsr.w	r2, r0, r2
 8000366:	4317      	orrs	r7, r2
 8000368:	409c      	lsls	r4, r3
 800036a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800036e:	fa1f f58c 	uxth.w	r5, ip
 8000372:	fbb7 f1fe 	udiv	r1, r7, lr
 8000376:	0c22      	lsrs	r2, r4, #16
 8000378:	fb0e 7711 	mls	r7, lr, r1, r7
 800037c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000380:	fb01 f005 	mul.w	r0, r1, r5
 8000384:	4290      	cmp	r0, r2
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x62>
 8000388:	eb1c 0202 	adds.w	r2, ip, r2
 800038c:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000390:	f080 811c 	bcs.w	80005cc <__udivmoddi4+0x290>
 8000394:	4290      	cmp	r0, r2
 8000396:	f240 8119 	bls.w	80005cc <__udivmoddi4+0x290>
 800039a:	3902      	subs	r1, #2
 800039c:	4462      	add	r2, ip
 800039e:	1a12      	subs	r2, r2, r0
 80003a0:	b2a4      	uxth	r4, r4
 80003a2:	fbb2 f0fe 	udiv	r0, r2, lr
 80003a6:	fb0e 2210 	mls	r2, lr, r0, r2
 80003aa:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003ae:	fb00 f505 	mul.w	r5, r0, r5
 80003b2:	42a5      	cmp	r5, r4
 80003b4:	d90a      	bls.n	80003cc <__udivmoddi4+0x90>
 80003b6:	eb1c 0404 	adds.w	r4, ip, r4
 80003ba:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003be:	f080 8107 	bcs.w	80005d0 <__udivmoddi4+0x294>
 80003c2:	42a5      	cmp	r5, r4
 80003c4:	f240 8104 	bls.w	80005d0 <__udivmoddi4+0x294>
 80003c8:	4464      	add	r4, ip
 80003ca:	3802      	subs	r0, #2
 80003cc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003d0:	1b64      	subs	r4, r4, r5
 80003d2:	2100      	movs	r1, #0
 80003d4:	b11e      	cbz	r6, 80003de <__udivmoddi4+0xa2>
 80003d6:	40dc      	lsrs	r4, r3
 80003d8:	2300      	movs	r3, #0
 80003da:	e9c6 4300 	strd	r4, r3, [r6]
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	428b      	cmp	r3, r1
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0xbc>
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	f000 80ed 	beq.w	80005c6 <__udivmoddi4+0x28a>
 80003ec:	2100      	movs	r1, #0
 80003ee:	e9c6 0500 	strd	r0, r5, [r6]
 80003f2:	4608      	mov	r0, r1
 80003f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003f8:	fab3 f183 	clz	r1, r3
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d149      	bne.n	8000494 <__udivmoddi4+0x158>
 8000400:	42ab      	cmp	r3, r5
 8000402:	d302      	bcc.n	800040a <__udivmoddi4+0xce>
 8000404:	4282      	cmp	r2, r0
 8000406:	f200 80f8 	bhi.w	80005fa <__udivmoddi4+0x2be>
 800040a:	1a84      	subs	r4, r0, r2
 800040c:	eb65 0203 	sbc.w	r2, r5, r3
 8000410:	2001      	movs	r0, #1
 8000412:	4617      	mov	r7, r2
 8000414:	2e00      	cmp	r6, #0
 8000416:	d0e2      	beq.n	80003de <__udivmoddi4+0xa2>
 8000418:	e9c6 4700 	strd	r4, r7, [r6]
 800041c:	e7df      	b.n	80003de <__udivmoddi4+0xa2>
 800041e:	b902      	cbnz	r2, 8000422 <__udivmoddi4+0xe6>
 8000420:	deff      	udf	#255	; 0xff
 8000422:	fab2 f382 	clz	r3, r2
 8000426:	2b00      	cmp	r3, #0
 8000428:	f040 8090 	bne.w	800054c <__udivmoddi4+0x210>
 800042c:	1a8a      	subs	r2, r1, r2
 800042e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000432:	fa1f fe8c 	uxth.w	lr, ip
 8000436:	2101      	movs	r1, #1
 8000438:	fbb2 f5f7 	udiv	r5, r2, r7
 800043c:	fb07 2015 	mls	r0, r7, r5, r2
 8000440:	0c22      	lsrs	r2, r4, #16
 8000442:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000446:	fb0e f005 	mul.w	r0, lr, r5
 800044a:	4290      	cmp	r0, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x124>
 800044e:	eb1c 0202 	adds.w	r2, ip, r2
 8000452:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000456:	d202      	bcs.n	800045e <__udivmoddi4+0x122>
 8000458:	4290      	cmp	r0, r2
 800045a:	f200 80cb 	bhi.w	80005f4 <__udivmoddi4+0x2b8>
 800045e:	4645      	mov	r5, r8
 8000460:	1a12      	subs	r2, r2, r0
 8000462:	b2a4      	uxth	r4, r4
 8000464:	fbb2 f0f7 	udiv	r0, r2, r7
 8000468:	fb07 2210 	mls	r2, r7, r0, r2
 800046c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000470:	fb0e fe00 	mul.w	lr, lr, r0
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x14e>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000480:	d202      	bcs.n	8000488 <__udivmoddi4+0x14c>
 8000482:	45a6      	cmp	lr, r4
 8000484:	f200 80bb 	bhi.w	80005fe <__udivmoddi4+0x2c2>
 8000488:	4610      	mov	r0, r2
 800048a:	eba4 040e 	sub.w	r4, r4, lr
 800048e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000492:	e79f      	b.n	80003d4 <__udivmoddi4+0x98>
 8000494:	f1c1 0720 	rsb	r7, r1, #32
 8000498:	408b      	lsls	r3, r1
 800049a:	fa22 fc07 	lsr.w	ip, r2, r7
 800049e:	ea4c 0c03 	orr.w	ip, ip, r3
 80004a2:	fa05 f401 	lsl.w	r4, r5, r1
 80004a6:	fa20 f307 	lsr.w	r3, r0, r7
 80004aa:	40fd      	lsrs	r5, r7
 80004ac:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004b0:	4323      	orrs	r3, r4
 80004b2:	fbb5 f8f9 	udiv	r8, r5, r9
 80004b6:	fa1f fe8c 	uxth.w	lr, ip
 80004ba:	fb09 5518 	mls	r5, r9, r8, r5
 80004be:	0c1c      	lsrs	r4, r3, #16
 80004c0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004c4:	fb08 f50e 	mul.w	r5, r8, lr
 80004c8:	42a5      	cmp	r5, r4
 80004ca:	fa02 f201 	lsl.w	r2, r2, r1
 80004ce:	fa00 f001 	lsl.w	r0, r0, r1
 80004d2:	d90b      	bls.n	80004ec <__udivmoddi4+0x1b0>
 80004d4:	eb1c 0404 	adds.w	r4, ip, r4
 80004d8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004dc:	f080 8088 	bcs.w	80005f0 <__udivmoddi4+0x2b4>
 80004e0:	42a5      	cmp	r5, r4
 80004e2:	f240 8085 	bls.w	80005f0 <__udivmoddi4+0x2b4>
 80004e6:	f1a8 0802 	sub.w	r8, r8, #2
 80004ea:	4464      	add	r4, ip
 80004ec:	1b64      	subs	r4, r4, r5
 80004ee:	b29d      	uxth	r5, r3
 80004f0:	fbb4 f3f9 	udiv	r3, r4, r9
 80004f4:	fb09 4413 	mls	r4, r9, r3, r4
 80004f8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004fc:	fb03 fe0e 	mul.w	lr, r3, lr
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x1da>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 800050c:	d26c      	bcs.n	80005e8 <__udivmoddi4+0x2ac>
 800050e:	45a6      	cmp	lr, r4
 8000510:	d96a      	bls.n	80005e8 <__udivmoddi4+0x2ac>
 8000512:	3b02      	subs	r3, #2
 8000514:	4464      	add	r4, ip
 8000516:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800051a:	fba3 9502 	umull	r9, r5, r3, r2
 800051e:	eba4 040e 	sub.w	r4, r4, lr
 8000522:	42ac      	cmp	r4, r5
 8000524:	46c8      	mov	r8, r9
 8000526:	46ae      	mov	lr, r5
 8000528:	d356      	bcc.n	80005d8 <__udivmoddi4+0x29c>
 800052a:	d053      	beq.n	80005d4 <__udivmoddi4+0x298>
 800052c:	b156      	cbz	r6, 8000544 <__udivmoddi4+0x208>
 800052e:	ebb0 0208 	subs.w	r2, r0, r8
 8000532:	eb64 040e 	sbc.w	r4, r4, lr
 8000536:	fa04 f707 	lsl.w	r7, r4, r7
 800053a:	40ca      	lsrs	r2, r1
 800053c:	40cc      	lsrs	r4, r1
 800053e:	4317      	orrs	r7, r2
 8000540:	e9c6 7400 	strd	r7, r4, [r6]
 8000544:	4618      	mov	r0, r3
 8000546:	2100      	movs	r1, #0
 8000548:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800054c:	f1c3 0120 	rsb	r1, r3, #32
 8000550:	fa02 fc03 	lsl.w	ip, r2, r3
 8000554:	fa20 f201 	lsr.w	r2, r0, r1
 8000558:	fa25 f101 	lsr.w	r1, r5, r1
 800055c:	409d      	lsls	r5, r3
 800055e:	432a      	orrs	r2, r5
 8000560:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000564:	fa1f fe8c 	uxth.w	lr, ip
 8000568:	fbb1 f0f7 	udiv	r0, r1, r7
 800056c:	fb07 1510 	mls	r5, r7, r0, r1
 8000570:	0c11      	lsrs	r1, r2, #16
 8000572:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000576:	fb00 f50e 	mul.w	r5, r0, lr
 800057a:	428d      	cmp	r5, r1
 800057c:	fa04 f403 	lsl.w	r4, r4, r3
 8000580:	d908      	bls.n	8000594 <__udivmoddi4+0x258>
 8000582:	eb1c 0101 	adds.w	r1, ip, r1
 8000586:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800058a:	d22f      	bcs.n	80005ec <__udivmoddi4+0x2b0>
 800058c:	428d      	cmp	r5, r1
 800058e:	d92d      	bls.n	80005ec <__udivmoddi4+0x2b0>
 8000590:	3802      	subs	r0, #2
 8000592:	4461      	add	r1, ip
 8000594:	1b49      	subs	r1, r1, r5
 8000596:	b292      	uxth	r2, r2
 8000598:	fbb1 f5f7 	udiv	r5, r1, r7
 800059c:	fb07 1115 	mls	r1, r7, r5, r1
 80005a0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005a4:	fb05 f10e 	mul.w	r1, r5, lr
 80005a8:	4291      	cmp	r1, r2
 80005aa:	d908      	bls.n	80005be <__udivmoddi4+0x282>
 80005ac:	eb1c 0202 	adds.w	r2, ip, r2
 80005b0:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80005b4:	d216      	bcs.n	80005e4 <__udivmoddi4+0x2a8>
 80005b6:	4291      	cmp	r1, r2
 80005b8:	d914      	bls.n	80005e4 <__udivmoddi4+0x2a8>
 80005ba:	3d02      	subs	r5, #2
 80005bc:	4462      	add	r2, ip
 80005be:	1a52      	subs	r2, r2, r1
 80005c0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005c4:	e738      	b.n	8000438 <__udivmoddi4+0xfc>
 80005c6:	4631      	mov	r1, r6
 80005c8:	4630      	mov	r0, r6
 80005ca:	e708      	b.n	80003de <__udivmoddi4+0xa2>
 80005cc:	4639      	mov	r1, r7
 80005ce:	e6e6      	b.n	800039e <__udivmoddi4+0x62>
 80005d0:	4610      	mov	r0, r2
 80005d2:	e6fb      	b.n	80003cc <__udivmoddi4+0x90>
 80005d4:	4548      	cmp	r0, r9
 80005d6:	d2a9      	bcs.n	800052c <__udivmoddi4+0x1f0>
 80005d8:	ebb9 0802 	subs.w	r8, r9, r2
 80005dc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005e0:	3b01      	subs	r3, #1
 80005e2:	e7a3      	b.n	800052c <__udivmoddi4+0x1f0>
 80005e4:	4645      	mov	r5, r8
 80005e6:	e7ea      	b.n	80005be <__udivmoddi4+0x282>
 80005e8:	462b      	mov	r3, r5
 80005ea:	e794      	b.n	8000516 <__udivmoddi4+0x1da>
 80005ec:	4640      	mov	r0, r8
 80005ee:	e7d1      	b.n	8000594 <__udivmoddi4+0x258>
 80005f0:	46d0      	mov	r8, sl
 80005f2:	e77b      	b.n	80004ec <__udivmoddi4+0x1b0>
 80005f4:	3d02      	subs	r5, #2
 80005f6:	4462      	add	r2, ip
 80005f8:	e732      	b.n	8000460 <__udivmoddi4+0x124>
 80005fa:	4608      	mov	r0, r1
 80005fc:	e70a      	b.n	8000414 <__udivmoddi4+0xd8>
 80005fe:	4464      	add	r4, ip
 8000600:	3802      	subs	r0, #2
 8000602:	e742      	b.n	800048a <__udivmoddi4+0x14e>

08000604 <__aeabi_idiv0>:
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop

08000608 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800060e:	4b0d      	ldr	r3, [pc, #52]	; (8000644 <MX_DMA_Init+0x3c>)
 8000610:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000614:	4a0b      	ldr	r2, [pc, #44]	; (8000644 <MX_DMA_Init+0x3c>)
 8000616:	f043 0301 	orr.w	r3, r3, #1
 800061a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800061e:	4b09      	ldr	r3, [pc, #36]	; (8000644 <MX_DMA_Init+0x3c>)
 8000620:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000624:	f003 0301 	and.w	r3, r3, #1
 8000628:	607b      	str	r3, [r7, #4]
 800062a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800062c:	2200      	movs	r2, #0
 800062e:	2100      	movs	r1, #0
 8000630:	200b      	movs	r0, #11
 8000632:	f001 fa9e 	bl	8001b72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000636:	200b      	movs	r0, #11
 8000638:	f001 fab5 	bl	8001ba6 <HAL_NVIC_EnableIRQ>

}
 800063c:	bf00      	nop
 800063e:	3708      	adds	r7, #8
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	58024400 	.word	0x58024400

08000648 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800064c:	4b1e      	ldr	r3, [pc, #120]	; (80006c8 <MX_ETH_Init+0x80>)
 800064e:	4a1f      	ldr	r2, [pc, #124]	; (80006cc <MX_ETH_Init+0x84>)
 8000650:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000652:	4b1f      	ldr	r3, [pc, #124]	; (80006d0 <MX_ETH_Init+0x88>)
 8000654:	2200      	movs	r2, #0
 8000656:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000658:	4b1d      	ldr	r3, [pc, #116]	; (80006d0 <MX_ETH_Init+0x88>)
 800065a:	2280      	movs	r2, #128	; 0x80
 800065c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800065e:	4b1c      	ldr	r3, [pc, #112]	; (80006d0 <MX_ETH_Init+0x88>)
 8000660:	22e1      	movs	r2, #225	; 0xe1
 8000662:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000664:	4b1a      	ldr	r3, [pc, #104]	; (80006d0 <MX_ETH_Init+0x88>)
 8000666:	2200      	movs	r2, #0
 8000668:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800066a:	4b19      	ldr	r3, [pc, #100]	; (80006d0 <MX_ETH_Init+0x88>)
 800066c:	2200      	movs	r2, #0
 800066e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000670:	4b17      	ldr	r3, [pc, #92]	; (80006d0 <MX_ETH_Init+0x88>)
 8000672:	2200      	movs	r2, #0
 8000674:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000676:	4b14      	ldr	r3, [pc, #80]	; (80006c8 <MX_ETH_Init+0x80>)
 8000678:	4a15      	ldr	r2, [pc, #84]	; (80006d0 <MX_ETH_Init+0x88>)
 800067a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800067c:	4b12      	ldr	r3, [pc, #72]	; (80006c8 <MX_ETH_Init+0x80>)
 800067e:	2201      	movs	r2, #1
 8000680:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000682:	4b11      	ldr	r3, [pc, #68]	; (80006c8 <MX_ETH_Init+0x80>)
 8000684:	4a13      	ldr	r2, [pc, #76]	; (80006d4 <MX_ETH_Init+0x8c>)
 8000686:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000688:	4b0f      	ldr	r3, [pc, #60]	; (80006c8 <MX_ETH_Init+0x80>)
 800068a:	4a13      	ldr	r2, [pc, #76]	; (80006d8 <MX_ETH_Init+0x90>)
 800068c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800068e:	4b0e      	ldr	r3, [pc, #56]	; (80006c8 <MX_ETH_Init+0x80>)
 8000690:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000694:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000696:	480c      	ldr	r0, [pc, #48]	; (80006c8 <MX_ETH_Init+0x80>)
 8000698:	f003 fdc6 	bl	8004228 <HAL_ETH_Init>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 80006a2:	f000 fb69 	bl	8000d78 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80006a6:	2238      	movs	r2, #56	; 0x38
 80006a8:	2100      	movs	r1, #0
 80006aa:	480c      	ldr	r0, [pc, #48]	; (80006dc <MX_ETH_Init+0x94>)
 80006ac:	f00a fc88 	bl	800afc0 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80006b0:	4b0a      	ldr	r3, [pc, #40]	; (80006dc <MX_ETH_Init+0x94>)
 80006b2:	2221      	movs	r2, #33	; 0x21
 80006b4:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80006b6:	4b09      	ldr	r3, [pc, #36]	; (80006dc <MX_ETH_Init+0x94>)
 80006b8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80006bc:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80006be:	4b07      	ldr	r3, [pc, #28]	; (80006dc <MX_ETH_Init+0x94>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80006c4:	bf00      	nop
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	24000124 	.word	0x24000124
 80006cc:	40028000 	.word	0x40028000
 80006d0:	240001d4 	.word	0x240001d4
 80006d4:	24000070 	.word	0x24000070
 80006d8:	24000010 	.word	0x24000010
 80006dc:	240000ec 	.word	0x240000ec

080006e0 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b08e      	sub	sp, #56	; 0x38
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006ec:	2200      	movs	r2, #0
 80006ee:	601a      	str	r2, [r3, #0]
 80006f0:	605a      	str	r2, [r3, #4]
 80006f2:	609a      	str	r2, [r3, #8]
 80006f4:	60da      	str	r2, [r3, #12]
 80006f6:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a59      	ldr	r2, [pc, #356]	; (8000864 <HAL_ETH_MspInit+0x184>)
 80006fe:	4293      	cmp	r3, r2
 8000700:	f040 80ab 	bne.w	800085a <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000704:	4b58      	ldr	r3, [pc, #352]	; (8000868 <HAL_ETH_MspInit+0x188>)
 8000706:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800070a:	4a57      	ldr	r2, [pc, #348]	; (8000868 <HAL_ETH_MspInit+0x188>)
 800070c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000710:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000714:	4b54      	ldr	r3, [pc, #336]	; (8000868 <HAL_ETH_MspInit+0x188>)
 8000716:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800071a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800071e:	623b      	str	r3, [r7, #32]
 8000720:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000722:	4b51      	ldr	r3, [pc, #324]	; (8000868 <HAL_ETH_MspInit+0x188>)
 8000724:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000728:	4a4f      	ldr	r2, [pc, #316]	; (8000868 <HAL_ETH_MspInit+0x188>)
 800072a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800072e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000732:	4b4d      	ldr	r3, [pc, #308]	; (8000868 <HAL_ETH_MspInit+0x188>)
 8000734:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000738:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800073c:	61fb      	str	r3, [r7, #28]
 800073e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000740:	4b49      	ldr	r3, [pc, #292]	; (8000868 <HAL_ETH_MspInit+0x188>)
 8000742:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000746:	4a48      	ldr	r2, [pc, #288]	; (8000868 <HAL_ETH_MspInit+0x188>)
 8000748:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800074c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000750:	4b45      	ldr	r3, [pc, #276]	; (8000868 <HAL_ETH_MspInit+0x188>)
 8000752:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000756:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800075a:	61bb      	str	r3, [r7, #24]
 800075c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800075e:	4b42      	ldr	r3, [pc, #264]	; (8000868 <HAL_ETH_MspInit+0x188>)
 8000760:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000764:	4a40      	ldr	r2, [pc, #256]	; (8000868 <HAL_ETH_MspInit+0x188>)
 8000766:	f043 0304 	orr.w	r3, r3, #4
 800076a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800076e:	4b3e      	ldr	r3, [pc, #248]	; (8000868 <HAL_ETH_MspInit+0x188>)
 8000770:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000774:	f003 0304 	and.w	r3, r3, #4
 8000778:	617b      	str	r3, [r7, #20]
 800077a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800077c:	4b3a      	ldr	r3, [pc, #232]	; (8000868 <HAL_ETH_MspInit+0x188>)
 800077e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000782:	4a39      	ldr	r2, [pc, #228]	; (8000868 <HAL_ETH_MspInit+0x188>)
 8000784:	f043 0301 	orr.w	r3, r3, #1
 8000788:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800078c:	4b36      	ldr	r3, [pc, #216]	; (8000868 <HAL_ETH_MspInit+0x188>)
 800078e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000792:	f003 0301 	and.w	r3, r3, #1
 8000796:	613b      	str	r3, [r7, #16]
 8000798:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800079a:	4b33      	ldr	r3, [pc, #204]	; (8000868 <HAL_ETH_MspInit+0x188>)
 800079c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007a0:	4a31      	ldr	r2, [pc, #196]	; (8000868 <HAL_ETH_MspInit+0x188>)
 80007a2:	f043 0302 	orr.w	r3, r3, #2
 80007a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007aa:	4b2f      	ldr	r3, [pc, #188]	; (8000868 <HAL_ETH_MspInit+0x188>)
 80007ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007b0:	f003 0302 	and.w	r3, r3, #2
 80007b4:	60fb      	str	r3, [r7, #12]
 80007b6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80007b8:	4b2b      	ldr	r3, [pc, #172]	; (8000868 <HAL_ETH_MspInit+0x188>)
 80007ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007be:	4a2a      	ldr	r2, [pc, #168]	; (8000868 <HAL_ETH_MspInit+0x188>)
 80007c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007c8:	4b27      	ldr	r3, [pc, #156]	; (8000868 <HAL_ETH_MspInit+0x188>)
 80007ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007d2:	60bb      	str	r3, [r7, #8]
 80007d4:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80007d6:	2332      	movs	r3, #50	; 0x32
 80007d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007da:	2302      	movs	r3, #2
 80007dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007de:	2300      	movs	r3, #0
 80007e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e2:	2300      	movs	r3, #0
 80007e4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007e6:	230b      	movs	r3, #11
 80007e8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007ee:	4619      	mov	r1, r3
 80007f0:	481e      	ldr	r0, [pc, #120]	; (800086c <HAL_ETH_MspInit+0x18c>)
 80007f2:	f004 f93d 	bl	8004a70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80007f6:	2386      	movs	r3, #134	; 0x86
 80007f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007fa:	2302      	movs	r3, #2
 80007fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fe:	2300      	movs	r3, #0
 8000800:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000802:	2300      	movs	r3, #0
 8000804:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000806:	230b      	movs	r3, #11
 8000808:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800080a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800080e:	4619      	mov	r1, r3
 8000810:	4817      	ldr	r0, [pc, #92]	; (8000870 <HAL_ETH_MspInit+0x190>)
 8000812:	f004 f92d 	bl	8004a70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000816:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800081a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800081c:	2302      	movs	r3, #2
 800081e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000820:	2300      	movs	r3, #0
 8000822:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000824:	2300      	movs	r3, #0
 8000826:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000828:	230b      	movs	r3, #11
 800082a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800082c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000830:	4619      	mov	r1, r3
 8000832:	4810      	ldr	r0, [pc, #64]	; (8000874 <HAL_ETH_MspInit+0x194>)
 8000834:	f004 f91c 	bl	8004a70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000838:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800083c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800083e:	2302      	movs	r3, #2
 8000840:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000842:	2300      	movs	r3, #0
 8000844:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000846:	2300      	movs	r3, #0
 8000848:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800084a:	230b      	movs	r3, #11
 800084c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800084e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000852:	4619      	mov	r1, r3
 8000854:	4808      	ldr	r0, [pc, #32]	; (8000878 <HAL_ETH_MspInit+0x198>)
 8000856:	f004 f90b 	bl	8004a70 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800085a:	bf00      	nop
 800085c:	3738      	adds	r7, #56	; 0x38
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	40028000 	.word	0x40028000
 8000868:	58024400 	.word	0x58024400
 800086c:	58020800 	.word	0x58020800
 8000870:	58020000 	.word	0x58020000
 8000874:	58020400 	.word	0x58020400
 8000878:	58021800 	.word	0x58021800

0800087c <MX_GPIO_Init>:
     PA8   ------> S_TIM1_CH1
     PA9   ------> USB_OTG_HS_VBUS
     PA10   ------> USB_OTG_HS_ID
*/
void MX_GPIO_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b08c      	sub	sp, #48	; 0x30
 8000880:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000882:	f107 031c 	add.w	r3, r7, #28
 8000886:	2200      	movs	r2, #0
 8000888:	601a      	str	r2, [r3, #0]
 800088a:	605a      	str	r2, [r3, #4]
 800088c:	609a      	str	r2, [r3, #8]
 800088e:	60da      	str	r2, [r3, #12]
 8000890:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000892:	4b8e      	ldr	r3, [pc, #568]	; (8000acc <MX_GPIO_Init+0x250>)
 8000894:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000898:	4a8c      	ldr	r2, [pc, #560]	; (8000acc <MX_GPIO_Init+0x250>)
 800089a:	f043 0304 	orr.w	r3, r3, #4
 800089e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008a2:	4b8a      	ldr	r3, [pc, #552]	; (8000acc <MX_GPIO_Init+0x250>)
 80008a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008a8:	f003 0304 	and.w	r3, r3, #4
 80008ac:	61bb      	str	r3, [r7, #24]
 80008ae:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008b0:	4b86      	ldr	r3, [pc, #536]	; (8000acc <MX_GPIO_Init+0x250>)
 80008b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008b6:	4a85      	ldr	r2, [pc, #532]	; (8000acc <MX_GPIO_Init+0x250>)
 80008b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008c0:	4b82      	ldr	r3, [pc, #520]	; (8000acc <MX_GPIO_Init+0x250>)
 80008c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008ca:	617b      	str	r3, [r7, #20]
 80008cc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ce:	4b7f      	ldr	r3, [pc, #508]	; (8000acc <MX_GPIO_Init+0x250>)
 80008d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008d4:	4a7d      	ldr	r2, [pc, #500]	; (8000acc <MX_GPIO_Init+0x250>)
 80008d6:	f043 0301 	orr.w	r3, r3, #1
 80008da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008de:	4b7b      	ldr	r3, [pc, #492]	; (8000acc <MX_GPIO_Init+0x250>)
 80008e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008e4:	f003 0301 	and.w	r3, r3, #1
 80008e8:	613b      	str	r3, [r7, #16]
 80008ea:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ec:	4b77      	ldr	r3, [pc, #476]	; (8000acc <MX_GPIO_Init+0x250>)
 80008ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008f2:	4a76      	ldr	r2, [pc, #472]	; (8000acc <MX_GPIO_Init+0x250>)
 80008f4:	f043 0302 	orr.w	r3, r3, #2
 80008f8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008fc:	4b73      	ldr	r3, [pc, #460]	; (8000acc <MX_GPIO_Init+0x250>)
 80008fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000902:	f003 0302 	and.w	r3, r3, #2
 8000906:	60fb      	str	r3, [r7, #12]
 8000908:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800090a:	4b70      	ldr	r3, [pc, #448]	; (8000acc <MX_GPIO_Init+0x250>)
 800090c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000910:	4a6e      	ldr	r2, [pc, #440]	; (8000acc <MX_GPIO_Init+0x250>)
 8000912:	f043 0308 	orr.w	r3, r3, #8
 8000916:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800091a:	4b6c      	ldr	r3, [pc, #432]	; (8000acc <MX_GPIO_Init+0x250>)
 800091c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000920:	f003 0308 	and.w	r3, r3, #8
 8000924:	60bb      	str	r3, [r7, #8]
 8000926:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000928:	4b68      	ldr	r3, [pc, #416]	; (8000acc <MX_GPIO_Init+0x250>)
 800092a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800092e:	4a67      	ldr	r2, [pc, #412]	; (8000acc <MX_GPIO_Init+0x250>)
 8000930:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000934:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000938:	4b64      	ldr	r3, [pc, #400]	; (8000acc <MX_GPIO_Init+0x250>)
 800093a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800093e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000942:	607b      	str	r3, [r7, #4]
 8000944:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000946:	4b61      	ldr	r3, [pc, #388]	; (8000acc <MX_GPIO_Init+0x250>)
 8000948:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800094c:	4a5f      	ldr	r2, [pc, #380]	; (8000acc <MX_GPIO_Init+0x250>)
 800094e:	f043 0310 	orr.w	r3, r3, #16
 8000952:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000956:	4b5d      	ldr	r3, [pc, #372]	; (8000acc <MX_GPIO_Init+0x250>)
 8000958:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800095c:	f003 0310 	and.w	r3, r3, #16
 8000960:	603b      	str	r3, [r7, #0]
 8000962:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ADC_CNVST_GPIO_Port, ADC_CNVST_Pin, GPIO_PIN_RESET);
 8000964:	2200      	movs	r2, #0
 8000966:	2108      	movs	r1, #8
 8000968:	4859      	ldr	r0, [pc, #356]	; (8000ad0 <MX_GPIO_Init+0x254>)
 800096a:	f004 fa29 	bl	8004dc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin|ADC_RESET_Pin, GPIO_PIN_RESET);
 800096e:	2200      	movs	r2, #0
 8000970:	f244 1101 	movw	r1, #16641	; 0x4101
 8000974:	4857      	ldr	r0, [pc, #348]	; (8000ad4 <MX_GPIO_Init+0x258>)
 8000976:	f004 fa23 	bl	8004dc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 800097a:	2200      	movs	r2, #0
 800097c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000980:	4855      	ldr	r0, [pc, #340]	; (8000ad8 <MX_GPIO_Init+0x25c>)
 8000982:	f004 fa1d 	bl	8004dc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000986:	2200      	movs	r2, #0
 8000988:	2102      	movs	r1, #2
 800098a:	4854      	ldr	r0, [pc, #336]	; (8000adc <MX_GPIO_Init+0x260>)
 800098c:	f004 fa18 	bl	8004dc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000990:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000994:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000996:	2300      	movs	r3, #0
 8000998:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099a:	2300      	movs	r3, #0
 800099c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800099e:	f107 031c 	add.w	r3, r7, #28
 80009a2:	4619      	mov	r1, r3
 80009a4:	484e      	ldr	r0, [pc, #312]	; (8000ae0 <MX_GPIO_Init+0x264>)
 80009a6:	f004 f863 	bl	8004a70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ADC_CNVST_Pin;
 80009aa:	2308      	movs	r3, #8
 80009ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ae:	2301      	movs	r3, #1
 80009b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b2:	2300      	movs	r3, #0
 80009b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b6:	2300      	movs	r3, #0
 80009b8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(ADC_CNVST_GPIO_Port, &GPIO_InitStruct);
 80009ba:	f107 031c 	add.w	r3, r7, #28
 80009be:	4619      	mov	r1, r3
 80009c0:	4843      	ldr	r0, [pc, #268]	; (8000ad0 <MX_GPIO_Init+0x254>)
 80009c2:	f004 f855 	bl	8004a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin|ADC_RESET_Pin;
 80009c6:	f244 1301 	movw	r3, #16641	; 0x4101
 80009ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009cc:	2301      	movs	r3, #1
 80009ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d0:	2300      	movs	r3, #0
 80009d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d4:	2300      	movs	r3, #0
 80009d6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009d8:	f107 031c 	add.w	r3, r7, #28
 80009dc:	4619      	mov	r1, r3
 80009de:	483d      	ldr	r0, [pc, #244]	; (8000ad4 <MX_GPIO_Init+0x258>)
 80009e0:	f004 f846 	bl	8004a70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 80009e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ea:	2301      	movs	r3, #1
 80009ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ee:	2300      	movs	r3, #0
 80009f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f2:	2300      	movs	r3, #0
 80009f4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80009f6:	f107 031c 	add.w	r3, r7, #28
 80009fa:	4619      	mov	r1, r3
 80009fc:	4836      	ldr	r0, [pc, #216]	; (8000ad8 <MX_GPIO_Init+0x25c>)
 80009fe:	f004 f837 	bl	8004a70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ADC_BUSY_Pin;
 8000a02:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000a06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a08:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ADC_BUSY_GPIO_Port, &GPIO_InitStruct);
 8000a12:	f107 031c 	add.w	r3, r7, #28
 8000a16:	4619      	mov	r1, r3
 8000a18:	482f      	ldr	r0, [pc, #188]	; (8000ad8 <MX_GPIO_Init+0x25c>)
 8000a1a:	f004 f829 	bl	8004a70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000a1e:	2380      	movs	r3, #128	; 0x80
 8000a20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a22:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000a2c:	f107 031c 	add.w	r3, r7, #28
 8000a30:	4619      	mov	r1, r3
 8000a32:	482c      	ldr	r0, [pc, #176]	; (8000ae4 <MX_GPIO_Init+0x268>)
 8000a34:	f004 f81c 	bl	8004a70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000a38:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a46:	2300      	movs	r3, #0
 8000a48:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a4e:	f107 031c 	add.w	r3, r7, #28
 8000a52:	4619      	mov	r1, r3
 8000a54:	481e      	ldr	r0, [pc, #120]	; (8000ad0 <MX_GPIO_Init+0x254>)
 8000a56:	f004 f80b 	bl	8004a70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000a5a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a60:	2300      	movs	r3, #0
 8000a62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a64:	2300      	movs	r3, #0
 8000a66:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000a68:	f107 031c 	add.w	r3, r7, #28
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	4818      	ldr	r0, [pc, #96]	; (8000ad0 <MX_GPIO_Init+0x254>)
 8000a70:	f003 fffe 	bl	8004a70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000a74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a82:	2300      	movs	r3, #0
 8000a84:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000a86:	230a      	movs	r3, #10
 8000a88:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000a8a:	f107 031c 	add.w	r3, r7, #28
 8000a8e:	4619      	mov	r1, r3
 8000a90:	480f      	ldr	r0, [pc, #60]	; (8000ad0 <MX_GPIO_Init+0x254>)
 8000a92:	f003 ffed 	bl	8004a70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8000a96:	2302      	movs	r3, #2
 8000a98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8000aa6:	f107 031c 	add.w	r3, r7, #28
 8000aaa:	4619      	mov	r1, r3
 8000aac:	480b      	ldr	r0, [pc, #44]	; (8000adc <MX_GPIO_Init+0x260>)
 8000aae:	f003 ffdf 	bl	8004a70 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	2028      	movs	r0, #40	; 0x28
 8000ab8:	f001 f85b 	bl	8001b72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000abc:	2028      	movs	r0, #40	; 0x28
 8000abe:	f001 f872 	bl	8001ba6 <HAL_NVIC_EnableIRQ>

}
 8000ac2:	bf00      	nop
 8000ac4:	3730      	adds	r7, #48	; 0x30
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	58024400 	.word	0x58024400
 8000ad0:	58020000 	.word	0x58020000
 8000ad4:	58020400 	.word	0x58020400
 8000ad8:	58020c00 	.word	0x58020c00
 8000adc:	58021000 	.word	0x58021000
 8000ae0:	58020800 	.word	0x58020800
 8000ae4:	58021800 	.word	0x58021800

08000ae8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b084      	sub	sp, #16
 8000aec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000aee:	f000 fe9b 	bl	8001828 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000af2:	f000 f897 	bl	8000c24 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  MX_DMA_Init();
 8000af6:	f7ff fd87 	bl	8000608 <MX_DMA_Init>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000afa:	f7ff febf 	bl	800087c <MX_GPIO_Init>
  MX_DMA_Init();
 8000afe:	f7ff fd83 	bl	8000608 <MX_DMA_Init>
  MX_USB_OTG_HS_USB_Init();
 8000b02:	f000 fe5f 	bl	80017c4 <MX_USB_OTG_HS_USB_Init>
  MX_ETH_Init();
 8000b06:	f7ff fd9f 	bl	8000648 <MX_ETH_Init>
  MX_SPI1_Init();
 8000b0a:	f000 f93b 	bl	8000d84 <MX_SPI1_Init>
  MX_TIM8_Init();
 8000b0e:	f000 fc09 	bl	8001324 <MX_TIM8_Init>
  MX_TIM2_Init();
 8000b12:	f000 fb29 	bl	8001168 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 8000b16:	f000 fd9f 	bl	8001658 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8000b1a:	f000 fb7f 	bl	800121c <MX_TIM3_Init>
  HAL_GPIO_WritePin(ADC_CNVST_GPIO_Port, ADC_CNVST_Pin, GPIO_PIN_SET);
  for(int i = 0; i < 5; i++);
  HAL_GPIO_WritePin(ADC_CNVST_GPIO_Port, ADC_CNVST_Pin, GPIO_PIN_RESET);*/

  // Disable the count.
  TIM8->CR1 &= ~TIM_CR1_CEN;
 8000b1e:	4b39      	ldr	r3, [pc, #228]	; (8000c04 <main+0x11c>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	4a38      	ldr	r2, [pc, #224]	; (8000c04 <main+0x11c>)
 8000b24:	f023 0301 	bic.w	r3, r3, #1
 8000b28:	6013      	str	r3, [r2, #0]
  // Select TI2 as the input.
  TIM8->CCMR1 |= TIM_CCMR1_CC2S_0;
 8000b2a:	4b36      	ldr	r3, [pc, #216]	; (8000c04 <main+0x11c>)
 8000b2c:	699b      	ldr	r3, [r3, #24]
 8000b2e:	4a35      	ldr	r2, [pc, #212]	; (8000c04 <main+0x11c>)
 8000b30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b34:	6193      	str	r3, [r2, #24]
  // ?
  TIM8->CCER |= TIM_CCER_CC2P;
 8000b36:	4b33      	ldr	r3, [pc, #204]	; (8000c04 <main+0x11c>)
 8000b38:	6a1b      	ldr	r3, [r3, #32]
 8000b3a:	4a32      	ldr	r2, [pc, #200]	; (8000c04 <main+0x11c>)
 8000b3c:	f043 0320 	orr.w	r3, r3, #32
 8000b40:	6213      	str	r3, [r2, #32]
  TIM8->ARR = 11;
 8000b42:	4b30      	ldr	r3, [pc, #192]	; (8000c04 <main+0x11c>)
 8000b44:	220b      	movs	r2, #11
 8000b46:	62da      	str	r2, [r3, #44]	; 0x2c
  TIM8->CCR1 = 6;
 8000b48:	4b2e      	ldr	r3, [pc, #184]	; (8000c04 <main+0x11c>)
 8000b4a:	2206      	movs	r2, #6
 8000b4c:	635a      	str	r2, [r3, #52]	; 0x34
  TIM8->RCR = 32;
 8000b4e:	4b2d      	ldr	r3, [pc, #180]	; (8000c04 <main+0x11c>)
 8000b50:	2220      	movs	r2, #32
 8000b52:	631a      	str	r2, [r3, #48]	; 0x30

  // Disable the count.
  TIM3->CR1 &= ~TIM_CR1_CEN;
 8000b54:	4b2c      	ldr	r3, [pc, #176]	; (8000c08 <main+0x120>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a2b      	ldr	r2, [pc, #172]	; (8000c08 <main+0x120>)
 8000b5a:	f023 0301 	bic.w	r3, r3, #1
 8000b5e:	6013      	str	r3, [r2, #0]
  // Select TI2 as the input.
  TIM3->CCMR1 |= TIM_CCMR1_CC2S_0;
 8000b60:	4b29      	ldr	r3, [pc, #164]	; (8000c08 <main+0x120>)
 8000b62:	699b      	ldr	r3, [r3, #24]
 8000b64:	4a28      	ldr	r2, [pc, #160]	; (8000c08 <main+0x120>)
 8000b66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b6a:	6193      	str	r3, [r2, #24]
  // ?
  //TIM3->CCER |= TIM_CCER_CC2P;
  TIM3->ARR = 399;
 8000b6c:	4b26      	ldr	r3, [pc, #152]	; (8000c08 <main+0x120>)
 8000b6e:	f240 128f 	movw	r2, #399	; 0x18f
 8000b72:	62da      	str	r2, [r3, #44]	; 0x2c
  TIM3->CCR1 = 1;
 8000b74:	4b24      	ldr	r3, [pc, #144]	; (8000c08 <main+0x120>)
 8000b76:	2201      	movs	r2, #1
 8000b78:	635a      	str	r2, [r3, #52]	; 0x34

  uint16_t tx_buffer = 0x0210;
 8000b7a:	f44f 7304 	mov.w	r3, #528	; 0x210
 8000b7e:	80fb      	strh	r3, [r7, #6]
  HAL_GPIO_WritePin(ADC_RESET_GPIO_Port, ADC_RESET_Pin, GPIO_PIN_SET);
 8000b80:	2201      	movs	r2, #1
 8000b82:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b86:	4821      	ldr	r0, [pc, #132]	; (8000c0c <main+0x124>)
 8000b88:	f004 f91a 	bl	8004dc0 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8000b8c:	2001      	movs	r0, #1
 8000b8e:	f000 fedd 	bl	800194c <HAL_Delay>
  HAL_GPIO_WritePin(ADC_RESET_GPIO_Port, ADC_RESET_Pin, GPIO_PIN_RESET);
 8000b92:	2200      	movs	r2, #0
 8000b94:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b98:	481c      	ldr	r0, [pc, #112]	; (8000c0c <main+0x124>)
 8000b9a:	f004 f911 	bl	8004dc0 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8000b9e:	2001      	movs	r0, #1
 8000ba0:	f000 fed4 	bl	800194c <HAL_Delay>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	481a      	ldr	r0, [pc, #104]	; (8000c10 <main+0x128>)
 8000ba8:	f007 ff1e 	bl	80089e8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000bac:	2100      	movs	r1, #0
 8000bae:	4819      	ldr	r0, [pc, #100]	; (8000c14 <main+0x12c>)
 8000bb0:	f007 ff1a 	bl	80089e8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	4818      	ldr	r0, [pc, #96]	; (8000c18 <main+0x130>)
 8000bb8:	f007 ff16 	bl	80089e8 <HAL_TIM_PWM_Start>
  for (int i = 0; i < 50; i++);
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	60fb      	str	r3, [r7, #12]
 8000bc0:	e002      	b.n	8000bc8 <main+0xe0>
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	3301      	adds	r3, #1
 8000bc6:	60fb      	str	r3, [r7, #12]
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	2b31      	cmp	r3, #49	; 0x31
 8000bcc:	ddf9      	ble.n	8000bc2 <main+0xda>
  HAL_SPI_Transmit(&hspi1, (uint8_t*)&tx_buffer, 1, HAL_MAX_DELAY);
 8000bce:	1db9      	adds	r1, r7, #6
 8000bd0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	4811      	ldr	r0, [pc, #68]	; (8000c1c <main+0x134>)
 8000bd8:	f006 ffc6 	bl	8007b68 <HAL_SPI_Transmit>
  HAL_SPI_Receive_DMA(&hspi1, (uint8_t*)rx_buffer, 1024);
 8000bdc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000be0:	490f      	ldr	r1, [pc, #60]	; (8000c20 <main+0x138>)
 8000be2:	480e      	ldr	r0, [pc, #56]	; (8000c1c <main+0x134>)
 8000be4:	f007 f9bc 	bl	8007f60 <HAL_SPI_Receive_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  DMA_Stream_TypeDef* dma = hspi1.hdmarx->Instance;
 8000be8:	4b0c      	ldr	r3, [pc, #48]	; (8000c1c <main+0x134>)
 8000bea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	60bb      	str	r3, [r7, #8]
	  HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8000bf0:	2101      	movs	r1, #1
 8000bf2:	4806      	ldr	r0, [pc, #24]	; (8000c0c <main+0x124>)
 8000bf4:	f004 f8fd 	bl	8004df2 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8000bf8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000bfc:	f000 fea6 	bl	800194c <HAL_Delay>
  {
 8000c00:	e7f2      	b.n	8000be8 <main+0x100>
 8000c02:	bf00      	nop
 8000c04:	40010400 	.word	0x40010400
 8000c08:	40000400 	.word	0x40000400
 8000c0c:	58020400 	.word	0x58020400
 8000c10:	24000b74 	.word	0x24000b74
 8000c14:	24000b28 	.word	0x24000b28
 8000c18:	24000adc 	.word	0x24000adc
 8000c1c:	240009dc 	.word	0x240009dc
 8000c20:	240001dc 	.word	0x240001dc

08000c24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b09c      	sub	sp, #112	; 0x70
 8000c28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c2e:	224c      	movs	r2, #76	; 0x4c
 8000c30:	2100      	movs	r1, #0
 8000c32:	4618      	mov	r0, r3
 8000c34:	f00a f9c4 	bl	800afc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c38:	1d3b      	adds	r3, r7, #4
 8000c3a:	2220      	movs	r2, #32
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f00a f9be 	bl	800afc0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000c44:	2002      	movs	r0, #2
 8000c46:	f004 f909 	bl	8004e5c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	603b      	str	r3, [r7, #0]
 8000c4e:	4b2c      	ldr	r3, [pc, #176]	; (8000d00 <SystemClock_Config+0xdc>)
 8000c50:	699b      	ldr	r3, [r3, #24]
 8000c52:	4a2b      	ldr	r2, [pc, #172]	; (8000d00 <SystemClock_Config+0xdc>)
 8000c54:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000c58:	6193      	str	r3, [r2, #24]
 8000c5a:	4b29      	ldr	r3, [pc, #164]	; (8000d00 <SystemClock_Config+0xdc>)
 8000c5c:	699b      	ldr	r3, [r3, #24]
 8000c5e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c62:	603b      	str	r3, [r7, #0]
 8000c64:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000c66:	bf00      	nop
 8000c68:	4b25      	ldr	r3, [pc, #148]	; (8000d00 <SystemClock_Config+0xdc>)
 8000c6a:	699b      	ldr	r3, [r3, #24]
 8000c6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000c70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000c74:	d1f8      	bne.n	8000c68 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000c76:	2321      	movs	r3, #33	; 0x21
 8000c78:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000c7a:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000c7e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000c80:	2301      	movs	r3, #1
 8000c82:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c84:	2302      	movs	r3, #2
 8000c86:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c88:	2302      	movs	r3, #2
 8000c8a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000c8c:	2304      	movs	r3, #4
 8000c8e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 8000c90:	f240 1313 	movw	r3, #275	; 0x113
 8000c94:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000c96:	2301      	movs	r3, #1
 8000c98:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000c9a:	2304      	movs	r3, #4
 8000c9c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c9e:	2302      	movs	r3, #2
 8000ca0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8000ca2:	2304      	movs	r3, #4
 8000ca4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000caa:	2300      	movs	r3, #0
 8000cac:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f004 f90c 	bl	8004ed0 <HAL_RCC_OscConfig>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000cbe:	f000 f85b 	bl	8000d78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cc2:	233f      	movs	r3, #63	; 0x3f
 8000cc4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cc6:	2303      	movs	r3, #3
 8000cc8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000cce:	2308      	movs	r3, #8
 8000cd0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000cd2:	2340      	movs	r3, #64	; 0x40
 8000cd4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000cd6:	2340      	movs	r3, #64	; 0x40
 8000cd8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000cda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cde:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000ce0:	2340      	movs	r3, #64	; 0x40
 8000ce2:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000ce4:	1d3b      	adds	r3, r7, #4
 8000ce6:	2103      	movs	r1, #3
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f004 fccb 	bl	8005684 <HAL_RCC_ClockConfig>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000cf4:	f000 f840 	bl	8000d78 <Error_Handler>
  }
}
 8000cf8:	bf00      	nop
 8000cfa:	3770      	adds	r7, #112	; 0x70
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	58024800 	.word	0x58024800

08000d04 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	80fb      	strh	r3, [r7, #6]
				(uint8_t*)tx_buffer,
				(uint8_t*)rx_buffer,
				4
		);
	}*/
}
 8000d0e:	bf00      	nop
 8000d10:	370c      	adds	r7, #12
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr

08000d1a <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) {
 8000d1a:	b480      	push	{r7}
 8000d1c:	b083      	sub	sp, #12
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	6078      	str	r0, [r7, #4]
		HAL_GPIO_WritePin(SPI1_nCS_GPIO_Port, SPI1_nCS_Pin, GPIO_PIN_SET);
		HAL_GPIO_WritePin(ADC_CNVST_GPIO_Port, ADC_CNVST_Pin, GPIO_PIN_SET);
		for(int i = 0; i < 5; i++);
		HAL_GPIO_WritePin(ADC_CNVST_GPIO_Port, ADC_CNVST_Pin, GPIO_PIN_RESET);
	}*/
}
 8000d22:	bf00      	nop
 8000d24:	370c      	adds	r7, #12
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
	...

08000d30 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 8000d30:	b480      	push	{r7}
 8000d32:	b085      	sub	sp, #20
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
	if (hspi == &hspi1) {
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	4a05      	ldr	r2, [pc, #20]	; (8000d50 <HAL_SPI_TxCpltCallback+0x20>)
 8000d3c:	4293      	cmp	r3, r2
 8000d3e:	d101      	bne.n	8000d44 <HAL_SPI_TxCpltCallback+0x14>
		volatile int robert_frost = 0;
 8000d40:	2300      	movs	r3, #0
 8000d42:	60fb      	str	r3, [r7, #12]
	}
}
 8000d44:	bf00      	nop
 8000d46:	3714      	adds	r7, #20
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr
 8000d50:	240009dc 	.word	0x240009dc

08000d54 <HAL_SPI_RxCpltCallback>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) {
 8000d54:	b480      	push	{r7}
 8000d56:	b085      	sub	sp, #20
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
	if (hspi == &hspi1) {
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	4a05      	ldr	r2, [pc, #20]	; (8000d74 <HAL_SPI_RxCpltCallback+0x20>)
 8000d60:	4293      	cmp	r3, r2
 8000d62:	d101      	bne.n	8000d68 <HAL_SPI_RxCpltCallback+0x14>
		volatile int robert_frost = 0;
 8000d64:	2300      	movs	r3, #0
 8000d66:	60fb      	str	r3, [r7, #12]
	}
}
 8000d68:	bf00      	nop
 8000d6a:	3714      	adds	r7, #20
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr
 8000d74:	240009dc 	.word	0x240009dc

08000d78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d7c:	b672      	cpsid	i
}
 8000d7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d80:	e7fe      	b.n	8000d80 <Error_Handler+0x8>
	...

08000d84 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
DMA_HandleTypeDef hdma_spi1_rx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000d88:	4b24      	ldr	r3, [pc, #144]	; (8000e1c <MX_SPI1_Init+0x98>)
 8000d8a:	4a25      	ldr	r2, [pc, #148]	; (8000e20 <MX_SPI1_Init+0x9c>)
 8000d8c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8000d8e:	4b23      	ldr	r3, [pc, #140]	; (8000e1c <MX_SPI1_Init+0x98>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d94:	4b21      	ldr	r3, [pc, #132]	; (8000e1c <MX_SPI1_Init+0x98>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000d9a:	4b20      	ldr	r3, [pc, #128]	; (8000e1c <MX_SPI1_Init+0x98>)
 8000d9c:	220f      	movs	r2, #15
 8000d9e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000da0:	4b1e      	ldr	r3, [pc, #120]	; (8000e1c <MX_SPI1_Init+0x98>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000da6:	4b1d      	ldr	r3, [pc, #116]	; (8000e1c <MX_SPI1_Init+0x98>)
 8000da8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000dac:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8000dae:	4b1b      	ldr	r3, [pc, #108]	; (8000e1c <MX_SPI1_Init+0x98>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000db4:	4b19      	ldr	r3, [pc, #100]	; (8000e1c <MX_SPI1_Init+0x98>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000dba:	4b18      	ldr	r3, [pc, #96]	; (8000e1c <MX_SPI1_Init+0x98>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000dc0:	4b16      	ldr	r3, [pc, #88]	; (8000e1c <MX_SPI1_Init+0x98>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000dc6:	4b15      	ldr	r3, [pc, #84]	; (8000e1c <MX_SPI1_Init+0x98>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000dcc:	4b13      	ldr	r3, [pc, #76]	; (8000e1c <MX_SPI1_Init+0x98>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000dd2:	4b12      	ldr	r3, [pc, #72]	; (8000e1c <MX_SPI1_Init+0x98>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000dd8:	4b10      	ldr	r3, [pc, #64]	; (8000e1c <MX_SPI1_Init+0x98>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000dde:	4b0f      	ldr	r3, [pc, #60]	; (8000e1c <MX_SPI1_Init+0x98>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000de4:	4b0d      	ldr	r3, [pc, #52]	; (8000e1c <MX_SPI1_Init+0x98>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000dea:	4b0c      	ldr	r3, [pc, #48]	; (8000e1c <MX_SPI1_Init+0x98>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000df0:	4b0a      	ldr	r3, [pc, #40]	; (8000e1c <MX_SPI1_Init+0x98>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000df6:	4b09      	ldr	r3, [pc, #36]	; (8000e1c <MX_SPI1_Init+0x98>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000dfc:	4b07      	ldr	r3, [pc, #28]	; (8000e1c <MX_SPI1_Init+0x98>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000e02:	4b06      	ldr	r3, [pc, #24]	; (8000e1c <MX_SPI1_Init+0x98>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000e08:	4804      	ldr	r0, [pc, #16]	; (8000e1c <MX_SPI1_Init+0x98>)
 8000e0a:	f006 fd89 	bl	8007920 <HAL_SPI_Init>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <MX_SPI1_Init+0x94>
  {
    Error_Handler();
 8000e14:	f7ff ffb0 	bl	8000d78 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000e18:	bf00      	nop
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	240009dc 	.word	0x240009dc
 8000e20:	40013000 	.word	0x40013000

08000e24 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b0ba      	sub	sp, #232	; 0xe8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e2c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000e30:	2200      	movs	r2, #0
 8000e32:	601a      	str	r2, [r3, #0]
 8000e34:	605a      	str	r2, [r3, #4]
 8000e36:	609a      	str	r2, [r3, #8]
 8000e38:	60da      	str	r2, [r3, #12]
 8000e3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e3c:	f107 0318 	add.w	r3, r7, #24
 8000e40:	22b8      	movs	r2, #184	; 0xb8
 8000e42:	2100      	movs	r1, #0
 8000e44:	4618      	mov	r0, r3
 8000e46:	f00a f8bb 	bl	800afc0 <memset>
  if(spiHandle->Instance==SPI1)
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	4a54      	ldr	r2, [pc, #336]	; (8000fa0 <HAL_SPI_MspInit+0x17c>)
 8000e50:	4293      	cmp	r3, r2
 8000e52:	f040 80a1 	bne.w	8000f98 <HAL_SPI_MspInit+0x174>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8000e56:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e5a:	f04f 0300 	mov.w	r3, #0
 8000e5e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000e62:	2300      	movs	r3, #0
 8000e64:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e66:	f107 0318 	add.w	r3, r7, #24
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f004 ff96 	bl	8005d9c <HAL_RCCEx_PeriphCLKConfig>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 8000e76:	f7ff ff7f 	bl	8000d78 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e7a:	4b4a      	ldr	r3, [pc, #296]	; (8000fa4 <HAL_SPI_MspInit+0x180>)
 8000e7c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000e80:	4a48      	ldr	r2, [pc, #288]	; (8000fa4 <HAL_SPI_MspInit+0x180>)
 8000e82:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e86:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000e8a:	4b46      	ldr	r3, [pc, #280]	; (8000fa4 <HAL_SPI_MspInit+0x180>)
 8000e8c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000e90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e94:	617b      	str	r3, [r7, #20]
 8000e96:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e98:	4b42      	ldr	r3, [pc, #264]	; (8000fa4 <HAL_SPI_MspInit+0x180>)
 8000e9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e9e:	4a41      	ldr	r2, [pc, #260]	; (8000fa4 <HAL_SPI_MspInit+0x180>)
 8000ea0:	f043 0301 	orr.w	r3, r3, #1
 8000ea4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ea8:	4b3e      	ldr	r3, [pc, #248]	; (8000fa4 <HAL_SPI_MspInit+0x180>)
 8000eaa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eae:	f003 0301 	and.w	r3, r3, #1
 8000eb2:	613b      	str	r3, [r7, #16]
 8000eb4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eb6:	4b3b      	ldr	r3, [pc, #236]	; (8000fa4 <HAL_SPI_MspInit+0x180>)
 8000eb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ebc:	4a39      	ldr	r2, [pc, #228]	; (8000fa4 <HAL_SPI_MspInit+0x180>)
 8000ebe:	f043 0302 	orr.w	r3, r3, #2
 8000ec2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ec6:	4b37      	ldr	r3, [pc, #220]	; (8000fa4 <HAL_SPI_MspInit+0x180>)
 8000ec8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ecc:	f003 0302 	and.w	r3, r3, #2
 8000ed0:	60fb      	str	r3, [r7, #12]
 8000ed2:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000ed4:	2370      	movs	r3, #112	; 0x70
 8000ed6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eda:	2302      	movs	r3, #2
 8000edc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000eec:	2305      	movs	r3, #5
 8000eee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	482b      	ldr	r0, [pc, #172]	; (8000fa8 <HAL_SPI_MspInit+0x184>)
 8000efa:	f003 fdb9 	bl	8004a70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000efe:	2320      	movs	r3, #32
 8000f00:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f04:	2302      	movs	r3, #2
 8000f06:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f10:	2300      	movs	r3, #0
 8000f12:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f16:	2305      	movs	r3, #5
 8000f18:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f1c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000f20:	4619      	mov	r1, r3
 8000f22:	4822      	ldr	r0, [pc, #136]	; (8000fac <HAL_SPI_MspInit+0x188>)
 8000f24:	f003 fda4 	bl	8004a70 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream0;
 8000f28:	4b21      	ldr	r3, [pc, #132]	; (8000fb0 <HAL_SPI_MspInit+0x18c>)
 8000f2a:	4a22      	ldr	r2, [pc, #136]	; (8000fb4 <HAL_SPI_MspInit+0x190>)
 8000f2c:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8000f2e:	4b20      	ldr	r3, [pc, #128]	; (8000fb0 <HAL_SPI_MspInit+0x18c>)
 8000f30:	2225      	movs	r2, #37	; 0x25
 8000f32:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f34:	4b1e      	ldr	r3, [pc, #120]	; (8000fb0 <HAL_SPI_MspInit+0x18c>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f3a:	4b1d      	ldr	r3, [pc, #116]	; (8000fb0 <HAL_SPI_MspInit+0x18c>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000f40:	4b1b      	ldr	r3, [pc, #108]	; (8000fb0 <HAL_SPI_MspInit+0x18c>)
 8000f42:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f46:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f48:	4b19      	ldr	r3, [pc, #100]	; (8000fb0 <HAL_SPI_MspInit+0x18c>)
 8000f4a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f4e:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f50:	4b17      	ldr	r3, [pc, #92]	; (8000fb0 <HAL_SPI_MspInit+0x18c>)
 8000f52:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f56:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 8000f58:	4b15      	ldr	r3, [pc, #84]	; (8000fb0 <HAL_SPI_MspInit+0x18c>)
 8000f5a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f5e:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000f60:	4b13      	ldr	r3, [pc, #76]	; (8000fb0 <HAL_SPI_MspInit+0x18c>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f66:	4b12      	ldr	r3, [pc, #72]	; (8000fb0 <HAL_SPI_MspInit+0x18c>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8000f6c:	4810      	ldr	r0, [pc, #64]	; (8000fb0 <HAL_SPI_MspInit+0x18c>)
 8000f6e:	f000 fe35 	bl	8001bdc <HAL_DMA_Init>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <HAL_SPI_MspInit+0x158>
    {
      Error_Handler();
 8000f78:	f7ff fefe 	bl	8000d78 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	4a0c      	ldr	r2, [pc, #48]	; (8000fb0 <HAL_SPI_MspInit+0x18c>)
 8000f80:	67da      	str	r2, [r3, #124]	; 0x7c
 8000f82:	4a0b      	ldr	r2, [pc, #44]	; (8000fb0 <HAL_SPI_MspInit+0x18c>)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000f88:	2200      	movs	r2, #0
 8000f8a:	2100      	movs	r1, #0
 8000f8c:	2023      	movs	r0, #35	; 0x23
 8000f8e:	f000 fdf0 	bl	8001b72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000f92:	2023      	movs	r0, #35	; 0x23
 8000f94:	f000 fe07 	bl	8001ba6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000f98:	bf00      	nop
 8000f9a:	37e8      	adds	r7, #232	; 0xe8
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	40013000 	.word	0x40013000
 8000fa4:	58024400 	.word	0x58024400
 8000fa8:	58020000 	.word	0x58020000
 8000fac:	58020400 	.word	0x58020400
 8000fb0:	24000a64 	.word	0x24000a64
 8000fb4:	40020010 	.word	0x40020010

08000fb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fbe:	4b0a      	ldr	r3, [pc, #40]	; (8000fe8 <HAL_MspInit+0x30>)
 8000fc0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000fc4:	4a08      	ldr	r2, [pc, #32]	; (8000fe8 <HAL_MspInit+0x30>)
 8000fc6:	f043 0302 	orr.w	r3, r3, #2
 8000fca:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000fce:	4b06      	ldr	r3, [pc, #24]	; (8000fe8 <HAL_MspInit+0x30>)
 8000fd0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000fd4:	f003 0302 	and.w	r3, r3, #2
 8000fd8:	607b      	str	r3, [r7, #4]
 8000fda:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fdc:	bf00      	nop
 8000fde:	370c      	adds	r7, #12
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr
 8000fe8:	58024400 	.word	0x58024400

08000fec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ff0:	e7fe      	b.n	8000ff0 <NMI_Handler+0x4>

08000ff2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ff2:	b480      	push	{r7}
 8000ff4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ff6:	e7fe      	b.n	8000ff6 <HardFault_Handler+0x4>

08000ff8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ffc:	e7fe      	b.n	8000ffc <MemManage_Handler+0x4>

08000ffe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ffe:	b480      	push	{r7}
 8001000:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001002:	e7fe      	b.n	8001002 <BusFault_Handler+0x4>

08001004 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001008:	e7fe      	b.n	8001008 <UsageFault_Handler+0x4>

0800100a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800100a:	b480      	push	{r7}
 800100c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800100e:	bf00      	nop
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr

08001018 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800101c:	bf00      	nop
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr

08001026 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001026:	b480      	push	{r7}
 8001028:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800102a:	bf00      	nop
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr

08001034 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001038:	f000 fc68 	bl	800190c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800103c:	bf00      	nop
 800103e:	bd80      	pop	{r7, pc}

08001040 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001044:	4802      	ldr	r0, [pc, #8]	; (8001050 <DMA1_Stream0_IRQHandler+0x10>)
 8001046:	f001 fdd1 	bl	8002bec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800104a:	bf00      	nop
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	24000a64 	.word	0x24000a64

08001054 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001058:	4802      	ldr	r0, [pc, #8]	; (8001064 <SPI1_IRQHandler+0x10>)
 800105a:	f007 f8d3 	bl	8008204 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800105e:	bf00      	nop
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	240009dc 	.word	0x240009dc

08001068 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ADC_BUSY_Pin);
 800106c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001070:	f003 fed9 	bl	8004e26 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001074:	bf00      	nop
 8001076:	bd80      	pop	{r7, pc}

08001078 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800107c:	4b32      	ldr	r3, [pc, #200]	; (8001148 <SystemInit+0xd0>)
 800107e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001082:	4a31      	ldr	r2, [pc, #196]	; (8001148 <SystemInit+0xd0>)
 8001084:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001088:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800108c:	4b2f      	ldr	r3, [pc, #188]	; (800114c <SystemInit+0xd4>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f003 030f 	and.w	r3, r3, #15
 8001094:	2b06      	cmp	r3, #6
 8001096:	d807      	bhi.n	80010a8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001098:	4b2c      	ldr	r3, [pc, #176]	; (800114c <SystemInit+0xd4>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f023 030f 	bic.w	r3, r3, #15
 80010a0:	4a2a      	ldr	r2, [pc, #168]	; (800114c <SystemInit+0xd4>)
 80010a2:	f043 0307 	orr.w	r3, r3, #7
 80010a6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80010a8:	4b29      	ldr	r3, [pc, #164]	; (8001150 <SystemInit+0xd8>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a28      	ldr	r2, [pc, #160]	; (8001150 <SystemInit+0xd8>)
 80010ae:	f043 0301 	orr.w	r3, r3, #1
 80010b2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80010b4:	4b26      	ldr	r3, [pc, #152]	; (8001150 <SystemInit+0xd8>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80010ba:	4b25      	ldr	r3, [pc, #148]	; (8001150 <SystemInit+0xd8>)
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	4924      	ldr	r1, [pc, #144]	; (8001150 <SystemInit+0xd8>)
 80010c0:	4b24      	ldr	r3, [pc, #144]	; (8001154 <SystemInit+0xdc>)
 80010c2:	4013      	ands	r3, r2
 80010c4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80010c6:	4b21      	ldr	r3, [pc, #132]	; (800114c <SystemInit+0xd4>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f003 0308 	and.w	r3, r3, #8
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d007      	beq.n	80010e2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80010d2:	4b1e      	ldr	r3, [pc, #120]	; (800114c <SystemInit+0xd4>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f023 030f 	bic.w	r3, r3, #15
 80010da:	4a1c      	ldr	r2, [pc, #112]	; (800114c <SystemInit+0xd4>)
 80010dc:	f043 0307 	orr.w	r3, r3, #7
 80010e0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80010e2:	4b1b      	ldr	r3, [pc, #108]	; (8001150 <SystemInit+0xd8>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80010e8:	4b19      	ldr	r3, [pc, #100]	; (8001150 <SystemInit+0xd8>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80010ee:	4b18      	ldr	r3, [pc, #96]	; (8001150 <SystemInit+0xd8>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80010f4:	4b16      	ldr	r3, [pc, #88]	; (8001150 <SystemInit+0xd8>)
 80010f6:	4a18      	ldr	r2, [pc, #96]	; (8001158 <SystemInit+0xe0>)
 80010f8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80010fa:	4b15      	ldr	r3, [pc, #84]	; (8001150 <SystemInit+0xd8>)
 80010fc:	4a17      	ldr	r2, [pc, #92]	; (800115c <SystemInit+0xe4>)
 80010fe:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001100:	4b13      	ldr	r3, [pc, #76]	; (8001150 <SystemInit+0xd8>)
 8001102:	4a17      	ldr	r2, [pc, #92]	; (8001160 <SystemInit+0xe8>)
 8001104:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001106:	4b12      	ldr	r3, [pc, #72]	; (8001150 <SystemInit+0xd8>)
 8001108:	2200      	movs	r2, #0
 800110a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800110c:	4b10      	ldr	r3, [pc, #64]	; (8001150 <SystemInit+0xd8>)
 800110e:	4a14      	ldr	r2, [pc, #80]	; (8001160 <SystemInit+0xe8>)
 8001110:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001112:	4b0f      	ldr	r3, [pc, #60]	; (8001150 <SystemInit+0xd8>)
 8001114:	2200      	movs	r2, #0
 8001116:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001118:	4b0d      	ldr	r3, [pc, #52]	; (8001150 <SystemInit+0xd8>)
 800111a:	4a11      	ldr	r2, [pc, #68]	; (8001160 <SystemInit+0xe8>)
 800111c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800111e:	4b0c      	ldr	r3, [pc, #48]	; (8001150 <SystemInit+0xd8>)
 8001120:	2200      	movs	r2, #0
 8001122:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001124:	4b0a      	ldr	r3, [pc, #40]	; (8001150 <SystemInit+0xd8>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a09      	ldr	r2, [pc, #36]	; (8001150 <SystemInit+0xd8>)
 800112a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800112e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001130:	4b07      	ldr	r3, [pc, #28]	; (8001150 <SystemInit+0xd8>)
 8001132:	2200      	movs	r2, #0
 8001134:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001136:	4b0b      	ldr	r3, [pc, #44]	; (8001164 <SystemInit+0xec>)
 8001138:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800113c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800113e:	bf00      	nop
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr
 8001148:	e000ed00 	.word	0xe000ed00
 800114c:	52002000 	.word	0x52002000
 8001150:	58024400 	.word	0x58024400
 8001154:	eaf6ed7f 	.word	0xeaf6ed7f
 8001158:	02020200 	.word	0x02020200
 800115c:	01ff0000 	.word	0x01ff0000
 8001160:	01010280 	.word	0x01010280
 8001164:	52004000 	.word	0x52004000

08001168 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim8;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b08a      	sub	sp, #40	; 0x28
 800116c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800116e:	f107 031c 	add.w	r3, r7, #28
 8001172:	2200      	movs	r2, #0
 8001174:	601a      	str	r2, [r3, #0]
 8001176:	605a      	str	r2, [r3, #4]
 8001178:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800117a:	463b      	mov	r3, r7
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
 8001180:	605a      	str	r2, [r3, #4]
 8001182:	609a      	str	r2, [r3, #8]
 8001184:	60da      	str	r2, [r3, #12]
 8001186:	611a      	str	r2, [r3, #16]
 8001188:	615a      	str	r2, [r3, #20]
 800118a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800118c:	4b22      	ldr	r3, [pc, #136]	; (8001218 <MX_TIM2_Init+0xb0>)
 800118e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001192:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001194:	4b20      	ldr	r3, [pc, #128]	; (8001218 <MX_TIM2_Init+0xb0>)
 8001196:	2200      	movs	r2, #0
 8001198:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 800119a:	4b1f      	ldr	r3, [pc, #124]	; (8001218 <MX_TIM2_Init+0xb0>)
 800119c:	2210      	movs	r2, #16
 800119e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 572;
 80011a0:	4b1d      	ldr	r3, [pc, #116]	; (8001218 <MX_TIM2_Init+0xb0>)
 80011a2:	f44f 720f 	mov.w	r2, #572	; 0x23c
 80011a6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011a8:	4b1b      	ldr	r3, [pc, #108]	; (8001218 <MX_TIM2_Init+0xb0>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011ae:	4b1a      	ldr	r3, [pc, #104]	; (8001218 <MX_TIM2_Init+0xb0>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80011b4:	4818      	ldr	r0, [pc, #96]	; (8001218 <MX_TIM2_Init+0xb0>)
 80011b6:	f007 fbbf 	bl	8008938 <HAL_TIM_PWM_Init>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80011c0:	f7ff fdda 	bl	8000d78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80011c4:	2320      	movs	r3, #32
 80011c6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 80011c8:	2380      	movs	r3, #128	; 0x80
 80011ca:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011cc:	f107 031c 	add.w	r3, r7, #28
 80011d0:	4619      	mov	r1, r3
 80011d2:	4811      	ldr	r0, [pc, #68]	; (8001218 <MX_TIM2_Init+0xb0>)
 80011d4:	f008 fbde 	bl	8009994 <HAL_TIMEx_MasterConfigSynchronization>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80011de:	f7ff fdcb 	bl	8000d78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011e2:	2360      	movs	r3, #96	; 0x60
 80011e4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 286;
 80011e6:	f44f 738f 	mov.w	r3, #286	; 0x11e
 80011ea:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011ec:	2300      	movs	r3, #0
 80011ee:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011f0:	2300      	movs	r3, #0
 80011f2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011f4:	463b      	mov	r3, r7
 80011f6:	2200      	movs	r2, #0
 80011f8:	4619      	mov	r1, r3
 80011fa:	4807      	ldr	r0, [pc, #28]	; (8001218 <MX_TIM2_Init+0xb0>)
 80011fc:	f007 fd6a 	bl	8008cd4 <HAL_TIM_PWM_ConfigChannel>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8001206:	f7ff fdb7 	bl	8000d78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800120a:	4803      	ldr	r0, [pc, #12]	; (8001218 <MX_TIM2_Init+0xb0>)
 800120c:	f000 f99a 	bl	8001544 <HAL_TIM_MspPostInit>

}
 8001210:	bf00      	nop
 8001212:	3728      	adds	r7, #40	; 0x28
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	24000adc 	.word	0x24000adc

0800121c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b090      	sub	sp, #64	; 0x40
 8001220:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001222:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001226:	2200      	movs	r2, #0
 8001228:	601a      	str	r2, [r3, #0]
 800122a:	605a      	str	r2, [r3, #4]
 800122c:	609a      	str	r2, [r3, #8]
 800122e:	60da      	str	r2, [r3, #12]
 8001230:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001232:	f107 0320 	add.w	r3, r7, #32
 8001236:	2200      	movs	r2, #0
 8001238:	601a      	str	r2, [r3, #0]
 800123a:	605a      	str	r2, [r3, #4]
 800123c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800123e:	1d3b      	adds	r3, r7, #4
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
 8001244:	605a      	str	r2, [r3, #4]
 8001246:	609a      	str	r2, [r3, #8]
 8001248:	60da      	str	r2, [r3, #12]
 800124a:	611a      	str	r2, [r3, #16]
 800124c:	615a      	str	r2, [r3, #20]
 800124e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001250:	4b32      	ldr	r3, [pc, #200]	; (800131c <MX_TIM3_Init+0x100>)
 8001252:	4a33      	ldr	r2, [pc, #204]	; (8001320 <MX_TIM3_Init+0x104>)
 8001254:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001256:	4b31      	ldr	r3, [pc, #196]	; (800131c <MX_TIM3_Init+0x100>)
 8001258:	2200      	movs	r2, #0
 800125a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800125c:	4b2f      	ldr	r3, [pc, #188]	; (800131c <MX_TIM3_Init+0x100>)
 800125e:	2200      	movs	r2, #0
 8001260:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 400;
 8001262:	4b2e      	ldr	r3, [pc, #184]	; (800131c <MX_TIM3_Init+0x100>)
 8001264:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001268:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800126a:	4b2c      	ldr	r3, [pc, #176]	; (800131c <MX_TIM3_Init+0x100>)
 800126c:	2200      	movs	r2, #0
 800126e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001270:	4b2a      	ldr	r3, [pc, #168]	; (800131c <MX_TIM3_Init+0x100>)
 8001272:	2200      	movs	r2, #0
 8001274:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001276:	4829      	ldr	r0, [pc, #164]	; (800131c <MX_TIM3_Init+0x100>)
 8001278:	f007 fb07 	bl	800888a <HAL_TIM_Base_Init>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8001282:	f7ff fd79 	bl	8000d78 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001286:	4825      	ldr	r0, [pc, #148]	; (800131c <MX_TIM3_Init+0x100>)
 8001288:	f007 fb56 	bl	8008938 <HAL_TIM_PWM_Init>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8001292:	f7ff fd71 	bl	8000d78 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim3, TIM_OPMODE_SINGLE) != HAL_OK)
 8001296:	2108      	movs	r1, #8
 8001298:	4820      	ldr	r0, [pc, #128]	; (800131c <MX_TIM3_Init+0x100>)
 800129a:	f007 fcc1 	bl	8008c20 <HAL_TIM_OnePulse_Init>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80012a4:	f7ff fd68 	bl	8000d78 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 80012a8:	2306      	movs	r3, #6
 80012aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 80012ac:	2310      	movs	r3, #16
 80012ae:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 80012b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012b4:	4619      	mov	r1, r3
 80012b6:	4819      	ldr	r0, [pc, #100]	; (800131c <MX_TIM3_Init+0x100>)
 80012b8:	f007 fe20 	bl	8008efc <HAL_TIM_SlaveConfigSynchro>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 80012c2:	f7ff fd59 	bl	8000d78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012c6:	2300      	movs	r3, #0
 80012c8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012ca:	2300      	movs	r3, #0
 80012cc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012ce:	f107 0320 	add.w	r3, r7, #32
 80012d2:	4619      	mov	r1, r3
 80012d4:	4811      	ldr	r0, [pc, #68]	; (800131c <MX_TIM3_Init+0x100>)
 80012d6:	f008 fb5d 	bl	8009994 <HAL_TIMEx_MasterConfigSynchronization>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 80012e0:	f7ff fd4a 	bl	8000d78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012e4:	2360      	movs	r3, #96	; 0x60
 80012e6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 390;
 80012e8:	f44f 73c3 	mov.w	r3, #390	; 0x186
 80012ec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012ee:	2300      	movs	r3, #0
 80012f0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012f2:	2300      	movs	r3, #0
 80012f4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012f6:	1d3b      	adds	r3, r7, #4
 80012f8:	2200      	movs	r2, #0
 80012fa:	4619      	mov	r1, r3
 80012fc:	4807      	ldr	r0, [pc, #28]	; (800131c <MX_TIM3_Init+0x100>)
 80012fe:	f007 fce9 	bl	8008cd4 <HAL_TIM_PWM_ConfigChannel>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <MX_TIM3_Init+0xf0>
  {
    Error_Handler();
 8001308:	f7ff fd36 	bl	8000d78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800130c:	4803      	ldr	r0, [pc, #12]	; (800131c <MX_TIM3_Init+0x100>)
 800130e:	f000 f919 	bl	8001544 <HAL_TIM_MspPostInit>

}
 8001312:	bf00      	nop
 8001314:	3740      	adds	r7, #64	; 0x40
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	24000b28 	.word	0x24000b28
 8001320:	40000400 	.word	0x40000400

08001324 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b09c      	sub	sp, #112	; 0x70
 8001328:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800132a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800132e:	2200      	movs	r2, #0
 8001330:	601a      	str	r2, [r3, #0]
 8001332:	605a      	str	r2, [r3, #4]
 8001334:	609a      	str	r2, [r3, #8]
 8001336:	60da      	str	r2, [r3, #12]
 8001338:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800133a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800133e:	2200      	movs	r2, #0
 8001340:	601a      	str	r2, [r3, #0]
 8001342:	605a      	str	r2, [r3, #4]
 8001344:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001346:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800134a:	2200      	movs	r2, #0
 800134c:	601a      	str	r2, [r3, #0]
 800134e:	605a      	str	r2, [r3, #4]
 8001350:	609a      	str	r2, [r3, #8]
 8001352:	60da      	str	r2, [r3, #12]
 8001354:	611a      	str	r2, [r3, #16]
 8001356:	615a      	str	r2, [r3, #20]
 8001358:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800135a:	463b      	mov	r3, r7
 800135c:	2234      	movs	r2, #52	; 0x34
 800135e:	2100      	movs	r1, #0
 8001360:	4618      	mov	r0, r3
 8001362:	f009 fe2d 	bl	800afc0 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001366:	4b48      	ldr	r3, [pc, #288]	; (8001488 <MX_TIM8_Init+0x164>)
 8001368:	4a48      	ldr	r2, [pc, #288]	; (800148c <MX_TIM8_Init+0x168>)
 800136a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800136c:	4b46      	ldr	r3, [pc, #280]	; (8001488 <MX_TIM8_Init+0x164>)
 800136e:	2200      	movs	r2, #0
 8001370:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001372:	4b45      	ldr	r3, [pc, #276]	; (8001488 <MX_TIM8_Init+0x164>)
 8001374:	2200      	movs	r2, #0
 8001376:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 5;
 8001378:	4b43      	ldr	r3, [pc, #268]	; (8001488 <MX_TIM8_Init+0x164>)
 800137a:	2205      	movs	r2, #5
 800137c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800137e:	4b42      	ldr	r3, [pc, #264]	; (8001488 <MX_TIM8_Init+0x164>)
 8001380:	2200      	movs	r2, #0
 8001382:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 64;
 8001384:	4b40      	ldr	r3, [pc, #256]	; (8001488 <MX_TIM8_Init+0x164>)
 8001386:	2240      	movs	r2, #64	; 0x40
 8001388:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800138a:	4b3f      	ldr	r3, [pc, #252]	; (8001488 <MX_TIM8_Init+0x164>)
 800138c:	2200      	movs	r2, #0
 800138e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001390:	483d      	ldr	r0, [pc, #244]	; (8001488 <MX_TIM8_Init+0x164>)
 8001392:	f007 fa7a 	bl	800888a <HAL_TIM_Base_Init>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 800139c:	f7ff fcec 	bl	8000d78 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80013a0:	4839      	ldr	r0, [pc, #228]	; (8001488 <MX_TIM8_Init+0x164>)
 80013a2:	f007 fac9 	bl	8008938 <HAL_TIM_PWM_Init>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <MX_TIM8_Init+0x8c>
  {
    Error_Handler();
 80013ac:	f7ff fce4 	bl	8000d78 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim8, TIM_OPMODE_SINGLE) != HAL_OK)
 80013b0:	2108      	movs	r1, #8
 80013b2:	4835      	ldr	r0, [pc, #212]	; (8001488 <MX_TIM8_Init+0x164>)
 80013b4:	f007 fc34 	bl	8008c20 <HAL_TIM_OnePulse_Init>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 80013be:	f7ff fcdb 	bl	8000d78 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 80013c2:	2306      	movs	r3, #6
 80013c4:	65fb      	str	r3, [r7, #92]	; 0x5c
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 80013c6:	2310      	movs	r3, #16
 80013c8:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_SlaveConfigSynchro(&htim8, &sSlaveConfig) != HAL_OK)
 80013ca:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80013ce:	4619      	mov	r1, r3
 80013d0:	482d      	ldr	r0, [pc, #180]	; (8001488 <MX_TIM8_Init+0x164>)
 80013d2:	f007 fd93 	bl	8008efc <HAL_TIM_SlaveConfigSynchro>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <MX_TIM8_Init+0xbc>
  {
    Error_Handler();
 80013dc:	f7ff fccc 	bl	8000d78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013e0:	2300      	movs	r3, #0
 80013e2:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80013e4:	2300      	movs	r3, #0
 80013e6:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013e8:	2300      	movs	r3, #0
 80013ea:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80013ec:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80013f0:	4619      	mov	r1, r3
 80013f2:	4825      	ldr	r0, [pc, #148]	; (8001488 <MX_TIM8_Init+0x164>)
 80013f4:	f008 face 	bl	8009994 <HAL_TIMEx_MasterConfigSynchronization>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <MX_TIM8_Init+0xde>
  {
    Error_Handler();
 80013fe:	f7ff fcbb 	bl	8000d78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001402:	2360      	movs	r3, #96	; 0x60
 8001404:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 6;
 8001406:	2306      	movs	r3, #6
 8001408:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800140a:	2300      	movs	r3, #0
 800140c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800140e:	2300      	movs	r3, #0
 8001410:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001412:	2304      	movs	r3, #4
 8001414:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001416:	2300      	movs	r3, #0
 8001418:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800141a:	2300      	movs	r3, #0
 800141c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800141e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001422:	2200      	movs	r2, #0
 8001424:	4619      	mov	r1, r3
 8001426:	4818      	ldr	r0, [pc, #96]	; (8001488 <MX_TIM8_Init+0x164>)
 8001428:	f007 fc54 	bl	8008cd4 <HAL_TIM_PWM_ConfigChannel>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <MX_TIM8_Init+0x112>
  {
    Error_Handler();
 8001432:	f7ff fca1 	bl	8000d78 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001436:	2300      	movs	r3, #0
 8001438:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800143a:	2300      	movs	r3, #0
 800143c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800143e:	2300      	movs	r3, #0
 8001440:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001442:	2300      	movs	r3, #0
 8001444:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001446:	2300      	movs	r3, #0
 8001448:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800144a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800144e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001450:	2300      	movs	r3, #0
 8001452:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001454:	2300      	movs	r3, #0
 8001456:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001458:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800145c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800145e:	2300      	movs	r3, #0
 8001460:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001462:	2300      	movs	r3, #0
 8001464:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001466:	463b      	mov	r3, r7
 8001468:	4619      	mov	r1, r3
 800146a:	4807      	ldr	r0, [pc, #28]	; (8001488 <MX_TIM8_Init+0x164>)
 800146c:	f008 fb2e 	bl	8009acc <HAL_TIMEx_ConfigBreakDeadTime>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <MX_TIM8_Init+0x156>
  {
    Error_Handler();
 8001476:	f7ff fc7f 	bl	8000d78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800147a:	4803      	ldr	r0, [pc, #12]	; (8001488 <MX_TIM8_Init+0x164>)
 800147c:	f000 f862 	bl	8001544 <HAL_TIM_MspPostInit>

}
 8001480:	bf00      	nop
 8001482:	3770      	adds	r7, #112	; 0x70
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	24000b74 	.word	0x24000b74
 800148c:	40010400 	.word	0x40010400

08001490 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001490:	b480      	push	{r7}
 8001492:	b085      	sub	sp, #20
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014a0:	d10e      	bne.n	80014c0 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014a2:	4b0a      	ldr	r3, [pc, #40]	; (80014cc <HAL_TIM_PWM_MspInit+0x3c>)
 80014a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80014a8:	4a08      	ldr	r2, [pc, #32]	; (80014cc <HAL_TIM_PWM_MspInit+0x3c>)
 80014aa:	f043 0301 	orr.w	r3, r3, #1
 80014ae:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80014b2:	4b06      	ldr	r3, [pc, #24]	; (80014cc <HAL_TIM_PWM_MspInit+0x3c>)
 80014b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80014b8:	f003 0301 	and.w	r3, r3, #1
 80014bc:	60fb      	str	r3, [r7, #12]
 80014be:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80014c0:	bf00      	nop
 80014c2:	3714      	adds	r7, #20
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr
 80014cc:	58024400 	.word	0x58024400

080014d0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b085      	sub	sp, #20
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a16      	ldr	r2, [pc, #88]	; (8001538 <HAL_TIM_Base_MspInit+0x68>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d10f      	bne.n	8001502 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80014e2:	4b16      	ldr	r3, [pc, #88]	; (800153c <HAL_TIM_Base_MspInit+0x6c>)
 80014e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80014e8:	4a14      	ldr	r2, [pc, #80]	; (800153c <HAL_TIM_Base_MspInit+0x6c>)
 80014ea:	f043 0302 	orr.w	r3, r3, #2
 80014ee:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80014f2:	4b12      	ldr	r3, [pc, #72]	; (800153c <HAL_TIM_Base_MspInit+0x6c>)
 80014f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80014f8:	f003 0302 	and.w	r3, r3, #2
 80014fc:	60fb      	str	r3, [r7, #12]
 80014fe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8001500:	e013      	b.n	800152a <HAL_TIM_Base_MspInit+0x5a>
  else if(tim_baseHandle->Instance==TIM8)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4a0e      	ldr	r2, [pc, #56]	; (8001540 <HAL_TIM_Base_MspInit+0x70>)
 8001508:	4293      	cmp	r3, r2
 800150a:	d10e      	bne.n	800152a <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800150c:	4b0b      	ldr	r3, [pc, #44]	; (800153c <HAL_TIM_Base_MspInit+0x6c>)
 800150e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001512:	4a0a      	ldr	r2, [pc, #40]	; (800153c <HAL_TIM_Base_MspInit+0x6c>)
 8001514:	f043 0302 	orr.w	r3, r3, #2
 8001518:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800151c:	4b07      	ldr	r3, [pc, #28]	; (800153c <HAL_TIM_Base_MspInit+0x6c>)
 800151e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001522:	f003 0302 	and.w	r3, r3, #2
 8001526:	60bb      	str	r3, [r7, #8]
 8001528:	68bb      	ldr	r3, [r7, #8]
}
 800152a:	bf00      	nop
 800152c:	3714      	adds	r7, #20
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	40000400 	.word	0x40000400
 800153c:	58024400 	.word	0x58024400
 8001540:	40010400 	.word	0x40010400

08001544 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b08a      	sub	sp, #40	; 0x28
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800154c:	f107 0314 	add.w	r3, r7, #20
 8001550:	2200      	movs	r2, #0
 8001552:	601a      	str	r2, [r3, #0]
 8001554:	605a      	str	r2, [r3, #4]
 8001556:	609a      	str	r2, [r3, #8]
 8001558:	60da      	str	r2, [r3, #12]
 800155a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001564:	d11f      	bne.n	80015a6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001566:	4b36      	ldr	r3, [pc, #216]	; (8001640 <HAL_TIM_MspPostInit+0xfc>)
 8001568:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800156c:	4a34      	ldr	r2, [pc, #208]	; (8001640 <HAL_TIM_MspPostInit+0xfc>)
 800156e:	f043 0301 	orr.w	r3, r3, #1
 8001572:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001576:	4b32      	ldr	r3, [pc, #200]	; (8001640 <HAL_TIM_MspPostInit+0xfc>)
 8001578:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800157c:	f003 0301 	and.w	r3, r3, #1
 8001580:	613b      	str	r3, [r7, #16]
 8001582:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001584:	2301      	movs	r3, #1
 8001586:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001588:	2302      	movs	r3, #2
 800158a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158c:	2300      	movs	r3, #0
 800158e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001590:	2300      	movs	r3, #0
 8001592:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001594:	2301      	movs	r3, #1
 8001596:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001598:	f107 0314 	add.w	r3, r7, #20
 800159c:	4619      	mov	r1, r3
 800159e:	4829      	ldr	r0, [pc, #164]	; (8001644 <HAL_TIM_MspPostInit+0x100>)
 80015a0:	f003 fa66 	bl	8004a70 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80015a4:	e048      	b.n	8001638 <HAL_TIM_MspPostInit+0xf4>
  else if(timHandle->Instance==TIM3)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a27      	ldr	r2, [pc, #156]	; (8001648 <HAL_TIM_MspPostInit+0x104>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d11f      	bne.n	80015f0 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015b0:	4b23      	ldr	r3, [pc, #140]	; (8001640 <HAL_TIM_MspPostInit+0xfc>)
 80015b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015b6:	4a22      	ldr	r2, [pc, #136]	; (8001640 <HAL_TIM_MspPostInit+0xfc>)
 80015b8:	f043 0302 	orr.w	r3, r3, #2
 80015bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015c0:	4b1f      	ldr	r3, [pc, #124]	; (8001640 <HAL_TIM_MspPostInit+0xfc>)
 80015c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015c6:	f003 0302 	and.w	r3, r3, #2
 80015ca:	60fb      	str	r3, [r7, #12]
 80015cc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80015ce:	2310      	movs	r3, #16
 80015d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d2:	2302      	movs	r3, #2
 80015d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d6:	2300      	movs	r3, #0
 80015d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015da:	2300      	movs	r3, #0
 80015dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80015de:	2302      	movs	r3, #2
 80015e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015e2:	f107 0314 	add.w	r3, r7, #20
 80015e6:	4619      	mov	r1, r3
 80015e8:	4818      	ldr	r0, [pc, #96]	; (800164c <HAL_TIM_MspPostInit+0x108>)
 80015ea:	f003 fa41 	bl	8004a70 <HAL_GPIO_Init>
}
 80015ee:	e023      	b.n	8001638 <HAL_TIM_MspPostInit+0xf4>
  else if(timHandle->Instance==TIM8)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a16      	ldr	r2, [pc, #88]	; (8001650 <HAL_TIM_MspPostInit+0x10c>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d11e      	bne.n	8001638 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015fa:	4b11      	ldr	r3, [pc, #68]	; (8001640 <HAL_TIM_MspPostInit+0xfc>)
 80015fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001600:	4a0f      	ldr	r2, [pc, #60]	; (8001640 <HAL_TIM_MspPostInit+0xfc>)
 8001602:	f043 0304 	orr.w	r3, r3, #4
 8001606:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800160a:	4b0d      	ldr	r3, [pc, #52]	; (8001640 <HAL_TIM_MspPostInit+0xfc>)
 800160c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001610:	f003 0304 	and.w	r3, r3, #4
 8001614:	60bb      	str	r3, [r7, #8]
 8001616:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001618:	2340      	movs	r3, #64	; 0x40
 800161a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800161c:	2302      	movs	r3, #2
 800161e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001620:	2300      	movs	r3, #0
 8001622:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001624:	2300      	movs	r3, #0
 8001626:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001628:	2303      	movs	r3, #3
 800162a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800162c:	f107 0314 	add.w	r3, r7, #20
 8001630:	4619      	mov	r1, r3
 8001632:	4808      	ldr	r0, [pc, #32]	; (8001654 <HAL_TIM_MspPostInit+0x110>)
 8001634:	f003 fa1c 	bl	8004a70 <HAL_GPIO_Init>
}
 8001638:	bf00      	nop
 800163a:	3728      	adds	r7, #40	; 0x28
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	58024400 	.word	0x58024400
 8001644:	58020000 	.word	0x58020000
 8001648:	40000400 	.word	0x40000400
 800164c:	58020400 	.word	0x58020400
 8001650:	40010400 	.word	0x40010400
 8001654:	58020800 	.word	0x58020800

08001658 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800165c:	4b22      	ldr	r3, [pc, #136]	; (80016e8 <MX_USART3_UART_Init+0x90>)
 800165e:	4a23      	ldr	r2, [pc, #140]	; (80016ec <MX_USART3_UART_Init+0x94>)
 8001660:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001662:	4b21      	ldr	r3, [pc, #132]	; (80016e8 <MX_USART3_UART_Init+0x90>)
 8001664:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001668:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800166a:	4b1f      	ldr	r3, [pc, #124]	; (80016e8 <MX_USART3_UART_Init+0x90>)
 800166c:	2200      	movs	r2, #0
 800166e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001670:	4b1d      	ldr	r3, [pc, #116]	; (80016e8 <MX_USART3_UART_Init+0x90>)
 8001672:	2200      	movs	r2, #0
 8001674:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001676:	4b1c      	ldr	r3, [pc, #112]	; (80016e8 <MX_USART3_UART_Init+0x90>)
 8001678:	2200      	movs	r2, #0
 800167a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800167c:	4b1a      	ldr	r3, [pc, #104]	; (80016e8 <MX_USART3_UART_Init+0x90>)
 800167e:	220c      	movs	r2, #12
 8001680:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001682:	4b19      	ldr	r3, [pc, #100]	; (80016e8 <MX_USART3_UART_Init+0x90>)
 8001684:	2200      	movs	r2, #0
 8001686:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001688:	4b17      	ldr	r3, [pc, #92]	; (80016e8 <MX_USART3_UART_Init+0x90>)
 800168a:	2200      	movs	r2, #0
 800168c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800168e:	4b16      	ldr	r3, [pc, #88]	; (80016e8 <MX_USART3_UART_Init+0x90>)
 8001690:	2200      	movs	r2, #0
 8001692:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001694:	4b14      	ldr	r3, [pc, #80]	; (80016e8 <MX_USART3_UART_Init+0x90>)
 8001696:	2200      	movs	r2, #0
 8001698:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800169a:	4b13      	ldr	r3, [pc, #76]	; (80016e8 <MX_USART3_UART_Init+0x90>)
 800169c:	2200      	movs	r2, #0
 800169e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80016a0:	4811      	ldr	r0, [pc, #68]	; (80016e8 <MX_USART3_UART_Init+0x90>)
 80016a2:	f008 fab3 	bl	8009c0c <HAL_UART_Init>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80016ac:	f7ff fb64 	bl	8000d78 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016b0:	2100      	movs	r1, #0
 80016b2:	480d      	ldr	r0, [pc, #52]	; (80016e8 <MX_USART3_UART_Init+0x90>)
 80016b4:	f009 fbb9 	bl	800ae2a <HAL_UARTEx_SetTxFifoThreshold>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80016be:	f7ff fb5b 	bl	8000d78 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016c2:	2100      	movs	r1, #0
 80016c4:	4808      	ldr	r0, [pc, #32]	; (80016e8 <MX_USART3_UART_Init+0x90>)
 80016c6:	f009 fbee 	bl	800aea6 <HAL_UARTEx_SetRxFifoThreshold>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d001      	beq.n	80016d4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80016d0:	f7ff fb52 	bl	8000d78 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80016d4:	4804      	ldr	r0, [pc, #16]	; (80016e8 <MX_USART3_UART_Init+0x90>)
 80016d6:	f009 fb6f 	bl	800adb8 <HAL_UARTEx_DisableFifoMode>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d001      	beq.n	80016e4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80016e0:	f7ff fb4a 	bl	8000d78 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80016e4:	bf00      	nop
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	24000bc0 	.word	0x24000bc0
 80016ec:	40004800 	.word	0x40004800

080016f0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b0b8      	sub	sp, #224	; 0xe0
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80016fc:	2200      	movs	r2, #0
 80016fe:	601a      	str	r2, [r3, #0]
 8001700:	605a      	str	r2, [r3, #4]
 8001702:	609a      	str	r2, [r3, #8]
 8001704:	60da      	str	r2, [r3, #12]
 8001706:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001708:	f107 0310 	add.w	r3, r7, #16
 800170c:	22b8      	movs	r2, #184	; 0xb8
 800170e:	2100      	movs	r1, #0
 8001710:	4618      	mov	r0, r3
 8001712:	f009 fc55 	bl	800afc0 <memset>
  if(uartHandle->Instance==USART3)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a27      	ldr	r2, [pc, #156]	; (80017b8 <HAL_UART_MspInit+0xc8>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d146      	bne.n	80017ae <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001720:	f04f 0202 	mov.w	r2, #2
 8001724:	f04f 0300 	mov.w	r3, #0
 8001728:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800172c:	2300      	movs	r3, #0
 800172e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001732:	f107 0310 	add.w	r3, r7, #16
 8001736:	4618      	mov	r0, r3
 8001738:	f004 fb30 	bl	8005d9c <HAL_RCCEx_PeriphCLKConfig>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001742:	f7ff fb19 	bl	8000d78 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001746:	4b1d      	ldr	r3, [pc, #116]	; (80017bc <HAL_UART_MspInit+0xcc>)
 8001748:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800174c:	4a1b      	ldr	r2, [pc, #108]	; (80017bc <HAL_UART_MspInit+0xcc>)
 800174e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001752:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001756:	4b19      	ldr	r3, [pc, #100]	; (80017bc <HAL_UART_MspInit+0xcc>)
 8001758:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800175c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001760:	60fb      	str	r3, [r7, #12]
 8001762:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001764:	4b15      	ldr	r3, [pc, #84]	; (80017bc <HAL_UART_MspInit+0xcc>)
 8001766:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800176a:	4a14      	ldr	r2, [pc, #80]	; (80017bc <HAL_UART_MspInit+0xcc>)
 800176c:	f043 0308 	orr.w	r3, r3, #8
 8001770:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001774:	4b11      	ldr	r3, [pc, #68]	; (80017bc <HAL_UART_MspInit+0xcc>)
 8001776:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800177a:	f003 0308 	and.w	r3, r3, #8
 800177e:	60bb      	str	r3, [r7, #8]
 8001780:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 8001782:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001786:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800178a:	2302      	movs	r3, #2
 800178c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001790:	2300      	movs	r3, #0
 8001792:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001796:	2300      	movs	r3, #0
 8001798:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800179c:	2307      	movs	r3, #7
 800179e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017a2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80017a6:	4619      	mov	r1, r3
 80017a8:	4805      	ldr	r0, [pc, #20]	; (80017c0 <HAL_UART_MspInit+0xd0>)
 80017aa:	f003 f961 	bl	8004a70 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80017ae:	bf00      	nop
 80017b0:	37e0      	adds	r7, #224	; 0xe0
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	40004800 	.word	0x40004800
 80017bc:	58024400 	.word	0x58024400
 80017c0:	58020c00 	.word	0x58020c00

080017c4 <MX_USB_OTG_HS_USB_Init>:
/* USER CODE END 0 */

/* USB_OTG_HS init function */

void MX_USB_OTG_HS_USB_Init(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 80017c8:	bf00      	nop
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
	...

080017d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80017d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800180c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80017d8:	f7ff fc4e 	bl	8001078 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017dc:	480c      	ldr	r0, [pc, #48]	; (8001810 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017de:	490d      	ldr	r1, [pc, #52]	; (8001814 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80017e0:	4a0d      	ldr	r2, [pc, #52]	; (8001818 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80017e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017e4:	e002      	b.n	80017ec <LoopCopyDataInit>

080017e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017ea:	3304      	adds	r3, #4

080017ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017f0:	d3f9      	bcc.n	80017e6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017f2:	4a0a      	ldr	r2, [pc, #40]	; (800181c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017f4:	4c0a      	ldr	r4, [pc, #40]	; (8001820 <LoopFillZerobss+0x22>)
  movs r3, #0
 80017f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017f8:	e001      	b.n	80017fe <LoopFillZerobss>

080017fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017fc:	3204      	adds	r2, #4

080017fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001800:	d3fb      	bcc.n	80017fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001802:	f009 fbe5 	bl	800afd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001806:	f7ff f96f 	bl	8000ae8 <main>
  bx  lr
 800180a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800180c:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001810:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001814:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8001818:	0800b080 	.word	0x0800b080
  ldr r2, =_sbss
 800181c:	240000d0 	.word	0x240000d0
  ldr r4, =_ebss
 8001820:	24000c58 	.word	0x24000c58

08001824 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001824:	e7fe      	b.n	8001824 <ADC3_IRQHandler>
	...

08001828 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800182e:	2003      	movs	r0, #3
 8001830:	f000 f994 	bl	8001b5c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001834:	f004 f8dc 	bl	80059f0 <HAL_RCC_GetSysClockFreq>
 8001838:	4602      	mov	r2, r0
 800183a:	4b15      	ldr	r3, [pc, #84]	; (8001890 <HAL_Init+0x68>)
 800183c:	699b      	ldr	r3, [r3, #24]
 800183e:	0a1b      	lsrs	r3, r3, #8
 8001840:	f003 030f 	and.w	r3, r3, #15
 8001844:	4913      	ldr	r1, [pc, #76]	; (8001894 <HAL_Init+0x6c>)
 8001846:	5ccb      	ldrb	r3, [r1, r3]
 8001848:	f003 031f 	and.w	r3, r3, #31
 800184c:	fa22 f303 	lsr.w	r3, r2, r3
 8001850:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001852:	4b0f      	ldr	r3, [pc, #60]	; (8001890 <HAL_Init+0x68>)
 8001854:	699b      	ldr	r3, [r3, #24]
 8001856:	f003 030f 	and.w	r3, r3, #15
 800185a:	4a0e      	ldr	r2, [pc, #56]	; (8001894 <HAL_Init+0x6c>)
 800185c:	5cd3      	ldrb	r3, [r2, r3]
 800185e:	f003 031f 	and.w	r3, r3, #31
 8001862:	687a      	ldr	r2, [r7, #4]
 8001864:	fa22 f303 	lsr.w	r3, r2, r3
 8001868:	4a0b      	ldr	r2, [pc, #44]	; (8001898 <HAL_Init+0x70>)
 800186a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800186c:	4a0b      	ldr	r2, [pc, #44]	; (800189c <HAL_Init+0x74>)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001872:	2000      	movs	r0, #0
 8001874:	f000 f814 	bl	80018a0 <HAL_InitTick>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e002      	b.n	8001888 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001882:	f7ff fb99 	bl	8000fb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001886:	2300      	movs	r3, #0
}
 8001888:	4618      	mov	r0, r3
 800188a:	3708      	adds	r7, #8
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	58024400 	.word	0x58024400
 8001894:	0800b030 	.word	0x0800b030
 8001898:	24000004 	.word	0x24000004
 800189c:	24000000 	.word	0x24000000

080018a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80018a8:	4b15      	ldr	r3, [pc, #84]	; (8001900 <HAL_InitTick+0x60>)
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d101      	bne.n	80018b4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80018b0:	2301      	movs	r3, #1
 80018b2:	e021      	b.n	80018f8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80018b4:	4b13      	ldr	r3, [pc, #76]	; (8001904 <HAL_InitTick+0x64>)
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	4b11      	ldr	r3, [pc, #68]	; (8001900 <HAL_InitTick+0x60>)
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	4619      	mov	r1, r3
 80018be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80018c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ca:	4618      	mov	r0, r3
 80018cc:	f000 f979 	bl	8001bc2 <HAL_SYSTICK_Config>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e00e      	b.n	80018f8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2b0f      	cmp	r3, #15
 80018de:	d80a      	bhi.n	80018f6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018e0:	2200      	movs	r2, #0
 80018e2:	6879      	ldr	r1, [r7, #4]
 80018e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80018e8:	f000 f943 	bl	8001b72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018ec:	4a06      	ldr	r2, [pc, #24]	; (8001908 <HAL_InitTick+0x68>)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018f2:	2300      	movs	r3, #0
 80018f4:	e000      	b.n	80018f8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	3708      	adds	r7, #8
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	2400000c 	.word	0x2400000c
 8001904:	24000000 	.word	0x24000000
 8001908:	24000008 	.word	0x24000008

0800190c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001910:	4b06      	ldr	r3, [pc, #24]	; (800192c <HAL_IncTick+0x20>)
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	461a      	mov	r2, r3
 8001916:	4b06      	ldr	r3, [pc, #24]	; (8001930 <HAL_IncTick+0x24>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4413      	add	r3, r2
 800191c:	4a04      	ldr	r2, [pc, #16]	; (8001930 <HAL_IncTick+0x24>)
 800191e:	6013      	str	r3, [r2, #0]
}
 8001920:	bf00      	nop
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop
 800192c:	2400000c 	.word	0x2400000c
 8001930:	24000c54 	.word	0x24000c54

08001934 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  return uwTick;
 8001938:	4b03      	ldr	r3, [pc, #12]	; (8001948 <HAL_GetTick+0x14>)
 800193a:	681b      	ldr	r3, [r3, #0]
}
 800193c:	4618      	mov	r0, r3
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	24000c54 	.word	0x24000c54

0800194c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b084      	sub	sp, #16
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001954:	f7ff ffee 	bl	8001934 <HAL_GetTick>
 8001958:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001964:	d005      	beq.n	8001972 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001966:	4b0a      	ldr	r3, [pc, #40]	; (8001990 <HAL_Delay+0x44>)
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	461a      	mov	r2, r3
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	4413      	add	r3, r2
 8001970:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001972:	bf00      	nop
 8001974:	f7ff ffde 	bl	8001934 <HAL_GetTick>
 8001978:	4602      	mov	r2, r0
 800197a:	68bb      	ldr	r3, [r7, #8]
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	68fa      	ldr	r2, [r7, #12]
 8001980:	429a      	cmp	r2, r3
 8001982:	d8f7      	bhi.n	8001974 <HAL_Delay+0x28>
  {
  }
}
 8001984:	bf00      	nop
 8001986:	bf00      	nop
 8001988:	3710      	adds	r7, #16
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	2400000c 	.word	0x2400000c

08001994 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 800199c:	4b06      	ldr	r3, [pc, #24]	; (80019b8 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80019a4:	4904      	ldr	r1, [pc, #16]	; (80019b8 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4313      	orrs	r3, r2
 80019aa:	604b      	str	r3, [r1, #4]
}
 80019ac:	bf00      	nop
 80019ae:	370c      	adds	r7, #12
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr
 80019b8:	58000400 	.word	0x58000400

080019bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019bc:	b480      	push	{r7}
 80019be:	b085      	sub	sp, #20
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	f003 0307 	and.w	r3, r3, #7
 80019ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019cc:	4b0b      	ldr	r3, [pc, #44]	; (80019fc <__NVIC_SetPriorityGrouping+0x40>)
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019d2:	68ba      	ldr	r2, [r7, #8]
 80019d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019d8:	4013      	ands	r3, r2
 80019da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80019e4:	4b06      	ldr	r3, [pc, #24]	; (8001a00 <__NVIC_SetPriorityGrouping+0x44>)
 80019e6:	4313      	orrs	r3, r2
 80019e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019ea:	4a04      	ldr	r2, [pc, #16]	; (80019fc <__NVIC_SetPriorityGrouping+0x40>)
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	60d3      	str	r3, [r2, #12]
}
 80019f0:	bf00      	nop
 80019f2:	3714      	adds	r7, #20
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr
 80019fc:	e000ed00 	.word	0xe000ed00
 8001a00:	05fa0000 	.word	0x05fa0000

08001a04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a08:	4b04      	ldr	r3, [pc, #16]	; (8001a1c <__NVIC_GetPriorityGrouping+0x18>)
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	0a1b      	lsrs	r3, r3, #8
 8001a0e:	f003 0307 	and.w	r3, r3, #7
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr
 8001a1c:	e000ed00 	.word	0xe000ed00

08001a20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	4603      	mov	r3, r0
 8001a28:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001a2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	db0b      	blt.n	8001a4a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a32:	88fb      	ldrh	r3, [r7, #6]
 8001a34:	f003 021f 	and.w	r2, r3, #31
 8001a38:	4907      	ldr	r1, [pc, #28]	; (8001a58 <__NVIC_EnableIRQ+0x38>)
 8001a3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a3e:	095b      	lsrs	r3, r3, #5
 8001a40:	2001      	movs	r0, #1
 8001a42:	fa00 f202 	lsl.w	r2, r0, r2
 8001a46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a4a:	bf00      	nop
 8001a4c:	370c      	adds	r7, #12
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop
 8001a58:	e000e100 	.word	0xe000e100

08001a5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	4603      	mov	r3, r0
 8001a64:	6039      	str	r1, [r7, #0]
 8001a66:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001a68:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	db0a      	blt.n	8001a86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	b2da      	uxtb	r2, r3
 8001a74:	490c      	ldr	r1, [pc, #48]	; (8001aa8 <__NVIC_SetPriority+0x4c>)
 8001a76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a7a:	0112      	lsls	r2, r2, #4
 8001a7c:	b2d2      	uxtb	r2, r2
 8001a7e:	440b      	add	r3, r1
 8001a80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a84:	e00a      	b.n	8001a9c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	b2da      	uxtb	r2, r3
 8001a8a:	4908      	ldr	r1, [pc, #32]	; (8001aac <__NVIC_SetPriority+0x50>)
 8001a8c:	88fb      	ldrh	r3, [r7, #6]
 8001a8e:	f003 030f 	and.w	r3, r3, #15
 8001a92:	3b04      	subs	r3, #4
 8001a94:	0112      	lsls	r2, r2, #4
 8001a96:	b2d2      	uxtb	r2, r2
 8001a98:	440b      	add	r3, r1
 8001a9a:	761a      	strb	r2, [r3, #24]
}
 8001a9c:	bf00      	nop
 8001a9e:	370c      	adds	r7, #12
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr
 8001aa8:	e000e100 	.word	0xe000e100
 8001aac:	e000ed00 	.word	0xe000ed00

08001ab0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b089      	sub	sp, #36	; 0x24
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	60f8      	str	r0, [r7, #12]
 8001ab8:	60b9      	str	r1, [r7, #8]
 8001aba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	f003 0307 	and.w	r3, r3, #7
 8001ac2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ac4:	69fb      	ldr	r3, [r7, #28]
 8001ac6:	f1c3 0307 	rsb	r3, r3, #7
 8001aca:	2b04      	cmp	r3, #4
 8001acc:	bf28      	it	cs
 8001ace:	2304      	movcs	r3, #4
 8001ad0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	3304      	adds	r3, #4
 8001ad6:	2b06      	cmp	r3, #6
 8001ad8:	d902      	bls.n	8001ae0 <NVIC_EncodePriority+0x30>
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	3b03      	subs	r3, #3
 8001ade:	e000      	b.n	8001ae2 <NVIC_EncodePriority+0x32>
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ae4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ae8:	69bb      	ldr	r3, [r7, #24]
 8001aea:	fa02 f303 	lsl.w	r3, r2, r3
 8001aee:	43da      	mvns	r2, r3
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	401a      	ands	r2, r3
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001af8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	fa01 f303 	lsl.w	r3, r1, r3
 8001b02:	43d9      	mvns	r1, r3
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b08:	4313      	orrs	r3, r2
         );
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3724      	adds	r7, #36	; 0x24
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr
	...

08001b18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	3b01      	subs	r3, #1
 8001b24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b28:	d301      	bcc.n	8001b2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e00f      	b.n	8001b4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b2e:	4a0a      	ldr	r2, [pc, #40]	; (8001b58 <SysTick_Config+0x40>)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	3b01      	subs	r3, #1
 8001b34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b36:	210f      	movs	r1, #15
 8001b38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b3c:	f7ff ff8e 	bl	8001a5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b40:	4b05      	ldr	r3, [pc, #20]	; (8001b58 <SysTick_Config+0x40>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b46:	4b04      	ldr	r3, [pc, #16]	; (8001b58 <SysTick_Config+0x40>)
 8001b48:	2207      	movs	r2, #7
 8001b4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b4c:	2300      	movs	r3, #0
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3708      	adds	r7, #8
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	e000e010 	.word	0xe000e010

08001b5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b64:	6878      	ldr	r0, [r7, #4]
 8001b66:	f7ff ff29 	bl	80019bc <__NVIC_SetPriorityGrouping>
}
 8001b6a:	bf00      	nop
 8001b6c:	3708      	adds	r7, #8
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}

08001b72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b72:	b580      	push	{r7, lr}
 8001b74:	b086      	sub	sp, #24
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	4603      	mov	r3, r0
 8001b7a:	60b9      	str	r1, [r7, #8]
 8001b7c:	607a      	str	r2, [r7, #4]
 8001b7e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b80:	f7ff ff40 	bl	8001a04 <__NVIC_GetPriorityGrouping>
 8001b84:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b86:	687a      	ldr	r2, [r7, #4]
 8001b88:	68b9      	ldr	r1, [r7, #8]
 8001b8a:	6978      	ldr	r0, [r7, #20]
 8001b8c:	f7ff ff90 	bl	8001ab0 <NVIC_EncodePriority>
 8001b90:	4602      	mov	r2, r0
 8001b92:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001b96:	4611      	mov	r1, r2
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f7ff ff5f 	bl	8001a5c <__NVIC_SetPriority>
}
 8001b9e:	bf00      	nop
 8001ba0:	3718      	adds	r7, #24
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}

08001ba6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ba6:	b580      	push	{r7, lr}
 8001ba8:	b082      	sub	sp, #8
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	4603      	mov	r3, r0
 8001bae:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bb0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f7ff ff33 	bl	8001a20 <__NVIC_EnableIRQ>
}
 8001bba:	bf00      	nop
 8001bbc:	3708      	adds	r7, #8
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}

08001bc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bc2:	b580      	push	{r7, lr}
 8001bc4:	b082      	sub	sp, #8
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f7ff ffa4 	bl	8001b18 <SysTick_Config>
 8001bd0:	4603      	mov	r3, r0
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3708      	adds	r7, #8
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
	...

08001bdc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b086      	sub	sp, #24
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001be4:	f7ff fea6 	bl	8001934 <HAL_GetTick>
 8001be8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d101      	bne.n	8001bf4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	e312      	b.n	800221a <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a66      	ldr	r2, [pc, #408]	; (8001d94 <HAL_DMA_Init+0x1b8>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d04a      	beq.n	8001c94 <HAL_DMA_Init+0xb8>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a65      	ldr	r2, [pc, #404]	; (8001d98 <HAL_DMA_Init+0x1bc>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d045      	beq.n	8001c94 <HAL_DMA_Init+0xb8>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a63      	ldr	r2, [pc, #396]	; (8001d9c <HAL_DMA_Init+0x1c0>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d040      	beq.n	8001c94 <HAL_DMA_Init+0xb8>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a62      	ldr	r2, [pc, #392]	; (8001da0 <HAL_DMA_Init+0x1c4>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d03b      	beq.n	8001c94 <HAL_DMA_Init+0xb8>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a60      	ldr	r2, [pc, #384]	; (8001da4 <HAL_DMA_Init+0x1c8>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d036      	beq.n	8001c94 <HAL_DMA_Init+0xb8>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a5f      	ldr	r2, [pc, #380]	; (8001da8 <HAL_DMA_Init+0x1cc>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d031      	beq.n	8001c94 <HAL_DMA_Init+0xb8>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a5d      	ldr	r2, [pc, #372]	; (8001dac <HAL_DMA_Init+0x1d0>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d02c      	beq.n	8001c94 <HAL_DMA_Init+0xb8>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a5c      	ldr	r2, [pc, #368]	; (8001db0 <HAL_DMA_Init+0x1d4>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d027      	beq.n	8001c94 <HAL_DMA_Init+0xb8>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a5a      	ldr	r2, [pc, #360]	; (8001db4 <HAL_DMA_Init+0x1d8>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d022      	beq.n	8001c94 <HAL_DMA_Init+0xb8>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a59      	ldr	r2, [pc, #356]	; (8001db8 <HAL_DMA_Init+0x1dc>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d01d      	beq.n	8001c94 <HAL_DMA_Init+0xb8>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a57      	ldr	r2, [pc, #348]	; (8001dbc <HAL_DMA_Init+0x1e0>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d018      	beq.n	8001c94 <HAL_DMA_Init+0xb8>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a56      	ldr	r2, [pc, #344]	; (8001dc0 <HAL_DMA_Init+0x1e4>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d013      	beq.n	8001c94 <HAL_DMA_Init+0xb8>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a54      	ldr	r2, [pc, #336]	; (8001dc4 <HAL_DMA_Init+0x1e8>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d00e      	beq.n	8001c94 <HAL_DMA_Init+0xb8>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a53      	ldr	r2, [pc, #332]	; (8001dc8 <HAL_DMA_Init+0x1ec>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d009      	beq.n	8001c94 <HAL_DMA_Init+0xb8>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a51      	ldr	r2, [pc, #324]	; (8001dcc <HAL_DMA_Init+0x1f0>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d004      	beq.n	8001c94 <HAL_DMA_Init+0xb8>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a50      	ldr	r2, [pc, #320]	; (8001dd0 <HAL_DMA_Init+0x1f4>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d101      	bne.n	8001c98 <HAL_DMA_Init+0xbc>
 8001c94:	2301      	movs	r3, #1
 8001c96:	e000      	b.n	8001c9a <HAL_DMA_Init+0xbe>
 8001c98:	2300      	movs	r3, #0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	f000 813c 	beq.w	8001f18 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2202      	movs	r2, #2
 8001ca4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2200      	movs	r2, #0
 8001cac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a37      	ldr	r2, [pc, #220]	; (8001d94 <HAL_DMA_Init+0x1b8>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d04a      	beq.n	8001d50 <HAL_DMA_Init+0x174>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a36      	ldr	r2, [pc, #216]	; (8001d98 <HAL_DMA_Init+0x1bc>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d045      	beq.n	8001d50 <HAL_DMA_Init+0x174>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a34      	ldr	r2, [pc, #208]	; (8001d9c <HAL_DMA_Init+0x1c0>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d040      	beq.n	8001d50 <HAL_DMA_Init+0x174>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a33      	ldr	r2, [pc, #204]	; (8001da0 <HAL_DMA_Init+0x1c4>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d03b      	beq.n	8001d50 <HAL_DMA_Init+0x174>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a31      	ldr	r2, [pc, #196]	; (8001da4 <HAL_DMA_Init+0x1c8>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d036      	beq.n	8001d50 <HAL_DMA_Init+0x174>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a30      	ldr	r2, [pc, #192]	; (8001da8 <HAL_DMA_Init+0x1cc>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d031      	beq.n	8001d50 <HAL_DMA_Init+0x174>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a2e      	ldr	r2, [pc, #184]	; (8001dac <HAL_DMA_Init+0x1d0>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d02c      	beq.n	8001d50 <HAL_DMA_Init+0x174>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a2d      	ldr	r2, [pc, #180]	; (8001db0 <HAL_DMA_Init+0x1d4>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d027      	beq.n	8001d50 <HAL_DMA_Init+0x174>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a2b      	ldr	r2, [pc, #172]	; (8001db4 <HAL_DMA_Init+0x1d8>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d022      	beq.n	8001d50 <HAL_DMA_Init+0x174>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a2a      	ldr	r2, [pc, #168]	; (8001db8 <HAL_DMA_Init+0x1dc>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d01d      	beq.n	8001d50 <HAL_DMA_Init+0x174>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a28      	ldr	r2, [pc, #160]	; (8001dbc <HAL_DMA_Init+0x1e0>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d018      	beq.n	8001d50 <HAL_DMA_Init+0x174>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a27      	ldr	r2, [pc, #156]	; (8001dc0 <HAL_DMA_Init+0x1e4>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d013      	beq.n	8001d50 <HAL_DMA_Init+0x174>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a25      	ldr	r2, [pc, #148]	; (8001dc4 <HAL_DMA_Init+0x1e8>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d00e      	beq.n	8001d50 <HAL_DMA_Init+0x174>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a24      	ldr	r2, [pc, #144]	; (8001dc8 <HAL_DMA_Init+0x1ec>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d009      	beq.n	8001d50 <HAL_DMA_Init+0x174>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a22      	ldr	r2, [pc, #136]	; (8001dcc <HAL_DMA_Init+0x1f0>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d004      	beq.n	8001d50 <HAL_DMA_Init+0x174>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a21      	ldr	r2, [pc, #132]	; (8001dd0 <HAL_DMA_Init+0x1f4>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d108      	bne.n	8001d62 <HAL_DMA_Init+0x186>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f022 0201 	bic.w	r2, r2, #1
 8001d5e:	601a      	str	r2, [r3, #0]
 8001d60:	e007      	b.n	8001d72 <HAL_DMA_Init+0x196>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f022 0201 	bic.w	r2, r2, #1
 8001d70:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001d72:	e02f      	b.n	8001dd4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d74:	f7ff fdde 	bl	8001934 <HAL_GetTick>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	2b05      	cmp	r3, #5
 8001d80:	d928      	bls.n	8001dd4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2220      	movs	r2, #32
 8001d86:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2203      	movs	r2, #3
 8001d8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001d90:	2301      	movs	r3, #1
 8001d92:	e242      	b.n	800221a <HAL_DMA_Init+0x63e>
 8001d94:	40020010 	.word	0x40020010
 8001d98:	40020028 	.word	0x40020028
 8001d9c:	40020040 	.word	0x40020040
 8001da0:	40020058 	.word	0x40020058
 8001da4:	40020070 	.word	0x40020070
 8001da8:	40020088 	.word	0x40020088
 8001dac:	400200a0 	.word	0x400200a0
 8001db0:	400200b8 	.word	0x400200b8
 8001db4:	40020410 	.word	0x40020410
 8001db8:	40020428 	.word	0x40020428
 8001dbc:	40020440 	.word	0x40020440
 8001dc0:	40020458 	.word	0x40020458
 8001dc4:	40020470 	.word	0x40020470
 8001dc8:	40020488 	.word	0x40020488
 8001dcc:	400204a0 	.word	0x400204a0
 8001dd0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 0301 	and.w	r3, r3, #1
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d1c8      	bne.n	8001d74 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001dea:	697a      	ldr	r2, [r7, #20]
 8001dec:	4b83      	ldr	r3, [pc, #524]	; (8001ffc <HAL_DMA_Init+0x420>)
 8001dee:	4013      	ands	r3, r2
 8001df0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001dfa:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	691b      	ldr	r3, [r3, #16]
 8001e00:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e06:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	699b      	ldr	r3, [r3, #24]
 8001e0c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e12:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6a1b      	ldr	r3, [r3, #32]
 8001e18:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001e1a:	697a      	ldr	r2, [r7, #20]
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e24:	2b04      	cmp	r3, #4
 8001e26:	d107      	bne.n	8001e38 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e30:	4313      	orrs	r3, r2
 8001e32:	697a      	ldr	r2, [r7, #20]
 8001e34:	4313      	orrs	r3, r2
 8001e36:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	2b28      	cmp	r3, #40	; 0x28
 8001e3e:	d903      	bls.n	8001e48 <HAL_DMA_Init+0x26c>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	2b2e      	cmp	r3, #46	; 0x2e
 8001e46:	d91f      	bls.n	8001e88 <HAL_DMA_Init+0x2ac>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	2b3e      	cmp	r3, #62	; 0x3e
 8001e4e:	d903      	bls.n	8001e58 <HAL_DMA_Init+0x27c>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	2b42      	cmp	r3, #66	; 0x42
 8001e56:	d917      	bls.n	8001e88 <HAL_DMA_Init+0x2ac>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	2b46      	cmp	r3, #70	; 0x46
 8001e5e:	d903      	bls.n	8001e68 <HAL_DMA_Init+0x28c>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	2b48      	cmp	r3, #72	; 0x48
 8001e66:	d90f      	bls.n	8001e88 <HAL_DMA_Init+0x2ac>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	2b4e      	cmp	r3, #78	; 0x4e
 8001e6e:	d903      	bls.n	8001e78 <HAL_DMA_Init+0x29c>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	2b52      	cmp	r3, #82	; 0x52
 8001e76:	d907      	bls.n	8001e88 <HAL_DMA_Init+0x2ac>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	2b73      	cmp	r3, #115	; 0x73
 8001e7e:	d905      	bls.n	8001e8c <HAL_DMA_Init+0x2b0>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	2b77      	cmp	r3, #119	; 0x77
 8001e86:	d801      	bhi.n	8001e8c <HAL_DMA_Init+0x2b0>
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e000      	b.n	8001e8e <HAL_DMA_Init+0x2b2>
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d003      	beq.n	8001e9a <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001e98:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	697a      	ldr	r2, [r7, #20]
 8001ea0:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	695b      	ldr	r3, [r3, #20]
 8001ea8:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	f023 0307 	bic.w	r3, r3, #7
 8001eb0:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb6:	697a      	ldr	r2, [r7, #20]
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec0:	2b04      	cmp	r3, #4
 8001ec2:	d117      	bne.n	8001ef4 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ec8:	697a      	ldr	r2, [r7, #20]
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d00e      	beq.n	8001ef4 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f002 f81c 	bl	8003f14 <DMA_CheckFifoParam>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d008      	beq.n	8001ef4 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2240      	movs	r2, #64	; 0x40
 8001ee6:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2201      	movs	r2, #1
 8001eec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e192      	b.n	800221a <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	697a      	ldr	r2, [r7, #20]
 8001efa:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001efc:	6878      	ldr	r0, [r7, #4]
 8001efe:	f001 ff57 	bl	8003db0 <DMA_CalcBaseAndBitshift>
 8001f02:	4603      	mov	r3, r0
 8001f04:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f0a:	f003 031f 	and.w	r3, r3, #31
 8001f0e:	223f      	movs	r2, #63	; 0x3f
 8001f10:	409a      	lsls	r2, r3
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	609a      	str	r2, [r3, #8]
 8001f16:	e0c8      	b.n	80020aa <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a38      	ldr	r2, [pc, #224]	; (8002000 <HAL_DMA_Init+0x424>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d022      	beq.n	8001f68 <HAL_DMA_Init+0x38c>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a37      	ldr	r2, [pc, #220]	; (8002004 <HAL_DMA_Init+0x428>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d01d      	beq.n	8001f68 <HAL_DMA_Init+0x38c>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a35      	ldr	r2, [pc, #212]	; (8002008 <HAL_DMA_Init+0x42c>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d018      	beq.n	8001f68 <HAL_DMA_Init+0x38c>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a34      	ldr	r2, [pc, #208]	; (800200c <HAL_DMA_Init+0x430>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d013      	beq.n	8001f68 <HAL_DMA_Init+0x38c>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a32      	ldr	r2, [pc, #200]	; (8002010 <HAL_DMA_Init+0x434>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d00e      	beq.n	8001f68 <HAL_DMA_Init+0x38c>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a31      	ldr	r2, [pc, #196]	; (8002014 <HAL_DMA_Init+0x438>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d009      	beq.n	8001f68 <HAL_DMA_Init+0x38c>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a2f      	ldr	r2, [pc, #188]	; (8002018 <HAL_DMA_Init+0x43c>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d004      	beq.n	8001f68 <HAL_DMA_Init+0x38c>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a2e      	ldr	r2, [pc, #184]	; (800201c <HAL_DMA_Init+0x440>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d101      	bne.n	8001f6c <HAL_DMA_Init+0x390>
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e000      	b.n	8001f6e <HAL_DMA_Init+0x392>
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	f000 8092 	beq.w	8002098 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a21      	ldr	r2, [pc, #132]	; (8002000 <HAL_DMA_Init+0x424>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d021      	beq.n	8001fc2 <HAL_DMA_Init+0x3e6>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a20      	ldr	r2, [pc, #128]	; (8002004 <HAL_DMA_Init+0x428>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d01c      	beq.n	8001fc2 <HAL_DMA_Init+0x3e6>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a1e      	ldr	r2, [pc, #120]	; (8002008 <HAL_DMA_Init+0x42c>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d017      	beq.n	8001fc2 <HAL_DMA_Init+0x3e6>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a1d      	ldr	r2, [pc, #116]	; (800200c <HAL_DMA_Init+0x430>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d012      	beq.n	8001fc2 <HAL_DMA_Init+0x3e6>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a1b      	ldr	r2, [pc, #108]	; (8002010 <HAL_DMA_Init+0x434>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d00d      	beq.n	8001fc2 <HAL_DMA_Init+0x3e6>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a1a      	ldr	r2, [pc, #104]	; (8002014 <HAL_DMA_Init+0x438>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d008      	beq.n	8001fc2 <HAL_DMA_Init+0x3e6>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a18      	ldr	r2, [pc, #96]	; (8002018 <HAL_DMA_Init+0x43c>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d003      	beq.n	8001fc2 <HAL_DMA_Init+0x3e6>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a17      	ldr	r2, [pc, #92]	; (800201c <HAL_DMA_Init+0x440>)
 8001fc0:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2202      	movs	r2, #2
 8001fc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001fda:	697a      	ldr	r2, [r7, #20]
 8001fdc:	4b10      	ldr	r3, [pc, #64]	; (8002020 <HAL_DMA_Init+0x444>)
 8001fde:	4013      	ands	r3, r2
 8001fe0:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	2b40      	cmp	r3, #64	; 0x40
 8001fe8:	d01c      	beq.n	8002024 <HAL_DMA_Init+0x448>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	2b80      	cmp	r3, #128	; 0x80
 8001ff0:	d102      	bne.n	8001ff8 <HAL_DMA_Init+0x41c>
 8001ff2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001ff6:	e016      	b.n	8002026 <HAL_DMA_Init+0x44a>
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	e014      	b.n	8002026 <HAL_DMA_Init+0x44a>
 8001ffc:	fe10803f 	.word	0xfe10803f
 8002000:	58025408 	.word	0x58025408
 8002004:	5802541c 	.word	0x5802541c
 8002008:	58025430 	.word	0x58025430
 800200c:	58025444 	.word	0x58025444
 8002010:	58025458 	.word	0x58025458
 8002014:	5802546c 	.word	0x5802546c
 8002018:	58025480 	.word	0x58025480
 800201c:	58025494 	.word	0x58025494
 8002020:	fffe000f 	.word	0xfffe000f
 8002024:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002026:	687a      	ldr	r2, [r7, #4]
 8002028:	68d2      	ldr	r2, [r2, #12]
 800202a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800202c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	691b      	ldr	r3, [r3, #16]
 8002032:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002034:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	695b      	ldr	r3, [r3, #20]
 800203a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800203c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	699b      	ldr	r3, [r3, #24]
 8002042:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002044:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	69db      	ldr	r3, [r3, #28]
 800204a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800204c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6a1b      	ldr	r3, [r3, #32]
 8002052:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002054:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002056:	697a      	ldr	r2, [r7, #20]
 8002058:	4313      	orrs	r3, r2
 800205a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	697a      	ldr	r2, [r7, #20]
 8002062:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	461a      	mov	r2, r3
 800206a:	4b6e      	ldr	r3, [pc, #440]	; (8002224 <HAL_DMA_Init+0x648>)
 800206c:	4413      	add	r3, r2
 800206e:	4a6e      	ldr	r2, [pc, #440]	; (8002228 <HAL_DMA_Init+0x64c>)
 8002070:	fba2 2303 	umull	r2, r3, r2, r3
 8002074:	091b      	lsrs	r3, r3, #4
 8002076:	009a      	lsls	r2, r3, #2
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800207c:	6878      	ldr	r0, [r7, #4]
 800207e:	f001 fe97 	bl	8003db0 <DMA_CalcBaseAndBitshift>
 8002082:	4603      	mov	r3, r0
 8002084:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800208a:	f003 031f 	and.w	r3, r3, #31
 800208e:	2201      	movs	r2, #1
 8002090:	409a      	lsls	r2, r3
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	605a      	str	r2, [r3, #4]
 8002096:	e008      	b.n	80020aa <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2240      	movs	r2, #64	; 0x40
 800209c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2203      	movs	r2, #3
 80020a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e0b7      	b.n	800221a <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a5f      	ldr	r2, [pc, #380]	; (800222c <HAL_DMA_Init+0x650>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d072      	beq.n	800219a <HAL_DMA_Init+0x5be>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a5d      	ldr	r2, [pc, #372]	; (8002230 <HAL_DMA_Init+0x654>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d06d      	beq.n	800219a <HAL_DMA_Init+0x5be>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a5c      	ldr	r2, [pc, #368]	; (8002234 <HAL_DMA_Init+0x658>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d068      	beq.n	800219a <HAL_DMA_Init+0x5be>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a5a      	ldr	r2, [pc, #360]	; (8002238 <HAL_DMA_Init+0x65c>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d063      	beq.n	800219a <HAL_DMA_Init+0x5be>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a59      	ldr	r2, [pc, #356]	; (800223c <HAL_DMA_Init+0x660>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d05e      	beq.n	800219a <HAL_DMA_Init+0x5be>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a57      	ldr	r2, [pc, #348]	; (8002240 <HAL_DMA_Init+0x664>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d059      	beq.n	800219a <HAL_DMA_Init+0x5be>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a56      	ldr	r2, [pc, #344]	; (8002244 <HAL_DMA_Init+0x668>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d054      	beq.n	800219a <HAL_DMA_Init+0x5be>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a54      	ldr	r2, [pc, #336]	; (8002248 <HAL_DMA_Init+0x66c>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d04f      	beq.n	800219a <HAL_DMA_Init+0x5be>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a53      	ldr	r2, [pc, #332]	; (800224c <HAL_DMA_Init+0x670>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d04a      	beq.n	800219a <HAL_DMA_Init+0x5be>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a51      	ldr	r2, [pc, #324]	; (8002250 <HAL_DMA_Init+0x674>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d045      	beq.n	800219a <HAL_DMA_Init+0x5be>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a50      	ldr	r2, [pc, #320]	; (8002254 <HAL_DMA_Init+0x678>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d040      	beq.n	800219a <HAL_DMA_Init+0x5be>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a4e      	ldr	r2, [pc, #312]	; (8002258 <HAL_DMA_Init+0x67c>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d03b      	beq.n	800219a <HAL_DMA_Init+0x5be>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a4d      	ldr	r2, [pc, #308]	; (800225c <HAL_DMA_Init+0x680>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d036      	beq.n	800219a <HAL_DMA_Init+0x5be>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a4b      	ldr	r2, [pc, #300]	; (8002260 <HAL_DMA_Init+0x684>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d031      	beq.n	800219a <HAL_DMA_Init+0x5be>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a4a      	ldr	r2, [pc, #296]	; (8002264 <HAL_DMA_Init+0x688>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d02c      	beq.n	800219a <HAL_DMA_Init+0x5be>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a48      	ldr	r2, [pc, #288]	; (8002268 <HAL_DMA_Init+0x68c>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d027      	beq.n	800219a <HAL_DMA_Init+0x5be>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a47      	ldr	r2, [pc, #284]	; (800226c <HAL_DMA_Init+0x690>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d022      	beq.n	800219a <HAL_DMA_Init+0x5be>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a45      	ldr	r2, [pc, #276]	; (8002270 <HAL_DMA_Init+0x694>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d01d      	beq.n	800219a <HAL_DMA_Init+0x5be>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a44      	ldr	r2, [pc, #272]	; (8002274 <HAL_DMA_Init+0x698>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d018      	beq.n	800219a <HAL_DMA_Init+0x5be>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a42      	ldr	r2, [pc, #264]	; (8002278 <HAL_DMA_Init+0x69c>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d013      	beq.n	800219a <HAL_DMA_Init+0x5be>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a41      	ldr	r2, [pc, #260]	; (800227c <HAL_DMA_Init+0x6a0>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d00e      	beq.n	800219a <HAL_DMA_Init+0x5be>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a3f      	ldr	r2, [pc, #252]	; (8002280 <HAL_DMA_Init+0x6a4>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d009      	beq.n	800219a <HAL_DMA_Init+0x5be>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a3e      	ldr	r2, [pc, #248]	; (8002284 <HAL_DMA_Init+0x6a8>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d004      	beq.n	800219a <HAL_DMA_Init+0x5be>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a3c      	ldr	r2, [pc, #240]	; (8002288 <HAL_DMA_Init+0x6ac>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d101      	bne.n	800219e <HAL_DMA_Init+0x5c2>
 800219a:	2301      	movs	r3, #1
 800219c:	e000      	b.n	80021a0 <HAL_DMA_Init+0x5c4>
 800219e:	2300      	movs	r3, #0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d032      	beq.n	800220a <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80021a4:	6878      	ldr	r0, [r7, #4]
 80021a6:	f001 ff31 	bl	800400c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	2b80      	cmp	r3, #128	; 0x80
 80021b0:	d102      	bne.n	80021b8 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2200      	movs	r2, #0
 80021b6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	685a      	ldr	r2, [r3, #4]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021c0:	b2d2      	uxtb	r2, r2
 80021c2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80021c8:	687a      	ldr	r2, [r7, #4]
 80021ca:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80021cc:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d010      	beq.n	80021f8 <HAL_DMA_Init+0x61c>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	2b08      	cmp	r3, #8
 80021dc:	d80c      	bhi.n	80021f8 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	f001 ffae 	bl	8004140 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021e8:	2200      	movs	r2, #0
 80021ea:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021f0:	687a      	ldr	r2, [r7, #4]
 80021f2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80021f4:	605a      	str	r2, [r3, #4]
 80021f6:	e008      	b.n	800220a <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2200      	movs	r2, #0
 80021fc:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2200      	movs	r2, #0
 8002202:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2200      	movs	r2, #0
 8002208:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2200      	movs	r2, #0
 800220e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2201      	movs	r2, #1
 8002214:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002218:	2300      	movs	r3, #0
}
 800221a:	4618      	mov	r0, r3
 800221c:	3718      	adds	r7, #24
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	a7fdabf8 	.word	0xa7fdabf8
 8002228:	cccccccd 	.word	0xcccccccd
 800222c:	40020010 	.word	0x40020010
 8002230:	40020028 	.word	0x40020028
 8002234:	40020040 	.word	0x40020040
 8002238:	40020058 	.word	0x40020058
 800223c:	40020070 	.word	0x40020070
 8002240:	40020088 	.word	0x40020088
 8002244:	400200a0 	.word	0x400200a0
 8002248:	400200b8 	.word	0x400200b8
 800224c:	40020410 	.word	0x40020410
 8002250:	40020428 	.word	0x40020428
 8002254:	40020440 	.word	0x40020440
 8002258:	40020458 	.word	0x40020458
 800225c:	40020470 	.word	0x40020470
 8002260:	40020488 	.word	0x40020488
 8002264:	400204a0 	.word	0x400204a0
 8002268:	400204b8 	.word	0x400204b8
 800226c:	58025408 	.word	0x58025408
 8002270:	5802541c 	.word	0x5802541c
 8002274:	58025430 	.word	0x58025430
 8002278:	58025444 	.word	0x58025444
 800227c:	58025458 	.word	0x58025458
 8002280:	5802546c 	.word	0x5802546c
 8002284:	58025480 	.word	0x58025480
 8002288:	58025494 	.word	0x58025494

0800228c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b086      	sub	sp, #24
 8002290:	af00      	add	r7, sp, #0
 8002292:	60f8      	str	r0, [r7, #12]
 8002294:	60b9      	str	r1, [r7, #8]
 8002296:	607a      	str	r2, [r7, #4]
 8002298:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800229a:	2300      	movs	r3, #0
 800229c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d101      	bne.n	80022a8 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80022a4:	2301      	movs	r3, #1
 80022a6:	e226      	b.n	80026f6 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d101      	bne.n	80022b6 <HAL_DMA_Start_IT+0x2a>
 80022b2:	2302      	movs	r3, #2
 80022b4:	e21f      	b.n	80026f6 <HAL_DMA_Start_IT+0x46a>
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	2201      	movs	r2, #1
 80022ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	f040 820a 	bne.w	80026e0 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2202      	movs	r2, #2
 80022d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	2200      	movs	r2, #0
 80022d8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a68      	ldr	r2, [pc, #416]	; (8002480 <HAL_DMA_Start_IT+0x1f4>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d04a      	beq.n	800237a <HAL_DMA_Start_IT+0xee>
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a66      	ldr	r2, [pc, #408]	; (8002484 <HAL_DMA_Start_IT+0x1f8>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d045      	beq.n	800237a <HAL_DMA_Start_IT+0xee>
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a65      	ldr	r2, [pc, #404]	; (8002488 <HAL_DMA_Start_IT+0x1fc>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d040      	beq.n	800237a <HAL_DMA_Start_IT+0xee>
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a63      	ldr	r2, [pc, #396]	; (800248c <HAL_DMA_Start_IT+0x200>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d03b      	beq.n	800237a <HAL_DMA_Start_IT+0xee>
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a62      	ldr	r2, [pc, #392]	; (8002490 <HAL_DMA_Start_IT+0x204>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d036      	beq.n	800237a <HAL_DMA_Start_IT+0xee>
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a60      	ldr	r2, [pc, #384]	; (8002494 <HAL_DMA_Start_IT+0x208>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d031      	beq.n	800237a <HAL_DMA_Start_IT+0xee>
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a5f      	ldr	r2, [pc, #380]	; (8002498 <HAL_DMA_Start_IT+0x20c>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d02c      	beq.n	800237a <HAL_DMA_Start_IT+0xee>
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a5d      	ldr	r2, [pc, #372]	; (800249c <HAL_DMA_Start_IT+0x210>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d027      	beq.n	800237a <HAL_DMA_Start_IT+0xee>
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a5c      	ldr	r2, [pc, #368]	; (80024a0 <HAL_DMA_Start_IT+0x214>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d022      	beq.n	800237a <HAL_DMA_Start_IT+0xee>
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a5a      	ldr	r2, [pc, #360]	; (80024a4 <HAL_DMA_Start_IT+0x218>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d01d      	beq.n	800237a <HAL_DMA_Start_IT+0xee>
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a59      	ldr	r2, [pc, #356]	; (80024a8 <HAL_DMA_Start_IT+0x21c>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d018      	beq.n	800237a <HAL_DMA_Start_IT+0xee>
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a57      	ldr	r2, [pc, #348]	; (80024ac <HAL_DMA_Start_IT+0x220>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d013      	beq.n	800237a <HAL_DMA_Start_IT+0xee>
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a56      	ldr	r2, [pc, #344]	; (80024b0 <HAL_DMA_Start_IT+0x224>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d00e      	beq.n	800237a <HAL_DMA_Start_IT+0xee>
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a54      	ldr	r2, [pc, #336]	; (80024b4 <HAL_DMA_Start_IT+0x228>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d009      	beq.n	800237a <HAL_DMA_Start_IT+0xee>
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a53      	ldr	r2, [pc, #332]	; (80024b8 <HAL_DMA_Start_IT+0x22c>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d004      	beq.n	800237a <HAL_DMA_Start_IT+0xee>
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a51      	ldr	r2, [pc, #324]	; (80024bc <HAL_DMA_Start_IT+0x230>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d108      	bne.n	800238c <HAL_DMA_Start_IT+0x100>
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f022 0201 	bic.w	r2, r2, #1
 8002388:	601a      	str	r2, [r3, #0]
 800238a:	e007      	b.n	800239c <HAL_DMA_Start_IT+0x110>
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f022 0201 	bic.w	r2, r2, #1
 800239a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	687a      	ldr	r2, [r7, #4]
 80023a0:	68b9      	ldr	r1, [r7, #8]
 80023a2:	68f8      	ldr	r0, [r7, #12]
 80023a4:	f001 fb58 	bl	8003a58 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a34      	ldr	r2, [pc, #208]	; (8002480 <HAL_DMA_Start_IT+0x1f4>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d04a      	beq.n	8002448 <HAL_DMA_Start_IT+0x1bc>
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a33      	ldr	r2, [pc, #204]	; (8002484 <HAL_DMA_Start_IT+0x1f8>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d045      	beq.n	8002448 <HAL_DMA_Start_IT+0x1bc>
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a31      	ldr	r2, [pc, #196]	; (8002488 <HAL_DMA_Start_IT+0x1fc>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d040      	beq.n	8002448 <HAL_DMA_Start_IT+0x1bc>
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a30      	ldr	r2, [pc, #192]	; (800248c <HAL_DMA_Start_IT+0x200>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d03b      	beq.n	8002448 <HAL_DMA_Start_IT+0x1bc>
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a2e      	ldr	r2, [pc, #184]	; (8002490 <HAL_DMA_Start_IT+0x204>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d036      	beq.n	8002448 <HAL_DMA_Start_IT+0x1bc>
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a2d      	ldr	r2, [pc, #180]	; (8002494 <HAL_DMA_Start_IT+0x208>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d031      	beq.n	8002448 <HAL_DMA_Start_IT+0x1bc>
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a2b      	ldr	r2, [pc, #172]	; (8002498 <HAL_DMA_Start_IT+0x20c>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d02c      	beq.n	8002448 <HAL_DMA_Start_IT+0x1bc>
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a2a      	ldr	r2, [pc, #168]	; (800249c <HAL_DMA_Start_IT+0x210>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d027      	beq.n	8002448 <HAL_DMA_Start_IT+0x1bc>
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a28      	ldr	r2, [pc, #160]	; (80024a0 <HAL_DMA_Start_IT+0x214>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d022      	beq.n	8002448 <HAL_DMA_Start_IT+0x1bc>
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a27      	ldr	r2, [pc, #156]	; (80024a4 <HAL_DMA_Start_IT+0x218>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d01d      	beq.n	8002448 <HAL_DMA_Start_IT+0x1bc>
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a25      	ldr	r2, [pc, #148]	; (80024a8 <HAL_DMA_Start_IT+0x21c>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d018      	beq.n	8002448 <HAL_DMA_Start_IT+0x1bc>
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a24      	ldr	r2, [pc, #144]	; (80024ac <HAL_DMA_Start_IT+0x220>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d013      	beq.n	8002448 <HAL_DMA_Start_IT+0x1bc>
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a22      	ldr	r2, [pc, #136]	; (80024b0 <HAL_DMA_Start_IT+0x224>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d00e      	beq.n	8002448 <HAL_DMA_Start_IT+0x1bc>
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a21      	ldr	r2, [pc, #132]	; (80024b4 <HAL_DMA_Start_IT+0x228>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d009      	beq.n	8002448 <HAL_DMA_Start_IT+0x1bc>
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a1f      	ldr	r2, [pc, #124]	; (80024b8 <HAL_DMA_Start_IT+0x22c>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d004      	beq.n	8002448 <HAL_DMA_Start_IT+0x1bc>
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a1e      	ldr	r2, [pc, #120]	; (80024bc <HAL_DMA_Start_IT+0x230>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d101      	bne.n	800244c <HAL_DMA_Start_IT+0x1c0>
 8002448:	2301      	movs	r3, #1
 800244a:	e000      	b.n	800244e <HAL_DMA_Start_IT+0x1c2>
 800244c:	2300      	movs	r3, #0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d036      	beq.n	80024c0 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f023 021e 	bic.w	r2, r3, #30
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f042 0216 	orr.w	r2, r2, #22
 8002464:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246a:	2b00      	cmp	r3, #0
 800246c:	d03e      	beq.n	80024ec <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f042 0208 	orr.w	r2, r2, #8
 800247c:	601a      	str	r2, [r3, #0]
 800247e:	e035      	b.n	80024ec <HAL_DMA_Start_IT+0x260>
 8002480:	40020010 	.word	0x40020010
 8002484:	40020028 	.word	0x40020028
 8002488:	40020040 	.word	0x40020040
 800248c:	40020058 	.word	0x40020058
 8002490:	40020070 	.word	0x40020070
 8002494:	40020088 	.word	0x40020088
 8002498:	400200a0 	.word	0x400200a0
 800249c:	400200b8 	.word	0x400200b8
 80024a0:	40020410 	.word	0x40020410
 80024a4:	40020428 	.word	0x40020428
 80024a8:	40020440 	.word	0x40020440
 80024ac:	40020458 	.word	0x40020458
 80024b0:	40020470 	.word	0x40020470
 80024b4:	40020488 	.word	0x40020488
 80024b8:	400204a0 	.word	0x400204a0
 80024bc:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f023 020e 	bic.w	r2, r3, #14
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f042 020a 	orr.w	r2, r2, #10
 80024d2:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d007      	beq.n	80024ec <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f042 0204 	orr.w	r2, r2, #4
 80024ea:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a83      	ldr	r2, [pc, #524]	; (8002700 <HAL_DMA_Start_IT+0x474>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d072      	beq.n	80025dc <HAL_DMA_Start_IT+0x350>
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a82      	ldr	r2, [pc, #520]	; (8002704 <HAL_DMA_Start_IT+0x478>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d06d      	beq.n	80025dc <HAL_DMA_Start_IT+0x350>
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a80      	ldr	r2, [pc, #512]	; (8002708 <HAL_DMA_Start_IT+0x47c>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d068      	beq.n	80025dc <HAL_DMA_Start_IT+0x350>
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a7f      	ldr	r2, [pc, #508]	; (800270c <HAL_DMA_Start_IT+0x480>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d063      	beq.n	80025dc <HAL_DMA_Start_IT+0x350>
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a7d      	ldr	r2, [pc, #500]	; (8002710 <HAL_DMA_Start_IT+0x484>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d05e      	beq.n	80025dc <HAL_DMA_Start_IT+0x350>
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a7c      	ldr	r2, [pc, #496]	; (8002714 <HAL_DMA_Start_IT+0x488>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d059      	beq.n	80025dc <HAL_DMA_Start_IT+0x350>
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a7a      	ldr	r2, [pc, #488]	; (8002718 <HAL_DMA_Start_IT+0x48c>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d054      	beq.n	80025dc <HAL_DMA_Start_IT+0x350>
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a79      	ldr	r2, [pc, #484]	; (800271c <HAL_DMA_Start_IT+0x490>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d04f      	beq.n	80025dc <HAL_DMA_Start_IT+0x350>
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a77      	ldr	r2, [pc, #476]	; (8002720 <HAL_DMA_Start_IT+0x494>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d04a      	beq.n	80025dc <HAL_DMA_Start_IT+0x350>
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a76      	ldr	r2, [pc, #472]	; (8002724 <HAL_DMA_Start_IT+0x498>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d045      	beq.n	80025dc <HAL_DMA_Start_IT+0x350>
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a74      	ldr	r2, [pc, #464]	; (8002728 <HAL_DMA_Start_IT+0x49c>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d040      	beq.n	80025dc <HAL_DMA_Start_IT+0x350>
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a73      	ldr	r2, [pc, #460]	; (800272c <HAL_DMA_Start_IT+0x4a0>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d03b      	beq.n	80025dc <HAL_DMA_Start_IT+0x350>
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a71      	ldr	r2, [pc, #452]	; (8002730 <HAL_DMA_Start_IT+0x4a4>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d036      	beq.n	80025dc <HAL_DMA_Start_IT+0x350>
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a70      	ldr	r2, [pc, #448]	; (8002734 <HAL_DMA_Start_IT+0x4a8>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d031      	beq.n	80025dc <HAL_DMA_Start_IT+0x350>
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a6e      	ldr	r2, [pc, #440]	; (8002738 <HAL_DMA_Start_IT+0x4ac>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d02c      	beq.n	80025dc <HAL_DMA_Start_IT+0x350>
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a6d      	ldr	r2, [pc, #436]	; (800273c <HAL_DMA_Start_IT+0x4b0>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d027      	beq.n	80025dc <HAL_DMA_Start_IT+0x350>
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a6b      	ldr	r2, [pc, #428]	; (8002740 <HAL_DMA_Start_IT+0x4b4>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d022      	beq.n	80025dc <HAL_DMA_Start_IT+0x350>
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a6a      	ldr	r2, [pc, #424]	; (8002744 <HAL_DMA_Start_IT+0x4b8>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d01d      	beq.n	80025dc <HAL_DMA_Start_IT+0x350>
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a68      	ldr	r2, [pc, #416]	; (8002748 <HAL_DMA_Start_IT+0x4bc>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d018      	beq.n	80025dc <HAL_DMA_Start_IT+0x350>
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a67      	ldr	r2, [pc, #412]	; (800274c <HAL_DMA_Start_IT+0x4c0>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d013      	beq.n	80025dc <HAL_DMA_Start_IT+0x350>
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a65      	ldr	r2, [pc, #404]	; (8002750 <HAL_DMA_Start_IT+0x4c4>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d00e      	beq.n	80025dc <HAL_DMA_Start_IT+0x350>
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a64      	ldr	r2, [pc, #400]	; (8002754 <HAL_DMA_Start_IT+0x4c8>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d009      	beq.n	80025dc <HAL_DMA_Start_IT+0x350>
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a62      	ldr	r2, [pc, #392]	; (8002758 <HAL_DMA_Start_IT+0x4cc>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d004      	beq.n	80025dc <HAL_DMA_Start_IT+0x350>
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a61      	ldr	r2, [pc, #388]	; (800275c <HAL_DMA_Start_IT+0x4d0>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d101      	bne.n	80025e0 <HAL_DMA_Start_IT+0x354>
 80025dc:	2301      	movs	r3, #1
 80025de:	e000      	b.n	80025e2 <HAL_DMA_Start_IT+0x356>
 80025e0:	2300      	movs	r3, #0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d01a      	beq.n	800261c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d007      	beq.n	8002604 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002602:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002608:	2b00      	cmp	r3, #0
 800260a:	d007      	beq.n	800261c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002616:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800261a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a37      	ldr	r2, [pc, #220]	; (8002700 <HAL_DMA_Start_IT+0x474>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d04a      	beq.n	80026bc <HAL_DMA_Start_IT+0x430>
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a36      	ldr	r2, [pc, #216]	; (8002704 <HAL_DMA_Start_IT+0x478>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d045      	beq.n	80026bc <HAL_DMA_Start_IT+0x430>
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a34      	ldr	r2, [pc, #208]	; (8002708 <HAL_DMA_Start_IT+0x47c>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d040      	beq.n	80026bc <HAL_DMA_Start_IT+0x430>
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a33      	ldr	r2, [pc, #204]	; (800270c <HAL_DMA_Start_IT+0x480>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d03b      	beq.n	80026bc <HAL_DMA_Start_IT+0x430>
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a31      	ldr	r2, [pc, #196]	; (8002710 <HAL_DMA_Start_IT+0x484>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d036      	beq.n	80026bc <HAL_DMA_Start_IT+0x430>
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a30      	ldr	r2, [pc, #192]	; (8002714 <HAL_DMA_Start_IT+0x488>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d031      	beq.n	80026bc <HAL_DMA_Start_IT+0x430>
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a2e      	ldr	r2, [pc, #184]	; (8002718 <HAL_DMA_Start_IT+0x48c>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d02c      	beq.n	80026bc <HAL_DMA_Start_IT+0x430>
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a2d      	ldr	r2, [pc, #180]	; (800271c <HAL_DMA_Start_IT+0x490>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d027      	beq.n	80026bc <HAL_DMA_Start_IT+0x430>
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a2b      	ldr	r2, [pc, #172]	; (8002720 <HAL_DMA_Start_IT+0x494>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d022      	beq.n	80026bc <HAL_DMA_Start_IT+0x430>
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a2a      	ldr	r2, [pc, #168]	; (8002724 <HAL_DMA_Start_IT+0x498>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d01d      	beq.n	80026bc <HAL_DMA_Start_IT+0x430>
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a28      	ldr	r2, [pc, #160]	; (8002728 <HAL_DMA_Start_IT+0x49c>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d018      	beq.n	80026bc <HAL_DMA_Start_IT+0x430>
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a27      	ldr	r2, [pc, #156]	; (800272c <HAL_DMA_Start_IT+0x4a0>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d013      	beq.n	80026bc <HAL_DMA_Start_IT+0x430>
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a25      	ldr	r2, [pc, #148]	; (8002730 <HAL_DMA_Start_IT+0x4a4>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d00e      	beq.n	80026bc <HAL_DMA_Start_IT+0x430>
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a24      	ldr	r2, [pc, #144]	; (8002734 <HAL_DMA_Start_IT+0x4a8>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d009      	beq.n	80026bc <HAL_DMA_Start_IT+0x430>
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a22      	ldr	r2, [pc, #136]	; (8002738 <HAL_DMA_Start_IT+0x4ac>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d004      	beq.n	80026bc <HAL_DMA_Start_IT+0x430>
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a21      	ldr	r2, [pc, #132]	; (800273c <HAL_DMA_Start_IT+0x4b0>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d108      	bne.n	80026ce <HAL_DMA_Start_IT+0x442>
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f042 0201 	orr.w	r2, r2, #1
 80026ca:	601a      	str	r2, [r3, #0]
 80026cc:	e012      	b.n	80026f4 <HAL_DMA_Start_IT+0x468>
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f042 0201 	orr.w	r2, r2, #1
 80026dc:	601a      	str	r2, [r3, #0]
 80026de:	e009      	b.n	80026f4 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80026e6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	2200      	movs	r2, #0
 80026ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80026f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3718      	adds	r7, #24
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	40020010 	.word	0x40020010
 8002704:	40020028 	.word	0x40020028
 8002708:	40020040 	.word	0x40020040
 800270c:	40020058 	.word	0x40020058
 8002710:	40020070 	.word	0x40020070
 8002714:	40020088 	.word	0x40020088
 8002718:	400200a0 	.word	0x400200a0
 800271c:	400200b8 	.word	0x400200b8
 8002720:	40020410 	.word	0x40020410
 8002724:	40020428 	.word	0x40020428
 8002728:	40020440 	.word	0x40020440
 800272c:	40020458 	.word	0x40020458
 8002730:	40020470 	.word	0x40020470
 8002734:	40020488 	.word	0x40020488
 8002738:	400204a0 	.word	0x400204a0
 800273c:	400204b8 	.word	0x400204b8
 8002740:	58025408 	.word	0x58025408
 8002744:	5802541c 	.word	0x5802541c
 8002748:	58025430 	.word	0x58025430
 800274c:	58025444 	.word	0x58025444
 8002750:	58025458 	.word	0x58025458
 8002754:	5802546c 	.word	0x5802546c
 8002758:	58025480 	.word	0x58025480
 800275c:	58025494 	.word	0x58025494

08002760 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b084      	sub	sp, #16
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d101      	bne.n	8002772 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e237      	b.n	8002be2 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002778:	b2db      	uxtb	r3, r3
 800277a:	2b02      	cmp	r3, #2
 800277c:	d004      	beq.n	8002788 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2280      	movs	r2, #128	; 0x80
 8002782:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	e22c      	b.n	8002be2 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a5c      	ldr	r2, [pc, #368]	; (8002900 <HAL_DMA_Abort_IT+0x1a0>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d04a      	beq.n	8002828 <HAL_DMA_Abort_IT+0xc8>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a5b      	ldr	r2, [pc, #364]	; (8002904 <HAL_DMA_Abort_IT+0x1a4>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d045      	beq.n	8002828 <HAL_DMA_Abort_IT+0xc8>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a59      	ldr	r2, [pc, #356]	; (8002908 <HAL_DMA_Abort_IT+0x1a8>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d040      	beq.n	8002828 <HAL_DMA_Abort_IT+0xc8>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a58      	ldr	r2, [pc, #352]	; (800290c <HAL_DMA_Abort_IT+0x1ac>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d03b      	beq.n	8002828 <HAL_DMA_Abort_IT+0xc8>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a56      	ldr	r2, [pc, #344]	; (8002910 <HAL_DMA_Abort_IT+0x1b0>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d036      	beq.n	8002828 <HAL_DMA_Abort_IT+0xc8>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a55      	ldr	r2, [pc, #340]	; (8002914 <HAL_DMA_Abort_IT+0x1b4>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d031      	beq.n	8002828 <HAL_DMA_Abort_IT+0xc8>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a53      	ldr	r2, [pc, #332]	; (8002918 <HAL_DMA_Abort_IT+0x1b8>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d02c      	beq.n	8002828 <HAL_DMA_Abort_IT+0xc8>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a52      	ldr	r2, [pc, #328]	; (800291c <HAL_DMA_Abort_IT+0x1bc>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d027      	beq.n	8002828 <HAL_DMA_Abort_IT+0xc8>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a50      	ldr	r2, [pc, #320]	; (8002920 <HAL_DMA_Abort_IT+0x1c0>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d022      	beq.n	8002828 <HAL_DMA_Abort_IT+0xc8>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a4f      	ldr	r2, [pc, #316]	; (8002924 <HAL_DMA_Abort_IT+0x1c4>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d01d      	beq.n	8002828 <HAL_DMA_Abort_IT+0xc8>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a4d      	ldr	r2, [pc, #308]	; (8002928 <HAL_DMA_Abort_IT+0x1c8>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d018      	beq.n	8002828 <HAL_DMA_Abort_IT+0xc8>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a4c      	ldr	r2, [pc, #304]	; (800292c <HAL_DMA_Abort_IT+0x1cc>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d013      	beq.n	8002828 <HAL_DMA_Abort_IT+0xc8>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a4a      	ldr	r2, [pc, #296]	; (8002930 <HAL_DMA_Abort_IT+0x1d0>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d00e      	beq.n	8002828 <HAL_DMA_Abort_IT+0xc8>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a49      	ldr	r2, [pc, #292]	; (8002934 <HAL_DMA_Abort_IT+0x1d4>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d009      	beq.n	8002828 <HAL_DMA_Abort_IT+0xc8>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a47      	ldr	r2, [pc, #284]	; (8002938 <HAL_DMA_Abort_IT+0x1d8>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d004      	beq.n	8002828 <HAL_DMA_Abort_IT+0xc8>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a46      	ldr	r2, [pc, #280]	; (800293c <HAL_DMA_Abort_IT+0x1dc>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d101      	bne.n	800282c <HAL_DMA_Abort_IT+0xcc>
 8002828:	2301      	movs	r3, #1
 800282a:	e000      	b.n	800282e <HAL_DMA_Abort_IT+0xce>
 800282c:	2300      	movs	r3, #0
 800282e:	2b00      	cmp	r3, #0
 8002830:	f000 8086 	beq.w	8002940 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2204      	movs	r2, #4
 8002838:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a2f      	ldr	r2, [pc, #188]	; (8002900 <HAL_DMA_Abort_IT+0x1a0>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d04a      	beq.n	80028dc <HAL_DMA_Abort_IT+0x17c>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a2e      	ldr	r2, [pc, #184]	; (8002904 <HAL_DMA_Abort_IT+0x1a4>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d045      	beq.n	80028dc <HAL_DMA_Abort_IT+0x17c>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a2c      	ldr	r2, [pc, #176]	; (8002908 <HAL_DMA_Abort_IT+0x1a8>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d040      	beq.n	80028dc <HAL_DMA_Abort_IT+0x17c>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a2b      	ldr	r2, [pc, #172]	; (800290c <HAL_DMA_Abort_IT+0x1ac>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d03b      	beq.n	80028dc <HAL_DMA_Abort_IT+0x17c>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a29      	ldr	r2, [pc, #164]	; (8002910 <HAL_DMA_Abort_IT+0x1b0>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d036      	beq.n	80028dc <HAL_DMA_Abort_IT+0x17c>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a28      	ldr	r2, [pc, #160]	; (8002914 <HAL_DMA_Abort_IT+0x1b4>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d031      	beq.n	80028dc <HAL_DMA_Abort_IT+0x17c>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a26      	ldr	r2, [pc, #152]	; (8002918 <HAL_DMA_Abort_IT+0x1b8>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d02c      	beq.n	80028dc <HAL_DMA_Abort_IT+0x17c>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a25      	ldr	r2, [pc, #148]	; (800291c <HAL_DMA_Abort_IT+0x1bc>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d027      	beq.n	80028dc <HAL_DMA_Abort_IT+0x17c>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a23      	ldr	r2, [pc, #140]	; (8002920 <HAL_DMA_Abort_IT+0x1c0>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d022      	beq.n	80028dc <HAL_DMA_Abort_IT+0x17c>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a22      	ldr	r2, [pc, #136]	; (8002924 <HAL_DMA_Abort_IT+0x1c4>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d01d      	beq.n	80028dc <HAL_DMA_Abort_IT+0x17c>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a20      	ldr	r2, [pc, #128]	; (8002928 <HAL_DMA_Abort_IT+0x1c8>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d018      	beq.n	80028dc <HAL_DMA_Abort_IT+0x17c>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a1f      	ldr	r2, [pc, #124]	; (800292c <HAL_DMA_Abort_IT+0x1cc>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d013      	beq.n	80028dc <HAL_DMA_Abort_IT+0x17c>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a1d      	ldr	r2, [pc, #116]	; (8002930 <HAL_DMA_Abort_IT+0x1d0>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d00e      	beq.n	80028dc <HAL_DMA_Abort_IT+0x17c>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a1c      	ldr	r2, [pc, #112]	; (8002934 <HAL_DMA_Abort_IT+0x1d4>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d009      	beq.n	80028dc <HAL_DMA_Abort_IT+0x17c>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a1a      	ldr	r2, [pc, #104]	; (8002938 <HAL_DMA_Abort_IT+0x1d8>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d004      	beq.n	80028dc <HAL_DMA_Abort_IT+0x17c>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a19      	ldr	r2, [pc, #100]	; (800293c <HAL_DMA_Abort_IT+0x1dc>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d108      	bne.n	80028ee <HAL_DMA_Abort_IT+0x18e>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f022 0201 	bic.w	r2, r2, #1
 80028ea:	601a      	str	r2, [r3, #0]
 80028ec:	e178      	b.n	8002be0 <HAL_DMA_Abort_IT+0x480>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f022 0201 	bic.w	r2, r2, #1
 80028fc:	601a      	str	r2, [r3, #0]
 80028fe:	e16f      	b.n	8002be0 <HAL_DMA_Abort_IT+0x480>
 8002900:	40020010 	.word	0x40020010
 8002904:	40020028 	.word	0x40020028
 8002908:	40020040 	.word	0x40020040
 800290c:	40020058 	.word	0x40020058
 8002910:	40020070 	.word	0x40020070
 8002914:	40020088 	.word	0x40020088
 8002918:	400200a0 	.word	0x400200a0
 800291c:	400200b8 	.word	0x400200b8
 8002920:	40020410 	.word	0x40020410
 8002924:	40020428 	.word	0x40020428
 8002928:	40020440 	.word	0x40020440
 800292c:	40020458 	.word	0x40020458
 8002930:	40020470 	.word	0x40020470
 8002934:	40020488 	.word	0x40020488
 8002938:	400204a0 	.word	0x400204a0
 800293c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f022 020e 	bic.w	r2, r2, #14
 800294e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a6c      	ldr	r2, [pc, #432]	; (8002b08 <HAL_DMA_Abort_IT+0x3a8>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d04a      	beq.n	80029f0 <HAL_DMA_Abort_IT+0x290>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a6b      	ldr	r2, [pc, #428]	; (8002b0c <HAL_DMA_Abort_IT+0x3ac>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d045      	beq.n	80029f0 <HAL_DMA_Abort_IT+0x290>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a69      	ldr	r2, [pc, #420]	; (8002b10 <HAL_DMA_Abort_IT+0x3b0>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d040      	beq.n	80029f0 <HAL_DMA_Abort_IT+0x290>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a68      	ldr	r2, [pc, #416]	; (8002b14 <HAL_DMA_Abort_IT+0x3b4>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d03b      	beq.n	80029f0 <HAL_DMA_Abort_IT+0x290>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a66      	ldr	r2, [pc, #408]	; (8002b18 <HAL_DMA_Abort_IT+0x3b8>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d036      	beq.n	80029f0 <HAL_DMA_Abort_IT+0x290>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a65      	ldr	r2, [pc, #404]	; (8002b1c <HAL_DMA_Abort_IT+0x3bc>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d031      	beq.n	80029f0 <HAL_DMA_Abort_IT+0x290>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a63      	ldr	r2, [pc, #396]	; (8002b20 <HAL_DMA_Abort_IT+0x3c0>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d02c      	beq.n	80029f0 <HAL_DMA_Abort_IT+0x290>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a62      	ldr	r2, [pc, #392]	; (8002b24 <HAL_DMA_Abort_IT+0x3c4>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d027      	beq.n	80029f0 <HAL_DMA_Abort_IT+0x290>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a60      	ldr	r2, [pc, #384]	; (8002b28 <HAL_DMA_Abort_IT+0x3c8>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d022      	beq.n	80029f0 <HAL_DMA_Abort_IT+0x290>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a5f      	ldr	r2, [pc, #380]	; (8002b2c <HAL_DMA_Abort_IT+0x3cc>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d01d      	beq.n	80029f0 <HAL_DMA_Abort_IT+0x290>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a5d      	ldr	r2, [pc, #372]	; (8002b30 <HAL_DMA_Abort_IT+0x3d0>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d018      	beq.n	80029f0 <HAL_DMA_Abort_IT+0x290>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a5c      	ldr	r2, [pc, #368]	; (8002b34 <HAL_DMA_Abort_IT+0x3d4>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d013      	beq.n	80029f0 <HAL_DMA_Abort_IT+0x290>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a5a      	ldr	r2, [pc, #360]	; (8002b38 <HAL_DMA_Abort_IT+0x3d8>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d00e      	beq.n	80029f0 <HAL_DMA_Abort_IT+0x290>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a59      	ldr	r2, [pc, #356]	; (8002b3c <HAL_DMA_Abort_IT+0x3dc>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d009      	beq.n	80029f0 <HAL_DMA_Abort_IT+0x290>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a57      	ldr	r2, [pc, #348]	; (8002b40 <HAL_DMA_Abort_IT+0x3e0>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d004      	beq.n	80029f0 <HAL_DMA_Abort_IT+0x290>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a56      	ldr	r2, [pc, #344]	; (8002b44 <HAL_DMA_Abort_IT+0x3e4>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d108      	bne.n	8002a02 <HAL_DMA_Abort_IT+0x2a2>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f022 0201 	bic.w	r2, r2, #1
 80029fe:	601a      	str	r2, [r3, #0]
 8002a00:	e007      	b.n	8002a12 <HAL_DMA_Abort_IT+0x2b2>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f022 0201 	bic.w	r2, r2, #1
 8002a10:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a3c      	ldr	r2, [pc, #240]	; (8002b08 <HAL_DMA_Abort_IT+0x3a8>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d072      	beq.n	8002b02 <HAL_DMA_Abort_IT+0x3a2>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a3a      	ldr	r2, [pc, #232]	; (8002b0c <HAL_DMA_Abort_IT+0x3ac>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d06d      	beq.n	8002b02 <HAL_DMA_Abort_IT+0x3a2>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a39      	ldr	r2, [pc, #228]	; (8002b10 <HAL_DMA_Abort_IT+0x3b0>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d068      	beq.n	8002b02 <HAL_DMA_Abort_IT+0x3a2>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a37      	ldr	r2, [pc, #220]	; (8002b14 <HAL_DMA_Abort_IT+0x3b4>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d063      	beq.n	8002b02 <HAL_DMA_Abort_IT+0x3a2>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a36      	ldr	r2, [pc, #216]	; (8002b18 <HAL_DMA_Abort_IT+0x3b8>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d05e      	beq.n	8002b02 <HAL_DMA_Abort_IT+0x3a2>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a34      	ldr	r2, [pc, #208]	; (8002b1c <HAL_DMA_Abort_IT+0x3bc>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d059      	beq.n	8002b02 <HAL_DMA_Abort_IT+0x3a2>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a33      	ldr	r2, [pc, #204]	; (8002b20 <HAL_DMA_Abort_IT+0x3c0>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d054      	beq.n	8002b02 <HAL_DMA_Abort_IT+0x3a2>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a31      	ldr	r2, [pc, #196]	; (8002b24 <HAL_DMA_Abort_IT+0x3c4>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d04f      	beq.n	8002b02 <HAL_DMA_Abort_IT+0x3a2>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a30      	ldr	r2, [pc, #192]	; (8002b28 <HAL_DMA_Abort_IT+0x3c8>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d04a      	beq.n	8002b02 <HAL_DMA_Abort_IT+0x3a2>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a2e      	ldr	r2, [pc, #184]	; (8002b2c <HAL_DMA_Abort_IT+0x3cc>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d045      	beq.n	8002b02 <HAL_DMA_Abort_IT+0x3a2>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a2d      	ldr	r2, [pc, #180]	; (8002b30 <HAL_DMA_Abort_IT+0x3d0>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d040      	beq.n	8002b02 <HAL_DMA_Abort_IT+0x3a2>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a2b      	ldr	r2, [pc, #172]	; (8002b34 <HAL_DMA_Abort_IT+0x3d4>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d03b      	beq.n	8002b02 <HAL_DMA_Abort_IT+0x3a2>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a2a      	ldr	r2, [pc, #168]	; (8002b38 <HAL_DMA_Abort_IT+0x3d8>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d036      	beq.n	8002b02 <HAL_DMA_Abort_IT+0x3a2>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a28      	ldr	r2, [pc, #160]	; (8002b3c <HAL_DMA_Abort_IT+0x3dc>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d031      	beq.n	8002b02 <HAL_DMA_Abort_IT+0x3a2>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a27      	ldr	r2, [pc, #156]	; (8002b40 <HAL_DMA_Abort_IT+0x3e0>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d02c      	beq.n	8002b02 <HAL_DMA_Abort_IT+0x3a2>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a25      	ldr	r2, [pc, #148]	; (8002b44 <HAL_DMA_Abort_IT+0x3e4>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d027      	beq.n	8002b02 <HAL_DMA_Abort_IT+0x3a2>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a24      	ldr	r2, [pc, #144]	; (8002b48 <HAL_DMA_Abort_IT+0x3e8>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d022      	beq.n	8002b02 <HAL_DMA_Abort_IT+0x3a2>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a22      	ldr	r2, [pc, #136]	; (8002b4c <HAL_DMA_Abort_IT+0x3ec>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d01d      	beq.n	8002b02 <HAL_DMA_Abort_IT+0x3a2>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a21      	ldr	r2, [pc, #132]	; (8002b50 <HAL_DMA_Abort_IT+0x3f0>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d018      	beq.n	8002b02 <HAL_DMA_Abort_IT+0x3a2>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a1f      	ldr	r2, [pc, #124]	; (8002b54 <HAL_DMA_Abort_IT+0x3f4>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d013      	beq.n	8002b02 <HAL_DMA_Abort_IT+0x3a2>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a1e      	ldr	r2, [pc, #120]	; (8002b58 <HAL_DMA_Abort_IT+0x3f8>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d00e      	beq.n	8002b02 <HAL_DMA_Abort_IT+0x3a2>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a1c      	ldr	r2, [pc, #112]	; (8002b5c <HAL_DMA_Abort_IT+0x3fc>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d009      	beq.n	8002b02 <HAL_DMA_Abort_IT+0x3a2>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a1b      	ldr	r2, [pc, #108]	; (8002b60 <HAL_DMA_Abort_IT+0x400>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d004      	beq.n	8002b02 <HAL_DMA_Abort_IT+0x3a2>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a19      	ldr	r2, [pc, #100]	; (8002b64 <HAL_DMA_Abort_IT+0x404>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d132      	bne.n	8002b68 <HAL_DMA_Abort_IT+0x408>
 8002b02:	2301      	movs	r3, #1
 8002b04:	e031      	b.n	8002b6a <HAL_DMA_Abort_IT+0x40a>
 8002b06:	bf00      	nop
 8002b08:	40020010 	.word	0x40020010
 8002b0c:	40020028 	.word	0x40020028
 8002b10:	40020040 	.word	0x40020040
 8002b14:	40020058 	.word	0x40020058
 8002b18:	40020070 	.word	0x40020070
 8002b1c:	40020088 	.word	0x40020088
 8002b20:	400200a0 	.word	0x400200a0
 8002b24:	400200b8 	.word	0x400200b8
 8002b28:	40020410 	.word	0x40020410
 8002b2c:	40020428 	.word	0x40020428
 8002b30:	40020440 	.word	0x40020440
 8002b34:	40020458 	.word	0x40020458
 8002b38:	40020470 	.word	0x40020470
 8002b3c:	40020488 	.word	0x40020488
 8002b40:	400204a0 	.word	0x400204a0
 8002b44:	400204b8 	.word	0x400204b8
 8002b48:	58025408 	.word	0x58025408
 8002b4c:	5802541c 	.word	0x5802541c
 8002b50:	58025430 	.word	0x58025430
 8002b54:	58025444 	.word	0x58025444
 8002b58:	58025458 	.word	0x58025458
 8002b5c:	5802546c 	.word	0x5802546c
 8002b60:	58025480 	.word	0x58025480
 8002b64:	58025494 	.word	0x58025494
 8002b68:	2300      	movs	r3, #0
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d028      	beq.n	8002bc0 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b78:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b7c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b82:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b88:	f003 031f 	and.w	r3, r3, #31
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	409a      	lsls	r2, r3
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b98:	687a      	ldr	r2, [r7, #4]
 8002b9a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002b9c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d00c      	beq.n	8002bc0 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002bb0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002bb4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bba:	687a      	ldr	r2, [r7, #4]
 8002bbc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002bbe:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d003      	beq.n	8002be0 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002be0:	2300      	movs	r3, #0
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3710      	adds	r7, #16
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop

08002bec <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b08a      	sub	sp, #40	; 0x28
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002bf8:	4b67      	ldr	r3, [pc, #412]	; (8002d98 <HAL_DMA_IRQHandler+0x1ac>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a67      	ldr	r2, [pc, #412]	; (8002d9c <HAL_DMA_IRQHandler+0x1b0>)
 8002bfe:	fba2 2303 	umull	r2, r3, r2, r3
 8002c02:	0a9b      	lsrs	r3, r3, #10
 8002c04:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c0a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c10:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002c12:	6a3b      	ldr	r3, [r7, #32]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a5f      	ldr	r2, [pc, #380]	; (8002da0 <HAL_DMA_IRQHandler+0x1b4>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d04a      	beq.n	8002cbe <HAL_DMA_IRQHandler+0xd2>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a5d      	ldr	r2, [pc, #372]	; (8002da4 <HAL_DMA_IRQHandler+0x1b8>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d045      	beq.n	8002cbe <HAL_DMA_IRQHandler+0xd2>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a5c      	ldr	r2, [pc, #368]	; (8002da8 <HAL_DMA_IRQHandler+0x1bc>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d040      	beq.n	8002cbe <HAL_DMA_IRQHandler+0xd2>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a5a      	ldr	r2, [pc, #360]	; (8002dac <HAL_DMA_IRQHandler+0x1c0>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d03b      	beq.n	8002cbe <HAL_DMA_IRQHandler+0xd2>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a59      	ldr	r2, [pc, #356]	; (8002db0 <HAL_DMA_IRQHandler+0x1c4>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d036      	beq.n	8002cbe <HAL_DMA_IRQHandler+0xd2>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a57      	ldr	r2, [pc, #348]	; (8002db4 <HAL_DMA_IRQHandler+0x1c8>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d031      	beq.n	8002cbe <HAL_DMA_IRQHandler+0xd2>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a56      	ldr	r2, [pc, #344]	; (8002db8 <HAL_DMA_IRQHandler+0x1cc>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d02c      	beq.n	8002cbe <HAL_DMA_IRQHandler+0xd2>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a54      	ldr	r2, [pc, #336]	; (8002dbc <HAL_DMA_IRQHandler+0x1d0>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d027      	beq.n	8002cbe <HAL_DMA_IRQHandler+0xd2>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a53      	ldr	r2, [pc, #332]	; (8002dc0 <HAL_DMA_IRQHandler+0x1d4>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d022      	beq.n	8002cbe <HAL_DMA_IRQHandler+0xd2>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a51      	ldr	r2, [pc, #324]	; (8002dc4 <HAL_DMA_IRQHandler+0x1d8>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d01d      	beq.n	8002cbe <HAL_DMA_IRQHandler+0xd2>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a50      	ldr	r2, [pc, #320]	; (8002dc8 <HAL_DMA_IRQHandler+0x1dc>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d018      	beq.n	8002cbe <HAL_DMA_IRQHandler+0xd2>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a4e      	ldr	r2, [pc, #312]	; (8002dcc <HAL_DMA_IRQHandler+0x1e0>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d013      	beq.n	8002cbe <HAL_DMA_IRQHandler+0xd2>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a4d      	ldr	r2, [pc, #308]	; (8002dd0 <HAL_DMA_IRQHandler+0x1e4>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d00e      	beq.n	8002cbe <HAL_DMA_IRQHandler+0xd2>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a4b      	ldr	r2, [pc, #300]	; (8002dd4 <HAL_DMA_IRQHandler+0x1e8>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d009      	beq.n	8002cbe <HAL_DMA_IRQHandler+0xd2>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a4a      	ldr	r2, [pc, #296]	; (8002dd8 <HAL_DMA_IRQHandler+0x1ec>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d004      	beq.n	8002cbe <HAL_DMA_IRQHandler+0xd2>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a48      	ldr	r2, [pc, #288]	; (8002ddc <HAL_DMA_IRQHandler+0x1f0>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d101      	bne.n	8002cc2 <HAL_DMA_IRQHandler+0xd6>
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e000      	b.n	8002cc4 <HAL_DMA_IRQHandler+0xd8>
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	f000 842b 	beq.w	8003520 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cce:	f003 031f 	and.w	r3, r3, #31
 8002cd2:	2208      	movs	r2, #8
 8002cd4:	409a      	lsls	r2, r3
 8002cd6:	69bb      	ldr	r3, [r7, #24]
 8002cd8:	4013      	ands	r3, r2
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	f000 80a2 	beq.w	8002e24 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a2e      	ldr	r2, [pc, #184]	; (8002da0 <HAL_DMA_IRQHandler+0x1b4>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d04a      	beq.n	8002d80 <HAL_DMA_IRQHandler+0x194>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a2d      	ldr	r2, [pc, #180]	; (8002da4 <HAL_DMA_IRQHandler+0x1b8>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d045      	beq.n	8002d80 <HAL_DMA_IRQHandler+0x194>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a2b      	ldr	r2, [pc, #172]	; (8002da8 <HAL_DMA_IRQHandler+0x1bc>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d040      	beq.n	8002d80 <HAL_DMA_IRQHandler+0x194>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a2a      	ldr	r2, [pc, #168]	; (8002dac <HAL_DMA_IRQHandler+0x1c0>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d03b      	beq.n	8002d80 <HAL_DMA_IRQHandler+0x194>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a28      	ldr	r2, [pc, #160]	; (8002db0 <HAL_DMA_IRQHandler+0x1c4>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d036      	beq.n	8002d80 <HAL_DMA_IRQHandler+0x194>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a27      	ldr	r2, [pc, #156]	; (8002db4 <HAL_DMA_IRQHandler+0x1c8>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d031      	beq.n	8002d80 <HAL_DMA_IRQHandler+0x194>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a25      	ldr	r2, [pc, #148]	; (8002db8 <HAL_DMA_IRQHandler+0x1cc>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d02c      	beq.n	8002d80 <HAL_DMA_IRQHandler+0x194>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a24      	ldr	r2, [pc, #144]	; (8002dbc <HAL_DMA_IRQHandler+0x1d0>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d027      	beq.n	8002d80 <HAL_DMA_IRQHandler+0x194>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a22      	ldr	r2, [pc, #136]	; (8002dc0 <HAL_DMA_IRQHandler+0x1d4>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d022      	beq.n	8002d80 <HAL_DMA_IRQHandler+0x194>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a21      	ldr	r2, [pc, #132]	; (8002dc4 <HAL_DMA_IRQHandler+0x1d8>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d01d      	beq.n	8002d80 <HAL_DMA_IRQHandler+0x194>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a1f      	ldr	r2, [pc, #124]	; (8002dc8 <HAL_DMA_IRQHandler+0x1dc>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d018      	beq.n	8002d80 <HAL_DMA_IRQHandler+0x194>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a1e      	ldr	r2, [pc, #120]	; (8002dcc <HAL_DMA_IRQHandler+0x1e0>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d013      	beq.n	8002d80 <HAL_DMA_IRQHandler+0x194>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a1c      	ldr	r2, [pc, #112]	; (8002dd0 <HAL_DMA_IRQHandler+0x1e4>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d00e      	beq.n	8002d80 <HAL_DMA_IRQHandler+0x194>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a1b      	ldr	r2, [pc, #108]	; (8002dd4 <HAL_DMA_IRQHandler+0x1e8>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d009      	beq.n	8002d80 <HAL_DMA_IRQHandler+0x194>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a19      	ldr	r2, [pc, #100]	; (8002dd8 <HAL_DMA_IRQHandler+0x1ec>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d004      	beq.n	8002d80 <HAL_DMA_IRQHandler+0x194>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a18      	ldr	r2, [pc, #96]	; (8002ddc <HAL_DMA_IRQHandler+0x1f0>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d12f      	bne.n	8002de0 <HAL_DMA_IRQHandler+0x1f4>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 0304 	and.w	r3, r3, #4
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	bf14      	ite	ne
 8002d8e:	2301      	movne	r3, #1
 8002d90:	2300      	moveq	r3, #0
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	e02e      	b.n	8002df4 <HAL_DMA_IRQHandler+0x208>
 8002d96:	bf00      	nop
 8002d98:	24000000 	.word	0x24000000
 8002d9c:	1b4e81b5 	.word	0x1b4e81b5
 8002da0:	40020010 	.word	0x40020010
 8002da4:	40020028 	.word	0x40020028
 8002da8:	40020040 	.word	0x40020040
 8002dac:	40020058 	.word	0x40020058
 8002db0:	40020070 	.word	0x40020070
 8002db4:	40020088 	.word	0x40020088
 8002db8:	400200a0 	.word	0x400200a0
 8002dbc:	400200b8 	.word	0x400200b8
 8002dc0:	40020410 	.word	0x40020410
 8002dc4:	40020428 	.word	0x40020428
 8002dc8:	40020440 	.word	0x40020440
 8002dcc:	40020458 	.word	0x40020458
 8002dd0:	40020470 	.word	0x40020470
 8002dd4:	40020488 	.word	0x40020488
 8002dd8:	400204a0 	.word	0x400204a0
 8002ddc:	400204b8 	.word	0x400204b8
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0308 	and.w	r3, r3, #8
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	bf14      	ite	ne
 8002dee:	2301      	movne	r3, #1
 8002df0:	2300      	moveq	r3, #0
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d015      	beq.n	8002e24 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f022 0204 	bic.w	r2, r2, #4
 8002e06:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e0c:	f003 031f 	and.w	r3, r3, #31
 8002e10:	2208      	movs	r2, #8
 8002e12:	409a      	lsls	r2, r3
 8002e14:	6a3b      	ldr	r3, [r7, #32]
 8002e16:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e1c:	f043 0201 	orr.w	r2, r3, #1
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e28:	f003 031f 	and.w	r3, r3, #31
 8002e2c:	69ba      	ldr	r2, [r7, #24]
 8002e2e:	fa22 f303 	lsr.w	r3, r2, r3
 8002e32:	f003 0301 	and.w	r3, r3, #1
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d06e      	beq.n	8002f18 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a69      	ldr	r2, [pc, #420]	; (8002fe4 <HAL_DMA_IRQHandler+0x3f8>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d04a      	beq.n	8002eda <HAL_DMA_IRQHandler+0x2ee>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a67      	ldr	r2, [pc, #412]	; (8002fe8 <HAL_DMA_IRQHandler+0x3fc>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d045      	beq.n	8002eda <HAL_DMA_IRQHandler+0x2ee>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a66      	ldr	r2, [pc, #408]	; (8002fec <HAL_DMA_IRQHandler+0x400>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d040      	beq.n	8002eda <HAL_DMA_IRQHandler+0x2ee>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a64      	ldr	r2, [pc, #400]	; (8002ff0 <HAL_DMA_IRQHandler+0x404>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d03b      	beq.n	8002eda <HAL_DMA_IRQHandler+0x2ee>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a63      	ldr	r2, [pc, #396]	; (8002ff4 <HAL_DMA_IRQHandler+0x408>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d036      	beq.n	8002eda <HAL_DMA_IRQHandler+0x2ee>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a61      	ldr	r2, [pc, #388]	; (8002ff8 <HAL_DMA_IRQHandler+0x40c>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d031      	beq.n	8002eda <HAL_DMA_IRQHandler+0x2ee>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a60      	ldr	r2, [pc, #384]	; (8002ffc <HAL_DMA_IRQHandler+0x410>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d02c      	beq.n	8002eda <HAL_DMA_IRQHandler+0x2ee>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a5e      	ldr	r2, [pc, #376]	; (8003000 <HAL_DMA_IRQHandler+0x414>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d027      	beq.n	8002eda <HAL_DMA_IRQHandler+0x2ee>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a5d      	ldr	r2, [pc, #372]	; (8003004 <HAL_DMA_IRQHandler+0x418>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d022      	beq.n	8002eda <HAL_DMA_IRQHandler+0x2ee>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a5b      	ldr	r2, [pc, #364]	; (8003008 <HAL_DMA_IRQHandler+0x41c>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d01d      	beq.n	8002eda <HAL_DMA_IRQHandler+0x2ee>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a5a      	ldr	r2, [pc, #360]	; (800300c <HAL_DMA_IRQHandler+0x420>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d018      	beq.n	8002eda <HAL_DMA_IRQHandler+0x2ee>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a58      	ldr	r2, [pc, #352]	; (8003010 <HAL_DMA_IRQHandler+0x424>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d013      	beq.n	8002eda <HAL_DMA_IRQHandler+0x2ee>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a57      	ldr	r2, [pc, #348]	; (8003014 <HAL_DMA_IRQHandler+0x428>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d00e      	beq.n	8002eda <HAL_DMA_IRQHandler+0x2ee>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a55      	ldr	r2, [pc, #340]	; (8003018 <HAL_DMA_IRQHandler+0x42c>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d009      	beq.n	8002eda <HAL_DMA_IRQHandler+0x2ee>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a54      	ldr	r2, [pc, #336]	; (800301c <HAL_DMA_IRQHandler+0x430>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d004      	beq.n	8002eda <HAL_DMA_IRQHandler+0x2ee>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a52      	ldr	r2, [pc, #328]	; (8003020 <HAL_DMA_IRQHandler+0x434>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d10a      	bne.n	8002ef0 <HAL_DMA_IRQHandler+0x304>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	695b      	ldr	r3, [r3, #20]
 8002ee0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	bf14      	ite	ne
 8002ee8:	2301      	movne	r3, #1
 8002eea:	2300      	moveq	r3, #0
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	e003      	b.n	8002ef8 <HAL_DMA_IRQHandler+0x30c>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d00d      	beq.n	8002f18 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f00:	f003 031f 	and.w	r3, r3, #31
 8002f04:	2201      	movs	r2, #1
 8002f06:	409a      	lsls	r2, r3
 8002f08:	6a3b      	ldr	r3, [r7, #32]
 8002f0a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f10:	f043 0202 	orr.w	r2, r3, #2
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f1c:	f003 031f 	and.w	r3, r3, #31
 8002f20:	2204      	movs	r2, #4
 8002f22:	409a      	lsls	r2, r3
 8002f24:	69bb      	ldr	r3, [r7, #24]
 8002f26:	4013      	ands	r3, r2
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	f000 808f 	beq.w	800304c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a2c      	ldr	r2, [pc, #176]	; (8002fe4 <HAL_DMA_IRQHandler+0x3f8>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d04a      	beq.n	8002fce <HAL_DMA_IRQHandler+0x3e2>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a2a      	ldr	r2, [pc, #168]	; (8002fe8 <HAL_DMA_IRQHandler+0x3fc>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d045      	beq.n	8002fce <HAL_DMA_IRQHandler+0x3e2>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a29      	ldr	r2, [pc, #164]	; (8002fec <HAL_DMA_IRQHandler+0x400>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d040      	beq.n	8002fce <HAL_DMA_IRQHandler+0x3e2>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a27      	ldr	r2, [pc, #156]	; (8002ff0 <HAL_DMA_IRQHandler+0x404>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d03b      	beq.n	8002fce <HAL_DMA_IRQHandler+0x3e2>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a26      	ldr	r2, [pc, #152]	; (8002ff4 <HAL_DMA_IRQHandler+0x408>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d036      	beq.n	8002fce <HAL_DMA_IRQHandler+0x3e2>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a24      	ldr	r2, [pc, #144]	; (8002ff8 <HAL_DMA_IRQHandler+0x40c>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d031      	beq.n	8002fce <HAL_DMA_IRQHandler+0x3e2>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a23      	ldr	r2, [pc, #140]	; (8002ffc <HAL_DMA_IRQHandler+0x410>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d02c      	beq.n	8002fce <HAL_DMA_IRQHandler+0x3e2>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a21      	ldr	r2, [pc, #132]	; (8003000 <HAL_DMA_IRQHandler+0x414>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d027      	beq.n	8002fce <HAL_DMA_IRQHandler+0x3e2>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a20      	ldr	r2, [pc, #128]	; (8003004 <HAL_DMA_IRQHandler+0x418>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d022      	beq.n	8002fce <HAL_DMA_IRQHandler+0x3e2>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a1e      	ldr	r2, [pc, #120]	; (8003008 <HAL_DMA_IRQHandler+0x41c>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d01d      	beq.n	8002fce <HAL_DMA_IRQHandler+0x3e2>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a1d      	ldr	r2, [pc, #116]	; (800300c <HAL_DMA_IRQHandler+0x420>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d018      	beq.n	8002fce <HAL_DMA_IRQHandler+0x3e2>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a1b      	ldr	r2, [pc, #108]	; (8003010 <HAL_DMA_IRQHandler+0x424>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d013      	beq.n	8002fce <HAL_DMA_IRQHandler+0x3e2>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a1a      	ldr	r2, [pc, #104]	; (8003014 <HAL_DMA_IRQHandler+0x428>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d00e      	beq.n	8002fce <HAL_DMA_IRQHandler+0x3e2>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a18      	ldr	r2, [pc, #96]	; (8003018 <HAL_DMA_IRQHandler+0x42c>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d009      	beq.n	8002fce <HAL_DMA_IRQHandler+0x3e2>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a17      	ldr	r2, [pc, #92]	; (800301c <HAL_DMA_IRQHandler+0x430>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d004      	beq.n	8002fce <HAL_DMA_IRQHandler+0x3e2>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a15      	ldr	r2, [pc, #84]	; (8003020 <HAL_DMA_IRQHandler+0x434>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d12a      	bne.n	8003024 <HAL_DMA_IRQHandler+0x438>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 0302 	and.w	r3, r3, #2
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	bf14      	ite	ne
 8002fdc:	2301      	movne	r3, #1
 8002fde:	2300      	moveq	r3, #0
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	e023      	b.n	800302c <HAL_DMA_IRQHandler+0x440>
 8002fe4:	40020010 	.word	0x40020010
 8002fe8:	40020028 	.word	0x40020028
 8002fec:	40020040 	.word	0x40020040
 8002ff0:	40020058 	.word	0x40020058
 8002ff4:	40020070 	.word	0x40020070
 8002ff8:	40020088 	.word	0x40020088
 8002ffc:	400200a0 	.word	0x400200a0
 8003000:	400200b8 	.word	0x400200b8
 8003004:	40020410 	.word	0x40020410
 8003008:	40020428 	.word	0x40020428
 800300c:	40020440 	.word	0x40020440
 8003010:	40020458 	.word	0x40020458
 8003014:	40020470 	.word	0x40020470
 8003018:	40020488 	.word	0x40020488
 800301c:	400204a0 	.word	0x400204a0
 8003020:	400204b8 	.word	0x400204b8
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	2300      	movs	r3, #0
 800302c:	2b00      	cmp	r3, #0
 800302e:	d00d      	beq.n	800304c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003034:	f003 031f 	and.w	r3, r3, #31
 8003038:	2204      	movs	r2, #4
 800303a:	409a      	lsls	r2, r3
 800303c:	6a3b      	ldr	r3, [r7, #32]
 800303e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003044:	f043 0204 	orr.w	r2, r3, #4
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003050:	f003 031f 	and.w	r3, r3, #31
 8003054:	2210      	movs	r2, #16
 8003056:	409a      	lsls	r2, r3
 8003058:	69bb      	ldr	r3, [r7, #24]
 800305a:	4013      	ands	r3, r2
 800305c:	2b00      	cmp	r3, #0
 800305e:	f000 80a6 	beq.w	80031ae <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a85      	ldr	r2, [pc, #532]	; (800327c <HAL_DMA_IRQHandler+0x690>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d04a      	beq.n	8003102 <HAL_DMA_IRQHandler+0x516>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a83      	ldr	r2, [pc, #524]	; (8003280 <HAL_DMA_IRQHandler+0x694>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d045      	beq.n	8003102 <HAL_DMA_IRQHandler+0x516>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a82      	ldr	r2, [pc, #520]	; (8003284 <HAL_DMA_IRQHandler+0x698>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d040      	beq.n	8003102 <HAL_DMA_IRQHandler+0x516>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a80      	ldr	r2, [pc, #512]	; (8003288 <HAL_DMA_IRQHandler+0x69c>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d03b      	beq.n	8003102 <HAL_DMA_IRQHandler+0x516>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a7f      	ldr	r2, [pc, #508]	; (800328c <HAL_DMA_IRQHandler+0x6a0>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d036      	beq.n	8003102 <HAL_DMA_IRQHandler+0x516>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a7d      	ldr	r2, [pc, #500]	; (8003290 <HAL_DMA_IRQHandler+0x6a4>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d031      	beq.n	8003102 <HAL_DMA_IRQHandler+0x516>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a7c      	ldr	r2, [pc, #496]	; (8003294 <HAL_DMA_IRQHandler+0x6a8>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d02c      	beq.n	8003102 <HAL_DMA_IRQHandler+0x516>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a7a      	ldr	r2, [pc, #488]	; (8003298 <HAL_DMA_IRQHandler+0x6ac>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d027      	beq.n	8003102 <HAL_DMA_IRQHandler+0x516>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a79      	ldr	r2, [pc, #484]	; (800329c <HAL_DMA_IRQHandler+0x6b0>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d022      	beq.n	8003102 <HAL_DMA_IRQHandler+0x516>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a77      	ldr	r2, [pc, #476]	; (80032a0 <HAL_DMA_IRQHandler+0x6b4>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d01d      	beq.n	8003102 <HAL_DMA_IRQHandler+0x516>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a76      	ldr	r2, [pc, #472]	; (80032a4 <HAL_DMA_IRQHandler+0x6b8>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d018      	beq.n	8003102 <HAL_DMA_IRQHandler+0x516>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a74      	ldr	r2, [pc, #464]	; (80032a8 <HAL_DMA_IRQHandler+0x6bc>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d013      	beq.n	8003102 <HAL_DMA_IRQHandler+0x516>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a73      	ldr	r2, [pc, #460]	; (80032ac <HAL_DMA_IRQHandler+0x6c0>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d00e      	beq.n	8003102 <HAL_DMA_IRQHandler+0x516>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a71      	ldr	r2, [pc, #452]	; (80032b0 <HAL_DMA_IRQHandler+0x6c4>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d009      	beq.n	8003102 <HAL_DMA_IRQHandler+0x516>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a70      	ldr	r2, [pc, #448]	; (80032b4 <HAL_DMA_IRQHandler+0x6c8>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d004      	beq.n	8003102 <HAL_DMA_IRQHandler+0x516>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a6e      	ldr	r2, [pc, #440]	; (80032b8 <HAL_DMA_IRQHandler+0x6cc>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d10a      	bne.n	8003118 <HAL_DMA_IRQHandler+0x52c>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f003 0308 	and.w	r3, r3, #8
 800310c:	2b00      	cmp	r3, #0
 800310e:	bf14      	ite	ne
 8003110:	2301      	movne	r3, #1
 8003112:	2300      	moveq	r3, #0
 8003114:	b2db      	uxtb	r3, r3
 8003116:	e009      	b.n	800312c <HAL_DMA_IRQHandler+0x540>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 0304 	and.w	r3, r3, #4
 8003122:	2b00      	cmp	r3, #0
 8003124:	bf14      	ite	ne
 8003126:	2301      	movne	r3, #1
 8003128:	2300      	moveq	r3, #0
 800312a:	b2db      	uxtb	r3, r3
 800312c:	2b00      	cmp	r3, #0
 800312e:	d03e      	beq.n	80031ae <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003134:	f003 031f 	and.w	r3, r3, #31
 8003138:	2210      	movs	r2, #16
 800313a:	409a      	lsls	r2, r3
 800313c:	6a3b      	ldr	r3, [r7, #32]
 800313e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800314a:	2b00      	cmp	r3, #0
 800314c:	d018      	beq.n	8003180 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003158:	2b00      	cmp	r3, #0
 800315a:	d108      	bne.n	800316e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003160:	2b00      	cmp	r3, #0
 8003162:	d024      	beq.n	80031ae <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003168:	6878      	ldr	r0, [r7, #4]
 800316a:	4798      	blx	r3
 800316c:	e01f      	b.n	80031ae <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003172:	2b00      	cmp	r3, #0
 8003174:	d01b      	beq.n	80031ae <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	4798      	blx	r3
 800317e:	e016      	b.n	80031ae <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800318a:	2b00      	cmp	r3, #0
 800318c:	d107      	bne.n	800319e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f022 0208 	bic.w	r2, r2, #8
 800319c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d003      	beq.n	80031ae <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031b2:	f003 031f 	and.w	r3, r3, #31
 80031b6:	2220      	movs	r2, #32
 80031b8:	409a      	lsls	r2, r3
 80031ba:	69bb      	ldr	r3, [r7, #24]
 80031bc:	4013      	ands	r3, r2
 80031be:	2b00      	cmp	r3, #0
 80031c0:	f000 8110 	beq.w	80033e4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a2c      	ldr	r2, [pc, #176]	; (800327c <HAL_DMA_IRQHandler+0x690>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d04a      	beq.n	8003264 <HAL_DMA_IRQHandler+0x678>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a2b      	ldr	r2, [pc, #172]	; (8003280 <HAL_DMA_IRQHandler+0x694>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d045      	beq.n	8003264 <HAL_DMA_IRQHandler+0x678>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a29      	ldr	r2, [pc, #164]	; (8003284 <HAL_DMA_IRQHandler+0x698>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d040      	beq.n	8003264 <HAL_DMA_IRQHandler+0x678>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a28      	ldr	r2, [pc, #160]	; (8003288 <HAL_DMA_IRQHandler+0x69c>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d03b      	beq.n	8003264 <HAL_DMA_IRQHandler+0x678>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a26      	ldr	r2, [pc, #152]	; (800328c <HAL_DMA_IRQHandler+0x6a0>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d036      	beq.n	8003264 <HAL_DMA_IRQHandler+0x678>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a25      	ldr	r2, [pc, #148]	; (8003290 <HAL_DMA_IRQHandler+0x6a4>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d031      	beq.n	8003264 <HAL_DMA_IRQHandler+0x678>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a23      	ldr	r2, [pc, #140]	; (8003294 <HAL_DMA_IRQHandler+0x6a8>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d02c      	beq.n	8003264 <HAL_DMA_IRQHandler+0x678>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a22      	ldr	r2, [pc, #136]	; (8003298 <HAL_DMA_IRQHandler+0x6ac>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d027      	beq.n	8003264 <HAL_DMA_IRQHandler+0x678>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a20      	ldr	r2, [pc, #128]	; (800329c <HAL_DMA_IRQHandler+0x6b0>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d022      	beq.n	8003264 <HAL_DMA_IRQHandler+0x678>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a1f      	ldr	r2, [pc, #124]	; (80032a0 <HAL_DMA_IRQHandler+0x6b4>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d01d      	beq.n	8003264 <HAL_DMA_IRQHandler+0x678>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a1d      	ldr	r2, [pc, #116]	; (80032a4 <HAL_DMA_IRQHandler+0x6b8>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d018      	beq.n	8003264 <HAL_DMA_IRQHandler+0x678>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a1c      	ldr	r2, [pc, #112]	; (80032a8 <HAL_DMA_IRQHandler+0x6bc>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d013      	beq.n	8003264 <HAL_DMA_IRQHandler+0x678>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a1a      	ldr	r2, [pc, #104]	; (80032ac <HAL_DMA_IRQHandler+0x6c0>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d00e      	beq.n	8003264 <HAL_DMA_IRQHandler+0x678>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a19      	ldr	r2, [pc, #100]	; (80032b0 <HAL_DMA_IRQHandler+0x6c4>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d009      	beq.n	8003264 <HAL_DMA_IRQHandler+0x678>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a17      	ldr	r2, [pc, #92]	; (80032b4 <HAL_DMA_IRQHandler+0x6c8>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d004      	beq.n	8003264 <HAL_DMA_IRQHandler+0x678>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a16      	ldr	r2, [pc, #88]	; (80032b8 <HAL_DMA_IRQHandler+0x6cc>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d12b      	bne.n	80032bc <HAL_DMA_IRQHandler+0x6d0>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 0310 	and.w	r3, r3, #16
 800326e:	2b00      	cmp	r3, #0
 8003270:	bf14      	ite	ne
 8003272:	2301      	movne	r3, #1
 8003274:	2300      	moveq	r3, #0
 8003276:	b2db      	uxtb	r3, r3
 8003278:	e02a      	b.n	80032d0 <HAL_DMA_IRQHandler+0x6e4>
 800327a:	bf00      	nop
 800327c:	40020010 	.word	0x40020010
 8003280:	40020028 	.word	0x40020028
 8003284:	40020040 	.word	0x40020040
 8003288:	40020058 	.word	0x40020058
 800328c:	40020070 	.word	0x40020070
 8003290:	40020088 	.word	0x40020088
 8003294:	400200a0 	.word	0x400200a0
 8003298:	400200b8 	.word	0x400200b8
 800329c:	40020410 	.word	0x40020410
 80032a0:	40020428 	.word	0x40020428
 80032a4:	40020440 	.word	0x40020440
 80032a8:	40020458 	.word	0x40020458
 80032ac:	40020470 	.word	0x40020470
 80032b0:	40020488 	.word	0x40020488
 80032b4:	400204a0 	.word	0x400204a0
 80032b8:	400204b8 	.word	0x400204b8
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 0302 	and.w	r3, r3, #2
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	bf14      	ite	ne
 80032ca:	2301      	movne	r3, #1
 80032cc:	2300      	moveq	r3, #0
 80032ce:	b2db      	uxtb	r3, r3
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	f000 8087 	beq.w	80033e4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032da:	f003 031f 	and.w	r3, r3, #31
 80032de:	2220      	movs	r2, #32
 80032e0:	409a      	lsls	r2, r3
 80032e2:	6a3b      	ldr	r3, [r7, #32]
 80032e4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	2b04      	cmp	r3, #4
 80032f0:	d139      	bne.n	8003366 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f022 0216 	bic.w	r2, r2, #22
 8003300:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	695a      	ldr	r2, [r3, #20]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003310:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003316:	2b00      	cmp	r3, #0
 8003318:	d103      	bne.n	8003322 <HAL_DMA_IRQHandler+0x736>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800331e:	2b00      	cmp	r3, #0
 8003320:	d007      	beq.n	8003332 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f022 0208 	bic.w	r2, r2, #8
 8003330:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003336:	f003 031f 	and.w	r3, r3, #31
 800333a:	223f      	movs	r2, #63	; 0x3f
 800333c:	409a      	lsls	r2, r3
 800333e:	6a3b      	ldr	r3, [r7, #32]
 8003340:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2201      	movs	r2, #1
 8003346:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2200      	movs	r2, #0
 800334e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003356:	2b00      	cmp	r3, #0
 8003358:	f000 834a 	beq.w	80039f0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003360:	6878      	ldr	r0, [r7, #4]
 8003362:	4798      	blx	r3
          }
          return;
 8003364:	e344      	b.n	80039f0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003370:	2b00      	cmp	r3, #0
 8003372:	d018      	beq.n	80033a6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800337e:	2b00      	cmp	r3, #0
 8003380:	d108      	bne.n	8003394 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003386:	2b00      	cmp	r3, #0
 8003388:	d02c      	beq.n	80033e4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	4798      	blx	r3
 8003392:	e027      	b.n	80033e4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003398:	2b00      	cmp	r3, #0
 800339a:	d023      	beq.n	80033e4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033a0:	6878      	ldr	r0, [r7, #4]
 80033a2:	4798      	blx	r3
 80033a4:	e01e      	b.n	80033e4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d10f      	bne.n	80033d4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f022 0210 	bic.w	r2, r2, #16
 80033c2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2201      	movs	r2, #1
 80033c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2200      	movs	r2, #0
 80033d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d003      	beq.n	80033e4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	f000 8306 	beq.w	80039fa <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033f2:	f003 0301 	and.w	r3, r3, #1
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	f000 8088 	beq.w	800350c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2204      	movs	r2, #4
 8003400:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a7a      	ldr	r2, [pc, #488]	; (80035f4 <HAL_DMA_IRQHandler+0xa08>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d04a      	beq.n	80034a4 <HAL_DMA_IRQHandler+0x8b8>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a79      	ldr	r2, [pc, #484]	; (80035f8 <HAL_DMA_IRQHandler+0xa0c>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d045      	beq.n	80034a4 <HAL_DMA_IRQHandler+0x8b8>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a77      	ldr	r2, [pc, #476]	; (80035fc <HAL_DMA_IRQHandler+0xa10>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d040      	beq.n	80034a4 <HAL_DMA_IRQHandler+0x8b8>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a76      	ldr	r2, [pc, #472]	; (8003600 <HAL_DMA_IRQHandler+0xa14>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d03b      	beq.n	80034a4 <HAL_DMA_IRQHandler+0x8b8>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a74      	ldr	r2, [pc, #464]	; (8003604 <HAL_DMA_IRQHandler+0xa18>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d036      	beq.n	80034a4 <HAL_DMA_IRQHandler+0x8b8>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a73      	ldr	r2, [pc, #460]	; (8003608 <HAL_DMA_IRQHandler+0xa1c>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d031      	beq.n	80034a4 <HAL_DMA_IRQHandler+0x8b8>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a71      	ldr	r2, [pc, #452]	; (800360c <HAL_DMA_IRQHandler+0xa20>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d02c      	beq.n	80034a4 <HAL_DMA_IRQHandler+0x8b8>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a70      	ldr	r2, [pc, #448]	; (8003610 <HAL_DMA_IRQHandler+0xa24>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d027      	beq.n	80034a4 <HAL_DMA_IRQHandler+0x8b8>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a6e      	ldr	r2, [pc, #440]	; (8003614 <HAL_DMA_IRQHandler+0xa28>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d022      	beq.n	80034a4 <HAL_DMA_IRQHandler+0x8b8>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a6d      	ldr	r2, [pc, #436]	; (8003618 <HAL_DMA_IRQHandler+0xa2c>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d01d      	beq.n	80034a4 <HAL_DMA_IRQHandler+0x8b8>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a6b      	ldr	r2, [pc, #428]	; (800361c <HAL_DMA_IRQHandler+0xa30>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d018      	beq.n	80034a4 <HAL_DMA_IRQHandler+0x8b8>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a6a      	ldr	r2, [pc, #424]	; (8003620 <HAL_DMA_IRQHandler+0xa34>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d013      	beq.n	80034a4 <HAL_DMA_IRQHandler+0x8b8>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a68      	ldr	r2, [pc, #416]	; (8003624 <HAL_DMA_IRQHandler+0xa38>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d00e      	beq.n	80034a4 <HAL_DMA_IRQHandler+0x8b8>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a67      	ldr	r2, [pc, #412]	; (8003628 <HAL_DMA_IRQHandler+0xa3c>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d009      	beq.n	80034a4 <HAL_DMA_IRQHandler+0x8b8>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a65      	ldr	r2, [pc, #404]	; (800362c <HAL_DMA_IRQHandler+0xa40>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d004      	beq.n	80034a4 <HAL_DMA_IRQHandler+0x8b8>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a64      	ldr	r2, [pc, #400]	; (8003630 <HAL_DMA_IRQHandler+0xa44>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d108      	bne.n	80034b6 <HAL_DMA_IRQHandler+0x8ca>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f022 0201 	bic.w	r2, r2, #1
 80034b2:	601a      	str	r2, [r3, #0]
 80034b4:	e007      	b.n	80034c6 <HAL_DMA_IRQHandler+0x8da>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	681a      	ldr	r2, [r3, #0]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f022 0201 	bic.w	r2, r2, #1
 80034c4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	3301      	adds	r3, #1
 80034ca:	60fb      	str	r3, [r7, #12]
 80034cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034ce:	429a      	cmp	r2, r3
 80034d0:	d307      	bcc.n	80034e2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 0301 	and.w	r3, r3, #1
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d1f2      	bne.n	80034c6 <HAL_DMA_IRQHandler+0x8da>
 80034e0:	e000      	b.n	80034e4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80034e2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 0301 	and.w	r3, r3, #1
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d004      	beq.n	80034fc <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2203      	movs	r2, #3
 80034f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80034fa:	e003      	b.n	8003504 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2201      	movs	r2, #1
 8003500:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2200      	movs	r2, #0
 8003508:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003510:	2b00      	cmp	r3, #0
 8003512:	f000 8272 	beq.w	80039fa <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	4798      	blx	r3
 800351e:	e26c      	b.n	80039fa <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a43      	ldr	r2, [pc, #268]	; (8003634 <HAL_DMA_IRQHandler+0xa48>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d022      	beq.n	8003570 <HAL_DMA_IRQHandler+0x984>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a42      	ldr	r2, [pc, #264]	; (8003638 <HAL_DMA_IRQHandler+0xa4c>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d01d      	beq.n	8003570 <HAL_DMA_IRQHandler+0x984>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a40      	ldr	r2, [pc, #256]	; (800363c <HAL_DMA_IRQHandler+0xa50>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d018      	beq.n	8003570 <HAL_DMA_IRQHandler+0x984>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a3f      	ldr	r2, [pc, #252]	; (8003640 <HAL_DMA_IRQHandler+0xa54>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d013      	beq.n	8003570 <HAL_DMA_IRQHandler+0x984>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a3d      	ldr	r2, [pc, #244]	; (8003644 <HAL_DMA_IRQHandler+0xa58>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d00e      	beq.n	8003570 <HAL_DMA_IRQHandler+0x984>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a3c      	ldr	r2, [pc, #240]	; (8003648 <HAL_DMA_IRQHandler+0xa5c>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d009      	beq.n	8003570 <HAL_DMA_IRQHandler+0x984>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a3a      	ldr	r2, [pc, #232]	; (800364c <HAL_DMA_IRQHandler+0xa60>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d004      	beq.n	8003570 <HAL_DMA_IRQHandler+0x984>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a39      	ldr	r2, [pc, #228]	; (8003650 <HAL_DMA_IRQHandler+0xa64>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d101      	bne.n	8003574 <HAL_DMA_IRQHandler+0x988>
 8003570:	2301      	movs	r3, #1
 8003572:	e000      	b.n	8003576 <HAL_DMA_IRQHandler+0x98a>
 8003574:	2300      	movs	r3, #0
 8003576:	2b00      	cmp	r3, #0
 8003578:	f000 823f 	beq.w	80039fa <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003588:	f003 031f 	and.w	r3, r3, #31
 800358c:	2204      	movs	r2, #4
 800358e:	409a      	lsls	r2, r3
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	4013      	ands	r3, r2
 8003594:	2b00      	cmp	r3, #0
 8003596:	f000 80cd 	beq.w	8003734 <HAL_DMA_IRQHandler+0xb48>
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	f003 0304 	and.w	r3, r3, #4
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	f000 80c7 	beq.w	8003734 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035aa:	f003 031f 	and.w	r3, r3, #31
 80035ae:	2204      	movs	r2, #4
 80035b0:	409a      	lsls	r2, r3
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d049      	beq.n	8003654 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d109      	bne.n	80035de <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	f000 8210 	beq.w	80039f4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035d8:	6878      	ldr	r0, [r7, #4]
 80035da:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80035dc:	e20a      	b.n	80039f4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	f000 8206 	beq.w	80039f4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80035f0:	e200      	b.n	80039f4 <HAL_DMA_IRQHandler+0xe08>
 80035f2:	bf00      	nop
 80035f4:	40020010 	.word	0x40020010
 80035f8:	40020028 	.word	0x40020028
 80035fc:	40020040 	.word	0x40020040
 8003600:	40020058 	.word	0x40020058
 8003604:	40020070 	.word	0x40020070
 8003608:	40020088 	.word	0x40020088
 800360c:	400200a0 	.word	0x400200a0
 8003610:	400200b8 	.word	0x400200b8
 8003614:	40020410 	.word	0x40020410
 8003618:	40020428 	.word	0x40020428
 800361c:	40020440 	.word	0x40020440
 8003620:	40020458 	.word	0x40020458
 8003624:	40020470 	.word	0x40020470
 8003628:	40020488 	.word	0x40020488
 800362c:	400204a0 	.word	0x400204a0
 8003630:	400204b8 	.word	0x400204b8
 8003634:	58025408 	.word	0x58025408
 8003638:	5802541c 	.word	0x5802541c
 800363c:	58025430 	.word	0x58025430
 8003640:	58025444 	.word	0x58025444
 8003644:	58025458 	.word	0x58025458
 8003648:	5802546c 	.word	0x5802546c
 800364c:	58025480 	.word	0x58025480
 8003650:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	f003 0320 	and.w	r3, r3, #32
 800365a:	2b00      	cmp	r3, #0
 800365c:	d160      	bne.n	8003720 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a7f      	ldr	r2, [pc, #508]	; (8003860 <HAL_DMA_IRQHandler+0xc74>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d04a      	beq.n	80036fe <HAL_DMA_IRQHandler+0xb12>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a7d      	ldr	r2, [pc, #500]	; (8003864 <HAL_DMA_IRQHandler+0xc78>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d045      	beq.n	80036fe <HAL_DMA_IRQHandler+0xb12>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a7c      	ldr	r2, [pc, #496]	; (8003868 <HAL_DMA_IRQHandler+0xc7c>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d040      	beq.n	80036fe <HAL_DMA_IRQHandler+0xb12>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a7a      	ldr	r2, [pc, #488]	; (800386c <HAL_DMA_IRQHandler+0xc80>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d03b      	beq.n	80036fe <HAL_DMA_IRQHandler+0xb12>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a79      	ldr	r2, [pc, #484]	; (8003870 <HAL_DMA_IRQHandler+0xc84>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d036      	beq.n	80036fe <HAL_DMA_IRQHandler+0xb12>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a77      	ldr	r2, [pc, #476]	; (8003874 <HAL_DMA_IRQHandler+0xc88>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d031      	beq.n	80036fe <HAL_DMA_IRQHandler+0xb12>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a76      	ldr	r2, [pc, #472]	; (8003878 <HAL_DMA_IRQHandler+0xc8c>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d02c      	beq.n	80036fe <HAL_DMA_IRQHandler+0xb12>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a74      	ldr	r2, [pc, #464]	; (800387c <HAL_DMA_IRQHandler+0xc90>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d027      	beq.n	80036fe <HAL_DMA_IRQHandler+0xb12>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a73      	ldr	r2, [pc, #460]	; (8003880 <HAL_DMA_IRQHandler+0xc94>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d022      	beq.n	80036fe <HAL_DMA_IRQHandler+0xb12>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a71      	ldr	r2, [pc, #452]	; (8003884 <HAL_DMA_IRQHandler+0xc98>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d01d      	beq.n	80036fe <HAL_DMA_IRQHandler+0xb12>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a70      	ldr	r2, [pc, #448]	; (8003888 <HAL_DMA_IRQHandler+0xc9c>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d018      	beq.n	80036fe <HAL_DMA_IRQHandler+0xb12>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a6e      	ldr	r2, [pc, #440]	; (800388c <HAL_DMA_IRQHandler+0xca0>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d013      	beq.n	80036fe <HAL_DMA_IRQHandler+0xb12>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a6d      	ldr	r2, [pc, #436]	; (8003890 <HAL_DMA_IRQHandler+0xca4>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d00e      	beq.n	80036fe <HAL_DMA_IRQHandler+0xb12>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a6b      	ldr	r2, [pc, #428]	; (8003894 <HAL_DMA_IRQHandler+0xca8>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d009      	beq.n	80036fe <HAL_DMA_IRQHandler+0xb12>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a6a      	ldr	r2, [pc, #424]	; (8003898 <HAL_DMA_IRQHandler+0xcac>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d004      	beq.n	80036fe <HAL_DMA_IRQHandler+0xb12>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a68      	ldr	r2, [pc, #416]	; (800389c <HAL_DMA_IRQHandler+0xcb0>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d108      	bne.n	8003710 <HAL_DMA_IRQHandler+0xb24>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f022 0208 	bic.w	r2, r2, #8
 800370c:	601a      	str	r2, [r3, #0]
 800370e:	e007      	b.n	8003720 <HAL_DMA_IRQHandler+0xb34>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f022 0204 	bic.w	r2, r2, #4
 800371e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003724:	2b00      	cmp	r3, #0
 8003726:	f000 8165 	beq.w	80039f4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003732:	e15f      	b.n	80039f4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003738:	f003 031f 	and.w	r3, r3, #31
 800373c:	2202      	movs	r2, #2
 800373e:	409a      	lsls	r2, r3
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	4013      	ands	r3, r2
 8003744:	2b00      	cmp	r3, #0
 8003746:	f000 80c5 	beq.w	80038d4 <HAL_DMA_IRQHandler+0xce8>
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	f003 0302 	and.w	r3, r3, #2
 8003750:	2b00      	cmp	r3, #0
 8003752:	f000 80bf 	beq.w	80038d4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800375a:	f003 031f 	and.w	r3, r3, #31
 800375e:	2202      	movs	r2, #2
 8003760:	409a      	lsls	r2, r3
 8003762:	69fb      	ldr	r3, [r7, #28]
 8003764:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800376c:	2b00      	cmp	r3, #0
 800376e:	d018      	beq.n	80037a2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003776:	2b00      	cmp	r3, #0
 8003778:	d109      	bne.n	800378e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800377e:	2b00      	cmp	r3, #0
 8003780:	f000 813a 	beq.w	80039f8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003788:	6878      	ldr	r0, [r7, #4]
 800378a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800378c:	e134      	b.n	80039f8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003792:	2b00      	cmp	r3, #0
 8003794:	f000 8130 	beq.w	80039f8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800379c:	6878      	ldr	r0, [r7, #4]
 800379e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80037a0:	e12a      	b.n	80039f8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	f003 0320 	and.w	r3, r3, #32
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	f040 8089 	bne.w	80038c0 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a2b      	ldr	r2, [pc, #172]	; (8003860 <HAL_DMA_IRQHandler+0xc74>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d04a      	beq.n	800384e <HAL_DMA_IRQHandler+0xc62>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a29      	ldr	r2, [pc, #164]	; (8003864 <HAL_DMA_IRQHandler+0xc78>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d045      	beq.n	800384e <HAL_DMA_IRQHandler+0xc62>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a28      	ldr	r2, [pc, #160]	; (8003868 <HAL_DMA_IRQHandler+0xc7c>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d040      	beq.n	800384e <HAL_DMA_IRQHandler+0xc62>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a26      	ldr	r2, [pc, #152]	; (800386c <HAL_DMA_IRQHandler+0xc80>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d03b      	beq.n	800384e <HAL_DMA_IRQHandler+0xc62>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a25      	ldr	r2, [pc, #148]	; (8003870 <HAL_DMA_IRQHandler+0xc84>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d036      	beq.n	800384e <HAL_DMA_IRQHandler+0xc62>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a23      	ldr	r2, [pc, #140]	; (8003874 <HAL_DMA_IRQHandler+0xc88>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d031      	beq.n	800384e <HAL_DMA_IRQHandler+0xc62>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a22      	ldr	r2, [pc, #136]	; (8003878 <HAL_DMA_IRQHandler+0xc8c>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d02c      	beq.n	800384e <HAL_DMA_IRQHandler+0xc62>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a20      	ldr	r2, [pc, #128]	; (800387c <HAL_DMA_IRQHandler+0xc90>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d027      	beq.n	800384e <HAL_DMA_IRQHandler+0xc62>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a1f      	ldr	r2, [pc, #124]	; (8003880 <HAL_DMA_IRQHandler+0xc94>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d022      	beq.n	800384e <HAL_DMA_IRQHandler+0xc62>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a1d      	ldr	r2, [pc, #116]	; (8003884 <HAL_DMA_IRQHandler+0xc98>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d01d      	beq.n	800384e <HAL_DMA_IRQHandler+0xc62>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a1c      	ldr	r2, [pc, #112]	; (8003888 <HAL_DMA_IRQHandler+0xc9c>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d018      	beq.n	800384e <HAL_DMA_IRQHandler+0xc62>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a1a      	ldr	r2, [pc, #104]	; (800388c <HAL_DMA_IRQHandler+0xca0>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d013      	beq.n	800384e <HAL_DMA_IRQHandler+0xc62>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a19      	ldr	r2, [pc, #100]	; (8003890 <HAL_DMA_IRQHandler+0xca4>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d00e      	beq.n	800384e <HAL_DMA_IRQHandler+0xc62>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a17      	ldr	r2, [pc, #92]	; (8003894 <HAL_DMA_IRQHandler+0xca8>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d009      	beq.n	800384e <HAL_DMA_IRQHandler+0xc62>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a16      	ldr	r2, [pc, #88]	; (8003898 <HAL_DMA_IRQHandler+0xcac>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d004      	beq.n	800384e <HAL_DMA_IRQHandler+0xc62>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a14      	ldr	r2, [pc, #80]	; (800389c <HAL_DMA_IRQHandler+0xcb0>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d128      	bne.n	80038a0 <HAL_DMA_IRQHandler+0xcb4>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f022 0214 	bic.w	r2, r2, #20
 800385c:	601a      	str	r2, [r3, #0]
 800385e:	e027      	b.n	80038b0 <HAL_DMA_IRQHandler+0xcc4>
 8003860:	40020010 	.word	0x40020010
 8003864:	40020028 	.word	0x40020028
 8003868:	40020040 	.word	0x40020040
 800386c:	40020058 	.word	0x40020058
 8003870:	40020070 	.word	0x40020070
 8003874:	40020088 	.word	0x40020088
 8003878:	400200a0 	.word	0x400200a0
 800387c:	400200b8 	.word	0x400200b8
 8003880:	40020410 	.word	0x40020410
 8003884:	40020428 	.word	0x40020428
 8003888:	40020440 	.word	0x40020440
 800388c:	40020458 	.word	0x40020458
 8003890:	40020470 	.word	0x40020470
 8003894:	40020488 	.word	0x40020488
 8003898:	400204a0 	.word	0x400204a0
 800389c:	400204b8 	.word	0x400204b8
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f022 020a 	bic.w	r2, r2, #10
 80038ae:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2201      	movs	r2, #1
 80038b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2200      	movs	r2, #0
 80038bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	f000 8097 	beq.w	80039f8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80038d2:	e091      	b.n	80039f8 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038d8:	f003 031f 	and.w	r3, r3, #31
 80038dc:	2208      	movs	r2, #8
 80038de:	409a      	lsls	r2, r3
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	4013      	ands	r3, r2
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	f000 8088 	beq.w	80039fa <HAL_DMA_IRQHandler+0xe0e>
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	f003 0308 	and.w	r3, r3, #8
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	f000 8082 	beq.w	80039fa <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a41      	ldr	r2, [pc, #260]	; (8003a00 <HAL_DMA_IRQHandler+0xe14>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d04a      	beq.n	8003996 <HAL_DMA_IRQHandler+0xdaa>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a3f      	ldr	r2, [pc, #252]	; (8003a04 <HAL_DMA_IRQHandler+0xe18>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d045      	beq.n	8003996 <HAL_DMA_IRQHandler+0xdaa>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a3e      	ldr	r2, [pc, #248]	; (8003a08 <HAL_DMA_IRQHandler+0xe1c>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d040      	beq.n	8003996 <HAL_DMA_IRQHandler+0xdaa>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a3c      	ldr	r2, [pc, #240]	; (8003a0c <HAL_DMA_IRQHandler+0xe20>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d03b      	beq.n	8003996 <HAL_DMA_IRQHandler+0xdaa>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a3b      	ldr	r2, [pc, #236]	; (8003a10 <HAL_DMA_IRQHandler+0xe24>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d036      	beq.n	8003996 <HAL_DMA_IRQHandler+0xdaa>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a39      	ldr	r2, [pc, #228]	; (8003a14 <HAL_DMA_IRQHandler+0xe28>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d031      	beq.n	8003996 <HAL_DMA_IRQHandler+0xdaa>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a38      	ldr	r2, [pc, #224]	; (8003a18 <HAL_DMA_IRQHandler+0xe2c>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d02c      	beq.n	8003996 <HAL_DMA_IRQHandler+0xdaa>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a36      	ldr	r2, [pc, #216]	; (8003a1c <HAL_DMA_IRQHandler+0xe30>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d027      	beq.n	8003996 <HAL_DMA_IRQHandler+0xdaa>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a35      	ldr	r2, [pc, #212]	; (8003a20 <HAL_DMA_IRQHandler+0xe34>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d022      	beq.n	8003996 <HAL_DMA_IRQHandler+0xdaa>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a33      	ldr	r2, [pc, #204]	; (8003a24 <HAL_DMA_IRQHandler+0xe38>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d01d      	beq.n	8003996 <HAL_DMA_IRQHandler+0xdaa>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a32      	ldr	r2, [pc, #200]	; (8003a28 <HAL_DMA_IRQHandler+0xe3c>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d018      	beq.n	8003996 <HAL_DMA_IRQHandler+0xdaa>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a30      	ldr	r2, [pc, #192]	; (8003a2c <HAL_DMA_IRQHandler+0xe40>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d013      	beq.n	8003996 <HAL_DMA_IRQHandler+0xdaa>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a2f      	ldr	r2, [pc, #188]	; (8003a30 <HAL_DMA_IRQHandler+0xe44>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d00e      	beq.n	8003996 <HAL_DMA_IRQHandler+0xdaa>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a2d      	ldr	r2, [pc, #180]	; (8003a34 <HAL_DMA_IRQHandler+0xe48>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d009      	beq.n	8003996 <HAL_DMA_IRQHandler+0xdaa>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a2c      	ldr	r2, [pc, #176]	; (8003a38 <HAL_DMA_IRQHandler+0xe4c>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d004      	beq.n	8003996 <HAL_DMA_IRQHandler+0xdaa>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a2a      	ldr	r2, [pc, #168]	; (8003a3c <HAL_DMA_IRQHandler+0xe50>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d108      	bne.n	80039a8 <HAL_DMA_IRQHandler+0xdbc>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f022 021c 	bic.w	r2, r2, #28
 80039a4:	601a      	str	r2, [r3, #0]
 80039a6:	e007      	b.n	80039b8 <HAL_DMA_IRQHandler+0xdcc>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f022 020e 	bic.w	r2, r2, #14
 80039b6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039bc:	f003 031f 	and.w	r3, r3, #31
 80039c0:	2201      	movs	r2, #1
 80039c2:	409a      	lsls	r2, r3
 80039c4:	69fb      	ldr	r3, [r7, #28]
 80039c6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2201      	movs	r2, #1
 80039cc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2201      	movs	r2, #1
 80039d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2200      	movs	r2, #0
 80039da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d009      	beq.n	80039fa <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	4798      	blx	r3
 80039ee:	e004      	b.n	80039fa <HAL_DMA_IRQHandler+0xe0e>
          return;
 80039f0:	bf00      	nop
 80039f2:	e002      	b.n	80039fa <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80039f4:	bf00      	nop
 80039f6:	e000      	b.n	80039fa <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80039f8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80039fa:	3728      	adds	r7, #40	; 0x28
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd80      	pop	{r7, pc}
 8003a00:	40020010 	.word	0x40020010
 8003a04:	40020028 	.word	0x40020028
 8003a08:	40020040 	.word	0x40020040
 8003a0c:	40020058 	.word	0x40020058
 8003a10:	40020070 	.word	0x40020070
 8003a14:	40020088 	.word	0x40020088
 8003a18:	400200a0 	.word	0x400200a0
 8003a1c:	400200b8 	.word	0x400200b8
 8003a20:	40020410 	.word	0x40020410
 8003a24:	40020428 	.word	0x40020428
 8003a28:	40020440 	.word	0x40020440
 8003a2c:	40020458 	.word	0x40020458
 8003a30:	40020470 	.word	0x40020470
 8003a34:	40020488 	.word	0x40020488
 8003a38:	400204a0 	.word	0x400204a0
 8003a3c:	400204b8 	.word	0x400204b8

08003a40 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b083      	sub	sp, #12
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	370c      	adds	r7, #12
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr

08003a58 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b087      	sub	sp, #28
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	60f8      	str	r0, [r7, #12]
 8003a60:	60b9      	str	r1, [r7, #8]
 8003a62:	607a      	str	r2, [r7, #4]
 8003a64:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a6a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a70:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a7f      	ldr	r2, [pc, #508]	; (8003c74 <DMA_SetConfig+0x21c>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d072      	beq.n	8003b62 <DMA_SetConfig+0x10a>
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a7d      	ldr	r2, [pc, #500]	; (8003c78 <DMA_SetConfig+0x220>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d06d      	beq.n	8003b62 <DMA_SetConfig+0x10a>
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a7c      	ldr	r2, [pc, #496]	; (8003c7c <DMA_SetConfig+0x224>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d068      	beq.n	8003b62 <DMA_SetConfig+0x10a>
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a7a      	ldr	r2, [pc, #488]	; (8003c80 <DMA_SetConfig+0x228>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d063      	beq.n	8003b62 <DMA_SetConfig+0x10a>
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a79      	ldr	r2, [pc, #484]	; (8003c84 <DMA_SetConfig+0x22c>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d05e      	beq.n	8003b62 <DMA_SetConfig+0x10a>
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a77      	ldr	r2, [pc, #476]	; (8003c88 <DMA_SetConfig+0x230>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d059      	beq.n	8003b62 <DMA_SetConfig+0x10a>
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a76      	ldr	r2, [pc, #472]	; (8003c8c <DMA_SetConfig+0x234>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d054      	beq.n	8003b62 <DMA_SetConfig+0x10a>
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a74      	ldr	r2, [pc, #464]	; (8003c90 <DMA_SetConfig+0x238>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d04f      	beq.n	8003b62 <DMA_SetConfig+0x10a>
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a73      	ldr	r2, [pc, #460]	; (8003c94 <DMA_SetConfig+0x23c>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d04a      	beq.n	8003b62 <DMA_SetConfig+0x10a>
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a71      	ldr	r2, [pc, #452]	; (8003c98 <DMA_SetConfig+0x240>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d045      	beq.n	8003b62 <DMA_SetConfig+0x10a>
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a70      	ldr	r2, [pc, #448]	; (8003c9c <DMA_SetConfig+0x244>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d040      	beq.n	8003b62 <DMA_SetConfig+0x10a>
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a6e      	ldr	r2, [pc, #440]	; (8003ca0 <DMA_SetConfig+0x248>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d03b      	beq.n	8003b62 <DMA_SetConfig+0x10a>
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a6d      	ldr	r2, [pc, #436]	; (8003ca4 <DMA_SetConfig+0x24c>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d036      	beq.n	8003b62 <DMA_SetConfig+0x10a>
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a6b      	ldr	r2, [pc, #428]	; (8003ca8 <DMA_SetConfig+0x250>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d031      	beq.n	8003b62 <DMA_SetConfig+0x10a>
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a6a      	ldr	r2, [pc, #424]	; (8003cac <DMA_SetConfig+0x254>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d02c      	beq.n	8003b62 <DMA_SetConfig+0x10a>
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a68      	ldr	r2, [pc, #416]	; (8003cb0 <DMA_SetConfig+0x258>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d027      	beq.n	8003b62 <DMA_SetConfig+0x10a>
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a67      	ldr	r2, [pc, #412]	; (8003cb4 <DMA_SetConfig+0x25c>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d022      	beq.n	8003b62 <DMA_SetConfig+0x10a>
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a65      	ldr	r2, [pc, #404]	; (8003cb8 <DMA_SetConfig+0x260>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d01d      	beq.n	8003b62 <DMA_SetConfig+0x10a>
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a64      	ldr	r2, [pc, #400]	; (8003cbc <DMA_SetConfig+0x264>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d018      	beq.n	8003b62 <DMA_SetConfig+0x10a>
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a62      	ldr	r2, [pc, #392]	; (8003cc0 <DMA_SetConfig+0x268>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d013      	beq.n	8003b62 <DMA_SetConfig+0x10a>
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a61      	ldr	r2, [pc, #388]	; (8003cc4 <DMA_SetConfig+0x26c>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d00e      	beq.n	8003b62 <DMA_SetConfig+0x10a>
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a5f      	ldr	r2, [pc, #380]	; (8003cc8 <DMA_SetConfig+0x270>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d009      	beq.n	8003b62 <DMA_SetConfig+0x10a>
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a5e      	ldr	r2, [pc, #376]	; (8003ccc <DMA_SetConfig+0x274>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d004      	beq.n	8003b62 <DMA_SetConfig+0x10a>
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a5c      	ldr	r2, [pc, #368]	; (8003cd0 <DMA_SetConfig+0x278>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d101      	bne.n	8003b66 <DMA_SetConfig+0x10e>
 8003b62:	2301      	movs	r3, #1
 8003b64:	e000      	b.n	8003b68 <DMA_SetConfig+0x110>
 8003b66:	2300      	movs	r3, #0
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d00d      	beq.n	8003b88 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b70:	68fa      	ldr	r2, [r7, #12]
 8003b72:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003b74:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d004      	beq.n	8003b88 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b82:	68fa      	ldr	r2, [r7, #12]
 8003b84:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003b86:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a39      	ldr	r2, [pc, #228]	; (8003c74 <DMA_SetConfig+0x21c>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d04a      	beq.n	8003c28 <DMA_SetConfig+0x1d0>
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a38      	ldr	r2, [pc, #224]	; (8003c78 <DMA_SetConfig+0x220>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d045      	beq.n	8003c28 <DMA_SetConfig+0x1d0>
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a36      	ldr	r2, [pc, #216]	; (8003c7c <DMA_SetConfig+0x224>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d040      	beq.n	8003c28 <DMA_SetConfig+0x1d0>
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a35      	ldr	r2, [pc, #212]	; (8003c80 <DMA_SetConfig+0x228>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d03b      	beq.n	8003c28 <DMA_SetConfig+0x1d0>
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a33      	ldr	r2, [pc, #204]	; (8003c84 <DMA_SetConfig+0x22c>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d036      	beq.n	8003c28 <DMA_SetConfig+0x1d0>
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a32      	ldr	r2, [pc, #200]	; (8003c88 <DMA_SetConfig+0x230>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d031      	beq.n	8003c28 <DMA_SetConfig+0x1d0>
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a30      	ldr	r2, [pc, #192]	; (8003c8c <DMA_SetConfig+0x234>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d02c      	beq.n	8003c28 <DMA_SetConfig+0x1d0>
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a2f      	ldr	r2, [pc, #188]	; (8003c90 <DMA_SetConfig+0x238>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d027      	beq.n	8003c28 <DMA_SetConfig+0x1d0>
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a2d      	ldr	r2, [pc, #180]	; (8003c94 <DMA_SetConfig+0x23c>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d022      	beq.n	8003c28 <DMA_SetConfig+0x1d0>
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a2c      	ldr	r2, [pc, #176]	; (8003c98 <DMA_SetConfig+0x240>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d01d      	beq.n	8003c28 <DMA_SetConfig+0x1d0>
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a2a      	ldr	r2, [pc, #168]	; (8003c9c <DMA_SetConfig+0x244>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d018      	beq.n	8003c28 <DMA_SetConfig+0x1d0>
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a29      	ldr	r2, [pc, #164]	; (8003ca0 <DMA_SetConfig+0x248>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d013      	beq.n	8003c28 <DMA_SetConfig+0x1d0>
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a27      	ldr	r2, [pc, #156]	; (8003ca4 <DMA_SetConfig+0x24c>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d00e      	beq.n	8003c28 <DMA_SetConfig+0x1d0>
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a26      	ldr	r2, [pc, #152]	; (8003ca8 <DMA_SetConfig+0x250>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d009      	beq.n	8003c28 <DMA_SetConfig+0x1d0>
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a24      	ldr	r2, [pc, #144]	; (8003cac <DMA_SetConfig+0x254>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d004      	beq.n	8003c28 <DMA_SetConfig+0x1d0>
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a23      	ldr	r2, [pc, #140]	; (8003cb0 <DMA_SetConfig+0x258>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d101      	bne.n	8003c2c <DMA_SetConfig+0x1d4>
 8003c28:	2301      	movs	r3, #1
 8003c2a:	e000      	b.n	8003c2e <DMA_SetConfig+0x1d6>
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d059      	beq.n	8003ce6 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c36:	f003 031f 	and.w	r3, r3, #31
 8003c3a:	223f      	movs	r2, #63	; 0x3f
 8003c3c:	409a      	lsls	r2, r3
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003c50:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	683a      	ldr	r2, [r7, #0]
 8003c58:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	2b40      	cmp	r3, #64	; 0x40
 8003c60:	d138      	bne.n	8003cd4 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	68ba      	ldr	r2, [r7, #8]
 8003c70:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003c72:	e086      	b.n	8003d82 <DMA_SetConfig+0x32a>
 8003c74:	40020010 	.word	0x40020010
 8003c78:	40020028 	.word	0x40020028
 8003c7c:	40020040 	.word	0x40020040
 8003c80:	40020058 	.word	0x40020058
 8003c84:	40020070 	.word	0x40020070
 8003c88:	40020088 	.word	0x40020088
 8003c8c:	400200a0 	.word	0x400200a0
 8003c90:	400200b8 	.word	0x400200b8
 8003c94:	40020410 	.word	0x40020410
 8003c98:	40020428 	.word	0x40020428
 8003c9c:	40020440 	.word	0x40020440
 8003ca0:	40020458 	.word	0x40020458
 8003ca4:	40020470 	.word	0x40020470
 8003ca8:	40020488 	.word	0x40020488
 8003cac:	400204a0 	.word	0x400204a0
 8003cb0:	400204b8 	.word	0x400204b8
 8003cb4:	58025408 	.word	0x58025408
 8003cb8:	5802541c 	.word	0x5802541c
 8003cbc:	58025430 	.word	0x58025430
 8003cc0:	58025444 	.word	0x58025444
 8003cc4:	58025458 	.word	0x58025458
 8003cc8:	5802546c 	.word	0x5802546c
 8003ccc:	58025480 	.word	0x58025480
 8003cd0:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	68ba      	ldr	r2, [r7, #8]
 8003cda:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	687a      	ldr	r2, [r7, #4]
 8003ce2:	60da      	str	r2, [r3, #12]
}
 8003ce4:	e04d      	b.n	8003d82 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a29      	ldr	r2, [pc, #164]	; (8003d90 <DMA_SetConfig+0x338>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d022      	beq.n	8003d36 <DMA_SetConfig+0x2de>
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a27      	ldr	r2, [pc, #156]	; (8003d94 <DMA_SetConfig+0x33c>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d01d      	beq.n	8003d36 <DMA_SetConfig+0x2de>
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a26      	ldr	r2, [pc, #152]	; (8003d98 <DMA_SetConfig+0x340>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d018      	beq.n	8003d36 <DMA_SetConfig+0x2de>
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a24      	ldr	r2, [pc, #144]	; (8003d9c <DMA_SetConfig+0x344>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d013      	beq.n	8003d36 <DMA_SetConfig+0x2de>
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a23      	ldr	r2, [pc, #140]	; (8003da0 <DMA_SetConfig+0x348>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d00e      	beq.n	8003d36 <DMA_SetConfig+0x2de>
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a21      	ldr	r2, [pc, #132]	; (8003da4 <DMA_SetConfig+0x34c>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d009      	beq.n	8003d36 <DMA_SetConfig+0x2de>
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a20      	ldr	r2, [pc, #128]	; (8003da8 <DMA_SetConfig+0x350>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d004      	beq.n	8003d36 <DMA_SetConfig+0x2de>
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a1e      	ldr	r2, [pc, #120]	; (8003dac <DMA_SetConfig+0x354>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d101      	bne.n	8003d3a <DMA_SetConfig+0x2e2>
 8003d36:	2301      	movs	r3, #1
 8003d38:	e000      	b.n	8003d3c <DMA_SetConfig+0x2e4>
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d020      	beq.n	8003d82 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d44:	f003 031f 	and.w	r3, r3, #31
 8003d48:	2201      	movs	r2, #1
 8003d4a:	409a      	lsls	r2, r3
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	683a      	ldr	r2, [r7, #0]
 8003d56:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	2b40      	cmp	r3, #64	; 0x40
 8003d5e:	d108      	bne.n	8003d72 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	687a      	ldr	r2, [r7, #4]
 8003d66:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	68ba      	ldr	r2, [r7, #8]
 8003d6e:	60da      	str	r2, [r3, #12]
}
 8003d70:	e007      	b.n	8003d82 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	68ba      	ldr	r2, [r7, #8]
 8003d78:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	687a      	ldr	r2, [r7, #4]
 8003d80:	60da      	str	r2, [r3, #12]
}
 8003d82:	bf00      	nop
 8003d84:	371c      	adds	r7, #28
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr
 8003d8e:	bf00      	nop
 8003d90:	58025408 	.word	0x58025408
 8003d94:	5802541c 	.word	0x5802541c
 8003d98:	58025430 	.word	0x58025430
 8003d9c:	58025444 	.word	0x58025444
 8003da0:	58025458 	.word	0x58025458
 8003da4:	5802546c 	.word	0x5802546c
 8003da8:	58025480 	.word	0x58025480
 8003dac:	58025494 	.word	0x58025494

08003db0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b085      	sub	sp, #20
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a42      	ldr	r2, [pc, #264]	; (8003ec8 <DMA_CalcBaseAndBitshift+0x118>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d04a      	beq.n	8003e58 <DMA_CalcBaseAndBitshift+0xa8>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a41      	ldr	r2, [pc, #260]	; (8003ecc <DMA_CalcBaseAndBitshift+0x11c>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d045      	beq.n	8003e58 <DMA_CalcBaseAndBitshift+0xa8>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a3f      	ldr	r2, [pc, #252]	; (8003ed0 <DMA_CalcBaseAndBitshift+0x120>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d040      	beq.n	8003e58 <DMA_CalcBaseAndBitshift+0xa8>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a3e      	ldr	r2, [pc, #248]	; (8003ed4 <DMA_CalcBaseAndBitshift+0x124>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d03b      	beq.n	8003e58 <DMA_CalcBaseAndBitshift+0xa8>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a3c      	ldr	r2, [pc, #240]	; (8003ed8 <DMA_CalcBaseAndBitshift+0x128>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d036      	beq.n	8003e58 <DMA_CalcBaseAndBitshift+0xa8>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a3b      	ldr	r2, [pc, #236]	; (8003edc <DMA_CalcBaseAndBitshift+0x12c>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d031      	beq.n	8003e58 <DMA_CalcBaseAndBitshift+0xa8>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a39      	ldr	r2, [pc, #228]	; (8003ee0 <DMA_CalcBaseAndBitshift+0x130>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d02c      	beq.n	8003e58 <DMA_CalcBaseAndBitshift+0xa8>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a38      	ldr	r2, [pc, #224]	; (8003ee4 <DMA_CalcBaseAndBitshift+0x134>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d027      	beq.n	8003e58 <DMA_CalcBaseAndBitshift+0xa8>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a36      	ldr	r2, [pc, #216]	; (8003ee8 <DMA_CalcBaseAndBitshift+0x138>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d022      	beq.n	8003e58 <DMA_CalcBaseAndBitshift+0xa8>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a35      	ldr	r2, [pc, #212]	; (8003eec <DMA_CalcBaseAndBitshift+0x13c>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d01d      	beq.n	8003e58 <DMA_CalcBaseAndBitshift+0xa8>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a33      	ldr	r2, [pc, #204]	; (8003ef0 <DMA_CalcBaseAndBitshift+0x140>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d018      	beq.n	8003e58 <DMA_CalcBaseAndBitshift+0xa8>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a32      	ldr	r2, [pc, #200]	; (8003ef4 <DMA_CalcBaseAndBitshift+0x144>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d013      	beq.n	8003e58 <DMA_CalcBaseAndBitshift+0xa8>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a30      	ldr	r2, [pc, #192]	; (8003ef8 <DMA_CalcBaseAndBitshift+0x148>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d00e      	beq.n	8003e58 <DMA_CalcBaseAndBitshift+0xa8>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a2f      	ldr	r2, [pc, #188]	; (8003efc <DMA_CalcBaseAndBitshift+0x14c>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d009      	beq.n	8003e58 <DMA_CalcBaseAndBitshift+0xa8>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a2d      	ldr	r2, [pc, #180]	; (8003f00 <DMA_CalcBaseAndBitshift+0x150>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d004      	beq.n	8003e58 <DMA_CalcBaseAndBitshift+0xa8>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a2c      	ldr	r2, [pc, #176]	; (8003f04 <DMA_CalcBaseAndBitshift+0x154>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d101      	bne.n	8003e5c <DMA_CalcBaseAndBitshift+0xac>
 8003e58:	2301      	movs	r3, #1
 8003e5a:	e000      	b.n	8003e5e <DMA_CalcBaseAndBitshift+0xae>
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d024      	beq.n	8003eac <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	b2db      	uxtb	r3, r3
 8003e68:	3b10      	subs	r3, #16
 8003e6a:	4a27      	ldr	r2, [pc, #156]	; (8003f08 <DMA_CalcBaseAndBitshift+0x158>)
 8003e6c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e70:	091b      	lsrs	r3, r3, #4
 8003e72:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	f003 0307 	and.w	r3, r3, #7
 8003e7a:	4a24      	ldr	r2, [pc, #144]	; (8003f0c <DMA_CalcBaseAndBitshift+0x15c>)
 8003e7c:	5cd3      	ldrb	r3, [r2, r3]
 8003e7e:	461a      	mov	r2, r3
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2b03      	cmp	r3, #3
 8003e88:	d908      	bls.n	8003e9c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	461a      	mov	r2, r3
 8003e90:	4b1f      	ldr	r3, [pc, #124]	; (8003f10 <DMA_CalcBaseAndBitshift+0x160>)
 8003e92:	4013      	ands	r3, r2
 8003e94:	1d1a      	adds	r2, r3, #4
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	659a      	str	r2, [r3, #88]	; 0x58
 8003e9a:	e00d      	b.n	8003eb8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	461a      	mov	r2, r3
 8003ea2:	4b1b      	ldr	r3, [pc, #108]	; (8003f10 <DMA_CalcBaseAndBitshift+0x160>)
 8003ea4:	4013      	ands	r3, r2
 8003ea6:	687a      	ldr	r2, [r7, #4]
 8003ea8:	6593      	str	r3, [r2, #88]	; 0x58
 8003eaa:	e005      	b.n	8003eb8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	3714      	adds	r7, #20
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec6:	4770      	bx	lr
 8003ec8:	40020010 	.word	0x40020010
 8003ecc:	40020028 	.word	0x40020028
 8003ed0:	40020040 	.word	0x40020040
 8003ed4:	40020058 	.word	0x40020058
 8003ed8:	40020070 	.word	0x40020070
 8003edc:	40020088 	.word	0x40020088
 8003ee0:	400200a0 	.word	0x400200a0
 8003ee4:	400200b8 	.word	0x400200b8
 8003ee8:	40020410 	.word	0x40020410
 8003eec:	40020428 	.word	0x40020428
 8003ef0:	40020440 	.word	0x40020440
 8003ef4:	40020458 	.word	0x40020458
 8003ef8:	40020470 	.word	0x40020470
 8003efc:	40020488 	.word	0x40020488
 8003f00:	400204a0 	.word	0x400204a0
 8003f04:	400204b8 	.word	0x400204b8
 8003f08:	aaaaaaab 	.word	0xaaaaaaab
 8003f0c:	0800b040 	.word	0x0800b040
 8003f10:	fffffc00 	.word	0xfffffc00

08003f14 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b085      	sub	sp, #20
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	699b      	ldr	r3, [r3, #24]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d120      	bne.n	8003f6a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f2c:	2b03      	cmp	r3, #3
 8003f2e:	d858      	bhi.n	8003fe2 <DMA_CheckFifoParam+0xce>
 8003f30:	a201      	add	r2, pc, #4	; (adr r2, 8003f38 <DMA_CheckFifoParam+0x24>)
 8003f32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f36:	bf00      	nop
 8003f38:	08003f49 	.word	0x08003f49
 8003f3c:	08003f5b 	.word	0x08003f5b
 8003f40:	08003f49 	.word	0x08003f49
 8003f44:	08003fe3 	.word	0x08003fe3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f4c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d048      	beq.n	8003fe6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003f54:	2301      	movs	r3, #1
 8003f56:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003f58:	e045      	b.n	8003fe6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f5e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003f62:	d142      	bne.n	8003fea <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003f68:	e03f      	b.n	8003fea <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	699b      	ldr	r3, [r3, #24]
 8003f6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f72:	d123      	bne.n	8003fbc <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f78:	2b03      	cmp	r3, #3
 8003f7a:	d838      	bhi.n	8003fee <DMA_CheckFifoParam+0xda>
 8003f7c:	a201      	add	r2, pc, #4	; (adr r2, 8003f84 <DMA_CheckFifoParam+0x70>)
 8003f7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f82:	bf00      	nop
 8003f84:	08003f95 	.word	0x08003f95
 8003f88:	08003f9b 	.word	0x08003f9b
 8003f8c:	08003f95 	.word	0x08003f95
 8003f90:	08003fad 	.word	0x08003fad
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003f94:	2301      	movs	r3, #1
 8003f96:	73fb      	strb	r3, [r7, #15]
        break;
 8003f98:	e030      	b.n	8003ffc <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f9e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d025      	beq.n	8003ff2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003faa:	e022      	b.n	8003ff2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003fb4:	d11f      	bne.n	8003ff6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003fba:	e01c      	b.n	8003ff6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fc0:	2b02      	cmp	r3, #2
 8003fc2:	d902      	bls.n	8003fca <DMA_CheckFifoParam+0xb6>
 8003fc4:	2b03      	cmp	r3, #3
 8003fc6:	d003      	beq.n	8003fd0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003fc8:	e018      	b.n	8003ffc <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	73fb      	strb	r3, [r7, #15]
        break;
 8003fce:	e015      	b.n	8003ffc <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d00e      	beq.n	8003ffa <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	73fb      	strb	r3, [r7, #15]
    break;
 8003fe0:	e00b      	b.n	8003ffa <DMA_CheckFifoParam+0xe6>
        break;
 8003fe2:	bf00      	nop
 8003fe4:	e00a      	b.n	8003ffc <DMA_CheckFifoParam+0xe8>
        break;
 8003fe6:	bf00      	nop
 8003fe8:	e008      	b.n	8003ffc <DMA_CheckFifoParam+0xe8>
        break;
 8003fea:	bf00      	nop
 8003fec:	e006      	b.n	8003ffc <DMA_CheckFifoParam+0xe8>
        break;
 8003fee:	bf00      	nop
 8003ff0:	e004      	b.n	8003ffc <DMA_CheckFifoParam+0xe8>
        break;
 8003ff2:	bf00      	nop
 8003ff4:	e002      	b.n	8003ffc <DMA_CheckFifoParam+0xe8>
        break;
 8003ff6:	bf00      	nop
 8003ff8:	e000      	b.n	8003ffc <DMA_CheckFifoParam+0xe8>
    break;
 8003ffa:	bf00      	nop
    }
  }

  return status;
 8003ffc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3714      	adds	r7, #20
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr
 800400a:	bf00      	nop

0800400c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800400c:	b480      	push	{r7}
 800400e:	b085      	sub	sp, #20
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a38      	ldr	r2, [pc, #224]	; (8004100 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d022      	beq.n	800406a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a36      	ldr	r2, [pc, #216]	; (8004104 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d01d      	beq.n	800406a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a35      	ldr	r2, [pc, #212]	; (8004108 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d018      	beq.n	800406a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a33      	ldr	r2, [pc, #204]	; (800410c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d013      	beq.n	800406a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a32      	ldr	r2, [pc, #200]	; (8004110 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d00e      	beq.n	800406a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a30      	ldr	r2, [pc, #192]	; (8004114 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d009      	beq.n	800406a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a2f      	ldr	r2, [pc, #188]	; (8004118 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d004      	beq.n	800406a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a2d      	ldr	r2, [pc, #180]	; (800411c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d101      	bne.n	800406e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800406a:	2301      	movs	r3, #1
 800406c:	e000      	b.n	8004070 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800406e:	2300      	movs	r3, #0
 8004070:	2b00      	cmp	r3, #0
 8004072:	d01a      	beq.n	80040aa <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	b2db      	uxtb	r3, r3
 800407a:	3b08      	subs	r3, #8
 800407c:	4a28      	ldr	r2, [pc, #160]	; (8004120 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800407e:	fba2 2303 	umull	r2, r3, r2, r3
 8004082:	091b      	lsrs	r3, r3, #4
 8004084:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004086:	68fa      	ldr	r2, [r7, #12]
 8004088:	4b26      	ldr	r3, [pc, #152]	; (8004124 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800408a:	4413      	add	r3, r2
 800408c:	009b      	lsls	r3, r3, #2
 800408e:	461a      	mov	r2, r3
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	4a24      	ldr	r2, [pc, #144]	; (8004128 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004098:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	f003 031f 	and.w	r3, r3, #31
 80040a0:	2201      	movs	r2, #1
 80040a2:	409a      	lsls	r2, r3
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80040a8:	e024      	b.n	80040f4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	b2db      	uxtb	r3, r3
 80040b0:	3b10      	subs	r3, #16
 80040b2:	4a1e      	ldr	r2, [pc, #120]	; (800412c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80040b4:	fba2 2303 	umull	r2, r3, r2, r3
 80040b8:	091b      	lsrs	r3, r3, #4
 80040ba:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	4a1c      	ldr	r2, [pc, #112]	; (8004130 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d806      	bhi.n	80040d2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	4a1b      	ldr	r2, [pc, #108]	; (8004134 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d902      	bls.n	80040d2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	3308      	adds	r3, #8
 80040d0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80040d2:	68fa      	ldr	r2, [r7, #12]
 80040d4:	4b18      	ldr	r3, [pc, #96]	; (8004138 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80040d6:	4413      	add	r3, r2
 80040d8:	009b      	lsls	r3, r3, #2
 80040da:	461a      	mov	r2, r3
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	4a16      	ldr	r2, [pc, #88]	; (800413c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80040e4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	f003 031f 	and.w	r3, r3, #31
 80040ec:	2201      	movs	r2, #1
 80040ee:	409a      	lsls	r2, r3
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	669a      	str	r2, [r3, #104]	; 0x68
}
 80040f4:	bf00      	nop
 80040f6:	3714      	adds	r7, #20
 80040f8:	46bd      	mov	sp, r7
 80040fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fe:	4770      	bx	lr
 8004100:	58025408 	.word	0x58025408
 8004104:	5802541c 	.word	0x5802541c
 8004108:	58025430 	.word	0x58025430
 800410c:	58025444 	.word	0x58025444
 8004110:	58025458 	.word	0x58025458
 8004114:	5802546c 	.word	0x5802546c
 8004118:	58025480 	.word	0x58025480
 800411c:	58025494 	.word	0x58025494
 8004120:	cccccccd 	.word	0xcccccccd
 8004124:	16009600 	.word	0x16009600
 8004128:	58025880 	.word	0x58025880
 800412c:	aaaaaaab 	.word	0xaaaaaaab
 8004130:	400204b8 	.word	0x400204b8
 8004134:	4002040f 	.word	0x4002040f
 8004138:	10008200 	.word	0x10008200
 800413c:	40020880 	.word	0x40020880

08004140 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004140:	b480      	push	{r7}
 8004142:	b085      	sub	sp, #20
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	b2db      	uxtb	r3, r3
 800414e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d04a      	beq.n	80041ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2b08      	cmp	r3, #8
 800415a:	d847      	bhi.n	80041ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a25      	ldr	r2, [pc, #148]	; (80041f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d022      	beq.n	80041ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a24      	ldr	r2, [pc, #144]	; (80041fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d01d      	beq.n	80041ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a22      	ldr	r2, [pc, #136]	; (8004200 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d018      	beq.n	80041ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a21      	ldr	r2, [pc, #132]	; (8004204 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d013      	beq.n	80041ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a1f      	ldr	r2, [pc, #124]	; (8004208 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d00e      	beq.n	80041ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a1e      	ldr	r2, [pc, #120]	; (800420c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d009      	beq.n	80041ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a1c      	ldr	r2, [pc, #112]	; (8004210 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d004      	beq.n	80041ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a1b      	ldr	r2, [pc, #108]	; (8004214 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d101      	bne.n	80041b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80041ac:	2301      	movs	r3, #1
 80041ae:	e000      	b.n	80041b2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80041b0:	2300      	movs	r3, #0
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d00a      	beq.n	80041cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80041b6:	68fa      	ldr	r2, [r7, #12]
 80041b8:	4b17      	ldr	r3, [pc, #92]	; (8004218 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80041ba:	4413      	add	r3, r2
 80041bc:	009b      	lsls	r3, r3, #2
 80041be:	461a      	mov	r2, r3
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	4a15      	ldr	r2, [pc, #84]	; (800421c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80041c8:	671a      	str	r2, [r3, #112]	; 0x70
 80041ca:	e009      	b.n	80041e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80041cc:	68fa      	ldr	r2, [r7, #12]
 80041ce:	4b14      	ldr	r3, [pc, #80]	; (8004220 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80041d0:	4413      	add	r3, r2
 80041d2:	009b      	lsls	r3, r3, #2
 80041d4:	461a      	mov	r2, r3
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	4a11      	ldr	r2, [pc, #68]	; (8004224 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80041de:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	3b01      	subs	r3, #1
 80041e4:	2201      	movs	r2, #1
 80041e6:	409a      	lsls	r2, r3
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80041ec:	bf00      	nop
 80041ee:	3714      	adds	r7, #20
 80041f0:	46bd      	mov	sp, r7
 80041f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f6:	4770      	bx	lr
 80041f8:	58025408 	.word	0x58025408
 80041fc:	5802541c 	.word	0x5802541c
 8004200:	58025430 	.word	0x58025430
 8004204:	58025444 	.word	0x58025444
 8004208:	58025458 	.word	0x58025458
 800420c:	5802546c 	.word	0x5802546c
 8004210:	58025480 	.word	0x58025480
 8004214:	58025494 	.word	0x58025494
 8004218:	1600963f 	.word	0x1600963f
 800421c:	58025940 	.word	0x58025940
 8004220:	1000823f 	.word	0x1000823f
 8004224:	40020940 	.word	0x40020940

08004228 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b084      	sub	sp, #16
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d101      	bne.n	800423a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	e0cf      	b.n	80043da <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004240:	2b00      	cmp	r3, #0
 8004242:	d106      	bne.n	8004252 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2223      	movs	r2, #35	; 0x23
 8004248:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800424c:	6878      	ldr	r0, [r7, #4]
 800424e:	f7fc fa47 	bl	80006e0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004252:	4b64      	ldr	r3, [pc, #400]	; (80043e4 <HAL_ETH_Init+0x1bc>)
 8004254:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004258:	4a62      	ldr	r2, [pc, #392]	; (80043e4 <HAL_ETH_Init+0x1bc>)
 800425a:	f043 0302 	orr.w	r3, r3, #2
 800425e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004262:	4b60      	ldr	r3, [pc, #384]	; (80043e4 <HAL_ETH_Init+0x1bc>)
 8004264:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004268:	f003 0302 	and.w	r3, r3, #2
 800426c:	60bb      	str	r3, [r7, #8]
 800426e:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	7a1b      	ldrb	r3, [r3, #8]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d103      	bne.n	8004280 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8004278:	2000      	movs	r0, #0
 800427a:	f7fd fb8b 	bl	8001994 <HAL_SYSCFG_ETHInterfaceSelect>
 800427e:	e003      	b.n	8004288 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8004280:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8004284:	f7fd fb86 	bl	8001994 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8004288:	4b57      	ldr	r3, [pc, #348]	; (80043e8 <HAL_ETH_Init+0x1c0>)
 800428a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	687a      	ldr	r2, [r7, #4]
 8004298:	6812      	ldr	r2, [r2, #0]
 800429a:	f043 0301 	orr.w	r3, r3, #1
 800429e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80042a2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80042a4:	f7fd fb46 	bl	8001934 <HAL_GetTick>
 80042a8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80042aa:	e011      	b.n	80042d0 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80042ac:	f7fd fb42 	bl	8001934 <HAL_GetTick>
 80042b0:	4602      	mov	r2, r0
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	1ad3      	subs	r3, r2, r3
 80042b6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80042ba:	d909      	bls.n	80042d0 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2204      	movs	r2, #4
 80042c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	22e0      	movs	r2, #224	; 0xe0
 80042c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80042cc:	2301      	movs	r3, #1
 80042ce:	e084      	b.n	80043da <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f003 0301 	and.w	r3, r3, #1
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d1e4      	bne.n	80042ac <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f000 f886 	bl	80043f4 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80042e8:	f001 fcfc 	bl	8005ce4 <HAL_RCC_GetHCLKFreq>
 80042ec:	4603      	mov	r3, r0
 80042ee:	4a3f      	ldr	r2, [pc, #252]	; (80043ec <HAL_ETH_Init+0x1c4>)
 80042f0:	fba2 2303 	umull	r2, r3, r2, r3
 80042f4:	0c9a      	lsrs	r2, r3, #18
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	3a01      	subs	r2, #1
 80042fc:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8004300:	6878      	ldr	r0, [r7, #4]
 8004302:	f000 fa71 	bl	80047e8 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800430e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004312:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8004316:	687a      	ldr	r2, [r7, #4]
 8004318:	6812      	ldr	r2, [r2, #0]
 800431a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800431e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004322:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	695b      	ldr	r3, [r3, #20]
 800432a:	f003 0303 	and.w	r3, r3, #3
 800432e:	2b00      	cmp	r3, #0
 8004330:	d009      	beq.n	8004346 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2201      	movs	r2, #1
 8004336:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	22e0      	movs	r2, #224	; 0xe0
 800433e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	e049      	b.n	80043da <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800434e:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8004352:	4b27      	ldr	r3, [pc, #156]	; (80043f0 <HAL_ETH_Init+0x1c8>)
 8004354:	4013      	ands	r3, r2
 8004356:	687a      	ldr	r2, [r7, #4]
 8004358:	6952      	ldr	r2, [r2, #20]
 800435a:	0051      	lsls	r1, r2, #1
 800435c:	687a      	ldr	r2, [r7, #4]
 800435e:	6812      	ldr	r2, [r2, #0]
 8004360:	430b      	orrs	r3, r1
 8004362:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004366:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f000 fad9 	bl	8004922 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8004370:	6878      	ldr	r0, [r7, #4]
 8004372:	f000 fb1f 	bl	80049b4 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	3305      	adds	r3, #5
 800437c:	781b      	ldrb	r3, [r3, #0]
 800437e:	021a      	lsls	r2, r3, #8
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	3304      	adds	r3, #4
 8004386:	781b      	ldrb	r3, [r3, #0]
 8004388:	4619      	mov	r1, r3
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	430a      	orrs	r2, r1
 8004390:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	3303      	adds	r3, #3
 800439a:	781b      	ldrb	r3, [r3, #0]
 800439c:	061a      	lsls	r2, r3, #24
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	3302      	adds	r3, #2
 80043a4:	781b      	ldrb	r3, [r3, #0]
 80043a6:	041b      	lsls	r3, r3, #16
 80043a8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	3301      	adds	r3, #1
 80043b0:	781b      	ldrb	r3, [r3, #0]
 80043b2:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80043b4:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	781b      	ldrb	r3, [r3, #0]
 80043bc:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80043c2:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80043c4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2200      	movs	r2, #0
 80043cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2210      	movs	r2, #16
 80043d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80043d8:	2300      	movs	r3, #0
}
 80043da:	4618      	mov	r0, r3
 80043dc:	3710      	adds	r7, #16
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}
 80043e2:	bf00      	nop
 80043e4:	58024400 	.word	0x58024400
 80043e8:	58000400 	.word	0x58000400
 80043ec:	431bde83 	.word	0x431bde83
 80043f0:	ffff8001 	.word	0xffff8001

080043f4 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b084      	sub	sp, #16
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004404:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800440c:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800440e:	f001 fc69 	bl	8005ce4 <HAL_RCC_GetHCLKFreq>
 8004412:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	4a1e      	ldr	r2, [pc, #120]	; (8004490 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d908      	bls.n	800442e <HAL_ETH_SetMDIOClockRange+0x3a>
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	4a1d      	ldr	r2, [pc, #116]	; (8004494 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d804      	bhi.n	800442e <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800442a:	60fb      	str	r3, [r7, #12]
 800442c:	e027      	b.n	800447e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	4a18      	ldr	r2, [pc, #96]	; (8004494 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d908      	bls.n	8004448 <HAL_ETH_SetMDIOClockRange+0x54>
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	4a17      	ldr	r2, [pc, #92]	; (8004498 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d204      	bcs.n	8004448 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8004444:	60fb      	str	r3, [r7, #12]
 8004446:	e01a      	b.n	800447e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	4a13      	ldr	r2, [pc, #76]	; (8004498 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d303      	bcc.n	8004458 <HAL_ETH_SetMDIOClockRange+0x64>
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	4a12      	ldr	r2, [pc, #72]	; (800449c <HAL_ETH_SetMDIOClockRange+0xa8>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d911      	bls.n	800447c <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	4a10      	ldr	r2, [pc, #64]	; (800449c <HAL_ETH_SetMDIOClockRange+0xa8>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d908      	bls.n	8004472 <HAL_ETH_SetMDIOClockRange+0x7e>
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	4a0f      	ldr	r2, [pc, #60]	; (80044a0 <HAL_ETH_SetMDIOClockRange+0xac>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d804      	bhi.n	8004472 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800446e:	60fb      	str	r3, [r7, #12]
 8004470:	e005      	b.n	800447e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004478:	60fb      	str	r3, [r7, #12]
 800447a:	e000      	b.n	800447e <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 800447c:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	68fa      	ldr	r2, [r7, #12]
 8004484:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8004488:	bf00      	nop
 800448a:	3710      	adds	r7, #16
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}
 8004490:	01312cff 	.word	0x01312cff
 8004494:	02160ebf 	.word	0x02160ebf
 8004498:	03938700 	.word	0x03938700
 800449c:	05f5e0ff 	.word	0x05f5e0ff
 80044a0:	08f0d17f 	.word	0x08f0d17f

080044a4 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b085      	sub	sp, #20
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
 80044ac:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80044b6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	791b      	ldrb	r3, [r3, #4]
 80044bc:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80044be:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	7b1b      	ldrb	r3, [r3, #12]
 80044c4:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80044c6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	7b5b      	ldrb	r3, [r3, #13]
 80044cc:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80044ce:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	7b9b      	ldrb	r3, [r3, #14]
 80044d4:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80044d6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	7bdb      	ldrb	r3, [r3, #15]
 80044dc:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80044de:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80044e0:	683a      	ldr	r2, [r7, #0]
 80044e2:	7c12      	ldrb	r2, [r2, #16]
 80044e4:	2a00      	cmp	r2, #0
 80044e6:	d102      	bne.n	80044ee <ETH_SetMACConfig+0x4a>
 80044e8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80044ec:	e000      	b.n	80044f0 <ETH_SetMACConfig+0x4c>
 80044ee:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80044f0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80044f2:	683a      	ldr	r2, [r7, #0]
 80044f4:	7c52      	ldrb	r2, [r2, #17]
 80044f6:	2a00      	cmp	r2, #0
 80044f8:	d102      	bne.n	8004500 <ETH_SetMACConfig+0x5c>
 80044fa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80044fe:	e000      	b.n	8004502 <ETH_SetMACConfig+0x5e>
 8004500:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8004502:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	7c9b      	ldrb	r3, [r3, #18]
 8004508:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800450a:	431a      	orrs	r2, r3
               macconf->Speed |
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8004510:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8004516:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	7f1b      	ldrb	r3, [r3, #28]
 800451c:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 800451e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	7f5b      	ldrb	r3, [r3, #29]
 8004524:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8004526:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8004528:	683a      	ldr	r2, [r7, #0]
 800452a:	7f92      	ldrb	r2, [r2, #30]
 800452c:	2a00      	cmp	r2, #0
 800452e:	d102      	bne.n	8004536 <ETH_SetMACConfig+0x92>
 8004530:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004534:	e000      	b.n	8004538 <ETH_SetMACConfig+0x94>
 8004536:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8004538:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	7fdb      	ldrb	r3, [r3, #31]
 800453e:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8004540:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8004542:	683a      	ldr	r2, [r7, #0]
 8004544:	f892 2020 	ldrb.w	r2, [r2, #32]
 8004548:	2a00      	cmp	r2, #0
 800454a:	d102      	bne.n	8004552 <ETH_SetMACConfig+0xae>
 800454c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004550:	e000      	b.n	8004554 <ETH_SetMACConfig+0xb0>
 8004552:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8004554:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800455a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004562:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8004564:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 800456a:	4313      	orrs	r3, r2
 800456c:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	4b56      	ldr	r3, [pc, #344]	; (80046d0 <ETH_SetMACConfig+0x22c>)
 8004576:	4013      	ands	r3, r2
 8004578:	687a      	ldr	r2, [r7, #4]
 800457a:	6812      	ldr	r2, [r2, #0]
 800457c:	68f9      	ldr	r1, [r7, #12]
 800457e:	430b      	orrs	r3, r1
 8004580:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004586:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800458e:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8004590:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004598:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800459a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80045a2:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80045a4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80045a6:	683a      	ldr	r2, [r7, #0]
 80045a8:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80045ac:	2a00      	cmp	r2, #0
 80045ae:	d102      	bne.n	80045b6 <ETH_SetMACConfig+0x112>
 80045b0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80045b4:	e000      	b.n	80045b8 <ETH_SetMACConfig+0x114>
 80045b6:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80045b8:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80045be:	4313      	orrs	r3, r2
 80045c0:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	685a      	ldr	r2, [r3, #4]
 80045c8:	4b42      	ldr	r3, [pc, #264]	; (80046d4 <ETH_SetMACConfig+0x230>)
 80045ca:	4013      	ands	r3, r2
 80045cc:	687a      	ldr	r2, [r7, #4]
 80045ce:	6812      	ldr	r2, [r2, #0]
 80045d0:	68f9      	ldr	r1, [r7, #12]
 80045d2:	430b      	orrs	r3, r1
 80045d4:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80045dc:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80045e2:	4313      	orrs	r3, r2
 80045e4:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	68da      	ldr	r2, [r3, #12]
 80045ec:	4b3a      	ldr	r3, [pc, #232]	; (80046d8 <ETH_SetMACConfig+0x234>)
 80045ee:	4013      	ands	r3, r2
 80045f0:	687a      	ldr	r2, [r7, #4]
 80045f2:	6812      	ldr	r2, [r2, #0]
 80045f4:	68f9      	ldr	r1, [r7, #12]
 80045f6:	430b      	orrs	r3, r1
 80045f8:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004600:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004606:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8004608:	683a      	ldr	r2, [r7, #0]
 800460a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800460e:	2a00      	cmp	r2, #0
 8004610:	d101      	bne.n	8004616 <ETH_SetMACConfig+0x172>
 8004612:	2280      	movs	r2, #128	; 0x80
 8004614:	e000      	b.n	8004618 <ETH_SetMACConfig+0x174>
 8004616:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8004618:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800461e:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004620:	4313      	orrs	r3, r2
 8004622:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800462a:	f64f 730d 	movw	r3, #65293	; 0xff0d
 800462e:	4013      	ands	r3, r2
 8004630:	687a      	ldr	r2, [r7, #4]
 8004632:	6812      	ldr	r2, [r2, #0]
 8004634:	68f9      	ldr	r1, [r7, #12]
 8004636:	430b      	orrs	r3, r1
 8004638:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8004640:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8004648:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800464a:	4313      	orrs	r3, r2
 800464c:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004656:	f023 0103 	bic.w	r1, r3, #3
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	68fa      	ldr	r2, [r7, #12]
 8004660:	430a      	orrs	r2, r1
 8004662:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 800466e:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	430a      	orrs	r2, r1
 800467c:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8004684:	683a      	ldr	r2, [r7, #0]
 8004686:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 800468a:	2a00      	cmp	r2, #0
 800468c:	d101      	bne.n	8004692 <ETH_SetMACConfig+0x1ee>
 800468e:	2240      	movs	r2, #64	; 0x40
 8004690:	e000      	b.n	8004694 <ETH_SetMACConfig+0x1f0>
 8004692:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8004694:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800469c:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800469e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80046a6:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80046a8:	4313      	orrs	r3, r2
 80046aa:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80046b4:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	68fa      	ldr	r2, [r7, #12]
 80046be:	430a      	orrs	r2, r1
 80046c0:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 80046c4:	bf00      	nop
 80046c6:	3714      	adds	r7, #20
 80046c8:	46bd      	mov	sp, r7
 80046ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ce:	4770      	bx	lr
 80046d0:	00048083 	.word	0x00048083
 80046d4:	c0f88000 	.word	0xc0f88000
 80046d8:	fffffef0 	.word	0xfffffef0

080046dc <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80046dc:	b480      	push	{r7}
 80046de:	b085      	sub	sp, #20
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
 80046e4:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046ee:	681a      	ldr	r2, [r3, #0]
 80046f0:	4b38      	ldr	r3, [pc, #224]	; (80047d4 <ETH_SetDMAConfig+0xf8>)
 80046f2:	4013      	ands	r3, r2
 80046f4:	683a      	ldr	r2, [r7, #0]
 80046f6:	6811      	ldr	r1, [r2, #0]
 80046f8:	687a      	ldr	r2, [r7, #4]
 80046fa:	6812      	ldr	r2, [r2, #0]
 80046fc:	430b      	orrs	r3, r1
 80046fe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004702:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	791b      	ldrb	r3, [r3, #4]
 8004708:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800470e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	7b1b      	ldrb	r3, [r3, #12]
 8004714:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004716:	4313      	orrs	r3, r2
 8004718:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004722:	685a      	ldr	r2, [r3, #4]
 8004724:	4b2c      	ldr	r3, [pc, #176]	; (80047d8 <ETH_SetDMAConfig+0xfc>)
 8004726:	4013      	ands	r3, r2
 8004728:	687a      	ldr	r2, [r7, #4]
 800472a:	6812      	ldr	r2, [r2, #0]
 800472c:	68f9      	ldr	r1, [r7, #12]
 800472e:	430b      	orrs	r3, r1
 8004730:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004734:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	7b5b      	ldrb	r3, [r3, #13]
 800473a:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8004740:	4313      	orrs	r3, r2
 8004742:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800474c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8004750:	4b22      	ldr	r3, [pc, #136]	; (80047dc <ETH_SetDMAConfig+0x100>)
 8004752:	4013      	ands	r3, r2
 8004754:	687a      	ldr	r2, [r7, #4]
 8004756:	6812      	ldr	r2, [r2, #0]
 8004758:	68f9      	ldr	r1, [r7, #12]
 800475a:	430b      	orrs	r3, r1
 800475c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004760:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	7d1b      	ldrb	r3, [r3, #20]
 800476c:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800476e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	7f5b      	ldrb	r3, [r3, #29]
 8004774:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8004776:	4313      	orrs	r3, r2
 8004778:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004782:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8004786:	4b16      	ldr	r3, [pc, #88]	; (80047e0 <ETH_SetDMAConfig+0x104>)
 8004788:	4013      	ands	r3, r2
 800478a:	687a      	ldr	r2, [r7, #4]
 800478c:	6812      	ldr	r2, [r2, #0]
 800478e:	68f9      	ldr	r1, [r7, #12]
 8004790:	430b      	orrs	r3, r1
 8004792:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004796:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	7f1b      	ldrb	r3, [r3, #28]
 800479e:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80047a4:	4313      	orrs	r3, r2
 80047a6:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047b0:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80047b4:	4b0b      	ldr	r3, [pc, #44]	; (80047e4 <ETH_SetDMAConfig+0x108>)
 80047b6:	4013      	ands	r3, r2
 80047b8:	687a      	ldr	r2, [r7, #4]
 80047ba:	6812      	ldr	r2, [r2, #0]
 80047bc:	68f9      	ldr	r1, [r7, #12]
 80047be:	430b      	orrs	r3, r1
 80047c0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80047c4:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 80047c8:	bf00      	nop
 80047ca:	3714      	adds	r7, #20
 80047cc:	46bd      	mov	sp, r7
 80047ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d2:	4770      	bx	lr
 80047d4:	ffff87fd 	.word	0xffff87fd
 80047d8:	ffff2ffe 	.word	0xffff2ffe
 80047dc:	fffec000 	.word	0xfffec000
 80047e0:	ffc0efef 	.word	0xffc0efef
 80047e4:	7fc0ffff 	.word	0x7fc0ffff

080047e8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b0a4      	sub	sp, #144	; 0x90
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80047f0:	2301      	movs	r3, #1
 80047f2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80047f6:	2300      	movs	r3, #0
 80047f8:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80047fa:	2300      	movs	r3, #0
 80047fc:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8004800:	2300      	movs	r3, #0
 8004802:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8004806:	2301      	movs	r3, #1
 8004808:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 800480c:	2301      	movs	r3, #1
 800480e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8004812:	2301      	movs	r3, #1
 8004814:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8004818:	2300      	movs	r3, #0
 800481a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800481e:	2301      	movs	r3, #1
 8004820:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8004824:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004828:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800482a:	2300      	movs	r3, #0
 800482c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8004830:	2300      	movs	r3, #0
 8004832:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8004834:	2300      	movs	r3, #0
 8004836:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800483a:	2300      	movs	r3, #0
 800483c:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8004840:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8004844:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8004846:	2300      	movs	r3, #0
 8004848:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 800484c:	2300      	movs	r3, #0
 800484e:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8004850:	2301      	movs	r3, #1
 8004852:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8004856:	2300      	movs	r3, #0
 8004858:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 800485c:	2300      	movs	r3, #0
 800485e:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8004862:	2300      	movs	r3, #0
 8004864:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8004866:	2300      	movs	r3, #0
 8004868:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800486a:	2300      	movs	r3, #0
 800486c:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800486e:	2300      	movs	r3, #0
 8004870:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8004874:	2300      	movs	r3, #0
 8004876:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800487a:	2301      	movs	r3, #1
 800487c:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8004880:	2320      	movs	r3, #32
 8004882:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8004886:	2301      	movs	r3, #1
 8004888:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 800488c:	2300      	movs	r3, #0
 800488e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8004892:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8004896:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8004898:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800489c:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800489e:	2300      	movs	r3, #0
 80048a0:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80048a4:	2302      	movs	r3, #2
 80048a6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80048aa:	2300      	movs	r3, #0
 80048ac:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80048b0:	2300      	movs	r3, #0
 80048b2:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80048b6:	2300      	movs	r3, #0
 80048b8:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80048bc:	2301      	movs	r3, #1
 80048be:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80048c2:	2300      	movs	r3, #0
 80048c4:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80048c6:	2301      	movs	r3, #1
 80048c8:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80048cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80048d0:	4619      	mov	r1, r3
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f7ff fde6 	bl	80044a4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80048d8:	2301      	movs	r3, #1
 80048da:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80048dc:	2301      	movs	r3, #1
 80048de:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80048e0:	2300      	movs	r3, #0
 80048e2:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80048e4:	2300      	movs	r3, #0
 80048e6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80048ea:	2300      	movs	r3, #0
 80048ec:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80048ee:	2300      	movs	r3, #0
 80048f0:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80048f2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80048f6:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80048f8:	2300      	movs	r3, #0
 80048fa:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80048fc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004900:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8004902:	2300      	movs	r3, #0
 8004904:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8004908:	f44f 7306 	mov.w	r3, #536	; 0x218
 800490c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800490e:	f107 0308 	add.w	r3, r7, #8
 8004912:	4619      	mov	r1, r3
 8004914:	6878      	ldr	r0, [r7, #4]
 8004916:	f7ff fee1 	bl	80046dc <ETH_SetDMAConfig>
}
 800491a:	bf00      	nop
 800491c:	3790      	adds	r7, #144	; 0x90
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}

08004922 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004922:	b480      	push	{r7}
 8004924:	b085      	sub	sp, #20
 8004926:	af00      	add	r7, sp, #0
 8004928:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800492a:	2300      	movs	r3, #0
 800492c:	60fb      	str	r3, [r7, #12]
 800492e:	e01d      	b.n	800496c <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	68d9      	ldr	r1, [r3, #12]
 8004934:	68fa      	ldr	r2, [r7, #12]
 8004936:	4613      	mov	r3, r2
 8004938:	005b      	lsls	r3, r3, #1
 800493a:	4413      	add	r3, r2
 800493c:	00db      	lsls	r3, r3, #3
 800493e:	440b      	add	r3, r1
 8004940:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	2200      	movs	r2, #0
 8004946:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	2200      	movs	r2, #0
 800494c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	2200      	movs	r2, #0
 8004952:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	2200      	movs	r2, #0
 8004958:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800495a:	68b9      	ldr	r1, [r7, #8]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	68fa      	ldr	r2, [r7, #12]
 8004960:	3206      	adds	r2, #6
 8004962:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	3301      	adds	r3, #1
 800496a:	60fb      	str	r3, [r7, #12]
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2b03      	cmp	r3, #3
 8004970:	d9de      	bls.n	8004930 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2200      	movs	r2, #0
 8004976:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004980:	461a      	mov	r2, r3
 8004982:	2303      	movs	r3, #3
 8004984:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	68da      	ldr	r2, [r3, #12]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004994:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	68da      	ldr	r2, [r3, #12]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049a4:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 80049a8:	bf00      	nop
 80049aa:	3714      	adds	r7, #20
 80049ac:	46bd      	mov	sp, r7
 80049ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b2:	4770      	bx	lr

080049b4 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b085      	sub	sp, #20
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80049bc:	2300      	movs	r3, #0
 80049be:	60fb      	str	r3, [r7, #12]
 80049c0:	e023      	b.n	8004a0a <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6919      	ldr	r1, [r3, #16]
 80049c6:	68fa      	ldr	r2, [r7, #12]
 80049c8:	4613      	mov	r3, r2
 80049ca:	005b      	lsls	r3, r3, #1
 80049cc:	4413      	add	r3, r2
 80049ce:	00db      	lsls	r3, r3, #3
 80049d0:	440b      	add	r3, r1
 80049d2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	2200      	movs	r2, #0
 80049d8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	2200      	movs	r2, #0
 80049de:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	2200      	movs	r2, #0
 80049e4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	2200      	movs	r2, #0
 80049ea:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	2200      	movs	r2, #0
 80049f0:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	2200      	movs	r2, #0
 80049f6:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80049f8:	68b9      	ldr	r1, [r7, #8]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	68fa      	ldr	r2, [r7, #12]
 80049fe:	3212      	adds	r2, #18
 8004a00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	3301      	adds	r3, #1
 8004a08:	60fb      	str	r3, [r7, #12]
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2b03      	cmp	r3, #3
 8004a0e:	d9d8      	bls.n	80049c2 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2200      	movs	r2, #0
 8004a14:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2200      	movs	r2, #0
 8004a26:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a36:	461a      	mov	r2, r3
 8004a38:	2303      	movs	r3, #3
 8004a3a:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	691a      	ldr	r2, [r3, #16]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a4a:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	691b      	ldr	r3, [r3, #16]
 8004a52:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a5e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8004a62:	bf00      	nop
 8004a64:	3714      	adds	r7, #20
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr
	...

08004a70 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b089      	sub	sp, #36	; 0x24
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
 8004a78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004a7e:	4b86      	ldr	r3, [pc, #536]	; (8004c98 <HAL_GPIO_Init+0x228>)
 8004a80:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004a82:	e18c      	b.n	8004d9e <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	2101      	movs	r1, #1
 8004a8a:	69fb      	ldr	r3, [r7, #28]
 8004a8c:	fa01 f303 	lsl.w	r3, r1, r3
 8004a90:	4013      	ands	r3, r2
 8004a92:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	f000 817e 	beq.w	8004d98 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	f003 0303 	and.w	r3, r3, #3
 8004aa4:	2b01      	cmp	r3, #1
 8004aa6:	d005      	beq.n	8004ab4 <HAL_GPIO_Init+0x44>
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	f003 0303 	and.w	r3, r3, #3
 8004ab0:	2b02      	cmp	r3, #2
 8004ab2:	d130      	bne.n	8004b16 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004aba:	69fb      	ldr	r3, [r7, #28]
 8004abc:	005b      	lsls	r3, r3, #1
 8004abe:	2203      	movs	r2, #3
 8004ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ac4:	43db      	mvns	r3, r3
 8004ac6:	69ba      	ldr	r2, [r7, #24]
 8004ac8:	4013      	ands	r3, r2
 8004aca:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	68da      	ldr	r2, [r3, #12]
 8004ad0:	69fb      	ldr	r3, [r7, #28]
 8004ad2:	005b      	lsls	r3, r3, #1
 8004ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ad8:	69ba      	ldr	r2, [r7, #24]
 8004ada:	4313      	orrs	r3, r2
 8004adc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	69ba      	ldr	r2, [r7, #24]
 8004ae2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004aea:	2201      	movs	r2, #1
 8004aec:	69fb      	ldr	r3, [r7, #28]
 8004aee:	fa02 f303 	lsl.w	r3, r2, r3
 8004af2:	43db      	mvns	r3, r3
 8004af4:	69ba      	ldr	r2, [r7, #24]
 8004af6:	4013      	ands	r3, r2
 8004af8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	091b      	lsrs	r3, r3, #4
 8004b00:	f003 0201 	and.w	r2, r3, #1
 8004b04:	69fb      	ldr	r3, [r7, #28]
 8004b06:	fa02 f303 	lsl.w	r3, r2, r3
 8004b0a:	69ba      	ldr	r2, [r7, #24]
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	69ba      	ldr	r2, [r7, #24]
 8004b14:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	f003 0303 	and.w	r3, r3, #3
 8004b1e:	2b03      	cmp	r3, #3
 8004b20:	d017      	beq.n	8004b52 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	68db      	ldr	r3, [r3, #12]
 8004b26:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004b28:	69fb      	ldr	r3, [r7, #28]
 8004b2a:	005b      	lsls	r3, r3, #1
 8004b2c:	2203      	movs	r2, #3
 8004b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b32:	43db      	mvns	r3, r3
 8004b34:	69ba      	ldr	r2, [r7, #24]
 8004b36:	4013      	ands	r3, r2
 8004b38:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	689a      	ldr	r2, [r3, #8]
 8004b3e:	69fb      	ldr	r3, [r7, #28]
 8004b40:	005b      	lsls	r3, r3, #1
 8004b42:	fa02 f303 	lsl.w	r3, r2, r3
 8004b46:	69ba      	ldr	r2, [r7, #24]
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	69ba      	ldr	r2, [r7, #24]
 8004b50:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	f003 0303 	and.w	r3, r3, #3
 8004b5a:	2b02      	cmp	r3, #2
 8004b5c:	d123      	bne.n	8004ba6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004b5e:	69fb      	ldr	r3, [r7, #28]
 8004b60:	08da      	lsrs	r2, r3, #3
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	3208      	adds	r2, #8
 8004b66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004b6c:	69fb      	ldr	r3, [r7, #28]
 8004b6e:	f003 0307 	and.w	r3, r3, #7
 8004b72:	009b      	lsls	r3, r3, #2
 8004b74:	220f      	movs	r2, #15
 8004b76:	fa02 f303 	lsl.w	r3, r2, r3
 8004b7a:	43db      	mvns	r3, r3
 8004b7c:	69ba      	ldr	r2, [r7, #24]
 8004b7e:	4013      	ands	r3, r2
 8004b80:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	691a      	ldr	r2, [r3, #16]
 8004b86:	69fb      	ldr	r3, [r7, #28]
 8004b88:	f003 0307 	and.w	r3, r3, #7
 8004b8c:	009b      	lsls	r3, r3, #2
 8004b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b92:	69ba      	ldr	r2, [r7, #24]
 8004b94:	4313      	orrs	r3, r2
 8004b96:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004b98:	69fb      	ldr	r3, [r7, #28]
 8004b9a:	08da      	lsrs	r2, r3, #3
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	3208      	adds	r2, #8
 8004ba0:	69b9      	ldr	r1, [r7, #24]
 8004ba2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004bac:	69fb      	ldr	r3, [r7, #28]
 8004bae:	005b      	lsls	r3, r3, #1
 8004bb0:	2203      	movs	r2, #3
 8004bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8004bb6:	43db      	mvns	r3, r3
 8004bb8:	69ba      	ldr	r2, [r7, #24]
 8004bba:	4013      	ands	r3, r2
 8004bbc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	f003 0203 	and.w	r2, r3, #3
 8004bc6:	69fb      	ldr	r3, [r7, #28]
 8004bc8:	005b      	lsls	r3, r3, #1
 8004bca:	fa02 f303 	lsl.w	r3, r2, r3
 8004bce:	69ba      	ldr	r2, [r7, #24]
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	69ba      	ldr	r2, [r7, #24]
 8004bd8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	f000 80d8 	beq.w	8004d98 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004be8:	4b2c      	ldr	r3, [pc, #176]	; (8004c9c <HAL_GPIO_Init+0x22c>)
 8004bea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004bee:	4a2b      	ldr	r2, [pc, #172]	; (8004c9c <HAL_GPIO_Init+0x22c>)
 8004bf0:	f043 0302 	orr.w	r3, r3, #2
 8004bf4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004bf8:	4b28      	ldr	r3, [pc, #160]	; (8004c9c <HAL_GPIO_Init+0x22c>)
 8004bfa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004bfe:	f003 0302 	and.w	r3, r3, #2
 8004c02:	60fb      	str	r3, [r7, #12]
 8004c04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004c06:	4a26      	ldr	r2, [pc, #152]	; (8004ca0 <HAL_GPIO_Init+0x230>)
 8004c08:	69fb      	ldr	r3, [r7, #28]
 8004c0a:	089b      	lsrs	r3, r3, #2
 8004c0c:	3302      	adds	r3, #2
 8004c0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004c14:	69fb      	ldr	r3, [r7, #28]
 8004c16:	f003 0303 	and.w	r3, r3, #3
 8004c1a:	009b      	lsls	r3, r3, #2
 8004c1c:	220f      	movs	r2, #15
 8004c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c22:	43db      	mvns	r3, r3
 8004c24:	69ba      	ldr	r2, [r7, #24]
 8004c26:	4013      	ands	r3, r2
 8004c28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	4a1d      	ldr	r2, [pc, #116]	; (8004ca4 <HAL_GPIO_Init+0x234>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d04a      	beq.n	8004cc8 <HAL_GPIO_Init+0x258>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	4a1c      	ldr	r2, [pc, #112]	; (8004ca8 <HAL_GPIO_Init+0x238>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d02b      	beq.n	8004c92 <HAL_GPIO_Init+0x222>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	4a1b      	ldr	r2, [pc, #108]	; (8004cac <HAL_GPIO_Init+0x23c>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d025      	beq.n	8004c8e <HAL_GPIO_Init+0x21e>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	4a1a      	ldr	r2, [pc, #104]	; (8004cb0 <HAL_GPIO_Init+0x240>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d01f      	beq.n	8004c8a <HAL_GPIO_Init+0x21a>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	4a19      	ldr	r2, [pc, #100]	; (8004cb4 <HAL_GPIO_Init+0x244>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d019      	beq.n	8004c86 <HAL_GPIO_Init+0x216>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	4a18      	ldr	r2, [pc, #96]	; (8004cb8 <HAL_GPIO_Init+0x248>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d013      	beq.n	8004c82 <HAL_GPIO_Init+0x212>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	4a17      	ldr	r2, [pc, #92]	; (8004cbc <HAL_GPIO_Init+0x24c>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d00d      	beq.n	8004c7e <HAL_GPIO_Init+0x20e>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	4a16      	ldr	r2, [pc, #88]	; (8004cc0 <HAL_GPIO_Init+0x250>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d007      	beq.n	8004c7a <HAL_GPIO_Init+0x20a>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	4a15      	ldr	r2, [pc, #84]	; (8004cc4 <HAL_GPIO_Init+0x254>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d101      	bne.n	8004c76 <HAL_GPIO_Init+0x206>
 8004c72:	2309      	movs	r3, #9
 8004c74:	e029      	b.n	8004cca <HAL_GPIO_Init+0x25a>
 8004c76:	230a      	movs	r3, #10
 8004c78:	e027      	b.n	8004cca <HAL_GPIO_Init+0x25a>
 8004c7a:	2307      	movs	r3, #7
 8004c7c:	e025      	b.n	8004cca <HAL_GPIO_Init+0x25a>
 8004c7e:	2306      	movs	r3, #6
 8004c80:	e023      	b.n	8004cca <HAL_GPIO_Init+0x25a>
 8004c82:	2305      	movs	r3, #5
 8004c84:	e021      	b.n	8004cca <HAL_GPIO_Init+0x25a>
 8004c86:	2304      	movs	r3, #4
 8004c88:	e01f      	b.n	8004cca <HAL_GPIO_Init+0x25a>
 8004c8a:	2303      	movs	r3, #3
 8004c8c:	e01d      	b.n	8004cca <HAL_GPIO_Init+0x25a>
 8004c8e:	2302      	movs	r3, #2
 8004c90:	e01b      	b.n	8004cca <HAL_GPIO_Init+0x25a>
 8004c92:	2301      	movs	r3, #1
 8004c94:	e019      	b.n	8004cca <HAL_GPIO_Init+0x25a>
 8004c96:	bf00      	nop
 8004c98:	58000080 	.word	0x58000080
 8004c9c:	58024400 	.word	0x58024400
 8004ca0:	58000400 	.word	0x58000400
 8004ca4:	58020000 	.word	0x58020000
 8004ca8:	58020400 	.word	0x58020400
 8004cac:	58020800 	.word	0x58020800
 8004cb0:	58020c00 	.word	0x58020c00
 8004cb4:	58021000 	.word	0x58021000
 8004cb8:	58021400 	.word	0x58021400
 8004cbc:	58021800 	.word	0x58021800
 8004cc0:	58021c00 	.word	0x58021c00
 8004cc4:	58022400 	.word	0x58022400
 8004cc8:	2300      	movs	r3, #0
 8004cca:	69fa      	ldr	r2, [r7, #28]
 8004ccc:	f002 0203 	and.w	r2, r2, #3
 8004cd0:	0092      	lsls	r2, r2, #2
 8004cd2:	4093      	lsls	r3, r2
 8004cd4:	69ba      	ldr	r2, [r7, #24]
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004cda:	4938      	ldr	r1, [pc, #224]	; (8004dbc <HAL_GPIO_Init+0x34c>)
 8004cdc:	69fb      	ldr	r3, [r7, #28]
 8004cde:	089b      	lsrs	r3, r3, #2
 8004ce0:	3302      	adds	r3, #2
 8004ce2:	69ba      	ldr	r2, [r7, #24]
 8004ce4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004ce8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	43db      	mvns	r3, r3
 8004cf4:	69ba      	ldr	r2, [r7, #24]
 8004cf6:	4013      	ands	r3, r2
 8004cf8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d003      	beq.n	8004d0e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8004d06:	69ba      	ldr	r2, [r7, #24]
 8004d08:	693b      	ldr	r3, [r7, #16]
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004d0e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d12:	69bb      	ldr	r3, [r7, #24]
 8004d14:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004d16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	43db      	mvns	r3, r3
 8004d22:	69ba      	ldr	r2, [r7, #24]
 8004d24:	4013      	ands	r3, r2
 8004d26:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d003      	beq.n	8004d3c <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8004d34:	69ba      	ldr	r2, [r7, #24]
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004d3c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d40:	69bb      	ldr	r3, [r7, #24]
 8004d42:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	43db      	mvns	r3, r3
 8004d4e:	69ba      	ldr	r2, [r7, #24]
 8004d50:	4013      	ands	r3, r2
 8004d52:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d003      	beq.n	8004d68 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8004d60:	69ba      	ldr	r2, [r7, #24]
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	4313      	orrs	r3, r2
 8004d66:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	69ba      	ldr	r2, [r7, #24]
 8004d6c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	43db      	mvns	r3, r3
 8004d78:	69ba      	ldr	r2, [r7, #24]
 8004d7a:	4013      	ands	r3, r2
 8004d7c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d003      	beq.n	8004d92 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8004d8a:	69ba      	ldr	r2, [r7, #24]
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	69ba      	ldr	r2, [r7, #24]
 8004d96:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004d98:	69fb      	ldr	r3, [r7, #28]
 8004d9a:	3301      	adds	r3, #1
 8004d9c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	681a      	ldr	r2, [r3, #0]
 8004da2:	69fb      	ldr	r3, [r7, #28]
 8004da4:	fa22 f303 	lsr.w	r3, r2, r3
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	f47f ae6b 	bne.w	8004a84 <HAL_GPIO_Init+0x14>
  }
}
 8004dae:	bf00      	nop
 8004db0:	bf00      	nop
 8004db2:	3724      	adds	r7, #36	; 0x24
 8004db4:	46bd      	mov	sp, r7
 8004db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dba:	4770      	bx	lr
 8004dbc:	58000400 	.word	0x58000400

08004dc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b083      	sub	sp, #12
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
 8004dc8:	460b      	mov	r3, r1
 8004dca:	807b      	strh	r3, [r7, #2]
 8004dcc:	4613      	mov	r3, r2
 8004dce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004dd0:	787b      	ldrb	r3, [r7, #1]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d003      	beq.n	8004dde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004dd6:	887a      	ldrh	r2, [r7, #2]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004ddc:	e003      	b.n	8004de6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004dde:	887b      	ldrh	r3, [r7, #2]
 8004de0:	041a      	lsls	r2, r3, #16
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	619a      	str	r2, [r3, #24]
}
 8004de6:	bf00      	nop
 8004de8:	370c      	adds	r7, #12
 8004dea:	46bd      	mov	sp, r7
 8004dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df0:	4770      	bx	lr

08004df2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004df2:	b480      	push	{r7}
 8004df4:	b085      	sub	sp, #20
 8004df6:	af00      	add	r7, sp, #0
 8004df8:	6078      	str	r0, [r7, #4]
 8004dfa:	460b      	mov	r3, r1
 8004dfc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	695b      	ldr	r3, [r3, #20]
 8004e02:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004e04:	887a      	ldrh	r2, [r7, #2]
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	4013      	ands	r3, r2
 8004e0a:	041a      	lsls	r2, r3, #16
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	43d9      	mvns	r1, r3
 8004e10:	887b      	ldrh	r3, [r7, #2]
 8004e12:	400b      	ands	r3, r1
 8004e14:	431a      	orrs	r2, r3
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	619a      	str	r2, [r3, #24]
}
 8004e1a:	bf00      	nop
 8004e1c:	3714      	adds	r7, #20
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e24:	4770      	bx	lr

08004e26 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004e26:	b580      	push	{r7, lr}
 8004e28:	b082      	sub	sp, #8
 8004e2a:	af00      	add	r7, sp, #0
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8004e30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e34:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004e38:	88fb      	ldrh	r3, [r7, #6]
 8004e3a:	4013      	ands	r3, r2
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d008      	beq.n	8004e52 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004e40:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e44:	88fb      	ldrh	r3, [r7, #6]
 8004e46:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004e4a:	88fb      	ldrh	r3, [r7, #6]
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	f7fb ff59 	bl	8000d04 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8004e52:	bf00      	nop
 8004e54:	3708      	adds	r7, #8
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}
	...

08004e5c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b084      	sub	sp, #16
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004e64:	4b19      	ldr	r3, [pc, #100]	; (8004ecc <HAL_PWREx_ConfigSupply+0x70>)
 8004e66:	68db      	ldr	r3, [r3, #12]
 8004e68:	f003 0304 	and.w	r3, r3, #4
 8004e6c:	2b04      	cmp	r3, #4
 8004e6e:	d00a      	beq.n	8004e86 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004e70:	4b16      	ldr	r3, [pc, #88]	; (8004ecc <HAL_PWREx_ConfigSupply+0x70>)
 8004e72:	68db      	ldr	r3, [r3, #12]
 8004e74:	f003 0307 	and.w	r3, r3, #7
 8004e78:	687a      	ldr	r2, [r7, #4]
 8004e7a:	429a      	cmp	r2, r3
 8004e7c:	d001      	beq.n	8004e82 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	e01f      	b.n	8004ec2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004e82:	2300      	movs	r3, #0
 8004e84:	e01d      	b.n	8004ec2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004e86:	4b11      	ldr	r3, [pc, #68]	; (8004ecc <HAL_PWREx_ConfigSupply+0x70>)
 8004e88:	68db      	ldr	r3, [r3, #12]
 8004e8a:	f023 0207 	bic.w	r2, r3, #7
 8004e8e:	490f      	ldr	r1, [pc, #60]	; (8004ecc <HAL_PWREx_ConfigSupply+0x70>)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	4313      	orrs	r3, r2
 8004e94:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004e96:	f7fc fd4d 	bl	8001934 <HAL_GetTick>
 8004e9a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004e9c:	e009      	b.n	8004eb2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004e9e:	f7fc fd49 	bl	8001934 <HAL_GetTick>
 8004ea2:	4602      	mov	r2, r0
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	1ad3      	subs	r3, r2, r3
 8004ea8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004eac:	d901      	bls.n	8004eb2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	e007      	b.n	8004ec2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004eb2:	4b06      	ldr	r3, [pc, #24]	; (8004ecc <HAL_PWREx_ConfigSupply+0x70>)
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004eba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ebe:	d1ee      	bne.n	8004e9e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004ec0:	2300      	movs	r3, #0
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	3710      	adds	r7, #16
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}
 8004eca:	bf00      	nop
 8004ecc:	58024800 	.word	0x58024800

08004ed0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b08c      	sub	sp, #48	; 0x30
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d101      	bne.n	8004ee2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	e3c8      	b.n	8005674 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f003 0301 	and.w	r3, r3, #1
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	f000 8087 	beq.w	8004ffe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ef0:	4b88      	ldr	r3, [pc, #544]	; (8005114 <HAL_RCC_OscConfig+0x244>)
 8004ef2:	691b      	ldr	r3, [r3, #16]
 8004ef4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004efa:	4b86      	ldr	r3, [pc, #536]	; (8005114 <HAL_RCC_OscConfig+0x244>)
 8004efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004efe:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f02:	2b10      	cmp	r3, #16
 8004f04:	d007      	beq.n	8004f16 <HAL_RCC_OscConfig+0x46>
 8004f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f08:	2b18      	cmp	r3, #24
 8004f0a:	d110      	bne.n	8004f2e <HAL_RCC_OscConfig+0x5e>
 8004f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f0e:	f003 0303 	and.w	r3, r3, #3
 8004f12:	2b02      	cmp	r3, #2
 8004f14:	d10b      	bne.n	8004f2e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f16:	4b7f      	ldr	r3, [pc, #508]	; (8005114 <HAL_RCC_OscConfig+0x244>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d06c      	beq.n	8004ffc <HAL_RCC_OscConfig+0x12c>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d168      	bne.n	8004ffc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	e3a2      	b.n	8005674 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f36:	d106      	bne.n	8004f46 <HAL_RCC_OscConfig+0x76>
 8004f38:	4b76      	ldr	r3, [pc, #472]	; (8005114 <HAL_RCC_OscConfig+0x244>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a75      	ldr	r2, [pc, #468]	; (8005114 <HAL_RCC_OscConfig+0x244>)
 8004f3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f42:	6013      	str	r3, [r2, #0]
 8004f44:	e02e      	b.n	8004fa4 <HAL_RCC_OscConfig+0xd4>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d10c      	bne.n	8004f68 <HAL_RCC_OscConfig+0x98>
 8004f4e:	4b71      	ldr	r3, [pc, #452]	; (8005114 <HAL_RCC_OscConfig+0x244>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a70      	ldr	r2, [pc, #448]	; (8005114 <HAL_RCC_OscConfig+0x244>)
 8004f54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f58:	6013      	str	r3, [r2, #0]
 8004f5a:	4b6e      	ldr	r3, [pc, #440]	; (8005114 <HAL_RCC_OscConfig+0x244>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a6d      	ldr	r2, [pc, #436]	; (8005114 <HAL_RCC_OscConfig+0x244>)
 8004f60:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f64:	6013      	str	r3, [r2, #0]
 8004f66:	e01d      	b.n	8004fa4 <HAL_RCC_OscConfig+0xd4>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004f70:	d10c      	bne.n	8004f8c <HAL_RCC_OscConfig+0xbc>
 8004f72:	4b68      	ldr	r3, [pc, #416]	; (8005114 <HAL_RCC_OscConfig+0x244>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a67      	ldr	r2, [pc, #412]	; (8005114 <HAL_RCC_OscConfig+0x244>)
 8004f78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004f7c:	6013      	str	r3, [r2, #0]
 8004f7e:	4b65      	ldr	r3, [pc, #404]	; (8005114 <HAL_RCC_OscConfig+0x244>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a64      	ldr	r2, [pc, #400]	; (8005114 <HAL_RCC_OscConfig+0x244>)
 8004f84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f88:	6013      	str	r3, [r2, #0]
 8004f8a:	e00b      	b.n	8004fa4 <HAL_RCC_OscConfig+0xd4>
 8004f8c:	4b61      	ldr	r3, [pc, #388]	; (8005114 <HAL_RCC_OscConfig+0x244>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a60      	ldr	r2, [pc, #384]	; (8005114 <HAL_RCC_OscConfig+0x244>)
 8004f92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f96:	6013      	str	r3, [r2, #0]
 8004f98:	4b5e      	ldr	r3, [pc, #376]	; (8005114 <HAL_RCC_OscConfig+0x244>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a5d      	ldr	r2, [pc, #372]	; (8005114 <HAL_RCC_OscConfig+0x244>)
 8004f9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004fa2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d013      	beq.n	8004fd4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fac:	f7fc fcc2 	bl	8001934 <HAL_GetTick>
 8004fb0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004fb2:	e008      	b.n	8004fc6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004fb4:	f7fc fcbe 	bl	8001934 <HAL_GetTick>
 8004fb8:	4602      	mov	r2, r0
 8004fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fbc:	1ad3      	subs	r3, r2, r3
 8004fbe:	2b64      	cmp	r3, #100	; 0x64
 8004fc0:	d901      	bls.n	8004fc6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004fc2:	2303      	movs	r3, #3
 8004fc4:	e356      	b.n	8005674 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004fc6:	4b53      	ldr	r3, [pc, #332]	; (8005114 <HAL_RCC_OscConfig+0x244>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d0f0      	beq.n	8004fb4 <HAL_RCC_OscConfig+0xe4>
 8004fd2:	e014      	b.n	8004ffe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fd4:	f7fc fcae 	bl	8001934 <HAL_GetTick>
 8004fd8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004fda:	e008      	b.n	8004fee <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004fdc:	f7fc fcaa 	bl	8001934 <HAL_GetTick>
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe4:	1ad3      	subs	r3, r2, r3
 8004fe6:	2b64      	cmp	r3, #100	; 0x64
 8004fe8:	d901      	bls.n	8004fee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004fea:	2303      	movs	r3, #3
 8004fec:	e342      	b.n	8005674 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004fee:	4b49      	ldr	r3, [pc, #292]	; (8005114 <HAL_RCC_OscConfig+0x244>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d1f0      	bne.n	8004fdc <HAL_RCC_OscConfig+0x10c>
 8004ffa:	e000      	b.n	8004ffe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ffc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f003 0302 	and.w	r3, r3, #2
 8005006:	2b00      	cmp	r3, #0
 8005008:	f000 808c 	beq.w	8005124 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800500c:	4b41      	ldr	r3, [pc, #260]	; (8005114 <HAL_RCC_OscConfig+0x244>)
 800500e:	691b      	ldr	r3, [r3, #16]
 8005010:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005014:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005016:	4b3f      	ldr	r3, [pc, #252]	; (8005114 <HAL_RCC_OscConfig+0x244>)
 8005018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800501a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800501c:	6a3b      	ldr	r3, [r7, #32]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d007      	beq.n	8005032 <HAL_RCC_OscConfig+0x162>
 8005022:	6a3b      	ldr	r3, [r7, #32]
 8005024:	2b18      	cmp	r3, #24
 8005026:	d137      	bne.n	8005098 <HAL_RCC_OscConfig+0x1c8>
 8005028:	69fb      	ldr	r3, [r7, #28]
 800502a:	f003 0303 	and.w	r3, r3, #3
 800502e:	2b00      	cmp	r3, #0
 8005030:	d132      	bne.n	8005098 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005032:	4b38      	ldr	r3, [pc, #224]	; (8005114 <HAL_RCC_OscConfig+0x244>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f003 0304 	and.w	r3, r3, #4
 800503a:	2b00      	cmp	r3, #0
 800503c:	d005      	beq.n	800504a <HAL_RCC_OscConfig+0x17a>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	68db      	ldr	r3, [r3, #12]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d101      	bne.n	800504a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	e314      	b.n	8005674 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800504a:	4b32      	ldr	r3, [pc, #200]	; (8005114 <HAL_RCC_OscConfig+0x244>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f023 0219 	bic.w	r2, r3, #25
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	68db      	ldr	r3, [r3, #12]
 8005056:	492f      	ldr	r1, [pc, #188]	; (8005114 <HAL_RCC_OscConfig+0x244>)
 8005058:	4313      	orrs	r3, r2
 800505a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800505c:	f7fc fc6a 	bl	8001934 <HAL_GetTick>
 8005060:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005062:	e008      	b.n	8005076 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005064:	f7fc fc66 	bl	8001934 <HAL_GetTick>
 8005068:	4602      	mov	r2, r0
 800506a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800506c:	1ad3      	subs	r3, r2, r3
 800506e:	2b02      	cmp	r3, #2
 8005070:	d901      	bls.n	8005076 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8005072:	2303      	movs	r3, #3
 8005074:	e2fe      	b.n	8005674 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005076:	4b27      	ldr	r3, [pc, #156]	; (8005114 <HAL_RCC_OscConfig+0x244>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f003 0304 	and.w	r3, r3, #4
 800507e:	2b00      	cmp	r3, #0
 8005080:	d0f0      	beq.n	8005064 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005082:	4b24      	ldr	r3, [pc, #144]	; (8005114 <HAL_RCC_OscConfig+0x244>)
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	691b      	ldr	r3, [r3, #16]
 800508e:	061b      	lsls	r3, r3, #24
 8005090:	4920      	ldr	r1, [pc, #128]	; (8005114 <HAL_RCC_OscConfig+0x244>)
 8005092:	4313      	orrs	r3, r2
 8005094:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005096:	e045      	b.n	8005124 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	68db      	ldr	r3, [r3, #12]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d026      	beq.n	80050ee <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80050a0:	4b1c      	ldr	r3, [pc, #112]	; (8005114 <HAL_RCC_OscConfig+0x244>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f023 0219 	bic.w	r2, r3, #25
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	68db      	ldr	r3, [r3, #12]
 80050ac:	4919      	ldr	r1, [pc, #100]	; (8005114 <HAL_RCC_OscConfig+0x244>)
 80050ae:	4313      	orrs	r3, r2
 80050b0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050b2:	f7fc fc3f 	bl	8001934 <HAL_GetTick>
 80050b6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80050b8:	e008      	b.n	80050cc <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80050ba:	f7fc fc3b 	bl	8001934 <HAL_GetTick>
 80050be:	4602      	mov	r2, r0
 80050c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c2:	1ad3      	subs	r3, r2, r3
 80050c4:	2b02      	cmp	r3, #2
 80050c6:	d901      	bls.n	80050cc <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80050c8:	2303      	movs	r3, #3
 80050ca:	e2d3      	b.n	8005674 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80050cc:	4b11      	ldr	r3, [pc, #68]	; (8005114 <HAL_RCC_OscConfig+0x244>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f003 0304 	and.w	r3, r3, #4
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d0f0      	beq.n	80050ba <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050d8:	4b0e      	ldr	r3, [pc, #56]	; (8005114 <HAL_RCC_OscConfig+0x244>)
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	691b      	ldr	r3, [r3, #16]
 80050e4:	061b      	lsls	r3, r3, #24
 80050e6:	490b      	ldr	r1, [pc, #44]	; (8005114 <HAL_RCC_OscConfig+0x244>)
 80050e8:	4313      	orrs	r3, r2
 80050ea:	604b      	str	r3, [r1, #4]
 80050ec:	e01a      	b.n	8005124 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80050ee:	4b09      	ldr	r3, [pc, #36]	; (8005114 <HAL_RCC_OscConfig+0x244>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a08      	ldr	r2, [pc, #32]	; (8005114 <HAL_RCC_OscConfig+0x244>)
 80050f4:	f023 0301 	bic.w	r3, r3, #1
 80050f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050fa:	f7fc fc1b 	bl	8001934 <HAL_GetTick>
 80050fe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005100:	e00a      	b.n	8005118 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005102:	f7fc fc17 	bl	8001934 <HAL_GetTick>
 8005106:	4602      	mov	r2, r0
 8005108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800510a:	1ad3      	subs	r3, r2, r3
 800510c:	2b02      	cmp	r3, #2
 800510e:	d903      	bls.n	8005118 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8005110:	2303      	movs	r3, #3
 8005112:	e2af      	b.n	8005674 <HAL_RCC_OscConfig+0x7a4>
 8005114:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005118:	4b96      	ldr	r3, [pc, #600]	; (8005374 <HAL_RCC_OscConfig+0x4a4>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f003 0304 	and.w	r3, r3, #4
 8005120:	2b00      	cmp	r3, #0
 8005122:	d1ee      	bne.n	8005102 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f003 0310 	and.w	r3, r3, #16
 800512c:	2b00      	cmp	r3, #0
 800512e:	d06a      	beq.n	8005206 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005130:	4b90      	ldr	r3, [pc, #576]	; (8005374 <HAL_RCC_OscConfig+0x4a4>)
 8005132:	691b      	ldr	r3, [r3, #16]
 8005134:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005138:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800513a:	4b8e      	ldr	r3, [pc, #568]	; (8005374 <HAL_RCC_OscConfig+0x4a4>)
 800513c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800513e:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005140:	69bb      	ldr	r3, [r7, #24]
 8005142:	2b08      	cmp	r3, #8
 8005144:	d007      	beq.n	8005156 <HAL_RCC_OscConfig+0x286>
 8005146:	69bb      	ldr	r3, [r7, #24]
 8005148:	2b18      	cmp	r3, #24
 800514a:	d11b      	bne.n	8005184 <HAL_RCC_OscConfig+0x2b4>
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	f003 0303 	and.w	r3, r3, #3
 8005152:	2b01      	cmp	r3, #1
 8005154:	d116      	bne.n	8005184 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005156:	4b87      	ldr	r3, [pc, #540]	; (8005374 <HAL_RCC_OscConfig+0x4a4>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800515e:	2b00      	cmp	r3, #0
 8005160:	d005      	beq.n	800516e <HAL_RCC_OscConfig+0x29e>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	69db      	ldr	r3, [r3, #28]
 8005166:	2b80      	cmp	r3, #128	; 0x80
 8005168:	d001      	beq.n	800516e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800516a:	2301      	movs	r3, #1
 800516c:	e282      	b.n	8005674 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800516e:	4b81      	ldr	r3, [pc, #516]	; (8005374 <HAL_RCC_OscConfig+0x4a4>)
 8005170:	68db      	ldr	r3, [r3, #12]
 8005172:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6a1b      	ldr	r3, [r3, #32]
 800517a:	061b      	lsls	r3, r3, #24
 800517c:	497d      	ldr	r1, [pc, #500]	; (8005374 <HAL_RCC_OscConfig+0x4a4>)
 800517e:	4313      	orrs	r3, r2
 8005180:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005182:	e040      	b.n	8005206 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	69db      	ldr	r3, [r3, #28]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d023      	beq.n	80051d4 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800518c:	4b79      	ldr	r3, [pc, #484]	; (8005374 <HAL_RCC_OscConfig+0x4a4>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a78      	ldr	r2, [pc, #480]	; (8005374 <HAL_RCC_OscConfig+0x4a4>)
 8005192:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005196:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005198:	f7fc fbcc 	bl	8001934 <HAL_GetTick>
 800519c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800519e:	e008      	b.n	80051b2 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80051a0:	f7fc fbc8 	bl	8001934 <HAL_GetTick>
 80051a4:	4602      	mov	r2, r0
 80051a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a8:	1ad3      	subs	r3, r2, r3
 80051aa:	2b02      	cmp	r3, #2
 80051ac:	d901      	bls.n	80051b2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80051ae:	2303      	movs	r3, #3
 80051b0:	e260      	b.n	8005674 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80051b2:	4b70      	ldr	r3, [pc, #448]	; (8005374 <HAL_RCC_OscConfig+0x4a4>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d0f0      	beq.n	80051a0 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80051be:	4b6d      	ldr	r3, [pc, #436]	; (8005374 <HAL_RCC_OscConfig+0x4a4>)
 80051c0:	68db      	ldr	r3, [r3, #12]
 80051c2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6a1b      	ldr	r3, [r3, #32]
 80051ca:	061b      	lsls	r3, r3, #24
 80051cc:	4969      	ldr	r1, [pc, #420]	; (8005374 <HAL_RCC_OscConfig+0x4a4>)
 80051ce:	4313      	orrs	r3, r2
 80051d0:	60cb      	str	r3, [r1, #12]
 80051d2:	e018      	b.n	8005206 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80051d4:	4b67      	ldr	r3, [pc, #412]	; (8005374 <HAL_RCC_OscConfig+0x4a4>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a66      	ldr	r2, [pc, #408]	; (8005374 <HAL_RCC_OscConfig+0x4a4>)
 80051da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051e0:	f7fc fba8 	bl	8001934 <HAL_GetTick>
 80051e4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80051e6:	e008      	b.n	80051fa <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80051e8:	f7fc fba4 	bl	8001934 <HAL_GetTick>
 80051ec:	4602      	mov	r2, r0
 80051ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f0:	1ad3      	subs	r3, r2, r3
 80051f2:	2b02      	cmp	r3, #2
 80051f4:	d901      	bls.n	80051fa <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80051f6:	2303      	movs	r3, #3
 80051f8:	e23c      	b.n	8005674 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80051fa:	4b5e      	ldr	r3, [pc, #376]	; (8005374 <HAL_RCC_OscConfig+0x4a4>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005202:	2b00      	cmp	r3, #0
 8005204:	d1f0      	bne.n	80051e8 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f003 0308 	and.w	r3, r3, #8
 800520e:	2b00      	cmp	r3, #0
 8005210:	d036      	beq.n	8005280 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	695b      	ldr	r3, [r3, #20]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d019      	beq.n	800524e <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800521a:	4b56      	ldr	r3, [pc, #344]	; (8005374 <HAL_RCC_OscConfig+0x4a4>)
 800521c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800521e:	4a55      	ldr	r2, [pc, #340]	; (8005374 <HAL_RCC_OscConfig+0x4a4>)
 8005220:	f043 0301 	orr.w	r3, r3, #1
 8005224:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005226:	f7fc fb85 	bl	8001934 <HAL_GetTick>
 800522a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800522c:	e008      	b.n	8005240 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800522e:	f7fc fb81 	bl	8001934 <HAL_GetTick>
 8005232:	4602      	mov	r2, r0
 8005234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005236:	1ad3      	subs	r3, r2, r3
 8005238:	2b02      	cmp	r3, #2
 800523a:	d901      	bls.n	8005240 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800523c:	2303      	movs	r3, #3
 800523e:	e219      	b.n	8005674 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005240:	4b4c      	ldr	r3, [pc, #304]	; (8005374 <HAL_RCC_OscConfig+0x4a4>)
 8005242:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005244:	f003 0302 	and.w	r3, r3, #2
 8005248:	2b00      	cmp	r3, #0
 800524a:	d0f0      	beq.n	800522e <HAL_RCC_OscConfig+0x35e>
 800524c:	e018      	b.n	8005280 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800524e:	4b49      	ldr	r3, [pc, #292]	; (8005374 <HAL_RCC_OscConfig+0x4a4>)
 8005250:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005252:	4a48      	ldr	r2, [pc, #288]	; (8005374 <HAL_RCC_OscConfig+0x4a4>)
 8005254:	f023 0301 	bic.w	r3, r3, #1
 8005258:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800525a:	f7fc fb6b 	bl	8001934 <HAL_GetTick>
 800525e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005260:	e008      	b.n	8005274 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005262:	f7fc fb67 	bl	8001934 <HAL_GetTick>
 8005266:	4602      	mov	r2, r0
 8005268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800526a:	1ad3      	subs	r3, r2, r3
 800526c:	2b02      	cmp	r3, #2
 800526e:	d901      	bls.n	8005274 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8005270:	2303      	movs	r3, #3
 8005272:	e1ff      	b.n	8005674 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005274:	4b3f      	ldr	r3, [pc, #252]	; (8005374 <HAL_RCC_OscConfig+0x4a4>)
 8005276:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005278:	f003 0302 	and.w	r3, r3, #2
 800527c:	2b00      	cmp	r3, #0
 800527e:	d1f0      	bne.n	8005262 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f003 0320 	and.w	r3, r3, #32
 8005288:	2b00      	cmp	r3, #0
 800528a:	d036      	beq.n	80052fa <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	699b      	ldr	r3, [r3, #24]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d019      	beq.n	80052c8 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005294:	4b37      	ldr	r3, [pc, #220]	; (8005374 <HAL_RCC_OscConfig+0x4a4>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a36      	ldr	r2, [pc, #216]	; (8005374 <HAL_RCC_OscConfig+0x4a4>)
 800529a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800529e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80052a0:	f7fc fb48 	bl	8001934 <HAL_GetTick>
 80052a4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80052a6:	e008      	b.n	80052ba <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80052a8:	f7fc fb44 	bl	8001934 <HAL_GetTick>
 80052ac:	4602      	mov	r2, r0
 80052ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b0:	1ad3      	subs	r3, r2, r3
 80052b2:	2b02      	cmp	r3, #2
 80052b4:	d901      	bls.n	80052ba <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80052b6:	2303      	movs	r3, #3
 80052b8:	e1dc      	b.n	8005674 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80052ba:	4b2e      	ldr	r3, [pc, #184]	; (8005374 <HAL_RCC_OscConfig+0x4a4>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d0f0      	beq.n	80052a8 <HAL_RCC_OscConfig+0x3d8>
 80052c6:	e018      	b.n	80052fa <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80052c8:	4b2a      	ldr	r3, [pc, #168]	; (8005374 <HAL_RCC_OscConfig+0x4a4>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a29      	ldr	r2, [pc, #164]	; (8005374 <HAL_RCC_OscConfig+0x4a4>)
 80052ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80052d2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80052d4:	f7fc fb2e 	bl	8001934 <HAL_GetTick>
 80052d8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80052da:	e008      	b.n	80052ee <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80052dc:	f7fc fb2a 	bl	8001934 <HAL_GetTick>
 80052e0:	4602      	mov	r2, r0
 80052e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e4:	1ad3      	subs	r3, r2, r3
 80052e6:	2b02      	cmp	r3, #2
 80052e8:	d901      	bls.n	80052ee <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80052ea:	2303      	movs	r3, #3
 80052ec:	e1c2      	b.n	8005674 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80052ee:	4b21      	ldr	r3, [pc, #132]	; (8005374 <HAL_RCC_OscConfig+0x4a4>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d1f0      	bne.n	80052dc <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f003 0304 	and.w	r3, r3, #4
 8005302:	2b00      	cmp	r3, #0
 8005304:	f000 8086 	beq.w	8005414 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005308:	4b1b      	ldr	r3, [pc, #108]	; (8005378 <HAL_RCC_OscConfig+0x4a8>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a1a      	ldr	r2, [pc, #104]	; (8005378 <HAL_RCC_OscConfig+0x4a8>)
 800530e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005312:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005314:	f7fc fb0e 	bl	8001934 <HAL_GetTick>
 8005318:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800531a:	e008      	b.n	800532e <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800531c:	f7fc fb0a 	bl	8001934 <HAL_GetTick>
 8005320:	4602      	mov	r2, r0
 8005322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005324:	1ad3      	subs	r3, r2, r3
 8005326:	2b64      	cmp	r3, #100	; 0x64
 8005328:	d901      	bls.n	800532e <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800532a:	2303      	movs	r3, #3
 800532c:	e1a2      	b.n	8005674 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800532e:	4b12      	ldr	r3, [pc, #72]	; (8005378 <HAL_RCC_OscConfig+0x4a8>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005336:	2b00      	cmp	r3, #0
 8005338:	d0f0      	beq.n	800531c <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	689b      	ldr	r3, [r3, #8]
 800533e:	2b01      	cmp	r3, #1
 8005340:	d106      	bne.n	8005350 <HAL_RCC_OscConfig+0x480>
 8005342:	4b0c      	ldr	r3, [pc, #48]	; (8005374 <HAL_RCC_OscConfig+0x4a4>)
 8005344:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005346:	4a0b      	ldr	r2, [pc, #44]	; (8005374 <HAL_RCC_OscConfig+0x4a4>)
 8005348:	f043 0301 	orr.w	r3, r3, #1
 800534c:	6713      	str	r3, [r2, #112]	; 0x70
 800534e:	e032      	b.n	80053b6 <HAL_RCC_OscConfig+0x4e6>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	689b      	ldr	r3, [r3, #8]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d111      	bne.n	800537c <HAL_RCC_OscConfig+0x4ac>
 8005358:	4b06      	ldr	r3, [pc, #24]	; (8005374 <HAL_RCC_OscConfig+0x4a4>)
 800535a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800535c:	4a05      	ldr	r2, [pc, #20]	; (8005374 <HAL_RCC_OscConfig+0x4a4>)
 800535e:	f023 0301 	bic.w	r3, r3, #1
 8005362:	6713      	str	r3, [r2, #112]	; 0x70
 8005364:	4b03      	ldr	r3, [pc, #12]	; (8005374 <HAL_RCC_OscConfig+0x4a4>)
 8005366:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005368:	4a02      	ldr	r2, [pc, #8]	; (8005374 <HAL_RCC_OscConfig+0x4a4>)
 800536a:	f023 0304 	bic.w	r3, r3, #4
 800536e:	6713      	str	r3, [r2, #112]	; 0x70
 8005370:	e021      	b.n	80053b6 <HAL_RCC_OscConfig+0x4e6>
 8005372:	bf00      	nop
 8005374:	58024400 	.word	0x58024400
 8005378:	58024800 	.word	0x58024800
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	689b      	ldr	r3, [r3, #8]
 8005380:	2b05      	cmp	r3, #5
 8005382:	d10c      	bne.n	800539e <HAL_RCC_OscConfig+0x4ce>
 8005384:	4b83      	ldr	r3, [pc, #524]	; (8005594 <HAL_RCC_OscConfig+0x6c4>)
 8005386:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005388:	4a82      	ldr	r2, [pc, #520]	; (8005594 <HAL_RCC_OscConfig+0x6c4>)
 800538a:	f043 0304 	orr.w	r3, r3, #4
 800538e:	6713      	str	r3, [r2, #112]	; 0x70
 8005390:	4b80      	ldr	r3, [pc, #512]	; (8005594 <HAL_RCC_OscConfig+0x6c4>)
 8005392:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005394:	4a7f      	ldr	r2, [pc, #508]	; (8005594 <HAL_RCC_OscConfig+0x6c4>)
 8005396:	f043 0301 	orr.w	r3, r3, #1
 800539a:	6713      	str	r3, [r2, #112]	; 0x70
 800539c:	e00b      	b.n	80053b6 <HAL_RCC_OscConfig+0x4e6>
 800539e:	4b7d      	ldr	r3, [pc, #500]	; (8005594 <HAL_RCC_OscConfig+0x6c4>)
 80053a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053a2:	4a7c      	ldr	r2, [pc, #496]	; (8005594 <HAL_RCC_OscConfig+0x6c4>)
 80053a4:	f023 0301 	bic.w	r3, r3, #1
 80053a8:	6713      	str	r3, [r2, #112]	; 0x70
 80053aa:	4b7a      	ldr	r3, [pc, #488]	; (8005594 <HAL_RCC_OscConfig+0x6c4>)
 80053ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053ae:	4a79      	ldr	r2, [pc, #484]	; (8005594 <HAL_RCC_OscConfig+0x6c4>)
 80053b0:	f023 0304 	bic.w	r3, r3, #4
 80053b4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	689b      	ldr	r3, [r3, #8]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d015      	beq.n	80053ea <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053be:	f7fc fab9 	bl	8001934 <HAL_GetTick>
 80053c2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80053c4:	e00a      	b.n	80053dc <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053c6:	f7fc fab5 	bl	8001934 <HAL_GetTick>
 80053ca:	4602      	mov	r2, r0
 80053cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ce:	1ad3      	subs	r3, r2, r3
 80053d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d901      	bls.n	80053dc <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80053d8:	2303      	movs	r3, #3
 80053da:	e14b      	b.n	8005674 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80053dc:	4b6d      	ldr	r3, [pc, #436]	; (8005594 <HAL_RCC_OscConfig+0x6c4>)
 80053de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053e0:	f003 0302 	and.w	r3, r3, #2
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d0ee      	beq.n	80053c6 <HAL_RCC_OscConfig+0x4f6>
 80053e8:	e014      	b.n	8005414 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053ea:	f7fc faa3 	bl	8001934 <HAL_GetTick>
 80053ee:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80053f0:	e00a      	b.n	8005408 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053f2:	f7fc fa9f 	bl	8001934 <HAL_GetTick>
 80053f6:	4602      	mov	r2, r0
 80053f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053fa:	1ad3      	subs	r3, r2, r3
 80053fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005400:	4293      	cmp	r3, r2
 8005402:	d901      	bls.n	8005408 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8005404:	2303      	movs	r3, #3
 8005406:	e135      	b.n	8005674 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005408:	4b62      	ldr	r3, [pc, #392]	; (8005594 <HAL_RCC_OscConfig+0x6c4>)
 800540a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800540c:	f003 0302 	and.w	r3, r3, #2
 8005410:	2b00      	cmp	r3, #0
 8005412:	d1ee      	bne.n	80053f2 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005418:	2b00      	cmp	r3, #0
 800541a:	f000 812a 	beq.w	8005672 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800541e:	4b5d      	ldr	r3, [pc, #372]	; (8005594 <HAL_RCC_OscConfig+0x6c4>)
 8005420:	691b      	ldr	r3, [r3, #16]
 8005422:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005426:	2b18      	cmp	r3, #24
 8005428:	f000 80ba 	beq.w	80055a0 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005430:	2b02      	cmp	r3, #2
 8005432:	f040 8095 	bne.w	8005560 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005436:	4b57      	ldr	r3, [pc, #348]	; (8005594 <HAL_RCC_OscConfig+0x6c4>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a56      	ldr	r2, [pc, #344]	; (8005594 <HAL_RCC_OscConfig+0x6c4>)
 800543c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005440:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005442:	f7fc fa77 	bl	8001934 <HAL_GetTick>
 8005446:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005448:	e008      	b.n	800545c <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800544a:	f7fc fa73 	bl	8001934 <HAL_GetTick>
 800544e:	4602      	mov	r2, r0
 8005450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005452:	1ad3      	subs	r3, r2, r3
 8005454:	2b02      	cmp	r3, #2
 8005456:	d901      	bls.n	800545c <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8005458:	2303      	movs	r3, #3
 800545a:	e10b      	b.n	8005674 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800545c:	4b4d      	ldr	r3, [pc, #308]	; (8005594 <HAL_RCC_OscConfig+0x6c4>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005464:	2b00      	cmp	r3, #0
 8005466:	d1f0      	bne.n	800544a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005468:	4b4a      	ldr	r3, [pc, #296]	; (8005594 <HAL_RCC_OscConfig+0x6c4>)
 800546a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800546c:	4b4a      	ldr	r3, [pc, #296]	; (8005598 <HAL_RCC_OscConfig+0x6c8>)
 800546e:	4013      	ands	r3, r2
 8005470:	687a      	ldr	r2, [r7, #4]
 8005472:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005474:	687a      	ldr	r2, [r7, #4]
 8005476:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005478:	0112      	lsls	r2, r2, #4
 800547a:	430a      	orrs	r2, r1
 800547c:	4945      	ldr	r1, [pc, #276]	; (8005594 <HAL_RCC_OscConfig+0x6c4>)
 800547e:	4313      	orrs	r3, r2
 8005480:	628b      	str	r3, [r1, #40]	; 0x28
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005486:	3b01      	subs	r3, #1
 8005488:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005490:	3b01      	subs	r3, #1
 8005492:	025b      	lsls	r3, r3, #9
 8005494:	b29b      	uxth	r3, r3
 8005496:	431a      	orrs	r2, r3
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800549c:	3b01      	subs	r3, #1
 800549e:	041b      	lsls	r3, r3, #16
 80054a0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80054a4:	431a      	orrs	r2, r3
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054aa:	3b01      	subs	r3, #1
 80054ac:	061b      	lsls	r3, r3, #24
 80054ae:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80054b2:	4938      	ldr	r1, [pc, #224]	; (8005594 <HAL_RCC_OscConfig+0x6c4>)
 80054b4:	4313      	orrs	r3, r2
 80054b6:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80054b8:	4b36      	ldr	r3, [pc, #216]	; (8005594 <HAL_RCC_OscConfig+0x6c4>)
 80054ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054bc:	4a35      	ldr	r2, [pc, #212]	; (8005594 <HAL_RCC_OscConfig+0x6c4>)
 80054be:	f023 0301 	bic.w	r3, r3, #1
 80054c2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80054c4:	4b33      	ldr	r3, [pc, #204]	; (8005594 <HAL_RCC_OscConfig+0x6c4>)
 80054c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054c8:	4b34      	ldr	r3, [pc, #208]	; (800559c <HAL_RCC_OscConfig+0x6cc>)
 80054ca:	4013      	ands	r3, r2
 80054cc:	687a      	ldr	r2, [r7, #4]
 80054ce:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80054d0:	00d2      	lsls	r2, r2, #3
 80054d2:	4930      	ldr	r1, [pc, #192]	; (8005594 <HAL_RCC_OscConfig+0x6c4>)
 80054d4:	4313      	orrs	r3, r2
 80054d6:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80054d8:	4b2e      	ldr	r3, [pc, #184]	; (8005594 <HAL_RCC_OscConfig+0x6c4>)
 80054da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054dc:	f023 020c 	bic.w	r2, r3, #12
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054e4:	492b      	ldr	r1, [pc, #172]	; (8005594 <HAL_RCC_OscConfig+0x6c4>)
 80054e6:	4313      	orrs	r3, r2
 80054e8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80054ea:	4b2a      	ldr	r3, [pc, #168]	; (8005594 <HAL_RCC_OscConfig+0x6c4>)
 80054ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ee:	f023 0202 	bic.w	r2, r3, #2
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054f6:	4927      	ldr	r1, [pc, #156]	; (8005594 <HAL_RCC_OscConfig+0x6c4>)
 80054f8:	4313      	orrs	r3, r2
 80054fa:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80054fc:	4b25      	ldr	r3, [pc, #148]	; (8005594 <HAL_RCC_OscConfig+0x6c4>)
 80054fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005500:	4a24      	ldr	r2, [pc, #144]	; (8005594 <HAL_RCC_OscConfig+0x6c4>)
 8005502:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005506:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005508:	4b22      	ldr	r3, [pc, #136]	; (8005594 <HAL_RCC_OscConfig+0x6c4>)
 800550a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800550c:	4a21      	ldr	r2, [pc, #132]	; (8005594 <HAL_RCC_OscConfig+0x6c4>)
 800550e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005512:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005514:	4b1f      	ldr	r3, [pc, #124]	; (8005594 <HAL_RCC_OscConfig+0x6c4>)
 8005516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005518:	4a1e      	ldr	r2, [pc, #120]	; (8005594 <HAL_RCC_OscConfig+0x6c4>)
 800551a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800551e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005520:	4b1c      	ldr	r3, [pc, #112]	; (8005594 <HAL_RCC_OscConfig+0x6c4>)
 8005522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005524:	4a1b      	ldr	r2, [pc, #108]	; (8005594 <HAL_RCC_OscConfig+0x6c4>)
 8005526:	f043 0301 	orr.w	r3, r3, #1
 800552a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800552c:	4b19      	ldr	r3, [pc, #100]	; (8005594 <HAL_RCC_OscConfig+0x6c4>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a18      	ldr	r2, [pc, #96]	; (8005594 <HAL_RCC_OscConfig+0x6c4>)
 8005532:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005536:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005538:	f7fc f9fc 	bl	8001934 <HAL_GetTick>
 800553c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800553e:	e008      	b.n	8005552 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005540:	f7fc f9f8 	bl	8001934 <HAL_GetTick>
 8005544:	4602      	mov	r2, r0
 8005546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005548:	1ad3      	subs	r3, r2, r3
 800554a:	2b02      	cmp	r3, #2
 800554c:	d901      	bls.n	8005552 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800554e:	2303      	movs	r3, #3
 8005550:	e090      	b.n	8005674 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005552:	4b10      	ldr	r3, [pc, #64]	; (8005594 <HAL_RCC_OscConfig+0x6c4>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800555a:	2b00      	cmp	r3, #0
 800555c:	d0f0      	beq.n	8005540 <HAL_RCC_OscConfig+0x670>
 800555e:	e088      	b.n	8005672 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005560:	4b0c      	ldr	r3, [pc, #48]	; (8005594 <HAL_RCC_OscConfig+0x6c4>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a0b      	ldr	r2, [pc, #44]	; (8005594 <HAL_RCC_OscConfig+0x6c4>)
 8005566:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800556a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800556c:	f7fc f9e2 	bl	8001934 <HAL_GetTick>
 8005570:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005572:	e008      	b.n	8005586 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005574:	f7fc f9de 	bl	8001934 <HAL_GetTick>
 8005578:	4602      	mov	r2, r0
 800557a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800557c:	1ad3      	subs	r3, r2, r3
 800557e:	2b02      	cmp	r3, #2
 8005580:	d901      	bls.n	8005586 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8005582:	2303      	movs	r3, #3
 8005584:	e076      	b.n	8005674 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005586:	4b03      	ldr	r3, [pc, #12]	; (8005594 <HAL_RCC_OscConfig+0x6c4>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800558e:	2b00      	cmp	r3, #0
 8005590:	d1f0      	bne.n	8005574 <HAL_RCC_OscConfig+0x6a4>
 8005592:	e06e      	b.n	8005672 <HAL_RCC_OscConfig+0x7a2>
 8005594:	58024400 	.word	0x58024400
 8005598:	fffffc0c 	.word	0xfffffc0c
 800559c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80055a0:	4b36      	ldr	r3, [pc, #216]	; (800567c <HAL_RCC_OscConfig+0x7ac>)
 80055a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055a4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80055a6:	4b35      	ldr	r3, [pc, #212]	; (800567c <HAL_RCC_OscConfig+0x7ac>)
 80055a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055aa:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	d031      	beq.n	8005618 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055b4:	693b      	ldr	r3, [r7, #16]
 80055b6:	f003 0203 	and.w	r2, r3, #3
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80055be:	429a      	cmp	r2, r3
 80055c0:	d12a      	bne.n	8005618 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80055c2:	693b      	ldr	r3, [r7, #16]
 80055c4:	091b      	lsrs	r3, r3, #4
 80055c6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055ce:	429a      	cmp	r2, r3
 80055d0:	d122      	bne.n	8005618 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055dc:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80055de:	429a      	cmp	r2, r3
 80055e0:	d11a      	bne.n	8005618 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	0a5b      	lsrs	r3, r3, #9
 80055e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055ee:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80055f0:	429a      	cmp	r2, r3
 80055f2:	d111      	bne.n	8005618 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	0c1b      	lsrs	r3, r3, #16
 80055f8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005600:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005602:	429a      	cmp	r2, r3
 8005604:	d108      	bne.n	8005618 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	0e1b      	lsrs	r3, r3, #24
 800560a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005612:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005614:	429a      	cmp	r2, r3
 8005616:	d001      	beq.n	800561c <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8005618:	2301      	movs	r3, #1
 800561a:	e02b      	b.n	8005674 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800561c:	4b17      	ldr	r3, [pc, #92]	; (800567c <HAL_RCC_OscConfig+0x7ac>)
 800561e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005620:	08db      	lsrs	r3, r3, #3
 8005622:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005626:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800562c:	693a      	ldr	r2, [r7, #16]
 800562e:	429a      	cmp	r2, r3
 8005630:	d01f      	beq.n	8005672 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8005632:	4b12      	ldr	r3, [pc, #72]	; (800567c <HAL_RCC_OscConfig+0x7ac>)
 8005634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005636:	4a11      	ldr	r2, [pc, #68]	; (800567c <HAL_RCC_OscConfig+0x7ac>)
 8005638:	f023 0301 	bic.w	r3, r3, #1
 800563c:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800563e:	f7fc f979 	bl	8001934 <HAL_GetTick>
 8005642:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005644:	bf00      	nop
 8005646:	f7fc f975 	bl	8001934 <HAL_GetTick>
 800564a:	4602      	mov	r2, r0
 800564c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800564e:	4293      	cmp	r3, r2
 8005650:	d0f9      	beq.n	8005646 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005652:	4b0a      	ldr	r3, [pc, #40]	; (800567c <HAL_RCC_OscConfig+0x7ac>)
 8005654:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005656:	4b0a      	ldr	r3, [pc, #40]	; (8005680 <HAL_RCC_OscConfig+0x7b0>)
 8005658:	4013      	ands	r3, r2
 800565a:	687a      	ldr	r2, [r7, #4]
 800565c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800565e:	00d2      	lsls	r2, r2, #3
 8005660:	4906      	ldr	r1, [pc, #24]	; (800567c <HAL_RCC_OscConfig+0x7ac>)
 8005662:	4313      	orrs	r3, r2
 8005664:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005666:	4b05      	ldr	r3, [pc, #20]	; (800567c <HAL_RCC_OscConfig+0x7ac>)
 8005668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800566a:	4a04      	ldr	r2, [pc, #16]	; (800567c <HAL_RCC_OscConfig+0x7ac>)
 800566c:	f043 0301 	orr.w	r3, r3, #1
 8005670:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8005672:	2300      	movs	r3, #0
}
 8005674:	4618      	mov	r0, r3
 8005676:	3730      	adds	r7, #48	; 0x30
 8005678:	46bd      	mov	sp, r7
 800567a:	bd80      	pop	{r7, pc}
 800567c:	58024400 	.word	0x58024400
 8005680:	ffff0007 	.word	0xffff0007

08005684 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b086      	sub	sp, #24
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
 800568c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d101      	bne.n	8005698 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005694:	2301      	movs	r3, #1
 8005696:	e19c      	b.n	80059d2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005698:	4b8a      	ldr	r3, [pc, #552]	; (80058c4 <HAL_RCC_ClockConfig+0x240>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f003 030f 	and.w	r3, r3, #15
 80056a0:	683a      	ldr	r2, [r7, #0]
 80056a2:	429a      	cmp	r2, r3
 80056a4:	d910      	bls.n	80056c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056a6:	4b87      	ldr	r3, [pc, #540]	; (80058c4 <HAL_RCC_ClockConfig+0x240>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f023 020f 	bic.w	r2, r3, #15
 80056ae:	4985      	ldr	r1, [pc, #532]	; (80058c4 <HAL_RCC_ClockConfig+0x240>)
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	4313      	orrs	r3, r2
 80056b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80056b6:	4b83      	ldr	r3, [pc, #524]	; (80058c4 <HAL_RCC_ClockConfig+0x240>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f003 030f 	and.w	r3, r3, #15
 80056be:	683a      	ldr	r2, [r7, #0]
 80056c0:	429a      	cmp	r2, r3
 80056c2:	d001      	beq.n	80056c8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80056c4:	2301      	movs	r3, #1
 80056c6:	e184      	b.n	80059d2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f003 0304 	and.w	r3, r3, #4
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d010      	beq.n	80056f6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	691a      	ldr	r2, [r3, #16]
 80056d8:	4b7b      	ldr	r3, [pc, #492]	; (80058c8 <HAL_RCC_ClockConfig+0x244>)
 80056da:	699b      	ldr	r3, [r3, #24]
 80056dc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80056e0:	429a      	cmp	r2, r3
 80056e2:	d908      	bls.n	80056f6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80056e4:	4b78      	ldr	r3, [pc, #480]	; (80058c8 <HAL_RCC_ClockConfig+0x244>)
 80056e6:	699b      	ldr	r3, [r3, #24]
 80056e8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	691b      	ldr	r3, [r3, #16]
 80056f0:	4975      	ldr	r1, [pc, #468]	; (80058c8 <HAL_RCC_ClockConfig+0x244>)
 80056f2:	4313      	orrs	r3, r2
 80056f4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f003 0308 	and.w	r3, r3, #8
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d010      	beq.n	8005724 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	695a      	ldr	r2, [r3, #20]
 8005706:	4b70      	ldr	r3, [pc, #448]	; (80058c8 <HAL_RCC_ClockConfig+0x244>)
 8005708:	69db      	ldr	r3, [r3, #28]
 800570a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800570e:	429a      	cmp	r2, r3
 8005710:	d908      	bls.n	8005724 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005712:	4b6d      	ldr	r3, [pc, #436]	; (80058c8 <HAL_RCC_ClockConfig+0x244>)
 8005714:	69db      	ldr	r3, [r3, #28]
 8005716:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	695b      	ldr	r3, [r3, #20]
 800571e:	496a      	ldr	r1, [pc, #424]	; (80058c8 <HAL_RCC_ClockConfig+0x244>)
 8005720:	4313      	orrs	r3, r2
 8005722:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f003 0310 	and.w	r3, r3, #16
 800572c:	2b00      	cmp	r3, #0
 800572e:	d010      	beq.n	8005752 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	699a      	ldr	r2, [r3, #24]
 8005734:	4b64      	ldr	r3, [pc, #400]	; (80058c8 <HAL_RCC_ClockConfig+0x244>)
 8005736:	69db      	ldr	r3, [r3, #28]
 8005738:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800573c:	429a      	cmp	r2, r3
 800573e:	d908      	bls.n	8005752 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005740:	4b61      	ldr	r3, [pc, #388]	; (80058c8 <HAL_RCC_ClockConfig+0x244>)
 8005742:	69db      	ldr	r3, [r3, #28]
 8005744:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	699b      	ldr	r3, [r3, #24]
 800574c:	495e      	ldr	r1, [pc, #376]	; (80058c8 <HAL_RCC_ClockConfig+0x244>)
 800574e:	4313      	orrs	r3, r2
 8005750:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f003 0320 	and.w	r3, r3, #32
 800575a:	2b00      	cmp	r3, #0
 800575c:	d010      	beq.n	8005780 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	69da      	ldr	r2, [r3, #28]
 8005762:	4b59      	ldr	r3, [pc, #356]	; (80058c8 <HAL_RCC_ClockConfig+0x244>)
 8005764:	6a1b      	ldr	r3, [r3, #32]
 8005766:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800576a:	429a      	cmp	r2, r3
 800576c:	d908      	bls.n	8005780 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800576e:	4b56      	ldr	r3, [pc, #344]	; (80058c8 <HAL_RCC_ClockConfig+0x244>)
 8005770:	6a1b      	ldr	r3, [r3, #32]
 8005772:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	69db      	ldr	r3, [r3, #28]
 800577a:	4953      	ldr	r1, [pc, #332]	; (80058c8 <HAL_RCC_ClockConfig+0x244>)
 800577c:	4313      	orrs	r3, r2
 800577e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f003 0302 	and.w	r3, r3, #2
 8005788:	2b00      	cmp	r3, #0
 800578a:	d010      	beq.n	80057ae <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	68da      	ldr	r2, [r3, #12]
 8005790:	4b4d      	ldr	r3, [pc, #308]	; (80058c8 <HAL_RCC_ClockConfig+0x244>)
 8005792:	699b      	ldr	r3, [r3, #24]
 8005794:	f003 030f 	and.w	r3, r3, #15
 8005798:	429a      	cmp	r2, r3
 800579a:	d908      	bls.n	80057ae <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800579c:	4b4a      	ldr	r3, [pc, #296]	; (80058c8 <HAL_RCC_ClockConfig+0x244>)
 800579e:	699b      	ldr	r3, [r3, #24]
 80057a0:	f023 020f 	bic.w	r2, r3, #15
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	68db      	ldr	r3, [r3, #12]
 80057a8:	4947      	ldr	r1, [pc, #284]	; (80058c8 <HAL_RCC_ClockConfig+0x244>)
 80057aa:	4313      	orrs	r3, r2
 80057ac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f003 0301 	and.w	r3, r3, #1
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d055      	beq.n	8005866 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80057ba:	4b43      	ldr	r3, [pc, #268]	; (80058c8 <HAL_RCC_ClockConfig+0x244>)
 80057bc:	699b      	ldr	r3, [r3, #24]
 80057be:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	689b      	ldr	r3, [r3, #8]
 80057c6:	4940      	ldr	r1, [pc, #256]	; (80058c8 <HAL_RCC_ClockConfig+0x244>)
 80057c8:	4313      	orrs	r3, r2
 80057ca:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	2b02      	cmp	r3, #2
 80057d2:	d107      	bne.n	80057e4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80057d4:	4b3c      	ldr	r3, [pc, #240]	; (80058c8 <HAL_RCC_ClockConfig+0x244>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d121      	bne.n	8005824 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80057e0:	2301      	movs	r3, #1
 80057e2:	e0f6      	b.n	80059d2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	2b03      	cmp	r3, #3
 80057ea:	d107      	bne.n	80057fc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80057ec:	4b36      	ldr	r3, [pc, #216]	; (80058c8 <HAL_RCC_ClockConfig+0x244>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d115      	bne.n	8005824 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80057f8:	2301      	movs	r3, #1
 80057fa:	e0ea      	b.n	80059d2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	2b01      	cmp	r3, #1
 8005802:	d107      	bne.n	8005814 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005804:	4b30      	ldr	r3, [pc, #192]	; (80058c8 <HAL_RCC_ClockConfig+0x244>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800580c:	2b00      	cmp	r3, #0
 800580e:	d109      	bne.n	8005824 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005810:	2301      	movs	r3, #1
 8005812:	e0de      	b.n	80059d2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005814:	4b2c      	ldr	r3, [pc, #176]	; (80058c8 <HAL_RCC_ClockConfig+0x244>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f003 0304 	and.w	r3, r3, #4
 800581c:	2b00      	cmp	r3, #0
 800581e:	d101      	bne.n	8005824 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005820:	2301      	movs	r3, #1
 8005822:	e0d6      	b.n	80059d2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005824:	4b28      	ldr	r3, [pc, #160]	; (80058c8 <HAL_RCC_ClockConfig+0x244>)
 8005826:	691b      	ldr	r3, [r3, #16]
 8005828:	f023 0207 	bic.w	r2, r3, #7
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	4925      	ldr	r1, [pc, #148]	; (80058c8 <HAL_RCC_ClockConfig+0x244>)
 8005832:	4313      	orrs	r3, r2
 8005834:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005836:	f7fc f87d 	bl	8001934 <HAL_GetTick>
 800583a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800583c:	e00a      	b.n	8005854 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800583e:	f7fc f879 	bl	8001934 <HAL_GetTick>
 8005842:	4602      	mov	r2, r0
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	1ad3      	subs	r3, r2, r3
 8005848:	f241 3288 	movw	r2, #5000	; 0x1388
 800584c:	4293      	cmp	r3, r2
 800584e:	d901      	bls.n	8005854 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005850:	2303      	movs	r3, #3
 8005852:	e0be      	b.n	80059d2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005854:	4b1c      	ldr	r3, [pc, #112]	; (80058c8 <HAL_RCC_ClockConfig+0x244>)
 8005856:	691b      	ldr	r3, [r3, #16]
 8005858:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	00db      	lsls	r3, r3, #3
 8005862:	429a      	cmp	r2, r3
 8005864:	d1eb      	bne.n	800583e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f003 0302 	and.w	r3, r3, #2
 800586e:	2b00      	cmp	r3, #0
 8005870:	d010      	beq.n	8005894 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	68da      	ldr	r2, [r3, #12]
 8005876:	4b14      	ldr	r3, [pc, #80]	; (80058c8 <HAL_RCC_ClockConfig+0x244>)
 8005878:	699b      	ldr	r3, [r3, #24]
 800587a:	f003 030f 	and.w	r3, r3, #15
 800587e:	429a      	cmp	r2, r3
 8005880:	d208      	bcs.n	8005894 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005882:	4b11      	ldr	r3, [pc, #68]	; (80058c8 <HAL_RCC_ClockConfig+0x244>)
 8005884:	699b      	ldr	r3, [r3, #24]
 8005886:	f023 020f 	bic.w	r2, r3, #15
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	68db      	ldr	r3, [r3, #12]
 800588e:	490e      	ldr	r1, [pc, #56]	; (80058c8 <HAL_RCC_ClockConfig+0x244>)
 8005890:	4313      	orrs	r3, r2
 8005892:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005894:	4b0b      	ldr	r3, [pc, #44]	; (80058c4 <HAL_RCC_ClockConfig+0x240>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f003 030f 	and.w	r3, r3, #15
 800589c:	683a      	ldr	r2, [r7, #0]
 800589e:	429a      	cmp	r2, r3
 80058a0:	d214      	bcs.n	80058cc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058a2:	4b08      	ldr	r3, [pc, #32]	; (80058c4 <HAL_RCC_ClockConfig+0x240>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f023 020f 	bic.w	r2, r3, #15
 80058aa:	4906      	ldr	r1, [pc, #24]	; (80058c4 <HAL_RCC_ClockConfig+0x240>)
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	4313      	orrs	r3, r2
 80058b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80058b2:	4b04      	ldr	r3, [pc, #16]	; (80058c4 <HAL_RCC_ClockConfig+0x240>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f003 030f 	and.w	r3, r3, #15
 80058ba:	683a      	ldr	r2, [r7, #0]
 80058bc:	429a      	cmp	r2, r3
 80058be:	d005      	beq.n	80058cc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80058c0:	2301      	movs	r3, #1
 80058c2:	e086      	b.n	80059d2 <HAL_RCC_ClockConfig+0x34e>
 80058c4:	52002000 	.word	0x52002000
 80058c8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f003 0304 	and.w	r3, r3, #4
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d010      	beq.n	80058fa <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	691a      	ldr	r2, [r3, #16]
 80058dc:	4b3f      	ldr	r3, [pc, #252]	; (80059dc <HAL_RCC_ClockConfig+0x358>)
 80058de:	699b      	ldr	r3, [r3, #24]
 80058e0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80058e4:	429a      	cmp	r2, r3
 80058e6:	d208      	bcs.n	80058fa <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80058e8:	4b3c      	ldr	r3, [pc, #240]	; (80059dc <HAL_RCC_ClockConfig+0x358>)
 80058ea:	699b      	ldr	r3, [r3, #24]
 80058ec:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	691b      	ldr	r3, [r3, #16]
 80058f4:	4939      	ldr	r1, [pc, #228]	; (80059dc <HAL_RCC_ClockConfig+0x358>)
 80058f6:	4313      	orrs	r3, r2
 80058f8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f003 0308 	and.w	r3, r3, #8
 8005902:	2b00      	cmp	r3, #0
 8005904:	d010      	beq.n	8005928 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	695a      	ldr	r2, [r3, #20]
 800590a:	4b34      	ldr	r3, [pc, #208]	; (80059dc <HAL_RCC_ClockConfig+0x358>)
 800590c:	69db      	ldr	r3, [r3, #28]
 800590e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005912:	429a      	cmp	r2, r3
 8005914:	d208      	bcs.n	8005928 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005916:	4b31      	ldr	r3, [pc, #196]	; (80059dc <HAL_RCC_ClockConfig+0x358>)
 8005918:	69db      	ldr	r3, [r3, #28]
 800591a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	695b      	ldr	r3, [r3, #20]
 8005922:	492e      	ldr	r1, [pc, #184]	; (80059dc <HAL_RCC_ClockConfig+0x358>)
 8005924:	4313      	orrs	r3, r2
 8005926:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f003 0310 	and.w	r3, r3, #16
 8005930:	2b00      	cmp	r3, #0
 8005932:	d010      	beq.n	8005956 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	699a      	ldr	r2, [r3, #24]
 8005938:	4b28      	ldr	r3, [pc, #160]	; (80059dc <HAL_RCC_ClockConfig+0x358>)
 800593a:	69db      	ldr	r3, [r3, #28]
 800593c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005940:	429a      	cmp	r2, r3
 8005942:	d208      	bcs.n	8005956 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005944:	4b25      	ldr	r3, [pc, #148]	; (80059dc <HAL_RCC_ClockConfig+0x358>)
 8005946:	69db      	ldr	r3, [r3, #28]
 8005948:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	699b      	ldr	r3, [r3, #24]
 8005950:	4922      	ldr	r1, [pc, #136]	; (80059dc <HAL_RCC_ClockConfig+0x358>)
 8005952:	4313      	orrs	r3, r2
 8005954:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f003 0320 	and.w	r3, r3, #32
 800595e:	2b00      	cmp	r3, #0
 8005960:	d010      	beq.n	8005984 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	69da      	ldr	r2, [r3, #28]
 8005966:	4b1d      	ldr	r3, [pc, #116]	; (80059dc <HAL_RCC_ClockConfig+0x358>)
 8005968:	6a1b      	ldr	r3, [r3, #32]
 800596a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800596e:	429a      	cmp	r2, r3
 8005970:	d208      	bcs.n	8005984 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005972:	4b1a      	ldr	r3, [pc, #104]	; (80059dc <HAL_RCC_ClockConfig+0x358>)
 8005974:	6a1b      	ldr	r3, [r3, #32]
 8005976:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	69db      	ldr	r3, [r3, #28]
 800597e:	4917      	ldr	r1, [pc, #92]	; (80059dc <HAL_RCC_ClockConfig+0x358>)
 8005980:	4313      	orrs	r3, r2
 8005982:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005984:	f000 f834 	bl	80059f0 <HAL_RCC_GetSysClockFreq>
 8005988:	4602      	mov	r2, r0
 800598a:	4b14      	ldr	r3, [pc, #80]	; (80059dc <HAL_RCC_ClockConfig+0x358>)
 800598c:	699b      	ldr	r3, [r3, #24]
 800598e:	0a1b      	lsrs	r3, r3, #8
 8005990:	f003 030f 	and.w	r3, r3, #15
 8005994:	4912      	ldr	r1, [pc, #72]	; (80059e0 <HAL_RCC_ClockConfig+0x35c>)
 8005996:	5ccb      	ldrb	r3, [r1, r3]
 8005998:	f003 031f 	and.w	r3, r3, #31
 800599c:	fa22 f303 	lsr.w	r3, r2, r3
 80059a0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80059a2:	4b0e      	ldr	r3, [pc, #56]	; (80059dc <HAL_RCC_ClockConfig+0x358>)
 80059a4:	699b      	ldr	r3, [r3, #24]
 80059a6:	f003 030f 	and.w	r3, r3, #15
 80059aa:	4a0d      	ldr	r2, [pc, #52]	; (80059e0 <HAL_RCC_ClockConfig+0x35c>)
 80059ac:	5cd3      	ldrb	r3, [r2, r3]
 80059ae:	f003 031f 	and.w	r3, r3, #31
 80059b2:	693a      	ldr	r2, [r7, #16]
 80059b4:	fa22 f303 	lsr.w	r3, r2, r3
 80059b8:	4a0a      	ldr	r2, [pc, #40]	; (80059e4 <HAL_RCC_ClockConfig+0x360>)
 80059ba:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80059bc:	4a0a      	ldr	r2, [pc, #40]	; (80059e8 <HAL_RCC_ClockConfig+0x364>)
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80059c2:	4b0a      	ldr	r3, [pc, #40]	; (80059ec <HAL_RCC_ClockConfig+0x368>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4618      	mov	r0, r3
 80059c8:	f7fb ff6a 	bl	80018a0 <HAL_InitTick>
 80059cc:	4603      	mov	r3, r0
 80059ce:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80059d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	3718      	adds	r7, #24
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}
 80059da:	bf00      	nop
 80059dc:	58024400 	.word	0x58024400
 80059e0:	0800b030 	.word	0x0800b030
 80059e4:	24000004 	.word	0x24000004
 80059e8:	24000000 	.word	0x24000000
 80059ec:	24000008 	.word	0x24000008

080059f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80059f0:	b480      	push	{r7}
 80059f2:	b089      	sub	sp, #36	; 0x24
 80059f4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80059f6:	4bb3      	ldr	r3, [pc, #716]	; (8005cc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059f8:	691b      	ldr	r3, [r3, #16]
 80059fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80059fe:	2b18      	cmp	r3, #24
 8005a00:	f200 8155 	bhi.w	8005cae <HAL_RCC_GetSysClockFreq+0x2be>
 8005a04:	a201      	add	r2, pc, #4	; (adr r2, 8005a0c <HAL_RCC_GetSysClockFreq+0x1c>)
 8005a06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a0a:	bf00      	nop
 8005a0c:	08005a71 	.word	0x08005a71
 8005a10:	08005caf 	.word	0x08005caf
 8005a14:	08005caf 	.word	0x08005caf
 8005a18:	08005caf 	.word	0x08005caf
 8005a1c:	08005caf 	.word	0x08005caf
 8005a20:	08005caf 	.word	0x08005caf
 8005a24:	08005caf 	.word	0x08005caf
 8005a28:	08005caf 	.word	0x08005caf
 8005a2c:	08005a97 	.word	0x08005a97
 8005a30:	08005caf 	.word	0x08005caf
 8005a34:	08005caf 	.word	0x08005caf
 8005a38:	08005caf 	.word	0x08005caf
 8005a3c:	08005caf 	.word	0x08005caf
 8005a40:	08005caf 	.word	0x08005caf
 8005a44:	08005caf 	.word	0x08005caf
 8005a48:	08005caf 	.word	0x08005caf
 8005a4c:	08005a9d 	.word	0x08005a9d
 8005a50:	08005caf 	.word	0x08005caf
 8005a54:	08005caf 	.word	0x08005caf
 8005a58:	08005caf 	.word	0x08005caf
 8005a5c:	08005caf 	.word	0x08005caf
 8005a60:	08005caf 	.word	0x08005caf
 8005a64:	08005caf 	.word	0x08005caf
 8005a68:	08005caf 	.word	0x08005caf
 8005a6c:	08005aa3 	.word	0x08005aa3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005a70:	4b94      	ldr	r3, [pc, #592]	; (8005cc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f003 0320 	and.w	r3, r3, #32
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d009      	beq.n	8005a90 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005a7c:	4b91      	ldr	r3, [pc, #580]	; (8005cc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	08db      	lsrs	r3, r3, #3
 8005a82:	f003 0303 	and.w	r3, r3, #3
 8005a86:	4a90      	ldr	r2, [pc, #576]	; (8005cc8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005a88:	fa22 f303 	lsr.w	r3, r2, r3
 8005a8c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005a8e:	e111      	b.n	8005cb4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005a90:	4b8d      	ldr	r3, [pc, #564]	; (8005cc8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005a92:	61bb      	str	r3, [r7, #24]
      break;
 8005a94:	e10e      	b.n	8005cb4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005a96:	4b8d      	ldr	r3, [pc, #564]	; (8005ccc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005a98:	61bb      	str	r3, [r7, #24]
      break;
 8005a9a:	e10b      	b.n	8005cb4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005a9c:	4b8c      	ldr	r3, [pc, #560]	; (8005cd0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005a9e:	61bb      	str	r3, [r7, #24]
      break;
 8005aa0:	e108      	b.n	8005cb4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005aa2:	4b88      	ldr	r3, [pc, #544]	; (8005cc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aa6:	f003 0303 	and.w	r3, r3, #3
 8005aaa:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005aac:	4b85      	ldr	r3, [pc, #532]	; (8005cc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ab0:	091b      	lsrs	r3, r3, #4
 8005ab2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ab6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005ab8:	4b82      	ldr	r3, [pc, #520]	; (8005cc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005abc:	f003 0301 	and.w	r3, r3, #1
 8005ac0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005ac2:	4b80      	ldr	r3, [pc, #512]	; (8005cc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ac4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ac6:	08db      	lsrs	r3, r3, #3
 8005ac8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005acc:	68fa      	ldr	r2, [r7, #12]
 8005ace:	fb02 f303 	mul.w	r3, r2, r3
 8005ad2:	ee07 3a90 	vmov	s15, r3
 8005ad6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ada:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	f000 80e1 	beq.w	8005ca8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	2b02      	cmp	r3, #2
 8005aea:	f000 8083 	beq.w	8005bf4 <HAL_RCC_GetSysClockFreq+0x204>
 8005aee:	697b      	ldr	r3, [r7, #20]
 8005af0:	2b02      	cmp	r3, #2
 8005af2:	f200 80a1 	bhi.w	8005c38 <HAL_RCC_GetSysClockFreq+0x248>
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d003      	beq.n	8005b04 <HAL_RCC_GetSysClockFreq+0x114>
 8005afc:	697b      	ldr	r3, [r7, #20]
 8005afe:	2b01      	cmp	r3, #1
 8005b00:	d056      	beq.n	8005bb0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005b02:	e099      	b.n	8005c38 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005b04:	4b6f      	ldr	r3, [pc, #444]	; (8005cc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f003 0320 	and.w	r3, r3, #32
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d02d      	beq.n	8005b6c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005b10:	4b6c      	ldr	r3, [pc, #432]	; (8005cc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	08db      	lsrs	r3, r3, #3
 8005b16:	f003 0303 	and.w	r3, r3, #3
 8005b1a:	4a6b      	ldr	r2, [pc, #428]	; (8005cc8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005b1c:	fa22 f303 	lsr.w	r3, r2, r3
 8005b20:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	ee07 3a90 	vmov	s15, r3
 8005b28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b2c:	693b      	ldr	r3, [r7, #16]
 8005b2e:	ee07 3a90 	vmov	s15, r3
 8005b32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b3a:	4b62      	ldr	r3, [pc, #392]	; (8005cc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b42:	ee07 3a90 	vmov	s15, r3
 8005b46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b4a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005b4e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005cd4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005b52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b66:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005b6a:	e087      	b.n	8005c7c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	ee07 3a90 	vmov	s15, r3
 8005b72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b76:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005cd8 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005b7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b7e:	4b51      	ldr	r3, [pc, #324]	; (8005cc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b86:	ee07 3a90 	vmov	s15, r3
 8005b8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b8e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005b92:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005cd4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005b96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ba2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ba6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005baa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005bae:	e065      	b.n	8005c7c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	ee07 3a90 	vmov	s15, r3
 8005bb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bba:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005cdc <HAL_RCC_GetSysClockFreq+0x2ec>
 8005bbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005bc2:	4b40      	ldr	r3, [pc, #256]	; (8005cc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bca:	ee07 3a90 	vmov	s15, r3
 8005bce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bd2:	ed97 6a02 	vldr	s12, [r7, #8]
 8005bd6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005cd4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005bda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005bde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005be2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005be6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005bea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005bf2:	e043      	b.n	8005c7c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	ee07 3a90 	vmov	s15, r3
 8005bfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bfe:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005ce0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005c02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c06:	4b2f      	ldr	r3, [pc, #188]	; (8005cc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c0e:	ee07 3a90 	vmov	s15, r3
 8005c12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c16:	ed97 6a02 	vldr	s12, [r7, #8]
 8005c1a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005cd4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005c1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c32:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005c36:	e021      	b.n	8005c7c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005c38:	693b      	ldr	r3, [r7, #16]
 8005c3a:	ee07 3a90 	vmov	s15, r3
 8005c3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c42:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005cdc <HAL_RCC_GetSysClockFreq+0x2ec>
 8005c46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c4a:	4b1e      	ldr	r3, [pc, #120]	; (8005cc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c52:	ee07 3a90 	vmov	s15, r3
 8005c56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c5a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005c5e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005cd4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005c62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c76:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005c7a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005c7c:	4b11      	ldr	r3, [pc, #68]	; (8005cc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c80:	0a5b      	lsrs	r3, r3, #9
 8005c82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c86:	3301      	adds	r3, #1
 8005c88:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	ee07 3a90 	vmov	s15, r3
 8005c90:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005c94:	edd7 6a07 	vldr	s13, [r7, #28]
 8005c98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ca0:	ee17 3a90 	vmov	r3, s15
 8005ca4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005ca6:	e005      	b.n	8005cb4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005ca8:	2300      	movs	r3, #0
 8005caa:	61bb      	str	r3, [r7, #24]
      break;
 8005cac:	e002      	b.n	8005cb4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005cae:	4b07      	ldr	r3, [pc, #28]	; (8005ccc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005cb0:	61bb      	str	r3, [r7, #24]
      break;
 8005cb2:	bf00      	nop
  }

  return sysclockfreq;
 8005cb4:	69bb      	ldr	r3, [r7, #24]
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	3724      	adds	r7, #36	; 0x24
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc0:	4770      	bx	lr
 8005cc2:	bf00      	nop
 8005cc4:	58024400 	.word	0x58024400
 8005cc8:	03d09000 	.word	0x03d09000
 8005ccc:	003d0900 	.word	0x003d0900
 8005cd0:	007a1200 	.word	0x007a1200
 8005cd4:	46000000 	.word	0x46000000
 8005cd8:	4c742400 	.word	0x4c742400
 8005cdc:	4a742400 	.word	0x4a742400
 8005ce0:	4af42400 	.word	0x4af42400

08005ce4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b082      	sub	sp, #8
 8005ce8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005cea:	f7ff fe81 	bl	80059f0 <HAL_RCC_GetSysClockFreq>
 8005cee:	4602      	mov	r2, r0
 8005cf0:	4b10      	ldr	r3, [pc, #64]	; (8005d34 <HAL_RCC_GetHCLKFreq+0x50>)
 8005cf2:	699b      	ldr	r3, [r3, #24]
 8005cf4:	0a1b      	lsrs	r3, r3, #8
 8005cf6:	f003 030f 	and.w	r3, r3, #15
 8005cfa:	490f      	ldr	r1, [pc, #60]	; (8005d38 <HAL_RCC_GetHCLKFreq+0x54>)
 8005cfc:	5ccb      	ldrb	r3, [r1, r3]
 8005cfe:	f003 031f 	and.w	r3, r3, #31
 8005d02:	fa22 f303 	lsr.w	r3, r2, r3
 8005d06:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005d08:	4b0a      	ldr	r3, [pc, #40]	; (8005d34 <HAL_RCC_GetHCLKFreq+0x50>)
 8005d0a:	699b      	ldr	r3, [r3, #24]
 8005d0c:	f003 030f 	and.w	r3, r3, #15
 8005d10:	4a09      	ldr	r2, [pc, #36]	; (8005d38 <HAL_RCC_GetHCLKFreq+0x54>)
 8005d12:	5cd3      	ldrb	r3, [r2, r3]
 8005d14:	f003 031f 	and.w	r3, r3, #31
 8005d18:	687a      	ldr	r2, [r7, #4]
 8005d1a:	fa22 f303 	lsr.w	r3, r2, r3
 8005d1e:	4a07      	ldr	r2, [pc, #28]	; (8005d3c <HAL_RCC_GetHCLKFreq+0x58>)
 8005d20:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005d22:	4a07      	ldr	r2, [pc, #28]	; (8005d40 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005d28:	4b04      	ldr	r3, [pc, #16]	; (8005d3c <HAL_RCC_GetHCLKFreq+0x58>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	3708      	adds	r7, #8
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd80      	pop	{r7, pc}
 8005d34:	58024400 	.word	0x58024400
 8005d38:	0800b030 	.word	0x0800b030
 8005d3c:	24000004 	.word	0x24000004
 8005d40:	24000000 	.word	0x24000000

08005d44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005d48:	f7ff ffcc 	bl	8005ce4 <HAL_RCC_GetHCLKFreq>
 8005d4c:	4602      	mov	r2, r0
 8005d4e:	4b06      	ldr	r3, [pc, #24]	; (8005d68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005d50:	69db      	ldr	r3, [r3, #28]
 8005d52:	091b      	lsrs	r3, r3, #4
 8005d54:	f003 0307 	and.w	r3, r3, #7
 8005d58:	4904      	ldr	r1, [pc, #16]	; (8005d6c <HAL_RCC_GetPCLK1Freq+0x28>)
 8005d5a:	5ccb      	ldrb	r3, [r1, r3]
 8005d5c:	f003 031f 	and.w	r3, r3, #31
 8005d60:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005d64:	4618      	mov	r0, r3
 8005d66:	bd80      	pop	{r7, pc}
 8005d68:	58024400 	.word	0x58024400
 8005d6c:	0800b030 	.word	0x0800b030

08005d70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005d74:	f7ff ffb6 	bl	8005ce4 <HAL_RCC_GetHCLKFreq>
 8005d78:	4602      	mov	r2, r0
 8005d7a:	4b06      	ldr	r3, [pc, #24]	; (8005d94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005d7c:	69db      	ldr	r3, [r3, #28]
 8005d7e:	0a1b      	lsrs	r3, r3, #8
 8005d80:	f003 0307 	and.w	r3, r3, #7
 8005d84:	4904      	ldr	r1, [pc, #16]	; (8005d98 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005d86:	5ccb      	ldrb	r3, [r1, r3]
 8005d88:	f003 031f 	and.w	r3, r3, #31
 8005d8c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005d90:	4618      	mov	r0, r3
 8005d92:	bd80      	pop	{r7, pc}
 8005d94:	58024400 	.word	0x58024400
 8005d98:	0800b030 	.word	0x0800b030

08005d9c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005d9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005da0:	b0c6      	sub	sp, #280	; 0x118
 8005da2:	af00      	add	r7, sp, #0
 8005da4:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005da8:	2300      	movs	r3, #0
 8005daa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005dae:	2300      	movs	r3, #0
 8005db0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005db4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dbc:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8005dc0:	2500      	movs	r5, #0
 8005dc2:	ea54 0305 	orrs.w	r3, r4, r5
 8005dc6:	d049      	beq.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005dc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005dcc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005dce:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005dd2:	d02f      	beq.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005dd4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005dd8:	d828      	bhi.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005dda:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005dde:	d01a      	beq.n	8005e16 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005de0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005de4:	d822      	bhi.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d003      	beq.n	8005df2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005dea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005dee:	d007      	beq.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005df0:	e01c      	b.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005df2:	4bab      	ldr	r3, [pc, #684]	; (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005df6:	4aaa      	ldr	r2, [pc, #680]	; (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005df8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005dfc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005dfe:	e01a      	b.n	8005e36 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005e00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e04:	3308      	adds	r3, #8
 8005e06:	2102      	movs	r1, #2
 8005e08:	4618      	mov	r0, r3
 8005e0a:	f001 fc25 	bl	8007658 <RCCEx_PLL2_Config>
 8005e0e:	4603      	mov	r3, r0
 8005e10:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005e14:	e00f      	b.n	8005e36 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005e16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e1a:	3328      	adds	r3, #40	; 0x28
 8005e1c:	2102      	movs	r1, #2
 8005e1e:	4618      	mov	r0, r3
 8005e20:	f001 fccc 	bl	80077bc <RCCEx_PLL3_Config>
 8005e24:	4603      	mov	r3, r0
 8005e26:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005e2a:	e004      	b.n	8005e36 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005e32:	e000      	b.n	8005e36 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005e34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e36:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d10a      	bne.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005e3e:	4b98      	ldr	r3, [pc, #608]	; (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005e40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e42:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8005e46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e4c:	4a94      	ldr	r2, [pc, #592]	; (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005e4e:	430b      	orrs	r3, r1
 8005e50:	6513      	str	r3, [r2, #80]	; 0x50
 8005e52:	e003      	b.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e54:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005e58:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005e5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e64:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8005e68:	f04f 0900 	mov.w	r9, #0
 8005e6c:	ea58 0309 	orrs.w	r3, r8, r9
 8005e70:	d047      	beq.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005e72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e78:	2b04      	cmp	r3, #4
 8005e7a:	d82a      	bhi.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005e7c:	a201      	add	r2, pc, #4	; (adr r2, 8005e84 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005e7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e82:	bf00      	nop
 8005e84:	08005e99 	.word	0x08005e99
 8005e88:	08005ea7 	.word	0x08005ea7
 8005e8c:	08005ebd 	.word	0x08005ebd
 8005e90:	08005edb 	.word	0x08005edb
 8005e94:	08005edb 	.word	0x08005edb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e98:	4b81      	ldr	r3, [pc, #516]	; (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e9c:	4a80      	ldr	r2, [pc, #512]	; (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005e9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ea2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005ea4:	e01a      	b.n	8005edc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005ea6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005eaa:	3308      	adds	r3, #8
 8005eac:	2100      	movs	r1, #0
 8005eae:	4618      	mov	r0, r3
 8005eb0:	f001 fbd2 	bl	8007658 <RCCEx_PLL2_Config>
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005eba:	e00f      	b.n	8005edc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005ebc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ec0:	3328      	adds	r3, #40	; 0x28
 8005ec2:	2100      	movs	r1, #0
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	f001 fc79 	bl	80077bc <RCCEx_PLL3_Config>
 8005eca:	4603      	mov	r3, r0
 8005ecc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005ed0:	e004      	b.n	8005edc <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005ed8:	e000      	b.n	8005edc <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005eda:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005edc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d10a      	bne.n	8005efa <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005ee4:	4b6e      	ldr	r3, [pc, #440]	; (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005ee6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ee8:	f023 0107 	bic.w	r1, r3, #7
 8005eec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ef0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ef2:	4a6b      	ldr	r2, [pc, #428]	; (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005ef4:	430b      	orrs	r3, r1
 8005ef6:	6513      	str	r3, [r2, #80]	; 0x50
 8005ef8:	e003      	b.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005efa:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005efe:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005f02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f0a:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 8005f0e:	f04f 0b00 	mov.w	fp, #0
 8005f12:	ea5a 030b 	orrs.w	r3, sl, fp
 8005f16:	d05b      	beq.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005f18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f1c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005f20:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8005f24:	d03b      	beq.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0x202>
 8005f26:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8005f2a:	d834      	bhi.n	8005f96 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005f2c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005f30:	d037      	beq.n	8005fa2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8005f32:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005f36:	d82e      	bhi.n	8005f96 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005f38:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005f3c:	d033      	beq.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8005f3e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005f42:	d828      	bhi.n	8005f96 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005f44:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005f48:	d01a      	beq.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8005f4a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005f4e:	d822      	bhi.n	8005f96 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d003      	beq.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8005f54:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005f58:	d007      	beq.n	8005f6a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8005f5a:	e01c      	b.n	8005f96 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f5c:	4b50      	ldr	r3, [pc, #320]	; (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f60:	4a4f      	ldr	r2, [pc, #316]	; (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005f62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f66:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005f68:	e01e      	b.n	8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005f6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f6e:	3308      	adds	r3, #8
 8005f70:	2100      	movs	r1, #0
 8005f72:	4618      	mov	r0, r3
 8005f74:	f001 fb70 	bl	8007658 <RCCEx_PLL2_Config>
 8005f78:	4603      	mov	r3, r0
 8005f7a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005f7e:	e013      	b.n	8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005f80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f84:	3328      	adds	r3, #40	; 0x28
 8005f86:	2100      	movs	r1, #0
 8005f88:	4618      	mov	r0, r3
 8005f8a:	f001 fc17 	bl	80077bc <RCCEx_PLL3_Config>
 8005f8e:	4603      	mov	r3, r0
 8005f90:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005f94:	e008      	b.n	8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005f96:	2301      	movs	r3, #1
 8005f98:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005f9c:	e004      	b.n	8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005f9e:	bf00      	nop
 8005fa0:	e002      	b.n	8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005fa2:	bf00      	nop
 8005fa4:	e000      	b.n	8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005fa6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005fa8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d10b      	bne.n	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005fb0:	4b3b      	ldr	r3, [pc, #236]	; (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005fb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fb4:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8005fb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fbc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005fc0:	4a37      	ldr	r2, [pc, #220]	; (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005fc2:	430b      	orrs	r3, r1
 8005fc4:	6593      	str	r3, [r2, #88]	; 0x58
 8005fc6:	e003      	b.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fc8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005fcc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005fd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fd8:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8005fdc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005fe6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8005fea:	460b      	mov	r3, r1
 8005fec:	4313      	orrs	r3, r2
 8005fee:	d05d      	beq.n	80060ac <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005ff0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ff4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005ff8:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8005ffc:	d03b      	beq.n	8006076 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8005ffe:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8006002:	d834      	bhi.n	800606e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006004:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006008:	d037      	beq.n	800607a <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800600a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800600e:	d82e      	bhi.n	800606e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006010:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006014:	d033      	beq.n	800607e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8006016:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800601a:	d828      	bhi.n	800606e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800601c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006020:	d01a      	beq.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8006022:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006026:	d822      	bhi.n	800606e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006028:	2b00      	cmp	r3, #0
 800602a:	d003      	beq.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800602c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006030:	d007      	beq.n	8006042 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8006032:	e01c      	b.n	800606e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006034:	4b1a      	ldr	r3, [pc, #104]	; (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006038:	4a19      	ldr	r2, [pc, #100]	; (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800603a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800603e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006040:	e01e      	b.n	8006080 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006042:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006046:	3308      	adds	r3, #8
 8006048:	2100      	movs	r1, #0
 800604a:	4618      	mov	r0, r3
 800604c:	f001 fb04 	bl	8007658 <RCCEx_PLL2_Config>
 8006050:	4603      	mov	r3, r0
 8006052:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006056:	e013      	b.n	8006080 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006058:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800605c:	3328      	adds	r3, #40	; 0x28
 800605e:	2100      	movs	r1, #0
 8006060:	4618      	mov	r0, r3
 8006062:	f001 fbab 	bl	80077bc <RCCEx_PLL3_Config>
 8006066:	4603      	mov	r3, r0
 8006068:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800606c:	e008      	b.n	8006080 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800606e:	2301      	movs	r3, #1
 8006070:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006074:	e004      	b.n	8006080 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8006076:	bf00      	nop
 8006078:	e002      	b.n	8006080 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800607a:	bf00      	nop
 800607c:	e000      	b.n	8006080 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800607e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006080:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006084:	2b00      	cmp	r3, #0
 8006086:	d10d      	bne.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006088:	4b05      	ldr	r3, [pc, #20]	; (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800608a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800608c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8006090:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006094:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006098:	4a01      	ldr	r2, [pc, #4]	; (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800609a:	430b      	orrs	r3, r1
 800609c:	6593      	str	r3, [r2, #88]	; 0x58
 800609e:	e005      	b.n	80060ac <HAL_RCCEx_PeriphCLKConfig+0x310>
 80060a0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060a4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80060a8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80060ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060b4:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80060b8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80060bc:	2300      	movs	r3, #0
 80060be:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80060c2:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80060c6:	460b      	mov	r3, r1
 80060c8:	4313      	orrs	r3, r2
 80060ca:	d03a      	beq.n	8006142 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80060cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060d2:	2b30      	cmp	r3, #48	; 0x30
 80060d4:	d01f      	beq.n	8006116 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 80060d6:	2b30      	cmp	r3, #48	; 0x30
 80060d8:	d819      	bhi.n	800610e <HAL_RCCEx_PeriphCLKConfig+0x372>
 80060da:	2b20      	cmp	r3, #32
 80060dc:	d00c      	beq.n	80060f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80060de:	2b20      	cmp	r3, #32
 80060e0:	d815      	bhi.n	800610e <HAL_RCCEx_PeriphCLKConfig+0x372>
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d019      	beq.n	800611a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80060e6:	2b10      	cmp	r3, #16
 80060e8:	d111      	bne.n	800610e <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060ea:	4baa      	ldr	r3, [pc, #680]	; (8006394 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80060ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060ee:	4aa9      	ldr	r2, [pc, #676]	; (8006394 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80060f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80060f4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80060f6:	e011      	b.n	800611c <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80060f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060fc:	3308      	adds	r3, #8
 80060fe:	2102      	movs	r1, #2
 8006100:	4618      	mov	r0, r3
 8006102:	f001 faa9 	bl	8007658 <RCCEx_PLL2_Config>
 8006106:	4603      	mov	r3, r0
 8006108:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800610c:	e006      	b.n	800611c <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800610e:	2301      	movs	r3, #1
 8006110:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006114:	e002      	b.n	800611c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8006116:	bf00      	nop
 8006118:	e000      	b.n	800611c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800611a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800611c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006120:	2b00      	cmp	r3, #0
 8006122:	d10a      	bne.n	800613a <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006124:	4b9b      	ldr	r3, [pc, #620]	; (8006394 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006126:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006128:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800612c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006130:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006132:	4a98      	ldr	r2, [pc, #608]	; (8006394 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006134:	430b      	orrs	r3, r1
 8006136:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006138:	e003      	b.n	8006142 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800613a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800613e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006142:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800614a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800614e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006152:	2300      	movs	r3, #0
 8006154:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006158:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800615c:	460b      	mov	r3, r1
 800615e:	4313      	orrs	r3, r2
 8006160:	d051      	beq.n	8006206 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8006162:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006166:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006168:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800616c:	d035      	beq.n	80061da <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800616e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006172:	d82e      	bhi.n	80061d2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8006174:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006178:	d031      	beq.n	80061de <HAL_RCCEx_PeriphCLKConfig+0x442>
 800617a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800617e:	d828      	bhi.n	80061d2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8006180:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006184:	d01a      	beq.n	80061bc <HAL_RCCEx_PeriphCLKConfig+0x420>
 8006186:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800618a:	d822      	bhi.n	80061d2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800618c:	2b00      	cmp	r3, #0
 800618e:	d003      	beq.n	8006198 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8006190:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006194:	d007      	beq.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8006196:	e01c      	b.n	80061d2 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006198:	4b7e      	ldr	r3, [pc, #504]	; (8006394 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800619a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800619c:	4a7d      	ldr	r2, [pc, #500]	; (8006394 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800619e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80061a2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80061a4:	e01c      	b.n	80061e0 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80061a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061aa:	3308      	adds	r3, #8
 80061ac:	2100      	movs	r1, #0
 80061ae:	4618      	mov	r0, r3
 80061b0:	f001 fa52 	bl	8007658 <RCCEx_PLL2_Config>
 80061b4:	4603      	mov	r3, r0
 80061b6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80061ba:	e011      	b.n	80061e0 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80061bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061c0:	3328      	adds	r3, #40	; 0x28
 80061c2:	2100      	movs	r1, #0
 80061c4:	4618      	mov	r0, r3
 80061c6:	f001 faf9 	bl	80077bc <RCCEx_PLL3_Config>
 80061ca:	4603      	mov	r3, r0
 80061cc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80061d0:	e006      	b.n	80061e0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80061d2:	2301      	movs	r3, #1
 80061d4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80061d8:	e002      	b.n	80061e0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80061da:	bf00      	nop
 80061dc:	e000      	b.n	80061e0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80061de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061e0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d10a      	bne.n	80061fe <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80061e8:	4b6a      	ldr	r3, [pc, #424]	; (8006394 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80061ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061ec:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80061f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061f6:	4a67      	ldr	r2, [pc, #412]	; (8006394 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80061f8:	430b      	orrs	r3, r1
 80061fa:	6513      	str	r3, [r2, #80]	; 0x50
 80061fc:	e003      	b.n	8006206 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061fe:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006202:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006206:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800620a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800620e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8006212:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006216:	2300      	movs	r3, #0
 8006218:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800621c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8006220:	460b      	mov	r3, r1
 8006222:	4313      	orrs	r3, r2
 8006224:	d053      	beq.n	80062ce <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8006226:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800622a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800622c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006230:	d033      	beq.n	800629a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8006232:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006236:	d82c      	bhi.n	8006292 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006238:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800623c:	d02f      	beq.n	800629e <HAL_RCCEx_PeriphCLKConfig+0x502>
 800623e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006242:	d826      	bhi.n	8006292 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006244:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006248:	d02b      	beq.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800624a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800624e:	d820      	bhi.n	8006292 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006250:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006254:	d012      	beq.n	800627c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8006256:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800625a:	d81a      	bhi.n	8006292 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800625c:	2b00      	cmp	r3, #0
 800625e:	d022      	beq.n	80062a6 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8006260:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006264:	d115      	bne.n	8006292 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006266:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800626a:	3308      	adds	r3, #8
 800626c:	2101      	movs	r1, #1
 800626e:	4618      	mov	r0, r3
 8006270:	f001 f9f2 	bl	8007658 <RCCEx_PLL2_Config>
 8006274:	4603      	mov	r3, r0
 8006276:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800627a:	e015      	b.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800627c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006280:	3328      	adds	r3, #40	; 0x28
 8006282:	2101      	movs	r1, #1
 8006284:	4618      	mov	r0, r3
 8006286:	f001 fa99 	bl	80077bc <RCCEx_PLL3_Config>
 800628a:	4603      	mov	r3, r0
 800628c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006290:	e00a      	b.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006292:	2301      	movs	r3, #1
 8006294:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006298:	e006      	b.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800629a:	bf00      	nop
 800629c:	e004      	b.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800629e:	bf00      	nop
 80062a0:	e002      	b.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80062a2:	bf00      	nop
 80062a4:	e000      	b.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80062a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062a8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d10a      	bne.n	80062c6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80062b0:	4b38      	ldr	r3, [pc, #224]	; (8006394 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80062b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062b4:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80062b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062be:	4a35      	ldr	r2, [pc, #212]	; (8006394 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80062c0:	430b      	orrs	r3, r1
 80062c2:	6513      	str	r3, [r2, #80]	; 0x50
 80062c4:	e003      	b.n	80062ce <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062c6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80062ca:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80062ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062d6:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80062da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80062de:	2300      	movs	r3, #0
 80062e0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80062e4:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80062e8:	460b      	mov	r3, r1
 80062ea:	4313      	orrs	r3, r2
 80062ec:	d058      	beq.n	80063a0 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80062ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062f2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80062f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80062fa:	d033      	beq.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80062fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006300:	d82c      	bhi.n	800635c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006302:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006306:	d02f      	beq.n	8006368 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8006308:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800630c:	d826      	bhi.n	800635c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800630e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006312:	d02b      	beq.n	800636c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8006314:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006318:	d820      	bhi.n	800635c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800631a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800631e:	d012      	beq.n	8006346 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8006320:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006324:	d81a      	bhi.n	800635c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006326:	2b00      	cmp	r3, #0
 8006328:	d022      	beq.n	8006370 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800632a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800632e:	d115      	bne.n	800635c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006330:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006334:	3308      	adds	r3, #8
 8006336:	2101      	movs	r1, #1
 8006338:	4618      	mov	r0, r3
 800633a:	f001 f98d 	bl	8007658 <RCCEx_PLL2_Config>
 800633e:	4603      	mov	r3, r0
 8006340:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006344:	e015      	b.n	8006372 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006346:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800634a:	3328      	adds	r3, #40	; 0x28
 800634c:	2101      	movs	r1, #1
 800634e:	4618      	mov	r0, r3
 8006350:	f001 fa34 	bl	80077bc <RCCEx_PLL3_Config>
 8006354:	4603      	mov	r3, r0
 8006356:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800635a:	e00a      	b.n	8006372 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800635c:	2301      	movs	r3, #1
 800635e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006362:	e006      	b.n	8006372 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006364:	bf00      	nop
 8006366:	e004      	b.n	8006372 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006368:	bf00      	nop
 800636a:	e002      	b.n	8006372 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800636c:	bf00      	nop
 800636e:	e000      	b.n	8006372 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006370:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006372:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006376:	2b00      	cmp	r3, #0
 8006378:	d10e      	bne.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800637a:	4b06      	ldr	r3, [pc, #24]	; (8006394 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800637c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800637e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8006382:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006386:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800638a:	4a02      	ldr	r2, [pc, #8]	; (8006394 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800638c:	430b      	orrs	r3, r1
 800638e:	6593      	str	r3, [r2, #88]	; 0x58
 8006390:	e006      	b.n	80063a0 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8006392:	bf00      	nop
 8006394:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006398:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800639c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80063a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063a8:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80063ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80063b0:	2300      	movs	r3, #0
 80063b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80063b6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80063ba:	460b      	mov	r3, r1
 80063bc:	4313      	orrs	r3, r2
 80063be:	d037      	beq.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80063c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80063ca:	d00e      	beq.n	80063ea <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80063cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80063d0:	d816      	bhi.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d018      	beq.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80063d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80063da:	d111      	bne.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063dc:	4bc4      	ldr	r3, [pc, #784]	; (80066f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80063de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063e0:	4ac3      	ldr	r2, [pc, #780]	; (80066f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80063e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063e6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80063e8:	e00f      	b.n	800640a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80063ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063ee:	3308      	adds	r3, #8
 80063f0:	2101      	movs	r1, #1
 80063f2:	4618      	mov	r0, r3
 80063f4:	f001 f930 	bl	8007658 <RCCEx_PLL2_Config>
 80063f8:	4603      	mov	r3, r0
 80063fa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80063fe:	e004      	b.n	800640a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006400:	2301      	movs	r3, #1
 8006402:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006406:	e000      	b.n	800640a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8006408:	bf00      	nop
    }

    if (ret == HAL_OK)
 800640a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800640e:	2b00      	cmp	r3, #0
 8006410:	d10a      	bne.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006412:	4bb7      	ldr	r3, [pc, #732]	; (80066f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006414:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006416:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800641a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800641e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006420:	4ab3      	ldr	r2, [pc, #716]	; (80066f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006422:	430b      	orrs	r3, r1
 8006424:	6513      	str	r3, [r2, #80]	; 0x50
 8006426:	e003      	b.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006428:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800642c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006430:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006438:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800643c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006440:	2300      	movs	r3, #0
 8006442:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006446:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800644a:	460b      	mov	r3, r1
 800644c:	4313      	orrs	r3, r2
 800644e:	d039      	beq.n	80064c4 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006450:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006454:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006456:	2b03      	cmp	r3, #3
 8006458:	d81c      	bhi.n	8006494 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800645a:	a201      	add	r2, pc, #4	; (adr r2, 8006460 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800645c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006460:	0800649d 	.word	0x0800649d
 8006464:	08006471 	.word	0x08006471
 8006468:	0800647f 	.word	0x0800647f
 800646c:	0800649d 	.word	0x0800649d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006470:	4b9f      	ldr	r3, [pc, #636]	; (80066f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006474:	4a9e      	ldr	r2, [pc, #632]	; (80066f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006476:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800647a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800647c:	e00f      	b.n	800649e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800647e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006482:	3308      	adds	r3, #8
 8006484:	2102      	movs	r1, #2
 8006486:	4618      	mov	r0, r3
 8006488:	f001 f8e6 	bl	8007658 <RCCEx_PLL2_Config>
 800648c:	4603      	mov	r3, r0
 800648e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006492:	e004      	b.n	800649e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006494:	2301      	movs	r3, #1
 8006496:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800649a:	e000      	b.n	800649e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800649c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800649e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d10a      	bne.n	80064bc <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80064a6:	4b92      	ldr	r3, [pc, #584]	; (80066f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80064a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064aa:	f023 0103 	bic.w	r1, r3, #3
 80064ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064b4:	4a8e      	ldr	r2, [pc, #568]	; (80066f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80064b6:	430b      	orrs	r3, r1
 80064b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80064ba:	e003      	b.n	80064c4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064bc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80064c0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80064c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064cc:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80064d0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80064d4:	2300      	movs	r3, #0
 80064d6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80064da:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80064de:	460b      	mov	r3, r1
 80064e0:	4313      	orrs	r3, r2
 80064e2:	f000 8099 	beq.w	8006618 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80064e6:	4b83      	ldr	r3, [pc, #524]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a82      	ldr	r2, [pc, #520]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80064ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064f0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80064f2:	f7fb fa1f 	bl	8001934 <HAL_GetTick>
 80064f6:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80064fa:	e00b      	b.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80064fc:	f7fb fa1a 	bl	8001934 <HAL_GetTick>
 8006500:	4602      	mov	r2, r0
 8006502:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006506:	1ad3      	subs	r3, r2, r3
 8006508:	2b64      	cmp	r3, #100	; 0x64
 800650a:	d903      	bls.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800650c:	2303      	movs	r3, #3
 800650e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006512:	e005      	b.n	8006520 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006514:	4b77      	ldr	r3, [pc, #476]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800651c:	2b00      	cmp	r3, #0
 800651e:	d0ed      	beq.n	80064fc <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8006520:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006524:	2b00      	cmp	r3, #0
 8006526:	d173      	bne.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006528:	4b71      	ldr	r3, [pc, #452]	; (80066f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800652a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800652c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006530:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006534:	4053      	eors	r3, r2
 8006536:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800653a:	2b00      	cmp	r3, #0
 800653c:	d015      	beq.n	800656a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800653e:	4b6c      	ldr	r3, [pc, #432]	; (80066f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006542:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006546:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800654a:	4b69      	ldr	r3, [pc, #420]	; (80066f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800654c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800654e:	4a68      	ldr	r2, [pc, #416]	; (80066f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006550:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006554:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006556:	4b66      	ldr	r3, [pc, #408]	; (80066f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006558:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800655a:	4a65      	ldr	r2, [pc, #404]	; (80066f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800655c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006560:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006562:	4a63      	ldr	r2, [pc, #396]	; (80066f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006564:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006568:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800656a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800656e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006572:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006576:	d118      	bne.n	80065aa <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006578:	f7fb f9dc 	bl	8001934 <HAL_GetTick>
 800657c:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006580:	e00d      	b.n	800659e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006582:	f7fb f9d7 	bl	8001934 <HAL_GetTick>
 8006586:	4602      	mov	r2, r0
 8006588:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800658c:	1ad2      	subs	r2, r2, r3
 800658e:	f241 3388 	movw	r3, #5000	; 0x1388
 8006592:	429a      	cmp	r2, r3
 8006594:	d903      	bls.n	800659e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8006596:	2303      	movs	r3, #3
 8006598:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 800659c:	e005      	b.n	80065aa <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800659e:	4b54      	ldr	r3, [pc, #336]	; (80066f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80065a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065a2:	f003 0302 	and.w	r3, r3, #2
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d0eb      	beq.n	8006582 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80065aa:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d129      	bne.n	8006606 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80065b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065b6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80065ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80065c2:	d10e      	bne.n	80065e2 <HAL_RCCEx_PeriphCLKConfig+0x846>
 80065c4:	4b4a      	ldr	r3, [pc, #296]	; (80066f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80065c6:	691b      	ldr	r3, [r3, #16]
 80065c8:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80065cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065d0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80065d4:	091a      	lsrs	r2, r3, #4
 80065d6:	4b48      	ldr	r3, [pc, #288]	; (80066f8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80065d8:	4013      	ands	r3, r2
 80065da:	4a45      	ldr	r2, [pc, #276]	; (80066f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80065dc:	430b      	orrs	r3, r1
 80065de:	6113      	str	r3, [r2, #16]
 80065e0:	e005      	b.n	80065ee <HAL_RCCEx_PeriphCLKConfig+0x852>
 80065e2:	4b43      	ldr	r3, [pc, #268]	; (80066f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80065e4:	691b      	ldr	r3, [r3, #16]
 80065e6:	4a42      	ldr	r2, [pc, #264]	; (80066f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80065e8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80065ec:	6113      	str	r3, [r2, #16]
 80065ee:	4b40      	ldr	r3, [pc, #256]	; (80066f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80065f0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80065f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065f6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80065fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80065fe:	4a3c      	ldr	r2, [pc, #240]	; (80066f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006600:	430b      	orrs	r3, r1
 8006602:	6713      	str	r3, [r2, #112]	; 0x70
 8006604:	e008      	b.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006606:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800660a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 800660e:	e003      	b.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006610:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006614:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006618:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800661c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006620:	f002 0301 	and.w	r3, r2, #1
 8006624:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006628:	2300      	movs	r3, #0
 800662a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800662e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8006632:	460b      	mov	r3, r1
 8006634:	4313      	orrs	r3, r2
 8006636:	f000 808f 	beq.w	8006758 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800663a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800663e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006640:	2b28      	cmp	r3, #40	; 0x28
 8006642:	d871      	bhi.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8006644:	a201      	add	r2, pc, #4	; (adr r2, 800664c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8006646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800664a:	bf00      	nop
 800664c:	08006731 	.word	0x08006731
 8006650:	08006729 	.word	0x08006729
 8006654:	08006729 	.word	0x08006729
 8006658:	08006729 	.word	0x08006729
 800665c:	08006729 	.word	0x08006729
 8006660:	08006729 	.word	0x08006729
 8006664:	08006729 	.word	0x08006729
 8006668:	08006729 	.word	0x08006729
 800666c:	080066fd 	.word	0x080066fd
 8006670:	08006729 	.word	0x08006729
 8006674:	08006729 	.word	0x08006729
 8006678:	08006729 	.word	0x08006729
 800667c:	08006729 	.word	0x08006729
 8006680:	08006729 	.word	0x08006729
 8006684:	08006729 	.word	0x08006729
 8006688:	08006729 	.word	0x08006729
 800668c:	08006713 	.word	0x08006713
 8006690:	08006729 	.word	0x08006729
 8006694:	08006729 	.word	0x08006729
 8006698:	08006729 	.word	0x08006729
 800669c:	08006729 	.word	0x08006729
 80066a0:	08006729 	.word	0x08006729
 80066a4:	08006729 	.word	0x08006729
 80066a8:	08006729 	.word	0x08006729
 80066ac:	08006731 	.word	0x08006731
 80066b0:	08006729 	.word	0x08006729
 80066b4:	08006729 	.word	0x08006729
 80066b8:	08006729 	.word	0x08006729
 80066bc:	08006729 	.word	0x08006729
 80066c0:	08006729 	.word	0x08006729
 80066c4:	08006729 	.word	0x08006729
 80066c8:	08006729 	.word	0x08006729
 80066cc:	08006731 	.word	0x08006731
 80066d0:	08006729 	.word	0x08006729
 80066d4:	08006729 	.word	0x08006729
 80066d8:	08006729 	.word	0x08006729
 80066dc:	08006729 	.word	0x08006729
 80066e0:	08006729 	.word	0x08006729
 80066e4:	08006729 	.word	0x08006729
 80066e8:	08006729 	.word	0x08006729
 80066ec:	08006731 	.word	0x08006731
 80066f0:	58024400 	.word	0x58024400
 80066f4:	58024800 	.word	0x58024800
 80066f8:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80066fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006700:	3308      	adds	r3, #8
 8006702:	2101      	movs	r1, #1
 8006704:	4618      	mov	r0, r3
 8006706:	f000 ffa7 	bl	8007658 <RCCEx_PLL2_Config>
 800670a:	4603      	mov	r3, r0
 800670c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006710:	e00f      	b.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006712:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006716:	3328      	adds	r3, #40	; 0x28
 8006718:	2101      	movs	r1, #1
 800671a:	4618      	mov	r0, r3
 800671c:	f001 f84e 	bl	80077bc <RCCEx_PLL3_Config>
 8006720:	4603      	mov	r3, r0
 8006722:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006726:	e004      	b.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006728:	2301      	movs	r3, #1
 800672a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800672e:	e000      	b.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8006730:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006732:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006736:	2b00      	cmp	r3, #0
 8006738:	d10a      	bne.n	8006750 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800673a:	4bbf      	ldr	r3, [pc, #764]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800673c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800673e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8006742:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006746:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006748:	4abb      	ldr	r2, [pc, #748]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800674a:	430b      	orrs	r3, r1
 800674c:	6553      	str	r3, [r2, #84]	; 0x54
 800674e:	e003      	b.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006750:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006754:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006758:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800675c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006760:	f002 0302 	and.w	r3, r2, #2
 8006764:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006768:	2300      	movs	r3, #0
 800676a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800676e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8006772:	460b      	mov	r3, r1
 8006774:	4313      	orrs	r3, r2
 8006776:	d041      	beq.n	80067fc <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006778:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800677c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800677e:	2b05      	cmp	r3, #5
 8006780:	d824      	bhi.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8006782:	a201      	add	r2, pc, #4	; (adr r2, 8006788 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8006784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006788:	080067d5 	.word	0x080067d5
 800678c:	080067a1 	.word	0x080067a1
 8006790:	080067b7 	.word	0x080067b7
 8006794:	080067d5 	.word	0x080067d5
 8006798:	080067d5 	.word	0x080067d5
 800679c:	080067d5 	.word	0x080067d5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80067a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067a4:	3308      	adds	r3, #8
 80067a6:	2101      	movs	r1, #1
 80067a8:	4618      	mov	r0, r3
 80067aa:	f000 ff55 	bl	8007658 <RCCEx_PLL2_Config>
 80067ae:	4603      	mov	r3, r0
 80067b0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80067b4:	e00f      	b.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80067b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067ba:	3328      	adds	r3, #40	; 0x28
 80067bc:	2101      	movs	r1, #1
 80067be:	4618      	mov	r0, r3
 80067c0:	f000 fffc 	bl	80077bc <RCCEx_PLL3_Config>
 80067c4:	4603      	mov	r3, r0
 80067c6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80067ca:	e004      	b.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80067cc:	2301      	movs	r3, #1
 80067ce:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80067d2:	e000      	b.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 80067d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067d6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d10a      	bne.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80067de:	4b96      	ldr	r3, [pc, #600]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80067e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067e2:	f023 0107 	bic.w	r1, r3, #7
 80067e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067ec:	4a92      	ldr	r2, [pc, #584]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80067ee:	430b      	orrs	r3, r1
 80067f0:	6553      	str	r3, [r2, #84]	; 0x54
 80067f2:	e003      	b.n	80067fc <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067f4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80067f8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80067fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006804:	f002 0304 	and.w	r3, r2, #4
 8006808:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800680c:	2300      	movs	r3, #0
 800680e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006812:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006816:	460b      	mov	r3, r1
 8006818:	4313      	orrs	r3, r2
 800681a:	d044      	beq.n	80068a6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800681c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006820:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006824:	2b05      	cmp	r3, #5
 8006826:	d825      	bhi.n	8006874 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8006828:	a201      	add	r2, pc, #4	; (adr r2, 8006830 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800682a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800682e:	bf00      	nop
 8006830:	0800687d 	.word	0x0800687d
 8006834:	08006849 	.word	0x08006849
 8006838:	0800685f 	.word	0x0800685f
 800683c:	0800687d 	.word	0x0800687d
 8006840:	0800687d 	.word	0x0800687d
 8006844:	0800687d 	.word	0x0800687d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006848:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800684c:	3308      	adds	r3, #8
 800684e:	2101      	movs	r1, #1
 8006850:	4618      	mov	r0, r3
 8006852:	f000 ff01 	bl	8007658 <RCCEx_PLL2_Config>
 8006856:	4603      	mov	r3, r0
 8006858:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800685c:	e00f      	b.n	800687e <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800685e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006862:	3328      	adds	r3, #40	; 0x28
 8006864:	2101      	movs	r1, #1
 8006866:	4618      	mov	r0, r3
 8006868:	f000 ffa8 	bl	80077bc <RCCEx_PLL3_Config>
 800686c:	4603      	mov	r3, r0
 800686e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006872:	e004      	b.n	800687e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006874:	2301      	movs	r3, #1
 8006876:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800687a:	e000      	b.n	800687e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800687c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800687e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006882:	2b00      	cmp	r3, #0
 8006884:	d10b      	bne.n	800689e <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006886:	4b6c      	ldr	r3, [pc, #432]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006888:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800688a:	f023 0107 	bic.w	r1, r3, #7
 800688e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006892:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006896:	4a68      	ldr	r2, [pc, #416]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006898:	430b      	orrs	r3, r1
 800689a:	6593      	str	r3, [r2, #88]	; 0x58
 800689c:	e003      	b.n	80068a6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800689e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80068a2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80068a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ae:	f002 0320 	and.w	r3, r2, #32
 80068b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80068b6:	2300      	movs	r3, #0
 80068b8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80068bc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80068c0:	460b      	mov	r3, r1
 80068c2:	4313      	orrs	r3, r2
 80068c4:	d055      	beq.n	8006972 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80068c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80068ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80068d2:	d033      	beq.n	800693c <HAL_RCCEx_PeriphCLKConfig+0xba0>
 80068d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80068d8:	d82c      	bhi.n	8006934 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80068da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068de:	d02f      	beq.n	8006940 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80068e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068e4:	d826      	bhi.n	8006934 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80068e6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80068ea:	d02b      	beq.n	8006944 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80068ec:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80068f0:	d820      	bhi.n	8006934 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80068f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80068f6:	d012      	beq.n	800691e <HAL_RCCEx_PeriphCLKConfig+0xb82>
 80068f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80068fc:	d81a      	bhi.n	8006934 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d022      	beq.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8006902:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006906:	d115      	bne.n	8006934 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006908:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800690c:	3308      	adds	r3, #8
 800690e:	2100      	movs	r1, #0
 8006910:	4618      	mov	r0, r3
 8006912:	f000 fea1 	bl	8007658 <RCCEx_PLL2_Config>
 8006916:	4603      	mov	r3, r0
 8006918:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800691c:	e015      	b.n	800694a <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800691e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006922:	3328      	adds	r3, #40	; 0x28
 8006924:	2102      	movs	r1, #2
 8006926:	4618      	mov	r0, r3
 8006928:	f000 ff48 	bl	80077bc <RCCEx_PLL3_Config>
 800692c:	4603      	mov	r3, r0
 800692e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006932:	e00a      	b.n	800694a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006934:	2301      	movs	r3, #1
 8006936:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800693a:	e006      	b.n	800694a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800693c:	bf00      	nop
 800693e:	e004      	b.n	800694a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006940:	bf00      	nop
 8006942:	e002      	b.n	800694a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006944:	bf00      	nop
 8006946:	e000      	b.n	800694a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006948:	bf00      	nop
    }

    if (ret == HAL_OK)
 800694a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800694e:	2b00      	cmp	r3, #0
 8006950:	d10b      	bne.n	800696a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006952:	4b39      	ldr	r3, [pc, #228]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006954:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006956:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800695a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800695e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006962:	4a35      	ldr	r2, [pc, #212]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006964:	430b      	orrs	r3, r1
 8006966:	6553      	str	r3, [r2, #84]	; 0x54
 8006968:	e003      	b.n	8006972 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800696a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800696e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006972:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800697a:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800697e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006982:	2300      	movs	r3, #0
 8006984:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006988:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800698c:	460b      	mov	r3, r1
 800698e:	4313      	orrs	r3, r2
 8006990:	d058      	beq.n	8006a44 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006992:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006996:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800699a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800699e:	d033      	beq.n	8006a08 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 80069a0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80069a4:	d82c      	bhi.n	8006a00 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80069a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069aa:	d02f      	beq.n	8006a0c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80069ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069b0:	d826      	bhi.n	8006a00 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80069b2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80069b6:	d02b      	beq.n	8006a10 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80069b8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80069bc:	d820      	bhi.n	8006a00 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80069be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069c2:	d012      	beq.n	80069ea <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 80069c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069c8:	d81a      	bhi.n	8006a00 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d022      	beq.n	8006a14 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80069ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069d2:	d115      	bne.n	8006a00 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80069d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069d8:	3308      	adds	r3, #8
 80069da:	2100      	movs	r1, #0
 80069dc:	4618      	mov	r0, r3
 80069de:	f000 fe3b 	bl	8007658 <RCCEx_PLL2_Config>
 80069e2:	4603      	mov	r3, r0
 80069e4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80069e8:	e015      	b.n	8006a16 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80069ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069ee:	3328      	adds	r3, #40	; 0x28
 80069f0:	2102      	movs	r1, #2
 80069f2:	4618      	mov	r0, r3
 80069f4:	f000 fee2 	bl	80077bc <RCCEx_PLL3_Config>
 80069f8:	4603      	mov	r3, r0
 80069fa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80069fe:	e00a      	b.n	8006a16 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a00:	2301      	movs	r3, #1
 8006a02:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006a06:	e006      	b.n	8006a16 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006a08:	bf00      	nop
 8006a0a:	e004      	b.n	8006a16 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006a0c:	bf00      	nop
 8006a0e:	e002      	b.n	8006a16 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006a10:	bf00      	nop
 8006a12:	e000      	b.n	8006a16 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006a14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a16:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d10e      	bne.n	8006a3c <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006a1e:	4b06      	ldr	r3, [pc, #24]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006a20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a22:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8006a26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a2a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006a2e:	4a02      	ldr	r2, [pc, #8]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006a30:	430b      	orrs	r3, r1
 8006a32:	6593      	str	r3, [r2, #88]	; 0x58
 8006a34:	e006      	b.n	8006a44 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8006a36:	bf00      	nop
 8006a38:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a3c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006a40:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006a44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a4c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8006a50:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006a54:	2300      	movs	r3, #0
 8006a56:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006a5a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8006a5e:	460b      	mov	r3, r1
 8006a60:	4313      	orrs	r3, r2
 8006a62:	d055      	beq.n	8006b10 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006a64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a68:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006a6c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006a70:	d033      	beq.n	8006ada <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8006a72:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006a76:	d82c      	bhi.n	8006ad2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006a78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a7c:	d02f      	beq.n	8006ade <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8006a7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a82:	d826      	bhi.n	8006ad2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006a84:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006a88:	d02b      	beq.n	8006ae2 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8006a8a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006a8e:	d820      	bhi.n	8006ad2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006a90:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006a94:	d012      	beq.n	8006abc <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8006a96:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006a9a:	d81a      	bhi.n	8006ad2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d022      	beq.n	8006ae6 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8006aa0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006aa4:	d115      	bne.n	8006ad2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006aa6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006aaa:	3308      	adds	r3, #8
 8006aac:	2100      	movs	r1, #0
 8006aae:	4618      	mov	r0, r3
 8006ab0:	f000 fdd2 	bl	8007658 <RCCEx_PLL2_Config>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006aba:	e015      	b.n	8006ae8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006abc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ac0:	3328      	adds	r3, #40	; 0x28
 8006ac2:	2102      	movs	r1, #2
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	f000 fe79 	bl	80077bc <RCCEx_PLL3_Config>
 8006aca:	4603      	mov	r3, r0
 8006acc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006ad0:	e00a      	b.n	8006ae8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006ad8:	e006      	b.n	8006ae8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006ada:	bf00      	nop
 8006adc:	e004      	b.n	8006ae8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006ade:	bf00      	nop
 8006ae0:	e002      	b.n	8006ae8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006ae2:	bf00      	nop
 8006ae4:	e000      	b.n	8006ae8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006ae6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ae8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d10b      	bne.n	8006b08 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006af0:	4ba0      	ldr	r3, [pc, #640]	; (8006d74 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006af2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006af4:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8006af8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006afc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006b00:	4a9c      	ldr	r2, [pc, #624]	; (8006d74 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006b02:	430b      	orrs	r3, r1
 8006b04:	6593      	str	r3, [r2, #88]	; 0x58
 8006b06:	e003      	b.n	8006b10 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b08:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006b0c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8006b10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b18:	f002 0308 	and.w	r3, r2, #8
 8006b1c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006b20:	2300      	movs	r3, #0
 8006b22:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006b26:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8006b2a:	460b      	mov	r3, r1
 8006b2c:	4313      	orrs	r3, r2
 8006b2e:	d01e      	beq.n	8006b6e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8006b30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b3c:	d10c      	bne.n	8006b58 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006b3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b42:	3328      	adds	r3, #40	; 0x28
 8006b44:	2102      	movs	r1, #2
 8006b46:	4618      	mov	r0, r3
 8006b48:	f000 fe38 	bl	80077bc <RCCEx_PLL3_Config>
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d002      	beq.n	8006b58 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8006b52:	2301      	movs	r3, #1
 8006b54:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8006b58:	4b86      	ldr	r3, [pc, #536]	; (8006d74 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006b5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b5c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006b60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b68:	4a82      	ldr	r2, [pc, #520]	; (8006d74 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006b6a:	430b      	orrs	r3, r1
 8006b6c:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006b6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b76:	f002 0310 	and.w	r3, r2, #16
 8006b7a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006b7e:	2300      	movs	r3, #0
 8006b80:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006b84:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8006b88:	460b      	mov	r3, r1
 8006b8a:	4313      	orrs	r3, r2
 8006b8c:	d01e      	beq.n	8006bcc <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006b8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006b96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b9a:	d10c      	bne.n	8006bb6 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006b9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ba0:	3328      	adds	r3, #40	; 0x28
 8006ba2:	2102      	movs	r1, #2
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	f000 fe09 	bl	80077bc <RCCEx_PLL3_Config>
 8006baa:	4603      	mov	r3, r0
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d002      	beq.n	8006bb6 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8006bb0:	2301      	movs	r3, #1
 8006bb2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006bb6:	4b6f      	ldr	r3, [pc, #444]	; (8006d74 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006bb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bba:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006bbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006bc6:	4a6b      	ldr	r2, [pc, #428]	; (8006d74 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006bc8:	430b      	orrs	r3, r1
 8006bca:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006bcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bd4:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8006bd8:	67bb      	str	r3, [r7, #120]	; 0x78
 8006bda:	2300      	movs	r3, #0
 8006bdc:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006bde:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8006be2:	460b      	mov	r3, r1
 8006be4:	4313      	orrs	r3, r2
 8006be6:	d03e      	beq.n	8006c66 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006be8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bec:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006bf0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006bf4:	d022      	beq.n	8006c3c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8006bf6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006bfa:	d81b      	bhi.n	8006c34 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d003      	beq.n	8006c08 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8006c00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c04:	d00b      	beq.n	8006c1e <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8006c06:	e015      	b.n	8006c34 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006c08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c0c:	3308      	adds	r3, #8
 8006c0e:	2100      	movs	r1, #0
 8006c10:	4618      	mov	r0, r3
 8006c12:	f000 fd21 	bl	8007658 <RCCEx_PLL2_Config>
 8006c16:	4603      	mov	r3, r0
 8006c18:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006c1c:	e00f      	b.n	8006c3e <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006c1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c22:	3328      	adds	r3, #40	; 0x28
 8006c24:	2102      	movs	r1, #2
 8006c26:	4618      	mov	r0, r3
 8006c28:	f000 fdc8 	bl	80077bc <RCCEx_PLL3_Config>
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006c32:	e004      	b.n	8006c3e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c34:	2301      	movs	r3, #1
 8006c36:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006c3a:	e000      	b.n	8006c3e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8006c3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c3e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d10b      	bne.n	8006c5e <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006c46:	4b4b      	ldr	r3, [pc, #300]	; (8006d74 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006c48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c4a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8006c4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c52:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006c56:	4a47      	ldr	r2, [pc, #284]	; (8006d74 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006c58:	430b      	orrs	r3, r1
 8006c5a:	6593      	str	r3, [r2, #88]	; 0x58
 8006c5c:	e003      	b.n	8006c66 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c5e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006c62:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006c66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c6e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8006c72:	673b      	str	r3, [r7, #112]	; 0x70
 8006c74:	2300      	movs	r3, #0
 8006c76:	677b      	str	r3, [r7, #116]	; 0x74
 8006c78:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8006c7c:	460b      	mov	r3, r1
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	d03b      	beq.n	8006cfa <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006c82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c8a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006c8e:	d01f      	beq.n	8006cd0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8006c90:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006c94:	d818      	bhi.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8006c96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c9a:	d003      	beq.n	8006ca4 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8006c9c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006ca0:	d007      	beq.n	8006cb2 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8006ca2:	e011      	b.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ca4:	4b33      	ldr	r3, [pc, #204]	; (8006d74 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ca8:	4a32      	ldr	r2, [pc, #200]	; (8006d74 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006caa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006cae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006cb0:	e00f      	b.n	8006cd2 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006cb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cb6:	3328      	adds	r3, #40	; 0x28
 8006cb8:	2101      	movs	r1, #1
 8006cba:	4618      	mov	r0, r3
 8006cbc:	f000 fd7e 	bl	80077bc <RCCEx_PLL3_Config>
 8006cc0:	4603      	mov	r3, r0
 8006cc2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8006cc6:	e004      	b.n	8006cd2 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006cc8:	2301      	movs	r3, #1
 8006cca:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006cce:	e000      	b.n	8006cd2 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8006cd0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006cd2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d10b      	bne.n	8006cf2 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006cda:	4b26      	ldr	r3, [pc, #152]	; (8006d74 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006cdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cde:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8006ce2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ce6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006cea:	4a22      	ldr	r2, [pc, #136]	; (8006d74 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006cec:	430b      	orrs	r3, r1
 8006cee:	6553      	str	r3, [r2, #84]	; 0x54
 8006cf0:	e003      	b.n	8006cfa <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cf2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006cf6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006cfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d02:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8006d06:	66bb      	str	r3, [r7, #104]	; 0x68
 8006d08:	2300      	movs	r3, #0
 8006d0a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006d0c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8006d10:	460b      	mov	r3, r1
 8006d12:	4313      	orrs	r3, r2
 8006d14:	d034      	beq.n	8006d80 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006d16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d003      	beq.n	8006d28 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8006d20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d24:	d007      	beq.n	8006d36 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8006d26:	e011      	b.n	8006d4c <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d28:	4b12      	ldr	r3, [pc, #72]	; (8006d74 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d2c:	4a11      	ldr	r2, [pc, #68]	; (8006d74 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006d2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d32:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006d34:	e00e      	b.n	8006d54 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006d36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d3a:	3308      	adds	r3, #8
 8006d3c:	2102      	movs	r1, #2
 8006d3e:	4618      	mov	r0, r3
 8006d40:	f000 fc8a 	bl	8007658 <RCCEx_PLL2_Config>
 8006d44:	4603      	mov	r3, r0
 8006d46:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006d4a:	e003      	b.n	8006d54 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8006d4c:	2301      	movs	r3, #1
 8006d4e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006d52:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d54:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d10d      	bne.n	8006d78 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006d5c:	4b05      	ldr	r3, [pc, #20]	; (8006d74 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006d5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d60:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006d64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d6a:	4a02      	ldr	r2, [pc, #8]	; (8006d74 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006d6c:	430b      	orrs	r3, r1
 8006d6e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006d70:	e006      	b.n	8006d80 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8006d72:	bf00      	nop
 8006d74:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d78:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006d7c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006d80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d88:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8006d8c:	663b      	str	r3, [r7, #96]	; 0x60
 8006d8e:	2300      	movs	r3, #0
 8006d90:	667b      	str	r3, [r7, #100]	; 0x64
 8006d92:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8006d96:	460b      	mov	r3, r1
 8006d98:	4313      	orrs	r3, r2
 8006d9a:	d00c      	beq.n	8006db6 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006d9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006da0:	3328      	adds	r3, #40	; 0x28
 8006da2:	2102      	movs	r1, #2
 8006da4:	4618      	mov	r0, r3
 8006da6:	f000 fd09 	bl	80077bc <RCCEx_PLL3_Config>
 8006daa:	4603      	mov	r3, r0
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d002      	beq.n	8006db6 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8006db0:	2301      	movs	r3, #1
 8006db2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006db6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dbe:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8006dc2:	65bb      	str	r3, [r7, #88]	; 0x58
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006dc8:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8006dcc:	460b      	mov	r3, r1
 8006dce:	4313      	orrs	r3, r2
 8006dd0:	d036      	beq.n	8006e40 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006dd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006dd6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006dd8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ddc:	d018      	beq.n	8006e10 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8006dde:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006de2:	d811      	bhi.n	8006e08 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8006de4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006de8:	d014      	beq.n	8006e14 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8006dea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006dee:	d80b      	bhi.n	8006e08 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d011      	beq.n	8006e18 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8006df4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006df8:	d106      	bne.n	8006e08 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006dfa:	4bb7      	ldr	r3, [pc, #732]	; (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dfe:	4ab6      	ldr	r2, [pc, #728]	; (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006e00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e04:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006e06:	e008      	b.n	8006e1a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e08:	2301      	movs	r3, #1
 8006e0a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006e0e:	e004      	b.n	8006e1a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006e10:	bf00      	nop
 8006e12:	e002      	b.n	8006e1a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006e14:	bf00      	nop
 8006e16:	e000      	b.n	8006e1a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006e18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e1a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d10a      	bne.n	8006e38 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006e22:	4bad      	ldr	r3, [pc, #692]	; (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006e24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e26:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006e2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e2e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e30:	4aa9      	ldr	r2, [pc, #676]	; (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006e32:	430b      	orrs	r3, r1
 8006e34:	6553      	str	r3, [r2, #84]	; 0x54
 8006e36:	e003      	b.n	8006e40 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e38:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006e3c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006e40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e48:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8006e4c:	653b      	str	r3, [r7, #80]	; 0x50
 8006e4e:	2300      	movs	r3, #0
 8006e50:	657b      	str	r3, [r7, #84]	; 0x54
 8006e52:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8006e56:	460b      	mov	r3, r1
 8006e58:	4313      	orrs	r3, r2
 8006e5a:	d009      	beq.n	8006e70 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006e5c:	4b9e      	ldr	r3, [pc, #632]	; (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006e5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e60:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006e64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e6a:	4a9b      	ldr	r2, [pc, #620]	; (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006e6c:	430b      	orrs	r3, r1
 8006e6e:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006e70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e78:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8006e7c:	64bb      	str	r3, [r7, #72]	; 0x48
 8006e7e:	2300      	movs	r3, #0
 8006e80:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e82:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8006e86:	460b      	mov	r3, r1
 8006e88:	4313      	orrs	r3, r2
 8006e8a:	d009      	beq.n	8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006e8c:	4b92      	ldr	r3, [pc, #584]	; (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006e8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e90:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8006e94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e98:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e9a:	4a8f      	ldr	r2, [pc, #572]	; (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006e9c:	430b      	orrs	r3, r1
 8006e9e:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006ea0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ea8:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8006eac:	643b      	str	r3, [r7, #64]	; 0x40
 8006eae:	2300      	movs	r3, #0
 8006eb0:	647b      	str	r3, [r7, #68]	; 0x44
 8006eb2:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8006eb6:	460b      	mov	r3, r1
 8006eb8:	4313      	orrs	r3, r2
 8006eba:	d00e      	beq.n	8006eda <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006ebc:	4b86      	ldr	r3, [pc, #536]	; (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006ebe:	691b      	ldr	r3, [r3, #16]
 8006ec0:	4a85      	ldr	r2, [pc, #532]	; (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006ec2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006ec6:	6113      	str	r3, [r2, #16]
 8006ec8:	4b83      	ldr	r3, [pc, #524]	; (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006eca:	6919      	ldr	r1, [r3, #16]
 8006ecc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ed0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006ed4:	4a80      	ldr	r2, [pc, #512]	; (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006ed6:	430b      	orrs	r3, r1
 8006ed8:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006eda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ee2:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8006ee6:	63bb      	str	r3, [r7, #56]	; 0x38
 8006ee8:	2300      	movs	r3, #0
 8006eea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006eec:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8006ef0:	460b      	mov	r3, r1
 8006ef2:	4313      	orrs	r3, r2
 8006ef4:	d009      	beq.n	8006f0a <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006ef6:	4b78      	ldr	r3, [pc, #480]	; (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006ef8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006efa:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8006efe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f04:	4a74      	ldr	r2, [pc, #464]	; (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006f06:	430b      	orrs	r3, r1
 8006f08:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006f0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f12:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8006f16:	633b      	str	r3, [r7, #48]	; 0x30
 8006f18:	2300      	movs	r3, #0
 8006f1a:	637b      	str	r3, [r7, #52]	; 0x34
 8006f1c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8006f20:	460b      	mov	r3, r1
 8006f22:	4313      	orrs	r3, r2
 8006f24:	d00a      	beq.n	8006f3c <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006f26:	4b6c      	ldr	r3, [pc, #432]	; (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006f28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f2a:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8006f2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f36:	4a68      	ldr	r2, [pc, #416]	; (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006f38:	430b      	orrs	r3, r1
 8006f3a:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006f3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f44:	2100      	movs	r1, #0
 8006f46:	62b9      	str	r1, [r7, #40]	; 0x28
 8006f48:	f003 0301 	and.w	r3, r3, #1
 8006f4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f4e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8006f52:	460b      	mov	r3, r1
 8006f54:	4313      	orrs	r3, r2
 8006f56:	d011      	beq.n	8006f7c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006f58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f5c:	3308      	adds	r3, #8
 8006f5e:	2100      	movs	r1, #0
 8006f60:	4618      	mov	r0, r3
 8006f62:	f000 fb79 	bl	8007658 <RCCEx_PLL2_Config>
 8006f66:	4603      	mov	r3, r0
 8006f68:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8006f6c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d003      	beq.n	8006f7c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f74:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006f78:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006f7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f84:	2100      	movs	r1, #0
 8006f86:	6239      	str	r1, [r7, #32]
 8006f88:	f003 0302 	and.w	r3, r3, #2
 8006f8c:	627b      	str	r3, [r7, #36]	; 0x24
 8006f8e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006f92:	460b      	mov	r3, r1
 8006f94:	4313      	orrs	r3, r2
 8006f96:	d011      	beq.n	8006fbc <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006f98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f9c:	3308      	adds	r3, #8
 8006f9e:	2101      	movs	r1, #1
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	f000 fb59 	bl	8007658 <RCCEx_PLL2_Config>
 8006fa6:	4603      	mov	r3, r0
 8006fa8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8006fac:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d003      	beq.n	8006fbc <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fb4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006fb8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006fbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fc4:	2100      	movs	r1, #0
 8006fc6:	61b9      	str	r1, [r7, #24]
 8006fc8:	f003 0304 	and.w	r3, r3, #4
 8006fcc:	61fb      	str	r3, [r7, #28]
 8006fce:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006fd2:	460b      	mov	r3, r1
 8006fd4:	4313      	orrs	r3, r2
 8006fd6:	d011      	beq.n	8006ffc <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006fd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fdc:	3308      	adds	r3, #8
 8006fde:	2102      	movs	r1, #2
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	f000 fb39 	bl	8007658 <RCCEx_PLL2_Config>
 8006fe6:	4603      	mov	r3, r0
 8006fe8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8006fec:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d003      	beq.n	8006ffc <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ff4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006ff8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006ffc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007004:	2100      	movs	r1, #0
 8007006:	6139      	str	r1, [r7, #16]
 8007008:	f003 0308 	and.w	r3, r3, #8
 800700c:	617b      	str	r3, [r7, #20]
 800700e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007012:	460b      	mov	r3, r1
 8007014:	4313      	orrs	r3, r2
 8007016:	d011      	beq.n	800703c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007018:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800701c:	3328      	adds	r3, #40	; 0x28
 800701e:	2100      	movs	r1, #0
 8007020:	4618      	mov	r0, r3
 8007022:	f000 fbcb 	bl	80077bc <RCCEx_PLL3_Config>
 8007026:	4603      	mov	r3, r0
 8007028:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 800702c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007030:	2b00      	cmp	r3, #0
 8007032:	d003      	beq.n	800703c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007034:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007038:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800703c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007044:	2100      	movs	r1, #0
 8007046:	60b9      	str	r1, [r7, #8]
 8007048:	f003 0310 	and.w	r3, r3, #16
 800704c:	60fb      	str	r3, [r7, #12]
 800704e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007052:	460b      	mov	r3, r1
 8007054:	4313      	orrs	r3, r2
 8007056:	d011      	beq.n	800707c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007058:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800705c:	3328      	adds	r3, #40	; 0x28
 800705e:	2101      	movs	r1, #1
 8007060:	4618      	mov	r0, r3
 8007062:	f000 fbab 	bl	80077bc <RCCEx_PLL3_Config>
 8007066:	4603      	mov	r3, r0
 8007068:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800706c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007070:	2b00      	cmp	r3, #0
 8007072:	d003      	beq.n	800707c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007074:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007078:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800707c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007084:	2100      	movs	r1, #0
 8007086:	6039      	str	r1, [r7, #0]
 8007088:	f003 0320 	and.w	r3, r3, #32
 800708c:	607b      	str	r3, [r7, #4]
 800708e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007092:	460b      	mov	r3, r1
 8007094:	4313      	orrs	r3, r2
 8007096:	d011      	beq.n	80070bc <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007098:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800709c:	3328      	adds	r3, #40	; 0x28
 800709e:	2102      	movs	r1, #2
 80070a0:	4618      	mov	r0, r3
 80070a2:	f000 fb8b 	bl	80077bc <RCCEx_PLL3_Config>
 80070a6:	4603      	mov	r3, r0
 80070a8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 80070ac:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d003      	beq.n	80070bc <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070b4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80070b8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 80070bc:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d101      	bne.n	80070c8 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 80070c4:	2300      	movs	r3, #0
 80070c6:	e000      	b.n	80070ca <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 80070c8:	2301      	movs	r3, #1
}
 80070ca:	4618      	mov	r0, r3
 80070cc:	f507 778c 	add.w	r7, r7, #280	; 0x118
 80070d0:	46bd      	mov	sp, r7
 80070d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80070d6:	bf00      	nop
 80070d8:	58024400 	.word	0x58024400

080070dc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80070e0:	f7fe fe00 	bl	8005ce4 <HAL_RCC_GetHCLKFreq>
 80070e4:	4602      	mov	r2, r0
 80070e6:	4b06      	ldr	r3, [pc, #24]	; (8007100 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80070e8:	6a1b      	ldr	r3, [r3, #32]
 80070ea:	091b      	lsrs	r3, r3, #4
 80070ec:	f003 0307 	and.w	r3, r3, #7
 80070f0:	4904      	ldr	r1, [pc, #16]	; (8007104 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80070f2:	5ccb      	ldrb	r3, [r1, r3]
 80070f4:	f003 031f 	and.w	r3, r3, #31
 80070f8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	bd80      	pop	{r7, pc}
 8007100:	58024400 	.word	0x58024400
 8007104:	0800b030 	.word	0x0800b030

08007108 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007108:	b480      	push	{r7}
 800710a:	b089      	sub	sp, #36	; 0x24
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007110:	4ba1      	ldr	r3, [pc, #644]	; (8007398 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007114:	f003 0303 	and.w	r3, r3, #3
 8007118:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800711a:	4b9f      	ldr	r3, [pc, #636]	; (8007398 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800711c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800711e:	0b1b      	lsrs	r3, r3, #12
 8007120:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007124:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007126:	4b9c      	ldr	r3, [pc, #624]	; (8007398 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800712a:	091b      	lsrs	r3, r3, #4
 800712c:	f003 0301 	and.w	r3, r3, #1
 8007130:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8007132:	4b99      	ldr	r3, [pc, #612]	; (8007398 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007134:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007136:	08db      	lsrs	r3, r3, #3
 8007138:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800713c:	693a      	ldr	r2, [r7, #16]
 800713e:	fb02 f303 	mul.w	r3, r2, r3
 8007142:	ee07 3a90 	vmov	s15, r3
 8007146:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800714a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800714e:	697b      	ldr	r3, [r7, #20]
 8007150:	2b00      	cmp	r3, #0
 8007152:	f000 8111 	beq.w	8007378 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007156:	69bb      	ldr	r3, [r7, #24]
 8007158:	2b02      	cmp	r3, #2
 800715a:	f000 8083 	beq.w	8007264 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800715e:	69bb      	ldr	r3, [r7, #24]
 8007160:	2b02      	cmp	r3, #2
 8007162:	f200 80a1 	bhi.w	80072a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007166:	69bb      	ldr	r3, [r7, #24]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d003      	beq.n	8007174 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800716c:	69bb      	ldr	r3, [r7, #24]
 800716e:	2b01      	cmp	r3, #1
 8007170:	d056      	beq.n	8007220 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007172:	e099      	b.n	80072a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007174:	4b88      	ldr	r3, [pc, #544]	; (8007398 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f003 0320 	and.w	r3, r3, #32
 800717c:	2b00      	cmp	r3, #0
 800717e:	d02d      	beq.n	80071dc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007180:	4b85      	ldr	r3, [pc, #532]	; (8007398 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	08db      	lsrs	r3, r3, #3
 8007186:	f003 0303 	and.w	r3, r3, #3
 800718a:	4a84      	ldr	r2, [pc, #528]	; (800739c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800718c:	fa22 f303 	lsr.w	r3, r2, r3
 8007190:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007192:	68bb      	ldr	r3, [r7, #8]
 8007194:	ee07 3a90 	vmov	s15, r3
 8007198:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800719c:	697b      	ldr	r3, [r7, #20]
 800719e:	ee07 3a90 	vmov	s15, r3
 80071a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071aa:	4b7b      	ldr	r3, [pc, #492]	; (8007398 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071b2:	ee07 3a90 	vmov	s15, r3
 80071b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80071be:	eddf 5a78 	vldr	s11, [pc, #480]	; 80073a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80071c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071d6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80071da:	e087      	b.n	80072ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80071dc:	697b      	ldr	r3, [r7, #20]
 80071de:	ee07 3a90 	vmov	s15, r3
 80071e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071e6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80073a4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80071ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071ee:	4b6a      	ldr	r3, [pc, #424]	; (8007398 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071f6:	ee07 3a90 	vmov	s15, r3
 80071fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8007202:	eddf 5a67 	vldr	s11, [pc, #412]	; 80073a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007206:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800720a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800720e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007212:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007216:	ee67 7a27 	vmul.f32	s15, s14, s15
 800721a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800721e:	e065      	b.n	80072ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007220:	697b      	ldr	r3, [r7, #20]
 8007222:	ee07 3a90 	vmov	s15, r3
 8007226:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800722a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80073a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800722e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007232:	4b59      	ldr	r3, [pc, #356]	; (8007398 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007236:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800723a:	ee07 3a90 	vmov	s15, r3
 800723e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007242:	ed97 6a03 	vldr	s12, [r7, #12]
 8007246:	eddf 5a56 	vldr	s11, [pc, #344]	; 80073a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800724a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800724e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007252:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007256:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800725a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800725e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007262:	e043      	b.n	80072ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007264:	697b      	ldr	r3, [r7, #20]
 8007266:	ee07 3a90 	vmov	s15, r3
 800726a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800726e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80073ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007272:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007276:	4b48      	ldr	r3, [pc, #288]	; (8007398 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800727a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800727e:	ee07 3a90 	vmov	s15, r3
 8007282:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007286:	ed97 6a03 	vldr	s12, [r7, #12]
 800728a:	eddf 5a45 	vldr	s11, [pc, #276]	; 80073a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800728e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007292:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007296:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800729a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800729e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80072a6:	e021      	b.n	80072ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80072a8:	697b      	ldr	r3, [r7, #20]
 80072aa:	ee07 3a90 	vmov	s15, r3
 80072ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072b2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80073a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80072b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072ba:	4b37      	ldr	r3, [pc, #220]	; (8007398 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072c2:	ee07 3a90 	vmov	s15, r3
 80072c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80072ce:	eddf 5a34 	vldr	s11, [pc, #208]	; 80073a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80072d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80072de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80072ea:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80072ec:	4b2a      	ldr	r3, [pc, #168]	; (8007398 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072f0:	0a5b      	lsrs	r3, r3, #9
 80072f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072f6:	ee07 3a90 	vmov	s15, r3
 80072fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007302:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007306:	edd7 6a07 	vldr	s13, [r7, #28]
 800730a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800730e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007312:	ee17 2a90 	vmov	r2, s15
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800731a:	4b1f      	ldr	r3, [pc, #124]	; (8007398 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800731c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800731e:	0c1b      	lsrs	r3, r3, #16
 8007320:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007324:	ee07 3a90 	vmov	s15, r3
 8007328:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800732c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007330:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007334:	edd7 6a07 	vldr	s13, [r7, #28]
 8007338:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800733c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007340:	ee17 2a90 	vmov	r2, s15
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007348:	4b13      	ldr	r3, [pc, #76]	; (8007398 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800734a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800734c:	0e1b      	lsrs	r3, r3, #24
 800734e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007352:	ee07 3a90 	vmov	s15, r3
 8007356:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800735a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800735e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007362:	edd7 6a07 	vldr	s13, [r7, #28]
 8007366:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800736a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800736e:	ee17 2a90 	vmov	r2, s15
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007376:	e008      	b.n	800738a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2200      	movs	r2, #0
 800737c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2200      	movs	r2, #0
 8007382:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2200      	movs	r2, #0
 8007388:	609a      	str	r2, [r3, #8]
}
 800738a:	bf00      	nop
 800738c:	3724      	adds	r7, #36	; 0x24
 800738e:	46bd      	mov	sp, r7
 8007390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007394:	4770      	bx	lr
 8007396:	bf00      	nop
 8007398:	58024400 	.word	0x58024400
 800739c:	03d09000 	.word	0x03d09000
 80073a0:	46000000 	.word	0x46000000
 80073a4:	4c742400 	.word	0x4c742400
 80073a8:	4a742400 	.word	0x4a742400
 80073ac:	4af42400 	.word	0x4af42400

080073b0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80073b0:	b480      	push	{r7}
 80073b2:	b089      	sub	sp, #36	; 0x24
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80073b8:	4ba1      	ldr	r3, [pc, #644]	; (8007640 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073bc:	f003 0303 	and.w	r3, r3, #3
 80073c0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80073c2:	4b9f      	ldr	r3, [pc, #636]	; (8007640 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073c6:	0d1b      	lsrs	r3, r3, #20
 80073c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80073cc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80073ce:	4b9c      	ldr	r3, [pc, #624]	; (8007640 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073d2:	0a1b      	lsrs	r3, r3, #8
 80073d4:	f003 0301 	and.w	r3, r3, #1
 80073d8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80073da:	4b99      	ldr	r3, [pc, #612]	; (8007640 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073de:	08db      	lsrs	r3, r3, #3
 80073e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80073e4:	693a      	ldr	r2, [r7, #16]
 80073e6:	fb02 f303 	mul.w	r3, r2, r3
 80073ea:	ee07 3a90 	vmov	s15, r3
 80073ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073f2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80073f6:	697b      	ldr	r3, [r7, #20]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	f000 8111 	beq.w	8007620 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80073fe:	69bb      	ldr	r3, [r7, #24]
 8007400:	2b02      	cmp	r3, #2
 8007402:	f000 8083 	beq.w	800750c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007406:	69bb      	ldr	r3, [r7, #24]
 8007408:	2b02      	cmp	r3, #2
 800740a:	f200 80a1 	bhi.w	8007550 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800740e:	69bb      	ldr	r3, [r7, #24]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d003      	beq.n	800741c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007414:	69bb      	ldr	r3, [r7, #24]
 8007416:	2b01      	cmp	r3, #1
 8007418:	d056      	beq.n	80074c8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800741a:	e099      	b.n	8007550 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800741c:	4b88      	ldr	r3, [pc, #544]	; (8007640 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f003 0320 	and.w	r3, r3, #32
 8007424:	2b00      	cmp	r3, #0
 8007426:	d02d      	beq.n	8007484 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007428:	4b85      	ldr	r3, [pc, #532]	; (8007640 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	08db      	lsrs	r3, r3, #3
 800742e:	f003 0303 	and.w	r3, r3, #3
 8007432:	4a84      	ldr	r2, [pc, #528]	; (8007644 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007434:	fa22 f303 	lsr.w	r3, r2, r3
 8007438:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800743a:	68bb      	ldr	r3, [r7, #8]
 800743c:	ee07 3a90 	vmov	s15, r3
 8007440:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007444:	697b      	ldr	r3, [r7, #20]
 8007446:	ee07 3a90 	vmov	s15, r3
 800744a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800744e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007452:	4b7b      	ldr	r3, [pc, #492]	; (8007640 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007456:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800745a:	ee07 3a90 	vmov	s15, r3
 800745e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007462:	ed97 6a03 	vldr	s12, [r7, #12]
 8007466:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007648 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800746a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800746e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007472:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007476:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800747a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800747e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007482:	e087      	b.n	8007594 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007484:	697b      	ldr	r3, [r7, #20]
 8007486:	ee07 3a90 	vmov	s15, r3
 800748a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800748e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800764c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007492:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007496:	4b6a      	ldr	r3, [pc, #424]	; (8007640 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800749a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800749e:	ee07 3a90 	vmov	s15, r3
 80074a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80074aa:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007648 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80074ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80074c6:	e065      	b.n	8007594 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80074c8:	697b      	ldr	r3, [r7, #20]
 80074ca:	ee07 3a90 	vmov	s15, r3
 80074ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074d2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007650 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80074d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074da:	4b59      	ldr	r3, [pc, #356]	; (8007640 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074e2:	ee07 3a90 	vmov	s15, r3
 80074e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80074ee:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007648 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80074f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007502:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007506:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800750a:	e043      	b.n	8007594 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800750c:	697b      	ldr	r3, [r7, #20]
 800750e:	ee07 3a90 	vmov	s15, r3
 8007512:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007516:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007654 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800751a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800751e:	4b48      	ldr	r3, [pc, #288]	; (8007640 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007522:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007526:	ee07 3a90 	vmov	s15, r3
 800752a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800752e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007532:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007648 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007536:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800753a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800753e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007542:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007546:	ee67 7a27 	vmul.f32	s15, s14, s15
 800754a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800754e:	e021      	b.n	8007594 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007550:	697b      	ldr	r3, [r7, #20]
 8007552:	ee07 3a90 	vmov	s15, r3
 8007556:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800755a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007650 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800755e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007562:	4b37      	ldr	r3, [pc, #220]	; (8007640 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007566:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800756a:	ee07 3a90 	vmov	s15, r3
 800756e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007572:	ed97 6a03 	vldr	s12, [r7, #12]
 8007576:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007648 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800757a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800757e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007582:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007586:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800758a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800758e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007592:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007594:	4b2a      	ldr	r3, [pc, #168]	; (8007640 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007598:	0a5b      	lsrs	r3, r3, #9
 800759a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800759e:	ee07 3a90 	vmov	s15, r3
 80075a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80075aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80075ae:	edd7 6a07 	vldr	s13, [r7, #28]
 80075b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80075b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075ba:	ee17 2a90 	vmov	r2, s15
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80075c2:	4b1f      	ldr	r3, [pc, #124]	; (8007640 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075c6:	0c1b      	lsrs	r3, r3, #16
 80075c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075cc:	ee07 3a90 	vmov	s15, r3
 80075d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80075d8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80075dc:	edd7 6a07 	vldr	s13, [r7, #28]
 80075e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80075e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075e8:	ee17 2a90 	vmov	r2, s15
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80075f0:	4b13      	ldr	r3, [pc, #76]	; (8007640 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075f4:	0e1b      	lsrs	r3, r3, #24
 80075f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075fa:	ee07 3a90 	vmov	s15, r3
 80075fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007602:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007606:	ee37 7a87 	vadd.f32	s14, s15, s14
 800760a:	edd7 6a07 	vldr	s13, [r7, #28]
 800760e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007612:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007616:	ee17 2a90 	vmov	r2, s15
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800761e:	e008      	b.n	8007632 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2200      	movs	r2, #0
 8007624:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2200      	movs	r2, #0
 800762a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2200      	movs	r2, #0
 8007630:	609a      	str	r2, [r3, #8]
}
 8007632:	bf00      	nop
 8007634:	3724      	adds	r7, #36	; 0x24
 8007636:	46bd      	mov	sp, r7
 8007638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763c:	4770      	bx	lr
 800763e:	bf00      	nop
 8007640:	58024400 	.word	0x58024400
 8007644:	03d09000 	.word	0x03d09000
 8007648:	46000000 	.word	0x46000000
 800764c:	4c742400 	.word	0x4c742400
 8007650:	4a742400 	.word	0x4a742400
 8007654:	4af42400 	.word	0x4af42400

08007658 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b084      	sub	sp, #16
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
 8007660:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007662:	2300      	movs	r3, #0
 8007664:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007666:	4b53      	ldr	r3, [pc, #332]	; (80077b4 <RCCEx_PLL2_Config+0x15c>)
 8007668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800766a:	f003 0303 	and.w	r3, r3, #3
 800766e:	2b03      	cmp	r3, #3
 8007670:	d101      	bne.n	8007676 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007672:	2301      	movs	r3, #1
 8007674:	e099      	b.n	80077aa <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007676:	4b4f      	ldr	r3, [pc, #316]	; (80077b4 <RCCEx_PLL2_Config+0x15c>)
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	4a4e      	ldr	r2, [pc, #312]	; (80077b4 <RCCEx_PLL2_Config+0x15c>)
 800767c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007680:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007682:	f7fa f957 	bl	8001934 <HAL_GetTick>
 8007686:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007688:	e008      	b.n	800769c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800768a:	f7fa f953 	bl	8001934 <HAL_GetTick>
 800768e:	4602      	mov	r2, r0
 8007690:	68bb      	ldr	r3, [r7, #8]
 8007692:	1ad3      	subs	r3, r2, r3
 8007694:	2b02      	cmp	r3, #2
 8007696:	d901      	bls.n	800769c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007698:	2303      	movs	r3, #3
 800769a:	e086      	b.n	80077aa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800769c:	4b45      	ldr	r3, [pc, #276]	; (80077b4 <RCCEx_PLL2_Config+0x15c>)
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d1f0      	bne.n	800768a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80076a8:	4b42      	ldr	r3, [pc, #264]	; (80077b4 <RCCEx_PLL2_Config+0x15c>)
 80076aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076ac:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	031b      	lsls	r3, r3, #12
 80076b6:	493f      	ldr	r1, [pc, #252]	; (80077b4 <RCCEx_PLL2_Config+0x15c>)
 80076b8:	4313      	orrs	r3, r2
 80076ba:	628b      	str	r3, [r1, #40]	; 0x28
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	685b      	ldr	r3, [r3, #4]
 80076c0:	3b01      	subs	r3, #1
 80076c2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	689b      	ldr	r3, [r3, #8]
 80076ca:	3b01      	subs	r3, #1
 80076cc:	025b      	lsls	r3, r3, #9
 80076ce:	b29b      	uxth	r3, r3
 80076d0:	431a      	orrs	r2, r3
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	68db      	ldr	r3, [r3, #12]
 80076d6:	3b01      	subs	r3, #1
 80076d8:	041b      	lsls	r3, r3, #16
 80076da:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80076de:	431a      	orrs	r2, r3
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	691b      	ldr	r3, [r3, #16]
 80076e4:	3b01      	subs	r3, #1
 80076e6:	061b      	lsls	r3, r3, #24
 80076e8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80076ec:	4931      	ldr	r1, [pc, #196]	; (80077b4 <RCCEx_PLL2_Config+0x15c>)
 80076ee:	4313      	orrs	r3, r2
 80076f0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80076f2:	4b30      	ldr	r3, [pc, #192]	; (80077b4 <RCCEx_PLL2_Config+0x15c>)
 80076f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076f6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	695b      	ldr	r3, [r3, #20]
 80076fe:	492d      	ldr	r1, [pc, #180]	; (80077b4 <RCCEx_PLL2_Config+0x15c>)
 8007700:	4313      	orrs	r3, r2
 8007702:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007704:	4b2b      	ldr	r3, [pc, #172]	; (80077b4 <RCCEx_PLL2_Config+0x15c>)
 8007706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007708:	f023 0220 	bic.w	r2, r3, #32
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	699b      	ldr	r3, [r3, #24]
 8007710:	4928      	ldr	r1, [pc, #160]	; (80077b4 <RCCEx_PLL2_Config+0x15c>)
 8007712:	4313      	orrs	r3, r2
 8007714:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007716:	4b27      	ldr	r3, [pc, #156]	; (80077b4 <RCCEx_PLL2_Config+0x15c>)
 8007718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800771a:	4a26      	ldr	r2, [pc, #152]	; (80077b4 <RCCEx_PLL2_Config+0x15c>)
 800771c:	f023 0310 	bic.w	r3, r3, #16
 8007720:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007722:	4b24      	ldr	r3, [pc, #144]	; (80077b4 <RCCEx_PLL2_Config+0x15c>)
 8007724:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007726:	4b24      	ldr	r3, [pc, #144]	; (80077b8 <RCCEx_PLL2_Config+0x160>)
 8007728:	4013      	ands	r3, r2
 800772a:	687a      	ldr	r2, [r7, #4]
 800772c:	69d2      	ldr	r2, [r2, #28]
 800772e:	00d2      	lsls	r2, r2, #3
 8007730:	4920      	ldr	r1, [pc, #128]	; (80077b4 <RCCEx_PLL2_Config+0x15c>)
 8007732:	4313      	orrs	r3, r2
 8007734:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007736:	4b1f      	ldr	r3, [pc, #124]	; (80077b4 <RCCEx_PLL2_Config+0x15c>)
 8007738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800773a:	4a1e      	ldr	r2, [pc, #120]	; (80077b4 <RCCEx_PLL2_Config+0x15c>)
 800773c:	f043 0310 	orr.w	r3, r3, #16
 8007740:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d106      	bne.n	8007756 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007748:	4b1a      	ldr	r3, [pc, #104]	; (80077b4 <RCCEx_PLL2_Config+0x15c>)
 800774a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800774c:	4a19      	ldr	r2, [pc, #100]	; (80077b4 <RCCEx_PLL2_Config+0x15c>)
 800774e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007752:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007754:	e00f      	b.n	8007776 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	2b01      	cmp	r3, #1
 800775a:	d106      	bne.n	800776a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800775c:	4b15      	ldr	r3, [pc, #84]	; (80077b4 <RCCEx_PLL2_Config+0x15c>)
 800775e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007760:	4a14      	ldr	r2, [pc, #80]	; (80077b4 <RCCEx_PLL2_Config+0x15c>)
 8007762:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007766:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007768:	e005      	b.n	8007776 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800776a:	4b12      	ldr	r3, [pc, #72]	; (80077b4 <RCCEx_PLL2_Config+0x15c>)
 800776c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800776e:	4a11      	ldr	r2, [pc, #68]	; (80077b4 <RCCEx_PLL2_Config+0x15c>)
 8007770:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007774:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007776:	4b0f      	ldr	r3, [pc, #60]	; (80077b4 <RCCEx_PLL2_Config+0x15c>)
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	4a0e      	ldr	r2, [pc, #56]	; (80077b4 <RCCEx_PLL2_Config+0x15c>)
 800777c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007780:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007782:	f7fa f8d7 	bl	8001934 <HAL_GetTick>
 8007786:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007788:	e008      	b.n	800779c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800778a:	f7fa f8d3 	bl	8001934 <HAL_GetTick>
 800778e:	4602      	mov	r2, r0
 8007790:	68bb      	ldr	r3, [r7, #8]
 8007792:	1ad3      	subs	r3, r2, r3
 8007794:	2b02      	cmp	r3, #2
 8007796:	d901      	bls.n	800779c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007798:	2303      	movs	r3, #3
 800779a:	e006      	b.n	80077aa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800779c:	4b05      	ldr	r3, [pc, #20]	; (80077b4 <RCCEx_PLL2_Config+0x15c>)
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d0f0      	beq.n	800778a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80077a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80077aa:	4618      	mov	r0, r3
 80077ac:	3710      	adds	r7, #16
 80077ae:	46bd      	mov	sp, r7
 80077b0:	bd80      	pop	{r7, pc}
 80077b2:	bf00      	nop
 80077b4:	58024400 	.word	0x58024400
 80077b8:	ffff0007 	.word	0xffff0007

080077bc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b084      	sub	sp, #16
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
 80077c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80077c6:	2300      	movs	r3, #0
 80077c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80077ca:	4b53      	ldr	r3, [pc, #332]	; (8007918 <RCCEx_PLL3_Config+0x15c>)
 80077cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077ce:	f003 0303 	and.w	r3, r3, #3
 80077d2:	2b03      	cmp	r3, #3
 80077d4:	d101      	bne.n	80077da <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80077d6:	2301      	movs	r3, #1
 80077d8:	e099      	b.n	800790e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80077da:	4b4f      	ldr	r3, [pc, #316]	; (8007918 <RCCEx_PLL3_Config+0x15c>)
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	4a4e      	ldr	r2, [pc, #312]	; (8007918 <RCCEx_PLL3_Config+0x15c>)
 80077e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80077e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80077e6:	f7fa f8a5 	bl	8001934 <HAL_GetTick>
 80077ea:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80077ec:	e008      	b.n	8007800 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80077ee:	f7fa f8a1 	bl	8001934 <HAL_GetTick>
 80077f2:	4602      	mov	r2, r0
 80077f4:	68bb      	ldr	r3, [r7, #8]
 80077f6:	1ad3      	subs	r3, r2, r3
 80077f8:	2b02      	cmp	r3, #2
 80077fa:	d901      	bls.n	8007800 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80077fc:	2303      	movs	r3, #3
 80077fe:	e086      	b.n	800790e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007800:	4b45      	ldr	r3, [pc, #276]	; (8007918 <RCCEx_PLL3_Config+0x15c>)
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007808:	2b00      	cmp	r3, #0
 800780a:	d1f0      	bne.n	80077ee <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800780c:	4b42      	ldr	r3, [pc, #264]	; (8007918 <RCCEx_PLL3_Config+0x15c>)
 800780e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007810:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	051b      	lsls	r3, r3, #20
 800781a:	493f      	ldr	r1, [pc, #252]	; (8007918 <RCCEx_PLL3_Config+0x15c>)
 800781c:	4313      	orrs	r3, r2
 800781e:	628b      	str	r3, [r1, #40]	; 0x28
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	685b      	ldr	r3, [r3, #4]
 8007824:	3b01      	subs	r3, #1
 8007826:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	689b      	ldr	r3, [r3, #8]
 800782e:	3b01      	subs	r3, #1
 8007830:	025b      	lsls	r3, r3, #9
 8007832:	b29b      	uxth	r3, r3
 8007834:	431a      	orrs	r2, r3
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	68db      	ldr	r3, [r3, #12]
 800783a:	3b01      	subs	r3, #1
 800783c:	041b      	lsls	r3, r3, #16
 800783e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007842:	431a      	orrs	r2, r3
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	691b      	ldr	r3, [r3, #16]
 8007848:	3b01      	subs	r3, #1
 800784a:	061b      	lsls	r3, r3, #24
 800784c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007850:	4931      	ldr	r1, [pc, #196]	; (8007918 <RCCEx_PLL3_Config+0x15c>)
 8007852:	4313      	orrs	r3, r2
 8007854:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007856:	4b30      	ldr	r3, [pc, #192]	; (8007918 <RCCEx_PLL3_Config+0x15c>)
 8007858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800785a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	695b      	ldr	r3, [r3, #20]
 8007862:	492d      	ldr	r1, [pc, #180]	; (8007918 <RCCEx_PLL3_Config+0x15c>)
 8007864:	4313      	orrs	r3, r2
 8007866:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007868:	4b2b      	ldr	r3, [pc, #172]	; (8007918 <RCCEx_PLL3_Config+0x15c>)
 800786a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800786c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	699b      	ldr	r3, [r3, #24]
 8007874:	4928      	ldr	r1, [pc, #160]	; (8007918 <RCCEx_PLL3_Config+0x15c>)
 8007876:	4313      	orrs	r3, r2
 8007878:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800787a:	4b27      	ldr	r3, [pc, #156]	; (8007918 <RCCEx_PLL3_Config+0x15c>)
 800787c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800787e:	4a26      	ldr	r2, [pc, #152]	; (8007918 <RCCEx_PLL3_Config+0x15c>)
 8007880:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007884:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007886:	4b24      	ldr	r3, [pc, #144]	; (8007918 <RCCEx_PLL3_Config+0x15c>)
 8007888:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800788a:	4b24      	ldr	r3, [pc, #144]	; (800791c <RCCEx_PLL3_Config+0x160>)
 800788c:	4013      	ands	r3, r2
 800788e:	687a      	ldr	r2, [r7, #4]
 8007890:	69d2      	ldr	r2, [r2, #28]
 8007892:	00d2      	lsls	r2, r2, #3
 8007894:	4920      	ldr	r1, [pc, #128]	; (8007918 <RCCEx_PLL3_Config+0x15c>)
 8007896:	4313      	orrs	r3, r2
 8007898:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800789a:	4b1f      	ldr	r3, [pc, #124]	; (8007918 <RCCEx_PLL3_Config+0x15c>)
 800789c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800789e:	4a1e      	ldr	r2, [pc, #120]	; (8007918 <RCCEx_PLL3_Config+0x15c>)
 80078a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80078a4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d106      	bne.n	80078ba <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80078ac:	4b1a      	ldr	r3, [pc, #104]	; (8007918 <RCCEx_PLL3_Config+0x15c>)
 80078ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078b0:	4a19      	ldr	r2, [pc, #100]	; (8007918 <RCCEx_PLL3_Config+0x15c>)
 80078b2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80078b6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80078b8:	e00f      	b.n	80078da <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	2b01      	cmp	r3, #1
 80078be:	d106      	bne.n	80078ce <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80078c0:	4b15      	ldr	r3, [pc, #84]	; (8007918 <RCCEx_PLL3_Config+0x15c>)
 80078c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078c4:	4a14      	ldr	r2, [pc, #80]	; (8007918 <RCCEx_PLL3_Config+0x15c>)
 80078c6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80078ca:	62d3      	str	r3, [r2, #44]	; 0x2c
 80078cc:	e005      	b.n	80078da <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80078ce:	4b12      	ldr	r3, [pc, #72]	; (8007918 <RCCEx_PLL3_Config+0x15c>)
 80078d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078d2:	4a11      	ldr	r2, [pc, #68]	; (8007918 <RCCEx_PLL3_Config+0x15c>)
 80078d4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80078d8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80078da:	4b0f      	ldr	r3, [pc, #60]	; (8007918 <RCCEx_PLL3_Config+0x15c>)
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	4a0e      	ldr	r2, [pc, #56]	; (8007918 <RCCEx_PLL3_Config+0x15c>)
 80078e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80078e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80078e6:	f7fa f825 	bl	8001934 <HAL_GetTick>
 80078ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80078ec:	e008      	b.n	8007900 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80078ee:	f7fa f821 	bl	8001934 <HAL_GetTick>
 80078f2:	4602      	mov	r2, r0
 80078f4:	68bb      	ldr	r3, [r7, #8]
 80078f6:	1ad3      	subs	r3, r2, r3
 80078f8:	2b02      	cmp	r3, #2
 80078fa:	d901      	bls.n	8007900 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80078fc:	2303      	movs	r3, #3
 80078fe:	e006      	b.n	800790e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007900:	4b05      	ldr	r3, [pc, #20]	; (8007918 <RCCEx_PLL3_Config+0x15c>)
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007908:	2b00      	cmp	r3, #0
 800790a:	d0f0      	beq.n	80078ee <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800790c:	7bfb      	ldrb	r3, [r7, #15]
}
 800790e:	4618      	mov	r0, r3
 8007910:	3710      	adds	r7, #16
 8007912:	46bd      	mov	sp, r7
 8007914:	bd80      	pop	{r7, pc}
 8007916:	bf00      	nop
 8007918:	58024400 	.word	0x58024400
 800791c:	ffff0007 	.word	0xffff0007

08007920 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b084      	sub	sp, #16
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d101      	bne.n	8007932 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800792e:	2301      	movs	r3, #1
 8007930:	e10f      	b.n	8007b52 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2200      	movs	r2, #0
 8007936:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	4a87      	ldr	r2, [pc, #540]	; (8007b5c <HAL_SPI_Init+0x23c>)
 800793e:	4293      	cmp	r3, r2
 8007940:	d00f      	beq.n	8007962 <HAL_SPI_Init+0x42>
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	4a86      	ldr	r2, [pc, #536]	; (8007b60 <HAL_SPI_Init+0x240>)
 8007948:	4293      	cmp	r3, r2
 800794a:	d00a      	beq.n	8007962 <HAL_SPI_Init+0x42>
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	4a84      	ldr	r2, [pc, #528]	; (8007b64 <HAL_SPI_Init+0x244>)
 8007952:	4293      	cmp	r3, r2
 8007954:	d005      	beq.n	8007962 <HAL_SPI_Init+0x42>
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	68db      	ldr	r3, [r3, #12]
 800795a:	2b0f      	cmp	r3, #15
 800795c:	d901      	bls.n	8007962 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800795e:	2301      	movs	r3, #1
 8007960:	e0f7      	b.n	8007b52 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8007962:	6878      	ldr	r0, [r7, #4]
 8007964:	f000 ff76 	bl	8008854 <SPI_GetPacketSize>
 8007968:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	4a7b      	ldr	r2, [pc, #492]	; (8007b5c <HAL_SPI_Init+0x23c>)
 8007970:	4293      	cmp	r3, r2
 8007972:	d00c      	beq.n	800798e <HAL_SPI_Init+0x6e>
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	4a79      	ldr	r2, [pc, #484]	; (8007b60 <HAL_SPI_Init+0x240>)
 800797a:	4293      	cmp	r3, r2
 800797c:	d007      	beq.n	800798e <HAL_SPI_Init+0x6e>
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	4a78      	ldr	r2, [pc, #480]	; (8007b64 <HAL_SPI_Init+0x244>)
 8007984:	4293      	cmp	r3, r2
 8007986:	d002      	beq.n	800798e <HAL_SPI_Init+0x6e>
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	2b08      	cmp	r3, #8
 800798c:	d811      	bhi.n	80079b2 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007992:	4a72      	ldr	r2, [pc, #456]	; (8007b5c <HAL_SPI_Init+0x23c>)
 8007994:	4293      	cmp	r3, r2
 8007996:	d009      	beq.n	80079ac <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	4a70      	ldr	r2, [pc, #448]	; (8007b60 <HAL_SPI_Init+0x240>)
 800799e:	4293      	cmp	r3, r2
 80079a0:	d004      	beq.n	80079ac <HAL_SPI_Init+0x8c>
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	4a6f      	ldr	r2, [pc, #444]	; (8007b64 <HAL_SPI_Init+0x244>)
 80079a8:	4293      	cmp	r3, r2
 80079aa:	d104      	bne.n	80079b6 <HAL_SPI_Init+0x96>
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	2b10      	cmp	r3, #16
 80079b0:	d901      	bls.n	80079b6 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80079b2:	2301      	movs	r3, #1
 80079b4:	e0cd      	b.n	8007b52 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80079bc:	b2db      	uxtb	r3, r3
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d106      	bne.n	80079d0 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2200      	movs	r2, #0
 80079c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	f7f9 fa2a 	bl	8000e24 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2202      	movs	r2, #2
 80079d4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	681a      	ldr	r2, [r3, #0]
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	f022 0201 	bic.w	r2, r2, #1
 80079e6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	689b      	ldr	r3, [r3, #8]
 80079ee:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 80079f2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	699b      	ldr	r3, [r3, #24]
 80079f8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80079fc:	d119      	bne.n	8007a32 <HAL_SPI_Init+0x112>
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	685b      	ldr	r3, [r3, #4]
 8007a02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007a06:	d103      	bne.n	8007a10 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d008      	beq.n	8007a22 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d10c      	bne.n	8007a32 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007a1c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007a20:	d107      	bne.n	8007a32 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	681a      	ldr	r2, [r3, #0]
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007a30:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	685b      	ldr	r3, [r3, #4]
 8007a36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d00f      	beq.n	8007a5e <HAL_SPI_Init+0x13e>
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	68db      	ldr	r3, [r3, #12]
 8007a42:	2b06      	cmp	r3, #6
 8007a44:	d90b      	bls.n	8007a5e <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	430a      	orrs	r2, r1
 8007a5a:	601a      	str	r2, [r3, #0]
 8007a5c:	e007      	b.n	8007a6e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	681a      	ldr	r2, [r3, #0]
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007a6c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	69da      	ldr	r2, [r3, #28]
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a76:	431a      	orrs	r2, r3
 8007a78:	68bb      	ldr	r3, [r7, #8]
 8007a7a:	431a      	orrs	r2, r3
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a80:	ea42 0103 	orr.w	r1, r2, r3
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	68da      	ldr	r2, [r3, #12]
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	430a      	orrs	r2, r1
 8007a8e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a98:	431a      	orrs	r2, r3
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a9e:	431a      	orrs	r2, r3
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	699b      	ldr	r3, [r3, #24]
 8007aa4:	431a      	orrs	r2, r3
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	691b      	ldr	r3, [r3, #16]
 8007aaa:	431a      	orrs	r2, r3
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	695b      	ldr	r3, [r3, #20]
 8007ab0:	431a      	orrs	r2, r3
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6a1b      	ldr	r3, [r3, #32]
 8007ab6:	431a      	orrs	r2, r3
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	685b      	ldr	r3, [r3, #4]
 8007abc:	431a      	orrs	r2, r3
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ac2:	431a      	orrs	r2, r3
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	689b      	ldr	r3, [r3, #8]
 8007ac8:	431a      	orrs	r2, r3
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ace:	ea42 0103 	orr.w	r1, r2, r3
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	430a      	orrs	r2, r1
 8007adc:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	685b      	ldr	r3, [r3, #4]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d113      	bne.n	8007b0e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	689b      	ldr	r3, [r3, #8]
 8007aec:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007af8:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	689b      	ldr	r3, [r3, #8]
 8007b00:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007b0c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f022 0201 	bic.w	r2, r2, #1
 8007b1c:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	685b      	ldr	r3, [r3, #4]
 8007b22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d00a      	beq.n	8007b40 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	68db      	ldr	r3, [r3, #12]
 8007b30:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	430a      	orrs	r2, r1
 8007b3e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2200      	movs	r2, #0
 8007b44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2201      	movs	r2, #1
 8007b4c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8007b50:	2300      	movs	r3, #0
}
 8007b52:	4618      	mov	r0, r3
 8007b54:	3710      	adds	r7, #16
 8007b56:	46bd      	mov	sp, r7
 8007b58:	bd80      	pop	{r7, pc}
 8007b5a:	bf00      	nop
 8007b5c:	40013000 	.word	0x40013000
 8007b60:	40003800 	.word	0x40003800
 8007b64:	40003c00 	.word	0x40003c00

08007b68 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b08a      	sub	sp, #40	; 0x28
 8007b6c:	af02      	add	r7, sp, #8
 8007b6e:	60f8      	str	r0, [r7, #12]
 8007b70:	60b9      	str	r1, [r7, #8]
 8007b72:	603b      	str	r3, [r7, #0]
 8007b74:	4613      	mov	r3, r2
 8007b76:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	3320      	adds	r3, #32
 8007b7e:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007b80:	2300      	movs	r3, #0
 8007b82:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007b8a:	2b01      	cmp	r3, #1
 8007b8c:	d101      	bne.n	8007b92 <HAL_SPI_Transmit+0x2a>
 8007b8e:	2302      	movs	r3, #2
 8007b90:	e1e1      	b.n	8007f56 <HAL_SPI_Transmit+0x3ee>
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	2201      	movs	r2, #1
 8007b96:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007b9a:	f7f9 fecb 	bl	8001934 <HAL_GetTick>
 8007b9e:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007ba6:	b2db      	uxtb	r3, r3
 8007ba8:	2b01      	cmp	r3, #1
 8007baa:	d007      	beq.n	8007bbc <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8007bac:	2302      	movs	r3, #2
 8007bae:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8007bb8:	7efb      	ldrb	r3, [r7, #27]
 8007bba:	e1cc      	b.n	8007f56 <HAL_SPI_Transmit+0x3ee>
  }

  if ((pData == NULL) || (Size == 0UL))
 8007bbc:	68bb      	ldr	r3, [r7, #8]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d002      	beq.n	8007bc8 <HAL_SPI_Transmit+0x60>
 8007bc2:	88fb      	ldrh	r3, [r7, #6]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d107      	bne.n	8007bd8 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8007bc8:	2301      	movs	r3, #1
 8007bca:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	2200      	movs	r2, #0
 8007bd0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8007bd4:	7efb      	ldrb	r3, [r7, #27]
 8007bd6:	e1be      	b.n	8007f56 <HAL_SPI_Transmit+0x3ee>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	2203      	movs	r2, #3
 8007bdc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	2200      	movs	r2, #0
 8007be4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	68ba      	ldr	r2, [r7, #8]
 8007bec:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	88fa      	ldrh	r2, [r7, #6]
 8007bf2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	88fa      	ldrh	r2, [r7, #6]
 8007bfa:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	2200      	movs	r2, #0
 8007c02:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	2200      	movs	r2, #0
 8007c08:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	2200      	movs	r2, #0
 8007c10:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	2200      	movs	r2, #0
 8007c18:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	689b      	ldr	r3, [r3, #8]
 8007c24:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8007c28:	d108      	bne.n	8007c3c <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	681a      	ldr	r2, [r3, #0]
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007c38:	601a      	str	r2, [r3, #0]
 8007c3a:	e009      	b.n	8007c50 <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	68db      	ldr	r3, [r3, #12]
 8007c42:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8007c4e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	685a      	ldr	r2, [r3, #4]
 8007c56:	4b96      	ldr	r3, [pc, #600]	; (8007eb0 <HAL_SPI_Transmit+0x348>)
 8007c58:	4013      	ands	r3, r2
 8007c5a:	88f9      	ldrh	r1, [r7, #6]
 8007c5c:	68fa      	ldr	r2, [r7, #12]
 8007c5e:	6812      	ldr	r2, [r2, #0]
 8007c60:	430b      	orrs	r3, r1
 8007c62:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	681a      	ldr	r2, [r3, #0]
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	f042 0201 	orr.w	r2, r2, #1
 8007c72:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	685b      	ldr	r3, [r3, #4]
 8007c78:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007c7c:	d107      	bne.n	8007c8e <HAL_SPI_Transmit+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	681a      	ldr	r2, [r3, #0]
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007c8c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	68db      	ldr	r3, [r3, #12]
 8007c92:	2b0f      	cmp	r3, #15
 8007c94:	d947      	bls.n	8007d26 <HAL_SPI_Transmit+0x1be>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8007c96:	e03f      	b.n	8007d18 <HAL_SPI_Transmit+0x1b0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	695b      	ldr	r3, [r3, #20]
 8007c9e:	f003 0302 	and.w	r3, r3, #2
 8007ca2:	2b02      	cmp	r3, #2
 8007ca4:	d114      	bne.n	8007cd0 <HAL_SPI_Transmit+0x168>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	6812      	ldr	r2, [r2, #0]
 8007cb0:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007cb6:	1d1a      	adds	r2, r3, #4
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007cc2:	b29b      	uxth	r3, r3
 8007cc4:	3b01      	subs	r3, #1
 8007cc6:	b29a      	uxth	r2, r3
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8007cce:	e023      	b.n	8007d18 <HAL_SPI_Transmit+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007cd0:	f7f9 fe30 	bl	8001934 <HAL_GetTick>
 8007cd4:	4602      	mov	r2, r0
 8007cd6:	697b      	ldr	r3, [r7, #20]
 8007cd8:	1ad3      	subs	r3, r2, r3
 8007cda:	683a      	ldr	r2, [r7, #0]
 8007cdc:	429a      	cmp	r2, r3
 8007cde:	d803      	bhi.n	8007ce8 <HAL_SPI_Transmit+0x180>
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007ce6:	d102      	bne.n	8007cee <HAL_SPI_Transmit+0x186>
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d114      	bne.n	8007d18 <HAL_SPI_Transmit+0x1b0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007cee:	68f8      	ldr	r0, [r7, #12]
 8007cf0:	f000 fce2 	bl	80086b8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d02:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	2201      	movs	r2, #1
 8007d10:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8007d14:	2303      	movs	r3, #3
 8007d16:	e11e      	b.n	8007f56 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007d1e:	b29b      	uxth	r3, r3
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d1b9      	bne.n	8007c98 <HAL_SPI_Transmit+0x130>
 8007d24:	e0f1      	b.n	8007f0a <HAL_SPI_Transmit+0x3a2>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	68db      	ldr	r3, [r3, #12]
 8007d2a:	2b07      	cmp	r3, #7
 8007d2c:	f240 80e6 	bls.w	8007efc <HAL_SPI_Transmit+0x394>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8007d30:	e05d      	b.n	8007dee <HAL_SPI_Transmit+0x286>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	695b      	ldr	r3, [r3, #20]
 8007d38:	f003 0302 	and.w	r3, r3, #2
 8007d3c:	2b02      	cmp	r3, #2
 8007d3e:	d132      	bne.n	8007da6 <HAL_SPI_Transmit+0x23e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007d46:	b29b      	uxth	r3, r3
 8007d48:	2b01      	cmp	r3, #1
 8007d4a:	d918      	bls.n	8007d7e <HAL_SPI_Transmit+0x216>
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d014      	beq.n	8007d7e <HAL_SPI_Transmit+0x216>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	6812      	ldr	r2, [r2, #0]
 8007d5e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d64:	1d1a      	adds	r2, r3, #4
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007d70:	b29b      	uxth	r3, r3
 8007d72:	3b02      	subs	r3, #2
 8007d74:	b29a      	uxth	r2, r3
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8007d7c:	e037      	b.n	8007dee <HAL_SPI_Transmit+0x286>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d82:	881a      	ldrh	r2, [r3, #0]
 8007d84:	69fb      	ldr	r3, [r7, #28]
 8007d86:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d8c:	1c9a      	adds	r2, r3, #2
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007d98:	b29b      	uxth	r3, r3
 8007d9a:	3b01      	subs	r3, #1
 8007d9c:	b29a      	uxth	r2, r3
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8007da4:	e023      	b.n	8007dee <HAL_SPI_Transmit+0x286>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007da6:	f7f9 fdc5 	bl	8001934 <HAL_GetTick>
 8007daa:	4602      	mov	r2, r0
 8007dac:	697b      	ldr	r3, [r7, #20]
 8007dae:	1ad3      	subs	r3, r2, r3
 8007db0:	683a      	ldr	r2, [r7, #0]
 8007db2:	429a      	cmp	r2, r3
 8007db4:	d803      	bhi.n	8007dbe <HAL_SPI_Transmit+0x256>
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007dbc:	d102      	bne.n	8007dc4 <HAL_SPI_Transmit+0x25c>
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d114      	bne.n	8007dee <HAL_SPI_Transmit+0x286>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007dc4:	68f8      	ldr	r0, [r7, #12]
 8007dc6:	f000 fc77 	bl	80086b8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	2200      	movs	r2, #0
 8007dce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007dd8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	2201      	movs	r2, #1
 8007de6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8007dea:	2303      	movs	r3, #3
 8007dec:	e0b3      	b.n	8007f56 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007df4:	b29b      	uxth	r3, r3
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d19b      	bne.n	8007d32 <HAL_SPI_Transmit+0x1ca>
 8007dfa:	e086      	b.n	8007f0a <HAL_SPI_Transmit+0x3a2>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	695b      	ldr	r3, [r3, #20]
 8007e02:	f003 0302 	and.w	r3, r3, #2
 8007e06:	2b02      	cmp	r3, #2
 8007e08:	d154      	bne.n	8007eb4 <HAL_SPI_Transmit+0x34c>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007e10:	b29b      	uxth	r3, r3
 8007e12:	2b03      	cmp	r3, #3
 8007e14:	d918      	bls.n	8007e48 <HAL_SPI_Transmit+0x2e0>
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e1a:	2b40      	cmp	r3, #64	; 0x40
 8007e1c:	d914      	bls.n	8007e48 <HAL_SPI_Transmit+0x2e0>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	6812      	ldr	r2, [r2, #0]
 8007e28:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e2e:	1d1a      	adds	r2, r3, #4
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007e3a:	b29b      	uxth	r3, r3
 8007e3c:	3b04      	subs	r3, #4
 8007e3e:	b29a      	uxth	r2, r3
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8007e46:	e059      	b.n	8007efc <HAL_SPI_Transmit+0x394>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007e4e:	b29b      	uxth	r3, r3
 8007e50:	2b01      	cmp	r3, #1
 8007e52:	d917      	bls.n	8007e84 <HAL_SPI_Transmit+0x31c>
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d013      	beq.n	8007e84 <HAL_SPI_Transmit+0x31c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e60:	881a      	ldrh	r2, [r3, #0]
 8007e62:	69fb      	ldr	r3, [r7, #28]
 8007e64:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e6a:	1c9a      	adds	r2, r3, #2
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007e76:	b29b      	uxth	r3, r3
 8007e78:	3b02      	subs	r3, #2
 8007e7a:	b29a      	uxth	r2, r3
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8007e82:	e03b      	b.n	8007efc <HAL_SPI_Transmit+0x394>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	3320      	adds	r3, #32
 8007e8e:	7812      	ldrb	r2, [r2, #0]
 8007e90:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e96:	1c5a      	adds	r2, r3, #1
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007ea2:	b29b      	uxth	r3, r3
 8007ea4:	3b01      	subs	r3, #1
 8007ea6:	b29a      	uxth	r2, r3
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8007eae:	e025      	b.n	8007efc <HAL_SPI_Transmit+0x394>
 8007eb0:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007eb4:	f7f9 fd3e 	bl	8001934 <HAL_GetTick>
 8007eb8:	4602      	mov	r2, r0
 8007eba:	697b      	ldr	r3, [r7, #20]
 8007ebc:	1ad3      	subs	r3, r2, r3
 8007ebe:	683a      	ldr	r2, [r7, #0]
 8007ec0:	429a      	cmp	r2, r3
 8007ec2:	d803      	bhi.n	8007ecc <HAL_SPI_Transmit+0x364>
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007eca:	d102      	bne.n	8007ed2 <HAL_SPI_Transmit+0x36a>
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d114      	bne.n	8007efc <HAL_SPI_Transmit+0x394>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007ed2:	68f8      	ldr	r0, [r7, #12]
 8007ed4:	f000 fbf0 	bl	80086b8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	2200      	movs	r2, #0
 8007edc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ee6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	2201      	movs	r2, #1
 8007ef4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8007ef8:	2303      	movs	r3, #3
 8007efa:	e02c      	b.n	8007f56 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007f02:	b29b      	uxth	r3, r3
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	f47f af79 	bne.w	8007dfc <HAL_SPI_Transmit+0x294>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8007f0a:	697b      	ldr	r3, [r7, #20]
 8007f0c:	9300      	str	r3, [sp, #0]
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	2200      	movs	r2, #0
 8007f12:	2108      	movs	r1, #8
 8007f14:	68f8      	ldr	r0, [r7, #12]
 8007f16:	f000 fc6f 	bl	80087f8 <SPI_WaitOnFlagUntilTimeout>
 8007f1a:	4603      	mov	r3, r0
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d007      	beq.n	8007f30 <HAL_SPI_Transmit+0x3c8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f26:	f043 0220 	orr.w	r2, r3, #32
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8007f30:	68f8      	ldr	r0, [r7, #12]
 8007f32:	f000 fbc1 	bl	80086b8 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	2200      	movs	r2, #0
 8007f3a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	2201      	movs	r2, #1
 8007f42:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d001      	beq.n	8007f54 <HAL_SPI_Transmit+0x3ec>
  {
    return HAL_ERROR;
 8007f50:	2301      	movs	r3, #1
 8007f52:	e000      	b.n	8007f56 <HAL_SPI_Transmit+0x3ee>
  }
  return errorcode;
 8007f54:	7efb      	ldrb	r3, [r7, #27]
}
 8007f56:	4618      	mov	r0, r3
 8007f58:	3720      	adds	r7, #32
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	bd80      	pop	{r7, pc}
 8007f5e:	bf00      	nop

08007f60 <HAL_SPI_Receive_DMA>:
  * @param  Size : amount of data to be sent
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b086      	sub	sp, #24
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	60f8      	str	r0, [r7, #12]
 8007f68:	60b9      	str	r1, [r7, #8]
 8007f6a:	4613      	mov	r3, r2
 8007f6c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007f6e:	2300      	movs	r3, #0
 8007f70:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007f78:	2b01      	cmp	r3, #1
 8007f7a:	d101      	bne.n	8007f80 <HAL_SPI_Receive_DMA+0x20>
 8007f7c:	2302      	movs	r3, #2
 8007f7e:	e134      	b.n	80081ea <HAL_SPI_Receive_DMA+0x28a>
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	2201      	movs	r2, #1
 8007f84:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  if (hspi->State != HAL_SPI_STATE_READY)
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007f8e:	b2db      	uxtb	r3, r3
 8007f90:	2b01      	cmp	r3, #1
 8007f92:	d007      	beq.n	8007fa4 <HAL_SPI_Receive_DMA+0x44>
  {
    errorcode = HAL_BUSY;
 8007f94:	2302      	movs	r3, #2
 8007f96:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8007fa0:	7dfb      	ldrb	r3, [r7, #23]
 8007fa2:	e122      	b.n	80081ea <HAL_SPI_Receive_DMA+0x28a>
  }

  if ((pData == NULL) || (Size == 0UL))
 8007fa4:	68bb      	ldr	r3, [r7, #8]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d002      	beq.n	8007fb0 <HAL_SPI_Receive_DMA+0x50>
 8007faa:	88fb      	ldrh	r3, [r7, #6]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d107      	bne.n	8007fc0 <HAL_SPI_Receive_DMA+0x60>
  {
    errorcode = HAL_ERROR;
 8007fb0:	2301      	movs	r3, #1
 8007fb2:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8007fbc:	7dfb      	ldrb	r3, [r7, #23]
 8007fbe:	e114      	b.n	80081ea <HAL_SPI_Receive_DMA+0x28a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	2204      	movs	r2, #4
 8007fc4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	2200      	movs	r2, #0
 8007fcc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	68ba      	ldr	r2, [r7, #8]
 8007fd4:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	88fa      	ldrh	r2, [r7, #6]
 8007fda:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	88fa      	ldrh	r2, [r7, #6]
 8007fe2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	2200      	movs	r2, #0
 8007fea:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	2200      	movs	r2, #0
 8007ff0:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->TxXferSize  = (uint16_t) 0UL;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	689b      	ldr	r3, [r3, #8]
 8008006:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800800a:	d108      	bne.n	800801e <HAL_SPI_Receive_DMA+0xbe>
  {
    SPI_1LINE_RX(hspi);
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	681a      	ldr	r2, [r3, #0]
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800801a:	601a      	str	r2, [r3, #0]
 800801c:	e009      	b.n	8008032 <HAL_SPI_Receive_DMA+0xd2>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	68db      	ldr	r3, [r3, #12]
 8008024:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8008030:	60da      	str	r2, [r3, #12]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	68db      	ldr	r3, [r3, #12]
 8008036:	2b0f      	cmp	r3, #15
 8008038:	d905      	bls.n	8008046 <HAL_SPI_Receive_DMA+0xe6>
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800803e:	699b      	ldr	r3, [r3, #24]
 8008040:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008044:	d10f      	bne.n	8008066 <HAL_SPI_Receive_DMA+0x106>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800804a:	2b07      	cmp	r3, #7
 800804c:	d913      	bls.n	8008076 <HAL_SPI_Receive_DMA+0x116>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008052:	699b      	ldr	r3, [r3, #24]
 8008054:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008058:	d00d      	beq.n	8008076 <HAL_SPI_Receive_DMA+0x116>
                                                     (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800805e:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8008060:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008064:	d007      	beq.n	8008076 <HAL_SPI_Receive_DMA+0x116>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    errorcode = HAL_ERROR;
 8008066:	2301      	movs	r3, #1
 8008068:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	2200      	movs	r2, #0
 800806e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8008072:	7dfb      	ldrb	r3, [r7, #23]
 8008074:	e0b9      	b.n	80081ea <HAL_SPI_Receive_DMA+0x28a>
  }

  /* Clear RXDMAEN bit */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	689a      	ldr	r2, [r3, #8]
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008084:	609a      	str	r2, [r3, #8]

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	68db      	ldr	r3, [r3, #12]
 800808a:	2b07      	cmp	r3, #7
 800808c:	d820      	bhi.n	80080d0 <HAL_SPI_Receive_DMA+0x170>
  {
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008092:	699b      	ldr	r3, [r3, #24]
 8008094:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008098:	d109      	bne.n	80080ae <HAL_SPI_Receive_DMA+0x14e>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80080a0:	b29b      	uxth	r3, r3
 80080a2:	3301      	adds	r3, #1
 80080a4:	105b      	asrs	r3, r3, #1
 80080a6:	b29a      	uxth	r2, r3
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80080b2:	699b      	ldr	r3, [r3, #24]
 80080b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80080b8:	d11e      	bne.n	80080f8 <HAL_SPI_Receive_DMA+0x198>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80080c0:	b29b      	uxth	r3, r3
 80080c2:	3303      	adds	r3, #3
 80080c4:	109b      	asrs	r3, r3, #2
 80080c6:	b29a      	uxth	r2, r3
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80080ce:	e013      	b.n	80080f8 <HAL_SPI_Receive_DMA+0x198>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	68db      	ldr	r3, [r3, #12]
 80080d4:	2b0f      	cmp	r3, #15
 80080d6:	d80f      	bhi.n	80080f8 <HAL_SPI_Receive_DMA+0x198>
  {
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80080dc:	699b      	ldr	r3, [r3, #24]
 80080de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80080e2:	d109      	bne.n	80080f8 <HAL_SPI_Receive_DMA+0x198>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80080ea:	b29b      	uxth	r3, r3
 80080ec:	3301      	adds	r3, #1
 80080ee:	105b      	asrs	r3, r3, #1
 80080f0:	b29a      	uxth	r2, r3
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  {
    /* Adjustment done */
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80080fc:	4a3d      	ldr	r2, [pc, #244]	; (80081f4 <HAL_SPI_Receive_DMA+0x294>)
 80080fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008104:	4a3c      	ldr	r2, [pc, #240]	; (80081f8 <HAL_SPI_Receive_DMA+0x298>)
 8008106:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800810c:	4a3b      	ldr	r2, [pc, #236]	; (80081fc <HAL_SPI_Receive_DMA+0x29c>)
 800810e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008114:	2200      	movs	r2, #0
 8008116:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	3330      	adds	r3, #48	; 0x30
 8008122:	4619      	mov	r1, r3
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008128:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008130:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 8008132:	f7fa f8ab 	bl	800228c <HAL_DMA_Start_IT>
 8008136:	4603      	mov	r3, r0
 8008138:	2b00      	cmp	r3, #0
 800813a:	d013      	beq.n	8008164 <HAL_SPI_Receive_DMA+0x204>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008142:	f043 0210 	orr.w	r2, r3, #16
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	2200      	movs	r2, #0
 8008150:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hspi->State = HAL_SPI_STATE_READY;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	2201      	movs	r2, #1
 8008158:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    errorcode = HAL_ERROR;
 800815c:	2301      	movs	r3, #1
 800815e:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 8008160:	7dfb      	ldrb	r3, [r7, #23]
 8008162:	e042      	b.n	80081ea <HAL_SPI_Receive_DMA+0x28a>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008168:	69db      	ldr	r3, [r3, #28]
 800816a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800816e:	d108      	bne.n	8008182 <HAL_SPI_Receive_DMA+0x222>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	6859      	ldr	r1, [r3, #4]
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	681a      	ldr	r2, [r3, #0]
 800817a:	4b21      	ldr	r3, [pc, #132]	; (8008200 <HAL_SPI_Receive_DMA+0x2a0>)
 800817c:	400b      	ands	r3, r1
 800817e:	6053      	str	r3, [r2, #4]
 8008180:	e009      	b.n	8008196 <HAL_SPI_Receive_DMA+0x236>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	685a      	ldr	r2, [r3, #4]
 8008188:	4b1d      	ldr	r3, [pc, #116]	; (8008200 <HAL_SPI_Receive_DMA+0x2a0>)
 800818a:	4013      	ands	r3, r2
 800818c:	88f9      	ldrh	r1, [r7, #6]
 800818e:	68fa      	ldr	r2, [r7, #12]
 8008190:	6812      	ldr	r2, [r2, #0]
 8008192:	430b      	orrs	r3, r1
 8008194:	6053      	str	r3, [r2, #4]
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	689a      	ldr	r2, [r3, #8]
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80081a4:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	691a      	ldr	r2, [r3, #16]
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	f442 7250 	orr.w	r2, r2, #832	; 0x340
 80081b4:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	681a      	ldr	r2, [r3, #0]
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	f042 0201 	orr.w	r2, r2, #1
 80081c4:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	685b      	ldr	r3, [r3, #4]
 80081ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80081ce:	d107      	bne.n	80081e0 <HAL_SPI_Receive_DMA+0x280>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	681a      	ldr	r2, [r3, #0]
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80081de:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	2200      	movs	r2, #0
 80081e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return errorcode;
 80081e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80081ea:	4618      	mov	r0, r3
 80081ec:	3718      	adds	r7, #24
 80081ee:	46bd      	mov	sp, r7
 80081f0:	bd80      	pop	{r7, pc}
 80081f2:	bf00      	nop
 80081f4:	08008623 	.word	0x08008623
 80081f8:	080085dd 	.word	0x080085dd
 80081fc:	0800863f 	.word	0x0800863f
 8008200:	ffff0000 	.word	0xffff0000

08008204 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b08a      	sub	sp, #40	; 0x28
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	691b      	ldr	r3, [r3, #16]
 8008212:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	695b      	ldr	r3, [r3, #20]
 800821a:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 800821c:	6a3a      	ldr	r2, [r7, #32]
 800821e:	69fb      	ldr	r3, [r7, #28]
 8008220:	4013      	ands	r3, r2
 8008222:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	689b      	ldr	r3, [r3, #8]
 800822a:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 800822c:	2300      	movs	r3, #0
 800822e:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008236:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	3330      	adds	r3, #48	; 0x30
 800823e:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8008240:	69fb      	ldr	r3, [r7, #28]
 8008242:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008246:	2b00      	cmp	r3, #0
 8008248:	d010      	beq.n	800826c <HAL_SPI_IRQHandler+0x68>
 800824a:	6a3b      	ldr	r3, [r7, #32]
 800824c:	f003 0308 	and.w	r3, r3, #8
 8008250:	2b00      	cmp	r3, #0
 8008252:	d00b      	beq.n	800826c <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	699a      	ldr	r2, [r3, #24]
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008262:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 8008264:	6878      	ldr	r0, [r7, #4]
 8008266:	f000 f9af 	bl	80085c8 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 800826a:	e192      	b.n	8008592 <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800826c:	69bb      	ldr	r3, [r7, #24]
 800826e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008272:	2b00      	cmp	r3, #0
 8008274:	d113      	bne.n	800829e <HAL_SPI_IRQHandler+0x9a>
 8008276:	69bb      	ldr	r3, [r7, #24]
 8008278:	f003 0320 	and.w	r3, r3, #32
 800827c:	2b00      	cmp	r3, #0
 800827e:	d10e      	bne.n	800829e <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8008280:	69bb      	ldr	r3, [r7, #24]
 8008282:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8008286:	2b00      	cmp	r3, #0
 8008288:	d009      	beq.n	800829e <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	4798      	blx	r3
    hspi->RxISR(hspi);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008296:	6878      	ldr	r0, [r7, #4]
 8008298:	4798      	blx	r3
    handled = 1UL;
 800829a:	2301      	movs	r3, #1
 800829c:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800829e:	69bb      	ldr	r3, [r7, #24]
 80082a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d10f      	bne.n	80082c8 <HAL_SPI_IRQHandler+0xc4>
 80082a8:	69bb      	ldr	r3, [r7, #24]
 80082aa:	f003 0301 	and.w	r3, r3, #1
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d00a      	beq.n	80082c8 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 80082b2:	69bb      	ldr	r3, [r7, #24]
 80082b4:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d105      	bne.n	80082c8 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082c0:	6878      	ldr	r0, [r7, #4]
 80082c2:	4798      	blx	r3
    handled = 1UL;
 80082c4:	2301      	movs	r3, #1
 80082c6:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 80082c8:	69bb      	ldr	r3, [r7, #24]
 80082ca:	f003 0320 	and.w	r3, r3, #32
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d10f      	bne.n	80082f2 <HAL_SPI_IRQHandler+0xee>
 80082d2:	69bb      	ldr	r3, [r7, #24]
 80082d4:	f003 0302 	and.w	r3, r3, #2
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d00a      	beq.n	80082f2 <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 80082dc:	69bb      	ldr	r3, [r7, #24]
 80082de:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d105      	bne.n	80082f2 <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80082ea:	6878      	ldr	r0, [r7, #4]
 80082ec:	4798      	blx	r3
    handled = 1UL;
 80082ee:	2301      	movs	r3, #1
 80082f0:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 80082f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	f040 8147 	bne.w	8008588 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 80082fa:	69bb      	ldr	r3, [r7, #24]
 80082fc:	f003 0308 	and.w	r3, r3, #8
 8008300:	2b00      	cmp	r3, #0
 8008302:	f000 808b 	beq.w	800841c <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	699a      	ldr	r2, [r3, #24]
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	f042 0208 	orr.w	r2, r2, #8
 8008314:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	699a      	ldr	r2, [r3, #24]
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	f042 0210 	orr.w	r2, r2, #16
 8008324:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	699a      	ldr	r2, [r3, #24]
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008334:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	691a      	ldr	r2, [r3, #16]
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	f022 0208 	bic.w	r2, r2, #8
 8008344:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	689b      	ldr	r3, [r3, #8]
 800834c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008350:	2b00      	cmp	r3, #0
 8008352:	d13d      	bne.n	80083d0 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8008354:	e036      	b.n	80083c4 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	68db      	ldr	r3, [r3, #12]
 800835a:	2b0f      	cmp	r3, #15
 800835c:	d90b      	bls.n	8008376 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681a      	ldr	r2, [r3, #0]
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008366:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008368:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800836e:	1d1a      	adds	r2, r3, #4
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	665a      	str	r2, [r3, #100]	; 0x64
 8008374:	e01d      	b.n	80083b2 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	68db      	ldr	r3, [r3, #12]
 800837a:	2b07      	cmp	r3, #7
 800837c:	d90b      	bls.n	8008396 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008382:	68fa      	ldr	r2, [r7, #12]
 8008384:	8812      	ldrh	r2, [r2, #0]
 8008386:	b292      	uxth	r2, r2
 8008388:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800838e:	1c9a      	adds	r2, r3, #2
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	665a      	str	r2, [r3, #100]	; 0x64
 8008394:	e00d      	b.n	80083b2 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80083a2:	7812      	ldrb	r2, [r2, #0]
 80083a4:	b2d2      	uxtb	r2, r2
 80083a6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80083ac:	1c5a      	adds	r2, r3, #1
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	665a      	str	r2, [r3, #100]	; 0x64
        }

        hspi->RxXferCount--;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80083b8:	b29b      	uxth	r3, r3
 80083ba:	3b01      	subs	r3, #1
 80083bc:	b29a      	uxth	r2, r3
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80083ca:	b29b      	uxth	r3, r3
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d1c2      	bne.n	8008356 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 80083d0:	6878      	ldr	r0, [r7, #4]
 80083d2:	f000 f971 	bl	80086b8 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	2201      	movs	r2, #1
 80083da:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d003      	beq.n	80083f0 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80083e8:	6878      	ldr	r0, [r7, #4]
 80083ea:	f000 f8e3 	bl	80085b4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80083ee:	e0d0      	b.n	8008592 <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 80083f0:	7cfb      	ldrb	r3, [r7, #19]
 80083f2:	2b05      	cmp	r3, #5
 80083f4:	d103      	bne.n	80083fe <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 80083f6:	6878      	ldr	r0, [r7, #4]
 80083f8:	f7f8 fc8f 	bl	8000d1a <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 80083fc:	e0c6      	b.n	800858c <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 80083fe:	7cfb      	ldrb	r3, [r7, #19]
 8008400:	2b04      	cmp	r3, #4
 8008402:	d103      	bne.n	800840c <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 8008404:	6878      	ldr	r0, [r7, #4]
 8008406:	f7f8 fca5 	bl	8000d54 <HAL_SPI_RxCpltCallback>
    return;
 800840a:	e0bf      	b.n	800858c <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800840c:	7cfb      	ldrb	r3, [r7, #19]
 800840e:	2b03      	cmp	r3, #3
 8008410:	f040 80bc 	bne.w	800858c <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 8008414:	6878      	ldr	r0, [r7, #4]
 8008416:	f7f8 fc8b 	bl	8000d30 <HAL_SPI_TxCpltCallback>
    return;
 800841a:	e0b7      	b.n	800858c <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800841c:	69bb      	ldr	r3, [r7, #24]
 800841e:	f403 7358 	and.w	r3, r3, #864	; 0x360
 8008422:	2b00      	cmp	r3, #0
 8008424:	f000 80b5 	beq.w	8008592 <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8008428:	69bb      	ldr	r3, [r7, #24]
 800842a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800842e:	2b00      	cmp	r3, #0
 8008430:	d00f      	beq.n	8008452 <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008438:	f043 0204 	orr.w	r2, r3, #4
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	699a      	ldr	r2, [r3, #24]
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008450:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8008452:	69bb      	ldr	r3, [r7, #24]
 8008454:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008458:	2b00      	cmp	r3, #0
 800845a:	d00f      	beq.n	800847c <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008462:	f043 0201 	orr.w	r2, r3, #1
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	699a      	ldr	r2, [r3, #24]
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800847a:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800847c:	69bb      	ldr	r3, [r7, #24]
 800847e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008482:	2b00      	cmp	r3, #0
 8008484:	d00f      	beq.n	80084a6 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800848c:	f043 0208 	orr.w	r2, r3, #8
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	699a      	ldr	r2, [r3, #24]
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80084a4:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 80084a6:	69bb      	ldr	r3, [r7, #24]
 80084a8:	f003 0320 	and.w	r3, r3, #32
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d00f      	beq.n	80084d0 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80084b6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	699a      	ldr	r2, [r3, #24]
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	f042 0220 	orr.w	r2, r2, #32
 80084ce:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d05a      	beq.n	8008590 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	681a      	ldr	r2, [r3, #0]
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	f022 0201 	bic.w	r2, r2, #1
 80084e8:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	6919      	ldr	r1, [r3, #16]
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681a      	ldr	r2, [r3, #0]
 80084f4:	4b28      	ldr	r3, [pc, #160]	; (8008598 <HAL_SPI_IRQHandler+0x394>)
 80084f6:	400b      	ands	r3, r1
 80084f8:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80084fa:	697b      	ldr	r3, [r7, #20]
 80084fc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008500:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008504:	d138      	bne.n	8008578 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	689a      	ldr	r2, [r3, #8]
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8008514:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800851a:	2b00      	cmp	r3, #0
 800851c:	d013      	beq.n	8008546 <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008522:	4a1e      	ldr	r2, [pc, #120]	; (800859c <HAL_SPI_IRQHandler+0x398>)
 8008524:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800852a:	4618      	mov	r0, r3
 800852c:	f7fa f918 	bl	8002760 <HAL_DMA_Abort_IT>
 8008530:	4603      	mov	r3, r0
 8008532:	2b00      	cmp	r3, #0
 8008534:	d007      	beq.n	8008546 <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800853c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800854a:	2b00      	cmp	r3, #0
 800854c:	d020      	beq.n	8008590 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008552:	4a12      	ldr	r2, [pc, #72]	; (800859c <HAL_SPI_IRQHandler+0x398>)
 8008554:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800855a:	4618      	mov	r0, r3
 800855c:	f7fa f900 	bl	8002760 <HAL_DMA_Abort_IT>
 8008560:	4603      	mov	r3, r0
 8008562:	2b00      	cmp	r3, #0
 8008564:	d014      	beq.n	8008590 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800856c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8008576:	e00b      	b.n	8008590 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2201      	movs	r2, #1
 800857c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 8008580:	6878      	ldr	r0, [r7, #4]
 8008582:	f000 f817 	bl	80085b4 <HAL_SPI_ErrorCallback>
    return;
 8008586:	e003      	b.n	8008590 <HAL_SPI_IRQHandler+0x38c>
    return;
 8008588:	bf00      	nop
 800858a:	e002      	b.n	8008592 <HAL_SPI_IRQHandler+0x38e>
    return;
 800858c:	bf00      	nop
 800858e:	e000      	b.n	8008592 <HAL_SPI_IRQHandler+0x38e>
    return;
 8008590:	bf00      	nop
  }
}
 8008592:	3728      	adds	r7, #40	; 0x28
 8008594:	46bd      	mov	sp, r7
 8008596:	bd80      	pop	{r7, pc}
 8008598:	fffffc94 	.word	0xfffffc94
 800859c:	08008685 	.word	0x08008685

080085a0 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80085a0:	b480      	push	{r7}
 80085a2:	b083      	sub	sp, #12
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 80085a8:	bf00      	nop
 80085aa:	370c      	adds	r7, #12
 80085ac:	46bd      	mov	sp, r7
 80085ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b2:	4770      	bx	lr

080085b4 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80085b4:	b480      	push	{r7}
 80085b6:	b083      	sub	sp, #12
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80085bc:	bf00      	nop
 80085be:	370c      	adds	r7, #12
 80085c0:	46bd      	mov	sp, r7
 80085c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c6:	4770      	bx	lr

080085c8 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi)
{
 80085c8:	b480      	push	{r7}
 80085ca:	b083      	sub	sp, #12
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 80085d0:	bf00      	nop
 80085d2:	370c      	adds	r7, #12
 80085d4:	46bd      	mov	sp, r7
 80085d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085da:	4770      	bx	lr

080085dc <SPI_DMAReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b084      	sub	sp, #16
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085e8:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80085f0:	b2db      	uxtb	r3, r3
 80085f2:	2b07      	cmp	r3, #7
 80085f4:	d011      	beq.n	800861a <SPI_DMAReceiveCplt+0x3e>
  {
    if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80085fa:	69db      	ldr	r3, [r3, #28]
 80085fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008600:	d103      	bne.n	800860a <SPI_DMAReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8008602:	68f8      	ldr	r0, [r7, #12]
 8008604:	f7f8 fba6 	bl	8000d54 <HAL_SPI_RxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 8008608:	e007      	b.n	800861a <SPI_DMAReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	691a      	ldr	r2, [r3, #16]
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	f042 0208 	orr.w	r2, r2, #8
 8008618:	611a      	str	r2, [r3, #16]
}
 800861a:	bf00      	nop
 800861c:	3710      	adds	r7, #16
 800861e:	46bd      	mov	sp, r7
 8008620:	bd80      	pop	{r7, pc}

08008622 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008622:	b580      	push	{r7, lr}
 8008624:	b084      	sub	sp, #16
 8008626:	af00      	add	r7, sp, #0
 8008628:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800862e:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8008630:	68f8      	ldr	r0, [r7, #12]
 8008632:	f7ff ffb5 	bl	80085a0 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008636:	bf00      	nop
 8008638:	3710      	adds	r7, #16
 800863a:	46bd      	mov	sp, r7
 800863c:	bd80      	pop	{r7, pc}

0800863e <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800863e:	b580      	push	{r7, lr}
 8008640:	b084      	sub	sp, #16
 8008642:	af00      	add	r7, sp, #0
 8008644:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800864a:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800864c:	6878      	ldr	r0, [r7, #4]
 800864e:	f7fb f9f7 	bl	8003a40 <HAL_DMA_GetError>
 8008652:	4603      	mov	r3, r0
 8008654:	2b02      	cmp	r3, #2
 8008656:	d011      	beq.n	800867c <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 8008658:	68f8      	ldr	r0, [r7, #12]
 800865a:	f000 f82d 	bl	80086b8 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008664:	f043 0210 	orr.w	r2, r3, #16
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	2201      	movs	r2, #1
 8008672:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8008676:	68f8      	ldr	r0, [r7, #12]
 8008678:	f7ff ff9c 	bl	80085b4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 800867c:	bf00      	nop
 800867e:	3710      	adds	r7, #16
 8008680:	46bd      	mov	sp, r7
 8008682:	bd80      	pop	{r7, pc}

08008684 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008684:	b580      	push	{r7, lr}
 8008686:	b084      	sub	sp, #16
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008690:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	2200      	movs	r2, #0
 8008696:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	2200      	movs	r2, #0
 800869e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	2201      	movs	r2, #1
 80086a6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80086aa:	68f8      	ldr	r0, [r7, #12]
 80086ac:	f7ff ff82 	bl	80085b4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80086b0:	bf00      	nop
 80086b2:	3710      	adds	r7, #16
 80086b4:	46bd      	mov	sp, r7
 80086b6:	bd80      	pop	{r7, pc}

080086b8 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80086b8:	b480      	push	{r7}
 80086ba:	b085      	sub	sp, #20
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	695b      	ldr	r3, [r3, #20]
 80086c6:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	699a      	ldr	r2, [r3, #24]
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	f042 0208 	orr.w	r2, r2, #8
 80086d6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	699a      	ldr	r2, [r3, #24]
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	f042 0210 	orr.w	r2, r2, #16
 80086e6:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	681a      	ldr	r2, [r3, #0]
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	f022 0201 	bic.w	r2, r2, #1
 80086f6:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	6919      	ldr	r1, [r3, #16]
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681a      	ldr	r2, [r3, #0]
 8008702:	4b3c      	ldr	r3, [pc, #240]	; (80087f4 <SPI_CloseTransfer+0x13c>)
 8008704:	400b      	ands	r3, r1
 8008706:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	689a      	ldr	r2, [r3, #8]
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8008716:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800871e:	b2db      	uxtb	r3, r3
 8008720:	2b04      	cmp	r3, #4
 8008722:	d014      	beq.n	800874e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	f003 0320 	and.w	r3, r3, #32
 800872a:	2b00      	cmp	r3, #0
 800872c:	d00f      	beq.n	800874e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008734:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	699a      	ldr	r2, [r3, #24]
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	f042 0220 	orr.w	r2, r2, #32
 800874c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008754:	b2db      	uxtb	r3, r3
 8008756:	2b03      	cmp	r3, #3
 8008758:	d014      	beq.n	8008784 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008760:	2b00      	cmp	r3, #0
 8008762:	d00f      	beq.n	8008784 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800876a:	f043 0204 	orr.w	r2, r3, #4
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	699a      	ldr	r2, [r3, #24]
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008782:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800878a:	2b00      	cmp	r3, #0
 800878c:	d00f      	beq.n	80087ae <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008794:	f043 0201 	orr.w	r2, r3, #1
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	699a      	ldr	r2, [r3, #24]
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80087ac:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d00f      	beq.n	80087d8 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80087be:	f043 0208 	orr.w	r2, r3, #8
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	699a      	ldr	r2, [r3, #24]
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80087d6:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2200      	movs	r2, #0
 80087dc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2200      	movs	r2, #0
 80087e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 80087e8:	bf00      	nop
 80087ea:	3714      	adds	r7, #20
 80087ec:	46bd      	mov	sp, r7
 80087ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f2:	4770      	bx	lr
 80087f4:	fffffc90 	.word	0xfffffc90

080087f8 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b084      	sub	sp, #16
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	60f8      	str	r0, [r7, #12]
 8008800:	60b9      	str	r1, [r7, #8]
 8008802:	603b      	str	r3, [r7, #0]
 8008804:	4613      	mov	r3, r2
 8008806:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008808:	e010      	b.n	800882c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800880a:	f7f9 f893 	bl	8001934 <HAL_GetTick>
 800880e:	4602      	mov	r2, r0
 8008810:	69bb      	ldr	r3, [r7, #24]
 8008812:	1ad3      	subs	r3, r2, r3
 8008814:	683a      	ldr	r2, [r7, #0]
 8008816:	429a      	cmp	r2, r3
 8008818:	d803      	bhi.n	8008822 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008820:	d102      	bne.n	8008828 <SPI_WaitOnFlagUntilTimeout+0x30>
 8008822:	683b      	ldr	r3, [r7, #0]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d101      	bne.n	800882c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8008828:	2303      	movs	r3, #3
 800882a:	e00f      	b.n	800884c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	695a      	ldr	r2, [r3, #20]
 8008832:	68bb      	ldr	r3, [r7, #8]
 8008834:	4013      	ands	r3, r2
 8008836:	68ba      	ldr	r2, [r7, #8]
 8008838:	429a      	cmp	r2, r3
 800883a:	bf0c      	ite	eq
 800883c:	2301      	moveq	r3, #1
 800883e:	2300      	movne	r3, #0
 8008840:	b2db      	uxtb	r3, r3
 8008842:	461a      	mov	r2, r3
 8008844:	79fb      	ldrb	r3, [r7, #7]
 8008846:	429a      	cmp	r2, r3
 8008848:	d0df      	beq.n	800880a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800884a:	2300      	movs	r3, #0
}
 800884c:	4618      	mov	r0, r3
 800884e:	3710      	adds	r7, #16
 8008850:	46bd      	mov	sp, r7
 8008852:	bd80      	pop	{r7, pc}

08008854 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8008854:	b480      	push	{r7}
 8008856:	b085      	sub	sp, #20
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008860:	095b      	lsrs	r3, r3, #5
 8008862:	3301      	adds	r3, #1
 8008864:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	68db      	ldr	r3, [r3, #12]
 800886a:	3301      	adds	r3, #1
 800886c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800886e:	68bb      	ldr	r3, [r7, #8]
 8008870:	3307      	adds	r3, #7
 8008872:	08db      	lsrs	r3, r3, #3
 8008874:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8008876:	68bb      	ldr	r3, [r7, #8]
 8008878:	68fa      	ldr	r2, [r7, #12]
 800887a:	fb02 f303 	mul.w	r3, r2, r3
}
 800887e:	4618      	mov	r0, r3
 8008880:	3714      	adds	r7, #20
 8008882:	46bd      	mov	sp, r7
 8008884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008888:	4770      	bx	lr

0800888a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800888a:	b580      	push	{r7, lr}
 800888c:	b082      	sub	sp, #8
 800888e:	af00      	add	r7, sp, #0
 8008890:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d101      	bne.n	800889c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008898:	2301      	movs	r3, #1
 800889a:	e049      	b.n	8008930 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80088a2:	b2db      	uxtb	r3, r3
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d106      	bne.n	80088b6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2200      	movs	r2, #0
 80088ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80088b0:	6878      	ldr	r0, [r7, #4]
 80088b2:	f7f8 fe0d 	bl	80014d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	2202      	movs	r2, #2
 80088ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681a      	ldr	r2, [r3, #0]
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	3304      	adds	r3, #4
 80088c6:	4619      	mov	r1, r3
 80088c8:	4610      	mov	r0, r2
 80088ca:	f000 fb59 	bl	8008f80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	2201      	movs	r2, #1
 80088d2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	2201      	movs	r2, #1
 80088da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	2201      	movs	r2, #1
 80088e2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	2201      	movs	r2, #1
 80088ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	2201      	movs	r2, #1
 80088f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	2201      	movs	r2, #1
 80088fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	2201      	movs	r2, #1
 8008902:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	2201      	movs	r2, #1
 800890a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	2201      	movs	r2, #1
 8008912:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	2201      	movs	r2, #1
 800891a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	2201      	movs	r2, #1
 8008922:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	2201      	movs	r2, #1
 800892a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800892e:	2300      	movs	r3, #0
}
 8008930:	4618      	mov	r0, r3
 8008932:	3708      	adds	r7, #8
 8008934:	46bd      	mov	sp, r7
 8008936:	bd80      	pop	{r7, pc}

08008938 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b082      	sub	sp, #8
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d101      	bne.n	800894a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008946:	2301      	movs	r3, #1
 8008948:	e049      	b.n	80089de <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008950:	b2db      	uxtb	r3, r3
 8008952:	2b00      	cmp	r3, #0
 8008954:	d106      	bne.n	8008964 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2200      	movs	r2, #0
 800895a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800895e:	6878      	ldr	r0, [r7, #4]
 8008960:	f7f8 fd96 	bl	8001490 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2202      	movs	r2, #2
 8008968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681a      	ldr	r2, [r3, #0]
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	3304      	adds	r3, #4
 8008974:	4619      	mov	r1, r3
 8008976:	4610      	mov	r0, r2
 8008978:	f000 fb02 	bl	8008f80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2201      	movs	r2, #1
 8008980:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2201      	movs	r2, #1
 8008988:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	2201      	movs	r2, #1
 8008990:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	2201      	movs	r2, #1
 8008998:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2201      	movs	r2, #1
 80089a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	2201      	movs	r2, #1
 80089a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2201      	movs	r2, #1
 80089b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2201      	movs	r2, #1
 80089b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2201      	movs	r2, #1
 80089c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2201      	movs	r2, #1
 80089c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2201      	movs	r2, #1
 80089d0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	2201      	movs	r2, #1
 80089d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80089dc:	2300      	movs	r3, #0
}
 80089de:	4618      	mov	r0, r3
 80089e0:	3708      	adds	r7, #8
 80089e2:	46bd      	mov	sp, r7
 80089e4:	bd80      	pop	{r7, pc}
	...

080089e8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b084      	sub	sp, #16
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
 80089f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80089f2:	683b      	ldr	r3, [r7, #0]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d109      	bne.n	8008a0c <HAL_TIM_PWM_Start+0x24>
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80089fe:	b2db      	uxtb	r3, r3
 8008a00:	2b01      	cmp	r3, #1
 8008a02:	bf14      	ite	ne
 8008a04:	2301      	movne	r3, #1
 8008a06:	2300      	moveq	r3, #0
 8008a08:	b2db      	uxtb	r3, r3
 8008a0a:	e03c      	b.n	8008a86 <HAL_TIM_PWM_Start+0x9e>
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	2b04      	cmp	r3, #4
 8008a10:	d109      	bne.n	8008a26 <HAL_TIM_PWM_Start+0x3e>
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008a18:	b2db      	uxtb	r3, r3
 8008a1a:	2b01      	cmp	r3, #1
 8008a1c:	bf14      	ite	ne
 8008a1e:	2301      	movne	r3, #1
 8008a20:	2300      	moveq	r3, #0
 8008a22:	b2db      	uxtb	r3, r3
 8008a24:	e02f      	b.n	8008a86 <HAL_TIM_PWM_Start+0x9e>
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	2b08      	cmp	r3, #8
 8008a2a:	d109      	bne.n	8008a40 <HAL_TIM_PWM_Start+0x58>
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008a32:	b2db      	uxtb	r3, r3
 8008a34:	2b01      	cmp	r3, #1
 8008a36:	bf14      	ite	ne
 8008a38:	2301      	movne	r3, #1
 8008a3a:	2300      	moveq	r3, #0
 8008a3c:	b2db      	uxtb	r3, r3
 8008a3e:	e022      	b.n	8008a86 <HAL_TIM_PWM_Start+0x9e>
 8008a40:	683b      	ldr	r3, [r7, #0]
 8008a42:	2b0c      	cmp	r3, #12
 8008a44:	d109      	bne.n	8008a5a <HAL_TIM_PWM_Start+0x72>
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008a4c:	b2db      	uxtb	r3, r3
 8008a4e:	2b01      	cmp	r3, #1
 8008a50:	bf14      	ite	ne
 8008a52:	2301      	movne	r3, #1
 8008a54:	2300      	moveq	r3, #0
 8008a56:	b2db      	uxtb	r3, r3
 8008a58:	e015      	b.n	8008a86 <HAL_TIM_PWM_Start+0x9e>
 8008a5a:	683b      	ldr	r3, [r7, #0]
 8008a5c:	2b10      	cmp	r3, #16
 8008a5e:	d109      	bne.n	8008a74 <HAL_TIM_PWM_Start+0x8c>
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008a66:	b2db      	uxtb	r3, r3
 8008a68:	2b01      	cmp	r3, #1
 8008a6a:	bf14      	ite	ne
 8008a6c:	2301      	movne	r3, #1
 8008a6e:	2300      	moveq	r3, #0
 8008a70:	b2db      	uxtb	r3, r3
 8008a72:	e008      	b.n	8008a86 <HAL_TIM_PWM_Start+0x9e>
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008a7a:	b2db      	uxtb	r3, r3
 8008a7c:	2b01      	cmp	r3, #1
 8008a7e:	bf14      	ite	ne
 8008a80:	2301      	movne	r3, #1
 8008a82:	2300      	moveq	r3, #0
 8008a84:	b2db      	uxtb	r3, r3
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d001      	beq.n	8008a8e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8008a8a:	2301      	movs	r3, #1
 8008a8c:	e0ab      	b.n	8008be6 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d104      	bne.n	8008a9e <HAL_TIM_PWM_Start+0xb6>
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2202      	movs	r2, #2
 8008a98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008a9c:	e023      	b.n	8008ae6 <HAL_TIM_PWM_Start+0xfe>
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	2b04      	cmp	r3, #4
 8008aa2:	d104      	bne.n	8008aae <HAL_TIM_PWM_Start+0xc6>
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	2202      	movs	r2, #2
 8008aa8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008aac:	e01b      	b.n	8008ae6 <HAL_TIM_PWM_Start+0xfe>
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	2b08      	cmp	r3, #8
 8008ab2:	d104      	bne.n	8008abe <HAL_TIM_PWM_Start+0xd6>
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	2202      	movs	r2, #2
 8008ab8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008abc:	e013      	b.n	8008ae6 <HAL_TIM_PWM_Start+0xfe>
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	2b0c      	cmp	r3, #12
 8008ac2:	d104      	bne.n	8008ace <HAL_TIM_PWM_Start+0xe6>
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	2202      	movs	r2, #2
 8008ac8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008acc:	e00b      	b.n	8008ae6 <HAL_TIM_PWM_Start+0xfe>
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	2b10      	cmp	r3, #16
 8008ad2:	d104      	bne.n	8008ade <HAL_TIM_PWM_Start+0xf6>
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2202      	movs	r2, #2
 8008ad8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008adc:	e003      	b.n	8008ae6 <HAL_TIM_PWM_Start+0xfe>
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	2202      	movs	r2, #2
 8008ae2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	2201      	movs	r2, #1
 8008aec:	6839      	ldr	r1, [r7, #0]
 8008aee:	4618      	mov	r0, r3
 8008af0:	f000 ff2b 	bl	800994a <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	4a3d      	ldr	r2, [pc, #244]	; (8008bf0 <HAL_TIM_PWM_Start+0x208>)
 8008afa:	4293      	cmp	r3, r2
 8008afc:	d013      	beq.n	8008b26 <HAL_TIM_PWM_Start+0x13e>
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	4a3c      	ldr	r2, [pc, #240]	; (8008bf4 <HAL_TIM_PWM_Start+0x20c>)
 8008b04:	4293      	cmp	r3, r2
 8008b06:	d00e      	beq.n	8008b26 <HAL_TIM_PWM_Start+0x13e>
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	4a3a      	ldr	r2, [pc, #232]	; (8008bf8 <HAL_TIM_PWM_Start+0x210>)
 8008b0e:	4293      	cmp	r3, r2
 8008b10:	d009      	beq.n	8008b26 <HAL_TIM_PWM_Start+0x13e>
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	4a39      	ldr	r2, [pc, #228]	; (8008bfc <HAL_TIM_PWM_Start+0x214>)
 8008b18:	4293      	cmp	r3, r2
 8008b1a:	d004      	beq.n	8008b26 <HAL_TIM_PWM_Start+0x13e>
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	4a37      	ldr	r2, [pc, #220]	; (8008c00 <HAL_TIM_PWM_Start+0x218>)
 8008b22:	4293      	cmp	r3, r2
 8008b24:	d101      	bne.n	8008b2a <HAL_TIM_PWM_Start+0x142>
 8008b26:	2301      	movs	r3, #1
 8008b28:	e000      	b.n	8008b2c <HAL_TIM_PWM_Start+0x144>
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d007      	beq.n	8008b40 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008b3e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	4a2a      	ldr	r2, [pc, #168]	; (8008bf0 <HAL_TIM_PWM_Start+0x208>)
 8008b46:	4293      	cmp	r3, r2
 8008b48:	d02c      	beq.n	8008ba4 <HAL_TIM_PWM_Start+0x1bc>
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b52:	d027      	beq.n	8008ba4 <HAL_TIM_PWM_Start+0x1bc>
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	4a2a      	ldr	r2, [pc, #168]	; (8008c04 <HAL_TIM_PWM_Start+0x21c>)
 8008b5a:	4293      	cmp	r3, r2
 8008b5c:	d022      	beq.n	8008ba4 <HAL_TIM_PWM_Start+0x1bc>
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	4a29      	ldr	r2, [pc, #164]	; (8008c08 <HAL_TIM_PWM_Start+0x220>)
 8008b64:	4293      	cmp	r3, r2
 8008b66:	d01d      	beq.n	8008ba4 <HAL_TIM_PWM_Start+0x1bc>
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	4a27      	ldr	r2, [pc, #156]	; (8008c0c <HAL_TIM_PWM_Start+0x224>)
 8008b6e:	4293      	cmp	r3, r2
 8008b70:	d018      	beq.n	8008ba4 <HAL_TIM_PWM_Start+0x1bc>
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	4a1f      	ldr	r2, [pc, #124]	; (8008bf4 <HAL_TIM_PWM_Start+0x20c>)
 8008b78:	4293      	cmp	r3, r2
 8008b7a:	d013      	beq.n	8008ba4 <HAL_TIM_PWM_Start+0x1bc>
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	4a23      	ldr	r2, [pc, #140]	; (8008c10 <HAL_TIM_PWM_Start+0x228>)
 8008b82:	4293      	cmp	r3, r2
 8008b84:	d00e      	beq.n	8008ba4 <HAL_TIM_PWM_Start+0x1bc>
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	4a1b      	ldr	r2, [pc, #108]	; (8008bf8 <HAL_TIM_PWM_Start+0x210>)
 8008b8c:	4293      	cmp	r3, r2
 8008b8e:	d009      	beq.n	8008ba4 <HAL_TIM_PWM_Start+0x1bc>
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	4a1f      	ldr	r2, [pc, #124]	; (8008c14 <HAL_TIM_PWM_Start+0x22c>)
 8008b96:	4293      	cmp	r3, r2
 8008b98:	d004      	beq.n	8008ba4 <HAL_TIM_PWM_Start+0x1bc>
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	4a1e      	ldr	r2, [pc, #120]	; (8008c18 <HAL_TIM_PWM_Start+0x230>)
 8008ba0:	4293      	cmp	r3, r2
 8008ba2:	d115      	bne.n	8008bd0 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	689a      	ldr	r2, [r3, #8]
 8008baa:	4b1c      	ldr	r3, [pc, #112]	; (8008c1c <HAL_TIM_PWM_Start+0x234>)
 8008bac:	4013      	ands	r3, r2
 8008bae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	2b06      	cmp	r3, #6
 8008bb4:	d015      	beq.n	8008be2 <HAL_TIM_PWM_Start+0x1fa>
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008bbc:	d011      	beq.n	8008be2 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	681a      	ldr	r2, [r3, #0]
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	f042 0201 	orr.w	r2, r2, #1
 8008bcc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008bce:	e008      	b.n	8008be2 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	681a      	ldr	r2, [r3, #0]
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	f042 0201 	orr.w	r2, r2, #1
 8008bde:	601a      	str	r2, [r3, #0]
 8008be0:	e000      	b.n	8008be4 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008be2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008be4:	2300      	movs	r3, #0
}
 8008be6:	4618      	mov	r0, r3
 8008be8:	3710      	adds	r7, #16
 8008bea:	46bd      	mov	sp, r7
 8008bec:	bd80      	pop	{r7, pc}
 8008bee:	bf00      	nop
 8008bf0:	40010000 	.word	0x40010000
 8008bf4:	40010400 	.word	0x40010400
 8008bf8:	40014000 	.word	0x40014000
 8008bfc:	40014400 	.word	0x40014400
 8008c00:	40014800 	.word	0x40014800
 8008c04:	40000400 	.word	0x40000400
 8008c08:	40000800 	.word	0x40000800
 8008c0c:	40000c00 	.word	0x40000c00
 8008c10:	40001800 	.word	0x40001800
 8008c14:	4000e000 	.word	0x4000e000
 8008c18:	4000e400 	.word	0x4000e400
 8008c1c:	00010007 	.word	0x00010007

08008c20 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b082      	sub	sp, #8
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
 8008c28:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d101      	bne.n	8008c34 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8008c30:	2301      	movs	r3, #1
 8008c32:	e041      	b.n	8008cb8 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c3a:	b2db      	uxtb	r3, r3
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d106      	bne.n	8008c4e <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2200      	movs	r2, #0
 8008c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8008c48:	6878      	ldr	r0, [r7, #4]
 8008c4a:	f000 f839 	bl	8008cc0 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	2202      	movs	r2, #2
 8008c52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681a      	ldr	r2, [r3, #0]
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	3304      	adds	r3, #4
 8008c5e:	4619      	mov	r1, r3
 8008c60:	4610      	mov	r0, r2
 8008c62:	f000 f98d 	bl	8008f80 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	681a      	ldr	r2, [r3, #0]
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	f022 0208 	bic.w	r2, r2, #8
 8008c74:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	6819      	ldr	r1, [r3, #0]
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	683a      	ldr	r2, [r7, #0]
 8008c82:	430a      	orrs	r2, r1
 8008c84:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	2201      	movs	r2, #1
 8008c8a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	2201      	movs	r2, #1
 8008c92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	2201      	movs	r2, #1
 8008c9a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	2201      	movs	r2, #1
 8008ca2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	2201      	movs	r2, #1
 8008caa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	2201      	movs	r2, #1
 8008cb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008cb6:	2300      	movs	r3, #0
}
 8008cb8:	4618      	mov	r0, r3
 8008cba:	3708      	adds	r7, #8
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	bd80      	pop	{r7, pc}

08008cc0 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8008cc0:	b480      	push	{r7}
 8008cc2:	b083      	sub	sp, #12
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8008cc8:	bf00      	nop
 8008cca:	370c      	adds	r7, #12
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd2:	4770      	bx	lr

08008cd4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b086      	sub	sp, #24
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	60f8      	str	r0, [r7, #12]
 8008cdc:	60b9      	str	r1, [r7, #8]
 8008cde:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008cea:	2b01      	cmp	r3, #1
 8008cec:	d101      	bne.n	8008cf2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008cee:	2302      	movs	r3, #2
 8008cf0:	e0ff      	b.n	8008ef2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	2201      	movs	r2, #1
 8008cf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	2b14      	cmp	r3, #20
 8008cfe:	f200 80f0 	bhi.w	8008ee2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008d02:	a201      	add	r2, pc, #4	; (adr r2, 8008d08 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d08:	08008d5d 	.word	0x08008d5d
 8008d0c:	08008ee3 	.word	0x08008ee3
 8008d10:	08008ee3 	.word	0x08008ee3
 8008d14:	08008ee3 	.word	0x08008ee3
 8008d18:	08008d9d 	.word	0x08008d9d
 8008d1c:	08008ee3 	.word	0x08008ee3
 8008d20:	08008ee3 	.word	0x08008ee3
 8008d24:	08008ee3 	.word	0x08008ee3
 8008d28:	08008ddf 	.word	0x08008ddf
 8008d2c:	08008ee3 	.word	0x08008ee3
 8008d30:	08008ee3 	.word	0x08008ee3
 8008d34:	08008ee3 	.word	0x08008ee3
 8008d38:	08008e1f 	.word	0x08008e1f
 8008d3c:	08008ee3 	.word	0x08008ee3
 8008d40:	08008ee3 	.word	0x08008ee3
 8008d44:	08008ee3 	.word	0x08008ee3
 8008d48:	08008e61 	.word	0x08008e61
 8008d4c:	08008ee3 	.word	0x08008ee3
 8008d50:	08008ee3 	.word	0x08008ee3
 8008d54:	08008ee3 	.word	0x08008ee3
 8008d58:	08008ea1 	.word	0x08008ea1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	68b9      	ldr	r1, [r7, #8]
 8008d62:	4618      	mov	r0, r3
 8008d64:	f000 f9b2 	bl	80090cc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	699a      	ldr	r2, [r3, #24]
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	f042 0208 	orr.w	r2, r2, #8
 8008d76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	699a      	ldr	r2, [r3, #24]
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	f022 0204 	bic.w	r2, r2, #4
 8008d86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	6999      	ldr	r1, [r3, #24]
 8008d8e:	68bb      	ldr	r3, [r7, #8]
 8008d90:	691a      	ldr	r2, [r3, #16]
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	430a      	orrs	r2, r1
 8008d98:	619a      	str	r2, [r3, #24]
      break;
 8008d9a:	e0a5      	b.n	8008ee8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	68b9      	ldr	r1, [r7, #8]
 8008da2:	4618      	mov	r0, r3
 8008da4:	f000 fa22 	bl	80091ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	699a      	ldr	r2, [r3, #24]
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008db6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	699a      	ldr	r2, [r3, #24]
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008dc6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	6999      	ldr	r1, [r3, #24]
 8008dce:	68bb      	ldr	r3, [r7, #8]
 8008dd0:	691b      	ldr	r3, [r3, #16]
 8008dd2:	021a      	lsls	r2, r3, #8
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	430a      	orrs	r2, r1
 8008dda:	619a      	str	r2, [r3, #24]
      break;
 8008ddc:	e084      	b.n	8008ee8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	68b9      	ldr	r1, [r7, #8]
 8008de4:	4618      	mov	r0, r3
 8008de6:	f000 fa8b 	bl	8009300 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	69da      	ldr	r2, [r3, #28]
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	f042 0208 	orr.w	r2, r2, #8
 8008df8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	69da      	ldr	r2, [r3, #28]
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	f022 0204 	bic.w	r2, r2, #4
 8008e08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	69d9      	ldr	r1, [r3, #28]
 8008e10:	68bb      	ldr	r3, [r7, #8]
 8008e12:	691a      	ldr	r2, [r3, #16]
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	430a      	orrs	r2, r1
 8008e1a:	61da      	str	r2, [r3, #28]
      break;
 8008e1c:	e064      	b.n	8008ee8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	68b9      	ldr	r1, [r7, #8]
 8008e24:	4618      	mov	r0, r3
 8008e26:	f000 faf3 	bl	8009410 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	69da      	ldr	r2, [r3, #28]
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008e38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	69da      	ldr	r2, [r3, #28]
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008e48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	69d9      	ldr	r1, [r3, #28]
 8008e50:	68bb      	ldr	r3, [r7, #8]
 8008e52:	691b      	ldr	r3, [r3, #16]
 8008e54:	021a      	lsls	r2, r3, #8
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	430a      	orrs	r2, r1
 8008e5c:	61da      	str	r2, [r3, #28]
      break;
 8008e5e:	e043      	b.n	8008ee8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	68b9      	ldr	r1, [r7, #8]
 8008e66:	4618      	mov	r0, r3
 8008e68:	f000 fb3c 	bl	80094e4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	f042 0208 	orr.w	r2, r2, #8
 8008e7a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	f022 0204 	bic.w	r2, r2, #4
 8008e8a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008e92:	68bb      	ldr	r3, [r7, #8]
 8008e94:	691a      	ldr	r2, [r3, #16]
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	430a      	orrs	r2, r1
 8008e9c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008e9e:	e023      	b.n	8008ee8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	68b9      	ldr	r1, [r7, #8]
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	f000 fb80 	bl	80095ac <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008eba:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008eca:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008ed2:	68bb      	ldr	r3, [r7, #8]
 8008ed4:	691b      	ldr	r3, [r3, #16]
 8008ed6:	021a      	lsls	r2, r3, #8
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	430a      	orrs	r2, r1
 8008ede:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008ee0:	e002      	b.n	8008ee8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008ee2:	2301      	movs	r3, #1
 8008ee4:	75fb      	strb	r3, [r7, #23]
      break;
 8008ee6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	2200      	movs	r2, #0
 8008eec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008ef0:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	3718      	adds	r7, #24
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	bd80      	pop	{r7, pc}
 8008efa:	bf00      	nop

08008efc <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b082      	sub	sp, #8
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
 8008f04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f0c:	2b01      	cmp	r3, #1
 8008f0e:	d101      	bne.n	8008f14 <HAL_TIM_SlaveConfigSynchro+0x18>
 8008f10:	2302      	movs	r3, #2
 8008f12:	e031      	b.n	8008f78 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2201      	movs	r2, #1
 8008f18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	2202      	movs	r2, #2
 8008f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8008f24:	6839      	ldr	r1, [r7, #0]
 8008f26:	6878      	ldr	r0, [r7, #4]
 8008f28:	f000 fba6 	bl	8009678 <TIM_SlaveTimer_SetConfig>
 8008f2c:	4603      	mov	r3, r0
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d009      	beq.n	8008f46 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	2201      	movs	r2, #1
 8008f36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8008f42:	2301      	movs	r3, #1
 8008f44:	e018      	b.n	8008f78 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	68da      	ldr	r2, [r3, #12]
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008f54:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	68da      	ldr	r2, [r3, #12]
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008f64:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	2201      	movs	r2, #1
 8008f6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	2200      	movs	r2, #0
 8008f72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008f76:	2300      	movs	r3, #0
}
 8008f78:	4618      	mov	r0, r3
 8008f7a:	3708      	adds	r7, #8
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	bd80      	pop	{r7, pc}

08008f80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008f80:	b480      	push	{r7}
 8008f82:	b085      	sub	sp, #20
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
 8008f88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	4a44      	ldr	r2, [pc, #272]	; (80090a4 <TIM_Base_SetConfig+0x124>)
 8008f94:	4293      	cmp	r3, r2
 8008f96:	d013      	beq.n	8008fc0 <TIM_Base_SetConfig+0x40>
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f9e:	d00f      	beq.n	8008fc0 <TIM_Base_SetConfig+0x40>
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	4a41      	ldr	r2, [pc, #260]	; (80090a8 <TIM_Base_SetConfig+0x128>)
 8008fa4:	4293      	cmp	r3, r2
 8008fa6:	d00b      	beq.n	8008fc0 <TIM_Base_SetConfig+0x40>
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	4a40      	ldr	r2, [pc, #256]	; (80090ac <TIM_Base_SetConfig+0x12c>)
 8008fac:	4293      	cmp	r3, r2
 8008fae:	d007      	beq.n	8008fc0 <TIM_Base_SetConfig+0x40>
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	4a3f      	ldr	r2, [pc, #252]	; (80090b0 <TIM_Base_SetConfig+0x130>)
 8008fb4:	4293      	cmp	r3, r2
 8008fb6:	d003      	beq.n	8008fc0 <TIM_Base_SetConfig+0x40>
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	4a3e      	ldr	r2, [pc, #248]	; (80090b4 <TIM_Base_SetConfig+0x134>)
 8008fbc:	4293      	cmp	r3, r2
 8008fbe:	d108      	bne.n	8008fd2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008fc6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008fc8:	683b      	ldr	r3, [r7, #0]
 8008fca:	685b      	ldr	r3, [r3, #4]
 8008fcc:	68fa      	ldr	r2, [r7, #12]
 8008fce:	4313      	orrs	r3, r2
 8008fd0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	4a33      	ldr	r2, [pc, #204]	; (80090a4 <TIM_Base_SetConfig+0x124>)
 8008fd6:	4293      	cmp	r3, r2
 8008fd8:	d027      	beq.n	800902a <TIM_Base_SetConfig+0xaa>
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008fe0:	d023      	beq.n	800902a <TIM_Base_SetConfig+0xaa>
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	4a30      	ldr	r2, [pc, #192]	; (80090a8 <TIM_Base_SetConfig+0x128>)
 8008fe6:	4293      	cmp	r3, r2
 8008fe8:	d01f      	beq.n	800902a <TIM_Base_SetConfig+0xaa>
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	4a2f      	ldr	r2, [pc, #188]	; (80090ac <TIM_Base_SetConfig+0x12c>)
 8008fee:	4293      	cmp	r3, r2
 8008ff0:	d01b      	beq.n	800902a <TIM_Base_SetConfig+0xaa>
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	4a2e      	ldr	r2, [pc, #184]	; (80090b0 <TIM_Base_SetConfig+0x130>)
 8008ff6:	4293      	cmp	r3, r2
 8008ff8:	d017      	beq.n	800902a <TIM_Base_SetConfig+0xaa>
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	4a2d      	ldr	r2, [pc, #180]	; (80090b4 <TIM_Base_SetConfig+0x134>)
 8008ffe:	4293      	cmp	r3, r2
 8009000:	d013      	beq.n	800902a <TIM_Base_SetConfig+0xaa>
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	4a2c      	ldr	r2, [pc, #176]	; (80090b8 <TIM_Base_SetConfig+0x138>)
 8009006:	4293      	cmp	r3, r2
 8009008:	d00f      	beq.n	800902a <TIM_Base_SetConfig+0xaa>
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	4a2b      	ldr	r2, [pc, #172]	; (80090bc <TIM_Base_SetConfig+0x13c>)
 800900e:	4293      	cmp	r3, r2
 8009010:	d00b      	beq.n	800902a <TIM_Base_SetConfig+0xaa>
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	4a2a      	ldr	r2, [pc, #168]	; (80090c0 <TIM_Base_SetConfig+0x140>)
 8009016:	4293      	cmp	r3, r2
 8009018:	d007      	beq.n	800902a <TIM_Base_SetConfig+0xaa>
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	4a29      	ldr	r2, [pc, #164]	; (80090c4 <TIM_Base_SetConfig+0x144>)
 800901e:	4293      	cmp	r3, r2
 8009020:	d003      	beq.n	800902a <TIM_Base_SetConfig+0xaa>
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	4a28      	ldr	r2, [pc, #160]	; (80090c8 <TIM_Base_SetConfig+0x148>)
 8009026:	4293      	cmp	r3, r2
 8009028:	d108      	bne.n	800903c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009030:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009032:	683b      	ldr	r3, [r7, #0]
 8009034:	68db      	ldr	r3, [r3, #12]
 8009036:	68fa      	ldr	r2, [r7, #12]
 8009038:	4313      	orrs	r3, r2
 800903a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009042:	683b      	ldr	r3, [r7, #0]
 8009044:	695b      	ldr	r3, [r3, #20]
 8009046:	4313      	orrs	r3, r2
 8009048:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	68fa      	ldr	r2, [r7, #12]
 800904e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009050:	683b      	ldr	r3, [r7, #0]
 8009052:	689a      	ldr	r2, [r3, #8]
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009058:	683b      	ldr	r3, [r7, #0]
 800905a:	681a      	ldr	r2, [r3, #0]
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	4a10      	ldr	r2, [pc, #64]	; (80090a4 <TIM_Base_SetConfig+0x124>)
 8009064:	4293      	cmp	r3, r2
 8009066:	d00f      	beq.n	8009088 <TIM_Base_SetConfig+0x108>
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	4a12      	ldr	r2, [pc, #72]	; (80090b4 <TIM_Base_SetConfig+0x134>)
 800906c:	4293      	cmp	r3, r2
 800906e:	d00b      	beq.n	8009088 <TIM_Base_SetConfig+0x108>
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	4a11      	ldr	r2, [pc, #68]	; (80090b8 <TIM_Base_SetConfig+0x138>)
 8009074:	4293      	cmp	r3, r2
 8009076:	d007      	beq.n	8009088 <TIM_Base_SetConfig+0x108>
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	4a10      	ldr	r2, [pc, #64]	; (80090bc <TIM_Base_SetConfig+0x13c>)
 800907c:	4293      	cmp	r3, r2
 800907e:	d003      	beq.n	8009088 <TIM_Base_SetConfig+0x108>
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	4a0f      	ldr	r2, [pc, #60]	; (80090c0 <TIM_Base_SetConfig+0x140>)
 8009084:	4293      	cmp	r3, r2
 8009086:	d103      	bne.n	8009090 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009088:	683b      	ldr	r3, [r7, #0]
 800908a:	691a      	ldr	r2, [r3, #16]
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	2201      	movs	r2, #1
 8009094:	615a      	str	r2, [r3, #20]
}
 8009096:	bf00      	nop
 8009098:	3714      	adds	r7, #20
 800909a:	46bd      	mov	sp, r7
 800909c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a0:	4770      	bx	lr
 80090a2:	bf00      	nop
 80090a4:	40010000 	.word	0x40010000
 80090a8:	40000400 	.word	0x40000400
 80090ac:	40000800 	.word	0x40000800
 80090b0:	40000c00 	.word	0x40000c00
 80090b4:	40010400 	.word	0x40010400
 80090b8:	40014000 	.word	0x40014000
 80090bc:	40014400 	.word	0x40014400
 80090c0:	40014800 	.word	0x40014800
 80090c4:	4000e000 	.word	0x4000e000
 80090c8:	4000e400 	.word	0x4000e400

080090cc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80090cc:	b480      	push	{r7}
 80090ce:	b087      	sub	sp, #28
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
 80090d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	6a1b      	ldr	r3, [r3, #32]
 80090da:	f023 0201 	bic.w	r2, r3, #1
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	6a1b      	ldr	r3, [r3, #32]
 80090e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	685b      	ldr	r3, [r3, #4]
 80090ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	699b      	ldr	r3, [r3, #24]
 80090f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80090f4:	68fa      	ldr	r2, [r7, #12]
 80090f6:	4b37      	ldr	r3, [pc, #220]	; (80091d4 <TIM_OC1_SetConfig+0x108>)
 80090f8:	4013      	ands	r3, r2
 80090fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	f023 0303 	bic.w	r3, r3, #3
 8009102:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009104:	683b      	ldr	r3, [r7, #0]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	68fa      	ldr	r2, [r7, #12]
 800910a:	4313      	orrs	r3, r2
 800910c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800910e:	697b      	ldr	r3, [r7, #20]
 8009110:	f023 0302 	bic.w	r3, r3, #2
 8009114:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009116:	683b      	ldr	r3, [r7, #0]
 8009118:	689b      	ldr	r3, [r3, #8]
 800911a:	697a      	ldr	r2, [r7, #20]
 800911c:	4313      	orrs	r3, r2
 800911e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	4a2d      	ldr	r2, [pc, #180]	; (80091d8 <TIM_OC1_SetConfig+0x10c>)
 8009124:	4293      	cmp	r3, r2
 8009126:	d00f      	beq.n	8009148 <TIM_OC1_SetConfig+0x7c>
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	4a2c      	ldr	r2, [pc, #176]	; (80091dc <TIM_OC1_SetConfig+0x110>)
 800912c:	4293      	cmp	r3, r2
 800912e:	d00b      	beq.n	8009148 <TIM_OC1_SetConfig+0x7c>
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	4a2b      	ldr	r2, [pc, #172]	; (80091e0 <TIM_OC1_SetConfig+0x114>)
 8009134:	4293      	cmp	r3, r2
 8009136:	d007      	beq.n	8009148 <TIM_OC1_SetConfig+0x7c>
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	4a2a      	ldr	r2, [pc, #168]	; (80091e4 <TIM_OC1_SetConfig+0x118>)
 800913c:	4293      	cmp	r3, r2
 800913e:	d003      	beq.n	8009148 <TIM_OC1_SetConfig+0x7c>
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	4a29      	ldr	r2, [pc, #164]	; (80091e8 <TIM_OC1_SetConfig+0x11c>)
 8009144:	4293      	cmp	r3, r2
 8009146:	d10c      	bne.n	8009162 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009148:	697b      	ldr	r3, [r7, #20]
 800914a:	f023 0308 	bic.w	r3, r3, #8
 800914e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009150:	683b      	ldr	r3, [r7, #0]
 8009152:	68db      	ldr	r3, [r3, #12]
 8009154:	697a      	ldr	r2, [r7, #20]
 8009156:	4313      	orrs	r3, r2
 8009158:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800915a:	697b      	ldr	r3, [r7, #20]
 800915c:	f023 0304 	bic.w	r3, r3, #4
 8009160:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	4a1c      	ldr	r2, [pc, #112]	; (80091d8 <TIM_OC1_SetConfig+0x10c>)
 8009166:	4293      	cmp	r3, r2
 8009168:	d00f      	beq.n	800918a <TIM_OC1_SetConfig+0xbe>
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	4a1b      	ldr	r2, [pc, #108]	; (80091dc <TIM_OC1_SetConfig+0x110>)
 800916e:	4293      	cmp	r3, r2
 8009170:	d00b      	beq.n	800918a <TIM_OC1_SetConfig+0xbe>
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	4a1a      	ldr	r2, [pc, #104]	; (80091e0 <TIM_OC1_SetConfig+0x114>)
 8009176:	4293      	cmp	r3, r2
 8009178:	d007      	beq.n	800918a <TIM_OC1_SetConfig+0xbe>
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	4a19      	ldr	r2, [pc, #100]	; (80091e4 <TIM_OC1_SetConfig+0x118>)
 800917e:	4293      	cmp	r3, r2
 8009180:	d003      	beq.n	800918a <TIM_OC1_SetConfig+0xbe>
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	4a18      	ldr	r2, [pc, #96]	; (80091e8 <TIM_OC1_SetConfig+0x11c>)
 8009186:	4293      	cmp	r3, r2
 8009188:	d111      	bne.n	80091ae <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800918a:	693b      	ldr	r3, [r7, #16]
 800918c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009190:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009192:	693b      	ldr	r3, [r7, #16]
 8009194:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009198:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800919a:	683b      	ldr	r3, [r7, #0]
 800919c:	695b      	ldr	r3, [r3, #20]
 800919e:	693a      	ldr	r2, [r7, #16]
 80091a0:	4313      	orrs	r3, r2
 80091a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80091a4:	683b      	ldr	r3, [r7, #0]
 80091a6:	699b      	ldr	r3, [r3, #24]
 80091a8:	693a      	ldr	r2, [r7, #16]
 80091aa:	4313      	orrs	r3, r2
 80091ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	693a      	ldr	r2, [r7, #16]
 80091b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	68fa      	ldr	r2, [r7, #12]
 80091b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80091ba:	683b      	ldr	r3, [r7, #0]
 80091bc:	685a      	ldr	r2, [r3, #4]
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	697a      	ldr	r2, [r7, #20]
 80091c6:	621a      	str	r2, [r3, #32]
}
 80091c8:	bf00      	nop
 80091ca:	371c      	adds	r7, #28
 80091cc:	46bd      	mov	sp, r7
 80091ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d2:	4770      	bx	lr
 80091d4:	fffeff8f 	.word	0xfffeff8f
 80091d8:	40010000 	.word	0x40010000
 80091dc:	40010400 	.word	0x40010400
 80091e0:	40014000 	.word	0x40014000
 80091e4:	40014400 	.word	0x40014400
 80091e8:	40014800 	.word	0x40014800

080091ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80091ec:	b480      	push	{r7}
 80091ee:	b087      	sub	sp, #28
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
 80091f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	6a1b      	ldr	r3, [r3, #32]
 80091fa:	f023 0210 	bic.w	r2, r3, #16
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	6a1b      	ldr	r3, [r3, #32]
 8009206:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	685b      	ldr	r3, [r3, #4]
 800920c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	699b      	ldr	r3, [r3, #24]
 8009212:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009214:	68fa      	ldr	r2, [r7, #12]
 8009216:	4b34      	ldr	r3, [pc, #208]	; (80092e8 <TIM_OC2_SetConfig+0xfc>)
 8009218:	4013      	ands	r3, r2
 800921a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009222:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009224:	683b      	ldr	r3, [r7, #0]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	021b      	lsls	r3, r3, #8
 800922a:	68fa      	ldr	r2, [r7, #12]
 800922c:	4313      	orrs	r3, r2
 800922e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009230:	697b      	ldr	r3, [r7, #20]
 8009232:	f023 0320 	bic.w	r3, r3, #32
 8009236:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009238:	683b      	ldr	r3, [r7, #0]
 800923a:	689b      	ldr	r3, [r3, #8]
 800923c:	011b      	lsls	r3, r3, #4
 800923e:	697a      	ldr	r2, [r7, #20]
 8009240:	4313      	orrs	r3, r2
 8009242:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	4a29      	ldr	r2, [pc, #164]	; (80092ec <TIM_OC2_SetConfig+0x100>)
 8009248:	4293      	cmp	r3, r2
 800924a:	d003      	beq.n	8009254 <TIM_OC2_SetConfig+0x68>
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	4a28      	ldr	r2, [pc, #160]	; (80092f0 <TIM_OC2_SetConfig+0x104>)
 8009250:	4293      	cmp	r3, r2
 8009252:	d10d      	bne.n	8009270 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009254:	697b      	ldr	r3, [r7, #20]
 8009256:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800925a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800925c:	683b      	ldr	r3, [r7, #0]
 800925e:	68db      	ldr	r3, [r3, #12]
 8009260:	011b      	lsls	r3, r3, #4
 8009262:	697a      	ldr	r2, [r7, #20]
 8009264:	4313      	orrs	r3, r2
 8009266:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009268:	697b      	ldr	r3, [r7, #20]
 800926a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800926e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	4a1e      	ldr	r2, [pc, #120]	; (80092ec <TIM_OC2_SetConfig+0x100>)
 8009274:	4293      	cmp	r3, r2
 8009276:	d00f      	beq.n	8009298 <TIM_OC2_SetConfig+0xac>
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	4a1d      	ldr	r2, [pc, #116]	; (80092f0 <TIM_OC2_SetConfig+0x104>)
 800927c:	4293      	cmp	r3, r2
 800927e:	d00b      	beq.n	8009298 <TIM_OC2_SetConfig+0xac>
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	4a1c      	ldr	r2, [pc, #112]	; (80092f4 <TIM_OC2_SetConfig+0x108>)
 8009284:	4293      	cmp	r3, r2
 8009286:	d007      	beq.n	8009298 <TIM_OC2_SetConfig+0xac>
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	4a1b      	ldr	r2, [pc, #108]	; (80092f8 <TIM_OC2_SetConfig+0x10c>)
 800928c:	4293      	cmp	r3, r2
 800928e:	d003      	beq.n	8009298 <TIM_OC2_SetConfig+0xac>
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	4a1a      	ldr	r2, [pc, #104]	; (80092fc <TIM_OC2_SetConfig+0x110>)
 8009294:	4293      	cmp	r3, r2
 8009296:	d113      	bne.n	80092c0 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009298:	693b      	ldr	r3, [r7, #16]
 800929a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800929e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80092a0:	693b      	ldr	r3, [r7, #16]
 80092a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80092a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80092a8:	683b      	ldr	r3, [r7, #0]
 80092aa:	695b      	ldr	r3, [r3, #20]
 80092ac:	009b      	lsls	r3, r3, #2
 80092ae:	693a      	ldr	r2, [r7, #16]
 80092b0:	4313      	orrs	r3, r2
 80092b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80092b4:	683b      	ldr	r3, [r7, #0]
 80092b6:	699b      	ldr	r3, [r3, #24]
 80092b8:	009b      	lsls	r3, r3, #2
 80092ba:	693a      	ldr	r2, [r7, #16]
 80092bc:	4313      	orrs	r3, r2
 80092be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	693a      	ldr	r2, [r7, #16]
 80092c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	68fa      	ldr	r2, [r7, #12]
 80092ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80092cc:	683b      	ldr	r3, [r7, #0]
 80092ce:	685a      	ldr	r2, [r3, #4]
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	697a      	ldr	r2, [r7, #20]
 80092d8:	621a      	str	r2, [r3, #32]
}
 80092da:	bf00      	nop
 80092dc:	371c      	adds	r7, #28
 80092de:	46bd      	mov	sp, r7
 80092e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e4:	4770      	bx	lr
 80092e6:	bf00      	nop
 80092e8:	feff8fff 	.word	0xfeff8fff
 80092ec:	40010000 	.word	0x40010000
 80092f0:	40010400 	.word	0x40010400
 80092f4:	40014000 	.word	0x40014000
 80092f8:	40014400 	.word	0x40014400
 80092fc:	40014800 	.word	0x40014800

08009300 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009300:	b480      	push	{r7}
 8009302:	b087      	sub	sp, #28
 8009304:	af00      	add	r7, sp, #0
 8009306:	6078      	str	r0, [r7, #4]
 8009308:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	6a1b      	ldr	r3, [r3, #32]
 800930e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	6a1b      	ldr	r3, [r3, #32]
 800931a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	685b      	ldr	r3, [r3, #4]
 8009320:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	69db      	ldr	r3, [r3, #28]
 8009326:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009328:	68fa      	ldr	r2, [r7, #12]
 800932a:	4b33      	ldr	r3, [pc, #204]	; (80093f8 <TIM_OC3_SetConfig+0xf8>)
 800932c:	4013      	ands	r3, r2
 800932e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	f023 0303 	bic.w	r3, r3, #3
 8009336:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009338:	683b      	ldr	r3, [r7, #0]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	68fa      	ldr	r2, [r7, #12]
 800933e:	4313      	orrs	r3, r2
 8009340:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009342:	697b      	ldr	r3, [r7, #20]
 8009344:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009348:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800934a:	683b      	ldr	r3, [r7, #0]
 800934c:	689b      	ldr	r3, [r3, #8]
 800934e:	021b      	lsls	r3, r3, #8
 8009350:	697a      	ldr	r2, [r7, #20]
 8009352:	4313      	orrs	r3, r2
 8009354:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	4a28      	ldr	r2, [pc, #160]	; (80093fc <TIM_OC3_SetConfig+0xfc>)
 800935a:	4293      	cmp	r3, r2
 800935c:	d003      	beq.n	8009366 <TIM_OC3_SetConfig+0x66>
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	4a27      	ldr	r2, [pc, #156]	; (8009400 <TIM_OC3_SetConfig+0x100>)
 8009362:	4293      	cmp	r3, r2
 8009364:	d10d      	bne.n	8009382 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009366:	697b      	ldr	r3, [r7, #20]
 8009368:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800936c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800936e:	683b      	ldr	r3, [r7, #0]
 8009370:	68db      	ldr	r3, [r3, #12]
 8009372:	021b      	lsls	r3, r3, #8
 8009374:	697a      	ldr	r2, [r7, #20]
 8009376:	4313      	orrs	r3, r2
 8009378:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800937a:	697b      	ldr	r3, [r7, #20]
 800937c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009380:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	4a1d      	ldr	r2, [pc, #116]	; (80093fc <TIM_OC3_SetConfig+0xfc>)
 8009386:	4293      	cmp	r3, r2
 8009388:	d00f      	beq.n	80093aa <TIM_OC3_SetConfig+0xaa>
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	4a1c      	ldr	r2, [pc, #112]	; (8009400 <TIM_OC3_SetConfig+0x100>)
 800938e:	4293      	cmp	r3, r2
 8009390:	d00b      	beq.n	80093aa <TIM_OC3_SetConfig+0xaa>
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	4a1b      	ldr	r2, [pc, #108]	; (8009404 <TIM_OC3_SetConfig+0x104>)
 8009396:	4293      	cmp	r3, r2
 8009398:	d007      	beq.n	80093aa <TIM_OC3_SetConfig+0xaa>
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	4a1a      	ldr	r2, [pc, #104]	; (8009408 <TIM_OC3_SetConfig+0x108>)
 800939e:	4293      	cmp	r3, r2
 80093a0:	d003      	beq.n	80093aa <TIM_OC3_SetConfig+0xaa>
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	4a19      	ldr	r2, [pc, #100]	; (800940c <TIM_OC3_SetConfig+0x10c>)
 80093a6:	4293      	cmp	r3, r2
 80093a8:	d113      	bne.n	80093d2 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80093aa:	693b      	ldr	r3, [r7, #16]
 80093ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80093b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80093b2:	693b      	ldr	r3, [r7, #16]
 80093b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80093b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80093ba:	683b      	ldr	r3, [r7, #0]
 80093bc:	695b      	ldr	r3, [r3, #20]
 80093be:	011b      	lsls	r3, r3, #4
 80093c0:	693a      	ldr	r2, [r7, #16]
 80093c2:	4313      	orrs	r3, r2
 80093c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80093c6:	683b      	ldr	r3, [r7, #0]
 80093c8:	699b      	ldr	r3, [r3, #24]
 80093ca:	011b      	lsls	r3, r3, #4
 80093cc:	693a      	ldr	r2, [r7, #16]
 80093ce:	4313      	orrs	r3, r2
 80093d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	693a      	ldr	r2, [r7, #16]
 80093d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	68fa      	ldr	r2, [r7, #12]
 80093dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80093de:	683b      	ldr	r3, [r7, #0]
 80093e0:	685a      	ldr	r2, [r3, #4]
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	697a      	ldr	r2, [r7, #20]
 80093ea:	621a      	str	r2, [r3, #32]
}
 80093ec:	bf00      	nop
 80093ee:	371c      	adds	r7, #28
 80093f0:	46bd      	mov	sp, r7
 80093f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f6:	4770      	bx	lr
 80093f8:	fffeff8f 	.word	0xfffeff8f
 80093fc:	40010000 	.word	0x40010000
 8009400:	40010400 	.word	0x40010400
 8009404:	40014000 	.word	0x40014000
 8009408:	40014400 	.word	0x40014400
 800940c:	40014800 	.word	0x40014800

08009410 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009410:	b480      	push	{r7}
 8009412:	b087      	sub	sp, #28
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
 8009418:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	6a1b      	ldr	r3, [r3, #32]
 800941e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	6a1b      	ldr	r3, [r3, #32]
 800942a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	685b      	ldr	r3, [r3, #4]
 8009430:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	69db      	ldr	r3, [r3, #28]
 8009436:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009438:	68fa      	ldr	r2, [r7, #12]
 800943a:	4b24      	ldr	r3, [pc, #144]	; (80094cc <TIM_OC4_SetConfig+0xbc>)
 800943c:	4013      	ands	r3, r2
 800943e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009446:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009448:	683b      	ldr	r3, [r7, #0]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	021b      	lsls	r3, r3, #8
 800944e:	68fa      	ldr	r2, [r7, #12]
 8009450:	4313      	orrs	r3, r2
 8009452:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009454:	693b      	ldr	r3, [r7, #16]
 8009456:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800945a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800945c:	683b      	ldr	r3, [r7, #0]
 800945e:	689b      	ldr	r3, [r3, #8]
 8009460:	031b      	lsls	r3, r3, #12
 8009462:	693a      	ldr	r2, [r7, #16]
 8009464:	4313      	orrs	r3, r2
 8009466:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	4a19      	ldr	r2, [pc, #100]	; (80094d0 <TIM_OC4_SetConfig+0xc0>)
 800946c:	4293      	cmp	r3, r2
 800946e:	d00f      	beq.n	8009490 <TIM_OC4_SetConfig+0x80>
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	4a18      	ldr	r2, [pc, #96]	; (80094d4 <TIM_OC4_SetConfig+0xc4>)
 8009474:	4293      	cmp	r3, r2
 8009476:	d00b      	beq.n	8009490 <TIM_OC4_SetConfig+0x80>
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	4a17      	ldr	r2, [pc, #92]	; (80094d8 <TIM_OC4_SetConfig+0xc8>)
 800947c:	4293      	cmp	r3, r2
 800947e:	d007      	beq.n	8009490 <TIM_OC4_SetConfig+0x80>
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	4a16      	ldr	r2, [pc, #88]	; (80094dc <TIM_OC4_SetConfig+0xcc>)
 8009484:	4293      	cmp	r3, r2
 8009486:	d003      	beq.n	8009490 <TIM_OC4_SetConfig+0x80>
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	4a15      	ldr	r2, [pc, #84]	; (80094e0 <TIM_OC4_SetConfig+0xd0>)
 800948c:	4293      	cmp	r3, r2
 800948e:	d109      	bne.n	80094a4 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009490:	697b      	ldr	r3, [r7, #20]
 8009492:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009496:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009498:	683b      	ldr	r3, [r7, #0]
 800949a:	695b      	ldr	r3, [r3, #20]
 800949c:	019b      	lsls	r3, r3, #6
 800949e:	697a      	ldr	r2, [r7, #20]
 80094a0:	4313      	orrs	r3, r2
 80094a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	697a      	ldr	r2, [r7, #20]
 80094a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	68fa      	ldr	r2, [r7, #12]
 80094ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80094b0:	683b      	ldr	r3, [r7, #0]
 80094b2:	685a      	ldr	r2, [r3, #4]
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	693a      	ldr	r2, [r7, #16]
 80094bc:	621a      	str	r2, [r3, #32]
}
 80094be:	bf00      	nop
 80094c0:	371c      	adds	r7, #28
 80094c2:	46bd      	mov	sp, r7
 80094c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c8:	4770      	bx	lr
 80094ca:	bf00      	nop
 80094cc:	feff8fff 	.word	0xfeff8fff
 80094d0:	40010000 	.word	0x40010000
 80094d4:	40010400 	.word	0x40010400
 80094d8:	40014000 	.word	0x40014000
 80094dc:	40014400 	.word	0x40014400
 80094e0:	40014800 	.word	0x40014800

080094e4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80094e4:	b480      	push	{r7}
 80094e6:	b087      	sub	sp, #28
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]
 80094ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	6a1b      	ldr	r3, [r3, #32]
 80094f2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	6a1b      	ldr	r3, [r3, #32]
 80094fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	685b      	ldr	r3, [r3, #4]
 8009504:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800950a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800950c:	68fa      	ldr	r2, [r7, #12]
 800950e:	4b21      	ldr	r3, [pc, #132]	; (8009594 <TIM_OC5_SetConfig+0xb0>)
 8009510:	4013      	ands	r3, r2
 8009512:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009514:	683b      	ldr	r3, [r7, #0]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	68fa      	ldr	r2, [r7, #12]
 800951a:	4313      	orrs	r3, r2
 800951c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800951e:	693b      	ldr	r3, [r7, #16]
 8009520:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009524:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009526:	683b      	ldr	r3, [r7, #0]
 8009528:	689b      	ldr	r3, [r3, #8]
 800952a:	041b      	lsls	r3, r3, #16
 800952c:	693a      	ldr	r2, [r7, #16]
 800952e:	4313      	orrs	r3, r2
 8009530:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	4a18      	ldr	r2, [pc, #96]	; (8009598 <TIM_OC5_SetConfig+0xb4>)
 8009536:	4293      	cmp	r3, r2
 8009538:	d00f      	beq.n	800955a <TIM_OC5_SetConfig+0x76>
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	4a17      	ldr	r2, [pc, #92]	; (800959c <TIM_OC5_SetConfig+0xb8>)
 800953e:	4293      	cmp	r3, r2
 8009540:	d00b      	beq.n	800955a <TIM_OC5_SetConfig+0x76>
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	4a16      	ldr	r2, [pc, #88]	; (80095a0 <TIM_OC5_SetConfig+0xbc>)
 8009546:	4293      	cmp	r3, r2
 8009548:	d007      	beq.n	800955a <TIM_OC5_SetConfig+0x76>
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	4a15      	ldr	r2, [pc, #84]	; (80095a4 <TIM_OC5_SetConfig+0xc0>)
 800954e:	4293      	cmp	r3, r2
 8009550:	d003      	beq.n	800955a <TIM_OC5_SetConfig+0x76>
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	4a14      	ldr	r2, [pc, #80]	; (80095a8 <TIM_OC5_SetConfig+0xc4>)
 8009556:	4293      	cmp	r3, r2
 8009558:	d109      	bne.n	800956e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800955a:	697b      	ldr	r3, [r7, #20]
 800955c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009560:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009562:	683b      	ldr	r3, [r7, #0]
 8009564:	695b      	ldr	r3, [r3, #20]
 8009566:	021b      	lsls	r3, r3, #8
 8009568:	697a      	ldr	r2, [r7, #20]
 800956a:	4313      	orrs	r3, r2
 800956c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	697a      	ldr	r2, [r7, #20]
 8009572:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	68fa      	ldr	r2, [r7, #12]
 8009578:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800957a:	683b      	ldr	r3, [r7, #0]
 800957c:	685a      	ldr	r2, [r3, #4]
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	693a      	ldr	r2, [r7, #16]
 8009586:	621a      	str	r2, [r3, #32]
}
 8009588:	bf00      	nop
 800958a:	371c      	adds	r7, #28
 800958c:	46bd      	mov	sp, r7
 800958e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009592:	4770      	bx	lr
 8009594:	fffeff8f 	.word	0xfffeff8f
 8009598:	40010000 	.word	0x40010000
 800959c:	40010400 	.word	0x40010400
 80095a0:	40014000 	.word	0x40014000
 80095a4:	40014400 	.word	0x40014400
 80095a8:	40014800 	.word	0x40014800

080095ac <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80095ac:	b480      	push	{r7}
 80095ae:	b087      	sub	sp, #28
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
 80095b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	6a1b      	ldr	r3, [r3, #32]
 80095ba:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	6a1b      	ldr	r3, [r3, #32]
 80095c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	685b      	ldr	r3, [r3, #4]
 80095cc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80095d4:	68fa      	ldr	r2, [r7, #12]
 80095d6:	4b22      	ldr	r3, [pc, #136]	; (8009660 <TIM_OC6_SetConfig+0xb4>)
 80095d8:	4013      	ands	r3, r2
 80095da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80095dc:	683b      	ldr	r3, [r7, #0]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	021b      	lsls	r3, r3, #8
 80095e2:	68fa      	ldr	r2, [r7, #12]
 80095e4:	4313      	orrs	r3, r2
 80095e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80095e8:	693b      	ldr	r3, [r7, #16]
 80095ea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80095ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80095f0:	683b      	ldr	r3, [r7, #0]
 80095f2:	689b      	ldr	r3, [r3, #8]
 80095f4:	051b      	lsls	r3, r3, #20
 80095f6:	693a      	ldr	r2, [r7, #16]
 80095f8:	4313      	orrs	r3, r2
 80095fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	4a19      	ldr	r2, [pc, #100]	; (8009664 <TIM_OC6_SetConfig+0xb8>)
 8009600:	4293      	cmp	r3, r2
 8009602:	d00f      	beq.n	8009624 <TIM_OC6_SetConfig+0x78>
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	4a18      	ldr	r2, [pc, #96]	; (8009668 <TIM_OC6_SetConfig+0xbc>)
 8009608:	4293      	cmp	r3, r2
 800960a:	d00b      	beq.n	8009624 <TIM_OC6_SetConfig+0x78>
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	4a17      	ldr	r2, [pc, #92]	; (800966c <TIM_OC6_SetConfig+0xc0>)
 8009610:	4293      	cmp	r3, r2
 8009612:	d007      	beq.n	8009624 <TIM_OC6_SetConfig+0x78>
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	4a16      	ldr	r2, [pc, #88]	; (8009670 <TIM_OC6_SetConfig+0xc4>)
 8009618:	4293      	cmp	r3, r2
 800961a:	d003      	beq.n	8009624 <TIM_OC6_SetConfig+0x78>
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	4a15      	ldr	r2, [pc, #84]	; (8009674 <TIM_OC6_SetConfig+0xc8>)
 8009620:	4293      	cmp	r3, r2
 8009622:	d109      	bne.n	8009638 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009624:	697b      	ldr	r3, [r7, #20]
 8009626:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800962a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800962c:	683b      	ldr	r3, [r7, #0]
 800962e:	695b      	ldr	r3, [r3, #20]
 8009630:	029b      	lsls	r3, r3, #10
 8009632:	697a      	ldr	r2, [r7, #20]
 8009634:	4313      	orrs	r3, r2
 8009636:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	697a      	ldr	r2, [r7, #20]
 800963c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	68fa      	ldr	r2, [r7, #12]
 8009642:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009644:	683b      	ldr	r3, [r7, #0]
 8009646:	685a      	ldr	r2, [r3, #4]
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	693a      	ldr	r2, [r7, #16]
 8009650:	621a      	str	r2, [r3, #32]
}
 8009652:	bf00      	nop
 8009654:	371c      	adds	r7, #28
 8009656:	46bd      	mov	sp, r7
 8009658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965c:	4770      	bx	lr
 800965e:	bf00      	nop
 8009660:	feff8fff 	.word	0xfeff8fff
 8009664:	40010000 	.word	0x40010000
 8009668:	40010400 	.word	0x40010400
 800966c:	40014000 	.word	0x40014000
 8009670:	40014400 	.word	0x40014400
 8009674:	40014800 	.word	0x40014800

08009678 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b086      	sub	sp, #24
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
 8009680:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009682:	2300      	movs	r3, #0
 8009684:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	689b      	ldr	r3, [r3, #8]
 800968c:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800968e:	693a      	ldr	r2, [r7, #16]
 8009690:	4b65      	ldr	r3, [pc, #404]	; (8009828 <TIM_SlaveTimer_SetConfig+0x1b0>)
 8009692:	4013      	ands	r3, r2
 8009694:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8009696:	683b      	ldr	r3, [r7, #0]
 8009698:	685b      	ldr	r3, [r3, #4]
 800969a:	693a      	ldr	r2, [r7, #16]
 800969c:	4313      	orrs	r3, r2
 800969e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80096a0:	693a      	ldr	r2, [r7, #16]
 80096a2:	4b62      	ldr	r3, [pc, #392]	; (800982c <TIM_SlaveTimer_SetConfig+0x1b4>)
 80096a4:	4013      	ands	r3, r2
 80096a6:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80096a8:	683b      	ldr	r3, [r7, #0]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	693a      	ldr	r2, [r7, #16]
 80096ae:	4313      	orrs	r3, r2
 80096b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	693a      	ldr	r2, [r7, #16]
 80096b8:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80096ba:	683b      	ldr	r3, [r7, #0]
 80096bc:	685b      	ldr	r3, [r3, #4]
 80096be:	4a5c      	ldr	r2, [pc, #368]	; (8009830 <TIM_SlaveTimer_SetConfig+0x1b8>)
 80096c0:	4293      	cmp	r3, r2
 80096c2:	f000 80ab 	beq.w	800981c <TIM_SlaveTimer_SetConfig+0x1a4>
 80096c6:	4a5a      	ldr	r2, [pc, #360]	; (8009830 <TIM_SlaveTimer_SetConfig+0x1b8>)
 80096c8:	4293      	cmp	r3, r2
 80096ca:	f200 80a4 	bhi.w	8009816 <TIM_SlaveTimer_SetConfig+0x19e>
 80096ce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80096d2:	f000 80a3 	beq.w	800981c <TIM_SlaveTimer_SetConfig+0x1a4>
 80096d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80096da:	f200 809c 	bhi.w	8009816 <TIM_SlaveTimer_SetConfig+0x19e>
 80096de:	4a55      	ldr	r2, [pc, #340]	; (8009834 <TIM_SlaveTimer_SetConfig+0x1bc>)
 80096e0:	4293      	cmp	r3, r2
 80096e2:	f000 809b 	beq.w	800981c <TIM_SlaveTimer_SetConfig+0x1a4>
 80096e6:	4a53      	ldr	r2, [pc, #332]	; (8009834 <TIM_SlaveTimer_SetConfig+0x1bc>)
 80096e8:	4293      	cmp	r3, r2
 80096ea:	f200 8094 	bhi.w	8009816 <TIM_SlaveTimer_SetConfig+0x19e>
 80096ee:	4a52      	ldr	r2, [pc, #328]	; (8009838 <TIM_SlaveTimer_SetConfig+0x1c0>)
 80096f0:	4293      	cmp	r3, r2
 80096f2:	f000 8093 	beq.w	800981c <TIM_SlaveTimer_SetConfig+0x1a4>
 80096f6:	4a50      	ldr	r2, [pc, #320]	; (8009838 <TIM_SlaveTimer_SetConfig+0x1c0>)
 80096f8:	4293      	cmp	r3, r2
 80096fa:	f200 808c 	bhi.w	8009816 <TIM_SlaveTimer_SetConfig+0x19e>
 80096fe:	4a4f      	ldr	r2, [pc, #316]	; (800983c <TIM_SlaveTimer_SetConfig+0x1c4>)
 8009700:	4293      	cmp	r3, r2
 8009702:	f000 808b 	beq.w	800981c <TIM_SlaveTimer_SetConfig+0x1a4>
 8009706:	4a4d      	ldr	r2, [pc, #308]	; (800983c <TIM_SlaveTimer_SetConfig+0x1c4>)
 8009708:	4293      	cmp	r3, r2
 800970a:	f200 8084 	bhi.w	8009816 <TIM_SlaveTimer_SetConfig+0x19e>
 800970e:	4a4c      	ldr	r2, [pc, #304]	; (8009840 <TIM_SlaveTimer_SetConfig+0x1c8>)
 8009710:	4293      	cmp	r3, r2
 8009712:	f000 8083 	beq.w	800981c <TIM_SlaveTimer_SetConfig+0x1a4>
 8009716:	4a4a      	ldr	r2, [pc, #296]	; (8009840 <TIM_SlaveTimer_SetConfig+0x1c8>)
 8009718:	4293      	cmp	r3, r2
 800971a:	d87c      	bhi.n	8009816 <TIM_SlaveTimer_SetConfig+0x19e>
 800971c:	4a49      	ldr	r2, [pc, #292]	; (8009844 <TIM_SlaveTimer_SetConfig+0x1cc>)
 800971e:	4293      	cmp	r3, r2
 8009720:	d07c      	beq.n	800981c <TIM_SlaveTimer_SetConfig+0x1a4>
 8009722:	4a48      	ldr	r2, [pc, #288]	; (8009844 <TIM_SlaveTimer_SetConfig+0x1cc>)
 8009724:	4293      	cmp	r3, r2
 8009726:	d876      	bhi.n	8009816 <TIM_SlaveTimer_SetConfig+0x19e>
 8009728:	4a47      	ldr	r2, [pc, #284]	; (8009848 <TIM_SlaveTimer_SetConfig+0x1d0>)
 800972a:	4293      	cmp	r3, r2
 800972c:	d076      	beq.n	800981c <TIM_SlaveTimer_SetConfig+0x1a4>
 800972e:	4a46      	ldr	r2, [pc, #280]	; (8009848 <TIM_SlaveTimer_SetConfig+0x1d0>)
 8009730:	4293      	cmp	r3, r2
 8009732:	d870      	bhi.n	8009816 <TIM_SlaveTimer_SetConfig+0x19e>
 8009734:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009738:	d070      	beq.n	800981c <TIM_SlaveTimer_SetConfig+0x1a4>
 800973a:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800973e:	d86a      	bhi.n	8009816 <TIM_SlaveTimer_SetConfig+0x19e>
 8009740:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009744:	d06a      	beq.n	800981c <TIM_SlaveTimer_SetConfig+0x1a4>
 8009746:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800974a:	d864      	bhi.n	8009816 <TIM_SlaveTimer_SetConfig+0x19e>
 800974c:	2b70      	cmp	r3, #112	; 0x70
 800974e:	d01a      	beq.n	8009786 <TIM_SlaveTimer_SetConfig+0x10e>
 8009750:	2b70      	cmp	r3, #112	; 0x70
 8009752:	d860      	bhi.n	8009816 <TIM_SlaveTimer_SetConfig+0x19e>
 8009754:	2b60      	cmp	r3, #96	; 0x60
 8009756:	d054      	beq.n	8009802 <TIM_SlaveTimer_SetConfig+0x18a>
 8009758:	2b60      	cmp	r3, #96	; 0x60
 800975a:	d85c      	bhi.n	8009816 <TIM_SlaveTimer_SetConfig+0x19e>
 800975c:	2b50      	cmp	r3, #80	; 0x50
 800975e:	d046      	beq.n	80097ee <TIM_SlaveTimer_SetConfig+0x176>
 8009760:	2b50      	cmp	r3, #80	; 0x50
 8009762:	d858      	bhi.n	8009816 <TIM_SlaveTimer_SetConfig+0x19e>
 8009764:	2b40      	cmp	r3, #64	; 0x40
 8009766:	d019      	beq.n	800979c <TIM_SlaveTimer_SetConfig+0x124>
 8009768:	2b40      	cmp	r3, #64	; 0x40
 800976a:	d854      	bhi.n	8009816 <TIM_SlaveTimer_SetConfig+0x19e>
 800976c:	2b30      	cmp	r3, #48	; 0x30
 800976e:	d055      	beq.n	800981c <TIM_SlaveTimer_SetConfig+0x1a4>
 8009770:	2b30      	cmp	r3, #48	; 0x30
 8009772:	d850      	bhi.n	8009816 <TIM_SlaveTimer_SetConfig+0x19e>
 8009774:	2b20      	cmp	r3, #32
 8009776:	d051      	beq.n	800981c <TIM_SlaveTimer_SetConfig+0x1a4>
 8009778:	2b20      	cmp	r3, #32
 800977a:	d84c      	bhi.n	8009816 <TIM_SlaveTimer_SetConfig+0x19e>
 800977c:	2b00      	cmp	r3, #0
 800977e:	d04d      	beq.n	800981c <TIM_SlaveTimer_SetConfig+0x1a4>
 8009780:	2b10      	cmp	r3, #16
 8009782:	d04b      	beq.n	800981c <TIM_SlaveTimer_SetConfig+0x1a4>
 8009784:	e047      	b.n	8009816 <TIM_SlaveTimer_SetConfig+0x19e>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 800978a:	683b      	ldr	r3, [r7, #0]
 800978c:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 800978e:	683b      	ldr	r3, [r7, #0]
 8009790:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8009792:	683b      	ldr	r3, [r7, #0]
 8009794:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8009796:	f000 f8b8 	bl	800990a <TIM_ETR_SetConfig>
      break;
 800979a:	e040      	b.n	800981e <TIM_SlaveTimer_SetConfig+0x1a6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800979c:	683b      	ldr	r3, [r7, #0]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	2b05      	cmp	r3, #5
 80097a2:	d101      	bne.n	80097a8 <TIM_SlaveTimer_SetConfig+0x130>
      {
        return HAL_ERROR;
 80097a4:	2301      	movs	r3, #1
 80097a6:	e03b      	b.n	8009820 <TIM_SlaveTimer_SetConfig+0x1a8>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	6a1b      	ldr	r3, [r3, #32]
 80097ae:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	6a1a      	ldr	r2, [r3, #32]
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	f022 0201 	bic.w	r2, r2, #1
 80097be:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	699b      	ldr	r3, [r3, #24]
 80097c6:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80097c8:	68bb      	ldr	r3, [r7, #8]
 80097ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80097ce:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80097d0:	683b      	ldr	r3, [r7, #0]
 80097d2:	691b      	ldr	r3, [r3, #16]
 80097d4:	011b      	lsls	r3, r3, #4
 80097d6:	68ba      	ldr	r2, [r7, #8]
 80097d8:	4313      	orrs	r3, r2
 80097da:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	68ba      	ldr	r2, [r7, #8]
 80097e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	68fa      	ldr	r2, [r7, #12]
 80097ea:	621a      	str	r2, [r3, #32]
      break;
 80097ec:	e017      	b.n	800981e <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80097f2:	683b      	ldr	r3, [r7, #0]
 80097f4:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80097f6:	683b      	ldr	r3, [r7, #0]
 80097f8:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80097fa:	461a      	mov	r2, r3
 80097fc:	f000 f826 	bl	800984c <TIM_TI1_ConfigInputStage>
      break;
 8009800:	e00d      	b.n	800981e <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8009806:	683b      	ldr	r3, [r7, #0]
 8009808:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800980a:	683b      	ldr	r3, [r7, #0]
 800980c:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800980e:	461a      	mov	r2, r3
 8009810:	f000 f84b 	bl	80098aa <TIM_TI2_ConfigInputStage>
      break;
 8009814:	e003      	b.n	800981e <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8009816:	2301      	movs	r3, #1
 8009818:	75fb      	strb	r3, [r7, #23]
      break;
 800981a:	e000      	b.n	800981e <TIM_SlaveTimer_SetConfig+0x1a6>
      break;
 800981c:	bf00      	nop
  }

  return status;
 800981e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009820:	4618      	mov	r0, r3
 8009822:	3718      	adds	r7, #24
 8009824:	46bd      	mov	sp, r7
 8009826:	bd80      	pop	{r7, pc}
 8009828:	ffcfff8f 	.word	0xffcfff8f
 800982c:	fffefff8 	.word	0xfffefff8
 8009830:	00200010 	.word	0x00200010
 8009834:	00100070 	.word	0x00100070
 8009838:	00100060 	.word	0x00100060
 800983c:	00100050 	.word	0x00100050
 8009840:	00100040 	.word	0x00100040
 8009844:	00100030 	.word	0x00100030
 8009848:	00100020 	.word	0x00100020

0800984c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800984c:	b480      	push	{r7}
 800984e:	b087      	sub	sp, #28
 8009850:	af00      	add	r7, sp, #0
 8009852:	60f8      	str	r0, [r7, #12]
 8009854:	60b9      	str	r1, [r7, #8]
 8009856:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	6a1b      	ldr	r3, [r3, #32]
 800985c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	6a1b      	ldr	r3, [r3, #32]
 8009862:	f023 0201 	bic.w	r2, r3, #1
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	699b      	ldr	r3, [r3, #24]
 800986e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009870:	693b      	ldr	r3, [r7, #16]
 8009872:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009876:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	011b      	lsls	r3, r3, #4
 800987c:	693a      	ldr	r2, [r7, #16]
 800987e:	4313      	orrs	r3, r2
 8009880:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009882:	697b      	ldr	r3, [r7, #20]
 8009884:	f023 030a 	bic.w	r3, r3, #10
 8009888:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800988a:	697a      	ldr	r2, [r7, #20]
 800988c:	68bb      	ldr	r3, [r7, #8]
 800988e:	4313      	orrs	r3, r2
 8009890:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	693a      	ldr	r2, [r7, #16]
 8009896:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	697a      	ldr	r2, [r7, #20]
 800989c:	621a      	str	r2, [r3, #32]
}
 800989e:	bf00      	nop
 80098a0:	371c      	adds	r7, #28
 80098a2:	46bd      	mov	sp, r7
 80098a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a8:	4770      	bx	lr

080098aa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80098aa:	b480      	push	{r7}
 80098ac:	b087      	sub	sp, #28
 80098ae:	af00      	add	r7, sp, #0
 80098b0:	60f8      	str	r0, [r7, #12]
 80098b2:	60b9      	str	r1, [r7, #8]
 80098b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	6a1b      	ldr	r3, [r3, #32]
 80098ba:	f023 0210 	bic.w	r2, r3, #16
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	699b      	ldr	r3, [r3, #24]
 80098c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	6a1b      	ldr	r3, [r3, #32]
 80098cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80098ce:	697b      	ldr	r3, [r7, #20]
 80098d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80098d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	031b      	lsls	r3, r3, #12
 80098da:	697a      	ldr	r2, [r7, #20]
 80098dc:	4313      	orrs	r3, r2
 80098de:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80098e0:	693b      	ldr	r3, [r7, #16]
 80098e2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80098e6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80098e8:	68bb      	ldr	r3, [r7, #8]
 80098ea:	011b      	lsls	r3, r3, #4
 80098ec:	693a      	ldr	r2, [r7, #16]
 80098ee:	4313      	orrs	r3, r2
 80098f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	697a      	ldr	r2, [r7, #20]
 80098f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	693a      	ldr	r2, [r7, #16]
 80098fc:	621a      	str	r2, [r3, #32]
}
 80098fe:	bf00      	nop
 8009900:	371c      	adds	r7, #28
 8009902:	46bd      	mov	sp, r7
 8009904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009908:	4770      	bx	lr

0800990a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800990a:	b480      	push	{r7}
 800990c:	b087      	sub	sp, #28
 800990e:	af00      	add	r7, sp, #0
 8009910:	60f8      	str	r0, [r7, #12]
 8009912:	60b9      	str	r1, [r7, #8]
 8009914:	607a      	str	r2, [r7, #4]
 8009916:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	689b      	ldr	r3, [r3, #8]
 800991c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800991e:	697b      	ldr	r3, [r7, #20]
 8009920:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009924:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009926:	683b      	ldr	r3, [r7, #0]
 8009928:	021a      	lsls	r2, r3, #8
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	431a      	orrs	r2, r3
 800992e:	68bb      	ldr	r3, [r7, #8]
 8009930:	4313      	orrs	r3, r2
 8009932:	697a      	ldr	r2, [r7, #20]
 8009934:	4313      	orrs	r3, r2
 8009936:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	697a      	ldr	r2, [r7, #20]
 800993c:	609a      	str	r2, [r3, #8]
}
 800993e:	bf00      	nop
 8009940:	371c      	adds	r7, #28
 8009942:	46bd      	mov	sp, r7
 8009944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009948:	4770      	bx	lr

0800994a <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800994a:	b480      	push	{r7}
 800994c:	b087      	sub	sp, #28
 800994e:	af00      	add	r7, sp, #0
 8009950:	60f8      	str	r0, [r7, #12]
 8009952:	60b9      	str	r1, [r7, #8]
 8009954:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009956:	68bb      	ldr	r3, [r7, #8]
 8009958:	f003 031f 	and.w	r3, r3, #31
 800995c:	2201      	movs	r2, #1
 800995e:	fa02 f303 	lsl.w	r3, r2, r3
 8009962:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	6a1a      	ldr	r2, [r3, #32]
 8009968:	697b      	ldr	r3, [r7, #20]
 800996a:	43db      	mvns	r3, r3
 800996c:	401a      	ands	r2, r3
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	6a1a      	ldr	r2, [r3, #32]
 8009976:	68bb      	ldr	r3, [r7, #8]
 8009978:	f003 031f 	and.w	r3, r3, #31
 800997c:	6879      	ldr	r1, [r7, #4]
 800997e:	fa01 f303 	lsl.w	r3, r1, r3
 8009982:	431a      	orrs	r2, r3
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	621a      	str	r2, [r3, #32]
}
 8009988:	bf00      	nop
 800998a:	371c      	adds	r7, #28
 800998c:	46bd      	mov	sp, r7
 800998e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009992:	4770      	bx	lr

08009994 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009994:	b480      	push	{r7}
 8009996:	b085      	sub	sp, #20
 8009998:	af00      	add	r7, sp, #0
 800999a:	6078      	str	r0, [r7, #4]
 800999c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80099a4:	2b01      	cmp	r3, #1
 80099a6:	d101      	bne.n	80099ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80099a8:	2302      	movs	r3, #2
 80099aa:	e077      	b.n	8009a9c <HAL_TIMEx_MasterConfigSynchronization+0x108>
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	2201      	movs	r2, #1
 80099b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	2202      	movs	r2, #2
 80099b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	685b      	ldr	r3, [r3, #4]
 80099c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	689b      	ldr	r3, [r3, #8]
 80099ca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	4a35      	ldr	r2, [pc, #212]	; (8009aa8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80099d2:	4293      	cmp	r3, r2
 80099d4:	d004      	beq.n	80099e0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	4a34      	ldr	r2, [pc, #208]	; (8009aac <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80099dc:	4293      	cmp	r3, r2
 80099de:	d108      	bne.n	80099f2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80099e6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80099e8:	683b      	ldr	r3, [r7, #0]
 80099ea:	685b      	ldr	r3, [r3, #4]
 80099ec:	68fa      	ldr	r2, [r7, #12]
 80099ee:	4313      	orrs	r3, r2
 80099f0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099f8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80099fa:	683b      	ldr	r3, [r7, #0]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	68fa      	ldr	r2, [r7, #12]
 8009a00:	4313      	orrs	r3, r2
 8009a02:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	68fa      	ldr	r2, [r7, #12]
 8009a0a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	4a25      	ldr	r2, [pc, #148]	; (8009aa8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009a12:	4293      	cmp	r3, r2
 8009a14:	d02c      	beq.n	8009a70 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a1e:	d027      	beq.n	8009a70 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	4a22      	ldr	r2, [pc, #136]	; (8009ab0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8009a26:	4293      	cmp	r3, r2
 8009a28:	d022      	beq.n	8009a70 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	4a21      	ldr	r2, [pc, #132]	; (8009ab4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8009a30:	4293      	cmp	r3, r2
 8009a32:	d01d      	beq.n	8009a70 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	4a1f      	ldr	r2, [pc, #124]	; (8009ab8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8009a3a:	4293      	cmp	r3, r2
 8009a3c:	d018      	beq.n	8009a70 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	4a1a      	ldr	r2, [pc, #104]	; (8009aac <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009a44:	4293      	cmp	r3, r2
 8009a46:	d013      	beq.n	8009a70 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	4a1b      	ldr	r2, [pc, #108]	; (8009abc <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8009a4e:	4293      	cmp	r3, r2
 8009a50:	d00e      	beq.n	8009a70 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	4a1a      	ldr	r2, [pc, #104]	; (8009ac0 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8009a58:	4293      	cmp	r3, r2
 8009a5a:	d009      	beq.n	8009a70 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	4a18      	ldr	r2, [pc, #96]	; (8009ac4 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8009a62:	4293      	cmp	r3, r2
 8009a64:	d004      	beq.n	8009a70 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	4a17      	ldr	r2, [pc, #92]	; (8009ac8 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8009a6c:	4293      	cmp	r3, r2
 8009a6e:	d10c      	bne.n	8009a8a <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009a70:	68bb      	ldr	r3, [r7, #8]
 8009a72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009a76:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009a78:	683b      	ldr	r3, [r7, #0]
 8009a7a:	689b      	ldr	r3, [r3, #8]
 8009a7c:	68ba      	ldr	r2, [r7, #8]
 8009a7e:	4313      	orrs	r3, r2
 8009a80:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	68ba      	ldr	r2, [r7, #8]
 8009a88:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	2201      	movs	r2, #1
 8009a8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	2200      	movs	r2, #0
 8009a96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009a9a:	2300      	movs	r3, #0
}
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	3714      	adds	r7, #20
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa6:	4770      	bx	lr
 8009aa8:	40010000 	.word	0x40010000
 8009aac:	40010400 	.word	0x40010400
 8009ab0:	40000400 	.word	0x40000400
 8009ab4:	40000800 	.word	0x40000800
 8009ab8:	40000c00 	.word	0x40000c00
 8009abc:	40001800 	.word	0x40001800
 8009ac0:	40014000 	.word	0x40014000
 8009ac4:	4000e000 	.word	0x4000e000
 8009ac8:	4000e400 	.word	0x4000e400

08009acc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009acc:	b480      	push	{r7}
 8009ace:	b085      	sub	sp, #20
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	6078      	str	r0, [r7, #4]
 8009ad4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009ae0:	2b01      	cmp	r3, #1
 8009ae2:	d101      	bne.n	8009ae8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009ae4:	2302      	movs	r3, #2
 8009ae6:	e087      	b.n	8009bf8 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	2201      	movs	r2, #1
 8009aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009af6:	683b      	ldr	r3, [r7, #0]
 8009af8:	68db      	ldr	r3, [r3, #12]
 8009afa:	4313      	orrs	r3, r2
 8009afc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009b04:	683b      	ldr	r3, [r7, #0]
 8009b06:	689b      	ldr	r3, [r3, #8]
 8009b08:	4313      	orrs	r3, r2
 8009b0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009b12:	683b      	ldr	r3, [r7, #0]
 8009b14:	685b      	ldr	r3, [r3, #4]
 8009b16:	4313      	orrs	r3, r2
 8009b18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009b20:	683b      	ldr	r3, [r7, #0]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	4313      	orrs	r3, r2
 8009b26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009b2e:	683b      	ldr	r3, [r7, #0]
 8009b30:	691b      	ldr	r3, [r3, #16]
 8009b32:	4313      	orrs	r3, r2
 8009b34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009b3c:	683b      	ldr	r3, [r7, #0]
 8009b3e:	695b      	ldr	r3, [r3, #20]
 8009b40:	4313      	orrs	r3, r2
 8009b42:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009b4a:	683b      	ldr	r3, [r7, #0]
 8009b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b4e:	4313      	orrs	r3, r2
 8009b50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8009b58:	683b      	ldr	r3, [r7, #0]
 8009b5a:	699b      	ldr	r3, [r3, #24]
 8009b5c:	041b      	lsls	r3, r3, #16
 8009b5e:	4313      	orrs	r3, r2
 8009b60:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	4a27      	ldr	r2, [pc, #156]	; (8009c04 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8009b68:	4293      	cmp	r3, r2
 8009b6a:	d004      	beq.n	8009b76 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	4a25      	ldr	r2, [pc, #148]	; (8009c08 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8009b72:	4293      	cmp	r3, r2
 8009b74:	d106      	bne.n	8009b84 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8009b7c:	683b      	ldr	r3, [r7, #0]
 8009b7e:	69db      	ldr	r3, [r3, #28]
 8009b80:	4313      	orrs	r3, r2
 8009b82:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	4a1e      	ldr	r2, [pc, #120]	; (8009c04 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8009b8a:	4293      	cmp	r3, r2
 8009b8c:	d004      	beq.n	8009b98 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	4a1d      	ldr	r2, [pc, #116]	; (8009c08 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8009b94:	4293      	cmp	r3, r2
 8009b96:	d126      	bne.n	8009be6 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8009b9e:	683b      	ldr	r3, [r7, #0]
 8009ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ba2:	051b      	lsls	r3, r3, #20
 8009ba4:	4313      	orrs	r3, r2
 8009ba6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009bae:	683b      	ldr	r3, [r7, #0]
 8009bb0:	6a1b      	ldr	r3, [r3, #32]
 8009bb2:	4313      	orrs	r3, r2
 8009bb4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8009bbc:	683b      	ldr	r3, [r7, #0]
 8009bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bc0:	4313      	orrs	r3, r2
 8009bc2:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	4a0e      	ldr	r2, [pc, #56]	; (8009c04 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8009bca:	4293      	cmp	r3, r2
 8009bcc:	d004      	beq.n	8009bd8 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	4a0d      	ldr	r2, [pc, #52]	; (8009c08 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8009bd4:	4293      	cmp	r3, r2
 8009bd6:	d106      	bne.n	8009be6 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8009bde:	683b      	ldr	r3, [r7, #0]
 8009be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009be2:	4313      	orrs	r3, r2
 8009be4:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	68fa      	ldr	r2, [r7, #12]
 8009bec:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	2200      	movs	r2, #0
 8009bf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009bf6:	2300      	movs	r3, #0
}
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	3714      	adds	r7, #20
 8009bfc:	46bd      	mov	sp, r7
 8009bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c02:	4770      	bx	lr
 8009c04:	40010000 	.word	0x40010000
 8009c08:	40010400 	.word	0x40010400

08009c0c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009c0c:	b580      	push	{r7, lr}
 8009c0e:	b082      	sub	sp, #8
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d101      	bne.n	8009c1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009c1a:	2301      	movs	r3, #1
 8009c1c:	e042      	b.n	8009ca4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d106      	bne.n	8009c36 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009c30:	6878      	ldr	r0, [r7, #4]
 8009c32:	f7f7 fd5d 	bl	80016f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	2224      	movs	r2, #36	; 0x24
 8009c3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	681a      	ldr	r2, [r3, #0]
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	f022 0201 	bic.w	r2, r2, #1
 8009c4c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009c4e:	6878      	ldr	r0, [r7, #4]
 8009c50:	f000 f82c 	bl	8009cac <UART_SetConfig>
 8009c54:	4603      	mov	r3, r0
 8009c56:	2b01      	cmp	r3, #1
 8009c58:	d101      	bne.n	8009c5e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8009c5a:	2301      	movs	r3, #1
 8009c5c:	e022      	b.n	8009ca4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d002      	beq.n	8009c6c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8009c66:	6878      	ldr	r0, [r7, #4]
 8009c68:	f000 fe8c 	bl	800a984 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	685a      	ldr	r2, [r3, #4]
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009c7a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	689a      	ldr	r2, [r3, #8]
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009c8a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	681a      	ldr	r2, [r3, #0]
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	f042 0201 	orr.w	r2, r2, #1
 8009c9a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009c9c:	6878      	ldr	r0, [r7, #4]
 8009c9e:	f000 ff13 	bl	800aac8 <UART_CheckIdleState>
 8009ca2:	4603      	mov	r3, r0
}
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	3708      	adds	r7, #8
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	bd80      	pop	{r7, pc}

08009cac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009cac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009cb0:	b092      	sub	sp, #72	; 0x48
 8009cb2:	af00      	add	r7, sp, #0
 8009cb4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009cbc:	697b      	ldr	r3, [r7, #20]
 8009cbe:	689a      	ldr	r2, [r3, #8]
 8009cc0:	697b      	ldr	r3, [r7, #20]
 8009cc2:	691b      	ldr	r3, [r3, #16]
 8009cc4:	431a      	orrs	r2, r3
 8009cc6:	697b      	ldr	r3, [r7, #20]
 8009cc8:	695b      	ldr	r3, [r3, #20]
 8009cca:	431a      	orrs	r2, r3
 8009ccc:	697b      	ldr	r3, [r7, #20]
 8009cce:	69db      	ldr	r3, [r3, #28]
 8009cd0:	4313      	orrs	r3, r2
 8009cd2:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009cd4:	697b      	ldr	r3, [r7, #20]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	681a      	ldr	r2, [r3, #0]
 8009cda:	4bbe      	ldr	r3, [pc, #760]	; (8009fd4 <UART_SetConfig+0x328>)
 8009cdc:	4013      	ands	r3, r2
 8009cde:	697a      	ldr	r2, [r7, #20]
 8009ce0:	6812      	ldr	r2, [r2, #0]
 8009ce2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009ce4:	430b      	orrs	r3, r1
 8009ce6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009ce8:	697b      	ldr	r3, [r7, #20]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	685b      	ldr	r3, [r3, #4]
 8009cee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009cf2:	697b      	ldr	r3, [r7, #20]
 8009cf4:	68da      	ldr	r2, [r3, #12]
 8009cf6:	697b      	ldr	r3, [r7, #20]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	430a      	orrs	r2, r1
 8009cfc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009cfe:	697b      	ldr	r3, [r7, #20]
 8009d00:	699b      	ldr	r3, [r3, #24]
 8009d02:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009d04:	697b      	ldr	r3, [r7, #20]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	4ab3      	ldr	r2, [pc, #716]	; (8009fd8 <UART_SetConfig+0x32c>)
 8009d0a:	4293      	cmp	r3, r2
 8009d0c:	d004      	beq.n	8009d18 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009d0e:	697b      	ldr	r3, [r7, #20]
 8009d10:	6a1b      	ldr	r3, [r3, #32]
 8009d12:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009d14:	4313      	orrs	r3, r2
 8009d16:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009d18:	697b      	ldr	r3, [r7, #20]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	689a      	ldr	r2, [r3, #8]
 8009d1e:	4baf      	ldr	r3, [pc, #700]	; (8009fdc <UART_SetConfig+0x330>)
 8009d20:	4013      	ands	r3, r2
 8009d22:	697a      	ldr	r2, [r7, #20]
 8009d24:	6812      	ldr	r2, [r2, #0]
 8009d26:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009d28:	430b      	orrs	r3, r1
 8009d2a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009d2c:	697b      	ldr	r3, [r7, #20]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d32:	f023 010f 	bic.w	r1, r3, #15
 8009d36:	697b      	ldr	r3, [r7, #20]
 8009d38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009d3a:	697b      	ldr	r3, [r7, #20]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	430a      	orrs	r2, r1
 8009d40:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009d42:	697b      	ldr	r3, [r7, #20]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	4aa6      	ldr	r2, [pc, #664]	; (8009fe0 <UART_SetConfig+0x334>)
 8009d48:	4293      	cmp	r3, r2
 8009d4a:	d177      	bne.n	8009e3c <UART_SetConfig+0x190>
 8009d4c:	4ba5      	ldr	r3, [pc, #660]	; (8009fe4 <UART_SetConfig+0x338>)
 8009d4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d50:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009d54:	2b28      	cmp	r3, #40	; 0x28
 8009d56:	d86d      	bhi.n	8009e34 <UART_SetConfig+0x188>
 8009d58:	a201      	add	r2, pc, #4	; (adr r2, 8009d60 <UART_SetConfig+0xb4>)
 8009d5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d5e:	bf00      	nop
 8009d60:	08009e05 	.word	0x08009e05
 8009d64:	08009e35 	.word	0x08009e35
 8009d68:	08009e35 	.word	0x08009e35
 8009d6c:	08009e35 	.word	0x08009e35
 8009d70:	08009e35 	.word	0x08009e35
 8009d74:	08009e35 	.word	0x08009e35
 8009d78:	08009e35 	.word	0x08009e35
 8009d7c:	08009e35 	.word	0x08009e35
 8009d80:	08009e0d 	.word	0x08009e0d
 8009d84:	08009e35 	.word	0x08009e35
 8009d88:	08009e35 	.word	0x08009e35
 8009d8c:	08009e35 	.word	0x08009e35
 8009d90:	08009e35 	.word	0x08009e35
 8009d94:	08009e35 	.word	0x08009e35
 8009d98:	08009e35 	.word	0x08009e35
 8009d9c:	08009e35 	.word	0x08009e35
 8009da0:	08009e15 	.word	0x08009e15
 8009da4:	08009e35 	.word	0x08009e35
 8009da8:	08009e35 	.word	0x08009e35
 8009dac:	08009e35 	.word	0x08009e35
 8009db0:	08009e35 	.word	0x08009e35
 8009db4:	08009e35 	.word	0x08009e35
 8009db8:	08009e35 	.word	0x08009e35
 8009dbc:	08009e35 	.word	0x08009e35
 8009dc0:	08009e1d 	.word	0x08009e1d
 8009dc4:	08009e35 	.word	0x08009e35
 8009dc8:	08009e35 	.word	0x08009e35
 8009dcc:	08009e35 	.word	0x08009e35
 8009dd0:	08009e35 	.word	0x08009e35
 8009dd4:	08009e35 	.word	0x08009e35
 8009dd8:	08009e35 	.word	0x08009e35
 8009ddc:	08009e35 	.word	0x08009e35
 8009de0:	08009e25 	.word	0x08009e25
 8009de4:	08009e35 	.word	0x08009e35
 8009de8:	08009e35 	.word	0x08009e35
 8009dec:	08009e35 	.word	0x08009e35
 8009df0:	08009e35 	.word	0x08009e35
 8009df4:	08009e35 	.word	0x08009e35
 8009df8:	08009e35 	.word	0x08009e35
 8009dfc:	08009e35 	.word	0x08009e35
 8009e00:	08009e2d 	.word	0x08009e2d
 8009e04:	2301      	movs	r3, #1
 8009e06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e0a:	e326      	b.n	800a45a <UART_SetConfig+0x7ae>
 8009e0c:	2304      	movs	r3, #4
 8009e0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e12:	e322      	b.n	800a45a <UART_SetConfig+0x7ae>
 8009e14:	2308      	movs	r3, #8
 8009e16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e1a:	e31e      	b.n	800a45a <UART_SetConfig+0x7ae>
 8009e1c:	2310      	movs	r3, #16
 8009e1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e22:	e31a      	b.n	800a45a <UART_SetConfig+0x7ae>
 8009e24:	2320      	movs	r3, #32
 8009e26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e2a:	e316      	b.n	800a45a <UART_SetConfig+0x7ae>
 8009e2c:	2340      	movs	r3, #64	; 0x40
 8009e2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e32:	e312      	b.n	800a45a <UART_SetConfig+0x7ae>
 8009e34:	2380      	movs	r3, #128	; 0x80
 8009e36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e3a:	e30e      	b.n	800a45a <UART_SetConfig+0x7ae>
 8009e3c:	697b      	ldr	r3, [r7, #20]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	4a69      	ldr	r2, [pc, #420]	; (8009fe8 <UART_SetConfig+0x33c>)
 8009e42:	4293      	cmp	r3, r2
 8009e44:	d130      	bne.n	8009ea8 <UART_SetConfig+0x1fc>
 8009e46:	4b67      	ldr	r3, [pc, #412]	; (8009fe4 <UART_SetConfig+0x338>)
 8009e48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e4a:	f003 0307 	and.w	r3, r3, #7
 8009e4e:	2b05      	cmp	r3, #5
 8009e50:	d826      	bhi.n	8009ea0 <UART_SetConfig+0x1f4>
 8009e52:	a201      	add	r2, pc, #4	; (adr r2, 8009e58 <UART_SetConfig+0x1ac>)
 8009e54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e58:	08009e71 	.word	0x08009e71
 8009e5c:	08009e79 	.word	0x08009e79
 8009e60:	08009e81 	.word	0x08009e81
 8009e64:	08009e89 	.word	0x08009e89
 8009e68:	08009e91 	.word	0x08009e91
 8009e6c:	08009e99 	.word	0x08009e99
 8009e70:	2300      	movs	r3, #0
 8009e72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e76:	e2f0      	b.n	800a45a <UART_SetConfig+0x7ae>
 8009e78:	2304      	movs	r3, #4
 8009e7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e7e:	e2ec      	b.n	800a45a <UART_SetConfig+0x7ae>
 8009e80:	2308      	movs	r3, #8
 8009e82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e86:	e2e8      	b.n	800a45a <UART_SetConfig+0x7ae>
 8009e88:	2310      	movs	r3, #16
 8009e8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e8e:	e2e4      	b.n	800a45a <UART_SetConfig+0x7ae>
 8009e90:	2320      	movs	r3, #32
 8009e92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e96:	e2e0      	b.n	800a45a <UART_SetConfig+0x7ae>
 8009e98:	2340      	movs	r3, #64	; 0x40
 8009e9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e9e:	e2dc      	b.n	800a45a <UART_SetConfig+0x7ae>
 8009ea0:	2380      	movs	r3, #128	; 0x80
 8009ea2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ea6:	e2d8      	b.n	800a45a <UART_SetConfig+0x7ae>
 8009ea8:	697b      	ldr	r3, [r7, #20]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	4a4f      	ldr	r2, [pc, #316]	; (8009fec <UART_SetConfig+0x340>)
 8009eae:	4293      	cmp	r3, r2
 8009eb0:	d130      	bne.n	8009f14 <UART_SetConfig+0x268>
 8009eb2:	4b4c      	ldr	r3, [pc, #304]	; (8009fe4 <UART_SetConfig+0x338>)
 8009eb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009eb6:	f003 0307 	and.w	r3, r3, #7
 8009eba:	2b05      	cmp	r3, #5
 8009ebc:	d826      	bhi.n	8009f0c <UART_SetConfig+0x260>
 8009ebe:	a201      	add	r2, pc, #4	; (adr r2, 8009ec4 <UART_SetConfig+0x218>)
 8009ec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ec4:	08009edd 	.word	0x08009edd
 8009ec8:	08009ee5 	.word	0x08009ee5
 8009ecc:	08009eed 	.word	0x08009eed
 8009ed0:	08009ef5 	.word	0x08009ef5
 8009ed4:	08009efd 	.word	0x08009efd
 8009ed8:	08009f05 	.word	0x08009f05
 8009edc:	2300      	movs	r3, #0
 8009ede:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ee2:	e2ba      	b.n	800a45a <UART_SetConfig+0x7ae>
 8009ee4:	2304      	movs	r3, #4
 8009ee6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009eea:	e2b6      	b.n	800a45a <UART_SetConfig+0x7ae>
 8009eec:	2308      	movs	r3, #8
 8009eee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ef2:	e2b2      	b.n	800a45a <UART_SetConfig+0x7ae>
 8009ef4:	2310      	movs	r3, #16
 8009ef6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009efa:	e2ae      	b.n	800a45a <UART_SetConfig+0x7ae>
 8009efc:	2320      	movs	r3, #32
 8009efe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f02:	e2aa      	b.n	800a45a <UART_SetConfig+0x7ae>
 8009f04:	2340      	movs	r3, #64	; 0x40
 8009f06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f0a:	e2a6      	b.n	800a45a <UART_SetConfig+0x7ae>
 8009f0c:	2380      	movs	r3, #128	; 0x80
 8009f0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f12:	e2a2      	b.n	800a45a <UART_SetConfig+0x7ae>
 8009f14:	697b      	ldr	r3, [r7, #20]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	4a35      	ldr	r2, [pc, #212]	; (8009ff0 <UART_SetConfig+0x344>)
 8009f1a:	4293      	cmp	r3, r2
 8009f1c:	d130      	bne.n	8009f80 <UART_SetConfig+0x2d4>
 8009f1e:	4b31      	ldr	r3, [pc, #196]	; (8009fe4 <UART_SetConfig+0x338>)
 8009f20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f22:	f003 0307 	and.w	r3, r3, #7
 8009f26:	2b05      	cmp	r3, #5
 8009f28:	d826      	bhi.n	8009f78 <UART_SetConfig+0x2cc>
 8009f2a:	a201      	add	r2, pc, #4	; (adr r2, 8009f30 <UART_SetConfig+0x284>)
 8009f2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f30:	08009f49 	.word	0x08009f49
 8009f34:	08009f51 	.word	0x08009f51
 8009f38:	08009f59 	.word	0x08009f59
 8009f3c:	08009f61 	.word	0x08009f61
 8009f40:	08009f69 	.word	0x08009f69
 8009f44:	08009f71 	.word	0x08009f71
 8009f48:	2300      	movs	r3, #0
 8009f4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f4e:	e284      	b.n	800a45a <UART_SetConfig+0x7ae>
 8009f50:	2304      	movs	r3, #4
 8009f52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f56:	e280      	b.n	800a45a <UART_SetConfig+0x7ae>
 8009f58:	2308      	movs	r3, #8
 8009f5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f5e:	e27c      	b.n	800a45a <UART_SetConfig+0x7ae>
 8009f60:	2310      	movs	r3, #16
 8009f62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f66:	e278      	b.n	800a45a <UART_SetConfig+0x7ae>
 8009f68:	2320      	movs	r3, #32
 8009f6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f6e:	e274      	b.n	800a45a <UART_SetConfig+0x7ae>
 8009f70:	2340      	movs	r3, #64	; 0x40
 8009f72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f76:	e270      	b.n	800a45a <UART_SetConfig+0x7ae>
 8009f78:	2380      	movs	r3, #128	; 0x80
 8009f7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f7e:	e26c      	b.n	800a45a <UART_SetConfig+0x7ae>
 8009f80:	697b      	ldr	r3, [r7, #20]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	4a1b      	ldr	r2, [pc, #108]	; (8009ff4 <UART_SetConfig+0x348>)
 8009f86:	4293      	cmp	r3, r2
 8009f88:	d142      	bne.n	800a010 <UART_SetConfig+0x364>
 8009f8a:	4b16      	ldr	r3, [pc, #88]	; (8009fe4 <UART_SetConfig+0x338>)
 8009f8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f8e:	f003 0307 	and.w	r3, r3, #7
 8009f92:	2b05      	cmp	r3, #5
 8009f94:	d838      	bhi.n	800a008 <UART_SetConfig+0x35c>
 8009f96:	a201      	add	r2, pc, #4	; (adr r2, 8009f9c <UART_SetConfig+0x2f0>)
 8009f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f9c:	08009fb5 	.word	0x08009fb5
 8009fa0:	08009fbd 	.word	0x08009fbd
 8009fa4:	08009fc5 	.word	0x08009fc5
 8009fa8:	08009fcd 	.word	0x08009fcd
 8009fac:	08009ff9 	.word	0x08009ff9
 8009fb0:	0800a001 	.word	0x0800a001
 8009fb4:	2300      	movs	r3, #0
 8009fb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009fba:	e24e      	b.n	800a45a <UART_SetConfig+0x7ae>
 8009fbc:	2304      	movs	r3, #4
 8009fbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009fc2:	e24a      	b.n	800a45a <UART_SetConfig+0x7ae>
 8009fc4:	2308      	movs	r3, #8
 8009fc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009fca:	e246      	b.n	800a45a <UART_SetConfig+0x7ae>
 8009fcc:	2310      	movs	r3, #16
 8009fce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009fd2:	e242      	b.n	800a45a <UART_SetConfig+0x7ae>
 8009fd4:	cfff69f3 	.word	0xcfff69f3
 8009fd8:	58000c00 	.word	0x58000c00
 8009fdc:	11fff4ff 	.word	0x11fff4ff
 8009fe0:	40011000 	.word	0x40011000
 8009fe4:	58024400 	.word	0x58024400
 8009fe8:	40004400 	.word	0x40004400
 8009fec:	40004800 	.word	0x40004800
 8009ff0:	40004c00 	.word	0x40004c00
 8009ff4:	40005000 	.word	0x40005000
 8009ff8:	2320      	movs	r3, #32
 8009ffa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ffe:	e22c      	b.n	800a45a <UART_SetConfig+0x7ae>
 800a000:	2340      	movs	r3, #64	; 0x40
 800a002:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a006:	e228      	b.n	800a45a <UART_SetConfig+0x7ae>
 800a008:	2380      	movs	r3, #128	; 0x80
 800a00a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a00e:	e224      	b.n	800a45a <UART_SetConfig+0x7ae>
 800a010:	697b      	ldr	r3, [r7, #20]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	4ab1      	ldr	r2, [pc, #708]	; (800a2dc <UART_SetConfig+0x630>)
 800a016:	4293      	cmp	r3, r2
 800a018:	d176      	bne.n	800a108 <UART_SetConfig+0x45c>
 800a01a:	4bb1      	ldr	r3, [pc, #708]	; (800a2e0 <UART_SetConfig+0x634>)
 800a01c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a01e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a022:	2b28      	cmp	r3, #40	; 0x28
 800a024:	d86c      	bhi.n	800a100 <UART_SetConfig+0x454>
 800a026:	a201      	add	r2, pc, #4	; (adr r2, 800a02c <UART_SetConfig+0x380>)
 800a028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a02c:	0800a0d1 	.word	0x0800a0d1
 800a030:	0800a101 	.word	0x0800a101
 800a034:	0800a101 	.word	0x0800a101
 800a038:	0800a101 	.word	0x0800a101
 800a03c:	0800a101 	.word	0x0800a101
 800a040:	0800a101 	.word	0x0800a101
 800a044:	0800a101 	.word	0x0800a101
 800a048:	0800a101 	.word	0x0800a101
 800a04c:	0800a0d9 	.word	0x0800a0d9
 800a050:	0800a101 	.word	0x0800a101
 800a054:	0800a101 	.word	0x0800a101
 800a058:	0800a101 	.word	0x0800a101
 800a05c:	0800a101 	.word	0x0800a101
 800a060:	0800a101 	.word	0x0800a101
 800a064:	0800a101 	.word	0x0800a101
 800a068:	0800a101 	.word	0x0800a101
 800a06c:	0800a0e1 	.word	0x0800a0e1
 800a070:	0800a101 	.word	0x0800a101
 800a074:	0800a101 	.word	0x0800a101
 800a078:	0800a101 	.word	0x0800a101
 800a07c:	0800a101 	.word	0x0800a101
 800a080:	0800a101 	.word	0x0800a101
 800a084:	0800a101 	.word	0x0800a101
 800a088:	0800a101 	.word	0x0800a101
 800a08c:	0800a0e9 	.word	0x0800a0e9
 800a090:	0800a101 	.word	0x0800a101
 800a094:	0800a101 	.word	0x0800a101
 800a098:	0800a101 	.word	0x0800a101
 800a09c:	0800a101 	.word	0x0800a101
 800a0a0:	0800a101 	.word	0x0800a101
 800a0a4:	0800a101 	.word	0x0800a101
 800a0a8:	0800a101 	.word	0x0800a101
 800a0ac:	0800a0f1 	.word	0x0800a0f1
 800a0b0:	0800a101 	.word	0x0800a101
 800a0b4:	0800a101 	.word	0x0800a101
 800a0b8:	0800a101 	.word	0x0800a101
 800a0bc:	0800a101 	.word	0x0800a101
 800a0c0:	0800a101 	.word	0x0800a101
 800a0c4:	0800a101 	.word	0x0800a101
 800a0c8:	0800a101 	.word	0x0800a101
 800a0cc:	0800a0f9 	.word	0x0800a0f9
 800a0d0:	2301      	movs	r3, #1
 800a0d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a0d6:	e1c0      	b.n	800a45a <UART_SetConfig+0x7ae>
 800a0d8:	2304      	movs	r3, #4
 800a0da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a0de:	e1bc      	b.n	800a45a <UART_SetConfig+0x7ae>
 800a0e0:	2308      	movs	r3, #8
 800a0e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a0e6:	e1b8      	b.n	800a45a <UART_SetConfig+0x7ae>
 800a0e8:	2310      	movs	r3, #16
 800a0ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a0ee:	e1b4      	b.n	800a45a <UART_SetConfig+0x7ae>
 800a0f0:	2320      	movs	r3, #32
 800a0f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a0f6:	e1b0      	b.n	800a45a <UART_SetConfig+0x7ae>
 800a0f8:	2340      	movs	r3, #64	; 0x40
 800a0fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a0fe:	e1ac      	b.n	800a45a <UART_SetConfig+0x7ae>
 800a100:	2380      	movs	r3, #128	; 0x80
 800a102:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a106:	e1a8      	b.n	800a45a <UART_SetConfig+0x7ae>
 800a108:	697b      	ldr	r3, [r7, #20]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	4a75      	ldr	r2, [pc, #468]	; (800a2e4 <UART_SetConfig+0x638>)
 800a10e:	4293      	cmp	r3, r2
 800a110:	d130      	bne.n	800a174 <UART_SetConfig+0x4c8>
 800a112:	4b73      	ldr	r3, [pc, #460]	; (800a2e0 <UART_SetConfig+0x634>)
 800a114:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a116:	f003 0307 	and.w	r3, r3, #7
 800a11a:	2b05      	cmp	r3, #5
 800a11c:	d826      	bhi.n	800a16c <UART_SetConfig+0x4c0>
 800a11e:	a201      	add	r2, pc, #4	; (adr r2, 800a124 <UART_SetConfig+0x478>)
 800a120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a124:	0800a13d 	.word	0x0800a13d
 800a128:	0800a145 	.word	0x0800a145
 800a12c:	0800a14d 	.word	0x0800a14d
 800a130:	0800a155 	.word	0x0800a155
 800a134:	0800a15d 	.word	0x0800a15d
 800a138:	0800a165 	.word	0x0800a165
 800a13c:	2300      	movs	r3, #0
 800a13e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a142:	e18a      	b.n	800a45a <UART_SetConfig+0x7ae>
 800a144:	2304      	movs	r3, #4
 800a146:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a14a:	e186      	b.n	800a45a <UART_SetConfig+0x7ae>
 800a14c:	2308      	movs	r3, #8
 800a14e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a152:	e182      	b.n	800a45a <UART_SetConfig+0x7ae>
 800a154:	2310      	movs	r3, #16
 800a156:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a15a:	e17e      	b.n	800a45a <UART_SetConfig+0x7ae>
 800a15c:	2320      	movs	r3, #32
 800a15e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a162:	e17a      	b.n	800a45a <UART_SetConfig+0x7ae>
 800a164:	2340      	movs	r3, #64	; 0x40
 800a166:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a16a:	e176      	b.n	800a45a <UART_SetConfig+0x7ae>
 800a16c:	2380      	movs	r3, #128	; 0x80
 800a16e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a172:	e172      	b.n	800a45a <UART_SetConfig+0x7ae>
 800a174:	697b      	ldr	r3, [r7, #20]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	4a5b      	ldr	r2, [pc, #364]	; (800a2e8 <UART_SetConfig+0x63c>)
 800a17a:	4293      	cmp	r3, r2
 800a17c:	d130      	bne.n	800a1e0 <UART_SetConfig+0x534>
 800a17e:	4b58      	ldr	r3, [pc, #352]	; (800a2e0 <UART_SetConfig+0x634>)
 800a180:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a182:	f003 0307 	and.w	r3, r3, #7
 800a186:	2b05      	cmp	r3, #5
 800a188:	d826      	bhi.n	800a1d8 <UART_SetConfig+0x52c>
 800a18a:	a201      	add	r2, pc, #4	; (adr r2, 800a190 <UART_SetConfig+0x4e4>)
 800a18c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a190:	0800a1a9 	.word	0x0800a1a9
 800a194:	0800a1b1 	.word	0x0800a1b1
 800a198:	0800a1b9 	.word	0x0800a1b9
 800a19c:	0800a1c1 	.word	0x0800a1c1
 800a1a0:	0800a1c9 	.word	0x0800a1c9
 800a1a4:	0800a1d1 	.word	0x0800a1d1
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a1ae:	e154      	b.n	800a45a <UART_SetConfig+0x7ae>
 800a1b0:	2304      	movs	r3, #4
 800a1b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a1b6:	e150      	b.n	800a45a <UART_SetConfig+0x7ae>
 800a1b8:	2308      	movs	r3, #8
 800a1ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a1be:	e14c      	b.n	800a45a <UART_SetConfig+0x7ae>
 800a1c0:	2310      	movs	r3, #16
 800a1c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a1c6:	e148      	b.n	800a45a <UART_SetConfig+0x7ae>
 800a1c8:	2320      	movs	r3, #32
 800a1ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a1ce:	e144      	b.n	800a45a <UART_SetConfig+0x7ae>
 800a1d0:	2340      	movs	r3, #64	; 0x40
 800a1d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a1d6:	e140      	b.n	800a45a <UART_SetConfig+0x7ae>
 800a1d8:	2380      	movs	r3, #128	; 0x80
 800a1da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a1de:	e13c      	b.n	800a45a <UART_SetConfig+0x7ae>
 800a1e0:	697b      	ldr	r3, [r7, #20]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	4a41      	ldr	r2, [pc, #260]	; (800a2ec <UART_SetConfig+0x640>)
 800a1e6:	4293      	cmp	r3, r2
 800a1e8:	f040 8082 	bne.w	800a2f0 <UART_SetConfig+0x644>
 800a1ec:	4b3c      	ldr	r3, [pc, #240]	; (800a2e0 <UART_SetConfig+0x634>)
 800a1ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a1f0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a1f4:	2b28      	cmp	r3, #40	; 0x28
 800a1f6:	d86d      	bhi.n	800a2d4 <UART_SetConfig+0x628>
 800a1f8:	a201      	add	r2, pc, #4	; (adr r2, 800a200 <UART_SetConfig+0x554>)
 800a1fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1fe:	bf00      	nop
 800a200:	0800a2a5 	.word	0x0800a2a5
 800a204:	0800a2d5 	.word	0x0800a2d5
 800a208:	0800a2d5 	.word	0x0800a2d5
 800a20c:	0800a2d5 	.word	0x0800a2d5
 800a210:	0800a2d5 	.word	0x0800a2d5
 800a214:	0800a2d5 	.word	0x0800a2d5
 800a218:	0800a2d5 	.word	0x0800a2d5
 800a21c:	0800a2d5 	.word	0x0800a2d5
 800a220:	0800a2ad 	.word	0x0800a2ad
 800a224:	0800a2d5 	.word	0x0800a2d5
 800a228:	0800a2d5 	.word	0x0800a2d5
 800a22c:	0800a2d5 	.word	0x0800a2d5
 800a230:	0800a2d5 	.word	0x0800a2d5
 800a234:	0800a2d5 	.word	0x0800a2d5
 800a238:	0800a2d5 	.word	0x0800a2d5
 800a23c:	0800a2d5 	.word	0x0800a2d5
 800a240:	0800a2b5 	.word	0x0800a2b5
 800a244:	0800a2d5 	.word	0x0800a2d5
 800a248:	0800a2d5 	.word	0x0800a2d5
 800a24c:	0800a2d5 	.word	0x0800a2d5
 800a250:	0800a2d5 	.word	0x0800a2d5
 800a254:	0800a2d5 	.word	0x0800a2d5
 800a258:	0800a2d5 	.word	0x0800a2d5
 800a25c:	0800a2d5 	.word	0x0800a2d5
 800a260:	0800a2bd 	.word	0x0800a2bd
 800a264:	0800a2d5 	.word	0x0800a2d5
 800a268:	0800a2d5 	.word	0x0800a2d5
 800a26c:	0800a2d5 	.word	0x0800a2d5
 800a270:	0800a2d5 	.word	0x0800a2d5
 800a274:	0800a2d5 	.word	0x0800a2d5
 800a278:	0800a2d5 	.word	0x0800a2d5
 800a27c:	0800a2d5 	.word	0x0800a2d5
 800a280:	0800a2c5 	.word	0x0800a2c5
 800a284:	0800a2d5 	.word	0x0800a2d5
 800a288:	0800a2d5 	.word	0x0800a2d5
 800a28c:	0800a2d5 	.word	0x0800a2d5
 800a290:	0800a2d5 	.word	0x0800a2d5
 800a294:	0800a2d5 	.word	0x0800a2d5
 800a298:	0800a2d5 	.word	0x0800a2d5
 800a29c:	0800a2d5 	.word	0x0800a2d5
 800a2a0:	0800a2cd 	.word	0x0800a2cd
 800a2a4:	2301      	movs	r3, #1
 800a2a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a2aa:	e0d6      	b.n	800a45a <UART_SetConfig+0x7ae>
 800a2ac:	2304      	movs	r3, #4
 800a2ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a2b2:	e0d2      	b.n	800a45a <UART_SetConfig+0x7ae>
 800a2b4:	2308      	movs	r3, #8
 800a2b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a2ba:	e0ce      	b.n	800a45a <UART_SetConfig+0x7ae>
 800a2bc:	2310      	movs	r3, #16
 800a2be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a2c2:	e0ca      	b.n	800a45a <UART_SetConfig+0x7ae>
 800a2c4:	2320      	movs	r3, #32
 800a2c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a2ca:	e0c6      	b.n	800a45a <UART_SetConfig+0x7ae>
 800a2cc:	2340      	movs	r3, #64	; 0x40
 800a2ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a2d2:	e0c2      	b.n	800a45a <UART_SetConfig+0x7ae>
 800a2d4:	2380      	movs	r3, #128	; 0x80
 800a2d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a2da:	e0be      	b.n	800a45a <UART_SetConfig+0x7ae>
 800a2dc:	40011400 	.word	0x40011400
 800a2e0:	58024400 	.word	0x58024400
 800a2e4:	40007800 	.word	0x40007800
 800a2e8:	40007c00 	.word	0x40007c00
 800a2ec:	40011800 	.word	0x40011800
 800a2f0:	697b      	ldr	r3, [r7, #20]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	4aad      	ldr	r2, [pc, #692]	; (800a5ac <UART_SetConfig+0x900>)
 800a2f6:	4293      	cmp	r3, r2
 800a2f8:	d176      	bne.n	800a3e8 <UART_SetConfig+0x73c>
 800a2fa:	4bad      	ldr	r3, [pc, #692]	; (800a5b0 <UART_SetConfig+0x904>)
 800a2fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a302:	2b28      	cmp	r3, #40	; 0x28
 800a304:	d86c      	bhi.n	800a3e0 <UART_SetConfig+0x734>
 800a306:	a201      	add	r2, pc, #4	; (adr r2, 800a30c <UART_SetConfig+0x660>)
 800a308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a30c:	0800a3b1 	.word	0x0800a3b1
 800a310:	0800a3e1 	.word	0x0800a3e1
 800a314:	0800a3e1 	.word	0x0800a3e1
 800a318:	0800a3e1 	.word	0x0800a3e1
 800a31c:	0800a3e1 	.word	0x0800a3e1
 800a320:	0800a3e1 	.word	0x0800a3e1
 800a324:	0800a3e1 	.word	0x0800a3e1
 800a328:	0800a3e1 	.word	0x0800a3e1
 800a32c:	0800a3b9 	.word	0x0800a3b9
 800a330:	0800a3e1 	.word	0x0800a3e1
 800a334:	0800a3e1 	.word	0x0800a3e1
 800a338:	0800a3e1 	.word	0x0800a3e1
 800a33c:	0800a3e1 	.word	0x0800a3e1
 800a340:	0800a3e1 	.word	0x0800a3e1
 800a344:	0800a3e1 	.word	0x0800a3e1
 800a348:	0800a3e1 	.word	0x0800a3e1
 800a34c:	0800a3c1 	.word	0x0800a3c1
 800a350:	0800a3e1 	.word	0x0800a3e1
 800a354:	0800a3e1 	.word	0x0800a3e1
 800a358:	0800a3e1 	.word	0x0800a3e1
 800a35c:	0800a3e1 	.word	0x0800a3e1
 800a360:	0800a3e1 	.word	0x0800a3e1
 800a364:	0800a3e1 	.word	0x0800a3e1
 800a368:	0800a3e1 	.word	0x0800a3e1
 800a36c:	0800a3c9 	.word	0x0800a3c9
 800a370:	0800a3e1 	.word	0x0800a3e1
 800a374:	0800a3e1 	.word	0x0800a3e1
 800a378:	0800a3e1 	.word	0x0800a3e1
 800a37c:	0800a3e1 	.word	0x0800a3e1
 800a380:	0800a3e1 	.word	0x0800a3e1
 800a384:	0800a3e1 	.word	0x0800a3e1
 800a388:	0800a3e1 	.word	0x0800a3e1
 800a38c:	0800a3d1 	.word	0x0800a3d1
 800a390:	0800a3e1 	.word	0x0800a3e1
 800a394:	0800a3e1 	.word	0x0800a3e1
 800a398:	0800a3e1 	.word	0x0800a3e1
 800a39c:	0800a3e1 	.word	0x0800a3e1
 800a3a0:	0800a3e1 	.word	0x0800a3e1
 800a3a4:	0800a3e1 	.word	0x0800a3e1
 800a3a8:	0800a3e1 	.word	0x0800a3e1
 800a3ac:	0800a3d9 	.word	0x0800a3d9
 800a3b0:	2301      	movs	r3, #1
 800a3b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a3b6:	e050      	b.n	800a45a <UART_SetConfig+0x7ae>
 800a3b8:	2304      	movs	r3, #4
 800a3ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a3be:	e04c      	b.n	800a45a <UART_SetConfig+0x7ae>
 800a3c0:	2308      	movs	r3, #8
 800a3c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a3c6:	e048      	b.n	800a45a <UART_SetConfig+0x7ae>
 800a3c8:	2310      	movs	r3, #16
 800a3ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a3ce:	e044      	b.n	800a45a <UART_SetConfig+0x7ae>
 800a3d0:	2320      	movs	r3, #32
 800a3d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a3d6:	e040      	b.n	800a45a <UART_SetConfig+0x7ae>
 800a3d8:	2340      	movs	r3, #64	; 0x40
 800a3da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a3de:	e03c      	b.n	800a45a <UART_SetConfig+0x7ae>
 800a3e0:	2380      	movs	r3, #128	; 0x80
 800a3e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a3e6:	e038      	b.n	800a45a <UART_SetConfig+0x7ae>
 800a3e8:	697b      	ldr	r3, [r7, #20]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	4a71      	ldr	r2, [pc, #452]	; (800a5b4 <UART_SetConfig+0x908>)
 800a3ee:	4293      	cmp	r3, r2
 800a3f0:	d130      	bne.n	800a454 <UART_SetConfig+0x7a8>
 800a3f2:	4b6f      	ldr	r3, [pc, #444]	; (800a5b0 <UART_SetConfig+0x904>)
 800a3f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a3f6:	f003 0307 	and.w	r3, r3, #7
 800a3fa:	2b05      	cmp	r3, #5
 800a3fc:	d826      	bhi.n	800a44c <UART_SetConfig+0x7a0>
 800a3fe:	a201      	add	r2, pc, #4	; (adr r2, 800a404 <UART_SetConfig+0x758>)
 800a400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a404:	0800a41d 	.word	0x0800a41d
 800a408:	0800a425 	.word	0x0800a425
 800a40c:	0800a42d 	.word	0x0800a42d
 800a410:	0800a435 	.word	0x0800a435
 800a414:	0800a43d 	.word	0x0800a43d
 800a418:	0800a445 	.word	0x0800a445
 800a41c:	2302      	movs	r3, #2
 800a41e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a422:	e01a      	b.n	800a45a <UART_SetConfig+0x7ae>
 800a424:	2304      	movs	r3, #4
 800a426:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a42a:	e016      	b.n	800a45a <UART_SetConfig+0x7ae>
 800a42c:	2308      	movs	r3, #8
 800a42e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a432:	e012      	b.n	800a45a <UART_SetConfig+0x7ae>
 800a434:	2310      	movs	r3, #16
 800a436:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a43a:	e00e      	b.n	800a45a <UART_SetConfig+0x7ae>
 800a43c:	2320      	movs	r3, #32
 800a43e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a442:	e00a      	b.n	800a45a <UART_SetConfig+0x7ae>
 800a444:	2340      	movs	r3, #64	; 0x40
 800a446:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a44a:	e006      	b.n	800a45a <UART_SetConfig+0x7ae>
 800a44c:	2380      	movs	r3, #128	; 0x80
 800a44e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a452:	e002      	b.n	800a45a <UART_SetConfig+0x7ae>
 800a454:	2380      	movs	r3, #128	; 0x80
 800a456:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a45a:	697b      	ldr	r3, [r7, #20]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	4a55      	ldr	r2, [pc, #340]	; (800a5b4 <UART_SetConfig+0x908>)
 800a460:	4293      	cmp	r3, r2
 800a462:	f040 80f8 	bne.w	800a656 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a466:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a46a:	2b20      	cmp	r3, #32
 800a46c:	dc46      	bgt.n	800a4fc <UART_SetConfig+0x850>
 800a46e:	2b02      	cmp	r3, #2
 800a470:	db75      	blt.n	800a55e <UART_SetConfig+0x8b2>
 800a472:	3b02      	subs	r3, #2
 800a474:	2b1e      	cmp	r3, #30
 800a476:	d872      	bhi.n	800a55e <UART_SetConfig+0x8b2>
 800a478:	a201      	add	r2, pc, #4	; (adr r2, 800a480 <UART_SetConfig+0x7d4>)
 800a47a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a47e:	bf00      	nop
 800a480:	0800a503 	.word	0x0800a503
 800a484:	0800a55f 	.word	0x0800a55f
 800a488:	0800a50b 	.word	0x0800a50b
 800a48c:	0800a55f 	.word	0x0800a55f
 800a490:	0800a55f 	.word	0x0800a55f
 800a494:	0800a55f 	.word	0x0800a55f
 800a498:	0800a51b 	.word	0x0800a51b
 800a49c:	0800a55f 	.word	0x0800a55f
 800a4a0:	0800a55f 	.word	0x0800a55f
 800a4a4:	0800a55f 	.word	0x0800a55f
 800a4a8:	0800a55f 	.word	0x0800a55f
 800a4ac:	0800a55f 	.word	0x0800a55f
 800a4b0:	0800a55f 	.word	0x0800a55f
 800a4b4:	0800a55f 	.word	0x0800a55f
 800a4b8:	0800a52b 	.word	0x0800a52b
 800a4bc:	0800a55f 	.word	0x0800a55f
 800a4c0:	0800a55f 	.word	0x0800a55f
 800a4c4:	0800a55f 	.word	0x0800a55f
 800a4c8:	0800a55f 	.word	0x0800a55f
 800a4cc:	0800a55f 	.word	0x0800a55f
 800a4d0:	0800a55f 	.word	0x0800a55f
 800a4d4:	0800a55f 	.word	0x0800a55f
 800a4d8:	0800a55f 	.word	0x0800a55f
 800a4dc:	0800a55f 	.word	0x0800a55f
 800a4e0:	0800a55f 	.word	0x0800a55f
 800a4e4:	0800a55f 	.word	0x0800a55f
 800a4e8:	0800a55f 	.word	0x0800a55f
 800a4ec:	0800a55f 	.word	0x0800a55f
 800a4f0:	0800a55f 	.word	0x0800a55f
 800a4f4:	0800a55f 	.word	0x0800a55f
 800a4f8:	0800a551 	.word	0x0800a551
 800a4fc:	2b40      	cmp	r3, #64	; 0x40
 800a4fe:	d02a      	beq.n	800a556 <UART_SetConfig+0x8aa>
 800a500:	e02d      	b.n	800a55e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a502:	f7fc fdeb 	bl	80070dc <HAL_RCCEx_GetD3PCLK1Freq>
 800a506:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a508:	e02f      	b.n	800a56a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a50a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a50e:	4618      	mov	r0, r3
 800a510:	f7fc fdfa 	bl	8007108 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a516:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a518:	e027      	b.n	800a56a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a51a:	f107 0318 	add.w	r3, r7, #24
 800a51e:	4618      	mov	r0, r3
 800a520:	f7fc ff46 	bl	80073b0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a524:	69fb      	ldr	r3, [r7, #28]
 800a526:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a528:	e01f      	b.n	800a56a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a52a:	4b21      	ldr	r3, [pc, #132]	; (800a5b0 <UART_SetConfig+0x904>)
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	f003 0320 	and.w	r3, r3, #32
 800a532:	2b00      	cmp	r3, #0
 800a534:	d009      	beq.n	800a54a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a536:	4b1e      	ldr	r3, [pc, #120]	; (800a5b0 <UART_SetConfig+0x904>)
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	08db      	lsrs	r3, r3, #3
 800a53c:	f003 0303 	and.w	r3, r3, #3
 800a540:	4a1d      	ldr	r2, [pc, #116]	; (800a5b8 <UART_SetConfig+0x90c>)
 800a542:	fa22 f303 	lsr.w	r3, r2, r3
 800a546:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a548:	e00f      	b.n	800a56a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800a54a:	4b1b      	ldr	r3, [pc, #108]	; (800a5b8 <UART_SetConfig+0x90c>)
 800a54c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a54e:	e00c      	b.n	800a56a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a550:	4b1a      	ldr	r3, [pc, #104]	; (800a5bc <UART_SetConfig+0x910>)
 800a552:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a554:	e009      	b.n	800a56a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a556:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a55a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a55c:	e005      	b.n	800a56a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800a55e:	2300      	movs	r3, #0
 800a560:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a562:	2301      	movs	r3, #1
 800a564:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a568:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a56a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	f000 81ee 	beq.w	800a94e <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a572:	697b      	ldr	r3, [r7, #20]
 800a574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a576:	4a12      	ldr	r2, [pc, #72]	; (800a5c0 <UART_SetConfig+0x914>)
 800a578:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a57c:	461a      	mov	r2, r3
 800a57e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a580:	fbb3 f3f2 	udiv	r3, r3, r2
 800a584:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a586:	697b      	ldr	r3, [r7, #20]
 800a588:	685a      	ldr	r2, [r3, #4]
 800a58a:	4613      	mov	r3, r2
 800a58c:	005b      	lsls	r3, r3, #1
 800a58e:	4413      	add	r3, r2
 800a590:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a592:	429a      	cmp	r2, r3
 800a594:	d305      	bcc.n	800a5a2 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a596:	697b      	ldr	r3, [r7, #20]
 800a598:	685b      	ldr	r3, [r3, #4]
 800a59a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a59c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a59e:	429a      	cmp	r2, r3
 800a5a0:	d910      	bls.n	800a5c4 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800a5a2:	2301      	movs	r3, #1
 800a5a4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a5a8:	e1d1      	b.n	800a94e <UART_SetConfig+0xca2>
 800a5aa:	bf00      	nop
 800a5ac:	40011c00 	.word	0x40011c00
 800a5b0:	58024400 	.word	0x58024400
 800a5b4:	58000c00 	.word	0x58000c00
 800a5b8:	03d09000 	.word	0x03d09000
 800a5bc:	003d0900 	.word	0x003d0900
 800a5c0:	0800b048 	.word	0x0800b048
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a5c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a5c6:	2200      	movs	r2, #0
 800a5c8:	60bb      	str	r3, [r7, #8]
 800a5ca:	60fa      	str	r2, [r7, #12]
 800a5cc:	697b      	ldr	r3, [r7, #20]
 800a5ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5d0:	4ac0      	ldr	r2, [pc, #768]	; (800a8d4 <UART_SetConfig+0xc28>)
 800a5d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a5d6:	b29b      	uxth	r3, r3
 800a5d8:	2200      	movs	r2, #0
 800a5da:	603b      	str	r3, [r7, #0]
 800a5dc:	607a      	str	r2, [r7, #4]
 800a5de:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a5e2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a5e6:	f7f5 fe91 	bl	800030c <__aeabi_uldivmod>
 800a5ea:	4602      	mov	r2, r0
 800a5ec:	460b      	mov	r3, r1
 800a5ee:	4610      	mov	r0, r2
 800a5f0:	4619      	mov	r1, r3
 800a5f2:	f04f 0200 	mov.w	r2, #0
 800a5f6:	f04f 0300 	mov.w	r3, #0
 800a5fa:	020b      	lsls	r3, r1, #8
 800a5fc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a600:	0202      	lsls	r2, r0, #8
 800a602:	6979      	ldr	r1, [r7, #20]
 800a604:	6849      	ldr	r1, [r1, #4]
 800a606:	0849      	lsrs	r1, r1, #1
 800a608:	2000      	movs	r0, #0
 800a60a:	460c      	mov	r4, r1
 800a60c:	4605      	mov	r5, r0
 800a60e:	eb12 0804 	adds.w	r8, r2, r4
 800a612:	eb43 0905 	adc.w	r9, r3, r5
 800a616:	697b      	ldr	r3, [r7, #20]
 800a618:	685b      	ldr	r3, [r3, #4]
 800a61a:	2200      	movs	r2, #0
 800a61c:	469a      	mov	sl, r3
 800a61e:	4693      	mov	fp, r2
 800a620:	4652      	mov	r2, sl
 800a622:	465b      	mov	r3, fp
 800a624:	4640      	mov	r0, r8
 800a626:	4649      	mov	r1, r9
 800a628:	f7f5 fe70 	bl	800030c <__aeabi_uldivmod>
 800a62c:	4602      	mov	r2, r0
 800a62e:	460b      	mov	r3, r1
 800a630:	4613      	mov	r3, r2
 800a632:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a636:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a63a:	d308      	bcc.n	800a64e <UART_SetConfig+0x9a2>
 800a63c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a63e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a642:	d204      	bcs.n	800a64e <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800a644:	697b      	ldr	r3, [r7, #20]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a64a:	60da      	str	r2, [r3, #12]
 800a64c:	e17f      	b.n	800a94e <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800a64e:	2301      	movs	r3, #1
 800a650:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a654:	e17b      	b.n	800a94e <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a656:	697b      	ldr	r3, [r7, #20]
 800a658:	69db      	ldr	r3, [r3, #28]
 800a65a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a65e:	f040 80bd 	bne.w	800a7dc <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800a662:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a666:	2b20      	cmp	r3, #32
 800a668:	dc48      	bgt.n	800a6fc <UART_SetConfig+0xa50>
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	db7b      	blt.n	800a766 <UART_SetConfig+0xaba>
 800a66e:	2b20      	cmp	r3, #32
 800a670:	d879      	bhi.n	800a766 <UART_SetConfig+0xaba>
 800a672:	a201      	add	r2, pc, #4	; (adr r2, 800a678 <UART_SetConfig+0x9cc>)
 800a674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a678:	0800a703 	.word	0x0800a703
 800a67c:	0800a70b 	.word	0x0800a70b
 800a680:	0800a767 	.word	0x0800a767
 800a684:	0800a767 	.word	0x0800a767
 800a688:	0800a713 	.word	0x0800a713
 800a68c:	0800a767 	.word	0x0800a767
 800a690:	0800a767 	.word	0x0800a767
 800a694:	0800a767 	.word	0x0800a767
 800a698:	0800a723 	.word	0x0800a723
 800a69c:	0800a767 	.word	0x0800a767
 800a6a0:	0800a767 	.word	0x0800a767
 800a6a4:	0800a767 	.word	0x0800a767
 800a6a8:	0800a767 	.word	0x0800a767
 800a6ac:	0800a767 	.word	0x0800a767
 800a6b0:	0800a767 	.word	0x0800a767
 800a6b4:	0800a767 	.word	0x0800a767
 800a6b8:	0800a733 	.word	0x0800a733
 800a6bc:	0800a767 	.word	0x0800a767
 800a6c0:	0800a767 	.word	0x0800a767
 800a6c4:	0800a767 	.word	0x0800a767
 800a6c8:	0800a767 	.word	0x0800a767
 800a6cc:	0800a767 	.word	0x0800a767
 800a6d0:	0800a767 	.word	0x0800a767
 800a6d4:	0800a767 	.word	0x0800a767
 800a6d8:	0800a767 	.word	0x0800a767
 800a6dc:	0800a767 	.word	0x0800a767
 800a6e0:	0800a767 	.word	0x0800a767
 800a6e4:	0800a767 	.word	0x0800a767
 800a6e8:	0800a767 	.word	0x0800a767
 800a6ec:	0800a767 	.word	0x0800a767
 800a6f0:	0800a767 	.word	0x0800a767
 800a6f4:	0800a767 	.word	0x0800a767
 800a6f8:	0800a759 	.word	0x0800a759
 800a6fc:	2b40      	cmp	r3, #64	; 0x40
 800a6fe:	d02e      	beq.n	800a75e <UART_SetConfig+0xab2>
 800a700:	e031      	b.n	800a766 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a702:	f7fb fb1f 	bl	8005d44 <HAL_RCC_GetPCLK1Freq>
 800a706:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a708:	e033      	b.n	800a772 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a70a:	f7fb fb31 	bl	8005d70 <HAL_RCC_GetPCLK2Freq>
 800a70e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a710:	e02f      	b.n	800a772 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a712:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a716:	4618      	mov	r0, r3
 800a718:	f7fc fcf6 	bl	8007108 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a71c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a71e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a720:	e027      	b.n	800a772 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a722:	f107 0318 	add.w	r3, r7, #24
 800a726:	4618      	mov	r0, r3
 800a728:	f7fc fe42 	bl	80073b0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a72c:	69fb      	ldr	r3, [r7, #28]
 800a72e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a730:	e01f      	b.n	800a772 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a732:	4b69      	ldr	r3, [pc, #420]	; (800a8d8 <UART_SetConfig+0xc2c>)
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	f003 0320 	and.w	r3, r3, #32
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d009      	beq.n	800a752 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a73e:	4b66      	ldr	r3, [pc, #408]	; (800a8d8 <UART_SetConfig+0xc2c>)
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	08db      	lsrs	r3, r3, #3
 800a744:	f003 0303 	and.w	r3, r3, #3
 800a748:	4a64      	ldr	r2, [pc, #400]	; (800a8dc <UART_SetConfig+0xc30>)
 800a74a:	fa22 f303 	lsr.w	r3, r2, r3
 800a74e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a750:	e00f      	b.n	800a772 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800a752:	4b62      	ldr	r3, [pc, #392]	; (800a8dc <UART_SetConfig+0xc30>)
 800a754:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a756:	e00c      	b.n	800a772 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a758:	4b61      	ldr	r3, [pc, #388]	; (800a8e0 <UART_SetConfig+0xc34>)
 800a75a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a75c:	e009      	b.n	800a772 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a75e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a762:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a764:	e005      	b.n	800a772 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800a766:	2300      	movs	r3, #0
 800a768:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a76a:	2301      	movs	r3, #1
 800a76c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a770:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a772:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a774:	2b00      	cmp	r3, #0
 800a776:	f000 80ea 	beq.w	800a94e <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a77a:	697b      	ldr	r3, [r7, #20]
 800a77c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a77e:	4a55      	ldr	r2, [pc, #340]	; (800a8d4 <UART_SetConfig+0xc28>)
 800a780:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a784:	461a      	mov	r2, r3
 800a786:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a788:	fbb3 f3f2 	udiv	r3, r3, r2
 800a78c:	005a      	lsls	r2, r3, #1
 800a78e:	697b      	ldr	r3, [r7, #20]
 800a790:	685b      	ldr	r3, [r3, #4]
 800a792:	085b      	lsrs	r3, r3, #1
 800a794:	441a      	add	r2, r3
 800a796:	697b      	ldr	r3, [r7, #20]
 800a798:	685b      	ldr	r3, [r3, #4]
 800a79a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a79e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a7a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7a2:	2b0f      	cmp	r3, #15
 800a7a4:	d916      	bls.n	800a7d4 <UART_SetConfig+0xb28>
 800a7a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a7ac:	d212      	bcs.n	800a7d4 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a7ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7b0:	b29b      	uxth	r3, r3
 800a7b2:	f023 030f 	bic.w	r3, r3, #15
 800a7b6:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a7b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7ba:	085b      	lsrs	r3, r3, #1
 800a7bc:	b29b      	uxth	r3, r3
 800a7be:	f003 0307 	and.w	r3, r3, #7
 800a7c2:	b29a      	uxth	r2, r3
 800a7c4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a7c6:	4313      	orrs	r3, r2
 800a7c8:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800a7ca:	697b      	ldr	r3, [r7, #20]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800a7d0:	60da      	str	r2, [r3, #12]
 800a7d2:	e0bc      	b.n	800a94e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800a7d4:	2301      	movs	r3, #1
 800a7d6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a7da:	e0b8      	b.n	800a94e <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a7dc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a7e0:	2b20      	cmp	r3, #32
 800a7e2:	dc4b      	bgt.n	800a87c <UART_SetConfig+0xbd0>
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	f2c0 8087 	blt.w	800a8f8 <UART_SetConfig+0xc4c>
 800a7ea:	2b20      	cmp	r3, #32
 800a7ec:	f200 8084 	bhi.w	800a8f8 <UART_SetConfig+0xc4c>
 800a7f0:	a201      	add	r2, pc, #4	; (adr r2, 800a7f8 <UART_SetConfig+0xb4c>)
 800a7f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7f6:	bf00      	nop
 800a7f8:	0800a883 	.word	0x0800a883
 800a7fc:	0800a88b 	.word	0x0800a88b
 800a800:	0800a8f9 	.word	0x0800a8f9
 800a804:	0800a8f9 	.word	0x0800a8f9
 800a808:	0800a893 	.word	0x0800a893
 800a80c:	0800a8f9 	.word	0x0800a8f9
 800a810:	0800a8f9 	.word	0x0800a8f9
 800a814:	0800a8f9 	.word	0x0800a8f9
 800a818:	0800a8a3 	.word	0x0800a8a3
 800a81c:	0800a8f9 	.word	0x0800a8f9
 800a820:	0800a8f9 	.word	0x0800a8f9
 800a824:	0800a8f9 	.word	0x0800a8f9
 800a828:	0800a8f9 	.word	0x0800a8f9
 800a82c:	0800a8f9 	.word	0x0800a8f9
 800a830:	0800a8f9 	.word	0x0800a8f9
 800a834:	0800a8f9 	.word	0x0800a8f9
 800a838:	0800a8b3 	.word	0x0800a8b3
 800a83c:	0800a8f9 	.word	0x0800a8f9
 800a840:	0800a8f9 	.word	0x0800a8f9
 800a844:	0800a8f9 	.word	0x0800a8f9
 800a848:	0800a8f9 	.word	0x0800a8f9
 800a84c:	0800a8f9 	.word	0x0800a8f9
 800a850:	0800a8f9 	.word	0x0800a8f9
 800a854:	0800a8f9 	.word	0x0800a8f9
 800a858:	0800a8f9 	.word	0x0800a8f9
 800a85c:	0800a8f9 	.word	0x0800a8f9
 800a860:	0800a8f9 	.word	0x0800a8f9
 800a864:	0800a8f9 	.word	0x0800a8f9
 800a868:	0800a8f9 	.word	0x0800a8f9
 800a86c:	0800a8f9 	.word	0x0800a8f9
 800a870:	0800a8f9 	.word	0x0800a8f9
 800a874:	0800a8f9 	.word	0x0800a8f9
 800a878:	0800a8eb 	.word	0x0800a8eb
 800a87c:	2b40      	cmp	r3, #64	; 0x40
 800a87e:	d037      	beq.n	800a8f0 <UART_SetConfig+0xc44>
 800a880:	e03a      	b.n	800a8f8 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a882:	f7fb fa5f 	bl	8005d44 <HAL_RCC_GetPCLK1Freq>
 800a886:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a888:	e03c      	b.n	800a904 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a88a:	f7fb fa71 	bl	8005d70 <HAL_RCC_GetPCLK2Freq>
 800a88e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a890:	e038      	b.n	800a904 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a892:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a896:	4618      	mov	r0, r3
 800a898:	f7fc fc36 	bl	8007108 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a89c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a89e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a8a0:	e030      	b.n	800a904 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a8a2:	f107 0318 	add.w	r3, r7, #24
 800a8a6:	4618      	mov	r0, r3
 800a8a8:	f7fc fd82 	bl	80073b0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a8ac:	69fb      	ldr	r3, [r7, #28]
 800a8ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a8b0:	e028      	b.n	800a904 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a8b2:	4b09      	ldr	r3, [pc, #36]	; (800a8d8 <UART_SetConfig+0xc2c>)
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	f003 0320 	and.w	r3, r3, #32
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d012      	beq.n	800a8e4 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a8be:	4b06      	ldr	r3, [pc, #24]	; (800a8d8 <UART_SetConfig+0xc2c>)
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	08db      	lsrs	r3, r3, #3
 800a8c4:	f003 0303 	and.w	r3, r3, #3
 800a8c8:	4a04      	ldr	r2, [pc, #16]	; (800a8dc <UART_SetConfig+0xc30>)
 800a8ca:	fa22 f303 	lsr.w	r3, r2, r3
 800a8ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a8d0:	e018      	b.n	800a904 <UART_SetConfig+0xc58>
 800a8d2:	bf00      	nop
 800a8d4:	0800b048 	.word	0x0800b048
 800a8d8:	58024400 	.word	0x58024400
 800a8dc:	03d09000 	.word	0x03d09000
 800a8e0:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800a8e4:	4b24      	ldr	r3, [pc, #144]	; (800a978 <UART_SetConfig+0xccc>)
 800a8e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a8e8:	e00c      	b.n	800a904 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a8ea:	4b24      	ldr	r3, [pc, #144]	; (800a97c <UART_SetConfig+0xcd0>)
 800a8ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a8ee:	e009      	b.n	800a904 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a8f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a8f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a8f6:	e005      	b.n	800a904 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800a8f8:	2300      	movs	r3, #0
 800a8fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a8fc:	2301      	movs	r3, #1
 800a8fe:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a902:	bf00      	nop
    }

    if (pclk != 0U)
 800a904:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a906:	2b00      	cmp	r3, #0
 800a908:	d021      	beq.n	800a94e <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a90a:	697b      	ldr	r3, [r7, #20]
 800a90c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a90e:	4a1c      	ldr	r2, [pc, #112]	; (800a980 <UART_SetConfig+0xcd4>)
 800a910:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a914:	461a      	mov	r2, r3
 800a916:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a918:	fbb3 f2f2 	udiv	r2, r3, r2
 800a91c:	697b      	ldr	r3, [r7, #20]
 800a91e:	685b      	ldr	r3, [r3, #4]
 800a920:	085b      	lsrs	r3, r3, #1
 800a922:	441a      	add	r2, r3
 800a924:	697b      	ldr	r3, [r7, #20]
 800a926:	685b      	ldr	r3, [r3, #4]
 800a928:	fbb2 f3f3 	udiv	r3, r2, r3
 800a92c:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a92e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a930:	2b0f      	cmp	r3, #15
 800a932:	d909      	bls.n	800a948 <UART_SetConfig+0xc9c>
 800a934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a936:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a93a:	d205      	bcs.n	800a948 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a93c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a93e:	b29a      	uxth	r2, r3
 800a940:	697b      	ldr	r3, [r7, #20]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	60da      	str	r2, [r3, #12]
 800a946:	e002      	b.n	800a94e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800a948:	2301      	movs	r3, #1
 800a94a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a94e:	697b      	ldr	r3, [r7, #20]
 800a950:	2201      	movs	r2, #1
 800a952:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a956:	697b      	ldr	r3, [r7, #20]
 800a958:	2201      	movs	r2, #1
 800a95a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a95e:	697b      	ldr	r3, [r7, #20]
 800a960:	2200      	movs	r2, #0
 800a962:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800a964:	697b      	ldr	r3, [r7, #20]
 800a966:	2200      	movs	r2, #0
 800a968:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800a96a:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800a96e:	4618      	mov	r0, r3
 800a970:	3748      	adds	r7, #72	; 0x48
 800a972:	46bd      	mov	sp, r7
 800a974:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a978:	03d09000 	.word	0x03d09000
 800a97c:	003d0900 	.word	0x003d0900
 800a980:	0800b048 	.word	0x0800b048

0800a984 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a984:	b480      	push	{r7}
 800a986:	b083      	sub	sp, #12
 800a988:	af00      	add	r7, sp, #0
 800a98a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a990:	f003 0301 	and.w	r3, r3, #1
 800a994:	2b00      	cmp	r3, #0
 800a996:	d00a      	beq.n	800a9ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	685b      	ldr	r3, [r3, #4]
 800a99e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	430a      	orrs	r2, r1
 800a9ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9b2:	f003 0302 	and.w	r3, r3, #2
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d00a      	beq.n	800a9d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	685b      	ldr	r3, [r3, #4]
 800a9c0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	430a      	orrs	r2, r1
 800a9ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9d4:	f003 0304 	and.w	r3, r3, #4
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d00a      	beq.n	800a9f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	685b      	ldr	r3, [r3, #4]
 800a9e2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	430a      	orrs	r2, r1
 800a9f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9f6:	f003 0308 	and.w	r3, r3, #8
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d00a      	beq.n	800aa14 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	685b      	ldr	r3, [r3, #4]
 800aa04:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	430a      	orrs	r2, r1
 800aa12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa18:	f003 0310 	and.w	r3, r3, #16
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d00a      	beq.n	800aa36 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	689b      	ldr	r3, [r3, #8]
 800aa26:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	430a      	orrs	r2, r1
 800aa34:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa3a:	f003 0320 	and.w	r3, r3, #32
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d00a      	beq.n	800aa58 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	689b      	ldr	r3, [r3, #8]
 800aa48:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	430a      	orrs	r2, r1
 800aa56:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d01a      	beq.n	800aa9a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	685b      	ldr	r3, [r3, #4]
 800aa6a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	430a      	orrs	r2, r1
 800aa78:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aa82:	d10a      	bne.n	800aa9a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	685b      	ldr	r3, [r3, #4]
 800aa8a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	430a      	orrs	r2, r1
 800aa98:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d00a      	beq.n	800aabc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	685b      	ldr	r3, [r3, #4]
 800aaac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	430a      	orrs	r2, r1
 800aaba:	605a      	str	r2, [r3, #4]
  }
}
 800aabc:	bf00      	nop
 800aabe:	370c      	adds	r7, #12
 800aac0:	46bd      	mov	sp, r7
 800aac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac6:	4770      	bx	lr

0800aac8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800aac8:	b580      	push	{r7, lr}
 800aaca:	b098      	sub	sp, #96	; 0x60
 800aacc:	af02      	add	r7, sp, #8
 800aace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	2200      	movs	r2, #0
 800aad4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800aad8:	f7f6 ff2c 	bl	8001934 <HAL_GetTick>
 800aadc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	f003 0308 	and.w	r3, r3, #8
 800aae8:	2b08      	cmp	r3, #8
 800aaea:	d12f      	bne.n	800ab4c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800aaec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800aaf0:	9300      	str	r3, [sp, #0]
 800aaf2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aaf4:	2200      	movs	r2, #0
 800aaf6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800aafa:	6878      	ldr	r0, [r7, #4]
 800aafc:	f000 f88e 	bl	800ac1c <UART_WaitOnFlagUntilTimeout>
 800ab00:	4603      	mov	r3, r0
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d022      	beq.n	800ab4c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab0e:	e853 3f00 	ldrex	r3, [r3]
 800ab12:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ab14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ab1a:	653b      	str	r3, [r7, #80]	; 0x50
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	461a      	mov	r2, r3
 800ab22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ab24:	647b      	str	r3, [r7, #68]	; 0x44
 800ab26:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab28:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ab2a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ab2c:	e841 2300 	strex	r3, r2, [r1]
 800ab30:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ab32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d1e6      	bne.n	800ab06 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	2220      	movs	r2, #32
 800ab3c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	2200      	movs	r2, #0
 800ab44:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ab48:	2303      	movs	r3, #3
 800ab4a:	e063      	b.n	800ac14 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	f003 0304 	and.w	r3, r3, #4
 800ab56:	2b04      	cmp	r3, #4
 800ab58:	d149      	bne.n	800abee <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ab5a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ab5e:	9300      	str	r3, [sp, #0]
 800ab60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ab62:	2200      	movs	r2, #0
 800ab64:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ab68:	6878      	ldr	r0, [r7, #4]
 800ab6a:	f000 f857 	bl	800ac1c <UART_WaitOnFlagUntilTimeout>
 800ab6e:	4603      	mov	r3, r0
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d03c      	beq.n	800abee <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab7c:	e853 3f00 	ldrex	r3, [r3]
 800ab80:	623b      	str	r3, [r7, #32]
   return(result);
 800ab82:	6a3b      	ldr	r3, [r7, #32]
 800ab84:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ab88:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	461a      	mov	r2, r3
 800ab90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ab92:	633b      	str	r3, [r7, #48]	; 0x30
 800ab94:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab96:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ab98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab9a:	e841 2300 	strex	r3, r2, [r1]
 800ab9e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800aba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d1e6      	bne.n	800ab74 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	3308      	adds	r3, #8
 800abac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abae:	693b      	ldr	r3, [r7, #16]
 800abb0:	e853 3f00 	ldrex	r3, [r3]
 800abb4:	60fb      	str	r3, [r7, #12]
   return(result);
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	f023 0301 	bic.w	r3, r3, #1
 800abbc:	64bb      	str	r3, [r7, #72]	; 0x48
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	3308      	adds	r3, #8
 800abc4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800abc6:	61fa      	str	r2, [r7, #28]
 800abc8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abca:	69b9      	ldr	r1, [r7, #24]
 800abcc:	69fa      	ldr	r2, [r7, #28]
 800abce:	e841 2300 	strex	r3, r2, [r1]
 800abd2:	617b      	str	r3, [r7, #20]
   return(result);
 800abd4:	697b      	ldr	r3, [r7, #20]
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d1e5      	bne.n	800aba6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	2220      	movs	r2, #32
 800abde:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	2200      	movs	r2, #0
 800abe6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800abea:	2303      	movs	r3, #3
 800abec:	e012      	b.n	800ac14 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	2220      	movs	r2, #32
 800abf2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	2220      	movs	r2, #32
 800abfa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	2200      	movs	r2, #0
 800ac02:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	2200      	movs	r2, #0
 800ac08:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	2200      	movs	r2, #0
 800ac0e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ac12:	2300      	movs	r3, #0
}
 800ac14:	4618      	mov	r0, r3
 800ac16:	3758      	adds	r7, #88	; 0x58
 800ac18:	46bd      	mov	sp, r7
 800ac1a:	bd80      	pop	{r7, pc}

0800ac1c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ac1c:	b580      	push	{r7, lr}
 800ac1e:	b084      	sub	sp, #16
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	60f8      	str	r0, [r7, #12]
 800ac24:	60b9      	str	r1, [r7, #8]
 800ac26:	603b      	str	r3, [r7, #0]
 800ac28:	4613      	mov	r3, r2
 800ac2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ac2c:	e049      	b.n	800acc2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ac2e:	69bb      	ldr	r3, [r7, #24]
 800ac30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ac34:	d045      	beq.n	800acc2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ac36:	f7f6 fe7d 	bl	8001934 <HAL_GetTick>
 800ac3a:	4602      	mov	r2, r0
 800ac3c:	683b      	ldr	r3, [r7, #0]
 800ac3e:	1ad3      	subs	r3, r2, r3
 800ac40:	69ba      	ldr	r2, [r7, #24]
 800ac42:	429a      	cmp	r2, r3
 800ac44:	d302      	bcc.n	800ac4c <UART_WaitOnFlagUntilTimeout+0x30>
 800ac46:	69bb      	ldr	r3, [r7, #24]
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d101      	bne.n	800ac50 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ac4c:	2303      	movs	r3, #3
 800ac4e:	e048      	b.n	800ace2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	f003 0304 	and.w	r3, r3, #4
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d031      	beq.n	800acc2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	69db      	ldr	r3, [r3, #28]
 800ac64:	f003 0308 	and.w	r3, r3, #8
 800ac68:	2b08      	cmp	r3, #8
 800ac6a:	d110      	bne.n	800ac8e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	2208      	movs	r2, #8
 800ac72:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800ac74:	68f8      	ldr	r0, [r7, #12]
 800ac76:	f000 f839 	bl	800acec <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	2208      	movs	r2, #8
 800ac7e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	2200      	movs	r2, #0
 800ac86:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800ac8a:	2301      	movs	r3, #1
 800ac8c:	e029      	b.n	800ace2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	69db      	ldr	r3, [r3, #28]
 800ac94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ac98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ac9c:	d111      	bne.n	800acc2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800aca6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800aca8:	68f8      	ldr	r0, [r7, #12]
 800acaa:	f000 f81f 	bl	800acec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	2220      	movs	r2, #32
 800acb2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	2200      	movs	r2, #0
 800acba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800acbe:	2303      	movs	r3, #3
 800acc0:	e00f      	b.n	800ace2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	69da      	ldr	r2, [r3, #28]
 800acc8:	68bb      	ldr	r3, [r7, #8]
 800acca:	4013      	ands	r3, r2
 800accc:	68ba      	ldr	r2, [r7, #8]
 800acce:	429a      	cmp	r2, r3
 800acd0:	bf0c      	ite	eq
 800acd2:	2301      	moveq	r3, #1
 800acd4:	2300      	movne	r3, #0
 800acd6:	b2db      	uxtb	r3, r3
 800acd8:	461a      	mov	r2, r3
 800acda:	79fb      	ldrb	r3, [r7, #7]
 800acdc:	429a      	cmp	r2, r3
 800acde:	d0a6      	beq.n	800ac2e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ace0:	2300      	movs	r3, #0
}
 800ace2:	4618      	mov	r0, r3
 800ace4:	3710      	adds	r7, #16
 800ace6:	46bd      	mov	sp, r7
 800ace8:	bd80      	pop	{r7, pc}
	...

0800acec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800acec:	b480      	push	{r7}
 800acee:	b095      	sub	sp, #84	; 0x54
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acfc:	e853 3f00 	ldrex	r3, [r3]
 800ad00:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ad02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad04:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ad08:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	461a      	mov	r2, r3
 800ad10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ad12:	643b      	str	r3, [r7, #64]	; 0x40
 800ad14:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad16:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ad18:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ad1a:	e841 2300 	strex	r3, r2, [r1]
 800ad1e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ad20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d1e6      	bne.n	800acf4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	3308      	adds	r3, #8
 800ad2c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad2e:	6a3b      	ldr	r3, [r7, #32]
 800ad30:	e853 3f00 	ldrex	r3, [r3]
 800ad34:	61fb      	str	r3, [r7, #28]
   return(result);
 800ad36:	69fa      	ldr	r2, [r7, #28]
 800ad38:	4b1e      	ldr	r3, [pc, #120]	; (800adb4 <UART_EndRxTransfer+0xc8>)
 800ad3a:	4013      	ands	r3, r2
 800ad3c:	64bb      	str	r3, [r7, #72]	; 0x48
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	3308      	adds	r3, #8
 800ad44:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ad46:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ad48:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad4a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ad4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ad4e:	e841 2300 	strex	r3, r2, [r1]
 800ad52:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ad54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d1e5      	bne.n	800ad26 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ad5e:	2b01      	cmp	r3, #1
 800ad60:	d118      	bne.n	800ad94 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	e853 3f00 	ldrex	r3, [r3]
 800ad6e:	60bb      	str	r3, [r7, #8]
   return(result);
 800ad70:	68bb      	ldr	r3, [r7, #8]
 800ad72:	f023 0310 	bic.w	r3, r3, #16
 800ad76:	647b      	str	r3, [r7, #68]	; 0x44
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	461a      	mov	r2, r3
 800ad7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ad80:	61bb      	str	r3, [r7, #24]
 800ad82:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad84:	6979      	ldr	r1, [r7, #20]
 800ad86:	69ba      	ldr	r2, [r7, #24]
 800ad88:	e841 2300 	strex	r3, r2, [r1]
 800ad8c:	613b      	str	r3, [r7, #16]
   return(result);
 800ad8e:	693b      	ldr	r3, [r7, #16]
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d1e6      	bne.n	800ad62 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	2220      	movs	r2, #32
 800ad98:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	2200      	movs	r2, #0
 800ada0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	2200      	movs	r2, #0
 800ada6:	675a      	str	r2, [r3, #116]	; 0x74
}
 800ada8:	bf00      	nop
 800adaa:	3754      	adds	r7, #84	; 0x54
 800adac:	46bd      	mov	sp, r7
 800adae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb2:	4770      	bx	lr
 800adb4:	effffffe 	.word	0xeffffffe

0800adb8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800adb8:	b480      	push	{r7}
 800adba:	b085      	sub	sp, #20
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800adc6:	2b01      	cmp	r3, #1
 800adc8:	d101      	bne.n	800adce <HAL_UARTEx_DisableFifoMode+0x16>
 800adca:	2302      	movs	r3, #2
 800adcc:	e027      	b.n	800ae1e <HAL_UARTEx_DisableFifoMode+0x66>
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	2201      	movs	r2, #1
 800add2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	2224      	movs	r2, #36	; 0x24
 800adda:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	681a      	ldr	r2, [r3, #0]
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	f022 0201 	bic.w	r2, r2, #1
 800adf4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800adfc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	2200      	movs	r2, #0
 800ae02:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	68fa      	ldr	r2, [r7, #12]
 800ae0a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	2220      	movs	r2, #32
 800ae10:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	2200      	movs	r2, #0
 800ae18:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ae1c:	2300      	movs	r3, #0
}
 800ae1e:	4618      	mov	r0, r3
 800ae20:	3714      	adds	r7, #20
 800ae22:	46bd      	mov	sp, r7
 800ae24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae28:	4770      	bx	lr

0800ae2a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ae2a:	b580      	push	{r7, lr}
 800ae2c:	b084      	sub	sp, #16
 800ae2e:	af00      	add	r7, sp, #0
 800ae30:	6078      	str	r0, [r7, #4]
 800ae32:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ae3a:	2b01      	cmp	r3, #1
 800ae3c:	d101      	bne.n	800ae42 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ae3e:	2302      	movs	r3, #2
 800ae40:	e02d      	b.n	800ae9e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	2201      	movs	r2, #1
 800ae46:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	2224      	movs	r2, #36	; 0x24
 800ae4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	681a      	ldr	r2, [r3, #0]
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	f022 0201 	bic.w	r2, r2, #1
 800ae68:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	689b      	ldr	r3, [r3, #8]
 800ae70:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	683a      	ldr	r2, [r7, #0]
 800ae7a:	430a      	orrs	r2, r1
 800ae7c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ae7e:	6878      	ldr	r0, [r7, #4]
 800ae80:	f000 f850 	bl	800af24 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	68fa      	ldr	r2, [r7, #12]
 800ae8a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	2220      	movs	r2, #32
 800ae90:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	2200      	movs	r2, #0
 800ae98:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ae9c:	2300      	movs	r3, #0
}
 800ae9e:	4618      	mov	r0, r3
 800aea0:	3710      	adds	r7, #16
 800aea2:	46bd      	mov	sp, r7
 800aea4:	bd80      	pop	{r7, pc}

0800aea6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800aea6:	b580      	push	{r7, lr}
 800aea8:	b084      	sub	sp, #16
 800aeaa:	af00      	add	r7, sp, #0
 800aeac:	6078      	str	r0, [r7, #4]
 800aeae:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800aeb6:	2b01      	cmp	r3, #1
 800aeb8:	d101      	bne.n	800aebe <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800aeba:	2302      	movs	r3, #2
 800aebc:	e02d      	b.n	800af1a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	2201      	movs	r2, #1
 800aec2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	2224      	movs	r2, #36	; 0x24
 800aeca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	681a      	ldr	r2, [r3, #0]
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	f022 0201 	bic.w	r2, r2, #1
 800aee4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	689b      	ldr	r3, [r3, #8]
 800aeec:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	683a      	ldr	r2, [r7, #0]
 800aef6:	430a      	orrs	r2, r1
 800aef8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800aefa:	6878      	ldr	r0, [r7, #4]
 800aefc:	f000 f812 	bl	800af24 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	68fa      	ldr	r2, [r7, #12]
 800af06:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	2220      	movs	r2, #32
 800af0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	2200      	movs	r2, #0
 800af14:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800af18:	2300      	movs	r3, #0
}
 800af1a:	4618      	mov	r0, r3
 800af1c:	3710      	adds	r7, #16
 800af1e:	46bd      	mov	sp, r7
 800af20:	bd80      	pop	{r7, pc}
	...

0800af24 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800af24:	b480      	push	{r7}
 800af26:	b085      	sub	sp, #20
 800af28:	af00      	add	r7, sp, #0
 800af2a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800af30:	2b00      	cmp	r3, #0
 800af32:	d108      	bne.n	800af46 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	2201      	movs	r2, #1
 800af38:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	2201      	movs	r2, #1
 800af40:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800af44:	e031      	b.n	800afaa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800af46:	2310      	movs	r3, #16
 800af48:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800af4a:	2310      	movs	r3, #16
 800af4c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	689b      	ldr	r3, [r3, #8]
 800af54:	0e5b      	lsrs	r3, r3, #25
 800af56:	b2db      	uxtb	r3, r3
 800af58:	f003 0307 	and.w	r3, r3, #7
 800af5c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	689b      	ldr	r3, [r3, #8]
 800af64:	0f5b      	lsrs	r3, r3, #29
 800af66:	b2db      	uxtb	r3, r3
 800af68:	f003 0307 	and.w	r3, r3, #7
 800af6c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800af6e:	7bbb      	ldrb	r3, [r7, #14]
 800af70:	7b3a      	ldrb	r2, [r7, #12]
 800af72:	4911      	ldr	r1, [pc, #68]	; (800afb8 <UARTEx_SetNbDataToProcess+0x94>)
 800af74:	5c8a      	ldrb	r2, [r1, r2]
 800af76:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800af7a:	7b3a      	ldrb	r2, [r7, #12]
 800af7c:	490f      	ldr	r1, [pc, #60]	; (800afbc <UARTEx_SetNbDataToProcess+0x98>)
 800af7e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800af80:	fb93 f3f2 	sdiv	r3, r3, r2
 800af84:	b29a      	uxth	r2, r3
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800af8c:	7bfb      	ldrb	r3, [r7, #15]
 800af8e:	7b7a      	ldrb	r2, [r7, #13]
 800af90:	4909      	ldr	r1, [pc, #36]	; (800afb8 <UARTEx_SetNbDataToProcess+0x94>)
 800af92:	5c8a      	ldrb	r2, [r1, r2]
 800af94:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800af98:	7b7a      	ldrb	r2, [r7, #13]
 800af9a:	4908      	ldr	r1, [pc, #32]	; (800afbc <UARTEx_SetNbDataToProcess+0x98>)
 800af9c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800af9e:	fb93 f3f2 	sdiv	r3, r3, r2
 800afa2:	b29a      	uxth	r2, r3
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800afaa:	bf00      	nop
 800afac:	3714      	adds	r7, #20
 800afae:	46bd      	mov	sp, r7
 800afb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb4:	4770      	bx	lr
 800afb6:	bf00      	nop
 800afb8:	0800b060 	.word	0x0800b060
 800afbc:	0800b068 	.word	0x0800b068

0800afc0 <memset>:
 800afc0:	4402      	add	r2, r0
 800afc2:	4603      	mov	r3, r0
 800afc4:	4293      	cmp	r3, r2
 800afc6:	d100      	bne.n	800afca <memset+0xa>
 800afc8:	4770      	bx	lr
 800afca:	f803 1b01 	strb.w	r1, [r3], #1
 800afce:	e7f9      	b.n	800afc4 <memset+0x4>

0800afd0 <__libc_init_array>:
 800afd0:	b570      	push	{r4, r5, r6, lr}
 800afd2:	4d0d      	ldr	r5, [pc, #52]	; (800b008 <__libc_init_array+0x38>)
 800afd4:	4c0d      	ldr	r4, [pc, #52]	; (800b00c <__libc_init_array+0x3c>)
 800afd6:	1b64      	subs	r4, r4, r5
 800afd8:	10a4      	asrs	r4, r4, #2
 800afda:	2600      	movs	r6, #0
 800afdc:	42a6      	cmp	r6, r4
 800afde:	d109      	bne.n	800aff4 <__libc_init_array+0x24>
 800afe0:	4d0b      	ldr	r5, [pc, #44]	; (800b010 <__libc_init_array+0x40>)
 800afe2:	4c0c      	ldr	r4, [pc, #48]	; (800b014 <__libc_init_array+0x44>)
 800afe4:	f000 f818 	bl	800b018 <_init>
 800afe8:	1b64      	subs	r4, r4, r5
 800afea:	10a4      	asrs	r4, r4, #2
 800afec:	2600      	movs	r6, #0
 800afee:	42a6      	cmp	r6, r4
 800aff0:	d105      	bne.n	800affe <__libc_init_array+0x2e>
 800aff2:	bd70      	pop	{r4, r5, r6, pc}
 800aff4:	f855 3b04 	ldr.w	r3, [r5], #4
 800aff8:	4798      	blx	r3
 800affa:	3601      	adds	r6, #1
 800affc:	e7ee      	b.n	800afdc <__libc_init_array+0xc>
 800affe:	f855 3b04 	ldr.w	r3, [r5], #4
 800b002:	4798      	blx	r3
 800b004:	3601      	adds	r6, #1
 800b006:	e7f2      	b.n	800afee <__libc_init_array+0x1e>
 800b008:	0800b078 	.word	0x0800b078
 800b00c:	0800b078 	.word	0x0800b078
 800b010:	0800b078 	.word	0x0800b078
 800b014:	0800b07c 	.word	0x0800b07c

0800b018 <_init>:
 800b018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b01a:	bf00      	nop
 800b01c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b01e:	bc08      	pop	{r3}
 800b020:	469e      	mov	lr, r3
 800b022:	4770      	bx	lr

0800b024 <_fini>:
 800b024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b026:	bf00      	nop
 800b028:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b02a:	bc08      	pop	{r3}
 800b02c:	469e      	mov	lr, r3
 800b02e:	4770      	bx	lr
