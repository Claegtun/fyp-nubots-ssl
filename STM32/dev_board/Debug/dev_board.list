
dev_board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b10c  080002cc  080002cc  000102cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800b3d8  0800b3d8  0001b3d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800b418  0800b418  0001b418  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800b420  0800b420  0001b420  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800b424  0800b424  0001b424  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  0800b428  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000010  0800b438  00020010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000070  0800b498  00020070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008810  240000d0  0800b4f8  000200d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  240088e0  0800b4f8  000288e0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200fe  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d89b  00000000  00000000  00020141  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003555  00000000  00000000  0003d9dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001570  00000000  00000000  00040f38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010b7  00000000  00000000  000424a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000358fc  00000000  00000000  0004355f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e311  00000000  00000000  00078e5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00156045  00000000  00000000  0009716c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005a60  00000000  00000000  001ed1b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008b  00000000  00000000  001f2c14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	; (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	; (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	240000d0 	.word	0x240000d0
 80002e8:	00000000 	.word	0x00000000
 80002ec:	0800b3c0 	.word	0x0800b3c0

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	; (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	; (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	; (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	240000d4 	.word	0x240000d4
 8000308:	0800b3c0 	.word	0x0800b3c0

0800030c <__aeabi_uldivmod>:
 800030c:	b953      	cbnz	r3, 8000324 <__aeabi_uldivmod+0x18>
 800030e:	b94a      	cbnz	r2, 8000324 <__aeabi_uldivmod+0x18>
 8000310:	2900      	cmp	r1, #0
 8000312:	bf08      	it	eq
 8000314:	2800      	cmpeq	r0, #0
 8000316:	bf1c      	itt	ne
 8000318:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800031c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000320:	f000 b970 	b.w	8000604 <__aeabi_idiv0>
 8000324:	f1ad 0c08 	sub.w	ip, sp, #8
 8000328:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800032c:	f000 f806 	bl	800033c <__udivmoddi4>
 8000330:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000338:	b004      	add	sp, #16
 800033a:	4770      	bx	lr

0800033c <__udivmoddi4>:
 800033c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000340:	9e08      	ldr	r6, [sp, #32]
 8000342:	460d      	mov	r5, r1
 8000344:	4604      	mov	r4, r0
 8000346:	460f      	mov	r7, r1
 8000348:	2b00      	cmp	r3, #0
 800034a:	d14a      	bne.n	80003e2 <__udivmoddi4+0xa6>
 800034c:	428a      	cmp	r2, r1
 800034e:	4694      	mov	ip, r2
 8000350:	d965      	bls.n	800041e <__udivmoddi4+0xe2>
 8000352:	fab2 f382 	clz	r3, r2
 8000356:	b143      	cbz	r3, 800036a <__udivmoddi4+0x2e>
 8000358:	fa02 fc03 	lsl.w	ip, r2, r3
 800035c:	f1c3 0220 	rsb	r2, r3, #32
 8000360:	409f      	lsls	r7, r3
 8000362:	fa20 f202 	lsr.w	r2, r0, r2
 8000366:	4317      	orrs	r7, r2
 8000368:	409c      	lsls	r4, r3
 800036a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800036e:	fa1f f58c 	uxth.w	r5, ip
 8000372:	fbb7 f1fe 	udiv	r1, r7, lr
 8000376:	0c22      	lsrs	r2, r4, #16
 8000378:	fb0e 7711 	mls	r7, lr, r1, r7
 800037c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000380:	fb01 f005 	mul.w	r0, r1, r5
 8000384:	4290      	cmp	r0, r2
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x62>
 8000388:	eb1c 0202 	adds.w	r2, ip, r2
 800038c:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000390:	f080 811c 	bcs.w	80005cc <__udivmoddi4+0x290>
 8000394:	4290      	cmp	r0, r2
 8000396:	f240 8119 	bls.w	80005cc <__udivmoddi4+0x290>
 800039a:	3902      	subs	r1, #2
 800039c:	4462      	add	r2, ip
 800039e:	1a12      	subs	r2, r2, r0
 80003a0:	b2a4      	uxth	r4, r4
 80003a2:	fbb2 f0fe 	udiv	r0, r2, lr
 80003a6:	fb0e 2210 	mls	r2, lr, r0, r2
 80003aa:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003ae:	fb00 f505 	mul.w	r5, r0, r5
 80003b2:	42a5      	cmp	r5, r4
 80003b4:	d90a      	bls.n	80003cc <__udivmoddi4+0x90>
 80003b6:	eb1c 0404 	adds.w	r4, ip, r4
 80003ba:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003be:	f080 8107 	bcs.w	80005d0 <__udivmoddi4+0x294>
 80003c2:	42a5      	cmp	r5, r4
 80003c4:	f240 8104 	bls.w	80005d0 <__udivmoddi4+0x294>
 80003c8:	4464      	add	r4, ip
 80003ca:	3802      	subs	r0, #2
 80003cc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003d0:	1b64      	subs	r4, r4, r5
 80003d2:	2100      	movs	r1, #0
 80003d4:	b11e      	cbz	r6, 80003de <__udivmoddi4+0xa2>
 80003d6:	40dc      	lsrs	r4, r3
 80003d8:	2300      	movs	r3, #0
 80003da:	e9c6 4300 	strd	r4, r3, [r6]
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	428b      	cmp	r3, r1
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0xbc>
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	f000 80ed 	beq.w	80005c6 <__udivmoddi4+0x28a>
 80003ec:	2100      	movs	r1, #0
 80003ee:	e9c6 0500 	strd	r0, r5, [r6]
 80003f2:	4608      	mov	r0, r1
 80003f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003f8:	fab3 f183 	clz	r1, r3
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d149      	bne.n	8000494 <__udivmoddi4+0x158>
 8000400:	42ab      	cmp	r3, r5
 8000402:	d302      	bcc.n	800040a <__udivmoddi4+0xce>
 8000404:	4282      	cmp	r2, r0
 8000406:	f200 80f8 	bhi.w	80005fa <__udivmoddi4+0x2be>
 800040a:	1a84      	subs	r4, r0, r2
 800040c:	eb65 0203 	sbc.w	r2, r5, r3
 8000410:	2001      	movs	r0, #1
 8000412:	4617      	mov	r7, r2
 8000414:	2e00      	cmp	r6, #0
 8000416:	d0e2      	beq.n	80003de <__udivmoddi4+0xa2>
 8000418:	e9c6 4700 	strd	r4, r7, [r6]
 800041c:	e7df      	b.n	80003de <__udivmoddi4+0xa2>
 800041e:	b902      	cbnz	r2, 8000422 <__udivmoddi4+0xe6>
 8000420:	deff      	udf	#255	; 0xff
 8000422:	fab2 f382 	clz	r3, r2
 8000426:	2b00      	cmp	r3, #0
 8000428:	f040 8090 	bne.w	800054c <__udivmoddi4+0x210>
 800042c:	1a8a      	subs	r2, r1, r2
 800042e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000432:	fa1f fe8c 	uxth.w	lr, ip
 8000436:	2101      	movs	r1, #1
 8000438:	fbb2 f5f7 	udiv	r5, r2, r7
 800043c:	fb07 2015 	mls	r0, r7, r5, r2
 8000440:	0c22      	lsrs	r2, r4, #16
 8000442:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000446:	fb0e f005 	mul.w	r0, lr, r5
 800044a:	4290      	cmp	r0, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x124>
 800044e:	eb1c 0202 	adds.w	r2, ip, r2
 8000452:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000456:	d202      	bcs.n	800045e <__udivmoddi4+0x122>
 8000458:	4290      	cmp	r0, r2
 800045a:	f200 80cb 	bhi.w	80005f4 <__udivmoddi4+0x2b8>
 800045e:	4645      	mov	r5, r8
 8000460:	1a12      	subs	r2, r2, r0
 8000462:	b2a4      	uxth	r4, r4
 8000464:	fbb2 f0f7 	udiv	r0, r2, r7
 8000468:	fb07 2210 	mls	r2, r7, r0, r2
 800046c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000470:	fb0e fe00 	mul.w	lr, lr, r0
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x14e>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000480:	d202      	bcs.n	8000488 <__udivmoddi4+0x14c>
 8000482:	45a6      	cmp	lr, r4
 8000484:	f200 80bb 	bhi.w	80005fe <__udivmoddi4+0x2c2>
 8000488:	4610      	mov	r0, r2
 800048a:	eba4 040e 	sub.w	r4, r4, lr
 800048e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000492:	e79f      	b.n	80003d4 <__udivmoddi4+0x98>
 8000494:	f1c1 0720 	rsb	r7, r1, #32
 8000498:	408b      	lsls	r3, r1
 800049a:	fa22 fc07 	lsr.w	ip, r2, r7
 800049e:	ea4c 0c03 	orr.w	ip, ip, r3
 80004a2:	fa05 f401 	lsl.w	r4, r5, r1
 80004a6:	fa20 f307 	lsr.w	r3, r0, r7
 80004aa:	40fd      	lsrs	r5, r7
 80004ac:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004b0:	4323      	orrs	r3, r4
 80004b2:	fbb5 f8f9 	udiv	r8, r5, r9
 80004b6:	fa1f fe8c 	uxth.w	lr, ip
 80004ba:	fb09 5518 	mls	r5, r9, r8, r5
 80004be:	0c1c      	lsrs	r4, r3, #16
 80004c0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004c4:	fb08 f50e 	mul.w	r5, r8, lr
 80004c8:	42a5      	cmp	r5, r4
 80004ca:	fa02 f201 	lsl.w	r2, r2, r1
 80004ce:	fa00 f001 	lsl.w	r0, r0, r1
 80004d2:	d90b      	bls.n	80004ec <__udivmoddi4+0x1b0>
 80004d4:	eb1c 0404 	adds.w	r4, ip, r4
 80004d8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004dc:	f080 8088 	bcs.w	80005f0 <__udivmoddi4+0x2b4>
 80004e0:	42a5      	cmp	r5, r4
 80004e2:	f240 8085 	bls.w	80005f0 <__udivmoddi4+0x2b4>
 80004e6:	f1a8 0802 	sub.w	r8, r8, #2
 80004ea:	4464      	add	r4, ip
 80004ec:	1b64      	subs	r4, r4, r5
 80004ee:	b29d      	uxth	r5, r3
 80004f0:	fbb4 f3f9 	udiv	r3, r4, r9
 80004f4:	fb09 4413 	mls	r4, r9, r3, r4
 80004f8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004fc:	fb03 fe0e 	mul.w	lr, r3, lr
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x1da>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 800050c:	d26c      	bcs.n	80005e8 <__udivmoddi4+0x2ac>
 800050e:	45a6      	cmp	lr, r4
 8000510:	d96a      	bls.n	80005e8 <__udivmoddi4+0x2ac>
 8000512:	3b02      	subs	r3, #2
 8000514:	4464      	add	r4, ip
 8000516:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800051a:	fba3 9502 	umull	r9, r5, r3, r2
 800051e:	eba4 040e 	sub.w	r4, r4, lr
 8000522:	42ac      	cmp	r4, r5
 8000524:	46c8      	mov	r8, r9
 8000526:	46ae      	mov	lr, r5
 8000528:	d356      	bcc.n	80005d8 <__udivmoddi4+0x29c>
 800052a:	d053      	beq.n	80005d4 <__udivmoddi4+0x298>
 800052c:	b156      	cbz	r6, 8000544 <__udivmoddi4+0x208>
 800052e:	ebb0 0208 	subs.w	r2, r0, r8
 8000532:	eb64 040e 	sbc.w	r4, r4, lr
 8000536:	fa04 f707 	lsl.w	r7, r4, r7
 800053a:	40ca      	lsrs	r2, r1
 800053c:	40cc      	lsrs	r4, r1
 800053e:	4317      	orrs	r7, r2
 8000540:	e9c6 7400 	strd	r7, r4, [r6]
 8000544:	4618      	mov	r0, r3
 8000546:	2100      	movs	r1, #0
 8000548:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800054c:	f1c3 0120 	rsb	r1, r3, #32
 8000550:	fa02 fc03 	lsl.w	ip, r2, r3
 8000554:	fa20 f201 	lsr.w	r2, r0, r1
 8000558:	fa25 f101 	lsr.w	r1, r5, r1
 800055c:	409d      	lsls	r5, r3
 800055e:	432a      	orrs	r2, r5
 8000560:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000564:	fa1f fe8c 	uxth.w	lr, ip
 8000568:	fbb1 f0f7 	udiv	r0, r1, r7
 800056c:	fb07 1510 	mls	r5, r7, r0, r1
 8000570:	0c11      	lsrs	r1, r2, #16
 8000572:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000576:	fb00 f50e 	mul.w	r5, r0, lr
 800057a:	428d      	cmp	r5, r1
 800057c:	fa04 f403 	lsl.w	r4, r4, r3
 8000580:	d908      	bls.n	8000594 <__udivmoddi4+0x258>
 8000582:	eb1c 0101 	adds.w	r1, ip, r1
 8000586:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800058a:	d22f      	bcs.n	80005ec <__udivmoddi4+0x2b0>
 800058c:	428d      	cmp	r5, r1
 800058e:	d92d      	bls.n	80005ec <__udivmoddi4+0x2b0>
 8000590:	3802      	subs	r0, #2
 8000592:	4461      	add	r1, ip
 8000594:	1b49      	subs	r1, r1, r5
 8000596:	b292      	uxth	r2, r2
 8000598:	fbb1 f5f7 	udiv	r5, r1, r7
 800059c:	fb07 1115 	mls	r1, r7, r5, r1
 80005a0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005a4:	fb05 f10e 	mul.w	r1, r5, lr
 80005a8:	4291      	cmp	r1, r2
 80005aa:	d908      	bls.n	80005be <__udivmoddi4+0x282>
 80005ac:	eb1c 0202 	adds.w	r2, ip, r2
 80005b0:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80005b4:	d216      	bcs.n	80005e4 <__udivmoddi4+0x2a8>
 80005b6:	4291      	cmp	r1, r2
 80005b8:	d914      	bls.n	80005e4 <__udivmoddi4+0x2a8>
 80005ba:	3d02      	subs	r5, #2
 80005bc:	4462      	add	r2, ip
 80005be:	1a52      	subs	r2, r2, r1
 80005c0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005c4:	e738      	b.n	8000438 <__udivmoddi4+0xfc>
 80005c6:	4631      	mov	r1, r6
 80005c8:	4630      	mov	r0, r6
 80005ca:	e708      	b.n	80003de <__udivmoddi4+0xa2>
 80005cc:	4639      	mov	r1, r7
 80005ce:	e6e6      	b.n	800039e <__udivmoddi4+0x62>
 80005d0:	4610      	mov	r0, r2
 80005d2:	e6fb      	b.n	80003cc <__udivmoddi4+0x90>
 80005d4:	4548      	cmp	r0, r9
 80005d6:	d2a9      	bcs.n	800052c <__udivmoddi4+0x1f0>
 80005d8:	ebb9 0802 	subs.w	r8, r9, r2
 80005dc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005e0:	3b01      	subs	r3, #1
 80005e2:	e7a3      	b.n	800052c <__udivmoddi4+0x1f0>
 80005e4:	4645      	mov	r5, r8
 80005e6:	e7ea      	b.n	80005be <__udivmoddi4+0x282>
 80005e8:	462b      	mov	r3, r5
 80005ea:	e794      	b.n	8000516 <__udivmoddi4+0x1da>
 80005ec:	4640      	mov	r0, r8
 80005ee:	e7d1      	b.n	8000594 <__udivmoddi4+0x258>
 80005f0:	46d0      	mov	r8, sl
 80005f2:	e77b      	b.n	80004ec <__udivmoddi4+0x1b0>
 80005f4:	3d02      	subs	r5, #2
 80005f6:	4462      	add	r2, ip
 80005f8:	e732      	b.n	8000460 <__udivmoddi4+0x124>
 80005fa:	4608      	mov	r0, r1
 80005fc:	e70a      	b.n	8000414 <__udivmoddi4+0xd8>
 80005fe:	4464      	add	r4, ip
 8000600:	3802      	subs	r0, #2
 8000602:	e742      	b.n	800048a <__udivmoddi4+0x14e>

08000604 <__aeabi_idiv0>:
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop

08000608 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800060e:	4b21      	ldr	r3, [pc, #132]	; (8000694 <MX_DMA_Init+0x8c>)
 8000610:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000614:	4a1f      	ldr	r2, [pc, #124]	; (8000694 <MX_DMA_Init+0x8c>)
 8000616:	f043 0301 	orr.w	r3, r3, #1
 800061a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800061e:	4b1d      	ldr	r3, [pc, #116]	; (8000694 <MX_DMA_Init+0x8c>)
 8000620:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000624:	f003 0301 	and.w	r3, r3, #1
 8000628:	607b      	str	r3, [r7, #4]
 800062a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800062c:	2200      	movs	r2, #0
 800062e:	2100      	movs	r1, #0
 8000630:	200b      	movs	r0, #11
 8000632:	f002 f844 	bl	80026be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000636:	200b      	movs	r0, #11
 8000638:	f002 f85b 	bl	80026f2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800063c:	2200      	movs	r2, #0
 800063e:	2100      	movs	r1, #0
 8000640:	200c      	movs	r0, #12
 8000642:	f002 f83c 	bl	80026be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000646:	200c      	movs	r0, #12
 8000648:	f002 f853 	bl	80026f2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 800064c:	2200      	movs	r2, #0
 800064e:	2100      	movs	r1, #0
 8000650:	200d      	movs	r0, #13
 8000652:	f002 f834 	bl	80026be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000656:	200d      	movs	r0, #13
 8000658:	f002 f84b 	bl	80026f2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800065c:	2200      	movs	r2, #0
 800065e:	2100      	movs	r1, #0
 8000660:	200e      	movs	r0, #14
 8000662:	f002 f82c 	bl	80026be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000666:	200e      	movs	r0, #14
 8000668:	f002 f843 	bl	80026f2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800066c:	2200      	movs	r2, #0
 800066e:	2100      	movs	r1, #0
 8000670:	200f      	movs	r0, #15
 8000672:	f002 f824 	bl	80026be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000676:	200f      	movs	r0, #15
 8000678:	f002 f83b 	bl	80026f2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800067c:	2200      	movs	r2, #0
 800067e:	2100      	movs	r1, #0
 8000680:	2010      	movs	r0, #16
 8000682:	f002 f81c 	bl	80026be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000686:	2010      	movs	r0, #16
 8000688:	f002 f833 	bl	80026f2 <HAL_NVIC_EnableIRQ>

}
 800068c:	bf00      	nop
 800068e:	3708      	adds	r7, #8
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	58024400 	.word	0x58024400

08000698 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800069c:	4b1e      	ldr	r3, [pc, #120]	; (8000718 <MX_ETH_Init+0x80>)
 800069e:	4a1f      	ldr	r2, [pc, #124]	; (800071c <MX_ETH_Init+0x84>)
 80006a0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80006a2:	4b1f      	ldr	r3, [pc, #124]	; (8000720 <MX_ETH_Init+0x88>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80006a8:	4b1d      	ldr	r3, [pc, #116]	; (8000720 <MX_ETH_Init+0x88>)
 80006aa:	2280      	movs	r2, #128	; 0x80
 80006ac:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80006ae:	4b1c      	ldr	r3, [pc, #112]	; (8000720 <MX_ETH_Init+0x88>)
 80006b0:	22e1      	movs	r2, #225	; 0xe1
 80006b2:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80006b4:	4b1a      	ldr	r3, [pc, #104]	; (8000720 <MX_ETH_Init+0x88>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80006ba:	4b19      	ldr	r3, [pc, #100]	; (8000720 <MX_ETH_Init+0x88>)
 80006bc:	2200      	movs	r2, #0
 80006be:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80006c0:	4b17      	ldr	r3, [pc, #92]	; (8000720 <MX_ETH_Init+0x88>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80006c6:	4b14      	ldr	r3, [pc, #80]	; (8000718 <MX_ETH_Init+0x80>)
 80006c8:	4a15      	ldr	r2, [pc, #84]	; (8000720 <MX_ETH_Init+0x88>)
 80006ca:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80006cc:	4b12      	ldr	r3, [pc, #72]	; (8000718 <MX_ETH_Init+0x80>)
 80006ce:	2201      	movs	r2, #1
 80006d0:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80006d2:	4b11      	ldr	r3, [pc, #68]	; (8000718 <MX_ETH_Init+0x80>)
 80006d4:	4a13      	ldr	r2, [pc, #76]	; (8000724 <MX_ETH_Init+0x8c>)
 80006d6:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80006d8:	4b0f      	ldr	r3, [pc, #60]	; (8000718 <MX_ETH_Init+0x80>)
 80006da:	4a13      	ldr	r2, [pc, #76]	; (8000728 <MX_ETH_Init+0x90>)
 80006dc:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80006de:	4b0e      	ldr	r3, [pc, #56]	; (8000718 <MX_ETH_Init+0x80>)
 80006e0:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80006e4:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80006e6:	480c      	ldr	r0, [pc, #48]	; (8000718 <MX_ETH_Init+0x80>)
 80006e8:	f004 fb38 	bl	8004d5c <HAL_ETH_Init>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 80006f2:	f000 fb85 	bl	8000e00 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80006f6:	2238      	movs	r2, #56	; 0x38
 80006f8:	2100      	movs	r1, #0
 80006fa:	480c      	ldr	r0, [pc, #48]	; (800072c <MX_ETH_Init+0x94>)
 80006fc:	f00a fe34 	bl	800b368 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000700:	4b0a      	ldr	r3, [pc, #40]	; (800072c <MX_ETH_Init+0x94>)
 8000702:	2221      	movs	r2, #33	; 0x21
 8000704:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000706:	4b09      	ldr	r3, [pc, #36]	; (800072c <MX_ETH_Init+0x94>)
 8000708:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800070c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800070e:	4b07      	ldr	r3, [pc, #28]	; (800072c <MX_ETH_Init+0x94>)
 8000710:	2200      	movs	r2, #0
 8000712:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000714:	bf00      	nop
 8000716:	bd80      	pop	{r7, pc}
 8000718:	24000124 	.word	0x24000124
 800071c:	40028000 	.word	0x40028000
 8000720:	240001d4 	.word	0x240001d4
 8000724:	24000070 	.word	0x24000070
 8000728:	24000010 	.word	0x24000010
 800072c:	240000ec 	.word	0x240000ec

08000730 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b08e      	sub	sp, #56	; 0x38
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000738:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800073c:	2200      	movs	r2, #0
 800073e:	601a      	str	r2, [r3, #0]
 8000740:	605a      	str	r2, [r3, #4]
 8000742:	609a      	str	r2, [r3, #8]
 8000744:	60da      	str	r2, [r3, #12]
 8000746:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	4a59      	ldr	r2, [pc, #356]	; (80008b4 <HAL_ETH_MspInit+0x184>)
 800074e:	4293      	cmp	r3, r2
 8000750:	f040 80ab 	bne.w	80008aa <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000754:	4b58      	ldr	r3, [pc, #352]	; (80008b8 <HAL_ETH_MspInit+0x188>)
 8000756:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800075a:	4a57      	ldr	r2, [pc, #348]	; (80008b8 <HAL_ETH_MspInit+0x188>)
 800075c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000760:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000764:	4b54      	ldr	r3, [pc, #336]	; (80008b8 <HAL_ETH_MspInit+0x188>)
 8000766:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800076a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800076e:	623b      	str	r3, [r7, #32]
 8000770:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000772:	4b51      	ldr	r3, [pc, #324]	; (80008b8 <HAL_ETH_MspInit+0x188>)
 8000774:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000778:	4a4f      	ldr	r2, [pc, #316]	; (80008b8 <HAL_ETH_MspInit+0x188>)
 800077a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800077e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000782:	4b4d      	ldr	r3, [pc, #308]	; (80008b8 <HAL_ETH_MspInit+0x188>)
 8000784:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000788:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800078c:	61fb      	str	r3, [r7, #28]
 800078e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000790:	4b49      	ldr	r3, [pc, #292]	; (80008b8 <HAL_ETH_MspInit+0x188>)
 8000792:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000796:	4a48      	ldr	r2, [pc, #288]	; (80008b8 <HAL_ETH_MspInit+0x188>)
 8000798:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800079c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80007a0:	4b45      	ldr	r3, [pc, #276]	; (80008b8 <HAL_ETH_MspInit+0x188>)
 80007a2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80007a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007aa:	61bb      	str	r3, [r7, #24]
 80007ac:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ae:	4b42      	ldr	r3, [pc, #264]	; (80008b8 <HAL_ETH_MspInit+0x188>)
 80007b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007b4:	4a40      	ldr	r2, [pc, #256]	; (80008b8 <HAL_ETH_MspInit+0x188>)
 80007b6:	f043 0304 	orr.w	r3, r3, #4
 80007ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007be:	4b3e      	ldr	r3, [pc, #248]	; (80008b8 <HAL_ETH_MspInit+0x188>)
 80007c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007c4:	f003 0304 	and.w	r3, r3, #4
 80007c8:	617b      	str	r3, [r7, #20]
 80007ca:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007cc:	4b3a      	ldr	r3, [pc, #232]	; (80008b8 <HAL_ETH_MspInit+0x188>)
 80007ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007d2:	4a39      	ldr	r2, [pc, #228]	; (80008b8 <HAL_ETH_MspInit+0x188>)
 80007d4:	f043 0301 	orr.w	r3, r3, #1
 80007d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007dc:	4b36      	ldr	r3, [pc, #216]	; (80008b8 <HAL_ETH_MspInit+0x188>)
 80007de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007e2:	f003 0301 	and.w	r3, r3, #1
 80007e6:	613b      	str	r3, [r7, #16]
 80007e8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ea:	4b33      	ldr	r3, [pc, #204]	; (80008b8 <HAL_ETH_MspInit+0x188>)
 80007ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007f0:	4a31      	ldr	r2, [pc, #196]	; (80008b8 <HAL_ETH_MspInit+0x188>)
 80007f2:	f043 0302 	orr.w	r3, r3, #2
 80007f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007fa:	4b2f      	ldr	r3, [pc, #188]	; (80008b8 <HAL_ETH_MspInit+0x188>)
 80007fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000800:	f003 0302 	and.w	r3, r3, #2
 8000804:	60fb      	str	r3, [r7, #12]
 8000806:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000808:	4b2b      	ldr	r3, [pc, #172]	; (80008b8 <HAL_ETH_MspInit+0x188>)
 800080a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800080e:	4a2a      	ldr	r2, [pc, #168]	; (80008b8 <HAL_ETH_MspInit+0x188>)
 8000810:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000814:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000818:	4b27      	ldr	r3, [pc, #156]	; (80008b8 <HAL_ETH_MspInit+0x188>)
 800081a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800081e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000822:	60bb      	str	r3, [r7, #8]
 8000824:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000826:	2332      	movs	r3, #50	; 0x32
 8000828:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800082a:	2302      	movs	r3, #2
 800082c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082e:	2300      	movs	r3, #0
 8000830:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000832:	2300      	movs	r3, #0
 8000834:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000836:	230b      	movs	r3, #11
 8000838:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800083a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800083e:	4619      	mov	r1, r3
 8000840:	481e      	ldr	r0, [pc, #120]	; (80008bc <HAL_ETH_MspInit+0x18c>)
 8000842:	f004 feaf 	bl	80055a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000846:	2386      	movs	r3, #134	; 0x86
 8000848:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800084a:	2302      	movs	r3, #2
 800084c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084e:	2300      	movs	r3, #0
 8000850:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000852:	2300      	movs	r3, #0
 8000854:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000856:	230b      	movs	r3, #11
 8000858:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800085a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800085e:	4619      	mov	r1, r3
 8000860:	4817      	ldr	r0, [pc, #92]	; (80008c0 <HAL_ETH_MspInit+0x190>)
 8000862:	f004 fe9f 	bl	80055a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000866:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800086a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800086c:	2302      	movs	r3, #2
 800086e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000870:	2300      	movs	r3, #0
 8000872:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000874:	2300      	movs	r3, #0
 8000876:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000878:	230b      	movs	r3, #11
 800087a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800087c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000880:	4619      	mov	r1, r3
 8000882:	4810      	ldr	r0, [pc, #64]	; (80008c4 <HAL_ETH_MspInit+0x194>)
 8000884:	f004 fe8e 	bl	80055a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000888:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800088c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800088e:	2302      	movs	r3, #2
 8000890:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000892:	2300      	movs	r3, #0
 8000894:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000896:	2300      	movs	r3, #0
 8000898:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800089a:	230b      	movs	r3, #11
 800089c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800089e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008a2:	4619      	mov	r1, r3
 80008a4:	4808      	ldr	r0, [pc, #32]	; (80008c8 <HAL_ETH_MspInit+0x198>)
 80008a6:	f004 fe7d 	bl	80055a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80008aa:	bf00      	nop
 80008ac:	3738      	adds	r7, #56	; 0x38
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	40028000 	.word	0x40028000
 80008b8:	58024400 	.word	0x58024400
 80008bc:	58020800 	.word	0x58020800
 80008c0:	58020000 	.word	0x58020000
 80008c4:	58020400 	.word	0x58020400
 80008c8:	58021800 	.word	0x58021800

080008cc <MX_GPIO_Init>:
     PA8   ------> S_TIM1_CH1
     PA9   ------> USB_OTG_HS_VBUS
     PA10   ------> USB_OTG_HS_ID
*/
void MX_GPIO_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b08e      	sub	sp, #56	; 0x38
 80008d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008d6:	2200      	movs	r2, #0
 80008d8:	601a      	str	r2, [r3, #0]
 80008da:	605a      	str	r2, [r3, #4]
 80008dc:	609a      	str	r2, [r3, #8]
 80008de:	60da      	str	r2, [r3, #12]
 80008e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008e2:	4b9f      	ldr	r3, [pc, #636]	; (8000b60 <MX_GPIO_Init+0x294>)
 80008e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008e8:	4a9d      	ldr	r2, [pc, #628]	; (8000b60 <MX_GPIO_Init+0x294>)
 80008ea:	f043 0310 	orr.w	r3, r3, #16
 80008ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008f2:	4b9b      	ldr	r3, [pc, #620]	; (8000b60 <MX_GPIO_Init+0x294>)
 80008f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008f8:	f003 0310 	and.w	r3, r3, #16
 80008fc:	623b      	str	r3, [r7, #32]
 80008fe:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000900:	4b97      	ldr	r3, [pc, #604]	; (8000b60 <MX_GPIO_Init+0x294>)
 8000902:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000906:	4a96      	ldr	r2, [pc, #600]	; (8000b60 <MX_GPIO_Init+0x294>)
 8000908:	f043 0304 	orr.w	r3, r3, #4
 800090c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000910:	4b93      	ldr	r3, [pc, #588]	; (8000b60 <MX_GPIO_Init+0x294>)
 8000912:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000916:	f003 0304 	and.w	r3, r3, #4
 800091a:	61fb      	str	r3, [r7, #28]
 800091c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800091e:	4b90      	ldr	r3, [pc, #576]	; (8000b60 <MX_GPIO_Init+0x294>)
 8000920:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000924:	4a8e      	ldr	r2, [pc, #568]	; (8000b60 <MX_GPIO_Init+0x294>)
 8000926:	f043 0320 	orr.w	r3, r3, #32
 800092a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800092e:	4b8c      	ldr	r3, [pc, #560]	; (8000b60 <MX_GPIO_Init+0x294>)
 8000930:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000934:	f003 0320 	and.w	r3, r3, #32
 8000938:	61bb      	str	r3, [r7, #24]
 800093a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800093c:	4b88      	ldr	r3, [pc, #544]	; (8000b60 <MX_GPIO_Init+0x294>)
 800093e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000942:	4a87      	ldr	r2, [pc, #540]	; (8000b60 <MX_GPIO_Init+0x294>)
 8000944:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000948:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800094c:	4b84      	ldr	r3, [pc, #528]	; (8000b60 <MX_GPIO_Init+0x294>)
 800094e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000952:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000956:	617b      	str	r3, [r7, #20]
 8000958:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800095a:	4b81      	ldr	r3, [pc, #516]	; (8000b60 <MX_GPIO_Init+0x294>)
 800095c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000960:	4a7f      	ldr	r2, [pc, #508]	; (8000b60 <MX_GPIO_Init+0x294>)
 8000962:	f043 0301 	orr.w	r3, r3, #1
 8000966:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800096a:	4b7d      	ldr	r3, [pc, #500]	; (8000b60 <MX_GPIO_Init+0x294>)
 800096c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000970:	f003 0301 	and.w	r3, r3, #1
 8000974:	613b      	str	r3, [r7, #16]
 8000976:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000978:	4b79      	ldr	r3, [pc, #484]	; (8000b60 <MX_GPIO_Init+0x294>)
 800097a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800097e:	4a78      	ldr	r2, [pc, #480]	; (8000b60 <MX_GPIO_Init+0x294>)
 8000980:	f043 0302 	orr.w	r3, r3, #2
 8000984:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000988:	4b75      	ldr	r3, [pc, #468]	; (8000b60 <MX_GPIO_Init+0x294>)
 800098a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800098e:	f003 0302 	and.w	r3, r3, #2
 8000992:	60fb      	str	r3, [r7, #12]
 8000994:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000996:	4b72      	ldr	r3, [pc, #456]	; (8000b60 <MX_GPIO_Init+0x294>)
 8000998:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800099c:	4a70      	ldr	r2, [pc, #448]	; (8000b60 <MX_GPIO_Init+0x294>)
 800099e:	f043 0308 	orr.w	r3, r3, #8
 80009a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009a6:	4b6e      	ldr	r3, [pc, #440]	; (8000b60 <MX_GPIO_Init+0x294>)
 80009a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009ac:	f003 0308 	and.w	r3, r3, #8
 80009b0:	60bb      	str	r3, [r7, #8]
 80009b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009b4:	4b6a      	ldr	r3, [pc, #424]	; (8000b60 <MX_GPIO_Init+0x294>)
 80009b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009ba:	4a69      	ldr	r2, [pc, #420]	; (8000b60 <MX_GPIO_Init+0x294>)
 80009bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009c4:	4b66      	ldr	r3, [pc, #408]	; (8000b60 <MX_GPIO_Init+0x294>)
 80009c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009ce:	607b      	str	r3, [r7, #4]
 80009d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SIG_0_GPIO_Port, SIG_0_Pin, GPIO_PIN_RESET);
 80009d2:	2200      	movs	r2, #0
 80009d4:	2110      	movs	r1, #16
 80009d6:	4863      	ldr	r0, [pc, #396]	; (8000b64 <MX_GPIO_Init+0x298>)
 80009d8:	f004 ff8c 	bl	80058f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ADC_CNVST_GPIO_Port, ADC_CNVST_Pin, GPIO_PIN_RESET);
 80009dc:	2200      	movs	r2, #0
 80009de:	2108      	movs	r1, #8
 80009e0:	4861      	ldr	r0, [pc, #388]	; (8000b68 <MX_GPIO_Init+0x29c>)
 80009e2:	f004 ff87 	bl	80058f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin|ADC_RESET_Pin, GPIO_PIN_RESET);
 80009e6:	2200      	movs	r2, #0
 80009e8:	f244 1101 	movw	r1, #16641	; 0x4101
 80009ec:	485f      	ldr	r0, [pc, #380]	; (8000b6c <MX_GPIO_Init+0x2a0>)
 80009ee:	f004 ff81 	bl	80058f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80009f2:	2200      	movs	r2, #0
 80009f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009f8:	485d      	ldr	r0, [pc, #372]	; (8000b70 <MX_GPIO_Init+0x2a4>)
 80009fa:	f004 ff7b 	bl	80058f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 80009fe:	2200      	movs	r2, #0
 8000a00:	2102      	movs	r1, #2
 8000a02:	485c      	ldr	r0, [pc, #368]	; (8000b74 <MX_GPIO_Init+0x2a8>)
 8000a04:	f004 ff76 	bl	80058f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a12:	2300      	movs	r3, #0
 8000a14:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	4856      	ldr	r0, [pc, #344]	; (8000b78 <MX_GPIO_Init+0x2ac>)
 8000a1e:	f004 fdc1 	bl	80055a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SIG_0_Pin;
 8000a22:	2310      	movs	r3, #16
 8000a24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a26:	2301      	movs	r3, #1
 8000a28:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SIG_0_GPIO_Port, &GPIO_InitStruct);
 8000a32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a36:	4619      	mov	r1, r3
 8000a38:	484a      	ldr	r0, [pc, #296]	; (8000b64 <MX_GPIO_Init+0x298>)
 8000a3a:	f004 fdb3 	bl	80055a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ADC_CNVST_Pin;
 8000a3e:	2308      	movs	r3, #8
 8000a40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a42:	2301      	movs	r3, #1
 8000a44:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a46:	2300      	movs	r3, #0
 8000a48:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ADC_CNVST_GPIO_Port, &GPIO_InitStruct);
 8000a4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a52:	4619      	mov	r1, r3
 8000a54:	4844      	ldr	r0, [pc, #272]	; (8000b68 <MX_GPIO_Init+0x29c>)
 8000a56:	f004 fda5 	bl	80055a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin|ADC_RESET_Pin;
 8000a5a:	f244 1301 	movw	r3, #16641	; 0x4101
 8000a5e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a60:	2301      	movs	r3, #1
 8000a62:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a64:	2300      	movs	r3, #0
 8000a66:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a70:	4619      	mov	r1, r3
 8000a72:	483e      	ldr	r0, [pc, #248]	; (8000b6c <MX_GPIO_Init+0x2a0>)
 8000a74:	f004 fd96 	bl	80055a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000a78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a7c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a82:	2300      	movs	r3, #0
 8000a84:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a86:	2300      	movs	r3, #0
 8000a88:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000a8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4837      	ldr	r0, [pc, #220]	; (8000b70 <MX_GPIO_Init+0x2a4>)
 8000a92:	f004 fd87 	bl	80055a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ADC_BUSY_Pin;
 8000a96:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000a9a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a9c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000aa0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ADC_BUSY_GPIO_Port, &GPIO_InitStruct);
 8000aa6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aaa:	4619      	mov	r1, r3
 8000aac:	4830      	ldr	r0, [pc, #192]	; (8000b70 <MX_GPIO_Init+0x2a4>)
 8000aae:	f004 fd79 	bl	80055a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000ab2:	2380      	movs	r3, #128	; 0x80
 8000ab4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ab6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000aba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abc:	2300      	movs	r3, #0
 8000abe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000ac0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	482d      	ldr	r0, [pc, #180]	; (8000b7c <MX_GPIO_Init+0x2b0>)
 8000ac8:	f004 fd6c 	bl	80055a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000acc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ad0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad2:	2302      	movs	r3, #2
 8000ad4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ada:	2300      	movs	r3, #0
 8000adc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	481f      	ldr	r0, [pc, #124]	; (8000b68 <MX_GPIO_Init+0x29c>)
 8000aea:	f004 fd5b 	bl	80055a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000aee:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000af2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000af4:	2300      	movs	r3, #0
 8000af6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af8:	2300      	movs	r3, #0
 8000afa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000afc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b00:	4619      	mov	r1, r3
 8000b02:	4819      	ldr	r0, [pc, #100]	; (8000b68 <MX_GPIO_Init+0x29c>)
 8000b04:	f004 fd4e 	bl	80055a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000b08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b0e:	2302      	movs	r3, #2
 8000b10:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b12:	2300      	movs	r3, #0
 8000b14:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b16:	2300      	movs	r3, #0
 8000b18:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000b1a:	230a      	movs	r3, #10
 8000b1c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000b1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b22:	4619      	mov	r1, r3
 8000b24:	4810      	ldr	r0, [pc, #64]	; (8000b68 <MX_GPIO_Init+0x29c>)
 8000b26:	f004 fd3d 	bl	80055a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8000b2a:	2302      	movs	r3, #2
 8000b2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b32:	2300      	movs	r3, #0
 8000b34:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b36:	2300      	movs	r3, #0
 8000b38:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8000b3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b3e:	4619      	mov	r1, r3
 8000b40:	480c      	ldr	r0, [pc, #48]	; (8000b74 <MX_GPIO_Init+0x2a8>)
 8000b42:	f004 fd2f 	bl	80055a4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000b46:	2200      	movs	r2, #0
 8000b48:	2100      	movs	r1, #0
 8000b4a:	2028      	movs	r0, #40	; 0x28
 8000b4c:	f001 fdb7 	bl	80026be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b50:	2028      	movs	r0, #40	; 0x28
 8000b52:	f001 fdce 	bl	80026f2 <HAL_NVIC_EnableIRQ>

}
 8000b56:	bf00      	nop
 8000b58:	3738      	adds	r7, #56	; 0x38
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	58024400 	.word	0x58024400
 8000b64:	58021400 	.word	0x58021400
 8000b68:	58020000 	.word	0x58020000
 8000b6c:	58020400 	.word	0x58020400
 8000b70:	58020c00 	.word	0x58020c00
 8000b74:	58021000 	.word	0x58021000
 8000b78:	58020800 	.word	0x58020800
 8000b7c:	58021800 	.word	0x58021800

08000b80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b84:	f001 fbf6 	bl	8002374 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b88:	f000 f88e 	bl	8000ca8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b8c:	f7ff fe9e 	bl	80008cc <MX_GPIO_Init>
  MX_DMA_Init();
 8000b90:	f7ff fd3a 	bl	8000608 <MX_DMA_Init>
  MX_USB_OTG_HS_USB_Init();
 8000b94:	f001 fbbc 	bl	8002310 <MX_USB_OTG_HS_USB_Init>
  MX_ETH_Init();
 8000b98:	f7ff fd7e 	bl	8000698 <MX_ETH_Init>
  MX_SPI1_Init();
 8000b9c:	f000 f936 	bl	8000e0c <MX_SPI1_Init>
  MX_TIM8_Init();
 8000ba0:	f001 f8aa 	bl	8001cf8 <MX_TIM8_Init>
  MX_TIM2_Init();
 8000ba4:	f000 fef2 	bl	800198c <MX_TIM2_Init>
  MX_USART3_UART_Init();
 8000ba8:	f001 fafc 	bl	80021a4 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8000bac:	f000 ff48 	bl	8001a40 <MX_TIM3_Init>
  MX_SPI2_Init();
 8000bb0:	f000 f97c 	bl	8000eac <MX_SPI2_Init>
  MX_SPI3_Init();
 8000bb4:	f000 f9ca 	bl	8000f4c <MX_SPI3_Init>
  MX_SPI4_Init();
 8000bb8:	f000 fa18 	bl	8000fec <MX_SPI4_Init>
  MX_TIM4_Init();
 8000bbc:	f000 ffc2 	bl	8001b44 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000bc0:	f001 f818 	bl	8001bf4 <MX_TIM5_Init>
  //TIM3->CCER |= TIM_CCER_CC2P;
  //TIM3->ARR = 399;
  //TIM3->CCR1 = 1;

#ifndef SERIAL_NPARA
  CLEAR_BIT(TIM8->CR1, TIM_CR1_ARPE);
 8000bc4:	4b2d      	ldr	r3, [pc, #180]	; (8000c7c <main+0xfc>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a2c      	ldr	r2, [pc, #176]	; (8000c7c <main+0xfc>)
 8000bca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000bce:	6013      	str	r3, [r2, #0]
  TIM8->ARR = 53; //27
 8000bd0:	4b2a      	ldr	r3, [pc, #168]	; (8000c7c <main+0xfc>)
 8000bd2:	2235      	movs	r2, #53	; 0x35
 8000bd4:	62da      	str	r2, [r3, #44]	; 0x2c
  TIM8->CCR1 = 40; //14
 8000bd6:	4b29      	ldr	r3, [pc, #164]	; (8000c7c <main+0xfc>)
 8000bd8:	2228      	movs	r2, #40	; 0x28
 8000bda:	635a      	str	r2, [r3, #52]	; 0x34
  TIM8->RCR = 7;
 8000bdc:	4b27      	ldr	r3, [pc, #156]	; (8000c7c <main+0xfc>)
 8000bde:	2207      	movs	r2, #7
 8000be0:	631a      	str	r2, [r3, #48]	; 0x30
  SET_BIT(TIM8->CR1, TIM_CR1_ARPE);
 8000be2:	4b26      	ldr	r3, [pc, #152]	; (8000c7c <main+0xfc>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	4a25      	ldr	r2, [pc, #148]	; (8000c7c <main+0xfc>)
 8000be8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bec:	6013      	str	r3, [r2, #0]

  //SET_BIT(TIM8->CCER, TIM_CCER_CC1P);
#endif

  // Reset the ADC.
  HAL_GPIO_WritePin(ADC_RESET_GPIO_Port, ADC_RESET_Pin, GPIO_PIN_SET);
 8000bee:	2201      	movs	r2, #1
 8000bf0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bf4:	4822      	ldr	r0, [pc, #136]	; (8000c80 <main+0x100>)
 8000bf6:	f004 fe7d 	bl	80058f4 <HAL_GPIO_WritePin>
  HAL_Delay(1); // > 3 us
 8000bfa:	2001      	movs	r0, #1
 8000bfc:	f001 fc4c 	bl	8002498 <HAL_Delay>
  HAL_GPIO_WritePin(ADC_RESET_GPIO_Port, ADC_RESET_Pin, GPIO_PIN_RESET);
 8000c00:	2200      	movs	r2, #0
 8000c02:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c06:	481e      	ldr	r0, [pc, #120]	; (8000c80 <main+0x100>)
 8000c08:	f004 fe74 	bl	80058f4 <HAL_GPIO_WritePin>
  HAL_Delay(1); // > 253 us
 8000c0c:	2001      	movs	r0, #1
 8000c0e:	f001 fc43 	bl	8002498 <HAL_Delay>

#ifndef SERIAL_NPARA
  GPIOE->MODER = 0x00000000UL;
 8000c12:	4b1c      	ldr	r3, [pc, #112]	; (8000c84 <main+0x104>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	601a      	str	r2, [r3, #0]

  __HAL_TIM_ENABLE_DMA(&htim5, TIM_DMA_CC1);
 8000c18:	4b1b      	ldr	r3, [pc, #108]	; (8000c88 <main+0x108>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	68da      	ldr	r2, [r3, #12]
 8000c1e:	4b1a      	ldr	r3, [pc, #104]	; (8000c88 <main+0x108>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000c26:	60da      	str	r2, [r3, #12]
  htim5.hdma[TIM_DMA_ID_CC1]->XferCpltCallback = DMA_TIM8_callback;
 8000c28:	4b17      	ldr	r3, [pc, #92]	; (8000c88 <main+0x108>)
 8000c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c2c:	4a17      	ldr	r2, [pc, #92]	; (8000c8c <main+0x10c>)
 8000c2e:	63da      	str	r2, [r3, #60]	; 0x3c
  HAL_DMA_Start_IT(htim5.hdma[TIM_DMA_ID_CC1], (uint32_t)&GPIOE->IDR, (uint32_t)rx_buffer, 1024*8);
 8000c30:	4b15      	ldr	r3, [pc, #84]	; (8000c88 <main+0x108>)
 8000c32:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000c34:	4a16      	ldr	r2, [pc, #88]	; (8000c90 <main+0x110>)
 8000c36:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c3a:	4916      	ldr	r1, [pc, #88]	; (8000c94 <main+0x114>)
 8000c3c:	f002 f8cc 	bl	8002dd8 <HAL_DMA_Start_IT>
#endif

  // Start the SCLK timer, the nCS timer, and the CONVST timer respectively.
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8000c40:	2100      	movs	r1, #0
 8000c42:	4811      	ldr	r0, [pc, #68]	; (8000c88 <main+0x108>)
 8000c44:	f008 f8a4 	bl	8008d90 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8000c48:	2100      	movs	r1, #0
 8000c4a:	4813      	ldr	r0, [pc, #76]	; (8000c98 <main+0x118>)
 8000c4c:	f008 f8a0 	bl	8008d90 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000c50:	2100      	movs	r1, #0
 8000c52:	4812      	ldr	r0, [pc, #72]	; (8000c9c <main+0x11c>)
 8000c54:	f008 f89c 	bl	8008d90 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000c58:	2100      	movs	r1, #0
 8000c5a:	4811      	ldr	r0, [pc, #68]	; (8000ca0 <main+0x120>)
 8000c5c:	f008 f898 	bl	8008d90 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000c60:	2100      	movs	r1, #0
 8000c62:	4810      	ldr	r0, [pc, #64]	; (8000ca4 <main+0x124>)
 8000c64:	f008 f894 	bl	8008d90 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8000c68:	2101      	movs	r1, #1
 8000c6a:	4805      	ldr	r0, [pc, #20]	; (8000c80 <main+0x100>)
 8000c6c:	f004 fe5b 	bl	8005926 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8000c70:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c74:	f001 fc10 	bl	8002498 <HAL_Delay>
	  HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8000c78:	e7f6      	b.n	8000c68 <main+0xe8>
 8000c7a:	bf00      	nop
 8000c7c:	40010400 	.word	0x40010400
 8000c80:	58020400 	.word	0x58020400
 8000c84:	58021000 	.word	0x58021000
 8000c88:	240086c0 	.word	0x240086c0
 8000c8c:	08000dd1 	.word	0x08000dd1
 8000c90:	240001dc 	.word	0x240001dc
 8000c94:	58021010 	.word	0x58021010
 8000c98:	2400870c 	.word	0x2400870c
 8000c9c:	24008628 	.word	0x24008628
 8000ca0:	24008674 	.word	0x24008674
 8000ca4:	240085dc 	.word	0x240085dc

08000ca8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b09c      	sub	sp, #112	; 0x70
 8000cac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cb2:	224c      	movs	r2, #76	; 0x4c
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f00a fb56 	bl	800b368 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cbc:	1d3b      	adds	r3, r7, #4
 8000cbe:	2220      	movs	r2, #32
 8000cc0:	2100      	movs	r1, #0
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f00a fb50 	bl	800b368 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000cc8:	2002      	movs	r0, #2
 8000cca:	f004 fe6b 	bl	80059a4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000cce:	2300      	movs	r3, #0
 8000cd0:	603b      	str	r3, [r7, #0]
 8000cd2:	4b2c      	ldr	r3, [pc, #176]	; (8000d84 <SystemClock_Config+0xdc>)
 8000cd4:	699b      	ldr	r3, [r3, #24]
 8000cd6:	4a2b      	ldr	r2, [pc, #172]	; (8000d84 <SystemClock_Config+0xdc>)
 8000cd8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000cdc:	6193      	str	r3, [r2, #24]
 8000cde:	4b29      	ldr	r3, [pc, #164]	; (8000d84 <SystemClock_Config+0xdc>)
 8000ce0:	699b      	ldr	r3, [r3, #24]
 8000ce2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ce6:	603b      	str	r3, [r7, #0]
 8000ce8:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000cea:	bf00      	nop
 8000cec:	4b25      	ldr	r3, [pc, #148]	; (8000d84 <SystemClock_Config+0xdc>)
 8000cee:	699b      	ldr	r3, [r3, #24]
 8000cf0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000cf4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000cf8:	d1f8      	bne.n	8000cec <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000cfa:	2321      	movs	r3, #33	; 0x21
 8000cfc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000cfe:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000d02:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000d04:	2301      	movs	r3, #1
 8000d06:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d08:	2302      	movs	r3, #2
 8000d0a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d0c:	2302      	movs	r3, #2
 8000d0e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000d10:	2304      	movs	r3, #4
 8000d12:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 8000d14:	f240 1313 	movw	r3, #275	; 0x113
 8000d18:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d1e:	2304      	movs	r3, #4
 8000d20:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d22:	2302      	movs	r3, #2
 8000d24:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8000d26:	2304      	movs	r3, #4
 8000d28:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d36:	4618      	mov	r0, r3
 8000d38:	f004 fe6e 	bl	8005a18 <HAL_RCC_OscConfig>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000d42:	f000 f85d 	bl	8000e00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d46:	233f      	movs	r3, #63	; 0x3f
 8000d48:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d4a:	2303      	movs	r3, #3
 8000d4c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000d52:	2308      	movs	r3, #8
 8000d54:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000d56:	2340      	movs	r3, #64	; 0x40
 8000d58:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000d5a:	2340      	movs	r3, #64	; 0x40
 8000d5c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000d5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d62:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000d64:	2340      	movs	r3, #64	; 0x40
 8000d66:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000d68:	1d3b      	adds	r3, r7, #4
 8000d6a:	2103      	movs	r1, #3
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f005 fa2d 	bl	80061cc <HAL_RCC_ClockConfig>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000d78:	f000 f842 	bl	8000e00 <Error_Handler>
  }
}
 8000d7c:	bf00      	nop
 8000d7e:	3770      	adds	r7, #112	; 0x70
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	58024800 	.word	0x58024800

08000d88 <HAL_SPI_TxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 8000d88:	b480      	push	{r7}
 8000d8a:	b085      	sub	sp, #20
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
	if (hspi == &hspi1) {
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	4a05      	ldr	r2, [pc, #20]	; (8000da8 <HAL_SPI_TxCpltCallback+0x20>)
 8000d94:	4293      	cmp	r3, r2
 8000d96:	d101      	bne.n	8000d9c <HAL_SPI_TxCpltCallback+0x14>
		volatile int robert_frost = 0;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	60fb      	str	r3, [r7, #12]
	}
}
 8000d9c:	bf00      	nop
 8000d9e:	3714      	adds	r7, #20
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr
 8000da8:	240081dc 	.word	0x240081dc

08000dac <HAL_SPI_RxCpltCallback>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) {
 8000dac:	b480      	push	{r7}
 8000dae:	b085      	sub	sp, #20
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
	if (hspi == &hspi1) {
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	4a05      	ldr	r2, [pc, #20]	; (8000dcc <HAL_SPI_RxCpltCallback+0x20>)
 8000db8:	4293      	cmp	r3, r2
 8000dba:	d101      	bne.n	8000dc0 <HAL_SPI_RxCpltCallback+0x14>
		volatile int robert_frost = 0;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	60fb      	str	r3, [r7, #12]
	}
}
 8000dc0:	bf00      	nop
 8000dc2:	3714      	adds	r7, #20
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr
 8000dcc:	240081dc 	.word	0x240081dc

08000dd0 <DMA_TIM8_callback>:

void DMA_TIM8_callback(DMA_HandleTypeDef* hdma) {
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b084      	sub	sp, #16
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
	if (hdma == htim5.hdma[TIM_DMA_ID_CC1]) {
 8000dd8:	4b07      	ldr	r3, [pc, #28]	; (8000df8 <DMA_TIM8_callback+0x28>)
 8000dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ddc:	687a      	ldr	r2, [r7, #4]
 8000dde:	429a      	cmp	r2, r3
 8000de0:	d105      	bne.n	8000dee <DMA_TIM8_callback+0x1e>
		volatile int robert_frost = 0;
 8000de2:	2300      	movs	r3, #0
 8000de4:	60fb      	str	r3, [r7, #12]
		HAL_GPIO_TogglePin(SIG_0_GPIO_Port, SIG_0_Pin);
 8000de6:	2110      	movs	r1, #16
 8000de8:	4804      	ldr	r0, [pc, #16]	; (8000dfc <DMA_TIM8_callback+0x2c>)
 8000dea:	f004 fd9c 	bl	8005926 <HAL_GPIO_TogglePin>
	}
}
 8000dee:	bf00      	nop
 8000df0:	3710      	adds	r7, #16
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	240086c0 	.word	0x240086c0
 8000dfc:	58021400 	.word	0x58021400

08000e00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e04:	b672      	cpsid	i
}
 8000e06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e08:	e7fe      	b.n	8000e08 <Error_Handler+0x8>
	...

08000e0c <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi3_rx;
DMA_HandleTypeDef hdma_spi4_rx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000e10:	4b24      	ldr	r3, [pc, #144]	; (8000ea4 <MX_SPI1_Init+0x98>)
 8000e12:	4a25      	ldr	r2, [pc, #148]	; (8000ea8 <MX_SPI1_Init+0x9c>)
 8000e14:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8000e16:	4b23      	ldr	r3, [pc, #140]	; (8000ea4 <MX_SPI1_Init+0x98>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e1c:	4b21      	ldr	r3, [pc, #132]	; (8000ea4 <MX_SPI1_Init+0x98>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000e22:	4b20      	ldr	r3, [pc, #128]	; (8000ea4 <MX_SPI1_Init+0x98>)
 8000e24:	220f      	movs	r2, #15
 8000e26:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e28:	4b1e      	ldr	r3, [pc, #120]	; (8000ea4 <MX_SPI1_Init+0x98>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e2e:	4b1d      	ldr	r3, [pc, #116]	; (8000ea4 <MX_SPI1_Init+0x98>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8000e34:	4b1b      	ldr	r3, [pc, #108]	; (8000ea4 <MX_SPI1_Init+0x98>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e3a:	4b1a      	ldr	r3, [pc, #104]	; (8000ea4 <MX_SPI1_Init+0x98>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e40:	4b18      	ldr	r3, [pc, #96]	; (8000ea4 <MX_SPI1_Init+0x98>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e46:	4b17      	ldr	r3, [pc, #92]	; (8000ea4 <MX_SPI1_Init+0x98>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000e4c:	4b15      	ldr	r3, [pc, #84]	; (8000ea4 <MX_SPI1_Init+0x98>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000e52:	4b14      	ldr	r3, [pc, #80]	; (8000ea4 <MX_SPI1_Init+0x98>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000e58:	4b12      	ldr	r3, [pc, #72]	; (8000ea4 <MX_SPI1_Init+0x98>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000e5e:	4b11      	ldr	r3, [pc, #68]	; (8000ea4 <MX_SPI1_Init+0x98>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000e64:	4b0f      	ldr	r3, [pc, #60]	; (8000ea4 <MX_SPI1_Init+0x98>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000e6a:	4b0e      	ldr	r3, [pc, #56]	; (8000ea4 <MX_SPI1_Init+0x98>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000e70:	4b0c      	ldr	r3, [pc, #48]	; (8000ea4 <MX_SPI1_Init+0x98>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000e76:	4b0b      	ldr	r3, [pc, #44]	; (8000ea4 <MX_SPI1_Init+0x98>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000e7c:	4b09      	ldr	r3, [pc, #36]	; (8000ea4 <MX_SPI1_Init+0x98>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000e82:	4b08      	ldr	r3, [pc, #32]	; (8000ea4 <MX_SPI1_Init+0x98>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000e88:	4b06      	ldr	r3, [pc, #24]	; (8000ea4 <MX_SPI1_Init+0x98>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000e8e:	4805      	ldr	r0, [pc, #20]	; (8000ea4 <MX_SPI1_Init+0x98>)
 8000e90:	f007 faea 	bl	8008468 <HAL_SPI_Init>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <MX_SPI1_Init+0x92>
  {
    Error_Handler();
 8000e9a:	f7ff ffb1 	bl	8000e00 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000e9e:	bf00      	nop
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	240081dc 	.word	0x240081dc
 8000ea8:	40013000 	.word	0x40013000

08000eac <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000eb0:	4b24      	ldr	r3, [pc, #144]	; (8000f44 <MX_SPI2_Init+0x98>)
 8000eb2:	4a25      	ldr	r2, [pc, #148]	; (8000f48 <MX_SPI2_Init+0x9c>)
 8000eb4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 8000eb6:	4b23      	ldr	r3, [pc, #140]	; (8000f44 <MX_SPI2_Init+0x98>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8000ebc:	4b21      	ldr	r3, [pc, #132]	; (8000f44 <MX_SPI2_Init+0x98>)
 8000ebe:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000ec2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000ec4:	4b1f      	ldr	r3, [pc, #124]	; (8000f44 <MX_SPI2_Init+0x98>)
 8000ec6:	2203      	movs	r2, #3
 8000ec8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000eca:	4b1e      	ldr	r3, [pc, #120]	; (8000f44 <MX_SPI2_Init+0x98>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ed0:	4b1c      	ldr	r3, [pc, #112]	; (8000f44 <MX_SPI2_Init+0x98>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 8000ed6:	4b1b      	ldr	r3, [pc, #108]	; (8000f44 <MX_SPI2_Init+0x98>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000edc:	4b19      	ldr	r3, [pc, #100]	; (8000f44 <MX_SPI2_Init+0x98>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ee2:	4b18      	ldr	r3, [pc, #96]	; (8000f44 <MX_SPI2_Init+0x98>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ee8:	4b16      	ldr	r3, [pc, #88]	; (8000f44 <MX_SPI2_Init+0x98>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8000eee:	4b15      	ldr	r3, [pc, #84]	; (8000f44 <MX_SPI2_Init+0x98>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000ef4:	4b13      	ldr	r3, [pc, #76]	; (8000f44 <MX_SPI2_Init+0x98>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000efa:	4b12      	ldr	r3, [pc, #72]	; (8000f44 <MX_SPI2_Init+0x98>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000f00:	4b10      	ldr	r3, [pc, #64]	; (8000f44 <MX_SPI2_Init+0x98>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000f06:	4b0f      	ldr	r3, [pc, #60]	; (8000f44 <MX_SPI2_Init+0x98>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000f0c:	4b0d      	ldr	r3, [pc, #52]	; (8000f44 <MX_SPI2_Init+0x98>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000f12:	4b0c      	ldr	r3, [pc, #48]	; (8000f44 <MX_SPI2_Init+0x98>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000f18:	4b0a      	ldr	r3, [pc, #40]	; (8000f44 <MX_SPI2_Init+0x98>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000f1e:	4b09      	ldr	r3, [pc, #36]	; (8000f44 <MX_SPI2_Init+0x98>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000f24:	4b07      	ldr	r3, [pc, #28]	; (8000f44 <MX_SPI2_Init+0x98>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000f2a:	4b06      	ldr	r3, [pc, #24]	; (8000f44 <MX_SPI2_Init+0x98>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000f30:	4804      	ldr	r0, [pc, #16]	; (8000f44 <MX_SPI2_Init+0x98>)
 8000f32:	f007 fa99 	bl	8008468 <HAL_SPI_Init>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d001      	beq.n	8000f40 <MX_SPI2_Init+0x94>
  {
    Error_Handler();
 8000f3c:	f7ff ff60 	bl	8000e00 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000f40:	bf00      	nop
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	24008264 	.word	0x24008264
 8000f48:	40003800 	.word	0x40003800

08000f4c <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8000f50:	4b24      	ldr	r3, [pc, #144]	; (8000fe4 <MX_SPI3_Init+0x98>)
 8000f52:	4a25      	ldr	r2, [pc, #148]	; (8000fe8 <MX_SPI3_Init+0x9c>)
 8000f54:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_SLAVE;
 8000f56:	4b23      	ldr	r3, [pc, #140]	; (8000fe4 <MX_SPI3_Init+0x98>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8000f5c:	4b21      	ldr	r3, [pc, #132]	; (8000fe4 <MX_SPI3_Init+0x98>)
 8000f5e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000f62:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000f64:	4b1f      	ldr	r3, [pc, #124]	; (8000fe4 <MX_SPI3_Init+0x98>)
 8000f66:	2203      	movs	r2, #3
 8000f68:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f6a:	4b1e      	ldr	r3, [pc, #120]	; (8000fe4 <MX_SPI3_Init+0x98>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f70:	4b1c      	ldr	r3, [pc, #112]	; (8000fe4 <MX_SPI3_Init+0x98>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_INPUT;
 8000f76:	4b1b      	ldr	r3, [pc, #108]	; (8000fe4 <MX_SPI3_Init+0x98>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	619a      	str	r2, [r3, #24]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f7c:	4b19      	ldr	r3, [pc, #100]	; (8000fe4 <MX_SPI3_Init+0x98>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f82:	4b18      	ldr	r3, [pc, #96]	; (8000fe4 <MX_SPI3_Init+0x98>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f88:	4b16      	ldr	r3, [pc, #88]	; (8000fe4 <MX_SPI3_Init+0x98>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8000f8e:	4b15      	ldr	r3, [pc, #84]	; (8000fe4 <MX_SPI3_Init+0x98>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000f94:	4b13      	ldr	r3, [pc, #76]	; (8000fe4 <MX_SPI3_Init+0x98>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000f9a:	4b12      	ldr	r3, [pc, #72]	; (8000fe4 <MX_SPI3_Init+0x98>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000fa0:	4b10      	ldr	r3, [pc, #64]	; (8000fe4 <MX_SPI3_Init+0x98>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000fa6:	4b0f      	ldr	r3, [pc, #60]	; (8000fe4 <MX_SPI3_Init+0x98>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000fac:	4b0d      	ldr	r3, [pc, #52]	; (8000fe4 <MX_SPI3_Init+0x98>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000fb2:	4b0c      	ldr	r3, [pc, #48]	; (8000fe4 <MX_SPI3_Init+0x98>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000fb8:	4b0a      	ldr	r3, [pc, #40]	; (8000fe4 <MX_SPI3_Init+0x98>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000fbe:	4b09      	ldr	r3, [pc, #36]	; (8000fe4 <MX_SPI3_Init+0x98>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000fc4:	4b07      	ldr	r3, [pc, #28]	; (8000fe4 <MX_SPI3_Init+0x98>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000fca:	4b06      	ldr	r3, [pc, #24]	; (8000fe4 <MX_SPI3_Init+0x98>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000fd0:	4804      	ldr	r0, [pc, #16]	; (8000fe4 <MX_SPI3_Init+0x98>)
 8000fd2:	f007 fa49 	bl	8008468 <HAL_SPI_Init>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <MX_SPI3_Init+0x94>
  {
    Error_Handler();
 8000fdc:	f7ff ff10 	bl	8000e00 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000fe0:	bf00      	nop
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	240082ec 	.word	0x240082ec
 8000fe8:	40003c00 	.word	0x40003c00

08000fec <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8000ff0:	4b24      	ldr	r3, [pc, #144]	; (8001084 <MX_SPI4_Init+0x98>)
 8000ff2:	4a25      	ldr	r2, [pc, #148]	; (8001088 <MX_SPI4_Init+0x9c>)
 8000ff4:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_SLAVE;
 8000ff6:	4b23      	ldr	r3, [pc, #140]	; (8001084 <MX_SPI4_Init+0x98>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8000ffc:	4b21      	ldr	r3, [pc, #132]	; (8001084 <MX_SPI4_Init+0x98>)
 8000ffe:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001002:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 8001004:	4b1f      	ldr	r3, [pc, #124]	; (8001084 <MX_SPI4_Init+0x98>)
 8001006:	2203      	movs	r2, #3
 8001008:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 800100a:	4b1e      	ldr	r3, [pc, #120]	; (8001084 <MX_SPI4_Init+0x98>)
 800100c:	2200      	movs	r2, #0
 800100e:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001010:	4b1c      	ldr	r3, [pc, #112]	; (8001084 <MX_SPI4_Init+0x98>)
 8001012:	2200      	movs	r2, #0
 8001014:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_HARD_INPUT;
 8001016:	4b1b      	ldr	r3, [pc, #108]	; (8001084 <MX_SPI4_Init+0x98>)
 8001018:	2200      	movs	r2, #0
 800101a:	619a      	str	r2, [r3, #24]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800101c:	4b19      	ldr	r3, [pc, #100]	; (8001084 <MX_SPI4_Init+0x98>)
 800101e:	2200      	movs	r2, #0
 8001020:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001022:	4b18      	ldr	r3, [pc, #96]	; (8001084 <MX_SPI4_Init+0x98>)
 8001024:	2200      	movs	r2, #0
 8001026:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001028:	4b16      	ldr	r3, [pc, #88]	; (8001084 <MX_SPI4_Init+0x98>)
 800102a:	2200      	movs	r2, #0
 800102c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 800102e:	4b15      	ldr	r3, [pc, #84]	; (8001084 <MX_SPI4_Init+0x98>)
 8001030:	2200      	movs	r2, #0
 8001032:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001034:	4b13      	ldr	r3, [pc, #76]	; (8001084 <MX_SPI4_Init+0x98>)
 8001036:	2200      	movs	r2, #0
 8001038:	635a      	str	r2, [r3, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800103a:	4b12      	ldr	r3, [pc, #72]	; (8001084 <MX_SPI4_Init+0x98>)
 800103c:	2200      	movs	r2, #0
 800103e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001040:	4b10      	ldr	r3, [pc, #64]	; (8001084 <MX_SPI4_Init+0x98>)
 8001042:	2200      	movs	r2, #0
 8001044:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001046:	4b0f      	ldr	r3, [pc, #60]	; (8001084 <MX_SPI4_Init+0x98>)
 8001048:	2200      	movs	r2, #0
 800104a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800104c:	4b0d      	ldr	r3, [pc, #52]	; (8001084 <MX_SPI4_Init+0x98>)
 800104e:	2200      	movs	r2, #0
 8001050:	645a      	str	r2, [r3, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001052:	4b0c      	ldr	r3, [pc, #48]	; (8001084 <MX_SPI4_Init+0x98>)
 8001054:	2200      	movs	r2, #0
 8001056:	649a      	str	r2, [r3, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001058:	4b0a      	ldr	r3, [pc, #40]	; (8001084 <MX_SPI4_Init+0x98>)
 800105a:	2200      	movs	r2, #0
 800105c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800105e:	4b09      	ldr	r3, [pc, #36]	; (8001084 <MX_SPI4_Init+0x98>)
 8001060:	2200      	movs	r2, #0
 8001062:	651a      	str	r2, [r3, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001064:	4b07      	ldr	r3, [pc, #28]	; (8001084 <MX_SPI4_Init+0x98>)
 8001066:	2200      	movs	r2, #0
 8001068:	655a      	str	r2, [r3, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800106a:	4b06      	ldr	r3, [pc, #24]	; (8001084 <MX_SPI4_Init+0x98>)
 800106c:	2200      	movs	r2, #0
 800106e:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001070:	4804      	ldr	r0, [pc, #16]	; (8001084 <MX_SPI4_Init+0x98>)
 8001072:	f007 f9f9 	bl	8008468 <HAL_SPI_Init>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <MX_SPI4_Init+0x94>
  {
    Error_Handler();
 800107c:	f7ff fec0 	bl	8000e00 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001080:	bf00      	nop
 8001082:	bd80      	pop	{r7, pc}
 8001084:	24008374 	.word	0x24008374
 8001088:	40013400 	.word	0x40013400

0800108c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b0c4      	sub	sp, #272	; 0x110
 8001090:	af00      	add	r7, sp, #0
 8001092:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001096:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800109a:	6018      	str	r0, [r3, #0]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800109c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]
 80010a4:	605a      	str	r2, [r3, #4]
 80010a6:	609a      	str	r2, [r3, #8]
 80010a8:	60da      	str	r2, [r3, #12]
 80010aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010ac:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80010b0:	22b8      	movs	r2, #184	; 0xb8
 80010b2:	2100      	movs	r1, #0
 80010b4:	4618      	mov	r0, r3
 80010b6:	f00a f957 	bl	800b368 <memset>
  if(spiHandle->Instance==SPI1)
 80010ba:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80010be:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4ac6      	ldr	r2, [pc, #792]	; (80013e0 <HAL_SPI_MspInit+0x354>)
 80010c8:	4293      	cmp	r3, r2
 80010ca:	f040 80d1 	bne.w	8001270 <HAL_SPI_MspInit+0x1e4>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80010ce:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80010d2:	f04f 0300 	mov.w	r3, #0
 80010d6:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80010da:	2300      	movs	r3, #0
 80010dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010e0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80010e4:	4618      	mov	r0, r3
 80010e6:	f005 fbfd 	bl	80068e4 <HAL_RCCEx_PeriphCLKConfig>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <HAL_SPI_MspInit+0x68>
    {
      Error_Handler();
 80010f0:	f7ff fe86 	bl	8000e00 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80010f4:	4bbb      	ldr	r3, [pc, #748]	; (80013e4 <HAL_SPI_MspInit+0x358>)
 80010f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80010fa:	4aba      	ldr	r2, [pc, #744]	; (80013e4 <HAL_SPI_MspInit+0x358>)
 80010fc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001100:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001104:	4bb7      	ldr	r3, [pc, #732]	; (80013e4 <HAL_SPI_MspInit+0x358>)
 8001106:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800110a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800110e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001110:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001112:	4bb4      	ldr	r3, [pc, #720]	; (80013e4 <HAL_SPI_MspInit+0x358>)
 8001114:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001118:	4ab2      	ldr	r2, [pc, #712]	; (80013e4 <HAL_SPI_MspInit+0x358>)
 800111a:	f043 0301 	orr.w	r3, r3, #1
 800111e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001122:	4bb0      	ldr	r3, [pc, #704]	; (80013e4 <HAL_SPI_MspInit+0x358>)
 8001124:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001128:	f003 0301 	and.w	r3, r3, #1
 800112c:	63bb      	str	r3, [r7, #56]	; 0x38
 800112e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001130:	4bac      	ldr	r3, [pc, #688]	; (80013e4 <HAL_SPI_MspInit+0x358>)
 8001132:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001136:	4aab      	ldr	r2, [pc, #684]	; (80013e4 <HAL_SPI_MspInit+0x358>)
 8001138:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800113c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001140:	4ba8      	ldr	r3, [pc, #672]	; (80013e4 <HAL_SPI_MspInit+0x358>)
 8001142:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001146:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800114a:	637b      	str	r3, [r7, #52]	; 0x34
 800114c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800114e:	4ba5      	ldr	r3, [pc, #660]	; (80013e4 <HAL_SPI_MspInit+0x358>)
 8001150:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001154:	4aa3      	ldr	r2, [pc, #652]	; (80013e4 <HAL_SPI_MspInit+0x358>)
 8001156:	f043 0302 	orr.w	r3, r3, #2
 800115a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800115e:	4ba1      	ldr	r3, [pc, #644]	; (80013e4 <HAL_SPI_MspInit+0x358>)
 8001160:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001164:	f003 0302 	and.w	r3, r3, #2
 8001168:	633b      	str	r3, [r7, #48]	; 0x30
 800116a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    PA5     ------> SPI1_SCK
    PG9     ------> SPI1_MISO
    PG10     ------> SPI1_NSS
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800116c:	2320      	movs	r3, #32
 800116e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001172:	2302      	movs	r3, #2
 8001174:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001178:	2300      	movs	r3, #0
 800117a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117e:	2300      	movs	r3, #0
 8001180:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001184:	2305      	movs	r3, #5
 8001186:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800118a:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800118e:	4619      	mov	r1, r3
 8001190:	4895      	ldr	r0, [pc, #596]	; (80013e8 <HAL_SPI_MspInit+0x35c>)
 8001192:	f004 fa07 	bl	80055a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001196:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800119a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800119e:	2302      	movs	r3, #2
 80011a0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a4:	2300      	movs	r3, #0
 80011a6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011aa:	2300      	movs	r3, #0
 80011ac:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80011b0:	2305      	movs	r3, #5
 80011b2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011b6:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80011ba:	4619      	mov	r1, r3
 80011bc:	488b      	ldr	r0, [pc, #556]	; (80013ec <HAL_SPI_MspInit+0x360>)
 80011be:	f004 f9f1 	bl	80055a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80011c2:	2320      	movs	r3, #32
 80011c4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c8:	2302      	movs	r3, #2
 80011ca:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ce:	2300      	movs	r3, #0
 80011d0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d4:	2300      	movs	r3, #0
 80011d6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80011da:	2305      	movs	r3, #5
 80011dc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011e0:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80011e4:	4619      	mov	r1, r3
 80011e6:	4882      	ldr	r0, [pc, #520]	; (80013f0 <HAL_SPI_MspInit+0x364>)
 80011e8:	f004 f9dc 	bl	80055a4 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream0;
 80011ec:	4b81      	ldr	r3, [pc, #516]	; (80013f4 <HAL_SPI_MspInit+0x368>)
 80011ee:	4a82      	ldr	r2, [pc, #520]	; (80013f8 <HAL_SPI_MspInit+0x36c>)
 80011f0:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 80011f2:	4b80      	ldr	r3, [pc, #512]	; (80013f4 <HAL_SPI_MspInit+0x368>)
 80011f4:	2225      	movs	r2, #37	; 0x25
 80011f6:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011f8:	4b7e      	ldr	r3, [pc, #504]	; (80013f4 <HAL_SPI_MspInit+0x368>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011fe:	4b7d      	ldr	r3, [pc, #500]	; (80013f4 <HAL_SPI_MspInit+0x368>)
 8001200:	2200      	movs	r2, #0
 8001202:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001204:	4b7b      	ldr	r3, [pc, #492]	; (80013f4 <HAL_SPI_MspInit+0x368>)
 8001206:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800120a:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800120c:	4b79      	ldr	r3, [pc, #484]	; (80013f4 <HAL_SPI_MspInit+0x368>)
 800120e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001212:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001214:	4b77      	ldr	r3, [pc, #476]	; (80013f4 <HAL_SPI_MspInit+0x368>)
 8001216:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800121a:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 800121c:	4b75      	ldr	r3, [pc, #468]	; (80013f4 <HAL_SPI_MspInit+0x368>)
 800121e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001222:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001224:	4b73      	ldr	r3, [pc, #460]	; (80013f4 <HAL_SPI_MspInit+0x368>)
 8001226:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800122a:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800122c:	4b71      	ldr	r3, [pc, #452]	; (80013f4 <HAL_SPI_MspInit+0x368>)
 800122e:	2200      	movs	r2, #0
 8001230:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001232:	4870      	ldr	r0, [pc, #448]	; (80013f4 <HAL_SPI_MspInit+0x368>)
 8001234:	f001 fa78 	bl	8002728 <HAL_DMA_Init>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <HAL_SPI_MspInit+0x1b6>
    {
      Error_Handler();
 800123e:	f7ff fddf 	bl	8000e00 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8001242:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001246:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a69      	ldr	r2, [pc, #420]	; (80013f4 <HAL_SPI_MspInit+0x368>)
 800124e:	67da      	str	r2, [r3, #124]	; 0x7c
 8001250:	4a68      	ldr	r2, [pc, #416]	; (80013f4 <HAL_SPI_MspInit+0x368>)
 8001252:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001256:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800125e:	2200      	movs	r2, #0
 8001260:	2100      	movs	r1, #0
 8001262:	2023      	movs	r0, #35	; 0x23
 8001264:	f001 fa2b 	bl	80026be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001268:	2023      	movs	r0, #35	; 0x23
 800126a:	f001 fa42 	bl	80026f2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 800126e:	e249      	b.n	8001704 <HAL_SPI_MspInit+0x678>
  else if(spiHandle->Instance==SPI2)
 8001270:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001274:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a5f      	ldr	r2, [pc, #380]	; (80013fc <HAL_SPI_MspInit+0x370>)
 800127e:	4293      	cmp	r3, r2
 8001280:	f040 80c4 	bne.w	800140c <HAL_SPI_MspInit+0x380>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8001284:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001288:	f04f 0300 	mov.w	r3, #0
 800128c:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001290:	2300      	movs	r3, #0
 8001292:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001296:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800129a:	4618      	mov	r0, r3
 800129c:	f005 fb22 	bl	80068e4 <HAL_RCCEx_PeriphCLKConfig>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <HAL_SPI_MspInit+0x21e>
      Error_Handler();
 80012a6:	f7ff fdab 	bl	8000e00 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80012aa:	4b4e      	ldr	r3, [pc, #312]	; (80013e4 <HAL_SPI_MspInit+0x358>)
 80012ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80012b0:	4a4c      	ldr	r2, [pc, #304]	; (80013e4 <HAL_SPI_MspInit+0x358>)
 80012b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012b6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80012ba:	4b4a      	ldr	r3, [pc, #296]	; (80013e4 <HAL_SPI_MspInit+0x358>)
 80012bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80012c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80012c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012c8:	4b46      	ldr	r3, [pc, #280]	; (80013e4 <HAL_SPI_MspInit+0x358>)
 80012ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012ce:	4a45      	ldr	r2, [pc, #276]	; (80013e4 <HAL_SPI_MspInit+0x358>)
 80012d0:	f043 0304 	orr.w	r3, r3, #4
 80012d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012d8:	4b42      	ldr	r3, [pc, #264]	; (80013e4 <HAL_SPI_MspInit+0x358>)
 80012da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012de:	f003 0304 	and.w	r3, r3, #4
 80012e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80012e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012e6:	4b3f      	ldr	r3, [pc, #252]	; (80013e4 <HAL_SPI_MspInit+0x358>)
 80012e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012ec:	4a3d      	ldr	r2, [pc, #244]	; (80013e4 <HAL_SPI_MspInit+0x358>)
 80012ee:	f043 0302 	orr.w	r3, r3, #2
 80012f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012f6:	4b3b      	ldr	r3, [pc, #236]	; (80013e4 <HAL_SPI_MspInit+0x358>)
 80012f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012fc:	f003 0302 	and.w	r3, r3, #2
 8001300:	627b      	str	r3, [r7, #36]	; 0x24
 8001302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001304:	2308      	movs	r3, #8
 8001306:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800130a:	2302      	movs	r3, #2
 800130c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001310:	2300      	movs	r3, #0
 8001312:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001316:	2300      	movs	r3, #0
 8001318:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800131c:	2305      	movs	r3, #5
 800131e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001322:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001326:	4619      	mov	r1, r3
 8001328:	4835      	ldr	r0, [pc, #212]	; (8001400 <HAL_SPI_MspInit+0x374>)
 800132a:	f004 f93b 	bl	80055a4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 800132e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001332:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001336:	2302      	movs	r3, #2
 8001338:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133c:	2300      	movs	r3, #0
 800133e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001342:	2300      	movs	r3, #0
 8001344:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001348:	2305      	movs	r3, #5
 800134a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800134e:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001352:	4619      	mov	r1, r3
 8001354:	4826      	ldr	r0, [pc, #152]	; (80013f0 <HAL_SPI_MspInit+0x364>)
 8001356:	f004 f925 	bl	80055a4 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream2;
 800135a:	4b2a      	ldr	r3, [pc, #168]	; (8001404 <HAL_SPI_MspInit+0x378>)
 800135c:	4a2a      	ldr	r2, [pc, #168]	; (8001408 <HAL_SPI_MspInit+0x37c>)
 800135e:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 8001360:	4b28      	ldr	r3, [pc, #160]	; (8001404 <HAL_SPI_MspInit+0x378>)
 8001362:	2227      	movs	r2, #39	; 0x27
 8001364:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001366:	4b27      	ldr	r3, [pc, #156]	; (8001404 <HAL_SPI_MspInit+0x378>)
 8001368:	2200      	movs	r2, #0
 800136a:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800136c:	4b25      	ldr	r3, [pc, #148]	; (8001404 <HAL_SPI_MspInit+0x378>)
 800136e:	2200      	movs	r2, #0
 8001370:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001372:	4b24      	ldr	r3, [pc, #144]	; (8001404 <HAL_SPI_MspInit+0x378>)
 8001374:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001378:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800137a:	4b22      	ldr	r3, [pc, #136]	; (8001404 <HAL_SPI_MspInit+0x378>)
 800137c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001380:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001382:	4b20      	ldr	r3, [pc, #128]	; (8001404 <HAL_SPI_MspInit+0x378>)
 8001384:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001388:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 800138a:	4b1e      	ldr	r3, [pc, #120]	; (8001404 <HAL_SPI_MspInit+0x378>)
 800138c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001390:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001392:	4b1c      	ldr	r3, [pc, #112]	; (8001404 <HAL_SPI_MspInit+0x378>)
 8001394:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001398:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800139a:	4b1a      	ldr	r3, [pc, #104]	; (8001404 <HAL_SPI_MspInit+0x378>)
 800139c:	2200      	movs	r2, #0
 800139e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80013a0:	4818      	ldr	r0, [pc, #96]	; (8001404 <HAL_SPI_MspInit+0x378>)
 80013a2:	f001 f9c1 	bl	8002728 <HAL_DMA_Init>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <HAL_SPI_MspInit+0x324>
      Error_Handler();
 80013ac:	f7ff fd28 	bl	8000e00 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 80013b0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80013b4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a12      	ldr	r2, [pc, #72]	; (8001404 <HAL_SPI_MspInit+0x378>)
 80013bc:	67da      	str	r2, [r3, #124]	; 0x7c
 80013be:	4a11      	ldr	r2, [pc, #68]	; (8001404 <HAL_SPI_MspInit+0x378>)
 80013c0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80013c4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80013cc:	2200      	movs	r2, #0
 80013ce:	2100      	movs	r1, #0
 80013d0:	2024      	movs	r0, #36	; 0x24
 80013d2:	f001 f974 	bl	80026be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80013d6:	2024      	movs	r0, #36	; 0x24
 80013d8:	f001 f98b 	bl	80026f2 <HAL_NVIC_EnableIRQ>
}
 80013dc:	e192      	b.n	8001704 <HAL_SPI_MspInit+0x678>
 80013de:	bf00      	nop
 80013e0:	40013000 	.word	0x40013000
 80013e4:	58024400 	.word	0x58024400
 80013e8:	58020000 	.word	0x58020000
 80013ec:	58021800 	.word	0x58021800
 80013f0:	58020400 	.word	0x58020400
 80013f4:	240083fc 	.word	0x240083fc
 80013f8:	40020010 	.word	0x40020010
 80013fc:	40003800 	.word	0x40003800
 8001400:	58020800 	.word	0x58020800
 8001404:	24008474 	.word	0x24008474
 8001408:	40020040 	.word	0x40020040
  else if(spiHandle->Instance==SPI3)
 800140c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001410:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4abd      	ldr	r2, [pc, #756]	; (8001710 <HAL_SPI_MspInit+0x684>)
 800141a:	4293      	cmp	r3, r2
 800141c:	f040 80d1 	bne.w	80015c2 <HAL_SPI_MspInit+0x536>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8001420:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001424:	f04f 0300 	mov.w	r3, #0
 8001428:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800142c:	2300      	movs	r3, #0
 800142e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001432:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001436:	4618      	mov	r0, r3
 8001438:	f005 fa54 	bl	80068e4 <HAL_RCCEx_PeriphCLKConfig>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <HAL_SPI_MspInit+0x3ba>
      Error_Handler();
 8001442:	f7ff fcdd 	bl	8000e00 <Error_Handler>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001446:	4bb3      	ldr	r3, [pc, #716]	; (8001714 <HAL_SPI_MspInit+0x688>)
 8001448:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800144c:	4ab1      	ldr	r2, [pc, #708]	; (8001714 <HAL_SPI_MspInit+0x688>)
 800144e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001452:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001456:	4baf      	ldr	r3, [pc, #700]	; (8001714 <HAL_SPI_MspInit+0x688>)
 8001458:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800145c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001460:	623b      	str	r3, [r7, #32]
 8001462:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001464:	4bab      	ldr	r3, [pc, #684]	; (8001714 <HAL_SPI_MspInit+0x688>)
 8001466:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800146a:	4aaa      	ldr	r2, [pc, #680]	; (8001714 <HAL_SPI_MspInit+0x688>)
 800146c:	f043 0301 	orr.w	r3, r3, #1
 8001470:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001474:	4ba7      	ldr	r3, [pc, #668]	; (8001714 <HAL_SPI_MspInit+0x688>)
 8001476:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800147a:	f003 0301 	and.w	r3, r3, #1
 800147e:	61fb      	str	r3, [r7, #28]
 8001480:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001482:	4ba4      	ldr	r3, [pc, #656]	; (8001714 <HAL_SPI_MspInit+0x688>)
 8001484:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001488:	4aa2      	ldr	r2, [pc, #648]	; (8001714 <HAL_SPI_MspInit+0x688>)
 800148a:	f043 0302 	orr.w	r3, r3, #2
 800148e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001492:	4ba0      	ldr	r3, [pc, #640]	; (8001714 <HAL_SPI_MspInit+0x688>)
 8001494:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001498:	f003 0302 	and.w	r3, r3, #2
 800149c:	61bb      	str	r3, [r7, #24]
 800149e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014a0:	4b9c      	ldr	r3, [pc, #624]	; (8001714 <HAL_SPI_MspInit+0x688>)
 80014a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014a6:	4a9b      	ldr	r2, [pc, #620]	; (8001714 <HAL_SPI_MspInit+0x688>)
 80014a8:	f043 0304 	orr.w	r3, r3, #4
 80014ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014b0:	4b98      	ldr	r3, [pc, #608]	; (8001714 <HAL_SPI_MspInit+0x688>)
 80014b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014b6:	f003 0304 	and.w	r3, r3, #4
 80014ba:	617b      	str	r3, [r7, #20]
 80014bc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80014be:	2310      	movs	r3, #16
 80014c0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c4:	2302      	movs	r3, #2
 80014c6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ca:	2300      	movs	r3, #0
 80014cc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d0:	2300      	movs	r3, #0
 80014d2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80014d6:	2306      	movs	r3, #6
 80014d8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014dc:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80014e0:	4619      	mov	r1, r3
 80014e2:	488d      	ldr	r0, [pc, #564]	; (8001718 <HAL_SPI_MspInit+0x68c>)
 80014e4:	f004 f85e 	bl	80055a4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80014e8:	2304      	movs	r3, #4
 80014ea:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ee:	2302      	movs	r3, #2
 80014f0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f4:	2300      	movs	r3, #0
 80014f6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014fa:	2300      	movs	r3, #0
 80014fc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8001500:	2307      	movs	r3, #7
 8001502:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001506:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800150a:	4619      	mov	r1, r3
 800150c:	4883      	ldr	r0, [pc, #524]	; (800171c <HAL_SPI_MspInit+0x690>)
 800150e:	f004 f849 	bl	80055a4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001512:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001516:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800151a:	2302      	movs	r3, #2
 800151c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001520:	2300      	movs	r3, #0
 8001522:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001526:	2300      	movs	r3, #0
 8001528:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800152c:	2306      	movs	r3, #6
 800152e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001532:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001536:	4619      	mov	r1, r3
 8001538:	4879      	ldr	r0, [pc, #484]	; (8001720 <HAL_SPI_MspInit+0x694>)
 800153a:	f004 f833 	bl	80055a4 <HAL_GPIO_Init>
    hdma_spi3_rx.Instance = DMA1_Stream3;
 800153e:	4b79      	ldr	r3, [pc, #484]	; (8001724 <HAL_SPI_MspInit+0x698>)
 8001540:	4a79      	ldr	r2, [pc, #484]	; (8001728 <HAL_SPI_MspInit+0x69c>)
 8001542:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Request = DMA_REQUEST_SPI3_RX;
 8001544:	4b77      	ldr	r3, [pc, #476]	; (8001724 <HAL_SPI_MspInit+0x698>)
 8001546:	223d      	movs	r2, #61	; 0x3d
 8001548:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800154a:	4b76      	ldr	r3, [pc, #472]	; (8001724 <HAL_SPI_MspInit+0x698>)
 800154c:	2200      	movs	r2, #0
 800154e:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001550:	4b74      	ldr	r3, [pc, #464]	; (8001724 <HAL_SPI_MspInit+0x698>)
 8001552:	2200      	movs	r2, #0
 8001554:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001556:	4b73      	ldr	r3, [pc, #460]	; (8001724 <HAL_SPI_MspInit+0x698>)
 8001558:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800155c:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800155e:	4b71      	ldr	r3, [pc, #452]	; (8001724 <HAL_SPI_MspInit+0x698>)
 8001560:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001564:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001566:	4b6f      	ldr	r3, [pc, #444]	; (8001724 <HAL_SPI_MspInit+0x698>)
 8001568:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800156c:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Mode = DMA_CIRCULAR;
 800156e:	4b6d      	ldr	r3, [pc, #436]	; (8001724 <HAL_SPI_MspInit+0x698>)
 8001570:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001574:	61da      	str	r2, [r3, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001576:	4b6b      	ldr	r3, [pc, #428]	; (8001724 <HAL_SPI_MspInit+0x698>)
 8001578:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800157c:	621a      	str	r2, [r3, #32]
    hdma_spi3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800157e:	4b69      	ldr	r3, [pc, #420]	; (8001724 <HAL_SPI_MspInit+0x698>)
 8001580:	2200      	movs	r2, #0
 8001582:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 8001584:	4867      	ldr	r0, [pc, #412]	; (8001724 <HAL_SPI_MspInit+0x698>)
 8001586:	f001 f8cf 	bl	8002728 <HAL_DMA_Init>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <HAL_SPI_MspInit+0x508>
      Error_Handler();
 8001590:	f7ff fc36 	bl	8000e00 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi3_rx);
 8001594:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001598:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a61      	ldr	r2, [pc, #388]	; (8001724 <HAL_SPI_MspInit+0x698>)
 80015a0:	67da      	str	r2, [r3, #124]	; 0x7c
 80015a2:	4a60      	ldr	r2, [pc, #384]	; (8001724 <HAL_SPI_MspInit+0x698>)
 80015a4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80015a8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 80015b0:	2200      	movs	r2, #0
 80015b2:	2100      	movs	r1, #0
 80015b4:	2033      	movs	r0, #51	; 0x33
 80015b6:	f001 f882 	bl	80026be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 80015ba:	2033      	movs	r0, #51	; 0x33
 80015bc:	f001 f899 	bl	80026f2 <HAL_NVIC_EnableIRQ>
}
 80015c0:	e0a0      	b.n	8001704 <HAL_SPI_MspInit+0x678>
  else if(spiHandle->Instance==SPI4)
 80015c2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80015c6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a57      	ldr	r2, [pc, #348]	; (800172c <HAL_SPI_MspInit+0x6a0>)
 80015d0:	4293      	cmp	r3, r2
 80015d2:	f040 8097 	bne.w	8001704 <HAL_SPI_MspInit+0x678>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 80015d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015da:	f04f 0300 	mov.w	r3, #0
 80015de:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 80015e2:	2300      	movs	r3, #0
 80015e4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015e8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80015ec:	4618      	mov	r0, r3
 80015ee:	f005 f979 	bl	80068e4 <HAL_RCCEx_PeriphCLKConfig>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d001      	beq.n	80015fc <HAL_SPI_MspInit+0x570>
      Error_Handler();
 80015f8:	f7ff fc02 	bl	8000e00 <Error_Handler>
    __HAL_RCC_SPI4_CLK_ENABLE();
 80015fc:	4b45      	ldr	r3, [pc, #276]	; (8001714 <HAL_SPI_MspInit+0x688>)
 80015fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001602:	4a44      	ldr	r2, [pc, #272]	; (8001714 <HAL_SPI_MspInit+0x688>)
 8001604:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001608:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800160c:	4b41      	ldr	r3, [pc, #260]	; (8001714 <HAL_SPI_MspInit+0x688>)
 800160e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001612:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001616:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800161a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800161e:	601a      	str	r2, [r3, #0]
 8001620:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001624:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001628:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800162a:	4b3a      	ldr	r3, [pc, #232]	; (8001714 <HAL_SPI_MspInit+0x688>)
 800162c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001630:	4a38      	ldr	r2, [pc, #224]	; (8001714 <HAL_SPI_MspInit+0x688>)
 8001632:	f043 0310 	orr.w	r3, r3, #16
 8001636:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800163a:	4b36      	ldr	r3, [pc, #216]	; (8001714 <HAL_SPI_MspInit+0x688>)
 800163c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001640:	f003 0210 	and.w	r2, r3, #16
 8001644:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001648:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800164c:	601a      	str	r2, [r3, #0]
 800164e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001652:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001656:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_6;
 8001658:	2354      	movs	r3, #84	; 0x54
 800165a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800165e:	2302      	movs	r3, #2
 8001660:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001664:	2300      	movs	r3, #0
 8001666:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800166a:	2300      	movs	r3, #0
 800166c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001670:	2305      	movs	r3, #5
 8001672:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001676:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800167a:	4619      	mov	r1, r3
 800167c:	482c      	ldr	r0, [pc, #176]	; (8001730 <HAL_SPI_MspInit+0x6a4>)
 800167e:	f003 ff91 	bl	80055a4 <HAL_GPIO_Init>
    hdma_spi4_rx.Instance = DMA1_Stream4;
 8001682:	4b2c      	ldr	r3, [pc, #176]	; (8001734 <HAL_SPI_MspInit+0x6a8>)
 8001684:	4a2c      	ldr	r2, [pc, #176]	; (8001738 <HAL_SPI_MspInit+0x6ac>)
 8001686:	601a      	str	r2, [r3, #0]
    hdma_spi4_rx.Init.Request = DMA_REQUEST_SPI4_RX;
 8001688:	4b2a      	ldr	r3, [pc, #168]	; (8001734 <HAL_SPI_MspInit+0x6a8>)
 800168a:	2253      	movs	r2, #83	; 0x53
 800168c:	605a      	str	r2, [r3, #4]
    hdma_spi4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800168e:	4b29      	ldr	r3, [pc, #164]	; (8001734 <HAL_SPI_MspInit+0x6a8>)
 8001690:	2200      	movs	r2, #0
 8001692:	609a      	str	r2, [r3, #8]
    hdma_spi4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001694:	4b27      	ldr	r3, [pc, #156]	; (8001734 <HAL_SPI_MspInit+0x6a8>)
 8001696:	2200      	movs	r2, #0
 8001698:	60da      	str	r2, [r3, #12]
    hdma_spi4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800169a:	4b26      	ldr	r3, [pc, #152]	; (8001734 <HAL_SPI_MspInit+0x6a8>)
 800169c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016a0:	611a      	str	r2, [r3, #16]
    hdma_spi4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80016a2:	4b24      	ldr	r3, [pc, #144]	; (8001734 <HAL_SPI_MspInit+0x6a8>)
 80016a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80016a8:	615a      	str	r2, [r3, #20]
    hdma_spi4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80016aa:	4b22      	ldr	r3, [pc, #136]	; (8001734 <HAL_SPI_MspInit+0x6a8>)
 80016ac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016b0:	619a      	str	r2, [r3, #24]
    hdma_spi4_rx.Init.Mode = DMA_CIRCULAR;
 80016b2:	4b20      	ldr	r3, [pc, #128]	; (8001734 <HAL_SPI_MspInit+0x6a8>)
 80016b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016b8:	61da      	str	r2, [r3, #28]
    hdma_spi4_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80016ba:	4b1e      	ldr	r3, [pc, #120]	; (8001734 <HAL_SPI_MspInit+0x6a8>)
 80016bc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80016c0:	621a      	str	r2, [r3, #32]
    hdma_spi4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016c2:	4b1c      	ldr	r3, [pc, #112]	; (8001734 <HAL_SPI_MspInit+0x6a8>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi4_rx) != HAL_OK)
 80016c8:	481a      	ldr	r0, [pc, #104]	; (8001734 <HAL_SPI_MspInit+0x6a8>)
 80016ca:	f001 f82d 	bl	8002728 <HAL_DMA_Init>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <HAL_SPI_MspInit+0x64c>
      Error_Handler();
 80016d4:	f7ff fb94 	bl	8000e00 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi4_rx);
 80016d8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80016dc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a14      	ldr	r2, [pc, #80]	; (8001734 <HAL_SPI_MspInit+0x6a8>)
 80016e4:	67da      	str	r2, [r3, #124]	; 0x7c
 80016e6:	4a13      	ldr	r2, [pc, #76]	; (8001734 <HAL_SPI_MspInit+0x6a8>)
 80016e8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80016ec:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 80016f4:	2200      	movs	r2, #0
 80016f6:	2100      	movs	r1, #0
 80016f8:	2054      	movs	r0, #84	; 0x54
 80016fa:	f000 ffe0 	bl	80026be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 80016fe:	2054      	movs	r0, #84	; 0x54
 8001700:	f000 fff7 	bl	80026f2 <HAL_NVIC_EnableIRQ>
}
 8001704:	bf00      	nop
 8001706:	f507 7788 	add.w	r7, r7, #272	; 0x110
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	40003c00 	.word	0x40003c00
 8001714:	58024400 	.word	0x58024400
 8001718:	58020000 	.word	0x58020000
 800171c:	58020400 	.word	0x58020400
 8001720:	58020800 	.word	0x58020800
 8001724:	240084ec 	.word	0x240084ec
 8001728:	40020058 	.word	0x40020058
 800172c:	40013400 	.word	0x40013400
 8001730:	58021000 	.word	0x58021000
 8001734:	24008564 	.word	0x24008564
 8001738:	40020070 	.word	0x40020070

0800173c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001742:	4b0a      	ldr	r3, [pc, #40]	; (800176c <HAL_MspInit+0x30>)
 8001744:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001748:	4a08      	ldr	r2, [pc, #32]	; (800176c <HAL_MspInit+0x30>)
 800174a:	f043 0302 	orr.w	r3, r3, #2
 800174e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001752:	4b06      	ldr	r3, [pc, #24]	; (800176c <HAL_MspInit+0x30>)
 8001754:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001758:	f003 0302 	and.w	r3, r3, #2
 800175c:	607b      	str	r3, [r7, #4]
 800175e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001760:	bf00      	nop
 8001762:	370c      	adds	r7, #12
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr
 800176c:	58024400 	.word	0x58024400

08001770 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001774:	e7fe      	b.n	8001774 <NMI_Handler+0x4>

08001776 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001776:	b480      	push	{r7}
 8001778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800177a:	e7fe      	b.n	800177a <HardFault_Handler+0x4>

0800177c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001780:	e7fe      	b.n	8001780 <MemManage_Handler+0x4>

08001782 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001782:	b480      	push	{r7}
 8001784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001786:	e7fe      	b.n	8001786 <BusFault_Handler+0x4>

08001788 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800178c:	e7fe      	b.n	800178c <UsageFault_Handler+0x4>

0800178e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800178e:	b480      	push	{r7}
 8001790:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001792:	bf00      	nop
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr

0800179c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017a0:	bf00      	nop
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr

080017aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017aa:	b480      	push	{r7}
 80017ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017ae:	bf00      	nop
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr

080017b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017bc:	f000 fe4c 	bl	8002458 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017c0:	bf00      	nop
 80017c2:	bd80      	pop	{r7, pc}

080017c4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80017c8:	4802      	ldr	r0, [pc, #8]	; (80017d4 <DMA1_Stream0_IRQHandler+0x10>)
 80017ca:	f001 ffb5 	bl	8003738 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80017ce:	bf00      	nop
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	240083fc 	.word	0x240083fc

080017d8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim8_ch1);
 80017dc:	4802      	ldr	r0, [pc, #8]	; (80017e8 <DMA1_Stream1_IRQHandler+0x10>)
 80017de:	f001 ffab 	bl	8003738 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80017e2:	bf00      	nop
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	240087d0 	.word	0x240087d0

080017ec <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80017f0:	4802      	ldr	r0, [pc, #8]	; (80017fc <DMA1_Stream2_IRQHandler+0x10>)
 80017f2:	f001 ffa1 	bl	8003738 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80017f6:	bf00      	nop
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	24008474 	.word	0x24008474

08001800 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 8001804:	4802      	ldr	r0, [pc, #8]	; (8001810 <DMA1_Stream3_IRQHandler+0x10>)
 8001806:	f001 ff97 	bl	8003738 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800180a:	bf00      	nop
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	240084ec 	.word	0x240084ec

08001814 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_rx);
 8001818:	4802      	ldr	r0, [pc, #8]	; (8001824 <DMA1_Stream4_IRQHandler+0x10>)
 800181a:	f001 ff8d 	bl	8003738 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800181e:	bf00      	nop
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	24008564 	.word	0x24008564

08001828 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch1);
 800182c:	4802      	ldr	r0, [pc, #8]	; (8001838 <DMA1_Stream5_IRQHandler+0x10>)
 800182e:	f001 ff83 	bl	8003738 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001832:	bf00      	nop
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	24008758 	.word	0x24008758

0800183c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001840:	4802      	ldr	r0, [pc, #8]	; (800184c <SPI1_IRQHandler+0x10>)
 8001842:	f006 ff35 	bl	80086b0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001846:	bf00      	nop
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	240081dc 	.word	0x240081dc

08001850 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001854:	4802      	ldr	r0, [pc, #8]	; (8001860 <SPI2_IRQHandler+0x10>)
 8001856:	f006 ff2b 	bl	80086b0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800185a:	bf00      	nop
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	24008264 	.word	0x24008264

08001864 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ADC_BUSY_Pin);
 8001868:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800186c:	f004 f875 	bl	800595a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001870:	bf00      	nop
 8001872:	bd80      	pop	{r7, pc}

08001874 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8001878:	4802      	ldr	r0, [pc, #8]	; (8001884 <SPI3_IRQHandler+0x10>)
 800187a:	f006 ff19 	bl	80086b0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 800187e:	bf00      	nop
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	240082ec 	.word	0x240082ec

08001888 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 800188c:	4802      	ldr	r0, [pc, #8]	; (8001898 <SPI4_IRQHandler+0x10>)
 800188e:	f006 ff0f 	bl	80086b0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 8001892:	bf00      	nop
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	24008374 	.word	0x24008374

0800189c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80018a0:	4b32      	ldr	r3, [pc, #200]	; (800196c <SystemInit+0xd0>)
 80018a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018a6:	4a31      	ldr	r2, [pc, #196]	; (800196c <SystemInit+0xd0>)
 80018a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80018b0:	4b2f      	ldr	r3, [pc, #188]	; (8001970 <SystemInit+0xd4>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f003 030f 	and.w	r3, r3, #15
 80018b8:	2b06      	cmp	r3, #6
 80018ba:	d807      	bhi.n	80018cc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80018bc:	4b2c      	ldr	r3, [pc, #176]	; (8001970 <SystemInit+0xd4>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f023 030f 	bic.w	r3, r3, #15
 80018c4:	4a2a      	ldr	r2, [pc, #168]	; (8001970 <SystemInit+0xd4>)
 80018c6:	f043 0307 	orr.w	r3, r3, #7
 80018ca:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80018cc:	4b29      	ldr	r3, [pc, #164]	; (8001974 <SystemInit+0xd8>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a28      	ldr	r2, [pc, #160]	; (8001974 <SystemInit+0xd8>)
 80018d2:	f043 0301 	orr.w	r3, r3, #1
 80018d6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80018d8:	4b26      	ldr	r3, [pc, #152]	; (8001974 <SystemInit+0xd8>)
 80018da:	2200      	movs	r2, #0
 80018dc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80018de:	4b25      	ldr	r3, [pc, #148]	; (8001974 <SystemInit+0xd8>)
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	4924      	ldr	r1, [pc, #144]	; (8001974 <SystemInit+0xd8>)
 80018e4:	4b24      	ldr	r3, [pc, #144]	; (8001978 <SystemInit+0xdc>)
 80018e6:	4013      	ands	r3, r2
 80018e8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80018ea:	4b21      	ldr	r3, [pc, #132]	; (8001970 <SystemInit+0xd4>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 0308 	and.w	r3, r3, #8
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d007      	beq.n	8001906 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80018f6:	4b1e      	ldr	r3, [pc, #120]	; (8001970 <SystemInit+0xd4>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f023 030f 	bic.w	r3, r3, #15
 80018fe:	4a1c      	ldr	r2, [pc, #112]	; (8001970 <SystemInit+0xd4>)
 8001900:	f043 0307 	orr.w	r3, r3, #7
 8001904:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001906:	4b1b      	ldr	r3, [pc, #108]	; (8001974 <SystemInit+0xd8>)
 8001908:	2200      	movs	r2, #0
 800190a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800190c:	4b19      	ldr	r3, [pc, #100]	; (8001974 <SystemInit+0xd8>)
 800190e:	2200      	movs	r2, #0
 8001910:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001912:	4b18      	ldr	r3, [pc, #96]	; (8001974 <SystemInit+0xd8>)
 8001914:	2200      	movs	r2, #0
 8001916:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001918:	4b16      	ldr	r3, [pc, #88]	; (8001974 <SystemInit+0xd8>)
 800191a:	4a18      	ldr	r2, [pc, #96]	; (800197c <SystemInit+0xe0>)
 800191c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800191e:	4b15      	ldr	r3, [pc, #84]	; (8001974 <SystemInit+0xd8>)
 8001920:	4a17      	ldr	r2, [pc, #92]	; (8001980 <SystemInit+0xe4>)
 8001922:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001924:	4b13      	ldr	r3, [pc, #76]	; (8001974 <SystemInit+0xd8>)
 8001926:	4a17      	ldr	r2, [pc, #92]	; (8001984 <SystemInit+0xe8>)
 8001928:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800192a:	4b12      	ldr	r3, [pc, #72]	; (8001974 <SystemInit+0xd8>)
 800192c:	2200      	movs	r2, #0
 800192e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001930:	4b10      	ldr	r3, [pc, #64]	; (8001974 <SystemInit+0xd8>)
 8001932:	4a14      	ldr	r2, [pc, #80]	; (8001984 <SystemInit+0xe8>)
 8001934:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001936:	4b0f      	ldr	r3, [pc, #60]	; (8001974 <SystemInit+0xd8>)
 8001938:	2200      	movs	r2, #0
 800193a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800193c:	4b0d      	ldr	r3, [pc, #52]	; (8001974 <SystemInit+0xd8>)
 800193e:	4a11      	ldr	r2, [pc, #68]	; (8001984 <SystemInit+0xe8>)
 8001940:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001942:	4b0c      	ldr	r3, [pc, #48]	; (8001974 <SystemInit+0xd8>)
 8001944:	2200      	movs	r2, #0
 8001946:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001948:	4b0a      	ldr	r3, [pc, #40]	; (8001974 <SystemInit+0xd8>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a09      	ldr	r2, [pc, #36]	; (8001974 <SystemInit+0xd8>)
 800194e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001952:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001954:	4b07      	ldr	r3, [pc, #28]	; (8001974 <SystemInit+0xd8>)
 8001956:	2200      	movs	r2, #0
 8001958:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800195a:	4b0b      	ldr	r3, [pc, #44]	; (8001988 <SystemInit+0xec>)
 800195c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001960:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001962:	bf00      	nop
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr
 800196c:	e000ed00 	.word	0xe000ed00
 8001970:	52002000 	.word	0x52002000
 8001974:	58024400 	.word	0x58024400
 8001978:	eaf6ed7f 	.word	0xeaf6ed7f
 800197c:	02020200 	.word	0x02020200
 8001980:	01ff0000 	.word	0x01ff0000
 8001984:	01010280 	.word	0x01010280
 8001988:	52004000 	.word	0x52004000

0800198c <MX_TIM2_Init>:
DMA_HandleTypeDef hdma_tim5_ch1;
DMA_HandleTypeDef hdma_tim8_ch1;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b08a      	sub	sp, #40	; 0x28
 8001990:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001992:	f107 031c 	add.w	r3, r7, #28
 8001996:	2200      	movs	r2, #0
 8001998:	601a      	str	r2, [r3, #0]
 800199a:	605a      	str	r2, [r3, #4]
 800199c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800199e:	463b      	mov	r3, r7
 80019a0:	2200      	movs	r2, #0
 80019a2:	601a      	str	r2, [r3, #0]
 80019a4:	605a      	str	r2, [r3, #4]
 80019a6:	609a      	str	r2, [r3, #8]
 80019a8:	60da      	str	r2, [r3, #12]
 80019aa:	611a      	str	r2, [r3, #16]
 80019ac:	615a      	str	r2, [r3, #20]
 80019ae:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80019b0:	4b22      	ldr	r3, [pc, #136]	; (8001a3c <MX_TIM2_Init+0xb0>)
 80019b2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019b6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80019b8:	4b20      	ldr	r3, [pc, #128]	; (8001a3c <MX_TIM2_Init+0xb0>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 80019be:	4b1f      	ldr	r3, [pc, #124]	; (8001a3c <MX_TIM2_Init+0xb0>)
 80019c0:	2210      	movs	r2, #16
 80019c2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 572;
 80019c4:	4b1d      	ldr	r3, [pc, #116]	; (8001a3c <MX_TIM2_Init+0xb0>)
 80019c6:	f44f 720f 	mov.w	r2, #572	; 0x23c
 80019ca:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019cc:	4b1b      	ldr	r3, [pc, #108]	; (8001a3c <MX_TIM2_Init+0xb0>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019d2:	4b1a      	ldr	r3, [pc, #104]	; (8001a3c <MX_TIM2_Init+0xb0>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80019d8:	4818      	ldr	r0, [pc, #96]	; (8001a3c <MX_TIM2_Init+0xb0>)
 80019da:	f007 f981 	bl	8008ce0 <HAL_TIM_PWM_Init>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d001      	beq.n	80019e8 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80019e4:	f7ff fa0c 	bl	8000e00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80019e8:	2320      	movs	r3, #32
 80019ea:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 80019ec:	2380      	movs	r3, #128	; 0x80
 80019ee:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019f0:	f107 031c 	add.w	r3, r7, #28
 80019f4:	4619      	mov	r1, r3
 80019f6:	4811      	ldr	r0, [pc, #68]	; (8001a3c <MX_TIM2_Init+0xb0>)
 80019f8:	f008 f9a0 	bl	8009d3c <HAL_TIMEx_MasterConfigSynchronization>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d001      	beq.n	8001a06 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8001a02:	f7ff f9fd 	bl	8000e00 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a06:	2360      	movs	r3, #96	; 0x60
 8001a08:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 247;
 8001a0a:	23f7      	movs	r3, #247	; 0xf7
 8001a0c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a12:	2300      	movs	r3, #0
 8001a14:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a16:	463b      	mov	r3, r7
 8001a18:	2200      	movs	r2, #0
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	4807      	ldr	r0, [pc, #28]	; (8001a3c <MX_TIM2_Init+0xb0>)
 8001a1e:	f007 fb2d 	bl	800907c <HAL_TIM_PWM_ConfigChannel>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d001      	beq.n	8001a2c <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001a28:	f7ff f9ea 	bl	8000e00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001a2c:	4803      	ldr	r0, [pc, #12]	; (8001a3c <MX_TIM2_Init+0xb0>)
 8001a2e:	f000 fb07 	bl	8002040 <HAL_TIM_MspPostInit>

}
 8001a32:	bf00      	nop
 8001a34:	3728      	adds	r7, #40	; 0x28
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	240085dc 	.word	0x240085dc

08001a40 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b090      	sub	sp, #64	; 0x40
 8001a44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001a46:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	601a      	str	r2, [r3, #0]
 8001a4e:	605a      	str	r2, [r3, #4]
 8001a50:	609a      	str	r2, [r3, #8]
 8001a52:	60da      	str	r2, [r3, #12]
 8001a54:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a56:	f107 0320 	add.w	r3, r7, #32
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	601a      	str	r2, [r3, #0]
 8001a5e:	605a      	str	r2, [r3, #4]
 8001a60:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a62:	1d3b      	adds	r3, r7, #4
 8001a64:	2200      	movs	r2, #0
 8001a66:	601a      	str	r2, [r3, #0]
 8001a68:	605a      	str	r2, [r3, #4]
 8001a6a:	609a      	str	r2, [r3, #8]
 8001a6c:	60da      	str	r2, [r3, #12]
 8001a6e:	611a      	str	r2, [r3, #16]
 8001a70:	615a      	str	r2, [r3, #20]
 8001a72:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a74:	4b31      	ldr	r3, [pc, #196]	; (8001b3c <MX_TIM3_Init+0xfc>)
 8001a76:	4a32      	ldr	r2, [pc, #200]	; (8001b40 <MX_TIM3_Init+0x100>)
 8001a78:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001a7a:	4b30      	ldr	r3, [pc, #192]	; (8001b3c <MX_TIM3_Init+0xfc>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a80:	4b2e      	ldr	r3, [pc, #184]	; (8001b3c <MX_TIM3_Init+0xfc>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 479;
 8001a86:	4b2d      	ldr	r3, [pc, #180]	; (8001b3c <MX_TIM3_Init+0xfc>)
 8001a88:	f240 12df 	movw	r2, #479	; 0x1df
 8001a8c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a8e:	4b2b      	ldr	r3, [pc, #172]	; (8001b3c <MX_TIM3_Init+0xfc>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a94:	4b29      	ldr	r3, [pc, #164]	; (8001b3c <MX_TIM3_Init+0xfc>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001a9a:	4828      	ldr	r0, [pc, #160]	; (8001b3c <MX_TIM3_Init+0xfc>)
 8001a9c:	f007 f8c9 	bl	8008c32 <HAL_TIM_Base_Init>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8001aa6:	f7ff f9ab 	bl	8000e00 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001aaa:	4824      	ldr	r0, [pc, #144]	; (8001b3c <MX_TIM3_Init+0xfc>)
 8001aac:	f007 f918 	bl	8008ce0 <HAL_TIM_PWM_Init>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d001      	beq.n	8001aba <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8001ab6:	f7ff f9a3 	bl	8000e00 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim3, TIM_OPMODE_SINGLE) != HAL_OK)
 8001aba:	2108      	movs	r1, #8
 8001abc:	481f      	ldr	r0, [pc, #124]	; (8001b3c <MX_TIM3_Init+0xfc>)
 8001abe:	f007 fa83 	bl	8008fc8 <HAL_TIM_OnePulse_Init>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d001      	beq.n	8001acc <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001ac8:	f7ff f99a 	bl	8000e00 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8001acc:	2306      	movs	r3, #6
 8001ace:	62fb      	str	r3, [r7, #44]	; 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8001ad0:	2310      	movs	r3, #16
 8001ad2:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8001ad4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ad8:	4619      	mov	r1, r3
 8001ada:	4818      	ldr	r0, [pc, #96]	; (8001b3c <MX_TIM3_Init+0xfc>)
 8001adc:	f007 fbe2 	bl	80092a4 <HAL_TIM_SlaveConfigSynchro>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d001      	beq.n	8001aea <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 8001ae6:	f7ff f98b 	bl	8000e00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001aea:	2300      	movs	r3, #0
 8001aec:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001aee:	2300      	movs	r3, #0
 8001af0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001af2:	f107 0320 	add.w	r3, r7, #32
 8001af6:	4619      	mov	r1, r3
 8001af8:	4810      	ldr	r0, [pc, #64]	; (8001b3c <MX_TIM3_Init+0xfc>)
 8001afa:	f008 f91f 	bl	8009d3c <HAL_TIMEx_MasterConfigSynchronization>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d001      	beq.n	8001b08 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8001b04:	f7ff f97c 	bl	8000e00 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b08:	2360      	movs	r3, #96	; 0x60
 8001b0a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b10:	2300      	movs	r3, #0
 8001b12:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b14:	2300      	movs	r3, #0
 8001b16:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b18:	1d3b      	adds	r3, r7, #4
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	4807      	ldr	r0, [pc, #28]	; (8001b3c <MX_TIM3_Init+0xfc>)
 8001b20:	f007 faac 	bl	800907c <HAL_TIM_PWM_ConfigChannel>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d001      	beq.n	8001b2e <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8001b2a:	f7ff f969 	bl	8000e00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001b2e:	4803      	ldr	r0, [pc, #12]	; (8001b3c <MX_TIM3_Init+0xfc>)
 8001b30:	f000 fa86 	bl	8002040 <HAL_TIM_MspPostInit>

}
 8001b34:	bf00      	nop
 8001b36:	3740      	adds	r7, #64	; 0x40
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	24008628 	.word	0x24008628
 8001b40:	40000400 	.word	0x40000400

08001b44 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b088      	sub	sp, #32
 8001b48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001b4a:	f107 030c 	add.w	r3, r7, #12
 8001b4e:	2200      	movs	r2, #0
 8001b50:	601a      	str	r2, [r3, #0]
 8001b52:	605a      	str	r2, [r3, #4]
 8001b54:	609a      	str	r2, [r3, #8]
 8001b56:	60da      	str	r2, [r3, #12]
 8001b58:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b5a:	463b      	mov	r3, r7
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	601a      	str	r2, [r3, #0]
 8001b60:	605a      	str	r2, [r3, #4]
 8001b62:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001b64:	4b21      	ldr	r3, [pc, #132]	; (8001bec <MX_TIM4_Init+0xa8>)
 8001b66:	4a22      	ldr	r2, [pc, #136]	; (8001bf0 <MX_TIM4_Init+0xac>)
 8001b68:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001b6a:	4b20      	ldr	r3, [pc, #128]	; (8001bec <MX_TIM4_Init+0xa8>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b70:	4b1e      	ldr	r3, [pc, #120]	; (8001bec <MX_TIM4_Init+0xa8>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2;
 8001b76:	4b1d      	ldr	r3, [pc, #116]	; (8001bec <MX_TIM4_Init+0xa8>)
 8001b78:	2202      	movs	r2, #2
 8001b7a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b7c:	4b1b      	ldr	r3, [pc, #108]	; (8001bec <MX_TIM4_Init+0xa8>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b82:	4b1a      	ldr	r3, [pc, #104]	; (8001bec <MX_TIM4_Init+0xa8>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001b88:	4818      	ldr	r0, [pc, #96]	; (8001bec <MX_TIM4_Init+0xa8>)
 8001b8a:	f007 f852 	bl	8008c32 <HAL_TIM_Base_Init>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d001      	beq.n	8001b98 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001b94:	f7ff f934 	bl	8000e00 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim4, TIM_OPMODE_SINGLE) != HAL_OK)
 8001b98:	2108      	movs	r1, #8
 8001b9a:	4814      	ldr	r0, [pc, #80]	; (8001bec <MX_TIM4_Init+0xa8>)
 8001b9c:	f007 fa14 	bl	8008fc8 <HAL_TIM_OnePulse_Init>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d001      	beq.n	8001baa <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001ba6:	f7ff f92b 	bl	8000e00 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8001baa:	2306      	movs	r3, #6
 8001bac:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8001bae:	2310      	movs	r3, #16
 8001bb0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8001bb2:	f107 030c 	add.w	r3, r7, #12
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	480c      	ldr	r0, [pc, #48]	; (8001bec <MX_TIM4_Init+0xa8>)
 8001bba:	f007 fb73 	bl	80092a4 <HAL_TIM_SlaveConfigSynchro>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d001      	beq.n	8001bc8 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8001bc4:	f7ff f91c 	bl	8000e00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001bc8:	2320      	movs	r3, #32
 8001bca:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001bd0:	463b      	mov	r3, r7
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	4805      	ldr	r0, [pc, #20]	; (8001bec <MX_TIM4_Init+0xa8>)
 8001bd6:	f008 f8b1 	bl	8009d3c <HAL_TIMEx_MasterConfigSynchronization>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d001      	beq.n	8001be4 <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 8001be0:	f7ff f90e 	bl	8000e00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001be4:	bf00      	nop
 8001be6:	3720      	adds	r7, #32
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	24008674 	.word	0x24008674
 8001bf0:	40000800 	.word	0x40000800

08001bf4 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b090      	sub	sp, #64	; 0x40
 8001bf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001bfa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bfe:	2200      	movs	r2, #0
 8001c00:	601a      	str	r2, [r3, #0]
 8001c02:	605a      	str	r2, [r3, #4]
 8001c04:	609a      	str	r2, [r3, #8]
 8001c06:	60da      	str	r2, [r3, #12]
 8001c08:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c0a:	f107 0320 	add.w	r3, r7, #32
 8001c0e:	2200      	movs	r2, #0
 8001c10:	601a      	str	r2, [r3, #0]
 8001c12:	605a      	str	r2, [r3, #4]
 8001c14:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c16:	1d3b      	adds	r3, r7, #4
 8001c18:	2200      	movs	r2, #0
 8001c1a:	601a      	str	r2, [r3, #0]
 8001c1c:	605a      	str	r2, [r3, #4]
 8001c1e:	609a      	str	r2, [r3, #8]
 8001c20:	60da      	str	r2, [r3, #12]
 8001c22:	611a      	str	r2, [r3, #16]
 8001c24:	615a      	str	r2, [r3, #20]
 8001c26:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001c28:	4b31      	ldr	r3, [pc, #196]	; (8001cf0 <MX_TIM5_Init+0xfc>)
 8001c2a:	4a32      	ldr	r2, [pc, #200]	; (8001cf4 <MX_TIM5_Init+0x100>)
 8001c2c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001c2e:	4b30      	ldr	r3, [pc, #192]	; (8001cf0 <MX_TIM5_Init+0xfc>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c34:	4b2e      	ldr	r3, [pc, #184]	; (8001cf0 <MX_TIM5_Init+0xfc>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 17;
 8001c3a:	4b2d      	ldr	r3, [pc, #180]	; (8001cf0 <MX_TIM5_Init+0xfc>)
 8001c3c:	2211      	movs	r2, #17
 8001c3e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c40:	4b2b      	ldr	r3, [pc, #172]	; (8001cf0 <MX_TIM5_Init+0xfc>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c46:	4b2a      	ldr	r3, [pc, #168]	; (8001cf0 <MX_TIM5_Init+0xfc>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001c4c:	4828      	ldr	r0, [pc, #160]	; (8001cf0 <MX_TIM5_Init+0xfc>)
 8001c4e:	f006 fff0 	bl	8008c32 <HAL_TIM_Base_Init>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d001      	beq.n	8001c5c <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8001c58:	f7ff f8d2 	bl	8000e00 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001c5c:	4824      	ldr	r0, [pc, #144]	; (8001cf0 <MX_TIM5_Init+0xfc>)
 8001c5e:	f007 f83f 	bl	8008ce0 <HAL_TIM_PWM_Init>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d001      	beq.n	8001c6c <MX_TIM5_Init+0x78>
  {
    Error_Handler();
 8001c68:	f7ff f8ca 	bl	8000e00 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim5, TIM_OPMODE_SINGLE) != HAL_OK)
 8001c6c:	2108      	movs	r1, #8
 8001c6e:	4820      	ldr	r0, [pc, #128]	; (8001cf0 <MX_TIM5_Init+0xfc>)
 8001c70:	f007 f9aa 	bl	8008fc8 <HAL_TIM_OnePulse_Init>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d001      	beq.n	8001c7e <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8001c7a:	f7ff f8c1 	bl	8000e00 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8001c7e:	2306      	movs	r3, #6
 8001c80:	62fb      	str	r3, [r7, #44]	; 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8001c82:	2310      	movs	r3, #16
 8001c84:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK)
 8001c86:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	4818      	ldr	r0, [pc, #96]	; (8001cf0 <MX_TIM5_Init+0xfc>)
 8001c8e:	f007 fb09 	bl	80092a4 <HAL_TIM_SlaveConfigSynchro>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d001      	beq.n	8001c9c <MX_TIM5_Init+0xa8>
  {
    Error_Handler();
 8001c98:	f7ff f8b2 	bl	8000e00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001ca4:	f107 0320 	add.w	r3, r7, #32
 8001ca8:	4619      	mov	r1, r3
 8001caa:	4811      	ldr	r0, [pc, #68]	; (8001cf0 <MX_TIM5_Init+0xfc>)
 8001cac:	f008 f846 	bl	8009d3c <HAL_TIMEx_MasterConfigSynchronization>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d001      	beq.n	8001cba <MX_TIM5_Init+0xc6>
  {
    Error_Handler();
 8001cb6:	f7ff f8a3 	bl	8000e00 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cba:	2360      	movs	r3, #96	; 0x60
 8001cbc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 13;
 8001cbe:	230d      	movs	r3, #13
 8001cc0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001cca:	1d3b      	adds	r3, r7, #4
 8001ccc:	2200      	movs	r2, #0
 8001cce:	4619      	mov	r1, r3
 8001cd0:	4807      	ldr	r0, [pc, #28]	; (8001cf0 <MX_TIM5_Init+0xfc>)
 8001cd2:	f007 f9d3 	bl	800907c <HAL_TIM_PWM_ConfigChannel>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d001      	beq.n	8001ce0 <MX_TIM5_Init+0xec>
  {
    Error_Handler();
 8001cdc:	f7ff f890 	bl	8000e00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001ce0:	4803      	ldr	r0, [pc, #12]	; (8001cf0 <MX_TIM5_Init+0xfc>)
 8001ce2:	f000 f9ad 	bl	8002040 <HAL_TIM_MspPostInit>

}
 8001ce6:	bf00      	nop
 8001ce8:	3740      	adds	r7, #64	; 0x40
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	240086c0 	.word	0x240086c0
 8001cf4:	40000c00 	.word	0x40000c00

08001cf8 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b09c      	sub	sp, #112	; 0x70
 8001cfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001cfe:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001d02:	2200      	movs	r2, #0
 8001d04:	601a      	str	r2, [r3, #0]
 8001d06:	605a      	str	r2, [r3, #4]
 8001d08:	609a      	str	r2, [r3, #8]
 8001d0a:	60da      	str	r2, [r3, #12]
 8001d0c:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d0e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001d12:	2200      	movs	r2, #0
 8001d14:	601a      	str	r2, [r3, #0]
 8001d16:	605a      	str	r2, [r3, #4]
 8001d18:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d1a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001d1e:	2200      	movs	r2, #0
 8001d20:	601a      	str	r2, [r3, #0]
 8001d22:	605a      	str	r2, [r3, #4]
 8001d24:	609a      	str	r2, [r3, #8]
 8001d26:	60da      	str	r2, [r3, #12]
 8001d28:	611a      	str	r2, [r3, #16]
 8001d2a:	615a      	str	r2, [r3, #20]
 8001d2c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001d2e:	463b      	mov	r3, r7
 8001d30:	2234      	movs	r2, #52	; 0x34
 8001d32:	2100      	movs	r1, #0
 8001d34:	4618      	mov	r0, r3
 8001d36:	f009 fb17 	bl	800b368 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001d3a:	4b48      	ldr	r3, [pc, #288]	; (8001e5c <MX_TIM8_Init+0x164>)
 8001d3c:	4a48      	ldr	r2, [pc, #288]	; (8001e60 <MX_TIM8_Init+0x168>)
 8001d3e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001d40:	4b46      	ldr	r3, [pc, #280]	; (8001e5c <MX_TIM8_Init+0x164>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d46:	4b45      	ldr	r3, [pc, #276]	; (8001e5c <MX_TIM8_Init+0x164>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 53;
 8001d4c:	4b43      	ldr	r3, [pc, #268]	; (8001e5c <MX_TIM8_Init+0x164>)
 8001d4e:	2235      	movs	r2, #53	; 0x35
 8001d50:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d52:	4b42      	ldr	r3, [pc, #264]	; (8001e5c <MX_TIM8_Init+0x164>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 7;
 8001d58:	4b40      	ldr	r3, [pc, #256]	; (8001e5c <MX_TIM8_Init+0x164>)
 8001d5a:	2207      	movs	r2, #7
 8001d5c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d5e:	4b3f      	ldr	r3, [pc, #252]	; (8001e5c <MX_TIM8_Init+0x164>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001d64:	483d      	ldr	r0, [pc, #244]	; (8001e5c <MX_TIM8_Init+0x164>)
 8001d66:	f006 ff64 	bl	8008c32 <HAL_TIM_Base_Init>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d001      	beq.n	8001d74 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8001d70:	f7ff f846 	bl	8000e00 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001d74:	4839      	ldr	r0, [pc, #228]	; (8001e5c <MX_TIM8_Init+0x164>)
 8001d76:	f006 ffb3 	bl	8008ce0 <HAL_TIM_PWM_Init>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d001      	beq.n	8001d84 <MX_TIM8_Init+0x8c>
  {
    Error_Handler();
 8001d80:	f7ff f83e 	bl	8000e00 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim8, TIM_OPMODE_SINGLE) != HAL_OK)
 8001d84:	2108      	movs	r1, #8
 8001d86:	4835      	ldr	r0, [pc, #212]	; (8001e5c <MX_TIM8_Init+0x164>)
 8001d88:	f007 f91e 	bl	8008fc8 <HAL_TIM_OnePulse_Init>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d001      	beq.n	8001d96 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8001d92:	f7ff f835 	bl	8000e00 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8001d96:	2306      	movs	r3, #6
 8001d98:	65fb      	str	r3, [r7, #92]	; 0x5c
  sSlaveConfig.InputTrigger = TIM_TS_ITR2;
 8001d9a:	2320      	movs	r3, #32
 8001d9c:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_SlaveConfigSynchro(&htim8, &sSlaveConfig) != HAL_OK)
 8001d9e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001da2:	4619      	mov	r1, r3
 8001da4:	482d      	ldr	r0, [pc, #180]	; (8001e5c <MX_TIM8_Init+0x164>)
 8001da6:	f007 fa7d 	bl	80092a4 <HAL_TIM_SlaveConfigSynchro>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d001      	beq.n	8001db4 <MX_TIM8_Init+0xbc>
  {
    Error_Handler();
 8001db0:	f7ff f826 	bl	8000e00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1REF;
 8001db4:	2340      	movs	r3, #64	; 0x40
 8001db6:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001db8:	2300      	movs	r3, #0
 8001dba:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001dc0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	4825      	ldr	r0, [pc, #148]	; (8001e5c <MX_TIM8_Init+0x164>)
 8001dc8:	f007 ffb8 	bl	8009d3c <HAL_TIMEx_MasterConfigSynchronization>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d001      	beq.n	8001dd6 <MX_TIM8_Init+0xde>
  {
    Error_Handler();
 8001dd2:	f7ff f815 	bl	8000e00 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001dd6:	2360      	movs	r3, #96	; 0x60
 8001dd8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 40;
 8001dda:	2328      	movs	r3, #40	; 0x28
 8001ddc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001dde:	2300      	movs	r3, #0
 8001de0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001de2:	2300      	movs	r3, #0
 8001de4:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001de6:	2304      	movs	r3, #4
 8001de8:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001dea:	2300      	movs	r3, #0
 8001dec:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001dee:	2300      	movs	r3, #0
 8001df0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001df2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001df6:	2200      	movs	r2, #0
 8001df8:	4619      	mov	r1, r3
 8001dfa:	4818      	ldr	r0, [pc, #96]	; (8001e5c <MX_TIM8_Init+0x164>)
 8001dfc:	f007 f93e 	bl	800907c <HAL_TIM_PWM_ConfigChannel>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d001      	beq.n	8001e0a <MX_TIM8_Init+0x112>
  {
    Error_Handler();
 8001e06:	f7fe fffb 	bl	8000e00 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001e12:	2300      	movs	r3, #0
 8001e14:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001e16:	2300      	movs	r3, #0
 8001e18:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001e1e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e22:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001e24:	2300      	movs	r3, #0
 8001e26:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001e2c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e30:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001e32:	2300      	movs	r3, #0
 8001e34:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001e36:	2300      	movs	r3, #0
 8001e38:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001e3a:	463b      	mov	r3, r7
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	4807      	ldr	r0, [pc, #28]	; (8001e5c <MX_TIM8_Init+0x164>)
 8001e40:	f008 f818 	bl	8009e74 <HAL_TIMEx_ConfigBreakDeadTime>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d001      	beq.n	8001e4e <MX_TIM8_Init+0x156>
  {
    Error_Handler();
 8001e4a:	f7fe ffd9 	bl	8000e00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001e4e:	4803      	ldr	r0, [pc, #12]	; (8001e5c <MX_TIM8_Init+0x164>)
 8001e50:	f000 f8f6 	bl	8002040 <HAL_TIM_MspPostInit>

}
 8001e54:	bf00      	nop
 8001e56:	3770      	adds	r7, #112	; 0x70
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	2400870c 	.word	0x2400870c
 8001e60:	40010400 	.word	0x40010400

08001e64 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b085      	sub	sp, #20
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e74:	d10e      	bne.n	8001e94 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e76:	4b0a      	ldr	r3, [pc, #40]	; (8001ea0 <HAL_TIM_PWM_MspInit+0x3c>)
 8001e78:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001e7c:	4a08      	ldr	r2, [pc, #32]	; (8001ea0 <HAL_TIM_PWM_MspInit+0x3c>)
 8001e7e:	f043 0301 	orr.w	r3, r3, #1
 8001e82:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001e86:	4b06      	ldr	r3, [pc, #24]	; (8001ea0 <HAL_TIM_PWM_MspInit+0x3c>)
 8001e88:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001e8c:	f003 0301 	and.w	r3, r3, #1
 8001e90:	60fb      	str	r3, [r7, #12]
 8001e92:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001e94:	bf00      	nop
 8001e96:	3714      	adds	r7, #20
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr
 8001ea0:	58024400 	.word	0x58024400

08001ea4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b086      	sub	sp, #24
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a5a      	ldr	r2, [pc, #360]	; (800201c <HAL_TIM_Base_MspInit+0x178>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d10f      	bne.n	8001ed6 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001eb6:	4b5a      	ldr	r3, [pc, #360]	; (8002020 <HAL_TIM_Base_MspInit+0x17c>)
 8001eb8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ebc:	4a58      	ldr	r2, [pc, #352]	; (8002020 <HAL_TIM_Base_MspInit+0x17c>)
 8001ebe:	f043 0302 	orr.w	r3, r3, #2
 8001ec2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001ec6:	4b56      	ldr	r3, [pc, #344]	; (8002020 <HAL_TIM_Base_MspInit+0x17c>)
 8001ec8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ecc:	f003 0302 	and.w	r3, r3, #2
 8001ed0:	617b      	str	r3, [r7, #20]
 8001ed2:	697b      	ldr	r3, [r7, #20]

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8001ed4:	e09d      	b.n	8002012 <HAL_TIM_Base_MspInit+0x16e>
  else if(tim_baseHandle->Instance==TIM4)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a52      	ldr	r2, [pc, #328]	; (8002024 <HAL_TIM_Base_MspInit+0x180>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d10f      	bne.n	8001f00 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001ee0:	4b4f      	ldr	r3, [pc, #316]	; (8002020 <HAL_TIM_Base_MspInit+0x17c>)
 8001ee2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ee6:	4a4e      	ldr	r2, [pc, #312]	; (8002020 <HAL_TIM_Base_MspInit+0x17c>)
 8001ee8:	f043 0304 	orr.w	r3, r3, #4
 8001eec:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001ef0:	4b4b      	ldr	r3, [pc, #300]	; (8002020 <HAL_TIM_Base_MspInit+0x17c>)
 8001ef2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ef6:	f003 0304 	and.w	r3, r3, #4
 8001efa:	613b      	str	r3, [r7, #16]
 8001efc:	693b      	ldr	r3, [r7, #16]
}
 8001efe:	e088      	b.n	8002012 <HAL_TIM_Base_MspInit+0x16e>
  else if(tim_baseHandle->Instance==TIM5)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a48      	ldr	r2, [pc, #288]	; (8002028 <HAL_TIM_Base_MspInit+0x184>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d13f      	bne.n	8001f8a <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001f0a:	4b45      	ldr	r3, [pc, #276]	; (8002020 <HAL_TIM_Base_MspInit+0x17c>)
 8001f0c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001f10:	4a43      	ldr	r2, [pc, #268]	; (8002020 <HAL_TIM_Base_MspInit+0x17c>)
 8001f12:	f043 0308 	orr.w	r3, r3, #8
 8001f16:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001f1a:	4b41      	ldr	r3, [pc, #260]	; (8002020 <HAL_TIM_Base_MspInit+0x17c>)
 8001f1c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001f20:	f003 0308 	and.w	r3, r3, #8
 8001f24:	60fb      	str	r3, [r7, #12]
 8001f26:	68fb      	ldr	r3, [r7, #12]
    hdma_tim5_ch1.Instance = DMA1_Stream5;
 8001f28:	4b40      	ldr	r3, [pc, #256]	; (800202c <HAL_TIM_Base_MspInit+0x188>)
 8001f2a:	4a41      	ldr	r2, [pc, #260]	; (8002030 <HAL_TIM_Base_MspInit+0x18c>)
 8001f2c:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch1.Init.Request = DMA_REQUEST_TIM5_CH1;
 8001f2e:	4b3f      	ldr	r3, [pc, #252]	; (800202c <HAL_TIM_Base_MspInit+0x188>)
 8001f30:	2237      	movs	r2, #55	; 0x37
 8001f32:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f34:	4b3d      	ldr	r3, [pc, #244]	; (800202c <HAL_TIM_Base_MspInit+0x188>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f3a:	4b3c      	ldr	r3, [pc, #240]	; (800202c <HAL_TIM_Base_MspInit+0x188>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001f40:	4b3a      	ldr	r3, [pc, #232]	; (800202c <HAL_TIM_Base_MspInit+0x188>)
 8001f42:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f46:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001f48:	4b38      	ldr	r3, [pc, #224]	; (800202c <HAL_TIM_Base_MspInit+0x188>)
 8001f4a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001f4e:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001f50:	4b36      	ldr	r3, [pc, #216]	; (800202c <HAL_TIM_Base_MspInit+0x188>)
 8001f52:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f56:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch1.Init.Mode = DMA_CIRCULAR;
 8001f58:	4b34      	ldr	r3, [pc, #208]	; (800202c <HAL_TIM_Base_MspInit+0x188>)
 8001f5a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f5e:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001f60:	4b32      	ldr	r3, [pc, #200]	; (800202c <HAL_TIM_Base_MspInit+0x188>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f66:	4b31      	ldr	r3, [pc, #196]	; (800202c <HAL_TIM_Base_MspInit+0x188>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim5_ch1) != HAL_OK)
 8001f6c:	482f      	ldr	r0, [pc, #188]	; (800202c <HAL_TIM_Base_MspInit+0x188>)
 8001f6e:	f000 fbdb 	bl	8002728 <HAL_DMA_Init>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d001      	beq.n	8001f7c <HAL_TIM_Base_MspInit+0xd8>
      Error_Handler();
 8001f78:	f7fe ff42 	bl	8000e00 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim5_ch1);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	4a2b      	ldr	r2, [pc, #172]	; (800202c <HAL_TIM_Base_MspInit+0x188>)
 8001f80:	625a      	str	r2, [r3, #36]	; 0x24
 8001f82:	4a2a      	ldr	r2, [pc, #168]	; (800202c <HAL_TIM_Base_MspInit+0x188>)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001f88:	e043      	b.n	8002012 <HAL_TIM_Base_MspInit+0x16e>
  else if(tim_baseHandle->Instance==TIM8)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a29      	ldr	r2, [pc, #164]	; (8002034 <HAL_TIM_Base_MspInit+0x190>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d13e      	bne.n	8002012 <HAL_TIM_Base_MspInit+0x16e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001f94:	4b22      	ldr	r3, [pc, #136]	; (8002020 <HAL_TIM_Base_MspInit+0x17c>)
 8001f96:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001f9a:	4a21      	ldr	r2, [pc, #132]	; (8002020 <HAL_TIM_Base_MspInit+0x17c>)
 8001f9c:	f043 0302 	orr.w	r3, r3, #2
 8001fa0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001fa4:	4b1e      	ldr	r3, [pc, #120]	; (8002020 <HAL_TIM_Base_MspInit+0x17c>)
 8001fa6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001faa:	f003 0302 	and.w	r3, r3, #2
 8001fae:	60bb      	str	r3, [r7, #8]
 8001fb0:	68bb      	ldr	r3, [r7, #8]
    hdma_tim8_ch1.Instance = DMA1_Stream1;
 8001fb2:	4b21      	ldr	r3, [pc, #132]	; (8002038 <HAL_TIM_Base_MspInit+0x194>)
 8001fb4:	4a21      	ldr	r2, [pc, #132]	; (800203c <HAL_TIM_Base_MspInit+0x198>)
 8001fb6:	601a      	str	r2, [r3, #0]
    hdma_tim8_ch1.Init.Request = DMA_REQUEST_TIM8_CH1;
 8001fb8:	4b1f      	ldr	r3, [pc, #124]	; (8002038 <HAL_TIM_Base_MspInit+0x194>)
 8001fba:	222f      	movs	r2, #47	; 0x2f
 8001fbc:	605a      	str	r2, [r3, #4]
    hdma_tim8_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001fbe:	4b1e      	ldr	r3, [pc, #120]	; (8002038 <HAL_TIM_Base_MspInit+0x194>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	609a      	str	r2, [r3, #8]
    hdma_tim8_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fc4:	4b1c      	ldr	r3, [pc, #112]	; (8002038 <HAL_TIM_Base_MspInit+0x194>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	60da      	str	r2, [r3, #12]
    hdma_tim8_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001fca:	4b1b      	ldr	r3, [pc, #108]	; (8002038 <HAL_TIM_Base_MspInit+0x194>)
 8001fcc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001fd0:	611a      	str	r2, [r3, #16]
    hdma_tim8_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001fd2:	4b19      	ldr	r3, [pc, #100]	; (8002038 <HAL_TIM_Base_MspInit+0x194>)
 8001fd4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001fd8:	615a      	str	r2, [r3, #20]
    hdma_tim8_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001fda:	4b17      	ldr	r3, [pc, #92]	; (8002038 <HAL_TIM_Base_MspInit+0x194>)
 8001fdc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001fe0:	619a      	str	r2, [r3, #24]
    hdma_tim8_ch1.Init.Mode = DMA_CIRCULAR;
 8001fe2:	4b15      	ldr	r3, [pc, #84]	; (8002038 <HAL_TIM_Base_MspInit+0x194>)
 8001fe4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001fe8:	61da      	str	r2, [r3, #28]
    hdma_tim8_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001fea:	4b13      	ldr	r3, [pc, #76]	; (8002038 <HAL_TIM_Base_MspInit+0x194>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	621a      	str	r2, [r3, #32]
    hdma_tim8_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ff0:	4b11      	ldr	r3, [pc, #68]	; (8002038 <HAL_TIM_Base_MspInit+0x194>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim8_ch1) != HAL_OK)
 8001ff6:	4810      	ldr	r0, [pc, #64]	; (8002038 <HAL_TIM_Base_MspInit+0x194>)
 8001ff8:	f000 fb96 	bl	8002728 <HAL_DMA_Init>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d001      	beq.n	8002006 <HAL_TIM_Base_MspInit+0x162>
      Error_Handler();
 8002002:	f7fe fefd 	bl	8000e00 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim8_ch1);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4a0b      	ldr	r2, [pc, #44]	; (8002038 <HAL_TIM_Base_MspInit+0x194>)
 800200a:	625a      	str	r2, [r3, #36]	; 0x24
 800200c:	4a0a      	ldr	r2, [pc, #40]	; (8002038 <HAL_TIM_Base_MspInit+0x194>)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002012:	bf00      	nop
 8002014:	3718      	adds	r7, #24
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	40000400 	.word	0x40000400
 8002020:	58024400 	.word	0x58024400
 8002024:	40000800 	.word	0x40000800
 8002028:	40000c00 	.word	0x40000c00
 800202c:	24008758 	.word	0x24008758
 8002030:	40020088 	.word	0x40020088
 8002034:	40010400 	.word	0x40010400
 8002038:	240087d0 	.word	0x240087d0
 800203c:	40020028 	.word	0x40020028

08002040 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b08c      	sub	sp, #48	; 0x30
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002048:	f107 031c 	add.w	r3, r7, #28
 800204c:	2200      	movs	r2, #0
 800204e:	601a      	str	r2, [r3, #0]
 8002050:	605a      	str	r2, [r3, #4]
 8002052:	609a      	str	r2, [r3, #8]
 8002054:	60da      	str	r2, [r3, #12]
 8002056:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002060:	d120      	bne.n	80020a4 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002062:	4b49      	ldr	r3, [pc, #292]	; (8002188 <HAL_TIM_MspPostInit+0x148>)
 8002064:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002068:	4a47      	ldr	r2, [pc, #284]	; (8002188 <HAL_TIM_MspPostInit+0x148>)
 800206a:	f043 0301 	orr.w	r3, r3, #1
 800206e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002072:	4b45      	ldr	r3, [pc, #276]	; (8002188 <HAL_TIM_MspPostInit+0x148>)
 8002074:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002078:	f003 0301 	and.w	r3, r3, #1
 800207c:	61bb      	str	r3, [r7, #24]
 800207e:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA15(JTDI)     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002080:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002084:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002086:	2302      	movs	r3, #2
 8002088:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800208a:	2300      	movs	r3, #0
 800208c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800208e:	2300      	movs	r3, #0
 8002090:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002092:	2301      	movs	r3, #1
 8002094:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002096:	f107 031c 	add.w	r3, r7, #28
 800209a:	4619      	mov	r1, r3
 800209c:	483b      	ldr	r0, [pc, #236]	; (800218c <HAL_TIM_MspPostInit+0x14c>)
 800209e:	f003 fa81 	bl	80055a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80020a2:	e06d      	b.n	8002180 <HAL_TIM_MspPostInit+0x140>
  else if(timHandle->Instance==TIM3)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a39      	ldr	r2, [pc, #228]	; (8002190 <HAL_TIM_MspPostInit+0x150>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d11f      	bne.n	80020ee <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020ae:	4b36      	ldr	r3, [pc, #216]	; (8002188 <HAL_TIM_MspPostInit+0x148>)
 80020b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020b4:	4a34      	ldr	r2, [pc, #208]	; (8002188 <HAL_TIM_MspPostInit+0x148>)
 80020b6:	f043 0302 	orr.w	r3, r3, #2
 80020ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020be:	4b32      	ldr	r3, [pc, #200]	; (8002188 <HAL_TIM_MspPostInit+0x148>)
 80020c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020c4:	f003 0302 	and.w	r3, r3, #2
 80020c8:	617b      	str	r3, [r7, #20]
 80020ca:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80020cc:	2310      	movs	r3, #16
 80020ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020d0:	2302      	movs	r3, #2
 80020d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d4:	2300      	movs	r3, #0
 80020d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020d8:	2300      	movs	r3, #0
 80020da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80020dc:	2302      	movs	r3, #2
 80020de:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020e0:	f107 031c 	add.w	r3, r7, #28
 80020e4:	4619      	mov	r1, r3
 80020e6:	482b      	ldr	r0, [pc, #172]	; (8002194 <HAL_TIM_MspPostInit+0x154>)
 80020e8:	f003 fa5c 	bl	80055a4 <HAL_GPIO_Init>
}
 80020ec:	e048      	b.n	8002180 <HAL_TIM_MspPostInit+0x140>
  else if(timHandle->Instance==TIM5)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a29      	ldr	r2, [pc, #164]	; (8002198 <HAL_TIM_MspPostInit+0x158>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d11f      	bne.n	8002138 <HAL_TIM_MspPostInit+0xf8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020f8:	4b23      	ldr	r3, [pc, #140]	; (8002188 <HAL_TIM_MspPostInit+0x148>)
 80020fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020fe:	4a22      	ldr	r2, [pc, #136]	; (8002188 <HAL_TIM_MspPostInit+0x148>)
 8002100:	f043 0301 	orr.w	r3, r3, #1
 8002104:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002108:	4b1f      	ldr	r3, [pc, #124]	; (8002188 <HAL_TIM_MspPostInit+0x148>)
 800210a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800210e:	f003 0301 	and.w	r3, r3, #1
 8002112:	613b      	str	r3, [r7, #16]
 8002114:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002116:	2301      	movs	r3, #1
 8002118:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800211a:	2302      	movs	r3, #2
 800211c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800211e:	2300      	movs	r3, #0
 8002120:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002122:	2300      	movs	r3, #0
 8002124:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002126:	2302      	movs	r3, #2
 8002128:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800212a:	f107 031c 	add.w	r3, r7, #28
 800212e:	4619      	mov	r1, r3
 8002130:	4816      	ldr	r0, [pc, #88]	; (800218c <HAL_TIM_MspPostInit+0x14c>)
 8002132:	f003 fa37 	bl	80055a4 <HAL_GPIO_Init>
}
 8002136:	e023      	b.n	8002180 <HAL_TIM_MspPostInit+0x140>
  else if(timHandle->Instance==TIM8)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a17      	ldr	r2, [pc, #92]	; (800219c <HAL_TIM_MspPostInit+0x15c>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d11e      	bne.n	8002180 <HAL_TIM_MspPostInit+0x140>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002142:	4b11      	ldr	r3, [pc, #68]	; (8002188 <HAL_TIM_MspPostInit+0x148>)
 8002144:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002148:	4a0f      	ldr	r2, [pc, #60]	; (8002188 <HAL_TIM_MspPostInit+0x148>)
 800214a:	f043 0304 	orr.w	r3, r3, #4
 800214e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002152:	4b0d      	ldr	r3, [pc, #52]	; (8002188 <HAL_TIM_MspPostInit+0x148>)
 8002154:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002158:	f003 0304 	and.w	r3, r3, #4
 800215c:	60fb      	str	r3, [r7, #12]
 800215e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002160:	2340      	movs	r3, #64	; 0x40
 8002162:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002164:	2302      	movs	r3, #2
 8002166:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002168:	2300      	movs	r3, #0
 800216a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800216c:	2300      	movs	r3, #0
 800216e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002170:	2303      	movs	r3, #3
 8002172:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002174:	f107 031c 	add.w	r3, r7, #28
 8002178:	4619      	mov	r1, r3
 800217a:	4809      	ldr	r0, [pc, #36]	; (80021a0 <HAL_TIM_MspPostInit+0x160>)
 800217c:	f003 fa12 	bl	80055a4 <HAL_GPIO_Init>
}
 8002180:	bf00      	nop
 8002182:	3730      	adds	r7, #48	; 0x30
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}
 8002188:	58024400 	.word	0x58024400
 800218c:	58020000 	.word	0x58020000
 8002190:	40000400 	.word	0x40000400
 8002194:	58020400 	.word	0x58020400
 8002198:	40000c00 	.word	0x40000c00
 800219c:	40010400 	.word	0x40010400
 80021a0:	58020800 	.word	0x58020800

080021a4 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80021a8:	4b22      	ldr	r3, [pc, #136]	; (8002234 <MX_USART3_UART_Init+0x90>)
 80021aa:	4a23      	ldr	r2, [pc, #140]	; (8002238 <MX_USART3_UART_Init+0x94>)
 80021ac:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80021ae:	4b21      	ldr	r3, [pc, #132]	; (8002234 <MX_USART3_UART_Init+0x90>)
 80021b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80021b4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80021b6:	4b1f      	ldr	r3, [pc, #124]	; (8002234 <MX_USART3_UART_Init+0x90>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80021bc:	4b1d      	ldr	r3, [pc, #116]	; (8002234 <MX_USART3_UART_Init+0x90>)
 80021be:	2200      	movs	r2, #0
 80021c0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80021c2:	4b1c      	ldr	r3, [pc, #112]	; (8002234 <MX_USART3_UART_Init+0x90>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80021c8:	4b1a      	ldr	r3, [pc, #104]	; (8002234 <MX_USART3_UART_Init+0x90>)
 80021ca:	220c      	movs	r2, #12
 80021cc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021ce:	4b19      	ldr	r3, [pc, #100]	; (8002234 <MX_USART3_UART_Init+0x90>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80021d4:	4b17      	ldr	r3, [pc, #92]	; (8002234 <MX_USART3_UART_Init+0x90>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80021da:	4b16      	ldr	r3, [pc, #88]	; (8002234 <MX_USART3_UART_Init+0x90>)
 80021dc:	2200      	movs	r2, #0
 80021de:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80021e0:	4b14      	ldr	r3, [pc, #80]	; (8002234 <MX_USART3_UART_Init+0x90>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80021e6:	4b13      	ldr	r3, [pc, #76]	; (8002234 <MX_USART3_UART_Init+0x90>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80021ec:	4811      	ldr	r0, [pc, #68]	; (8002234 <MX_USART3_UART_Init+0x90>)
 80021ee:	f007 fee1 	bl	8009fb4 <HAL_UART_Init>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d001      	beq.n	80021fc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80021f8:	f7fe fe02 	bl	8000e00 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80021fc:	2100      	movs	r1, #0
 80021fe:	480d      	ldr	r0, [pc, #52]	; (8002234 <MX_USART3_UART_Init+0x90>)
 8002200:	f008 ffe7 	bl	800b1d2 <HAL_UARTEx_SetTxFifoThreshold>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d001      	beq.n	800220e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800220a:	f7fe fdf9 	bl	8000e00 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800220e:	2100      	movs	r1, #0
 8002210:	4808      	ldr	r0, [pc, #32]	; (8002234 <MX_USART3_UART_Init+0x90>)
 8002212:	f009 f81c 	bl	800b24e <HAL_UARTEx_SetRxFifoThreshold>
 8002216:	4603      	mov	r3, r0
 8002218:	2b00      	cmp	r3, #0
 800221a:	d001      	beq.n	8002220 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800221c:	f7fe fdf0 	bl	8000e00 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002220:	4804      	ldr	r0, [pc, #16]	; (8002234 <MX_USART3_UART_Init+0x90>)
 8002222:	f008 ff9d 	bl	800b160 <HAL_UARTEx_DisableFifoMode>
 8002226:	4603      	mov	r3, r0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d001      	beq.n	8002230 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800222c:	f7fe fde8 	bl	8000e00 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002230:	bf00      	nop
 8002232:	bd80      	pop	{r7, pc}
 8002234:	24008848 	.word	0x24008848
 8002238:	40004800 	.word	0x40004800

0800223c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b0b8      	sub	sp, #224	; 0xe0
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002244:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002248:	2200      	movs	r2, #0
 800224a:	601a      	str	r2, [r3, #0]
 800224c:	605a      	str	r2, [r3, #4]
 800224e:	609a      	str	r2, [r3, #8]
 8002250:	60da      	str	r2, [r3, #12]
 8002252:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002254:	f107 0310 	add.w	r3, r7, #16
 8002258:	22b8      	movs	r2, #184	; 0xb8
 800225a:	2100      	movs	r1, #0
 800225c:	4618      	mov	r0, r3
 800225e:	f009 f883 	bl	800b368 <memset>
  if(uartHandle->Instance==USART3)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a27      	ldr	r2, [pc, #156]	; (8002304 <HAL_UART_MspInit+0xc8>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d146      	bne.n	80022fa <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800226c:	f04f 0202 	mov.w	r2, #2
 8002270:	f04f 0300 	mov.w	r3, #0
 8002274:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002278:	2300      	movs	r3, #0
 800227a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800227e:	f107 0310 	add.w	r3, r7, #16
 8002282:	4618      	mov	r0, r3
 8002284:	f004 fb2e 	bl	80068e4 <HAL_RCCEx_PeriphCLKConfig>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d001      	beq.n	8002292 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800228e:	f7fe fdb7 	bl	8000e00 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002292:	4b1d      	ldr	r3, [pc, #116]	; (8002308 <HAL_UART_MspInit+0xcc>)
 8002294:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002298:	4a1b      	ldr	r2, [pc, #108]	; (8002308 <HAL_UART_MspInit+0xcc>)
 800229a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800229e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80022a2:	4b19      	ldr	r3, [pc, #100]	; (8002308 <HAL_UART_MspInit+0xcc>)
 80022a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80022a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022ac:	60fb      	str	r3, [r7, #12]
 80022ae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80022b0:	4b15      	ldr	r3, [pc, #84]	; (8002308 <HAL_UART_MspInit+0xcc>)
 80022b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022b6:	4a14      	ldr	r2, [pc, #80]	; (8002308 <HAL_UART_MspInit+0xcc>)
 80022b8:	f043 0308 	orr.w	r3, r3, #8
 80022bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80022c0:	4b11      	ldr	r3, [pc, #68]	; (8002308 <HAL_UART_MspInit+0xcc>)
 80022c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022c6:	f003 0308 	and.w	r3, r3, #8
 80022ca:	60bb      	str	r3, [r7, #8]
 80022cc:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 80022ce:	f44f 7340 	mov.w	r3, #768	; 0x300
 80022d2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022d6:	2302      	movs	r3, #2
 80022d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022dc:	2300      	movs	r3, #0
 80022de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022e2:	2300      	movs	r3, #0
 80022e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80022e8:	2307      	movs	r3, #7
 80022ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022ee:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80022f2:	4619      	mov	r1, r3
 80022f4:	4805      	ldr	r0, [pc, #20]	; (800230c <HAL_UART_MspInit+0xd0>)
 80022f6:	f003 f955 	bl	80055a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80022fa:	bf00      	nop
 80022fc:	37e0      	adds	r7, #224	; 0xe0
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	40004800 	.word	0x40004800
 8002308:	58024400 	.word	0x58024400
 800230c:	58020c00 	.word	0x58020c00

08002310 <MX_USB_OTG_HS_USB_Init>:
/* USER CODE END 0 */

/* USB_OTG_HS init function */

void MX_USB_OTG_HS_USB_Init(void)
{
 8002310:	b480      	push	{r7}
 8002312:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8002314:	bf00      	nop
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr
	...

08002320 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002320:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002358 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002324:	f7ff faba 	bl	800189c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002328:	480c      	ldr	r0, [pc, #48]	; (800235c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800232a:	490d      	ldr	r1, [pc, #52]	; (8002360 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800232c:	4a0d      	ldr	r2, [pc, #52]	; (8002364 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800232e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002330:	e002      	b.n	8002338 <LoopCopyDataInit>

08002332 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002332:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002334:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002336:	3304      	adds	r3, #4

08002338 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002338:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800233a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800233c:	d3f9      	bcc.n	8002332 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800233e:	4a0a      	ldr	r2, [pc, #40]	; (8002368 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002340:	4c0a      	ldr	r4, [pc, #40]	; (800236c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002342:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002344:	e001      	b.n	800234a <LoopFillZerobss>

08002346 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002346:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002348:	3204      	adds	r2, #4

0800234a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800234a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800234c:	d3fb      	bcc.n	8002346 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800234e:	f009 f813 	bl	800b378 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002352:	f7fe fc15 	bl	8000b80 <main>
  bx  lr
 8002356:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002358:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 800235c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002360:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8002364:	0800b428 	.word	0x0800b428
  ldr r2, =_sbss
 8002368:	240000d0 	.word	0x240000d0
  ldr r4, =_ebss
 800236c:	240088e0 	.word	0x240088e0

08002370 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002370:	e7fe      	b.n	8002370 <ADC3_IRQHandler>
	...

08002374 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b082      	sub	sp, #8
 8002378:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800237a:	2003      	movs	r0, #3
 800237c:	f000 f994 	bl	80026a8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002380:	f004 f8da 	bl	8006538 <HAL_RCC_GetSysClockFreq>
 8002384:	4602      	mov	r2, r0
 8002386:	4b15      	ldr	r3, [pc, #84]	; (80023dc <HAL_Init+0x68>)
 8002388:	699b      	ldr	r3, [r3, #24]
 800238a:	0a1b      	lsrs	r3, r3, #8
 800238c:	f003 030f 	and.w	r3, r3, #15
 8002390:	4913      	ldr	r1, [pc, #76]	; (80023e0 <HAL_Init+0x6c>)
 8002392:	5ccb      	ldrb	r3, [r1, r3]
 8002394:	f003 031f 	and.w	r3, r3, #31
 8002398:	fa22 f303 	lsr.w	r3, r2, r3
 800239c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800239e:	4b0f      	ldr	r3, [pc, #60]	; (80023dc <HAL_Init+0x68>)
 80023a0:	699b      	ldr	r3, [r3, #24]
 80023a2:	f003 030f 	and.w	r3, r3, #15
 80023a6:	4a0e      	ldr	r2, [pc, #56]	; (80023e0 <HAL_Init+0x6c>)
 80023a8:	5cd3      	ldrb	r3, [r2, r3]
 80023aa:	f003 031f 	and.w	r3, r3, #31
 80023ae:	687a      	ldr	r2, [r7, #4]
 80023b0:	fa22 f303 	lsr.w	r3, r2, r3
 80023b4:	4a0b      	ldr	r2, [pc, #44]	; (80023e4 <HAL_Init+0x70>)
 80023b6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80023b8:	4a0b      	ldr	r2, [pc, #44]	; (80023e8 <HAL_Init+0x74>)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80023be:	2000      	movs	r0, #0
 80023c0:	f000 f814 	bl	80023ec <HAL_InitTick>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d001      	beq.n	80023ce <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e002      	b.n	80023d4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80023ce:	f7ff f9b5 	bl	800173c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023d2:	2300      	movs	r3, #0
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	3708      	adds	r7, #8
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	58024400 	.word	0x58024400
 80023e0:	0800b3d8 	.word	0x0800b3d8
 80023e4:	24000004 	.word	0x24000004
 80023e8:	24000000 	.word	0x24000000

080023ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80023f4:	4b15      	ldr	r3, [pc, #84]	; (800244c <HAL_InitTick+0x60>)
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d101      	bne.n	8002400 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	e021      	b.n	8002444 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002400:	4b13      	ldr	r3, [pc, #76]	; (8002450 <HAL_InitTick+0x64>)
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	4b11      	ldr	r3, [pc, #68]	; (800244c <HAL_InitTick+0x60>)
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	4619      	mov	r1, r3
 800240a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800240e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002412:	fbb2 f3f3 	udiv	r3, r2, r3
 8002416:	4618      	mov	r0, r3
 8002418:	f000 f979 	bl	800270e <HAL_SYSTICK_Config>
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d001      	beq.n	8002426 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e00e      	b.n	8002444 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2b0f      	cmp	r3, #15
 800242a:	d80a      	bhi.n	8002442 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800242c:	2200      	movs	r2, #0
 800242e:	6879      	ldr	r1, [r7, #4]
 8002430:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002434:	f000 f943 	bl	80026be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002438:	4a06      	ldr	r2, [pc, #24]	; (8002454 <HAL_InitTick+0x68>)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800243e:	2300      	movs	r3, #0
 8002440:	e000      	b.n	8002444 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
}
 8002444:	4618      	mov	r0, r3
 8002446:	3708      	adds	r7, #8
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}
 800244c:	2400000c 	.word	0x2400000c
 8002450:	24000000 	.word	0x24000000
 8002454:	24000008 	.word	0x24000008

08002458 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002458:	b480      	push	{r7}
 800245a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800245c:	4b06      	ldr	r3, [pc, #24]	; (8002478 <HAL_IncTick+0x20>)
 800245e:	781b      	ldrb	r3, [r3, #0]
 8002460:	461a      	mov	r2, r3
 8002462:	4b06      	ldr	r3, [pc, #24]	; (800247c <HAL_IncTick+0x24>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4413      	add	r3, r2
 8002468:	4a04      	ldr	r2, [pc, #16]	; (800247c <HAL_IncTick+0x24>)
 800246a:	6013      	str	r3, [r2, #0]
}
 800246c:	bf00      	nop
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr
 8002476:	bf00      	nop
 8002478:	2400000c 	.word	0x2400000c
 800247c:	240088dc 	.word	0x240088dc

08002480 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002480:	b480      	push	{r7}
 8002482:	af00      	add	r7, sp, #0
  return uwTick;
 8002484:	4b03      	ldr	r3, [pc, #12]	; (8002494 <HAL_GetTick+0x14>)
 8002486:	681b      	ldr	r3, [r3, #0]
}
 8002488:	4618      	mov	r0, r3
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr
 8002492:	bf00      	nop
 8002494:	240088dc 	.word	0x240088dc

08002498 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b084      	sub	sp, #16
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024a0:	f7ff ffee 	bl	8002480 <HAL_GetTick>
 80024a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80024b0:	d005      	beq.n	80024be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024b2:	4b0a      	ldr	r3, [pc, #40]	; (80024dc <HAL_Delay+0x44>)
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	461a      	mov	r2, r3
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	4413      	add	r3, r2
 80024bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80024be:	bf00      	nop
 80024c0:	f7ff ffde 	bl	8002480 <HAL_GetTick>
 80024c4:	4602      	mov	r2, r0
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	1ad3      	subs	r3, r2, r3
 80024ca:	68fa      	ldr	r2, [r7, #12]
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d8f7      	bhi.n	80024c0 <HAL_Delay+0x28>
  {
  }
}
 80024d0:	bf00      	nop
 80024d2:	bf00      	nop
 80024d4:	3710      	adds	r7, #16
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	2400000c 	.word	0x2400000c

080024e0 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b083      	sub	sp, #12
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80024e8:	4b06      	ldr	r3, [pc, #24]	; (8002504 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80024f0:	4904      	ldr	r1, [pc, #16]	; (8002504 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	4313      	orrs	r3, r2
 80024f6:	604b      	str	r3, [r1, #4]
}
 80024f8:	bf00      	nop
 80024fa:	370c      	adds	r7, #12
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr
 8002504:	58000400 	.word	0x58000400

08002508 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002508:	b480      	push	{r7}
 800250a:	b085      	sub	sp, #20
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	f003 0307 	and.w	r3, r3, #7
 8002516:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002518:	4b0b      	ldr	r3, [pc, #44]	; (8002548 <__NVIC_SetPriorityGrouping+0x40>)
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800251e:	68ba      	ldr	r2, [r7, #8]
 8002520:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002524:	4013      	ands	r3, r2
 8002526:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002530:	4b06      	ldr	r3, [pc, #24]	; (800254c <__NVIC_SetPriorityGrouping+0x44>)
 8002532:	4313      	orrs	r3, r2
 8002534:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002536:	4a04      	ldr	r2, [pc, #16]	; (8002548 <__NVIC_SetPriorityGrouping+0x40>)
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	60d3      	str	r3, [r2, #12]
}
 800253c:	bf00      	nop
 800253e:	3714      	adds	r7, #20
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr
 8002548:	e000ed00 	.word	0xe000ed00
 800254c:	05fa0000 	.word	0x05fa0000

08002550 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002550:	b480      	push	{r7}
 8002552:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002554:	4b04      	ldr	r3, [pc, #16]	; (8002568 <__NVIC_GetPriorityGrouping+0x18>)
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	0a1b      	lsrs	r3, r3, #8
 800255a:	f003 0307 	and.w	r3, r3, #7
}
 800255e:	4618      	mov	r0, r3
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr
 8002568:	e000ed00 	.word	0xe000ed00

0800256c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800256c:	b480      	push	{r7}
 800256e:	b083      	sub	sp, #12
 8002570:	af00      	add	r7, sp, #0
 8002572:	4603      	mov	r3, r0
 8002574:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002576:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800257a:	2b00      	cmp	r3, #0
 800257c:	db0b      	blt.n	8002596 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800257e:	88fb      	ldrh	r3, [r7, #6]
 8002580:	f003 021f 	and.w	r2, r3, #31
 8002584:	4907      	ldr	r1, [pc, #28]	; (80025a4 <__NVIC_EnableIRQ+0x38>)
 8002586:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800258a:	095b      	lsrs	r3, r3, #5
 800258c:	2001      	movs	r0, #1
 800258e:	fa00 f202 	lsl.w	r2, r0, r2
 8002592:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002596:	bf00      	nop
 8002598:	370c      	adds	r7, #12
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr
 80025a2:	bf00      	nop
 80025a4:	e000e100 	.word	0xe000e100

080025a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	4603      	mov	r3, r0
 80025b0:	6039      	str	r1, [r7, #0]
 80025b2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80025b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	db0a      	blt.n	80025d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	b2da      	uxtb	r2, r3
 80025c0:	490c      	ldr	r1, [pc, #48]	; (80025f4 <__NVIC_SetPriority+0x4c>)
 80025c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025c6:	0112      	lsls	r2, r2, #4
 80025c8:	b2d2      	uxtb	r2, r2
 80025ca:	440b      	add	r3, r1
 80025cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025d0:	e00a      	b.n	80025e8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	b2da      	uxtb	r2, r3
 80025d6:	4908      	ldr	r1, [pc, #32]	; (80025f8 <__NVIC_SetPriority+0x50>)
 80025d8:	88fb      	ldrh	r3, [r7, #6]
 80025da:	f003 030f 	and.w	r3, r3, #15
 80025de:	3b04      	subs	r3, #4
 80025e0:	0112      	lsls	r2, r2, #4
 80025e2:	b2d2      	uxtb	r2, r2
 80025e4:	440b      	add	r3, r1
 80025e6:	761a      	strb	r2, [r3, #24]
}
 80025e8:	bf00      	nop
 80025ea:	370c      	adds	r7, #12
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr
 80025f4:	e000e100 	.word	0xe000e100
 80025f8:	e000ed00 	.word	0xe000ed00

080025fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b089      	sub	sp, #36	; 0x24
 8002600:	af00      	add	r7, sp, #0
 8002602:	60f8      	str	r0, [r7, #12]
 8002604:	60b9      	str	r1, [r7, #8]
 8002606:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	f003 0307 	and.w	r3, r3, #7
 800260e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002610:	69fb      	ldr	r3, [r7, #28]
 8002612:	f1c3 0307 	rsb	r3, r3, #7
 8002616:	2b04      	cmp	r3, #4
 8002618:	bf28      	it	cs
 800261a:	2304      	movcs	r3, #4
 800261c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	3304      	adds	r3, #4
 8002622:	2b06      	cmp	r3, #6
 8002624:	d902      	bls.n	800262c <NVIC_EncodePriority+0x30>
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	3b03      	subs	r3, #3
 800262a:	e000      	b.n	800262e <NVIC_EncodePriority+0x32>
 800262c:	2300      	movs	r3, #0
 800262e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002630:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002634:	69bb      	ldr	r3, [r7, #24]
 8002636:	fa02 f303 	lsl.w	r3, r2, r3
 800263a:	43da      	mvns	r2, r3
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	401a      	ands	r2, r3
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002644:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	fa01 f303 	lsl.w	r3, r1, r3
 800264e:	43d9      	mvns	r1, r3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002654:	4313      	orrs	r3, r2
         );
}
 8002656:	4618      	mov	r0, r3
 8002658:	3724      	adds	r7, #36	; 0x24
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr
	...

08002664 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b082      	sub	sp, #8
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	3b01      	subs	r3, #1
 8002670:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002674:	d301      	bcc.n	800267a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002676:	2301      	movs	r3, #1
 8002678:	e00f      	b.n	800269a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800267a:	4a0a      	ldr	r2, [pc, #40]	; (80026a4 <SysTick_Config+0x40>)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	3b01      	subs	r3, #1
 8002680:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002682:	210f      	movs	r1, #15
 8002684:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002688:	f7ff ff8e 	bl	80025a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800268c:	4b05      	ldr	r3, [pc, #20]	; (80026a4 <SysTick_Config+0x40>)
 800268e:	2200      	movs	r2, #0
 8002690:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002692:	4b04      	ldr	r3, [pc, #16]	; (80026a4 <SysTick_Config+0x40>)
 8002694:	2207      	movs	r2, #7
 8002696:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002698:	2300      	movs	r3, #0
}
 800269a:	4618      	mov	r0, r3
 800269c:	3708      	adds	r7, #8
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	e000e010 	.word	0xe000e010

080026a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	f7ff ff29 	bl	8002508 <__NVIC_SetPriorityGrouping>
}
 80026b6:	bf00      	nop
 80026b8:	3708      	adds	r7, #8
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}

080026be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026be:	b580      	push	{r7, lr}
 80026c0:	b086      	sub	sp, #24
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	4603      	mov	r3, r0
 80026c6:	60b9      	str	r1, [r7, #8]
 80026c8:	607a      	str	r2, [r7, #4]
 80026ca:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80026cc:	f7ff ff40 	bl	8002550 <__NVIC_GetPriorityGrouping>
 80026d0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	68b9      	ldr	r1, [r7, #8]
 80026d6:	6978      	ldr	r0, [r7, #20]
 80026d8:	f7ff ff90 	bl	80025fc <NVIC_EncodePriority>
 80026dc:	4602      	mov	r2, r0
 80026de:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80026e2:	4611      	mov	r1, r2
 80026e4:	4618      	mov	r0, r3
 80026e6:	f7ff ff5f 	bl	80025a8 <__NVIC_SetPriority>
}
 80026ea:	bf00      	nop
 80026ec:	3718      	adds	r7, #24
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}

080026f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026f2:	b580      	push	{r7, lr}
 80026f4:	b082      	sub	sp, #8
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	4603      	mov	r3, r0
 80026fa:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002700:	4618      	mov	r0, r3
 8002702:	f7ff ff33 	bl	800256c <__NVIC_EnableIRQ>
}
 8002706:	bf00      	nop
 8002708:	3708      	adds	r7, #8
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}

0800270e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800270e:	b580      	push	{r7, lr}
 8002710:	b082      	sub	sp, #8
 8002712:	af00      	add	r7, sp, #0
 8002714:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	f7ff ffa4 	bl	8002664 <SysTick_Config>
 800271c:	4603      	mov	r3, r0
}
 800271e:	4618      	mov	r0, r3
 8002720:	3708      	adds	r7, #8
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
	...

08002728 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b086      	sub	sp, #24
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002730:	f7ff fea6 	bl	8002480 <HAL_GetTick>
 8002734:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d101      	bne.n	8002740 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	e312      	b.n	8002d66 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a66      	ldr	r2, [pc, #408]	; (80028e0 <HAL_DMA_Init+0x1b8>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d04a      	beq.n	80027e0 <HAL_DMA_Init+0xb8>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a65      	ldr	r2, [pc, #404]	; (80028e4 <HAL_DMA_Init+0x1bc>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d045      	beq.n	80027e0 <HAL_DMA_Init+0xb8>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a63      	ldr	r2, [pc, #396]	; (80028e8 <HAL_DMA_Init+0x1c0>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d040      	beq.n	80027e0 <HAL_DMA_Init+0xb8>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a62      	ldr	r2, [pc, #392]	; (80028ec <HAL_DMA_Init+0x1c4>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d03b      	beq.n	80027e0 <HAL_DMA_Init+0xb8>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a60      	ldr	r2, [pc, #384]	; (80028f0 <HAL_DMA_Init+0x1c8>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d036      	beq.n	80027e0 <HAL_DMA_Init+0xb8>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a5f      	ldr	r2, [pc, #380]	; (80028f4 <HAL_DMA_Init+0x1cc>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d031      	beq.n	80027e0 <HAL_DMA_Init+0xb8>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a5d      	ldr	r2, [pc, #372]	; (80028f8 <HAL_DMA_Init+0x1d0>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d02c      	beq.n	80027e0 <HAL_DMA_Init+0xb8>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a5c      	ldr	r2, [pc, #368]	; (80028fc <HAL_DMA_Init+0x1d4>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d027      	beq.n	80027e0 <HAL_DMA_Init+0xb8>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a5a      	ldr	r2, [pc, #360]	; (8002900 <HAL_DMA_Init+0x1d8>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d022      	beq.n	80027e0 <HAL_DMA_Init+0xb8>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a59      	ldr	r2, [pc, #356]	; (8002904 <HAL_DMA_Init+0x1dc>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d01d      	beq.n	80027e0 <HAL_DMA_Init+0xb8>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a57      	ldr	r2, [pc, #348]	; (8002908 <HAL_DMA_Init+0x1e0>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d018      	beq.n	80027e0 <HAL_DMA_Init+0xb8>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a56      	ldr	r2, [pc, #344]	; (800290c <HAL_DMA_Init+0x1e4>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d013      	beq.n	80027e0 <HAL_DMA_Init+0xb8>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a54      	ldr	r2, [pc, #336]	; (8002910 <HAL_DMA_Init+0x1e8>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d00e      	beq.n	80027e0 <HAL_DMA_Init+0xb8>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a53      	ldr	r2, [pc, #332]	; (8002914 <HAL_DMA_Init+0x1ec>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d009      	beq.n	80027e0 <HAL_DMA_Init+0xb8>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a51      	ldr	r2, [pc, #324]	; (8002918 <HAL_DMA_Init+0x1f0>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d004      	beq.n	80027e0 <HAL_DMA_Init+0xb8>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a50      	ldr	r2, [pc, #320]	; (800291c <HAL_DMA_Init+0x1f4>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d101      	bne.n	80027e4 <HAL_DMA_Init+0xbc>
 80027e0:	2301      	movs	r3, #1
 80027e2:	e000      	b.n	80027e6 <HAL_DMA_Init+0xbe>
 80027e4:	2300      	movs	r3, #0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	f000 813c 	beq.w	8002a64 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2202      	movs	r2, #2
 80027f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2200      	movs	r2, #0
 80027f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a37      	ldr	r2, [pc, #220]	; (80028e0 <HAL_DMA_Init+0x1b8>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d04a      	beq.n	800289c <HAL_DMA_Init+0x174>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a36      	ldr	r2, [pc, #216]	; (80028e4 <HAL_DMA_Init+0x1bc>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d045      	beq.n	800289c <HAL_DMA_Init+0x174>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a34      	ldr	r2, [pc, #208]	; (80028e8 <HAL_DMA_Init+0x1c0>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d040      	beq.n	800289c <HAL_DMA_Init+0x174>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a33      	ldr	r2, [pc, #204]	; (80028ec <HAL_DMA_Init+0x1c4>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d03b      	beq.n	800289c <HAL_DMA_Init+0x174>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a31      	ldr	r2, [pc, #196]	; (80028f0 <HAL_DMA_Init+0x1c8>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d036      	beq.n	800289c <HAL_DMA_Init+0x174>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a30      	ldr	r2, [pc, #192]	; (80028f4 <HAL_DMA_Init+0x1cc>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d031      	beq.n	800289c <HAL_DMA_Init+0x174>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a2e      	ldr	r2, [pc, #184]	; (80028f8 <HAL_DMA_Init+0x1d0>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d02c      	beq.n	800289c <HAL_DMA_Init+0x174>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a2d      	ldr	r2, [pc, #180]	; (80028fc <HAL_DMA_Init+0x1d4>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d027      	beq.n	800289c <HAL_DMA_Init+0x174>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a2b      	ldr	r2, [pc, #172]	; (8002900 <HAL_DMA_Init+0x1d8>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d022      	beq.n	800289c <HAL_DMA_Init+0x174>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a2a      	ldr	r2, [pc, #168]	; (8002904 <HAL_DMA_Init+0x1dc>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d01d      	beq.n	800289c <HAL_DMA_Init+0x174>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a28      	ldr	r2, [pc, #160]	; (8002908 <HAL_DMA_Init+0x1e0>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d018      	beq.n	800289c <HAL_DMA_Init+0x174>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a27      	ldr	r2, [pc, #156]	; (800290c <HAL_DMA_Init+0x1e4>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d013      	beq.n	800289c <HAL_DMA_Init+0x174>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a25      	ldr	r2, [pc, #148]	; (8002910 <HAL_DMA_Init+0x1e8>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d00e      	beq.n	800289c <HAL_DMA_Init+0x174>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a24      	ldr	r2, [pc, #144]	; (8002914 <HAL_DMA_Init+0x1ec>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d009      	beq.n	800289c <HAL_DMA_Init+0x174>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a22      	ldr	r2, [pc, #136]	; (8002918 <HAL_DMA_Init+0x1f0>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d004      	beq.n	800289c <HAL_DMA_Init+0x174>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a21      	ldr	r2, [pc, #132]	; (800291c <HAL_DMA_Init+0x1f4>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d108      	bne.n	80028ae <HAL_DMA_Init+0x186>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f022 0201 	bic.w	r2, r2, #1
 80028aa:	601a      	str	r2, [r3, #0]
 80028ac:	e007      	b.n	80028be <HAL_DMA_Init+0x196>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f022 0201 	bic.w	r2, r2, #1
 80028bc:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80028be:	e02f      	b.n	8002920 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80028c0:	f7ff fdde 	bl	8002480 <HAL_GetTick>
 80028c4:	4602      	mov	r2, r0
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	2b05      	cmp	r3, #5
 80028cc:	d928      	bls.n	8002920 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2220      	movs	r2, #32
 80028d2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2203      	movs	r2, #3
 80028d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	e242      	b.n	8002d66 <HAL_DMA_Init+0x63e>
 80028e0:	40020010 	.word	0x40020010
 80028e4:	40020028 	.word	0x40020028
 80028e8:	40020040 	.word	0x40020040
 80028ec:	40020058 	.word	0x40020058
 80028f0:	40020070 	.word	0x40020070
 80028f4:	40020088 	.word	0x40020088
 80028f8:	400200a0 	.word	0x400200a0
 80028fc:	400200b8 	.word	0x400200b8
 8002900:	40020410 	.word	0x40020410
 8002904:	40020428 	.word	0x40020428
 8002908:	40020440 	.word	0x40020440
 800290c:	40020458 	.word	0x40020458
 8002910:	40020470 	.word	0x40020470
 8002914:	40020488 	.word	0x40020488
 8002918:	400204a0 	.word	0x400204a0
 800291c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0301 	and.w	r3, r3, #1
 800292a:	2b00      	cmp	r3, #0
 800292c:	d1c8      	bne.n	80028c0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002936:	697a      	ldr	r2, [r7, #20]
 8002938:	4b83      	ldr	r3, [pc, #524]	; (8002b48 <HAL_DMA_Init+0x420>)
 800293a:	4013      	ands	r3, r2
 800293c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002946:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	691b      	ldr	r3, [r3, #16]
 800294c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002952:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	699b      	ldr	r3, [r3, #24]
 8002958:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800295e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6a1b      	ldr	r3, [r3, #32]
 8002964:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002966:	697a      	ldr	r2, [r7, #20]
 8002968:	4313      	orrs	r3, r2
 800296a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002970:	2b04      	cmp	r3, #4
 8002972:	d107      	bne.n	8002984 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297c:	4313      	orrs	r3, r2
 800297e:	697a      	ldr	r2, [r7, #20]
 8002980:	4313      	orrs	r3, r2
 8002982:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	2b28      	cmp	r3, #40	; 0x28
 800298a:	d903      	bls.n	8002994 <HAL_DMA_Init+0x26c>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	2b2e      	cmp	r3, #46	; 0x2e
 8002992:	d91f      	bls.n	80029d4 <HAL_DMA_Init+0x2ac>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	2b3e      	cmp	r3, #62	; 0x3e
 800299a:	d903      	bls.n	80029a4 <HAL_DMA_Init+0x27c>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	2b42      	cmp	r3, #66	; 0x42
 80029a2:	d917      	bls.n	80029d4 <HAL_DMA_Init+0x2ac>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	2b46      	cmp	r3, #70	; 0x46
 80029aa:	d903      	bls.n	80029b4 <HAL_DMA_Init+0x28c>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	2b48      	cmp	r3, #72	; 0x48
 80029b2:	d90f      	bls.n	80029d4 <HAL_DMA_Init+0x2ac>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	2b4e      	cmp	r3, #78	; 0x4e
 80029ba:	d903      	bls.n	80029c4 <HAL_DMA_Init+0x29c>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	2b52      	cmp	r3, #82	; 0x52
 80029c2:	d907      	bls.n	80029d4 <HAL_DMA_Init+0x2ac>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	2b73      	cmp	r3, #115	; 0x73
 80029ca:	d905      	bls.n	80029d8 <HAL_DMA_Init+0x2b0>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	2b77      	cmp	r3, #119	; 0x77
 80029d2:	d801      	bhi.n	80029d8 <HAL_DMA_Init+0x2b0>
 80029d4:	2301      	movs	r3, #1
 80029d6:	e000      	b.n	80029da <HAL_DMA_Init+0x2b2>
 80029d8:	2300      	movs	r3, #0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d003      	beq.n	80029e6 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029e4:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	697a      	ldr	r2, [r7, #20]
 80029ec:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	695b      	ldr	r3, [r3, #20]
 80029f4:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	f023 0307 	bic.w	r3, r3, #7
 80029fc:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a02:	697a      	ldr	r2, [r7, #20]
 8002a04:	4313      	orrs	r3, r2
 8002a06:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a0c:	2b04      	cmp	r3, #4
 8002a0e:	d117      	bne.n	8002a40 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a14:	697a      	ldr	r2, [r7, #20]
 8002a16:	4313      	orrs	r3, r2
 8002a18:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d00e      	beq.n	8002a40 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f002 f810 	bl	8004a48 <DMA_CheckFifoParam>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d008      	beq.n	8002a40 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2240      	movs	r2, #64	; 0x40
 8002a32:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2201      	movs	r2, #1
 8002a38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e192      	b.n	8002d66 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	697a      	ldr	r2, [r7, #20]
 8002a46:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002a48:	6878      	ldr	r0, [r7, #4]
 8002a4a:	f001 ff4b 	bl	80048e4 <DMA_CalcBaseAndBitshift>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a56:	f003 031f 	and.w	r3, r3, #31
 8002a5a:	223f      	movs	r2, #63	; 0x3f
 8002a5c:	409a      	lsls	r2, r3
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	609a      	str	r2, [r3, #8]
 8002a62:	e0c8      	b.n	8002bf6 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a38      	ldr	r2, [pc, #224]	; (8002b4c <HAL_DMA_Init+0x424>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d022      	beq.n	8002ab4 <HAL_DMA_Init+0x38c>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a37      	ldr	r2, [pc, #220]	; (8002b50 <HAL_DMA_Init+0x428>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d01d      	beq.n	8002ab4 <HAL_DMA_Init+0x38c>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a35      	ldr	r2, [pc, #212]	; (8002b54 <HAL_DMA_Init+0x42c>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d018      	beq.n	8002ab4 <HAL_DMA_Init+0x38c>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a34      	ldr	r2, [pc, #208]	; (8002b58 <HAL_DMA_Init+0x430>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d013      	beq.n	8002ab4 <HAL_DMA_Init+0x38c>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a32      	ldr	r2, [pc, #200]	; (8002b5c <HAL_DMA_Init+0x434>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d00e      	beq.n	8002ab4 <HAL_DMA_Init+0x38c>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a31      	ldr	r2, [pc, #196]	; (8002b60 <HAL_DMA_Init+0x438>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d009      	beq.n	8002ab4 <HAL_DMA_Init+0x38c>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a2f      	ldr	r2, [pc, #188]	; (8002b64 <HAL_DMA_Init+0x43c>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d004      	beq.n	8002ab4 <HAL_DMA_Init+0x38c>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a2e      	ldr	r2, [pc, #184]	; (8002b68 <HAL_DMA_Init+0x440>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d101      	bne.n	8002ab8 <HAL_DMA_Init+0x390>
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e000      	b.n	8002aba <HAL_DMA_Init+0x392>
 8002ab8:	2300      	movs	r3, #0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	f000 8092 	beq.w	8002be4 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a21      	ldr	r2, [pc, #132]	; (8002b4c <HAL_DMA_Init+0x424>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d021      	beq.n	8002b0e <HAL_DMA_Init+0x3e6>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a20      	ldr	r2, [pc, #128]	; (8002b50 <HAL_DMA_Init+0x428>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d01c      	beq.n	8002b0e <HAL_DMA_Init+0x3e6>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a1e      	ldr	r2, [pc, #120]	; (8002b54 <HAL_DMA_Init+0x42c>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d017      	beq.n	8002b0e <HAL_DMA_Init+0x3e6>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a1d      	ldr	r2, [pc, #116]	; (8002b58 <HAL_DMA_Init+0x430>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d012      	beq.n	8002b0e <HAL_DMA_Init+0x3e6>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a1b      	ldr	r2, [pc, #108]	; (8002b5c <HAL_DMA_Init+0x434>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d00d      	beq.n	8002b0e <HAL_DMA_Init+0x3e6>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a1a      	ldr	r2, [pc, #104]	; (8002b60 <HAL_DMA_Init+0x438>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d008      	beq.n	8002b0e <HAL_DMA_Init+0x3e6>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a18      	ldr	r2, [pc, #96]	; (8002b64 <HAL_DMA_Init+0x43c>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d003      	beq.n	8002b0e <HAL_DMA_Init+0x3e6>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a17      	ldr	r2, [pc, #92]	; (8002b68 <HAL_DMA_Init+0x440>)
 8002b0c:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2202      	movs	r2, #2
 8002b12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002b26:	697a      	ldr	r2, [r7, #20]
 8002b28:	4b10      	ldr	r3, [pc, #64]	; (8002b6c <HAL_DMA_Init+0x444>)
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	2b40      	cmp	r3, #64	; 0x40
 8002b34:	d01c      	beq.n	8002b70 <HAL_DMA_Init+0x448>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	2b80      	cmp	r3, #128	; 0x80
 8002b3c:	d102      	bne.n	8002b44 <HAL_DMA_Init+0x41c>
 8002b3e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002b42:	e016      	b.n	8002b72 <HAL_DMA_Init+0x44a>
 8002b44:	2300      	movs	r3, #0
 8002b46:	e014      	b.n	8002b72 <HAL_DMA_Init+0x44a>
 8002b48:	fe10803f 	.word	0xfe10803f
 8002b4c:	58025408 	.word	0x58025408
 8002b50:	5802541c 	.word	0x5802541c
 8002b54:	58025430 	.word	0x58025430
 8002b58:	58025444 	.word	0x58025444
 8002b5c:	58025458 	.word	0x58025458
 8002b60:	5802546c 	.word	0x5802546c
 8002b64:	58025480 	.word	0x58025480
 8002b68:	58025494 	.word	0x58025494
 8002b6c:	fffe000f 	.word	0xfffe000f
 8002b70:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002b72:	687a      	ldr	r2, [r7, #4]
 8002b74:	68d2      	ldr	r2, [r2, #12]
 8002b76:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002b78:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	691b      	ldr	r3, [r3, #16]
 8002b7e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002b80:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	695b      	ldr	r3, [r3, #20]
 8002b86:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002b88:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	699b      	ldr	r3, [r3, #24]
 8002b8e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002b90:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	69db      	ldr	r3, [r3, #28]
 8002b96:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002b98:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6a1b      	ldr	r3, [r3, #32]
 8002b9e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002ba0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002ba2:	697a      	ldr	r2, [r7, #20]
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	697a      	ldr	r2, [r7, #20]
 8002bae:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	461a      	mov	r2, r3
 8002bb6:	4b6e      	ldr	r3, [pc, #440]	; (8002d70 <HAL_DMA_Init+0x648>)
 8002bb8:	4413      	add	r3, r2
 8002bba:	4a6e      	ldr	r2, [pc, #440]	; (8002d74 <HAL_DMA_Init+0x64c>)
 8002bbc:	fba2 2303 	umull	r2, r3, r2, r3
 8002bc0:	091b      	lsrs	r3, r3, #4
 8002bc2:	009a      	lsls	r2, r3, #2
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	f001 fe8b 	bl	80048e4 <DMA_CalcBaseAndBitshift>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bd6:	f003 031f 	and.w	r3, r3, #31
 8002bda:	2201      	movs	r2, #1
 8002bdc:	409a      	lsls	r2, r3
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	605a      	str	r2, [r3, #4]
 8002be2:	e008      	b.n	8002bf6 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2240      	movs	r2, #64	; 0x40
 8002be8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2203      	movs	r2, #3
 8002bee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e0b7      	b.n	8002d66 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a5f      	ldr	r2, [pc, #380]	; (8002d78 <HAL_DMA_Init+0x650>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d072      	beq.n	8002ce6 <HAL_DMA_Init+0x5be>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a5d      	ldr	r2, [pc, #372]	; (8002d7c <HAL_DMA_Init+0x654>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d06d      	beq.n	8002ce6 <HAL_DMA_Init+0x5be>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a5c      	ldr	r2, [pc, #368]	; (8002d80 <HAL_DMA_Init+0x658>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d068      	beq.n	8002ce6 <HAL_DMA_Init+0x5be>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a5a      	ldr	r2, [pc, #360]	; (8002d84 <HAL_DMA_Init+0x65c>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d063      	beq.n	8002ce6 <HAL_DMA_Init+0x5be>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a59      	ldr	r2, [pc, #356]	; (8002d88 <HAL_DMA_Init+0x660>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d05e      	beq.n	8002ce6 <HAL_DMA_Init+0x5be>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a57      	ldr	r2, [pc, #348]	; (8002d8c <HAL_DMA_Init+0x664>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d059      	beq.n	8002ce6 <HAL_DMA_Init+0x5be>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a56      	ldr	r2, [pc, #344]	; (8002d90 <HAL_DMA_Init+0x668>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d054      	beq.n	8002ce6 <HAL_DMA_Init+0x5be>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a54      	ldr	r2, [pc, #336]	; (8002d94 <HAL_DMA_Init+0x66c>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d04f      	beq.n	8002ce6 <HAL_DMA_Init+0x5be>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a53      	ldr	r2, [pc, #332]	; (8002d98 <HAL_DMA_Init+0x670>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d04a      	beq.n	8002ce6 <HAL_DMA_Init+0x5be>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a51      	ldr	r2, [pc, #324]	; (8002d9c <HAL_DMA_Init+0x674>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d045      	beq.n	8002ce6 <HAL_DMA_Init+0x5be>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a50      	ldr	r2, [pc, #320]	; (8002da0 <HAL_DMA_Init+0x678>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d040      	beq.n	8002ce6 <HAL_DMA_Init+0x5be>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a4e      	ldr	r2, [pc, #312]	; (8002da4 <HAL_DMA_Init+0x67c>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d03b      	beq.n	8002ce6 <HAL_DMA_Init+0x5be>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a4d      	ldr	r2, [pc, #308]	; (8002da8 <HAL_DMA_Init+0x680>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d036      	beq.n	8002ce6 <HAL_DMA_Init+0x5be>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a4b      	ldr	r2, [pc, #300]	; (8002dac <HAL_DMA_Init+0x684>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d031      	beq.n	8002ce6 <HAL_DMA_Init+0x5be>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a4a      	ldr	r2, [pc, #296]	; (8002db0 <HAL_DMA_Init+0x688>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d02c      	beq.n	8002ce6 <HAL_DMA_Init+0x5be>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a48      	ldr	r2, [pc, #288]	; (8002db4 <HAL_DMA_Init+0x68c>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d027      	beq.n	8002ce6 <HAL_DMA_Init+0x5be>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a47      	ldr	r2, [pc, #284]	; (8002db8 <HAL_DMA_Init+0x690>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d022      	beq.n	8002ce6 <HAL_DMA_Init+0x5be>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a45      	ldr	r2, [pc, #276]	; (8002dbc <HAL_DMA_Init+0x694>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d01d      	beq.n	8002ce6 <HAL_DMA_Init+0x5be>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a44      	ldr	r2, [pc, #272]	; (8002dc0 <HAL_DMA_Init+0x698>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d018      	beq.n	8002ce6 <HAL_DMA_Init+0x5be>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a42      	ldr	r2, [pc, #264]	; (8002dc4 <HAL_DMA_Init+0x69c>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d013      	beq.n	8002ce6 <HAL_DMA_Init+0x5be>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a41      	ldr	r2, [pc, #260]	; (8002dc8 <HAL_DMA_Init+0x6a0>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d00e      	beq.n	8002ce6 <HAL_DMA_Init+0x5be>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a3f      	ldr	r2, [pc, #252]	; (8002dcc <HAL_DMA_Init+0x6a4>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d009      	beq.n	8002ce6 <HAL_DMA_Init+0x5be>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a3e      	ldr	r2, [pc, #248]	; (8002dd0 <HAL_DMA_Init+0x6a8>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d004      	beq.n	8002ce6 <HAL_DMA_Init+0x5be>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a3c      	ldr	r2, [pc, #240]	; (8002dd4 <HAL_DMA_Init+0x6ac>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d101      	bne.n	8002cea <HAL_DMA_Init+0x5c2>
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e000      	b.n	8002cec <HAL_DMA_Init+0x5c4>
 8002cea:	2300      	movs	r3, #0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d032      	beq.n	8002d56 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002cf0:	6878      	ldr	r0, [r7, #4]
 8002cf2:	f001 ff25 	bl	8004b40 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	2b80      	cmp	r3, #128	; 0x80
 8002cfc:	d102      	bne.n	8002d04 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2200      	movs	r2, #0
 8002d02:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	685a      	ldr	r2, [r3, #4]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d0c:	b2d2      	uxtb	r2, r2
 8002d0e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d14:	687a      	ldr	r2, [r7, #4]
 8002d16:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002d18:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d010      	beq.n	8002d44 <HAL_DMA_Init+0x61c>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	2b08      	cmp	r3, #8
 8002d28:	d80c      	bhi.n	8002d44 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f001 ffa2 	bl	8004c74 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d34:	2200      	movs	r2, #0
 8002d36:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d3c:	687a      	ldr	r2, [r7, #4]
 8002d3e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002d40:	605a      	str	r2, [r3, #4]
 8002d42:	e008      	b.n	8002d56 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2200      	movs	r2, #0
 8002d48:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2200      	movs	r2, #0
 8002d54:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002d64:	2300      	movs	r3, #0
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3718      	adds	r7, #24
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	a7fdabf8 	.word	0xa7fdabf8
 8002d74:	cccccccd 	.word	0xcccccccd
 8002d78:	40020010 	.word	0x40020010
 8002d7c:	40020028 	.word	0x40020028
 8002d80:	40020040 	.word	0x40020040
 8002d84:	40020058 	.word	0x40020058
 8002d88:	40020070 	.word	0x40020070
 8002d8c:	40020088 	.word	0x40020088
 8002d90:	400200a0 	.word	0x400200a0
 8002d94:	400200b8 	.word	0x400200b8
 8002d98:	40020410 	.word	0x40020410
 8002d9c:	40020428 	.word	0x40020428
 8002da0:	40020440 	.word	0x40020440
 8002da4:	40020458 	.word	0x40020458
 8002da8:	40020470 	.word	0x40020470
 8002dac:	40020488 	.word	0x40020488
 8002db0:	400204a0 	.word	0x400204a0
 8002db4:	400204b8 	.word	0x400204b8
 8002db8:	58025408 	.word	0x58025408
 8002dbc:	5802541c 	.word	0x5802541c
 8002dc0:	58025430 	.word	0x58025430
 8002dc4:	58025444 	.word	0x58025444
 8002dc8:	58025458 	.word	0x58025458
 8002dcc:	5802546c 	.word	0x5802546c
 8002dd0:	58025480 	.word	0x58025480
 8002dd4:	58025494 	.word	0x58025494

08002dd8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b086      	sub	sp, #24
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	60f8      	str	r0, [r7, #12]
 8002de0:	60b9      	str	r1, [r7, #8]
 8002de2:	607a      	str	r2, [r7, #4]
 8002de4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002de6:	2300      	movs	r3, #0
 8002de8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d101      	bne.n	8002df4 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	e226      	b.n	8003242 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d101      	bne.n	8002e02 <HAL_DMA_Start_IT+0x2a>
 8002dfe:	2302      	movs	r3, #2
 8002e00:	e21f      	b.n	8003242 <HAL_DMA_Start_IT+0x46a>
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2201      	movs	r2, #1
 8002e06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	f040 820a 	bne.w	800322c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2202      	movs	r2, #2
 8002e1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2200      	movs	r2, #0
 8002e24:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a68      	ldr	r2, [pc, #416]	; (8002fcc <HAL_DMA_Start_IT+0x1f4>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d04a      	beq.n	8002ec6 <HAL_DMA_Start_IT+0xee>
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a66      	ldr	r2, [pc, #408]	; (8002fd0 <HAL_DMA_Start_IT+0x1f8>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d045      	beq.n	8002ec6 <HAL_DMA_Start_IT+0xee>
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a65      	ldr	r2, [pc, #404]	; (8002fd4 <HAL_DMA_Start_IT+0x1fc>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d040      	beq.n	8002ec6 <HAL_DMA_Start_IT+0xee>
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a63      	ldr	r2, [pc, #396]	; (8002fd8 <HAL_DMA_Start_IT+0x200>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d03b      	beq.n	8002ec6 <HAL_DMA_Start_IT+0xee>
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a62      	ldr	r2, [pc, #392]	; (8002fdc <HAL_DMA_Start_IT+0x204>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d036      	beq.n	8002ec6 <HAL_DMA_Start_IT+0xee>
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a60      	ldr	r2, [pc, #384]	; (8002fe0 <HAL_DMA_Start_IT+0x208>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d031      	beq.n	8002ec6 <HAL_DMA_Start_IT+0xee>
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a5f      	ldr	r2, [pc, #380]	; (8002fe4 <HAL_DMA_Start_IT+0x20c>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d02c      	beq.n	8002ec6 <HAL_DMA_Start_IT+0xee>
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a5d      	ldr	r2, [pc, #372]	; (8002fe8 <HAL_DMA_Start_IT+0x210>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d027      	beq.n	8002ec6 <HAL_DMA_Start_IT+0xee>
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a5c      	ldr	r2, [pc, #368]	; (8002fec <HAL_DMA_Start_IT+0x214>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d022      	beq.n	8002ec6 <HAL_DMA_Start_IT+0xee>
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a5a      	ldr	r2, [pc, #360]	; (8002ff0 <HAL_DMA_Start_IT+0x218>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d01d      	beq.n	8002ec6 <HAL_DMA_Start_IT+0xee>
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a59      	ldr	r2, [pc, #356]	; (8002ff4 <HAL_DMA_Start_IT+0x21c>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d018      	beq.n	8002ec6 <HAL_DMA_Start_IT+0xee>
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a57      	ldr	r2, [pc, #348]	; (8002ff8 <HAL_DMA_Start_IT+0x220>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d013      	beq.n	8002ec6 <HAL_DMA_Start_IT+0xee>
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a56      	ldr	r2, [pc, #344]	; (8002ffc <HAL_DMA_Start_IT+0x224>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d00e      	beq.n	8002ec6 <HAL_DMA_Start_IT+0xee>
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a54      	ldr	r2, [pc, #336]	; (8003000 <HAL_DMA_Start_IT+0x228>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d009      	beq.n	8002ec6 <HAL_DMA_Start_IT+0xee>
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a53      	ldr	r2, [pc, #332]	; (8003004 <HAL_DMA_Start_IT+0x22c>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d004      	beq.n	8002ec6 <HAL_DMA_Start_IT+0xee>
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a51      	ldr	r2, [pc, #324]	; (8003008 <HAL_DMA_Start_IT+0x230>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d108      	bne.n	8002ed8 <HAL_DMA_Start_IT+0x100>
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f022 0201 	bic.w	r2, r2, #1
 8002ed4:	601a      	str	r2, [r3, #0]
 8002ed6:	e007      	b.n	8002ee8 <HAL_DMA_Start_IT+0x110>
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f022 0201 	bic.w	r2, r2, #1
 8002ee6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	687a      	ldr	r2, [r7, #4]
 8002eec:	68b9      	ldr	r1, [r7, #8]
 8002eee:	68f8      	ldr	r0, [r7, #12]
 8002ef0:	f001 fb4c 	bl	800458c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a34      	ldr	r2, [pc, #208]	; (8002fcc <HAL_DMA_Start_IT+0x1f4>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d04a      	beq.n	8002f94 <HAL_DMA_Start_IT+0x1bc>
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a33      	ldr	r2, [pc, #204]	; (8002fd0 <HAL_DMA_Start_IT+0x1f8>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d045      	beq.n	8002f94 <HAL_DMA_Start_IT+0x1bc>
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a31      	ldr	r2, [pc, #196]	; (8002fd4 <HAL_DMA_Start_IT+0x1fc>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d040      	beq.n	8002f94 <HAL_DMA_Start_IT+0x1bc>
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a30      	ldr	r2, [pc, #192]	; (8002fd8 <HAL_DMA_Start_IT+0x200>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d03b      	beq.n	8002f94 <HAL_DMA_Start_IT+0x1bc>
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a2e      	ldr	r2, [pc, #184]	; (8002fdc <HAL_DMA_Start_IT+0x204>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d036      	beq.n	8002f94 <HAL_DMA_Start_IT+0x1bc>
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a2d      	ldr	r2, [pc, #180]	; (8002fe0 <HAL_DMA_Start_IT+0x208>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d031      	beq.n	8002f94 <HAL_DMA_Start_IT+0x1bc>
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a2b      	ldr	r2, [pc, #172]	; (8002fe4 <HAL_DMA_Start_IT+0x20c>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d02c      	beq.n	8002f94 <HAL_DMA_Start_IT+0x1bc>
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a2a      	ldr	r2, [pc, #168]	; (8002fe8 <HAL_DMA_Start_IT+0x210>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d027      	beq.n	8002f94 <HAL_DMA_Start_IT+0x1bc>
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a28      	ldr	r2, [pc, #160]	; (8002fec <HAL_DMA_Start_IT+0x214>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d022      	beq.n	8002f94 <HAL_DMA_Start_IT+0x1bc>
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a27      	ldr	r2, [pc, #156]	; (8002ff0 <HAL_DMA_Start_IT+0x218>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d01d      	beq.n	8002f94 <HAL_DMA_Start_IT+0x1bc>
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a25      	ldr	r2, [pc, #148]	; (8002ff4 <HAL_DMA_Start_IT+0x21c>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d018      	beq.n	8002f94 <HAL_DMA_Start_IT+0x1bc>
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a24      	ldr	r2, [pc, #144]	; (8002ff8 <HAL_DMA_Start_IT+0x220>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d013      	beq.n	8002f94 <HAL_DMA_Start_IT+0x1bc>
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a22      	ldr	r2, [pc, #136]	; (8002ffc <HAL_DMA_Start_IT+0x224>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d00e      	beq.n	8002f94 <HAL_DMA_Start_IT+0x1bc>
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a21      	ldr	r2, [pc, #132]	; (8003000 <HAL_DMA_Start_IT+0x228>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d009      	beq.n	8002f94 <HAL_DMA_Start_IT+0x1bc>
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a1f      	ldr	r2, [pc, #124]	; (8003004 <HAL_DMA_Start_IT+0x22c>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d004      	beq.n	8002f94 <HAL_DMA_Start_IT+0x1bc>
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a1e      	ldr	r2, [pc, #120]	; (8003008 <HAL_DMA_Start_IT+0x230>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d101      	bne.n	8002f98 <HAL_DMA_Start_IT+0x1c0>
 8002f94:	2301      	movs	r3, #1
 8002f96:	e000      	b.n	8002f9a <HAL_DMA_Start_IT+0x1c2>
 8002f98:	2300      	movs	r3, #0
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d036      	beq.n	800300c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f023 021e 	bic.w	r2, r3, #30
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f042 0216 	orr.w	r2, r2, #22
 8002fb0:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d03e      	beq.n	8003038 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f042 0208 	orr.w	r2, r2, #8
 8002fc8:	601a      	str	r2, [r3, #0]
 8002fca:	e035      	b.n	8003038 <HAL_DMA_Start_IT+0x260>
 8002fcc:	40020010 	.word	0x40020010
 8002fd0:	40020028 	.word	0x40020028
 8002fd4:	40020040 	.word	0x40020040
 8002fd8:	40020058 	.word	0x40020058
 8002fdc:	40020070 	.word	0x40020070
 8002fe0:	40020088 	.word	0x40020088
 8002fe4:	400200a0 	.word	0x400200a0
 8002fe8:	400200b8 	.word	0x400200b8
 8002fec:	40020410 	.word	0x40020410
 8002ff0:	40020428 	.word	0x40020428
 8002ff4:	40020440 	.word	0x40020440
 8002ff8:	40020458 	.word	0x40020458
 8002ffc:	40020470 	.word	0x40020470
 8003000:	40020488 	.word	0x40020488
 8003004:	400204a0 	.word	0x400204a0
 8003008:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f023 020e 	bic.w	r2, r3, #14
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f042 020a 	orr.w	r2, r2, #10
 800301e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003024:	2b00      	cmp	r3, #0
 8003026:	d007      	beq.n	8003038 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f042 0204 	orr.w	r2, r2, #4
 8003036:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a83      	ldr	r2, [pc, #524]	; (800324c <HAL_DMA_Start_IT+0x474>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d072      	beq.n	8003128 <HAL_DMA_Start_IT+0x350>
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a82      	ldr	r2, [pc, #520]	; (8003250 <HAL_DMA_Start_IT+0x478>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d06d      	beq.n	8003128 <HAL_DMA_Start_IT+0x350>
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a80      	ldr	r2, [pc, #512]	; (8003254 <HAL_DMA_Start_IT+0x47c>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d068      	beq.n	8003128 <HAL_DMA_Start_IT+0x350>
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a7f      	ldr	r2, [pc, #508]	; (8003258 <HAL_DMA_Start_IT+0x480>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d063      	beq.n	8003128 <HAL_DMA_Start_IT+0x350>
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a7d      	ldr	r2, [pc, #500]	; (800325c <HAL_DMA_Start_IT+0x484>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d05e      	beq.n	8003128 <HAL_DMA_Start_IT+0x350>
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a7c      	ldr	r2, [pc, #496]	; (8003260 <HAL_DMA_Start_IT+0x488>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d059      	beq.n	8003128 <HAL_DMA_Start_IT+0x350>
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a7a      	ldr	r2, [pc, #488]	; (8003264 <HAL_DMA_Start_IT+0x48c>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d054      	beq.n	8003128 <HAL_DMA_Start_IT+0x350>
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a79      	ldr	r2, [pc, #484]	; (8003268 <HAL_DMA_Start_IT+0x490>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d04f      	beq.n	8003128 <HAL_DMA_Start_IT+0x350>
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a77      	ldr	r2, [pc, #476]	; (800326c <HAL_DMA_Start_IT+0x494>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d04a      	beq.n	8003128 <HAL_DMA_Start_IT+0x350>
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a76      	ldr	r2, [pc, #472]	; (8003270 <HAL_DMA_Start_IT+0x498>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d045      	beq.n	8003128 <HAL_DMA_Start_IT+0x350>
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a74      	ldr	r2, [pc, #464]	; (8003274 <HAL_DMA_Start_IT+0x49c>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d040      	beq.n	8003128 <HAL_DMA_Start_IT+0x350>
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a73      	ldr	r2, [pc, #460]	; (8003278 <HAL_DMA_Start_IT+0x4a0>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d03b      	beq.n	8003128 <HAL_DMA_Start_IT+0x350>
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a71      	ldr	r2, [pc, #452]	; (800327c <HAL_DMA_Start_IT+0x4a4>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d036      	beq.n	8003128 <HAL_DMA_Start_IT+0x350>
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a70      	ldr	r2, [pc, #448]	; (8003280 <HAL_DMA_Start_IT+0x4a8>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d031      	beq.n	8003128 <HAL_DMA_Start_IT+0x350>
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a6e      	ldr	r2, [pc, #440]	; (8003284 <HAL_DMA_Start_IT+0x4ac>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d02c      	beq.n	8003128 <HAL_DMA_Start_IT+0x350>
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a6d      	ldr	r2, [pc, #436]	; (8003288 <HAL_DMA_Start_IT+0x4b0>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d027      	beq.n	8003128 <HAL_DMA_Start_IT+0x350>
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a6b      	ldr	r2, [pc, #428]	; (800328c <HAL_DMA_Start_IT+0x4b4>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d022      	beq.n	8003128 <HAL_DMA_Start_IT+0x350>
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a6a      	ldr	r2, [pc, #424]	; (8003290 <HAL_DMA_Start_IT+0x4b8>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d01d      	beq.n	8003128 <HAL_DMA_Start_IT+0x350>
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a68      	ldr	r2, [pc, #416]	; (8003294 <HAL_DMA_Start_IT+0x4bc>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d018      	beq.n	8003128 <HAL_DMA_Start_IT+0x350>
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a67      	ldr	r2, [pc, #412]	; (8003298 <HAL_DMA_Start_IT+0x4c0>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d013      	beq.n	8003128 <HAL_DMA_Start_IT+0x350>
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a65      	ldr	r2, [pc, #404]	; (800329c <HAL_DMA_Start_IT+0x4c4>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d00e      	beq.n	8003128 <HAL_DMA_Start_IT+0x350>
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a64      	ldr	r2, [pc, #400]	; (80032a0 <HAL_DMA_Start_IT+0x4c8>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d009      	beq.n	8003128 <HAL_DMA_Start_IT+0x350>
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a62      	ldr	r2, [pc, #392]	; (80032a4 <HAL_DMA_Start_IT+0x4cc>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d004      	beq.n	8003128 <HAL_DMA_Start_IT+0x350>
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a61      	ldr	r2, [pc, #388]	; (80032a8 <HAL_DMA_Start_IT+0x4d0>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d101      	bne.n	800312c <HAL_DMA_Start_IT+0x354>
 8003128:	2301      	movs	r3, #1
 800312a:	e000      	b.n	800312e <HAL_DMA_Start_IT+0x356>
 800312c:	2300      	movs	r3, #0
 800312e:	2b00      	cmp	r3, #0
 8003130:	d01a      	beq.n	8003168 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800313c:	2b00      	cmp	r3, #0
 800313e:	d007      	beq.n	8003150 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800314a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800314e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003154:	2b00      	cmp	r3, #0
 8003156:	d007      	beq.n	8003168 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003162:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003166:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a37      	ldr	r2, [pc, #220]	; (800324c <HAL_DMA_Start_IT+0x474>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d04a      	beq.n	8003208 <HAL_DMA_Start_IT+0x430>
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a36      	ldr	r2, [pc, #216]	; (8003250 <HAL_DMA_Start_IT+0x478>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d045      	beq.n	8003208 <HAL_DMA_Start_IT+0x430>
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a34      	ldr	r2, [pc, #208]	; (8003254 <HAL_DMA_Start_IT+0x47c>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d040      	beq.n	8003208 <HAL_DMA_Start_IT+0x430>
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a33      	ldr	r2, [pc, #204]	; (8003258 <HAL_DMA_Start_IT+0x480>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d03b      	beq.n	8003208 <HAL_DMA_Start_IT+0x430>
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a31      	ldr	r2, [pc, #196]	; (800325c <HAL_DMA_Start_IT+0x484>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d036      	beq.n	8003208 <HAL_DMA_Start_IT+0x430>
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a30      	ldr	r2, [pc, #192]	; (8003260 <HAL_DMA_Start_IT+0x488>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d031      	beq.n	8003208 <HAL_DMA_Start_IT+0x430>
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a2e      	ldr	r2, [pc, #184]	; (8003264 <HAL_DMA_Start_IT+0x48c>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d02c      	beq.n	8003208 <HAL_DMA_Start_IT+0x430>
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a2d      	ldr	r2, [pc, #180]	; (8003268 <HAL_DMA_Start_IT+0x490>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d027      	beq.n	8003208 <HAL_DMA_Start_IT+0x430>
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a2b      	ldr	r2, [pc, #172]	; (800326c <HAL_DMA_Start_IT+0x494>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d022      	beq.n	8003208 <HAL_DMA_Start_IT+0x430>
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a2a      	ldr	r2, [pc, #168]	; (8003270 <HAL_DMA_Start_IT+0x498>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d01d      	beq.n	8003208 <HAL_DMA_Start_IT+0x430>
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a28      	ldr	r2, [pc, #160]	; (8003274 <HAL_DMA_Start_IT+0x49c>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d018      	beq.n	8003208 <HAL_DMA_Start_IT+0x430>
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a27      	ldr	r2, [pc, #156]	; (8003278 <HAL_DMA_Start_IT+0x4a0>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d013      	beq.n	8003208 <HAL_DMA_Start_IT+0x430>
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a25      	ldr	r2, [pc, #148]	; (800327c <HAL_DMA_Start_IT+0x4a4>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d00e      	beq.n	8003208 <HAL_DMA_Start_IT+0x430>
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a24      	ldr	r2, [pc, #144]	; (8003280 <HAL_DMA_Start_IT+0x4a8>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d009      	beq.n	8003208 <HAL_DMA_Start_IT+0x430>
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a22      	ldr	r2, [pc, #136]	; (8003284 <HAL_DMA_Start_IT+0x4ac>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d004      	beq.n	8003208 <HAL_DMA_Start_IT+0x430>
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a21      	ldr	r2, [pc, #132]	; (8003288 <HAL_DMA_Start_IT+0x4b0>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d108      	bne.n	800321a <HAL_DMA_Start_IT+0x442>
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f042 0201 	orr.w	r2, r2, #1
 8003216:	601a      	str	r2, [r3, #0]
 8003218:	e012      	b.n	8003240 <HAL_DMA_Start_IT+0x468>
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f042 0201 	orr.w	r2, r2, #1
 8003228:	601a      	str	r2, [r3, #0]
 800322a:	e009      	b.n	8003240 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003232:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2200      	movs	r2, #0
 8003238:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003240:	7dfb      	ldrb	r3, [r7, #23]
}
 8003242:	4618      	mov	r0, r3
 8003244:	3718      	adds	r7, #24
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
 800324a:	bf00      	nop
 800324c:	40020010 	.word	0x40020010
 8003250:	40020028 	.word	0x40020028
 8003254:	40020040 	.word	0x40020040
 8003258:	40020058 	.word	0x40020058
 800325c:	40020070 	.word	0x40020070
 8003260:	40020088 	.word	0x40020088
 8003264:	400200a0 	.word	0x400200a0
 8003268:	400200b8 	.word	0x400200b8
 800326c:	40020410 	.word	0x40020410
 8003270:	40020428 	.word	0x40020428
 8003274:	40020440 	.word	0x40020440
 8003278:	40020458 	.word	0x40020458
 800327c:	40020470 	.word	0x40020470
 8003280:	40020488 	.word	0x40020488
 8003284:	400204a0 	.word	0x400204a0
 8003288:	400204b8 	.word	0x400204b8
 800328c:	58025408 	.word	0x58025408
 8003290:	5802541c 	.word	0x5802541c
 8003294:	58025430 	.word	0x58025430
 8003298:	58025444 	.word	0x58025444
 800329c:	58025458 	.word	0x58025458
 80032a0:	5802546c 	.word	0x5802546c
 80032a4:	58025480 	.word	0x58025480
 80032a8:	58025494 	.word	0x58025494

080032ac <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b084      	sub	sp, #16
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d101      	bne.n	80032be <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e237      	b.n	800372e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	2b02      	cmp	r3, #2
 80032c8:	d004      	beq.n	80032d4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2280      	movs	r2, #128	; 0x80
 80032ce:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	e22c      	b.n	800372e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a5c      	ldr	r2, [pc, #368]	; (800344c <HAL_DMA_Abort_IT+0x1a0>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d04a      	beq.n	8003374 <HAL_DMA_Abort_IT+0xc8>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a5b      	ldr	r2, [pc, #364]	; (8003450 <HAL_DMA_Abort_IT+0x1a4>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d045      	beq.n	8003374 <HAL_DMA_Abort_IT+0xc8>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a59      	ldr	r2, [pc, #356]	; (8003454 <HAL_DMA_Abort_IT+0x1a8>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d040      	beq.n	8003374 <HAL_DMA_Abort_IT+0xc8>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a58      	ldr	r2, [pc, #352]	; (8003458 <HAL_DMA_Abort_IT+0x1ac>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d03b      	beq.n	8003374 <HAL_DMA_Abort_IT+0xc8>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a56      	ldr	r2, [pc, #344]	; (800345c <HAL_DMA_Abort_IT+0x1b0>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d036      	beq.n	8003374 <HAL_DMA_Abort_IT+0xc8>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a55      	ldr	r2, [pc, #340]	; (8003460 <HAL_DMA_Abort_IT+0x1b4>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d031      	beq.n	8003374 <HAL_DMA_Abort_IT+0xc8>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a53      	ldr	r2, [pc, #332]	; (8003464 <HAL_DMA_Abort_IT+0x1b8>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d02c      	beq.n	8003374 <HAL_DMA_Abort_IT+0xc8>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a52      	ldr	r2, [pc, #328]	; (8003468 <HAL_DMA_Abort_IT+0x1bc>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d027      	beq.n	8003374 <HAL_DMA_Abort_IT+0xc8>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a50      	ldr	r2, [pc, #320]	; (800346c <HAL_DMA_Abort_IT+0x1c0>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d022      	beq.n	8003374 <HAL_DMA_Abort_IT+0xc8>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a4f      	ldr	r2, [pc, #316]	; (8003470 <HAL_DMA_Abort_IT+0x1c4>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d01d      	beq.n	8003374 <HAL_DMA_Abort_IT+0xc8>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a4d      	ldr	r2, [pc, #308]	; (8003474 <HAL_DMA_Abort_IT+0x1c8>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d018      	beq.n	8003374 <HAL_DMA_Abort_IT+0xc8>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a4c      	ldr	r2, [pc, #304]	; (8003478 <HAL_DMA_Abort_IT+0x1cc>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d013      	beq.n	8003374 <HAL_DMA_Abort_IT+0xc8>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a4a      	ldr	r2, [pc, #296]	; (800347c <HAL_DMA_Abort_IT+0x1d0>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d00e      	beq.n	8003374 <HAL_DMA_Abort_IT+0xc8>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a49      	ldr	r2, [pc, #292]	; (8003480 <HAL_DMA_Abort_IT+0x1d4>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d009      	beq.n	8003374 <HAL_DMA_Abort_IT+0xc8>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a47      	ldr	r2, [pc, #284]	; (8003484 <HAL_DMA_Abort_IT+0x1d8>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d004      	beq.n	8003374 <HAL_DMA_Abort_IT+0xc8>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a46      	ldr	r2, [pc, #280]	; (8003488 <HAL_DMA_Abort_IT+0x1dc>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d101      	bne.n	8003378 <HAL_DMA_Abort_IT+0xcc>
 8003374:	2301      	movs	r3, #1
 8003376:	e000      	b.n	800337a <HAL_DMA_Abort_IT+0xce>
 8003378:	2300      	movs	r3, #0
 800337a:	2b00      	cmp	r3, #0
 800337c:	f000 8086 	beq.w	800348c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2204      	movs	r2, #4
 8003384:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a2f      	ldr	r2, [pc, #188]	; (800344c <HAL_DMA_Abort_IT+0x1a0>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d04a      	beq.n	8003428 <HAL_DMA_Abort_IT+0x17c>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a2e      	ldr	r2, [pc, #184]	; (8003450 <HAL_DMA_Abort_IT+0x1a4>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d045      	beq.n	8003428 <HAL_DMA_Abort_IT+0x17c>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a2c      	ldr	r2, [pc, #176]	; (8003454 <HAL_DMA_Abort_IT+0x1a8>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d040      	beq.n	8003428 <HAL_DMA_Abort_IT+0x17c>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a2b      	ldr	r2, [pc, #172]	; (8003458 <HAL_DMA_Abort_IT+0x1ac>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d03b      	beq.n	8003428 <HAL_DMA_Abort_IT+0x17c>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a29      	ldr	r2, [pc, #164]	; (800345c <HAL_DMA_Abort_IT+0x1b0>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d036      	beq.n	8003428 <HAL_DMA_Abort_IT+0x17c>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a28      	ldr	r2, [pc, #160]	; (8003460 <HAL_DMA_Abort_IT+0x1b4>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d031      	beq.n	8003428 <HAL_DMA_Abort_IT+0x17c>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a26      	ldr	r2, [pc, #152]	; (8003464 <HAL_DMA_Abort_IT+0x1b8>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d02c      	beq.n	8003428 <HAL_DMA_Abort_IT+0x17c>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a25      	ldr	r2, [pc, #148]	; (8003468 <HAL_DMA_Abort_IT+0x1bc>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d027      	beq.n	8003428 <HAL_DMA_Abort_IT+0x17c>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a23      	ldr	r2, [pc, #140]	; (800346c <HAL_DMA_Abort_IT+0x1c0>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d022      	beq.n	8003428 <HAL_DMA_Abort_IT+0x17c>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a22      	ldr	r2, [pc, #136]	; (8003470 <HAL_DMA_Abort_IT+0x1c4>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d01d      	beq.n	8003428 <HAL_DMA_Abort_IT+0x17c>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a20      	ldr	r2, [pc, #128]	; (8003474 <HAL_DMA_Abort_IT+0x1c8>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d018      	beq.n	8003428 <HAL_DMA_Abort_IT+0x17c>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a1f      	ldr	r2, [pc, #124]	; (8003478 <HAL_DMA_Abort_IT+0x1cc>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d013      	beq.n	8003428 <HAL_DMA_Abort_IT+0x17c>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a1d      	ldr	r2, [pc, #116]	; (800347c <HAL_DMA_Abort_IT+0x1d0>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d00e      	beq.n	8003428 <HAL_DMA_Abort_IT+0x17c>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a1c      	ldr	r2, [pc, #112]	; (8003480 <HAL_DMA_Abort_IT+0x1d4>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d009      	beq.n	8003428 <HAL_DMA_Abort_IT+0x17c>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a1a      	ldr	r2, [pc, #104]	; (8003484 <HAL_DMA_Abort_IT+0x1d8>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d004      	beq.n	8003428 <HAL_DMA_Abort_IT+0x17c>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a19      	ldr	r2, [pc, #100]	; (8003488 <HAL_DMA_Abort_IT+0x1dc>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d108      	bne.n	800343a <HAL_DMA_Abort_IT+0x18e>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f022 0201 	bic.w	r2, r2, #1
 8003436:	601a      	str	r2, [r3, #0]
 8003438:	e178      	b.n	800372c <HAL_DMA_Abort_IT+0x480>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f022 0201 	bic.w	r2, r2, #1
 8003448:	601a      	str	r2, [r3, #0]
 800344a:	e16f      	b.n	800372c <HAL_DMA_Abort_IT+0x480>
 800344c:	40020010 	.word	0x40020010
 8003450:	40020028 	.word	0x40020028
 8003454:	40020040 	.word	0x40020040
 8003458:	40020058 	.word	0x40020058
 800345c:	40020070 	.word	0x40020070
 8003460:	40020088 	.word	0x40020088
 8003464:	400200a0 	.word	0x400200a0
 8003468:	400200b8 	.word	0x400200b8
 800346c:	40020410 	.word	0x40020410
 8003470:	40020428 	.word	0x40020428
 8003474:	40020440 	.word	0x40020440
 8003478:	40020458 	.word	0x40020458
 800347c:	40020470 	.word	0x40020470
 8003480:	40020488 	.word	0x40020488
 8003484:	400204a0 	.word	0x400204a0
 8003488:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f022 020e 	bic.w	r2, r2, #14
 800349a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a6c      	ldr	r2, [pc, #432]	; (8003654 <HAL_DMA_Abort_IT+0x3a8>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d04a      	beq.n	800353c <HAL_DMA_Abort_IT+0x290>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a6b      	ldr	r2, [pc, #428]	; (8003658 <HAL_DMA_Abort_IT+0x3ac>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d045      	beq.n	800353c <HAL_DMA_Abort_IT+0x290>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a69      	ldr	r2, [pc, #420]	; (800365c <HAL_DMA_Abort_IT+0x3b0>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d040      	beq.n	800353c <HAL_DMA_Abort_IT+0x290>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a68      	ldr	r2, [pc, #416]	; (8003660 <HAL_DMA_Abort_IT+0x3b4>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d03b      	beq.n	800353c <HAL_DMA_Abort_IT+0x290>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a66      	ldr	r2, [pc, #408]	; (8003664 <HAL_DMA_Abort_IT+0x3b8>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d036      	beq.n	800353c <HAL_DMA_Abort_IT+0x290>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a65      	ldr	r2, [pc, #404]	; (8003668 <HAL_DMA_Abort_IT+0x3bc>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d031      	beq.n	800353c <HAL_DMA_Abort_IT+0x290>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a63      	ldr	r2, [pc, #396]	; (800366c <HAL_DMA_Abort_IT+0x3c0>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d02c      	beq.n	800353c <HAL_DMA_Abort_IT+0x290>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a62      	ldr	r2, [pc, #392]	; (8003670 <HAL_DMA_Abort_IT+0x3c4>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d027      	beq.n	800353c <HAL_DMA_Abort_IT+0x290>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a60      	ldr	r2, [pc, #384]	; (8003674 <HAL_DMA_Abort_IT+0x3c8>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d022      	beq.n	800353c <HAL_DMA_Abort_IT+0x290>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a5f      	ldr	r2, [pc, #380]	; (8003678 <HAL_DMA_Abort_IT+0x3cc>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d01d      	beq.n	800353c <HAL_DMA_Abort_IT+0x290>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a5d      	ldr	r2, [pc, #372]	; (800367c <HAL_DMA_Abort_IT+0x3d0>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d018      	beq.n	800353c <HAL_DMA_Abort_IT+0x290>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a5c      	ldr	r2, [pc, #368]	; (8003680 <HAL_DMA_Abort_IT+0x3d4>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d013      	beq.n	800353c <HAL_DMA_Abort_IT+0x290>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a5a      	ldr	r2, [pc, #360]	; (8003684 <HAL_DMA_Abort_IT+0x3d8>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d00e      	beq.n	800353c <HAL_DMA_Abort_IT+0x290>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a59      	ldr	r2, [pc, #356]	; (8003688 <HAL_DMA_Abort_IT+0x3dc>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d009      	beq.n	800353c <HAL_DMA_Abort_IT+0x290>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a57      	ldr	r2, [pc, #348]	; (800368c <HAL_DMA_Abort_IT+0x3e0>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d004      	beq.n	800353c <HAL_DMA_Abort_IT+0x290>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a56      	ldr	r2, [pc, #344]	; (8003690 <HAL_DMA_Abort_IT+0x3e4>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d108      	bne.n	800354e <HAL_DMA_Abort_IT+0x2a2>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f022 0201 	bic.w	r2, r2, #1
 800354a:	601a      	str	r2, [r3, #0]
 800354c:	e007      	b.n	800355e <HAL_DMA_Abort_IT+0x2b2>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f022 0201 	bic.w	r2, r2, #1
 800355c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a3c      	ldr	r2, [pc, #240]	; (8003654 <HAL_DMA_Abort_IT+0x3a8>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d072      	beq.n	800364e <HAL_DMA_Abort_IT+0x3a2>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a3a      	ldr	r2, [pc, #232]	; (8003658 <HAL_DMA_Abort_IT+0x3ac>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d06d      	beq.n	800364e <HAL_DMA_Abort_IT+0x3a2>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a39      	ldr	r2, [pc, #228]	; (800365c <HAL_DMA_Abort_IT+0x3b0>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d068      	beq.n	800364e <HAL_DMA_Abort_IT+0x3a2>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a37      	ldr	r2, [pc, #220]	; (8003660 <HAL_DMA_Abort_IT+0x3b4>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d063      	beq.n	800364e <HAL_DMA_Abort_IT+0x3a2>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a36      	ldr	r2, [pc, #216]	; (8003664 <HAL_DMA_Abort_IT+0x3b8>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d05e      	beq.n	800364e <HAL_DMA_Abort_IT+0x3a2>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a34      	ldr	r2, [pc, #208]	; (8003668 <HAL_DMA_Abort_IT+0x3bc>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d059      	beq.n	800364e <HAL_DMA_Abort_IT+0x3a2>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a33      	ldr	r2, [pc, #204]	; (800366c <HAL_DMA_Abort_IT+0x3c0>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d054      	beq.n	800364e <HAL_DMA_Abort_IT+0x3a2>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a31      	ldr	r2, [pc, #196]	; (8003670 <HAL_DMA_Abort_IT+0x3c4>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d04f      	beq.n	800364e <HAL_DMA_Abort_IT+0x3a2>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a30      	ldr	r2, [pc, #192]	; (8003674 <HAL_DMA_Abort_IT+0x3c8>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d04a      	beq.n	800364e <HAL_DMA_Abort_IT+0x3a2>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a2e      	ldr	r2, [pc, #184]	; (8003678 <HAL_DMA_Abort_IT+0x3cc>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d045      	beq.n	800364e <HAL_DMA_Abort_IT+0x3a2>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a2d      	ldr	r2, [pc, #180]	; (800367c <HAL_DMA_Abort_IT+0x3d0>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d040      	beq.n	800364e <HAL_DMA_Abort_IT+0x3a2>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a2b      	ldr	r2, [pc, #172]	; (8003680 <HAL_DMA_Abort_IT+0x3d4>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d03b      	beq.n	800364e <HAL_DMA_Abort_IT+0x3a2>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a2a      	ldr	r2, [pc, #168]	; (8003684 <HAL_DMA_Abort_IT+0x3d8>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d036      	beq.n	800364e <HAL_DMA_Abort_IT+0x3a2>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a28      	ldr	r2, [pc, #160]	; (8003688 <HAL_DMA_Abort_IT+0x3dc>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d031      	beq.n	800364e <HAL_DMA_Abort_IT+0x3a2>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a27      	ldr	r2, [pc, #156]	; (800368c <HAL_DMA_Abort_IT+0x3e0>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d02c      	beq.n	800364e <HAL_DMA_Abort_IT+0x3a2>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a25      	ldr	r2, [pc, #148]	; (8003690 <HAL_DMA_Abort_IT+0x3e4>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d027      	beq.n	800364e <HAL_DMA_Abort_IT+0x3a2>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a24      	ldr	r2, [pc, #144]	; (8003694 <HAL_DMA_Abort_IT+0x3e8>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d022      	beq.n	800364e <HAL_DMA_Abort_IT+0x3a2>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a22      	ldr	r2, [pc, #136]	; (8003698 <HAL_DMA_Abort_IT+0x3ec>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d01d      	beq.n	800364e <HAL_DMA_Abort_IT+0x3a2>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a21      	ldr	r2, [pc, #132]	; (800369c <HAL_DMA_Abort_IT+0x3f0>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d018      	beq.n	800364e <HAL_DMA_Abort_IT+0x3a2>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a1f      	ldr	r2, [pc, #124]	; (80036a0 <HAL_DMA_Abort_IT+0x3f4>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d013      	beq.n	800364e <HAL_DMA_Abort_IT+0x3a2>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a1e      	ldr	r2, [pc, #120]	; (80036a4 <HAL_DMA_Abort_IT+0x3f8>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d00e      	beq.n	800364e <HAL_DMA_Abort_IT+0x3a2>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a1c      	ldr	r2, [pc, #112]	; (80036a8 <HAL_DMA_Abort_IT+0x3fc>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d009      	beq.n	800364e <HAL_DMA_Abort_IT+0x3a2>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a1b      	ldr	r2, [pc, #108]	; (80036ac <HAL_DMA_Abort_IT+0x400>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d004      	beq.n	800364e <HAL_DMA_Abort_IT+0x3a2>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a19      	ldr	r2, [pc, #100]	; (80036b0 <HAL_DMA_Abort_IT+0x404>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d132      	bne.n	80036b4 <HAL_DMA_Abort_IT+0x408>
 800364e:	2301      	movs	r3, #1
 8003650:	e031      	b.n	80036b6 <HAL_DMA_Abort_IT+0x40a>
 8003652:	bf00      	nop
 8003654:	40020010 	.word	0x40020010
 8003658:	40020028 	.word	0x40020028
 800365c:	40020040 	.word	0x40020040
 8003660:	40020058 	.word	0x40020058
 8003664:	40020070 	.word	0x40020070
 8003668:	40020088 	.word	0x40020088
 800366c:	400200a0 	.word	0x400200a0
 8003670:	400200b8 	.word	0x400200b8
 8003674:	40020410 	.word	0x40020410
 8003678:	40020428 	.word	0x40020428
 800367c:	40020440 	.word	0x40020440
 8003680:	40020458 	.word	0x40020458
 8003684:	40020470 	.word	0x40020470
 8003688:	40020488 	.word	0x40020488
 800368c:	400204a0 	.word	0x400204a0
 8003690:	400204b8 	.word	0x400204b8
 8003694:	58025408 	.word	0x58025408
 8003698:	5802541c 	.word	0x5802541c
 800369c:	58025430 	.word	0x58025430
 80036a0:	58025444 	.word	0x58025444
 80036a4:	58025458 	.word	0x58025458
 80036a8:	5802546c 	.word	0x5802546c
 80036ac:	58025480 	.word	0x58025480
 80036b0:	58025494 	.word	0x58025494
 80036b4:	2300      	movs	r3, #0
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d028      	beq.n	800370c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80036c8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036ce:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036d4:	f003 031f 	and.w	r3, r3, #31
 80036d8:	2201      	movs	r2, #1
 80036da:	409a      	lsls	r2, r3
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036e4:	687a      	ldr	r2, [r7, #4]
 80036e6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80036e8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d00c      	beq.n	800370c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003700:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003706:	687a      	ldr	r2, [r7, #4]
 8003708:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800370a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2201      	movs	r2, #1
 8003710:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2200      	movs	r2, #0
 8003718:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003720:	2b00      	cmp	r3, #0
 8003722:	d003      	beq.n	800372c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003728:	6878      	ldr	r0, [r7, #4]
 800372a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800372c:	2300      	movs	r3, #0
}
 800372e:	4618      	mov	r0, r3
 8003730:	3710      	adds	r7, #16
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
 8003736:	bf00      	nop

08003738 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b08a      	sub	sp, #40	; 0x28
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003740:	2300      	movs	r3, #0
 8003742:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003744:	4b67      	ldr	r3, [pc, #412]	; (80038e4 <HAL_DMA_IRQHandler+0x1ac>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a67      	ldr	r2, [pc, #412]	; (80038e8 <HAL_DMA_IRQHandler+0x1b0>)
 800374a:	fba2 2303 	umull	r2, r3, r2, r3
 800374e:	0a9b      	lsrs	r3, r3, #10
 8003750:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003756:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800375c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800375e:	6a3b      	ldr	r3, [r7, #32]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003764:	69fb      	ldr	r3, [r7, #28]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a5f      	ldr	r2, [pc, #380]	; (80038ec <HAL_DMA_IRQHandler+0x1b4>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d04a      	beq.n	800380a <HAL_DMA_IRQHandler+0xd2>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a5d      	ldr	r2, [pc, #372]	; (80038f0 <HAL_DMA_IRQHandler+0x1b8>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d045      	beq.n	800380a <HAL_DMA_IRQHandler+0xd2>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a5c      	ldr	r2, [pc, #368]	; (80038f4 <HAL_DMA_IRQHandler+0x1bc>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d040      	beq.n	800380a <HAL_DMA_IRQHandler+0xd2>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a5a      	ldr	r2, [pc, #360]	; (80038f8 <HAL_DMA_IRQHandler+0x1c0>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d03b      	beq.n	800380a <HAL_DMA_IRQHandler+0xd2>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a59      	ldr	r2, [pc, #356]	; (80038fc <HAL_DMA_IRQHandler+0x1c4>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d036      	beq.n	800380a <HAL_DMA_IRQHandler+0xd2>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a57      	ldr	r2, [pc, #348]	; (8003900 <HAL_DMA_IRQHandler+0x1c8>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d031      	beq.n	800380a <HAL_DMA_IRQHandler+0xd2>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a56      	ldr	r2, [pc, #344]	; (8003904 <HAL_DMA_IRQHandler+0x1cc>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d02c      	beq.n	800380a <HAL_DMA_IRQHandler+0xd2>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a54      	ldr	r2, [pc, #336]	; (8003908 <HAL_DMA_IRQHandler+0x1d0>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d027      	beq.n	800380a <HAL_DMA_IRQHandler+0xd2>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a53      	ldr	r2, [pc, #332]	; (800390c <HAL_DMA_IRQHandler+0x1d4>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d022      	beq.n	800380a <HAL_DMA_IRQHandler+0xd2>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a51      	ldr	r2, [pc, #324]	; (8003910 <HAL_DMA_IRQHandler+0x1d8>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d01d      	beq.n	800380a <HAL_DMA_IRQHandler+0xd2>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a50      	ldr	r2, [pc, #320]	; (8003914 <HAL_DMA_IRQHandler+0x1dc>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d018      	beq.n	800380a <HAL_DMA_IRQHandler+0xd2>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a4e      	ldr	r2, [pc, #312]	; (8003918 <HAL_DMA_IRQHandler+0x1e0>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d013      	beq.n	800380a <HAL_DMA_IRQHandler+0xd2>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a4d      	ldr	r2, [pc, #308]	; (800391c <HAL_DMA_IRQHandler+0x1e4>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d00e      	beq.n	800380a <HAL_DMA_IRQHandler+0xd2>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a4b      	ldr	r2, [pc, #300]	; (8003920 <HAL_DMA_IRQHandler+0x1e8>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d009      	beq.n	800380a <HAL_DMA_IRQHandler+0xd2>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a4a      	ldr	r2, [pc, #296]	; (8003924 <HAL_DMA_IRQHandler+0x1ec>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d004      	beq.n	800380a <HAL_DMA_IRQHandler+0xd2>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a48      	ldr	r2, [pc, #288]	; (8003928 <HAL_DMA_IRQHandler+0x1f0>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d101      	bne.n	800380e <HAL_DMA_IRQHandler+0xd6>
 800380a:	2301      	movs	r3, #1
 800380c:	e000      	b.n	8003810 <HAL_DMA_IRQHandler+0xd8>
 800380e:	2300      	movs	r3, #0
 8003810:	2b00      	cmp	r3, #0
 8003812:	f000 842b 	beq.w	800406c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800381a:	f003 031f 	and.w	r3, r3, #31
 800381e:	2208      	movs	r2, #8
 8003820:	409a      	lsls	r2, r3
 8003822:	69bb      	ldr	r3, [r7, #24]
 8003824:	4013      	ands	r3, r2
 8003826:	2b00      	cmp	r3, #0
 8003828:	f000 80a2 	beq.w	8003970 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a2e      	ldr	r2, [pc, #184]	; (80038ec <HAL_DMA_IRQHandler+0x1b4>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d04a      	beq.n	80038cc <HAL_DMA_IRQHandler+0x194>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a2d      	ldr	r2, [pc, #180]	; (80038f0 <HAL_DMA_IRQHandler+0x1b8>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d045      	beq.n	80038cc <HAL_DMA_IRQHandler+0x194>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a2b      	ldr	r2, [pc, #172]	; (80038f4 <HAL_DMA_IRQHandler+0x1bc>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d040      	beq.n	80038cc <HAL_DMA_IRQHandler+0x194>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a2a      	ldr	r2, [pc, #168]	; (80038f8 <HAL_DMA_IRQHandler+0x1c0>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d03b      	beq.n	80038cc <HAL_DMA_IRQHandler+0x194>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a28      	ldr	r2, [pc, #160]	; (80038fc <HAL_DMA_IRQHandler+0x1c4>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d036      	beq.n	80038cc <HAL_DMA_IRQHandler+0x194>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a27      	ldr	r2, [pc, #156]	; (8003900 <HAL_DMA_IRQHandler+0x1c8>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d031      	beq.n	80038cc <HAL_DMA_IRQHandler+0x194>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a25      	ldr	r2, [pc, #148]	; (8003904 <HAL_DMA_IRQHandler+0x1cc>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d02c      	beq.n	80038cc <HAL_DMA_IRQHandler+0x194>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a24      	ldr	r2, [pc, #144]	; (8003908 <HAL_DMA_IRQHandler+0x1d0>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d027      	beq.n	80038cc <HAL_DMA_IRQHandler+0x194>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a22      	ldr	r2, [pc, #136]	; (800390c <HAL_DMA_IRQHandler+0x1d4>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d022      	beq.n	80038cc <HAL_DMA_IRQHandler+0x194>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a21      	ldr	r2, [pc, #132]	; (8003910 <HAL_DMA_IRQHandler+0x1d8>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d01d      	beq.n	80038cc <HAL_DMA_IRQHandler+0x194>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a1f      	ldr	r2, [pc, #124]	; (8003914 <HAL_DMA_IRQHandler+0x1dc>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d018      	beq.n	80038cc <HAL_DMA_IRQHandler+0x194>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a1e      	ldr	r2, [pc, #120]	; (8003918 <HAL_DMA_IRQHandler+0x1e0>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d013      	beq.n	80038cc <HAL_DMA_IRQHandler+0x194>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a1c      	ldr	r2, [pc, #112]	; (800391c <HAL_DMA_IRQHandler+0x1e4>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d00e      	beq.n	80038cc <HAL_DMA_IRQHandler+0x194>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a1b      	ldr	r2, [pc, #108]	; (8003920 <HAL_DMA_IRQHandler+0x1e8>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d009      	beq.n	80038cc <HAL_DMA_IRQHandler+0x194>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a19      	ldr	r2, [pc, #100]	; (8003924 <HAL_DMA_IRQHandler+0x1ec>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d004      	beq.n	80038cc <HAL_DMA_IRQHandler+0x194>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a18      	ldr	r2, [pc, #96]	; (8003928 <HAL_DMA_IRQHandler+0x1f0>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d12f      	bne.n	800392c <HAL_DMA_IRQHandler+0x1f4>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 0304 	and.w	r3, r3, #4
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	bf14      	ite	ne
 80038da:	2301      	movne	r3, #1
 80038dc:	2300      	moveq	r3, #0
 80038de:	b2db      	uxtb	r3, r3
 80038e0:	e02e      	b.n	8003940 <HAL_DMA_IRQHandler+0x208>
 80038e2:	bf00      	nop
 80038e4:	24000000 	.word	0x24000000
 80038e8:	1b4e81b5 	.word	0x1b4e81b5
 80038ec:	40020010 	.word	0x40020010
 80038f0:	40020028 	.word	0x40020028
 80038f4:	40020040 	.word	0x40020040
 80038f8:	40020058 	.word	0x40020058
 80038fc:	40020070 	.word	0x40020070
 8003900:	40020088 	.word	0x40020088
 8003904:	400200a0 	.word	0x400200a0
 8003908:	400200b8 	.word	0x400200b8
 800390c:	40020410 	.word	0x40020410
 8003910:	40020428 	.word	0x40020428
 8003914:	40020440 	.word	0x40020440
 8003918:	40020458 	.word	0x40020458
 800391c:	40020470 	.word	0x40020470
 8003920:	40020488 	.word	0x40020488
 8003924:	400204a0 	.word	0x400204a0
 8003928:	400204b8 	.word	0x400204b8
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 0308 	and.w	r3, r3, #8
 8003936:	2b00      	cmp	r3, #0
 8003938:	bf14      	ite	ne
 800393a:	2301      	movne	r3, #1
 800393c:	2300      	moveq	r3, #0
 800393e:	b2db      	uxtb	r3, r3
 8003940:	2b00      	cmp	r3, #0
 8003942:	d015      	beq.n	8003970 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f022 0204 	bic.w	r2, r2, #4
 8003952:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003958:	f003 031f 	and.w	r3, r3, #31
 800395c:	2208      	movs	r2, #8
 800395e:	409a      	lsls	r2, r3
 8003960:	6a3b      	ldr	r3, [r7, #32]
 8003962:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003968:	f043 0201 	orr.w	r2, r3, #1
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003974:	f003 031f 	and.w	r3, r3, #31
 8003978:	69ba      	ldr	r2, [r7, #24]
 800397a:	fa22 f303 	lsr.w	r3, r2, r3
 800397e:	f003 0301 	and.w	r3, r3, #1
 8003982:	2b00      	cmp	r3, #0
 8003984:	d06e      	beq.n	8003a64 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a69      	ldr	r2, [pc, #420]	; (8003b30 <HAL_DMA_IRQHandler+0x3f8>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d04a      	beq.n	8003a26 <HAL_DMA_IRQHandler+0x2ee>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a67      	ldr	r2, [pc, #412]	; (8003b34 <HAL_DMA_IRQHandler+0x3fc>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d045      	beq.n	8003a26 <HAL_DMA_IRQHandler+0x2ee>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a66      	ldr	r2, [pc, #408]	; (8003b38 <HAL_DMA_IRQHandler+0x400>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d040      	beq.n	8003a26 <HAL_DMA_IRQHandler+0x2ee>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a64      	ldr	r2, [pc, #400]	; (8003b3c <HAL_DMA_IRQHandler+0x404>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d03b      	beq.n	8003a26 <HAL_DMA_IRQHandler+0x2ee>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a63      	ldr	r2, [pc, #396]	; (8003b40 <HAL_DMA_IRQHandler+0x408>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d036      	beq.n	8003a26 <HAL_DMA_IRQHandler+0x2ee>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a61      	ldr	r2, [pc, #388]	; (8003b44 <HAL_DMA_IRQHandler+0x40c>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d031      	beq.n	8003a26 <HAL_DMA_IRQHandler+0x2ee>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a60      	ldr	r2, [pc, #384]	; (8003b48 <HAL_DMA_IRQHandler+0x410>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d02c      	beq.n	8003a26 <HAL_DMA_IRQHandler+0x2ee>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a5e      	ldr	r2, [pc, #376]	; (8003b4c <HAL_DMA_IRQHandler+0x414>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d027      	beq.n	8003a26 <HAL_DMA_IRQHandler+0x2ee>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a5d      	ldr	r2, [pc, #372]	; (8003b50 <HAL_DMA_IRQHandler+0x418>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d022      	beq.n	8003a26 <HAL_DMA_IRQHandler+0x2ee>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a5b      	ldr	r2, [pc, #364]	; (8003b54 <HAL_DMA_IRQHandler+0x41c>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d01d      	beq.n	8003a26 <HAL_DMA_IRQHandler+0x2ee>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a5a      	ldr	r2, [pc, #360]	; (8003b58 <HAL_DMA_IRQHandler+0x420>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d018      	beq.n	8003a26 <HAL_DMA_IRQHandler+0x2ee>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a58      	ldr	r2, [pc, #352]	; (8003b5c <HAL_DMA_IRQHandler+0x424>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d013      	beq.n	8003a26 <HAL_DMA_IRQHandler+0x2ee>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a57      	ldr	r2, [pc, #348]	; (8003b60 <HAL_DMA_IRQHandler+0x428>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d00e      	beq.n	8003a26 <HAL_DMA_IRQHandler+0x2ee>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a55      	ldr	r2, [pc, #340]	; (8003b64 <HAL_DMA_IRQHandler+0x42c>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d009      	beq.n	8003a26 <HAL_DMA_IRQHandler+0x2ee>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a54      	ldr	r2, [pc, #336]	; (8003b68 <HAL_DMA_IRQHandler+0x430>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d004      	beq.n	8003a26 <HAL_DMA_IRQHandler+0x2ee>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a52      	ldr	r2, [pc, #328]	; (8003b6c <HAL_DMA_IRQHandler+0x434>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d10a      	bne.n	8003a3c <HAL_DMA_IRQHandler+0x304>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	695b      	ldr	r3, [r3, #20]
 8003a2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	bf14      	ite	ne
 8003a34:	2301      	movne	r3, #1
 8003a36:	2300      	moveq	r3, #0
 8003a38:	b2db      	uxtb	r3, r3
 8003a3a:	e003      	b.n	8003a44 <HAL_DMA_IRQHandler+0x30c>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	2300      	movs	r3, #0
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d00d      	beq.n	8003a64 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a4c:	f003 031f 	and.w	r3, r3, #31
 8003a50:	2201      	movs	r2, #1
 8003a52:	409a      	lsls	r2, r3
 8003a54:	6a3b      	ldr	r3, [r7, #32]
 8003a56:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a5c:	f043 0202 	orr.w	r2, r3, #2
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a68:	f003 031f 	and.w	r3, r3, #31
 8003a6c:	2204      	movs	r2, #4
 8003a6e:	409a      	lsls	r2, r3
 8003a70:	69bb      	ldr	r3, [r7, #24]
 8003a72:	4013      	ands	r3, r2
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	f000 808f 	beq.w	8003b98 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a2c      	ldr	r2, [pc, #176]	; (8003b30 <HAL_DMA_IRQHandler+0x3f8>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d04a      	beq.n	8003b1a <HAL_DMA_IRQHandler+0x3e2>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a2a      	ldr	r2, [pc, #168]	; (8003b34 <HAL_DMA_IRQHandler+0x3fc>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d045      	beq.n	8003b1a <HAL_DMA_IRQHandler+0x3e2>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a29      	ldr	r2, [pc, #164]	; (8003b38 <HAL_DMA_IRQHandler+0x400>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d040      	beq.n	8003b1a <HAL_DMA_IRQHandler+0x3e2>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a27      	ldr	r2, [pc, #156]	; (8003b3c <HAL_DMA_IRQHandler+0x404>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d03b      	beq.n	8003b1a <HAL_DMA_IRQHandler+0x3e2>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a26      	ldr	r2, [pc, #152]	; (8003b40 <HAL_DMA_IRQHandler+0x408>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d036      	beq.n	8003b1a <HAL_DMA_IRQHandler+0x3e2>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a24      	ldr	r2, [pc, #144]	; (8003b44 <HAL_DMA_IRQHandler+0x40c>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d031      	beq.n	8003b1a <HAL_DMA_IRQHandler+0x3e2>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a23      	ldr	r2, [pc, #140]	; (8003b48 <HAL_DMA_IRQHandler+0x410>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d02c      	beq.n	8003b1a <HAL_DMA_IRQHandler+0x3e2>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a21      	ldr	r2, [pc, #132]	; (8003b4c <HAL_DMA_IRQHandler+0x414>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d027      	beq.n	8003b1a <HAL_DMA_IRQHandler+0x3e2>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a20      	ldr	r2, [pc, #128]	; (8003b50 <HAL_DMA_IRQHandler+0x418>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d022      	beq.n	8003b1a <HAL_DMA_IRQHandler+0x3e2>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a1e      	ldr	r2, [pc, #120]	; (8003b54 <HAL_DMA_IRQHandler+0x41c>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d01d      	beq.n	8003b1a <HAL_DMA_IRQHandler+0x3e2>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a1d      	ldr	r2, [pc, #116]	; (8003b58 <HAL_DMA_IRQHandler+0x420>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d018      	beq.n	8003b1a <HAL_DMA_IRQHandler+0x3e2>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a1b      	ldr	r2, [pc, #108]	; (8003b5c <HAL_DMA_IRQHandler+0x424>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d013      	beq.n	8003b1a <HAL_DMA_IRQHandler+0x3e2>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a1a      	ldr	r2, [pc, #104]	; (8003b60 <HAL_DMA_IRQHandler+0x428>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d00e      	beq.n	8003b1a <HAL_DMA_IRQHandler+0x3e2>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a18      	ldr	r2, [pc, #96]	; (8003b64 <HAL_DMA_IRQHandler+0x42c>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d009      	beq.n	8003b1a <HAL_DMA_IRQHandler+0x3e2>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a17      	ldr	r2, [pc, #92]	; (8003b68 <HAL_DMA_IRQHandler+0x430>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d004      	beq.n	8003b1a <HAL_DMA_IRQHandler+0x3e2>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a15      	ldr	r2, [pc, #84]	; (8003b6c <HAL_DMA_IRQHandler+0x434>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d12a      	bne.n	8003b70 <HAL_DMA_IRQHandler+0x438>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 0302 	and.w	r3, r3, #2
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	bf14      	ite	ne
 8003b28:	2301      	movne	r3, #1
 8003b2a:	2300      	moveq	r3, #0
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	e023      	b.n	8003b78 <HAL_DMA_IRQHandler+0x440>
 8003b30:	40020010 	.word	0x40020010
 8003b34:	40020028 	.word	0x40020028
 8003b38:	40020040 	.word	0x40020040
 8003b3c:	40020058 	.word	0x40020058
 8003b40:	40020070 	.word	0x40020070
 8003b44:	40020088 	.word	0x40020088
 8003b48:	400200a0 	.word	0x400200a0
 8003b4c:	400200b8 	.word	0x400200b8
 8003b50:	40020410 	.word	0x40020410
 8003b54:	40020428 	.word	0x40020428
 8003b58:	40020440 	.word	0x40020440
 8003b5c:	40020458 	.word	0x40020458
 8003b60:	40020470 	.word	0x40020470
 8003b64:	40020488 	.word	0x40020488
 8003b68:	400204a0 	.word	0x400204a0
 8003b6c:	400204b8 	.word	0x400204b8
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	2300      	movs	r3, #0
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d00d      	beq.n	8003b98 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b80:	f003 031f 	and.w	r3, r3, #31
 8003b84:	2204      	movs	r2, #4
 8003b86:	409a      	lsls	r2, r3
 8003b88:	6a3b      	ldr	r3, [r7, #32]
 8003b8a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b90:	f043 0204 	orr.w	r2, r3, #4
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b9c:	f003 031f 	and.w	r3, r3, #31
 8003ba0:	2210      	movs	r2, #16
 8003ba2:	409a      	lsls	r2, r3
 8003ba4:	69bb      	ldr	r3, [r7, #24]
 8003ba6:	4013      	ands	r3, r2
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	f000 80a6 	beq.w	8003cfa <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a85      	ldr	r2, [pc, #532]	; (8003dc8 <HAL_DMA_IRQHandler+0x690>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d04a      	beq.n	8003c4e <HAL_DMA_IRQHandler+0x516>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a83      	ldr	r2, [pc, #524]	; (8003dcc <HAL_DMA_IRQHandler+0x694>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d045      	beq.n	8003c4e <HAL_DMA_IRQHandler+0x516>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a82      	ldr	r2, [pc, #520]	; (8003dd0 <HAL_DMA_IRQHandler+0x698>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d040      	beq.n	8003c4e <HAL_DMA_IRQHandler+0x516>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a80      	ldr	r2, [pc, #512]	; (8003dd4 <HAL_DMA_IRQHandler+0x69c>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d03b      	beq.n	8003c4e <HAL_DMA_IRQHandler+0x516>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a7f      	ldr	r2, [pc, #508]	; (8003dd8 <HAL_DMA_IRQHandler+0x6a0>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d036      	beq.n	8003c4e <HAL_DMA_IRQHandler+0x516>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a7d      	ldr	r2, [pc, #500]	; (8003ddc <HAL_DMA_IRQHandler+0x6a4>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d031      	beq.n	8003c4e <HAL_DMA_IRQHandler+0x516>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a7c      	ldr	r2, [pc, #496]	; (8003de0 <HAL_DMA_IRQHandler+0x6a8>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d02c      	beq.n	8003c4e <HAL_DMA_IRQHandler+0x516>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a7a      	ldr	r2, [pc, #488]	; (8003de4 <HAL_DMA_IRQHandler+0x6ac>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d027      	beq.n	8003c4e <HAL_DMA_IRQHandler+0x516>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a79      	ldr	r2, [pc, #484]	; (8003de8 <HAL_DMA_IRQHandler+0x6b0>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d022      	beq.n	8003c4e <HAL_DMA_IRQHandler+0x516>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a77      	ldr	r2, [pc, #476]	; (8003dec <HAL_DMA_IRQHandler+0x6b4>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d01d      	beq.n	8003c4e <HAL_DMA_IRQHandler+0x516>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a76      	ldr	r2, [pc, #472]	; (8003df0 <HAL_DMA_IRQHandler+0x6b8>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d018      	beq.n	8003c4e <HAL_DMA_IRQHandler+0x516>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a74      	ldr	r2, [pc, #464]	; (8003df4 <HAL_DMA_IRQHandler+0x6bc>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d013      	beq.n	8003c4e <HAL_DMA_IRQHandler+0x516>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a73      	ldr	r2, [pc, #460]	; (8003df8 <HAL_DMA_IRQHandler+0x6c0>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d00e      	beq.n	8003c4e <HAL_DMA_IRQHandler+0x516>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a71      	ldr	r2, [pc, #452]	; (8003dfc <HAL_DMA_IRQHandler+0x6c4>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d009      	beq.n	8003c4e <HAL_DMA_IRQHandler+0x516>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a70      	ldr	r2, [pc, #448]	; (8003e00 <HAL_DMA_IRQHandler+0x6c8>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d004      	beq.n	8003c4e <HAL_DMA_IRQHandler+0x516>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a6e      	ldr	r2, [pc, #440]	; (8003e04 <HAL_DMA_IRQHandler+0x6cc>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d10a      	bne.n	8003c64 <HAL_DMA_IRQHandler+0x52c>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f003 0308 	and.w	r3, r3, #8
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	bf14      	ite	ne
 8003c5c:	2301      	movne	r3, #1
 8003c5e:	2300      	moveq	r3, #0
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	e009      	b.n	8003c78 <HAL_DMA_IRQHandler+0x540>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f003 0304 	and.w	r3, r3, #4
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	bf14      	ite	ne
 8003c72:	2301      	movne	r3, #1
 8003c74:	2300      	moveq	r3, #0
 8003c76:	b2db      	uxtb	r3, r3
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d03e      	beq.n	8003cfa <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c80:	f003 031f 	and.w	r3, r3, #31
 8003c84:	2210      	movs	r2, #16
 8003c86:	409a      	lsls	r2, r3
 8003c88:	6a3b      	ldr	r3, [r7, #32]
 8003c8a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d018      	beq.n	8003ccc <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d108      	bne.n	8003cba <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d024      	beq.n	8003cfa <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb4:	6878      	ldr	r0, [r7, #4]
 8003cb6:	4798      	blx	r3
 8003cb8:	e01f      	b.n	8003cfa <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d01b      	beq.n	8003cfa <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	4798      	blx	r3
 8003cca:	e016      	b.n	8003cfa <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d107      	bne.n	8003cea <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f022 0208 	bic.w	r2, r2, #8
 8003ce8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d003      	beq.n	8003cfa <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cfe:	f003 031f 	and.w	r3, r3, #31
 8003d02:	2220      	movs	r2, #32
 8003d04:	409a      	lsls	r2, r3
 8003d06:	69bb      	ldr	r3, [r7, #24]
 8003d08:	4013      	ands	r3, r2
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	f000 8110 	beq.w	8003f30 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a2c      	ldr	r2, [pc, #176]	; (8003dc8 <HAL_DMA_IRQHandler+0x690>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d04a      	beq.n	8003db0 <HAL_DMA_IRQHandler+0x678>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a2b      	ldr	r2, [pc, #172]	; (8003dcc <HAL_DMA_IRQHandler+0x694>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d045      	beq.n	8003db0 <HAL_DMA_IRQHandler+0x678>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a29      	ldr	r2, [pc, #164]	; (8003dd0 <HAL_DMA_IRQHandler+0x698>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d040      	beq.n	8003db0 <HAL_DMA_IRQHandler+0x678>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a28      	ldr	r2, [pc, #160]	; (8003dd4 <HAL_DMA_IRQHandler+0x69c>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d03b      	beq.n	8003db0 <HAL_DMA_IRQHandler+0x678>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a26      	ldr	r2, [pc, #152]	; (8003dd8 <HAL_DMA_IRQHandler+0x6a0>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d036      	beq.n	8003db0 <HAL_DMA_IRQHandler+0x678>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a25      	ldr	r2, [pc, #148]	; (8003ddc <HAL_DMA_IRQHandler+0x6a4>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d031      	beq.n	8003db0 <HAL_DMA_IRQHandler+0x678>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a23      	ldr	r2, [pc, #140]	; (8003de0 <HAL_DMA_IRQHandler+0x6a8>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d02c      	beq.n	8003db0 <HAL_DMA_IRQHandler+0x678>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a22      	ldr	r2, [pc, #136]	; (8003de4 <HAL_DMA_IRQHandler+0x6ac>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d027      	beq.n	8003db0 <HAL_DMA_IRQHandler+0x678>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a20      	ldr	r2, [pc, #128]	; (8003de8 <HAL_DMA_IRQHandler+0x6b0>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d022      	beq.n	8003db0 <HAL_DMA_IRQHandler+0x678>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a1f      	ldr	r2, [pc, #124]	; (8003dec <HAL_DMA_IRQHandler+0x6b4>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d01d      	beq.n	8003db0 <HAL_DMA_IRQHandler+0x678>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a1d      	ldr	r2, [pc, #116]	; (8003df0 <HAL_DMA_IRQHandler+0x6b8>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d018      	beq.n	8003db0 <HAL_DMA_IRQHandler+0x678>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a1c      	ldr	r2, [pc, #112]	; (8003df4 <HAL_DMA_IRQHandler+0x6bc>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d013      	beq.n	8003db0 <HAL_DMA_IRQHandler+0x678>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a1a      	ldr	r2, [pc, #104]	; (8003df8 <HAL_DMA_IRQHandler+0x6c0>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d00e      	beq.n	8003db0 <HAL_DMA_IRQHandler+0x678>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a19      	ldr	r2, [pc, #100]	; (8003dfc <HAL_DMA_IRQHandler+0x6c4>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d009      	beq.n	8003db0 <HAL_DMA_IRQHandler+0x678>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a17      	ldr	r2, [pc, #92]	; (8003e00 <HAL_DMA_IRQHandler+0x6c8>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d004      	beq.n	8003db0 <HAL_DMA_IRQHandler+0x678>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a16      	ldr	r2, [pc, #88]	; (8003e04 <HAL_DMA_IRQHandler+0x6cc>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d12b      	bne.n	8003e08 <HAL_DMA_IRQHandler+0x6d0>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f003 0310 	and.w	r3, r3, #16
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	bf14      	ite	ne
 8003dbe:	2301      	movne	r3, #1
 8003dc0:	2300      	moveq	r3, #0
 8003dc2:	b2db      	uxtb	r3, r3
 8003dc4:	e02a      	b.n	8003e1c <HAL_DMA_IRQHandler+0x6e4>
 8003dc6:	bf00      	nop
 8003dc8:	40020010 	.word	0x40020010
 8003dcc:	40020028 	.word	0x40020028
 8003dd0:	40020040 	.word	0x40020040
 8003dd4:	40020058 	.word	0x40020058
 8003dd8:	40020070 	.word	0x40020070
 8003ddc:	40020088 	.word	0x40020088
 8003de0:	400200a0 	.word	0x400200a0
 8003de4:	400200b8 	.word	0x400200b8
 8003de8:	40020410 	.word	0x40020410
 8003dec:	40020428 	.word	0x40020428
 8003df0:	40020440 	.word	0x40020440
 8003df4:	40020458 	.word	0x40020458
 8003df8:	40020470 	.word	0x40020470
 8003dfc:	40020488 	.word	0x40020488
 8003e00:	400204a0 	.word	0x400204a0
 8003e04:	400204b8 	.word	0x400204b8
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f003 0302 	and.w	r3, r3, #2
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	bf14      	ite	ne
 8003e16:	2301      	movne	r3, #1
 8003e18:	2300      	moveq	r3, #0
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	f000 8087 	beq.w	8003f30 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e26:	f003 031f 	and.w	r3, r3, #31
 8003e2a:	2220      	movs	r2, #32
 8003e2c:	409a      	lsls	r2, r3
 8003e2e:	6a3b      	ldr	r3, [r7, #32]
 8003e30:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	2b04      	cmp	r3, #4
 8003e3c:	d139      	bne.n	8003eb2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f022 0216 	bic.w	r2, r2, #22
 8003e4c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	695a      	ldr	r2, [r3, #20]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e5c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d103      	bne.n	8003e6e <HAL_DMA_IRQHandler+0x736>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d007      	beq.n	8003e7e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f022 0208 	bic.w	r2, r2, #8
 8003e7c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e82:	f003 031f 	and.w	r3, r3, #31
 8003e86:	223f      	movs	r2, #63	; 0x3f
 8003e88:	409a      	lsls	r2, r3
 8003e8a:	6a3b      	ldr	r3, [r7, #32]
 8003e8c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2201      	movs	r2, #1
 8003e92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	f000 834a 	beq.w	800453c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003eac:	6878      	ldr	r0, [r7, #4]
 8003eae:	4798      	blx	r3
          }
          return;
 8003eb0:	e344      	b.n	800453c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d018      	beq.n	8003ef2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d108      	bne.n	8003ee0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d02c      	beq.n	8003f30 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	4798      	blx	r3
 8003ede:	e027      	b.n	8003f30 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d023      	beq.n	8003f30 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eec:	6878      	ldr	r0, [r7, #4]
 8003eee:	4798      	blx	r3
 8003ef0:	e01e      	b.n	8003f30 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d10f      	bne.n	8003f20 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f022 0210 	bic.w	r2, r2, #16
 8003f0e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2201      	movs	r2, #1
 8003f14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d003      	beq.n	8003f30 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f2c:	6878      	ldr	r0, [r7, #4]
 8003f2e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	f000 8306 	beq.w	8004546 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f3e:	f003 0301 	and.w	r3, r3, #1
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	f000 8088 	beq.w	8004058 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2204      	movs	r2, #4
 8003f4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a7a      	ldr	r2, [pc, #488]	; (8004140 <HAL_DMA_IRQHandler+0xa08>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d04a      	beq.n	8003ff0 <HAL_DMA_IRQHandler+0x8b8>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a79      	ldr	r2, [pc, #484]	; (8004144 <HAL_DMA_IRQHandler+0xa0c>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d045      	beq.n	8003ff0 <HAL_DMA_IRQHandler+0x8b8>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a77      	ldr	r2, [pc, #476]	; (8004148 <HAL_DMA_IRQHandler+0xa10>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d040      	beq.n	8003ff0 <HAL_DMA_IRQHandler+0x8b8>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a76      	ldr	r2, [pc, #472]	; (800414c <HAL_DMA_IRQHandler+0xa14>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d03b      	beq.n	8003ff0 <HAL_DMA_IRQHandler+0x8b8>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a74      	ldr	r2, [pc, #464]	; (8004150 <HAL_DMA_IRQHandler+0xa18>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d036      	beq.n	8003ff0 <HAL_DMA_IRQHandler+0x8b8>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a73      	ldr	r2, [pc, #460]	; (8004154 <HAL_DMA_IRQHandler+0xa1c>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d031      	beq.n	8003ff0 <HAL_DMA_IRQHandler+0x8b8>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a71      	ldr	r2, [pc, #452]	; (8004158 <HAL_DMA_IRQHandler+0xa20>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d02c      	beq.n	8003ff0 <HAL_DMA_IRQHandler+0x8b8>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a70      	ldr	r2, [pc, #448]	; (800415c <HAL_DMA_IRQHandler+0xa24>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d027      	beq.n	8003ff0 <HAL_DMA_IRQHandler+0x8b8>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a6e      	ldr	r2, [pc, #440]	; (8004160 <HAL_DMA_IRQHandler+0xa28>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d022      	beq.n	8003ff0 <HAL_DMA_IRQHandler+0x8b8>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a6d      	ldr	r2, [pc, #436]	; (8004164 <HAL_DMA_IRQHandler+0xa2c>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d01d      	beq.n	8003ff0 <HAL_DMA_IRQHandler+0x8b8>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a6b      	ldr	r2, [pc, #428]	; (8004168 <HAL_DMA_IRQHandler+0xa30>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d018      	beq.n	8003ff0 <HAL_DMA_IRQHandler+0x8b8>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a6a      	ldr	r2, [pc, #424]	; (800416c <HAL_DMA_IRQHandler+0xa34>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d013      	beq.n	8003ff0 <HAL_DMA_IRQHandler+0x8b8>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a68      	ldr	r2, [pc, #416]	; (8004170 <HAL_DMA_IRQHandler+0xa38>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d00e      	beq.n	8003ff0 <HAL_DMA_IRQHandler+0x8b8>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a67      	ldr	r2, [pc, #412]	; (8004174 <HAL_DMA_IRQHandler+0xa3c>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d009      	beq.n	8003ff0 <HAL_DMA_IRQHandler+0x8b8>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a65      	ldr	r2, [pc, #404]	; (8004178 <HAL_DMA_IRQHandler+0xa40>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d004      	beq.n	8003ff0 <HAL_DMA_IRQHandler+0x8b8>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a64      	ldr	r2, [pc, #400]	; (800417c <HAL_DMA_IRQHandler+0xa44>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d108      	bne.n	8004002 <HAL_DMA_IRQHandler+0x8ca>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f022 0201 	bic.w	r2, r2, #1
 8003ffe:	601a      	str	r2, [r3, #0]
 8004000:	e007      	b.n	8004012 <HAL_DMA_IRQHandler+0x8da>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f022 0201 	bic.w	r2, r2, #1
 8004010:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	3301      	adds	r3, #1
 8004016:	60fb      	str	r3, [r7, #12]
 8004018:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800401a:	429a      	cmp	r2, r3
 800401c:	d307      	bcc.n	800402e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f003 0301 	and.w	r3, r3, #1
 8004028:	2b00      	cmp	r3, #0
 800402a:	d1f2      	bne.n	8004012 <HAL_DMA_IRQHandler+0x8da>
 800402c:	e000      	b.n	8004030 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800402e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f003 0301 	and.w	r3, r3, #1
 800403a:	2b00      	cmp	r3, #0
 800403c:	d004      	beq.n	8004048 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2203      	movs	r2, #3
 8004042:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004046:	e003      	b.n	8004050 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2201      	movs	r2, #1
 800404c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2200      	movs	r2, #0
 8004054:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800405c:	2b00      	cmp	r3, #0
 800405e:	f000 8272 	beq.w	8004546 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	4798      	blx	r3
 800406a:	e26c      	b.n	8004546 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a43      	ldr	r2, [pc, #268]	; (8004180 <HAL_DMA_IRQHandler+0xa48>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d022      	beq.n	80040bc <HAL_DMA_IRQHandler+0x984>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a42      	ldr	r2, [pc, #264]	; (8004184 <HAL_DMA_IRQHandler+0xa4c>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d01d      	beq.n	80040bc <HAL_DMA_IRQHandler+0x984>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a40      	ldr	r2, [pc, #256]	; (8004188 <HAL_DMA_IRQHandler+0xa50>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d018      	beq.n	80040bc <HAL_DMA_IRQHandler+0x984>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a3f      	ldr	r2, [pc, #252]	; (800418c <HAL_DMA_IRQHandler+0xa54>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d013      	beq.n	80040bc <HAL_DMA_IRQHandler+0x984>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a3d      	ldr	r2, [pc, #244]	; (8004190 <HAL_DMA_IRQHandler+0xa58>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d00e      	beq.n	80040bc <HAL_DMA_IRQHandler+0x984>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a3c      	ldr	r2, [pc, #240]	; (8004194 <HAL_DMA_IRQHandler+0xa5c>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d009      	beq.n	80040bc <HAL_DMA_IRQHandler+0x984>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a3a      	ldr	r2, [pc, #232]	; (8004198 <HAL_DMA_IRQHandler+0xa60>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d004      	beq.n	80040bc <HAL_DMA_IRQHandler+0x984>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a39      	ldr	r2, [pc, #228]	; (800419c <HAL_DMA_IRQHandler+0xa64>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d101      	bne.n	80040c0 <HAL_DMA_IRQHandler+0x988>
 80040bc:	2301      	movs	r3, #1
 80040be:	e000      	b.n	80040c2 <HAL_DMA_IRQHandler+0x98a>
 80040c0:	2300      	movs	r3, #0
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	f000 823f 	beq.w	8004546 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040d4:	f003 031f 	and.w	r3, r3, #31
 80040d8:	2204      	movs	r2, #4
 80040da:	409a      	lsls	r2, r3
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	4013      	ands	r3, r2
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	f000 80cd 	beq.w	8004280 <HAL_DMA_IRQHandler+0xb48>
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	f003 0304 	and.w	r3, r3, #4
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	f000 80c7 	beq.w	8004280 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040f6:	f003 031f 	and.w	r3, r3, #31
 80040fa:	2204      	movs	r2, #4
 80040fc:	409a      	lsls	r2, r3
 80040fe:	69fb      	ldr	r3, [r7, #28]
 8004100:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004108:	2b00      	cmp	r3, #0
 800410a:	d049      	beq.n	80041a0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004112:	2b00      	cmp	r3, #0
 8004114:	d109      	bne.n	800412a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800411a:	2b00      	cmp	r3, #0
 800411c:	f000 8210 	beq.w	8004540 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004124:	6878      	ldr	r0, [r7, #4]
 8004126:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004128:	e20a      	b.n	8004540 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800412e:	2b00      	cmp	r3, #0
 8004130:	f000 8206 	beq.w	8004540 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004138:	6878      	ldr	r0, [r7, #4]
 800413a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800413c:	e200      	b.n	8004540 <HAL_DMA_IRQHandler+0xe08>
 800413e:	bf00      	nop
 8004140:	40020010 	.word	0x40020010
 8004144:	40020028 	.word	0x40020028
 8004148:	40020040 	.word	0x40020040
 800414c:	40020058 	.word	0x40020058
 8004150:	40020070 	.word	0x40020070
 8004154:	40020088 	.word	0x40020088
 8004158:	400200a0 	.word	0x400200a0
 800415c:	400200b8 	.word	0x400200b8
 8004160:	40020410 	.word	0x40020410
 8004164:	40020428 	.word	0x40020428
 8004168:	40020440 	.word	0x40020440
 800416c:	40020458 	.word	0x40020458
 8004170:	40020470 	.word	0x40020470
 8004174:	40020488 	.word	0x40020488
 8004178:	400204a0 	.word	0x400204a0
 800417c:	400204b8 	.word	0x400204b8
 8004180:	58025408 	.word	0x58025408
 8004184:	5802541c 	.word	0x5802541c
 8004188:	58025430 	.word	0x58025430
 800418c:	58025444 	.word	0x58025444
 8004190:	58025458 	.word	0x58025458
 8004194:	5802546c 	.word	0x5802546c
 8004198:	58025480 	.word	0x58025480
 800419c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	f003 0320 	and.w	r3, r3, #32
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d160      	bne.n	800426c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a7f      	ldr	r2, [pc, #508]	; (80043ac <HAL_DMA_IRQHandler+0xc74>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d04a      	beq.n	800424a <HAL_DMA_IRQHandler+0xb12>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a7d      	ldr	r2, [pc, #500]	; (80043b0 <HAL_DMA_IRQHandler+0xc78>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d045      	beq.n	800424a <HAL_DMA_IRQHandler+0xb12>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a7c      	ldr	r2, [pc, #496]	; (80043b4 <HAL_DMA_IRQHandler+0xc7c>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d040      	beq.n	800424a <HAL_DMA_IRQHandler+0xb12>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a7a      	ldr	r2, [pc, #488]	; (80043b8 <HAL_DMA_IRQHandler+0xc80>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d03b      	beq.n	800424a <HAL_DMA_IRQHandler+0xb12>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a79      	ldr	r2, [pc, #484]	; (80043bc <HAL_DMA_IRQHandler+0xc84>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d036      	beq.n	800424a <HAL_DMA_IRQHandler+0xb12>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a77      	ldr	r2, [pc, #476]	; (80043c0 <HAL_DMA_IRQHandler+0xc88>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d031      	beq.n	800424a <HAL_DMA_IRQHandler+0xb12>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a76      	ldr	r2, [pc, #472]	; (80043c4 <HAL_DMA_IRQHandler+0xc8c>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d02c      	beq.n	800424a <HAL_DMA_IRQHandler+0xb12>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a74      	ldr	r2, [pc, #464]	; (80043c8 <HAL_DMA_IRQHandler+0xc90>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d027      	beq.n	800424a <HAL_DMA_IRQHandler+0xb12>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a73      	ldr	r2, [pc, #460]	; (80043cc <HAL_DMA_IRQHandler+0xc94>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d022      	beq.n	800424a <HAL_DMA_IRQHandler+0xb12>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a71      	ldr	r2, [pc, #452]	; (80043d0 <HAL_DMA_IRQHandler+0xc98>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d01d      	beq.n	800424a <HAL_DMA_IRQHandler+0xb12>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a70      	ldr	r2, [pc, #448]	; (80043d4 <HAL_DMA_IRQHandler+0xc9c>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d018      	beq.n	800424a <HAL_DMA_IRQHandler+0xb12>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a6e      	ldr	r2, [pc, #440]	; (80043d8 <HAL_DMA_IRQHandler+0xca0>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d013      	beq.n	800424a <HAL_DMA_IRQHandler+0xb12>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a6d      	ldr	r2, [pc, #436]	; (80043dc <HAL_DMA_IRQHandler+0xca4>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d00e      	beq.n	800424a <HAL_DMA_IRQHandler+0xb12>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a6b      	ldr	r2, [pc, #428]	; (80043e0 <HAL_DMA_IRQHandler+0xca8>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d009      	beq.n	800424a <HAL_DMA_IRQHandler+0xb12>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a6a      	ldr	r2, [pc, #424]	; (80043e4 <HAL_DMA_IRQHandler+0xcac>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d004      	beq.n	800424a <HAL_DMA_IRQHandler+0xb12>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a68      	ldr	r2, [pc, #416]	; (80043e8 <HAL_DMA_IRQHandler+0xcb0>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d108      	bne.n	800425c <HAL_DMA_IRQHandler+0xb24>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	681a      	ldr	r2, [r3, #0]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f022 0208 	bic.w	r2, r2, #8
 8004258:	601a      	str	r2, [r3, #0]
 800425a:	e007      	b.n	800426c <HAL_DMA_IRQHandler+0xb34>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f022 0204 	bic.w	r2, r2, #4
 800426a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004270:	2b00      	cmp	r3, #0
 8004272:	f000 8165 	beq.w	8004540 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800427e:	e15f      	b.n	8004540 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004284:	f003 031f 	and.w	r3, r3, #31
 8004288:	2202      	movs	r2, #2
 800428a:	409a      	lsls	r2, r3
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	4013      	ands	r3, r2
 8004290:	2b00      	cmp	r3, #0
 8004292:	f000 80c5 	beq.w	8004420 <HAL_DMA_IRQHandler+0xce8>
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	f003 0302 	and.w	r3, r3, #2
 800429c:	2b00      	cmp	r3, #0
 800429e:	f000 80bf 	beq.w	8004420 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042a6:	f003 031f 	and.w	r3, r3, #31
 80042aa:	2202      	movs	r2, #2
 80042ac:	409a      	lsls	r2, r3
 80042ae:	69fb      	ldr	r3, [r7, #28]
 80042b0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d018      	beq.n	80042ee <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d109      	bne.n	80042da <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	f000 813a 	beq.w	8004544 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042d4:	6878      	ldr	r0, [r7, #4]
 80042d6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80042d8:	e134      	b.n	8004544 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042de:	2b00      	cmp	r3, #0
 80042e0:	f000 8130 	beq.w	8004544 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042e8:	6878      	ldr	r0, [r7, #4]
 80042ea:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80042ec:	e12a      	b.n	8004544 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	f003 0320 	and.w	r3, r3, #32
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	f040 8089 	bne.w	800440c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a2b      	ldr	r2, [pc, #172]	; (80043ac <HAL_DMA_IRQHandler+0xc74>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d04a      	beq.n	800439a <HAL_DMA_IRQHandler+0xc62>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a29      	ldr	r2, [pc, #164]	; (80043b0 <HAL_DMA_IRQHandler+0xc78>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d045      	beq.n	800439a <HAL_DMA_IRQHandler+0xc62>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a28      	ldr	r2, [pc, #160]	; (80043b4 <HAL_DMA_IRQHandler+0xc7c>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d040      	beq.n	800439a <HAL_DMA_IRQHandler+0xc62>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a26      	ldr	r2, [pc, #152]	; (80043b8 <HAL_DMA_IRQHandler+0xc80>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d03b      	beq.n	800439a <HAL_DMA_IRQHandler+0xc62>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a25      	ldr	r2, [pc, #148]	; (80043bc <HAL_DMA_IRQHandler+0xc84>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d036      	beq.n	800439a <HAL_DMA_IRQHandler+0xc62>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a23      	ldr	r2, [pc, #140]	; (80043c0 <HAL_DMA_IRQHandler+0xc88>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d031      	beq.n	800439a <HAL_DMA_IRQHandler+0xc62>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a22      	ldr	r2, [pc, #136]	; (80043c4 <HAL_DMA_IRQHandler+0xc8c>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d02c      	beq.n	800439a <HAL_DMA_IRQHandler+0xc62>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a20      	ldr	r2, [pc, #128]	; (80043c8 <HAL_DMA_IRQHandler+0xc90>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d027      	beq.n	800439a <HAL_DMA_IRQHandler+0xc62>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a1f      	ldr	r2, [pc, #124]	; (80043cc <HAL_DMA_IRQHandler+0xc94>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d022      	beq.n	800439a <HAL_DMA_IRQHandler+0xc62>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a1d      	ldr	r2, [pc, #116]	; (80043d0 <HAL_DMA_IRQHandler+0xc98>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d01d      	beq.n	800439a <HAL_DMA_IRQHandler+0xc62>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a1c      	ldr	r2, [pc, #112]	; (80043d4 <HAL_DMA_IRQHandler+0xc9c>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d018      	beq.n	800439a <HAL_DMA_IRQHandler+0xc62>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a1a      	ldr	r2, [pc, #104]	; (80043d8 <HAL_DMA_IRQHandler+0xca0>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d013      	beq.n	800439a <HAL_DMA_IRQHandler+0xc62>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a19      	ldr	r2, [pc, #100]	; (80043dc <HAL_DMA_IRQHandler+0xca4>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d00e      	beq.n	800439a <HAL_DMA_IRQHandler+0xc62>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a17      	ldr	r2, [pc, #92]	; (80043e0 <HAL_DMA_IRQHandler+0xca8>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d009      	beq.n	800439a <HAL_DMA_IRQHandler+0xc62>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a16      	ldr	r2, [pc, #88]	; (80043e4 <HAL_DMA_IRQHandler+0xcac>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d004      	beq.n	800439a <HAL_DMA_IRQHandler+0xc62>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a14      	ldr	r2, [pc, #80]	; (80043e8 <HAL_DMA_IRQHandler+0xcb0>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d128      	bne.n	80043ec <HAL_DMA_IRQHandler+0xcb4>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f022 0214 	bic.w	r2, r2, #20
 80043a8:	601a      	str	r2, [r3, #0]
 80043aa:	e027      	b.n	80043fc <HAL_DMA_IRQHandler+0xcc4>
 80043ac:	40020010 	.word	0x40020010
 80043b0:	40020028 	.word	0x40020028
 80043b4:	40020040 	.word	0x40020040
 80043b8:	40020058 	.word	0x40020058
 80043bc:	40020070 	.word	0x40020070
 80043c0:	40020088 	.word	0x40020088
 80043c4:	400200a0 	.word	0x400200a0
 80043c8:	400200b8 	.word	0x400200b8
 80043cc:	40020410 	.word	0x40020410
 80043d0:	40020428 	.word	0x40020428
 80043d4:	40020440 	.word	0x40020440
 80043d8:	40020458 	.word	0x40020458
 80043dc:	40020470 	.word	0x40020470
 80043e0:	40020488 	.word	0x40020488
 80043e4:	400204a0 	.word	0x400204a0
 80043e8:	400204b8 	.word	0x400204b8
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	681a      	ldr	r2, [r3, #0]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f022 020a 	bic.w	r2, r2, #10
 80043fa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2201      	movs	r2, #1
 8004400:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2200      	movs	r2, #0
 8004408:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004410:	2b00      	cmp	r3, #0
 8004412:	f000 8097 	beq.w	8004544 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800441e:	e091      	b.n	8004544 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004424:	f003 031f 	and.w	r3, r3, #31
 8004428:	2208      	movs	r2, #8
 800442a:	409a      	lsls	r2, r3
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	4013      	ands	r3, r2
 8004430:	2b00      	cmp	r3, #0
 8004432:	f000 8088 	beq.w	8004546 <HAL_DMA_IRQHandler+0xe0e>
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	f003 0308 	and.w	r3, r3, #8
 800443c:	2b00      	cmp	r3, #0
 800443e:	f000 8082 	beq.w	8004546 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a41      	ldr	r2, [pc, #260]	; (800454c <HAL_DMA_IRQHandler+0xe14>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d04a      	beq.n	80044e2 <HAL_DMA_IRQHandler+0xdaa>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a3f      	ldr	r2, [pc, #252]	; (8004550 <HAL_DMA_IRQHandler+0xe18>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d045      	beq.n	80044e2 <HAL_DMA_IRQHandler+0xdaa>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a3e      	ldr	r2, [pc, #248]	; (8004554 <HAL_DMA_IRQHandler+0xe1c>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d040      	beq.n	80044e2 <HAL_DMA_IRQHandler+0xdaa>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a3c      	ldr	r2, [pc, #240]	; (8004558 <HAL_DMA_IRQHandler+0xe20>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d03b      	beq.n	80044e2 <HAL_DMA_IRQHandler+0xdaa>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a3b      	ldr	r2, [pc, #236]	; (800455c <HAL_DMA_IRQHandler+0xe24>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d036      	beq.n	80044e2 <HAL_DMA_IRQHandler+0xdaa>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a39      	ldr	r2, [pc, #228]	; (8004560 <HAL_DMA_IRQHandler+0xe28>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d031      	beq.n	80044e2 <HAL_DMA_IRQHandler+0xdaa>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a38      	ldr	r2, [pc, #224]	; (8004564 <HAL_DMA_IRQHandler+0xe2c>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d02c      	beq.n	80044e2 <HAL_DMA_IRQHandler+0xdaa>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a36      	ldr	r2, [pc, #216]	; (8004568 <HAL_DMA_IRQHandler+0xe30>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d027      	beq.n	80044e2 <HAL_DMA_IRQHandler+0xdaa>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a35      	ldr	r2, [pc, #212]	; (800456c <HAL_DMA_IRQHandler+0xe34>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d022      	beq.n	80044e2 <HAL_DMA_IRQHandler+0xdaa>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a33      	ldr	r2, [pc, #204]	; (8004570 <HAL_DMA_IRQHandler+0xe38>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d01d      	beq.n	80044e2 <HAL_DMA_IRQHandler+0xdaa>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a32      	ldr	r2, [pc, #200]	; (8004574 <HAL_DMA_IRQHandler+0xe3c>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d018      	beq.n	80044e2 <HAL_DMA_IRQHandler+0xdaa>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a30      	ldr	r2, [pc, #192]	; (8004578 <HAL_DMA_IRQHandler+0xe40>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d013      	beq.n	80044e2 <HAL_DMA_IRQHandler+0xdaa>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a2f      	ldr	r2, [pc, #188]	; (800457c <HAL_DMA_IRQHandler+0xe44>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d00e      	beq.n	80044e2 <HAL_DMA_IRQHandler+0xdaa>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a2d      	ldr	r2, [pc, #180]	; (8004580 <HAL_DMA_IRQHandler+0xe48>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d009      	beq.n	80044e2 <HAL_DMA_IRQHandler+0xdaa>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a2c      	ldr	r2, [pc, #176]	; (8004584 <HAL_DMA_IRQHandler+0xe4c>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d004      	beq.n	80044e2 <HAL_DMA_IRQHandler+0xdaa>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a2a      	ldr	r2, [pc, #168]	; (8004588 <HAL_DMA_IRQHandler+0xe50>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d108      	bne.n	80044f4 <HAL_DMA_IRQHandler+0xdbc>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f022 021c 	bic.w	r2, r2, #28
 80044f0:	601a      	str	r2, [r3, #0]
 80044f2:	e007      	b.n	8004504 <HAL_DMA_IRQHandler+0xdcc>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f022 020e 	bic.w	r2, r2, #14
 8004502:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004508:	f003 031f 	and.w	r3, r3, #31
 800450c:	2201      	movs	r2, #1
 800450e:	409a      	lsls	r2, r3
 8004510:	69fb      	ldr	r3, [r7, #28]
 8004512:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2201      	movs	r2, #1
 8004518:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2201      	movs	r2, #1
 800451e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2200      	movs	r2, #0
 8004526:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800452e:	2b00      	cmp	r3, #0
 8004530:	d009      	beq.n	8004546 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	4798      	blx	r3
 800453a:	e004      	b.n	8004546 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800453c:	bf00      	nop
 800453e:	e002      	b.n	8004546 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004540:	bf00      	nop
 8004542:	e000      	b.n	8004546 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004544:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004546:	3728      	adds	r7, #40	; 0x28
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}
 800454c:	40020010 	.word	0x40020010
 8004550:	40020028 	.word	0x40020028
 8004554:	40020040 	.word	0x40020040
 8004558:	40020058 	.word	0x40020058
 800455c:	40020070 	.word	0x40020070
 8004560:	40020088 	.word	0x40020088
 8004564:	400200a0 	.word	0x400200a0
 8004568:	400200b8 	.word	0x400200b8
 800456c:	40020410 	.word	0x40020410
 8004570:	40020428 	.word	0x40020428
 8004574:	40020440 	.word	0x40020440
 8004578:	40020458 	.word	0x40020458
 800457c:	40020470 	.word	0x40020470
 8004580:	40020488 	.word	0x40020488
 8004584:	400204a0 	.word	0x400204a0
 8004588:	400204b8 	.word	0x400204b8

0800458c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800458c:	b480      	push	{r7}
 800458e:	b087      	sub	sp, #28
 8004590:	af00      	add	r7, sp, #0
 8004592:	60f8      	str	r0, [r7, #12]
 8004594:	60b9      	str	r1, [r7, #8]
 8004596:	607a      	str	r2, [r7, #4]
 8004598:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800459e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045a4:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a7f      	ldr	r2, [pc, #508]	; (80047a8 <DMA_SetConfig+0x21c>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d072      	beq.n	8004696 <DMA_SetConfig+0x10a>
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a7d      	ldr	r2, [pc, #500]	; (80047ac <DMA_SetConfig+0x220>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d06d      	beq.n	8004696 <DMA_SetConfig+0x10a>
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a7c      	ldr	r2, [pc, #496]	; (80047b0 <DMA_SetConfig+0x224>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d068      	beq.n	8004696 <DMA_SetConfig+0x10a>
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a7a      	ldr	r2, [pc, #488]	; (80047b4 <DMA_SetConfig+0x228>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d063      	beq.n	8004696 <DMA_SetConfig+0x10a>
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a79      	ldr	r2, [pc, #484]	; (80047b8 <DMA_SetConfig+0x22c>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d05e      	beq.n	8004696 <DMA_SetConfig+0x10a>
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a77      	ldr	r2, [pc, #476]	; (80047bc <DMA_SetConfig+0x230>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d059      	beq.n	8004696 <DMA_SetConfig+0x10a>
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a76      	ldr	r2, [pc, #472]	; (80047c0 <DMA_SetConfig+0x234>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d054      	beq.n	8004696 <DMA_SetConfig+0x10a>
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a74      	ldr	r2, [pc, #464]	; (80047c4 <DMA_SetConfig+0x238>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d04f      	beq.n	8004696 <DMA_SetConfig+0x10a>
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a73      	ldr	r2, [pc, #460]	; (80047c8 <DMA_SetConfig+0x23c>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d04a      	beq.n	8004696 <DMA_SetConfig+0x10a>
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a71      	ldr	r2, [pc, #452]	; (80047cc <DMA_SetConfig+0x240>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d045      	beq.n	8004696 <DMA_SetConfig+0x10a>
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a70      	ldr	r2, [pc, #448]	; (80047d0 <DMA_SetConfig+0x244>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d040      	beq.n	8004696 <DMA_SetConfig+0x10a>
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a6e      	ldr	r2, [pc, #440]	; (80047d4 <DMA_SetConfig+0x248>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d03b      	beq.n	8004696 <DMA_SetConfig+0x10a>
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a6d      	ldr	r2, [pc, #436]	; (80047d8 <DMA_SetConfig+0x24c>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d036      	beq.n	8004696 <DMA_SetConfig+0x10a>
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a6b      	ldr	r2, [pc, #428]	; (80047dc <DMA_SetConfig+0x250>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d031      	beq.n	8004696 <DMA_SetConfig+0x10a>
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a6a      	ldr	r2, [pc, #424]	; (80047e0 <DMA_SetConfig+0x254>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d02c      	beq.n	8004696 <DMA_SetConfig+0x10a>
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a68      	ldr	r2, [pc, #416]	; (80047e4 <DMA_SetConfig+0x258>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d027      	beq.n	8004696 <DMA_SetConfig+0x10a>
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a67      	ldr	r2, [pc, #412]	; (80047e8 <DMA_SetConfig+0x25c>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d022      	beq.n	8004696 <DMA_SetConfig+0x10a>
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a65      	ldr	r2, [pc, #404]	; (80047ec <DMA_SetConfig+0x260>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d01d      	beq.n	8004696 <DMA_SetConfig+0x10a>
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a64      	ldr	r2, [pc, #400]	; (80047f0 <DMA_SetConfig+0x264>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d018      	beq.n	8004696 <DMA_SetConfig+0x10a>
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a62      	ldr	r2, [pc, #392]	; (80047f4 <DMA_SetConfig+0x268>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d013      	beq.n	8004696 <DMA_SetConfig+0x10a>
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a61      	ldr	r2, [pc, #388]	; (80047f8 <DMA_SetConfig+0x26c>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d00e      	beq.n	8004696 <DMA_SetConfig+0x10a>
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a5f      	ldr	r2, [pc, #380]	; (80047fc <DMA_SetConfig+0x270>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d009      	beq.n	8004696 <DMA_SetConfig+0x10a>
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a5e      	ldr	r2, [pc, #376]	; (8004800 <DMA_SetConfig+0x274>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d004      	beq.n	8004696 <DMA_SetConfig+0x10a>
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a5c      	ldr	r2, [pc, #368]	; (8004804 <DMA_SetConfig+0x278>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d101      	bne.n	800469a <DMA_SetConfig+0x10e>
 8004696:	2301      	movs	r3, #1
 8004698:	e000      	b.n	800469c <DMA_SetConfig+0x110>
 800469a:	2300      	movs	r3, #0
 800469c:	2b00      	cmp	r3, #0
 800469e:	d00d      	beq.n	80046bc <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80046a4:	68fa      	ldr	r2, [r7, #12]
 80046a6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80046a8:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d004      	beq.n	80046bc <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046b6:	68fa      	ldr	r2, [r7, #12]
 80046b8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80046ba:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a39      	ldr	r2, [pc, #228]	; (80047a8 <DMA_SetConfig+0x21c>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d04a      	beq.n	800475c <DMA_SetConfig+0x1d0>
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a38      	ldr	r2, [pc, #224]	; (80047ac <DMA_SetConfig+0x220>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d045      	beq.n	800475c <DMA_SetConfig+0x1d0>
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a36      	ldr	r2, [pc, #216]	; (80047b0 <DMA_SetConfig+0x224>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d040      	beq.n	800475c <DMA_SetConfig+0x1d0>
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a35      	ldr	r2, [pc, #212]	; (80047b4 <DMA_SetConfig+0x228>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d03b      	beq.n	800475c <DMA_SetConfig+0x1d0>
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a33      	ldr	r2, [pc, #204]	; (80047b8 <DMA_SetConfig+0x22c>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d036      	beq.n	800475c <DMA_SetConfig+0x1d0>
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a32      	ldr	r2, [pc, #200]	; (80047bc <DMA_SetConfig+0x230>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d031      	beq.n	800475c <DMA_SetConfig+0x1d0>
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a30      	ldr	r2, [pc, #192]	; (80047c0 <DMA_SetConfig+0x234>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d02c      	beq.n	800475c <DMA_SetConfig+0x1d0>
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a2f      	ldr	r2, [pc, #188]	; (80047c4 <DMA_SetConfig+0x238>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d027      	beq.n	800475c <DMA_SetConfig+0x1d0>
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a2d      	ldr	r2, [pc, #180]	; (80047c8 <DMA_SetConfig+0x23c>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d022      	beq.n	800475c <DMA_SetConfig+0x1d0>
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a2c      	ldr	r2, [pc, #176]	; (80047cc <DMA_SetConfig+0x240>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d01d      	beq.n	800475c <DMA_SetConfig+0x1d0>
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a2a      	ldr	r2, [pc, #168]	; (80047d0 <DMA_SetConfig+0x244>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d018      	beq.n	800475c <DMA_SetConfig+0x1d0>
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a29      	ldr	r2, [pc, #164]	; (80047d4 <DMA_SetConfig+0x248>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d013      	beq.n	800475c <DMA_SetConfig+0x1d0>
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a27      	ldr	r2, [pc, #156]	; (80047d8 <DMA_SetConfig+0x24c>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d00e      	beq.n	800475c <DMA_SetConfig+0x1d0>
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a26      	ldr	r2, [pc, #152]	; (80047dc <DMA_SetConfig+0x250>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d009      	beq.n	800475c <DMA_SetConfig+0x1d0>
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a24      	ldr	r2, [pc, #144]	; (80047e0 <DMA_SetConfig+0x254>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d004      	beq.n	800475c <DMA_SetConfig+0x1d0>
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a23      	ldr	r2, [pc, #140]	; (80047e4 <DMA_SetConfig+0x258>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d101      	bne.n	8004760 <DMA_SetConfig+0x1d4>
 800475c:	2301      	movs	r3, #1
 800475e:	e000      	b.n	8004762 <DMA_SetConfig+0x1d6>
 8004760:	2300      	movs	r3, #0
 8004762:	2b00      	cmp	r3, #0
 8004764:	d059      	beq.n	800481a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800476a:	f003 031f 	and.w	r3, r3, #31
 800476e:	223f      	movs	r2, #63	; 0x3f
 8004770:	409a      	lsls	r2, r3
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004784:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	683a      	ldr	r2, [r7, #0]
 800478c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	2b40      	cmp	r3, #64	; 0x40
 8004794:	d138      	bne.n	8004808 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	687a      	ldr	r2, [r7, #4]
 800479c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	68ba      	ldr	r2, [r7, #8]
 80047a4:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80047a6:	e086      	b.n	80048b6 <DMA_SetConfig+0x32a>
 80047a8:	40020010 	.word	0x40020010
 80047ac:	40020028 	.word	0x40020028
 80047b0:	40020040 	.word	0x40020040
 80047b4:	40020058 	.word	0x40020058
 80047b8:	40020070 	.word	0x40020070
 80047bc:	40020088 	.word	0x40020088
 80047c0:	400200a0 	.word	0x400200a0
 80047c4:	400200b8 	.word	0x400200b8
 80047c8:	40020410 	.word	0x40020410
 80047cc:	40020428 	.word	0x40020428
 80047d0:	40020440 	.word	0x40020440
 80047d4:	40020458 	.word	0x40020458
 80047d8:	40020470 	.word	0x40020470
 80047dc:	40020488 	.word	0x40020488
 80047e0:	400204a0 	.word	0x400204a0
 80047e4:	400204b8 	.word	0x400204b8
 80047e8:	58025408 	.word	0x58025408
 80047ec:	5802541c 	.word	0x5802541c
 80047f0:	58025430 	.word	0x58025430
 80047f4:	58025444 	.word	0x58025444
 80047f8:	58025458 	.word	0x58025458
 80047fc:	5802546c 	.word	0x5802546c
 8004800:	58025480 	.word	0x58025480
 8004804:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	68ba      	ldr	r2, [r7, #8]
 800480e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	687a      	ldr	r2, [r7, #4]
 8004816:	60da      	str	r2, [r3, #12]
}
 8004818:	e04d      	b.n	80048b6 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a29      	ldr	r2, [pc, #164]	; (80048c4 <DMA_SetConfig+0x338>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d022      	beq.n	800486a <DMA_SetConfig+0x2de>
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a27      	ldr	r2, [pc, #156]	; (80048c8 <DMA_SetConfig+0x33c>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d01d      	beq.n	800486a <DMA_SetConfig+0x2de>
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a26      	ldr	r2, [pc, #152]	; (80048cc <DMA_SetConfig+0x340>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d018      	beq.n	800486a <DMA_SetConfig+0x2de>
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a24      	ldr	r2, [pc, #144]	; (80048d0 <DMA_SetConfig+0x344>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d013      	beq.n	800486a <DMA_SetConfig+0x2de>
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a23      	ldr	r2, [pc, #140]	; (80048d4 <DMA_SetConfig+0x348>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d00e      	beq.n	800486a <DMA_SetConfig+0x2de>
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a21      	ldr	r2, [pc, #132]	; (80048d8 <DMA_SetConfig+0x34c>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d009      	beq.n	800486a <DMA_SetConfig+0x2de>
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a20      	ldr	r2, [pc, #128]	; (80048dc <DMA_SetConfig+0x350>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d004      	beq.n	800486a <DMA_SetConfig+0x2de>
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a1e      	ldr	r2, [pc, #120]	; (80048e0 <DMA_SetConfig+0x354>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d101      	bne.n	800486e <DMA_SetConfig+0x2e2>
 800486a:	2301      	movs	r3, #1
 800486c:	e000      	b.n	8004870 <DMA_SetConfig+0x2e4>
 800486e:	2300      	movs	r3, #0
 8004870:	2b00      	cmp	r3, #0
 8004872:	d020      	beq.n	80048b6 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004878:	f003 031f 	and.w	r3, r3, #31
 800487c:	2201      	movs	r2, #1
 800487e:	409a      	lsls	r2, r3
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	683a      	ldr	r2, [r7, #0]
 800488a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	2b40      	cmp	r3, #64	; 0x40
 8004892:	d108      	bne.n	80048a6 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	687a      	ldr	r2, [r7, #4]
 800489a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	68ba      	ldr	r2, [r7, #8]
 80048a2:	60da      	str	r2, [r3, #12]
}
 80048a4:	e007      	b.n	80048b6 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	68ba      	ldr	r2, [r7, #8]
 80048ac:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	687a      	ldr	r2, [r7, #4]
 80048b4:	60da      	str	r2, [r3, #12]
}
 80048b6:	bf00      	nop
 80048b8:	371c      	adds	r7, #28
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr
 80048c2:	bf00      	nop
 80048c4:	58025408 	.word	0x58025408
 80048c8:	5802541c 	.word	0x5802541c
 80048cc:	58025430 	.word	0x58025430
 80048d0:	58025444 	.word	0x58025444
 80048d4:	58025458 	.word	0x58025458
 80048d8:	5802546c 	.word	0x5802546c
 80048dc:	58025480 	.word	0x58025480
 80048e0:	58025494 	.word	0x58025494

080048e4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b085      	sub	sp, #20
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a42      	ldr	r2, [pc, #264]	; (80049fc <DMA_CalcBaseAndBitshift+0x118>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d04a      	beq.n	800498c <DMA_CalcBaseAndBitshift+0xa8>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a41      	ldr	r2, [pc, #260]	; (8004a00 <DMA_CalcBaseAndBitshift+0x11c>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d045      	beq.n	800498c <DMA_CalcBaseAndBitshift+0xa8>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a3f      	ldr	r2, [pc, #252]	; (8004a04 <DMA_CalcBaseAndBitshift+0x120>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d040      	beq.n	800498c <DMA_CalcBaseAndBitshift+0xa8>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a3e      	ldr	r2, [pc, #248]	; (8004a08 <DMA_CalcBaseAndBitshift+0x124>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d03b      	beq.n	800498c <DMA_CalcBaseAndBitshift+0xa8>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a3c      	ldr	r2, [pc, #240]	; (8004a0c <DMA_CalcBaseAndBitshift+0x128>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d036      	beq.n	800498c <DMA_CalcBaseAndBitshift+0xa8>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a3b      	ldr	r2, [pc, #236]	; (8004a10 <DMA_CalcBaseAndBitshift+0x12c>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d031      	beq.n	800498c <DMA_CalcBaseAndBitshift+0xa8>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a39      	ldr	r2, [pc, #228]	; (8004a14 <DMA_CalcBaseAndBitshift+0x130>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d02c      	beq.n	800498c <DMA_CalcBaseAndBitshift+0xa8>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a38      	ldr	r2, [pc, #224]	; (8004a18 <DMA_CalcBaseAndBitshift+0x134>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d027      	beq.n	800498c <DMA_CalcBaseAndBitshift+0xa8>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a36      	ldr	r2, [pc, #216]	; (8004a1c <DMA_CalcBaseAndBitshift+0x138>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d022      	beq.n	800498c <DMA_CalcBaseAndBitshift+0xa8>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a35      	ldr	r2, [pc, #212]	; (8004a20 <DMA_CalcBaseAndBitshift+0x13c>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d01d      	beq.n	800498c <DMA_CalcBaseAndBitshift+0xa8>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a33      	ldr	r2, [pc, #204]	; (8004a24 <DMA_CalcBaseAndBitshift+0x140>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d018      	beq.n	800498c <DMA_CalcBaseAndBitshift+0xa8>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a32      	ldr	r2, [pc, #200]	; (8004a28 <DMA_CalcBaseAndBitshift+0x144>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d013      	beq.n	800498c <DMA_CalcBaseAndBitshift+0xa8>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a30      	ldr	r2, [pc, #192]	; (8004a2c <DMA_CalcBaseAndBitshift+0x148>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d00e      	beq.n	800498c <DMA_CalcBaseAndBitshift+0xa8>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a2f      	ldr	r2, [pc, #188]	; (8004a30 <DMA_CalcBaseAndBitshift+0x14c>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d009      	beq.n	800498c <DMA_CalcBaseAndBitshift+0xa8>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a2d      	ldr	r2, [pc, #180]	; (8004a34 <DMA_CalcBaseAndBitshift+0x150>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d004      	beq.n	800498c <DMA_CalcBaseAndBitshift+0xa8>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a2c      	ldr	r2, [pc, #176]	; (8004a38 <DMA_CalcBaseAndBitshift+0x154>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d101      	bne.n	8004990 <DMA_CalcBaseAndBitshift+0xac>
 800498c:	2301      	movs	r3, #1
 800498e:	e000      	b.n	8004992 <DMA_CalcBaseAndBitshift+0xae>
 8004990:	2300      	movs	r3, #0
 8004992:	2b00      	cmp	r3, #0
 8004994:	d024      	beq.n	80049e0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	b2db      	uxtb	r3, r3
 800499c:	3b10      	subs	r3, #16
 800499e:	4a27      	ldr	r2, [pc, #156]	; (8004a3c <DMA_CalcBaseAndBitshift+0x158>)
 80049a0:	fba2 2303 	umull	r2, r3, r2, r3
 80049a4:	091b      	lsrs	r3, r3, #4
 80049a6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	f003 0307 	and.w	r3, r3, #7
 80049ae:	4a24      	ldr	r2, [pc, #144]	; (8004a40 <DMA_CalcBaseAndBitshift+0x15c>)
 80049b0:	5cd3      	ldrb	r3, [r2, r3]
 80049b2:	461a      	mov	r2, r3
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	2b03      	cmp	r3, #3
 80049bc:	d908      	bls.n	80049d0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	461a      	mov	r2, r3
 80049c4:	4b1f      	ldr	r3, [pc, #124]	; (8004a44 <DMA_CalcBaseAndBitshift+0x160>)
 80049c6:	4013      	ands	r3, r2
 80049c8:	1d1a      	adds	r2, r3, #4
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	659a      	str	r2, [r3, #88]	; 0x58
 80049ce:	e00d      	b.n	80049ec <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	461a      	mov	r2, r3
 80049d6:	4b1b      	ldr	r3, [pc, #108]	; (8004a44 <DMA_CalcBaseAndBitshift+0x160>)
 80049d8:	4013      	ands	r3, r2
 80049da:	687a      	ldr	r2, [r7, #4]
 80049dc:	6593      	str	r3, [r2, #88]	; 0x58
 80049de:	e005      	b.n	80049ec <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	3714      	adds	r7, #20
 80049f4:	46bd      	mov	sp, r7
 80049f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fa:	4770      	bx	lr
 80049fc:	40020010 	.word	0x40020010
 8004a00:	40020028 	.word	0x40020028
 8004a04:	40020040 	.word	0x40020040
 8004a08:	40020058 	.word	0x40020058
 8004a0c:	40020070 	.word	0x40020070
 8004a10:	40020088 	.word	0x40020088
 8004a14:	400200a0 	.word	0x400200a0
 8004a18:	400200b8 	.word	0x400200b8
 8004a1c:	40020410 	.word	0x40020410
 8004a20:	40020428 	.word	0x40020428
 8004a24:	40020440 	.word	0x40020440
 8004a28:	40020458 	.word	0x40020458
 8004a2c:	40020470 	.word	0x40020470
 8004a30:	40020488 	.word	0x40020488
 8004a34:	400204a0 	.word	0x400204a0
 8004a38:	400204b8 	.word	0x400204b8
 8004a3c:	aaaaaaab 	.word	0xaaaaaaab
 8004a40:	0800b3e8 	.word	0x0800b3e8
 8004a44:	fffffc00 	.word	0xfffffc00

08004a48 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b085      	sub	sp, #20
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a50:	2300      	movs	r3, #0
 8004a52:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	699b      	ldr	r3, [r3, #24]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d120      	bne.n	8004a9e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a60:	2b03      	cmp	r3, #3
 8004a62:	d858      	bhi.n	8004b16 <DMA_CheckFifoParam+0xce>
 8004a64:	a201      	add	r2, pc, #4	; (adr r2, 8004a6c <DMA_CheckFifoParam+0x24>)
 8004a66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a6a:	bf00      	nop
 8004a6c:	08004a7d 	.word	0x08004a7d
 8004a70:	08004a8f 	.word	0x08004a8f
 8004a74:	08004a7d 	.word	0x08004a7d
 8004a78:	08004b17 	.word	0x08004b17
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a80:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d048      	beq.n	8004b1a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004a8c:	e045      	b.n	8004b1a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a92:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004a96:	d142      	bne.n	8004b1e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004a9c:	e03f      	b.n	8004b1e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	699b      	ldr	r3, [r3, #24]
 8004aa2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004aa6:	d123      	bne.n	8004af0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aac:	2b03      	cmp	r3, #3
 8004aae:	d838      	bhi.n	8004b22 <DMA_CheckFifoParam+0xda>
 8004ab0:	a201      	add	r2, pc, #4	; (adr r2, 8004ab8 <DMA_CheckFifoParam+0x70>)
 8004ab2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ab6:	bf00      	nop
 8004ab8:	08004ac9 	.word	0x08004ac9
 8004abc:	08004acf 	.word	0x08004acf
 8004ac0:	08004ac9 	.word	0x08004ac9
 8004ac4:	08004ae1 	.word	0x08004ae1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	73fb      	strb	r3, [r7, #15]
        break;
 8004acc:	e030      	b.n	8004b30 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ad2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d025      	beq.n	8004b26 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004ada:	2301      	movs	r3, #1
 8004adc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004ade:	e022      	b.n	8004b26 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ae4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004ae8:	d11f      	bne.n	8004b2a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004aea:	2301      	movs	r3, #1
 8004aec:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004aee:	e01c      	b.n	8004b2a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004af4:	2b02      	cmp	r3, #2
 8004af6:	d902      	bls.n	8004afe <DMA_CheckFifoParam+0xb6>
 8004af8:	2b03      	cmp	r3, #3
 8004afa:	d003      	beq.n	8004b04 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004afc:	e018      	b.n	8004b30 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	73fb      	strb	r3, [r7, #15]
        break;
 8004b02:	e015      	b.n	8004b30 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b08:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d00e      	beq.n	8004b2e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004b10:	2301      	movs	r3, #1
 8004b12:	73fb      	strb	r3, [r7, #15]
    break;
 8004b14:	e00b      	b.n	8004b2e <DMA_CheckFifoParam+0xe6>
        break;
 8004b16:	bf00      	nop
 8004b18:	e00a      	b.n	8004b30 <DMA_CheckFifoParam+0xe8>
        break;
 8004b1a:	bf00      	nop
 8004b1c:	e008      	b.n	8004b30 <DMA_CheckFifoParam+0xe8>
        break;
 8004b1e:	bf00      	nop
 8004b20:	e006      	b.n	8004b30 <DMA_CheckFifoParam+0xe8>
        break;
 8004b22:	bf00      	nop
 8004b24:	e004      	b.n	8004b30 <DMA_CheckFifoParam+0xe8>
        break;
 8004b26:	bf00      	nop
 8004b28:	e002      	b.n	8004b30 <DMA_CheckFifoParam+0xe8>
        break;
 8004b2a:	bf00      	nop
 8004b2c:	e000      	b.n	8004b30 <DMA_CheckFifoParam+0xe8>
    break;
 8004b2e:	bf00      	nop
    }
  }

  return status;
 8004b30:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3714      	adds	r7, #20
 8004b36:	46bd      	mov	sp, r7
 8004b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3c:	4770      	bx	lr
 8004b3e:	bf00      	nop

08004b40 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b085      	sub	sp, #20
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a38      	ldr	r2, [pc, #224]	; (8004c34 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d022      	beq.n	8004b9e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a36      	ldr	r2, [pc, #216]	; (8004c38 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d01d      	beq.n	8004b9e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a35      	ldr	r2, [pc, #212]	; (8004c3c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d018      	beq.n	8004b9e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a33      	ldr	r2, [pc, #204]	; (8004c40 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d013      	beq.n	8004b9e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a32      	ldr	r2, [pc, #200]	; (8004c44 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d00e      	beq.n	8004b9e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a30      	ldr	r2, [pc, #192]	; (8004c48 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d009      	beq.n	8004b9e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a2f      	ldr	r2, [pc, #188]	; (8004c4c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d004      	beq.n	8004b9e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a2d      	ldr	r2, [pc, #180]	; (8004c50 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d101      	bne.n	8004ba2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e000      	b.n	8004ba4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d01a      	beq.n	8004bde <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	b2db      	uxtb	r3, r3
 8004bae:	3b08      	subs	r3, #8
 8004bb0:	4a28      	ldr	r2, [pc, #160]	; (8004c54 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8004bb6:	091b      	lsrs	r3, r3, #4
 8004bb8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004bba:	68fa      	ldr	r2, [r7, #12]
 8004bbc:	4b26      	ldr	r3, [pc, #152]	; (8004c58 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004bbe:	4413      	add	r3, r2
 8004bc0:	009b      	lsls	r3, r3, #2
 8004bc2:	461a      	mov	r2, r3
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	4a24      	ldr	r2, [pc, #144]	; (8004c5c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004bcc:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	f003 031f 	and.w	r3, r3, #31
 8004bd4:	2201      	movs	r2, #1
 8004bd6:	409a      	lsls	r2, r3
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004bdc:	e024      	b.n	8004c28 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	b2db      	uxtb	r3, r3
 8004be4:	3b10      	subs	r3, #16
 8004be6:	4a1e      	ldr	r2, [pc, #120]	; (8004c60 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004be8:	fba2 2303 	umull	r2, r3, r2, r3
 8004bec:	091b      	lsrs	r3, r3, #4
 8004bee:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	4a1c      	ldr	r2, [pc, #112]	; (8004c64 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d806      	bhi.n	8004c06 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	4a1b      	ldr	r2, [pc, #108]	; (8004c68 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d902      	bls.n	8004c06 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	3308      	adds	r3, #8
 8004c04:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004c06:	68fa      	ldr	r2, [r7, #12]
 8004c08:	4b18      	ldr	r3, [pc, #96]	; (8004c6c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004c0a:	4413      	add	r3, r2
 8004c0c:	009b      	lsls	r3, r3, #2
 8004c0e:	461a      	mov	r2, r3
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	4a16      	ldr	r2, [pc, #88]	; (8004c70 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004c18:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	f003 031f 	and.w	r3, r3, #31
 8004c20:	2201      	movs	r2, #1
 8004c22:	409a      	lsls	r2, r3
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004c28:	bf00      	nop
 8004c2a:	3714      	adds	r7, #20
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c32:	4770      	bx	lr
 8004c34:	58025408 	.word	0x58025408
 8004c38:	5802541c 	.word	0x5802541c
 8004c3c:	58025430 	.word	0x58025430
 8004c40:	58025444 	.word	0x58025444
 8004c44:	58025458 	.word	0x58025458
 8004c48:	5802546c 	.word	0x5802546c
 8004c4c:	58025480 	.word	0x58025480
 8004c50:	58025494 	.word	0x58025494
 8004c54:	cccccccd 	.word	0xcccccccd
 8004c58:	16009600 	.word	0x16009600
 8004c5c:	58025880 	.word	0x58025880
 8004c60:	aaaaaaab 	.word	0xaaaaaaab
 8004c64:	400204b8 	.word	0x400204b8
 8004c68:	4002040f 	.word	0x4002040f
 8004c6c:	10008200 	.word	0x10008200
 8004c70:	40020880 	.word	0x40020880

08004c74 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b085      	sub	sp, #20
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	b2db      	uxtb	r3, r3
 8004c82:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d04a      	beq.n	8004d20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2b08      	cmp	r3, #8
 8004c8e:	d847      	bhi.n	8004d20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a25      	ldr	r2, [pc, #148]	; (8004d2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d022      	beq.n	8004ce0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a24      	ldr	r2, [pc, #144]	; (8004d30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d01d      	beq.n	8004ce0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a22      	ldr	r2, [pc, #136]	; (8004d34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d018      	beq.n	8004ce0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a21      	ldr	r2, [pc, #132]	; (8004d38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d013      	beq.n	8004ce0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a1f      	ldr	r2, [pc, #124]	; (8004d3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d00e      	beq.n	8004ce0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a1e      	ldr	r2, [pc, #120]	; (8004d40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d009      	beq.n	8004ce0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a1c      	ldr	r2, [pc, #112]	; (8004d44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d004      	beq.n	8004ce0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a1b      	ldr	r2, [pc, #108]	; (8004d48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d101      	bne.n	8004ce4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	e000      	b.n	8004ce6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d00a      	beq.n	8004d00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004cea:	68fa      	ldr	r2, [r7, #12]
 8004cec:	4b17      	ldr	r3, [pc, #92]	; (8004d4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004cee:	4413      	add	r3, r2
 8004cf0:	009b      	lsls	r3, r3, #2
 8004cf2:	461a      	mov	r2, r3
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	4a15      	ldr	r2, [pc, #84]	; (8004d50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004cfc:	671a      	str	r2, [r3, #112]	; 0x70
 8004cfe:	e009      	b.n	8004d14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004d00:	68fa      	ldr	r2, [r7, #12]
 8004d02:	4b14      	ldr	r3, [pc, #80]	; (8004d54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004d04:	4413      	add	r3, r2
 8004d06:	009b      	lsls	r3, r3, #2
 8004d08:	461a      	mov	r2, r3
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	4a11      	ldr	r2, [pc, #68]	; (8004d58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004d12:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	3b01      	subs	r3, #1
 8004d18:	2201      	movs	r2, #1
 8004d1a:	409a      	lsls	r2, r3
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004d20:	bf00      	nop
 8004d22:	3714      	adds	r7, #20
 8004d24:	46bd      	mov	sp, r7
 8004d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2a:	4770      	bx	lr
 8004d2c:	58025408 	.word	0x58025408
 8004d30:	5802541c 	.word	0x5802541c
 8004d34:	58025430 	.word	0x58025430
 8004d38:	58025444 	.word	0x58025444
 8004d3c:	58025458 	.word	0x58025458
 8004d40:	5802546c 	.word	0x5802546c
 8004d44:	58025480 	.word	0x58025480
 8004d48:	58025494 	.word	0x58025494
 8004d4c:	1600963f 	.word	0x1600963f
 8004d50:	58025940 	.word	0x58025940
 8004d54:	1000823f 	.word	0x1000823f
 8004d58:	40020940 	.word	0x40020940

08004d5c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b084      	sub	sp, #16
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d101      	bne.n	8004d6e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e0cf      	b.n	8004f0e <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d106      	bne.n	8004d86 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2223      	movs	r2, #35	; 0x23
 8004d7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8004d80:	6878      	ldr	r0, [r7, #4]
 8004d82:	f7fb fcd5 	bl	8000730 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d86:	4b64      	ldr	r3, [pc, #400]	; (8004f18 <HAL_ETH_Init+0x1bc>)
 8004d88:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004d8c:	4a62      	ldr	r2, [pc, #392]	; (8004f18 <HAL_ETH_Init+0x1bc>)
 8004d8e:	f043 0302 	orr.w	r3, r3, #2
 8004d92:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004d96:	4b60      	ldr	r3, [pc, #384]	; (8004f18 <HAL_ETH_Init+0x1bc>)
 8004d98:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004d9c:	f003 0302 	and.w	r3, r3, #2
 8004da0:	60bb      	str	r3, [r7, #8]
 8004da2:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	7a1b      	ldrb	r3, [r3, #8]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d103      	bne.n	8004db4 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8004dac:	2000      	movs	r0, #0
 8004dae:	f7fd fb97 	bl	80024e0 <HAL_SYSCFG_ETHInterfaceSelect>
 8004db2:	e003      	b.n	8004dbc <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8004db4:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8004db8:	f7fd fb92 	bl	80024e0 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8004dbc:	4b57      	ldr	r3, [pc, #348]	; (8004f1c <HAL_ETH_Init+0x1c0>)
 8004dbe:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	687a      	ldr	r2, [r7, #4]
 8004dcc:	6812      	ldr	r2, [r2, #0]
 8004dce:	f043 0301 	orr.w	r3, r3, #1
 8004dd2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004dd6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004dd8:	f7fd fb52 	bl	8002480 <HAL_GetTick>
 8004ddc:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8004dde:	e011      	b.n	8004e04 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8004de0:	f7fd fb4e 	bl	8002480 <HAL_GetTick>
 8004de4:	4602      	mov	r2, r0
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	1ad3      	subs	r3, r2, r3
 8004dea:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004dee:	d909      	bls.n	8004e04 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2204      	movs	r2, #4
 8004df4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	22e0      	movs	r2, #224	; 0xe0
 8004dfc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8004e00:	2301      	movs	r3, #1
 8004e02:	e084      	b.n	8004f0e <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f003 0301 	and.w	r3, r3, #1
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d1e4      	bne.n	8004de0 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f000 f886 	bl	8004f28 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8004e1c:	f001 fd06 	bl	800682c <HAL_RCC_GetHCLKFreq>
 8004e20:	4603      	mov	r3, r0
 8004e22:	4a3f      	ldr	r2, [pc, #252]	; (8004f20 <HAL_ETH_Init+0x1c4>)
 8004e24:	fba2 2303 	umull	r2, r3, r2, r3
 8004e28:	0c9a      	lsrs	r2, r3, #18
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	3a01      	subs	r2, #1
 8004e30:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	f000 fa71 	bl	800531c <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e42:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004e46:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8004e4a:	687a      	ldr	r2, [r7, #4]
 8004e4c:	6812      	ldr	r2, [r2, #0]
 8004e4e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004e52:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004e56:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	695b      	ldr	r3, [r3, #20]
 8004e5e:	f003 0303 	and.w	r3, r3, #3
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d009      	beq.n	8004e7a <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2201      	movs	r2, #1
 8004e6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	22e0      	movs	r2, #224	; 0xe0
 8004e72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8004e76:	2301      	movs	r3, #1
 8004e78:	e049      	b.n	8004f0e <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e82:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8004e86:	4b27      	ldr	r3, [pc, #156]	; (8004f24 <HAL_ETH_Init+0x1c8>)
 8004e88:	4013      	ands	r3, r2
 8004e8a:	687a      	ldr	r2, [r7, #4]
 8004e8c:	6952      	ldr	r2, [r2, #20]
 8004e8e:	0051      	lsls	r1, r2, #1
 8004e90:	687a      	ldr	r2, [r7, #4]
 8004e92:	6812      	ldr	r2, [r2, #0]
 8004e94:	430b      	orrs	r3, r1
 8004e96:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004e9a:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f000 fad9 	bl	8005456 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8004ea4:	6878      	ldr	r0, [r7, #4]
 8004ea6:	f000 fb1f 	bl	80054e8 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	3305      	adds	r3, #5
 8004eb0:	781b      	ldrb	r3, [r3, #0]
 8004eb2:	021a      	lsls	r2, r3, #8
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	3304      	adds	r3, #4
 8004eba:	781b      	ldrb	r3, [r3, #0]
 8004ebc:	4619      	mov	r1, r3
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	430a      	orrs	r2, r1
 8004ec4:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	3303      	adds	r3, #3
 8004ece:	781b      	ldrb	r3, [r3, #0]
 8004ed0:	061a      	lsls	r2, r3, #24
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	3302      	adds	r3, #2
 8004ed8:	781b      	ldrb	r3, [r3, #0]
 8004eda:	041b      	lsls	r3, r3, #16
 8004edc:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	3301      	adds	r3, #1
 8004ee4:	781b      	ldrb	r3, [r3, #0]
 8004ee6:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004ee8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	781b      	ldrb	r3, [r3, #0]
 8004ef0:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004ef6:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004ef8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2200      	movs	r2, #0
 8004f00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2210      	movs	r2, #16
 8004f08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004f0c:	2300      	movs	r3, #0
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	3710      	adds	r7, #16
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}
 8004f16:	bf00      	nop
 8004f18:	58024400 	.word	0x58024400
 8004f1c:	58000400 	.word	0x58000400
 8004f20:	431bde83 	.word	0x431bde83
 8004f24:	ffff8001 	.word	0xffff8001

08004f28 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b084      	sub	sp, #16
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004f38:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004f40:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8004f42:	f001 fc73 	bl	800682c <HAL_RCC_GetHCLKFreq>
 8004f46:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	4a1e      	ldr	r2, [pc, #120]	; (8004fc4 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d908      	bls.n	8004f62 <HAL_ETH_SetMDIOClockRange+0x3a>
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	4a1d      	ldr	r2, [pc, #116]	; (8004fc8 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d804      	bhi.n	8004f62 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004f5e:	60fb      	str	r3, [r7, #12]
 8004f60:	e027      	b.n	8004fb2 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	4a18      	ldr	r2, [pc, #96]	; (8004fc8 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d908      	bls.n	8004f7c <HAL_ETH_SetMDIOClockRange+0x54>
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	4a17      	ldr	r2, [pc, #92]	; (8004fcc <HAL_ETH_SetMDIOClockRange+0xa4>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d204      	bcs.n	8004f7c <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8004f78:	60fb      	str	r3, [r7, #12]
 8004f7a:	e01a      	b.n	8004fb2 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	4a13      	ldr	r2, [pc, #76]	; (8004fcc <HAL_ETH_SetMDIOClockRange+0xa4>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d303      	bcc.n	8004f8c <HAL_ETH_SetMDIOClockRange+0x64>
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	4a12      	ldr	r2, [pc, #72]	; (8004fd0 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d911      	bls.n	8004fb0 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	4a10      	ldr	r2, [pc, #64]	; (8004fd0 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d908      	bls.n	8004fa6 <HAL_ETH_SetMDIOClockRange+0x7e>
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	4a0f      	ldr	r2, [pc, #60]	; (8004fd4 <HAL_ETH_SetMDIOClockRange+0xac>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d804      	bhi.n	8004fa6 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fa2:	60fb      	str	r3, [r7, #12]
 8004fa4:	e005      	b.n	8004fb2 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004fac:	60fb      	str	r3, [r7, #12]
 8004fae:	e000      	b.n	8004fb2 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8004fb0:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	68fa      	ldr	r2, [r7, #12]
 8004fb8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8004fbc:	bf00      	nop
 8004fbe:	3710      	adds	r7, #16
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bd80      	pop	{r7, pc}
 8004fc4:	01312cff 	.word	0x01312cff
 8004fc8:	02160ebf 	.word	0x02160ebf
 8004fcc:	03938700 	.word	0x03938700
 8004fd0:	05f5e0ff 	.word	0x05f5e0ff
 8004fd4:	08f0d17f 	.word	0x08f0d17f

08004fd8 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b085      	sub	sp, #20
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
 8004fe0:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8004fea:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	791b      	ldrb	r3, [r3, #4]
 8004ff0:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8004ff2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	7b1b      	ldrb	r3, [r3, #12]
 8004ff8:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8004ffa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	7b5b      	ldrb	r3, [r3, #13]
 8005000:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8005002:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	7b9b      	ldrb	r3, [r3, #14]
 8005008:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800500a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	7bdb      	ldrb	r3, [r3, #15]
 8005010:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8005012:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8005014:	683a      	ldr	r2, [r7, #0]
 8005016:	7c12      	ldrb	r2, [r2, #16]
 8005018:	2a00      	cmp	r2, #0
 800501a:	d102      	bne.n	8005022 <ETH_SetMACConfig+0x4a>
 800501c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8005020:	e000      	b.n	8005024 <ETH_SetMACConfig+0x4c>
 8005022:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8005024:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8005026:	683a      	ldr	r2, [r7, #0]
 8005028:	7c52      	ldrb	r2, [r2, #17]
 800502a:	2a00      	cmp	r2, #0
 800502c:	d102      	bne.n	8005034 <ETH_SetMACConfig+0x5c>
 800502e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005032:	e000      	b.n	8005036 <ETH_SetMACConfig+0x5e>
 8005034:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8005036:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	7c9b      	ldrb	r3, [r3, #18]
 800503c:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800503e:	431a      	orrs	r2, r3
               macconf->Speed |
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8005044:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 800504a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	7f1b      	ldrb	r3, [r3, #28]
 8005050:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8005052:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	7f5b      	ldrb	r3, [r3, #29]
 8005058:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 800505a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800505c:	683a      	ldr	r2, [r7, #0]
 800505e:	7f92      	ldrb	r2, [r2, #30]
 8005060:	2a00      	cmp	r2, #0
 8005062:	d102      	bne.n	800506a <ETH_SetMACConfig+0x92>
 8005064:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005068:	e000      	b.n	800506c <ETH_SetMACConfig+0x94>
 800506a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800506c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	7fdb      	ldrb	r3, [r3, #31]
 8005072:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8005074:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8005076:	683a      	ldr	r2, [r7, #0]
 8005078:	f892 2020 	ldrb.w	r2, [r2, #32]
 800507c:	2a00      	cmp	r2, #0
 800507e:	d102      	bne.n	8005086 <ETH_SetMACConfig+0xae>
 8005080:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005084:	e000      	b.n	8005088 <ETH_SetMACConfig+0xb0>
 8005086:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8005088:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800508e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005096:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8005098:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 800509e:	4313      	orrs	r3, r2
 80050a0:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	681a      	ldr	r2, [r3, #0]
 80050a8:	4b56      	ldr	r3, [pc, #344]	; (8005204 <ETH_SetMACConfig+0x22c>)
 80050aa:	4013      	ands	r3, r2
 80050ac:	687a      	ldr	r2, [r7, #4]
 80050ae:	6812      	ldr	r2, [r2, #0]
 80050b0:	68f9      	ldr	r1, [r7, #12]
 80050b2:	430b      	orrs	r3, r1
 80050b4:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050ba:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80050c2:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80050c4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80050cc:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80050ce:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80050d6:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80050d8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80050da:	683a      	ldr	r2, [r7, #0]
 80050dc:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80050e0:	2a00      	cmp	r2, #0
 80050e2:	d102      	bne.n	80050ea <ETH_SetMACConfig+0x112>
 80050e4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80050e8:	e000      	b.n	80050ec <ETH_SetMACConfig+0x114>
 80050ea:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80050ec:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80050f2:	4313      	orrs	r3, r2
 80050f4:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	685a      	ldr	r2, [r3, #4]
 80050fc:	4b42      	ldr	r3, [pc, #264]	; (8005208 <ETH_SetMACConfig+0x230>)
 80050fe:	4013      	ands	r3, r2
 8005100:	687a      	ldr	r2, [r7, #4]
 8005102:	6812      	ldr	r2, [r2, #0]
 8005104:	68f9      	ldr	r1, [r7, #12]
 8005106:	430b      	orrs	r3, r1
 8005108:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005110:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8005116:	4313      	orrs	r3, r2
 8005118:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	68da      	ldr	r2, [r3, #12]
 8005120:	4b3a      	ldr	r3, [pc, #232]	; (800520c <ETH_SetMACConfig+0x234>)
 8005122:	4013      	ands	r3, r2
 8005124:	687a      	ldr	r2, [r7, #4]
 8005126:	6812      	ldr	r2, [r2, #0]
 8005128:	68f9      	ldr	r1, [r7, #12]
 800512a:	430b      	orrs	r3, r1
 800512c:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8005134:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800513a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 800513c:	683a      	ldr	r2, [r7, #0]
 800513e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8005142:	2a00      	cmp	r2, #0
 8005144:	d101      	bne.n	800514a <ETH_SetMACConfig+0x172>
 8005146:	2280      	movs	r2, #128	; 0x80
 8005148:	e000      	b.n	800514c <ETH_SetMACConfig+0x174>
 800514a:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 800514c:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005152:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8005154:	4313      	orrs	r3, r2
 8005156:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800515e:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8005162:	4013      	ands	r3, r2
 8005164:	687a      	ldr	r2, [r7, #4]
 8005166:	6812      	ldr	r2, [r2, #0]
 8005168:	68f9      	ldr	r1, [r7, #12]
 800516a:	430b      	orrs	r3, r1
 800516c:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8005174:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800517c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800517e:	4313      	orrs	r3, r2
 8005180:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800518a:	f023 0103 	bic.w	r1, r3, #3
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	68fa      	ldr	r2, [r7, #12]
 8005194:	430a      	orrs	r2, r1
 8005196:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80051a2:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	430a      	orrs	r2, r1
 80051b0:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80051b8:	683a      	ldr	r2, [r7, #0]
 80051ba:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 80051be:	2a00      	cmp	r2, #0
 80051c0:	d101      	bne.n	80051c6 <ETH_SetMACConfig+0x1ee>
 80051c2:	2240      	movs	r2, #64	; 0x40
 80051c4:	e000      	b.n	80051c8 <ETH_SetMACConfig+0x1f0>
 80051c6:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80051c8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80051d0:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80051d2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80051da:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80051dc:	4313      	orrs	r3, r2
 80051de:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80051e8:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	68fa      	ldr	r2, [r7, #12]
 80051f2:	430a      	orrs	r2, r1
 80051f4:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 80051f8:	bf00      	nop
 80051fa:	3714      	adds	r7, #20
 80051fc:	46bd      	mov	sp, r7
 80051fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005202:	4770      	bx	lr
 8005204:	00048083 	.word	0x00048083
 8005208:	c0f88000 	.word	0xc0f88000
 800520c:	fffffef0 	.word	0xfffffef0

08005210 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8005210:	b480      	push	{r7}
 8005212:	b085      	sub	sp, #20
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
 8005218:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005222:	681a      	ldr	r2, [r3, #0]
 8005224:	4b38      	ldr	r3, [pc, #224]	; (8005308 <ETH_SetDMAConfig+0xf8>)
 8005226:	4013      	ands	r3, r2
 8005228:	683a      	ldr	r2, [r7, #0]
 800522a:	6811      	ldr	r1, [r2, #0]
 800522c:	687a      	ldr	r2, [r7, #4]
 800522e:	6812      	ldr	r2, [r2, #0]
 8005230:	430b      	orrs	r3, r1
 8005232:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005236:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	791b      	ldrb	r3, [r3, #4]
 800523c:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005242:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	7b1b      	ldrb	r3, [r3, #12]
 8005248:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800524a:	4313      	orrs	r3, r2
 800524c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005256:	685a      	ldr	r2, [r3, #4]
 8005258:	4b2c      	ldr	r3, [pc, #176]	; (800530c <ETH_SetDMAConfig+0xfc>)
 800525a:	4013      	ands	r3, r2
 800525c:	687a      	ldr	r2, [r7, #4]
 800525e:	6812      	ldr	r2, [r2, #0]
 8005260:	68f9      	ldr	r1, [r7, #12]
 8005262:	430b      	orrs	r3, r1
 8005264:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005268:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	7b5b      	ldrb	r3, [r3, #13]
 800526e:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8005274:	4313      	orrs	r3, r2
 8005276:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005280:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8005284:	4b22      	ldr	r3, [pc, #136]	; (8005310 <ETH_SetDMAConfig+0x100>)
 8005286:	4013      	ands	r3, r2
 8005288:	687a      	ldr	r2, [r7, #4]
 800528a:	6812      	ldr	r2, [r2, #0]
 800528c:	68f9      	ldr	r1, [r7, #12]
 800528e:	430b      	orrs	r3, r1
 8005290:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005294:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	7d1b      	ldrb	r3, [r3, #20]
 80052a0:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80052a2:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	7f5b      	ldrb	r3, [r3, #29]
 80052a8:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80052aa:	4313      	orrs	r3, r2
 80052ac:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052b6:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 80052ba:	4b16      	ldr	r3, [pc, #88]	; (8005314 <ETH_SetDMAConfig+0x104>)
 80052bc:	4013      	ands	r3, r2
 80052be:	687a      	ldr	r2, [r7, #4]
 80052c0:	6812      	ldr	r2, [r2, #0]
 80052c2:	68f9      	ldr	r1, [r7, #12]
 80052c4:	430b      	orrs	r3, r1
 80052c6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80052ca:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	7f1b      	ldrb	r3, [r3, #28]
 80052d2:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80052d8:	4313      	orrs	r3, r2
 80052da:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052e4:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80052e8:	4b0b      	ldr	r3, [pc, #44]	; (8005318 <ETH_SetDMAConfig+0x108>)
 80052ea:	4013      	ands	r3, r2
 80052ec:	687a      	ldr	r2, [r7, #4]
 80052ee:	6812      	ldr	r2, [r2, #0]
 80052f0:	68f9      	ldr	r1, [r7, #12]
 80052f2:	430b      	orrs	r3, r1
 80052f4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80052f8:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 80052fc:	bf00      	nop
 80052fe:	3714      	adds	r7, #20
 8005300:	46bd      	mov	sp, r7
 8005302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005306:	4770      	bx	lr
 8005308:	ffff87fd 	.word	0xffff87fd
 800530c:	ffff2ffe 	.word	0xffff2ffe
 8005310:	fffec000 	.word	0xfffec000
 8005314:	ffc0efef 	.word	0xffc0efef
 8005318:	7fc0ffff 	.word	0x7fc0ffff

0800531c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b0a4      	sub	sp, #144	; 0x90
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8005324:	2301      	movs	r3, #1
 8005326:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800532a:	2300      	movs	r3, #0
 800532c:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800532e:	2300      	movs	r3, #0
 8005330:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8005334:	2300      	movs	r3, #0
 8005336:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800533a:	2301      	movs	r3, #1
 800533c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8005340:	2301      	movs	r3, #1
 8005342:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8005346:	2301      	movs	r3, #1
 8005348:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 800534c:	2300      	movs	r3, #0
 800534e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8005352:	2301      	movs	r3, #1
 8005354:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8005358:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800535c:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800535e:	2300      	movs	r3, #0
 8005360:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8005364:	2300      	movs	r3, #0
 8005366:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8005368:	2300      	movs	r3, #0
 800536a:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800536e:	2300      	movs	r3, #0
 8005370:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8005374:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8005378:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800537a:	2300      	movs	r3, #0
 800537c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8005380:	2300      	movs	r3, #0
 8005382:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8005384:	2301      	movs	r3, #1
 8005386:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800538a:	2300      	movs	r3, #0
 800538c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8005390:	2300      	movs	r3, #0
 8005392:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8005396:	2300      	movs	r3, #0
 8005398:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 800539a:	2300      	movs	r3, #0
 800539c:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800539e:	2300      	movs	r3, #0
 80053a0:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80053a2:	2300      	movs	r3, #0
 80053a4:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80053a8:	2300      	movs	r3, #0
 80053aa:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80053ae:	2301      	movs	r3, #1
 80053b0:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80053b4:	2320      	movs	r3, #32
 80053b6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80053ba:	2301      	movs	r3, #1
 80053bc:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80053c0:	2300      	movs	r3, #0
 80053c2:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80053c6:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80053ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80053cc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80053d0:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80053d2:	2300      	movs	r3, #0
 80053d4:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80053d8:	2302      	movs	r3, #2
 80053da:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80053de:	2300      	movs	r3, #0
 80053e0:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80053e4:	2300      	movs	r3, #0
 80053e6:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80053ea:	2300      	movs	r3, #0
 80053ec:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80053f0:	2301      	movs	r3, #1
 80053f2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80053f6:	2300      	movs	r3, #0
 80053f8:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80053fa:	2301      	movs	r3, #1
 80053fc:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8005400:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005404:	4619      	mov	r1, r3
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f7ff fde6 	bl	8004fd8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800540c:	2301      	movs	r3, #1
 800540e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8005410:	2301      	movs	r3, #1
 8005412:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8005414:	2300      	movs	r3, #0
 8005416:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8005418:	2300      	movs	r3, #0
 800541a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800541e:	2300      	movs	r3, #0
 8005420:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8005422:	2300      	movs	r3, #0
 8005424:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8005426:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800542a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 800542c:	2300      	movs	r3, #0
 800542e:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8005430:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005434:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8005436:	2300      	movs	r3, #0
 8005438:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 800543c:	f44f 7306 	mov.w	r3, #536	; 0x218
 8005440:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8005442:	f107 0308 	add.w	r3, r7, #8
 8005446:	4619      	mov	r1, r3
 8005448:	6878      	ldr	r0, [r7, #4]
 800544a:	f7ff fee1 	bl	8005210 <ETH_SetDMAConfig>
}
 800544e:	bf00      	nop
 8005450:	3790      	adds	r7, #144	; 0x90
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}

08005456 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8005456:	b480      	push	{r7}
 8005458:	b085      	sub	sp, #20
 800545a:	af00      	add	r7, sp, #0
 800545c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800545e:	2300      	movs	r3, #0
 8005460:	60fb      	str	r3, [r7, #12]
 8005462:	e01d      	b.n	80054a0 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	68d9      	ldr	r1, [r3, #12]
 8005468:	68fa      	ldr	r2, [r7, #12]
 800546a:	4613      	mov	r3, r2
 800546c:	005b      	lsls	r3, r3, #1
 800546e:	4413      	add	r3, r2
 8005470:	00db      	lsls	r3, r3, #3
 8005472:	440b      	add	r3, r1
 8005474:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	2200      	movs	r2, #0
 800547a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	2200      	movs	r2, #0
 8005480:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	2200      	movs	r2, #0
 8005486:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	2200      	movs	r2, #0
 800548c:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800548e:	68b9      	ldr	r1, [r7, #8]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	68fa      	ldr	r2, [r7, #12]
 8005494:	3206      	adds	r2, #6
 8005496:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	3301      	adds	r3, #1
 800549e:	60fb      	str	r3, [r7, #12]
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	2b03      	cmp	r3, #3
 80054a4:	d9de      	bls.n	8005464 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2200      	movs	r2, #0
 80054aa:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054b4:	461a      	mov	r2, r3
 80054b6:	2303      	movs	r3, #3
 80054b8:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	68da      	ldr	r2, [r3, #12]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054c8:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	68da      	ldr	r2, [r3, #12]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054d8:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 80054dc:	bf00      	nop
 80054de:	3714      	adds	r7, #20
 80054e0:	46bd      	mov	sp, r7
 80054e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e6:	4770      	bx	lr

080054e8 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80054e8:	b480      	push	{r7}
 80054ea:	b085      	sub	sp, #20
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80054f0:	2300      	movs	r3, #0
 80054f2:	60fb      	str	r3, [r7, #12]
 80054f4:	e023      	b.n	800553e <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6919      	ldr	r1, [r3, #16]
 80054fa:	68fa      	ldr	r2, [r7, #12]
 80054fc:	4613      	mov	r3, r2
 80054fe:	005b      	lsls	r3, r3, #1
 8005500:	4413      	add	r3, r2
 8005502:	00db      	lsls	r3, r3, #3
 8005504:	440b      	add	r3, r1
 8005506:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	2200      	movs	r2, #0
 800550c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	2200      	movs	r2, #0
 8005512:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	2200      	movs	r2, #0
 8005518:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	2200      	movs	r2, #0
 800551e:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	2200      	movs	r2, #0
 8005524:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	2200      	movs	r2, #0
 800552a:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800552c:	68b9      	ldr	r1, [r7, #8]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	68fa      	ldr	r2, [r7, #12]
 8005532:	3212      	adds	r2, #18
 8005534:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	3301      	adds	r3, #1
 800553c:	60fb      	str	r3, [r7, #12]
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	2b03      	cmp	r3, #3
 8005542:	d9d8      	bls.n	80054f6 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2200      	movs	r2, #0
 8005548:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2200      	movs	r2, #0
 800554e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2200      	movs	r2, #0
 8005554:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2200      	movs	r2, #0
 800555a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2200      	movs	r2, #0
 8005560:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800556a:	461a      	mov	r2, r3
 800556c:	2303      	movs	r3, #3
 800556e:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	691a      	ldr	r2, [r3, #16]
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800557e:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	691b      	ldr	r3, [r3, #16]
 8005586:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005592:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8005596:	bf00      	nop
 8005598:	3714      	adds	r7, #20
 800559a:	46bd      	mov	sp, r7
 800559c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a0:	4770      	bx	lr
	...

080055a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80055a4:	b480      	push	{r7}
 80055a6:	b089      	sub	sp, #36	; 0x24
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
 80055ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80055ae:	2300      	movs	r3, #0
 80055b0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80055b2:	4b86      	ldr	r3, [pc, #536]	; (80057cc <HAL_GPIO_Init+0x228>)
 80055b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80055b6:	e18c      	b.n	80058d2 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	681a      	ldr	r2, [r3, #0]
 80055bc:	2101      	movs	r1, #1
 80055be:	69fb      	ldr	r3, [r7, #28]
 80055c0:	fa01 f303 	lsl.w	r3, r1, r3
 80055c4:	4013      	ands	r3, r2
 80055c6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	f000 817e 	beq.w	80058cc <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	f003 0303 	and.w	r3, r3, #3
 80055d8:	2b01      	cmp	r3, #1
 80055da:	d005      	beq.n	80055e8 <HAL_GPIO_Init+0x44>
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	f003 0303 	and.w	r3, r3, #3
 80055e4:	2b02      	cmp	r3, #2
 80055e6:	d130      	bne.n	800564a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	689b      	ldr	r3, [r3, #8]
 80055ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80055ee:	69fb      	ldr	r3, [r7, #28]
 80055f0:	005b      	lsls	r3, r3, #1
 80055f2:	2203      	movs	r2, #3
 80055f4:	fa02 f303 	lsl.w	r3, r2, r3
 80055f8:	43db      	mvns	r3, r3
 80055fa:	69ba      	ldr	r2, [r7, #24]
 80055fc:	4013      	ands	r3, r2
 80055fe:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	68da      	ldr	r2, [r3, #12]
 8005604:	69fb      	ldr	r3, [r7, #28]
 8005606:	005b      	lsls	r3, r3, #1
 8005608:	fa02 f303 	lsl.w	r3, r2, r3
 800560c:	69ba      	ldr	r2, [r7, #24]
 800560e:	4313      	orrs	r3, r2
 8005610:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	69ba      	ldr	r2, [r7, #24]
 8005616:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800561e:	2201      	movs	r2, #1
 8005620:	69fb      	ldr	r3, [r7, #28]
 8005622:	fa02 f303 	lsl.w	r3, r2, r3
 8005626:	43db      	mvns	r3, r3
 8005628:	69ba      	ldr	r2, [r7, #24]
 800562a:	4013      	ands	r3, r2
 800562c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	685b      	ldr	r3, [r3, #4]
 8005632:	091b      	lsrs	r3, r3, #4
 8005634:	f003 0201 	and.w	r2, r3, #1
 8005638:	69fb      	ldr	r3, [r7, #28]
 800563a:	fa02 f303 	lsl.w	r3, r2, r3
 800563e:	69ba      	ldr	r2, [r7, #24]
 8005640:	4313      	orrs	r3, r2
 8005642:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	69ba      	ldr	r2, [r7, #24]
 8005648:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	f003 0303 	and.w	r3, r3, #3
 8005652:	2b03      	cmp	r3, #3
 8005654:	d017      	beq.n	8005686 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	68db      	ldr	r3, [r3, #12]
 800565a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800565c:	69fb      	ldr	r3, [r7, #28]
 800565e:	005b      	lsls	r3, r3, #1
 8005660:	2203      	movs	r2, #3
 8005662:	fa02 f303 	lsl.w	r3, r2, r3
 8005666:	43db      	mvns	r3, r3
 8005668:	69ba      	ldr	r2, [r7, #24]
 800566a:	4013      	ands	r3, r2
 800566c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	689a      	ldr	r2, [r3, #8]
 8005672:	69fb      	ldr	r3, [r7, #28]
 8005674:	005b      	lsls	r3, r3, #1
 8005676:	fa02 f303 	lsl.w	r3, r2, r3
 800567a:	69ba      	ldr	r2, [r7, #24]
 800567c:	4313      	orrs	r3, r2
 800567e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	69ba      	ldr	r2, [r7, #24]
 8005684:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	685b      	ldr	r3, [r3, #4]
 800568a:	f003 0303 	and.w	r3, r3, #3
 800568e:	2b02      	cmp	r3, #2
 8005690:	d123      	bne.n	80056da <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005692:	69fb      	ldr	r3, [r7, #28]
 8005694:	08da      	lsrs	r2, r3, #3
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	3208      	adds	r2, #8
 800569a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800569e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80056a0:	69fb      	ldr	r3, [r7, #28]
 80056a2:	f003 0307 	and.w	r3, r3, #7
 80056a6:	009b      	lsls	r3, r3, #2
 80056a8:	220f      	movs	r2, #15
 80056aa:	fa02 f303 	lsl.w	r3, r2, r3
 80056ae:	43db      	mvns	r3, r3
 80056b0:	69ba      	ldr	r2, [r7, #24]
 80056b2:	4013      	ands	r3, r2
 80056b4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	691a      	ldr	r2, [r3, #16]
 80056ba:	69fb      	ldr	r3, [r7, #28]
 80056bc:	f003 0307 	and.w	r3, r3, #7
 80056c0:	009b      	lsls	r3, r3, #2
 80056c2:	fa02 f303 	lsl.w	r3, r2, r3
 80056c6:	69ba      	ldr	r2, [r7, #24]
 80056c8:	4313      	orrs	r3, r2
 80056ca:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80056cc:	69fb      	ldr	r3, [r7, #28]
 80056ce:	08da      	lsrs	r2, r3, #3
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	3208      	adds	r2, #8
 80056d4:	69b9      	ldr	r1, [r7, #24]
 80056d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80056e0:	69fb      	ldr	r3, [r7, #28]
 80056e2:	005b      	lsls	r3, r3, #1
 80056e4:	2203      	movs	r2, #3
 80056e6:	fa02 f303 	lsl.w	r3, r2, r3
 80056ea:	43db      	mvns	r3, r3
 80056ec:	69ba      	ldr	r2, [r7, #24]
 80056ee:	4013      	ands	r3, r2
 80056f0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	f003 0203 	and.w	r2, r3, #3
 80056fa:	69fb      	ldr	r3, [r7, #28]
 80056fc:	005b      	lsls	r3, r3, #1
 80056fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005702:	69ba      	ldr	r2, [r7, #24]
 8005704:	4313      	orrs	r3, r2
 8005706:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	69ba      	ldr	r2, [r7, #24]
 800570c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005716:	2b00      	cmp	r3, #0
 8005718:	f000 80d8 	beq.w	80058cc <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800571c:	4b2c      	ldr	r3, [pc, #176]	; (80057d0 <HAL_GPIO_Init+0x22c>)
 800571e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005722:	4a2b      	ldr	r2, [pc, #172]	; (80057d0 <HAL_GPIO_Init+0x22c>)
 8005724:	f043 0302 	orr.w	r3, r3, #2
 8005728:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800572c:	4b28      	ldr	r3, [pc, #160]	; (80057d0 <HAL_GPIO_Init+0x22c>)
 800572e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005732:	f003 0302 	and.w	r3, r3, #2
 8005736:	60fb      	str	r3, [r7, #12]
 8005738:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800573a:	4a26      	ldr	r2, [pc, #152]	; (80057d4 <HAL_GPIO_Init+0x230>)
 800573c:	69fb      	ldr	r3, [r7, #28]
 800573e:	089b      	lsrs	r3, r3, #2
 8005740:	3302      	adds	r3, #2
 8005742:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005746:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005748:	69fb      	ldr	r3, [r7, #28]
 800574a:	f003 0303 	and.w	r3, r3, #3
 800574e:	009b      	lsls	r3, r3, #2
 8005750:	220f      	movs	r2, #15
 8005752:	fa02 f303 	lsl.w	r3, r2, r3
 8005756:	43db      	mvns	r3, r3
 8005758:	69ba      	ldr	r2, [r7, #24]
 800575a:	4013      	ands	r3, r2
 800575c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	4a1d      	ldr	r2, [pc, #116]	; (80057d8 <HAL_GPIO_Init+0x234>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d04a      	beq.n	80057fc <HAL_GPIO_Init+0x258>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	4a1c      	ldr	r2, [pc, #112]	; (80057dc <HAL_GPIO_Init+0x238>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d02b      	beq.n	80057c6 <HAL_GPIO_Init+0x222>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	4a1b      	ldr	r2, [pc, #108]	; (80057e0 <HAL_GPIO_Init+0x23c>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d025      	beq.n	80057c2 <HAL_GPIO_Init+0x21e>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	4a1a      	ldr	r2, [pc, #104]	; (80057e4 <HAL_GPIO_Init+0x240>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d01f      	beq.n	80057be <HAL_GPIO_Init+0x21a>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	4a19      	ldr	r2, [pc, #100]	; (80057e8 <HAL_GPIO_Init+0x244>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d019      	beq.n	80057ba <HAL_GPIO_Init+0x216>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	4a18      	ldr	r2, [pc, #96]	; (80057ec <HAL_GPIO_Init+0x248>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d013      	beq.n	80057b6 <HAL_GPIO_Init+0x212>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	4a17      	ldr	r2, [pc, #92]	; (80057f0 <HAL_GPIO_Init+0x24c>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d00d      	beq.n	80057b2 <HAL_GPIO_Init+0x20e>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	4a16      	ldr	r2, [pc, #88]	; (80057f4 <HAL_GPIO_Init+0x250>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d007      	beq.n	80057ae <HAL_GPIO_Init+0x20a>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	4a15      	ldr	r2, [pc, #84]	; (80057f8 <HAL_GPIO_Init+0x254>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d101      	bne.n	80057aa <HAL_GPIO_Init+0x206>
 80057a6:	2309      	movs	r3, #9
 80057a8:	e029      	b.n	80057fe <HAL_GPIO_Init+0x25a>
 80057aa:	230a      	movs	r3, #10
 80057ac:	e027      	b.n	80057fe <HAL_GPIO_Init+0x25a>
 80057ae:	2307      	movs	r3, #7
 80057b0:	e025      	b.n	80057fe <HAL_GPIO_Init+0x25a>
 80057b2:	2306      	movs	r3, #6
 80057b4:	e023      	b.n	80057fe <HAL_GPIO_Init+0x25a>
 80057b6:	2305      	movs	r3, #5
 80057b8:	e021      	b.n	80057fe <HAL_GPIO_Init+0x25a>
 80057ba:	2304      	movs	r3, #4
 80057bc:	e01f      	b.n	80057fe <HAL_GPIO_Init+0x25a>
 80057be:	2303      	movs	r3, #3
 80057c0:	e01d      	b.n	80057fe <HAL_GPIO_Init+0x25a>
 80057c2:	2302      	movs	r3, #2
 80057c4:	e01b      	b.n	80057fe <HAL_GPIO_Init+0x25a>
 80057c6:	2301      	movs	r3, #1
 80057c8:	e019      	b.n	80057fe <HAL_GPIO_Init+0x25a>
 80057ca:	bf00      	nop
 80057cc:	58000080 	.word	0x58000080
 80057d0:	58024400 	.word	0x58024400
 80057d4:	58000400 	.word	0x58000400
 80057d8:	58020000 	.word	0x58020000
 80057dc:	58020400 	.word	0x58020400
 80057e0:	58020800 	.word	0x58020800
 80057e4:	58020c00 	.word	0x58020c00
 80057e8:	58021000 	.word	0x58021000
 80057ec:	58021400 	.word	0x58021400
 80057f0:	58021800 	.word	0x58021800
 80057f4:	58021c00 	.word	0x58021c00
 80057f8:	58022400 	.word	0x58022400
 80057fc:	2300      	movs	r3, #0
 80057fe:	69fa      	ldr	r2, [r7, #28]
 8005800:	f002 0203 	and.w	r2, r2, #3
 8005804:	0092      	lsls	r2, r2, #2
 8005806:	4093      	lsls	r3, r2
 8005808:	69ba      	ldr	r2, [r7, #24]
 800580a:	4313      	orrs	r3, r2
 800580c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800580e:	4938      	ldr	r1, [pc, #224]	; (80058f0 <HAL_GPIO_Init+0x34c>)
 8005810:	69fb      	ldr	r3, [r7, #28]
 8005812:	089b      	lsrs	r3, r3, #2
 8005814:	3302      	adds	r3, #2
 8005816:	69ba      	ldr	r2, [r7, #24]
 8005818:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800581c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005824:	693b      	ldr	r3, [r7, #16]
 8005826:	43db      	mvns	r3, r3
 8005828:	69ba      	ldr	r2, [r7, #24]
 800582a:	4013      	ands	r3, r2
 800582c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005836:	2b00      	cmp	r3, #0
 8005838:	d003      	beq.n	8005842 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800583a:	69ba      	ldr	r2, [r7, #24]
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	4313      	orrs	r3, r2
 8005840:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005842:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005846:	69bb      	ldr	r3, [r7, #24]
 8005848:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800584a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	43db      	mvns	r3, r3
 8005856:	69ba      	ldr	r2, [r7, #24]
 8005858:	4013      	ands	r3, r2
 800585a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005864:	2b00      	cmp	r3, #0
 8005866:	d003      	beq.n	8005870 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8005868:	69ba      	ldr	r2, [r7, #24]
 800586a:	693b      	ldr	r3, [r7, #16]
 800586c:	4313      	orrs	r3, r2
 800586e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005870:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005874:	69bb      	ldr	r3, [r7, #24]
 8005876:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800587e:	693b      	ldr	r3, [r7, #16]
 8005880:	43db      	mvns	r3, r3
 8005882:	69ba      	ldr	r2, [r7, #24]
 8005884:	4013      	ands	r3, r2
 8005886:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005890:	2b00      	cmp	r3, #0
 8005892:	d003      	beq.n	800589c <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8005894:	69ba      	ldr	r2, [r7, #24]
 8005896:	693b      	ldr	r3, [r7, #16]
 8005898:	4313      	orrs	r3, r2
 800589a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	69ba      	ldr	r2, [r7, #24]
 80058a0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	43db      	mvns	r3, r3
 80058ac:	69ba      	ldr	r2, [r7, #24]
 80058ae:	4013      	ands	r3, r2
 80058b0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d003      	beq.n	80058c6 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80058be:	69ba      	ldr	r2, [r7, #24]
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	4313      	orrs	r3, r2
 80058c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	69ba      	ldr	r2, [r7, #24]
 80058ca:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80058cc:	69fb      	ldr	r3, [r7, #28]
 80058ce:	3301      	adds	r3, #1
 80058d0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	681a      	ldr	r2, [r3, #0]
 80058d6:	69fb      	ldr	r3, [r7, #28]
 80058d8:	fa22 f303 	lsr.w	r3, r2, r3
 80058dc:	2b00      	cmp	r3, #0
 80058de:	f47f ae6b 	bne.w	80055b8 <HAL_GPIO_Init+0x14>
  }
}
 80058e2:	bf00      	nop
 80058e4:	bf00      	nop
 80058e6:	3724      	adds	r7, #36	; 0x24
 80058e8:	46bd      	mov	sp, r7
 80058ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ee:	4770      	bx	lr
 80058f0:	58000400 	.word	0x58000400

080058f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80058f4:	b480      	push	{r7}
 80058f6:	b083      	sub	sp, #12
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
 80058fc:	460b      	mov	r3, r1
 80058fe:	807b      	strh	r3, [r7, #2]
 8005900:	4613      	mov	r3, r2
 8005902:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005904:	787b      	ldrb	r3, [r7, #1]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d003      	beq.n	8005912 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800590a:	887a      	ldrh	r2, [r7, #2]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005910:	e003      	b.n	800591a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005912:	887b      	ldrh	r3, [r7, #2]
 8005914:	041a      	lsls	r2, r3, #16
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	619a      	str	r2, [r3, #24]
}
 800591a:	bf00      	nop
 800591c:	370c      	adds	r7, #12
 800591e:	46bd      	mov	sp, r7
 8005920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005924:	4770      	bx	lr

08005926 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005926:	b480      	push	{r7}
 8005928:	b085      	sub	sp, #20
 800592a:	af00      	add	r7, sp, #0
 800592c:	6078      	str	r0, [r7, #4]
 800592e:	460b      	mov	r3, r1
 8005930:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	695b      	ldr	r3, [r3, #20]
 8005936:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005938:	887a      	ldrh	r2, [r7, #2]
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	4013      	ands	r3, r2
 800593e:	041a      	lsls	r2, r3, #16
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	43d9      	mvns	r1, r3
 8005944:	887b      	ldrh	r3, [r7, #2]
 8005946:	400b      	ands	r3, r1
 8005948:	431a      	orrs	r2, r3
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	619a      	str	r2, [r3, #24]
}
 800594e:	bf00      	nop
 8005950:	3714      	adds	r7, #20
 8005952:	46bd      	mov	sp, r7
 8005954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005958:	4770      	bx	lr

0800595a <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800595a:	b580      	push	{r7, lr}
 800595c:	b082      	sub	sp, #8
 800595e:	af00      	add	r7, sp, #0
 8005960:	4603      	mov	r3, r0
 8005962:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8005964:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005968:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800596c:	88fb      	ldrh	r3, [r7, #6]
 800596e:	4013      	ands	r3, r2
 8005970:	2b00      	cmp	r3, #0
 8005972:	d008      	beq.n	8005986 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005974:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005978:	88fb      	ldrh	r3, [r7, #6]
 800597a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800597e:	88fb      	ldrh	r3, [r7, #6]
 8005980:	4618      	mov	r0, r3
 8005982:	f000 f804 	bl	800598e <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8005986:	bf00      	nop
 8005988:	3708      	adds	r7, #8
 800598a:	46bd      	mov	sp, r7
 800598c:	bd80      	pop	{r7, pc}

0800598e <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800598e:	b480      	push	{r7}
 8005990:	b083      	sub	sp, #12
 8005992:	af00      	add	r7, sp, #0
 8005994:	4603      	mov	r3, r0
 8005996:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005998:	bf00      	nop
 800599a:	370c      	adds	r7, #12
 800599c:	46bd      	mov	sp, r7
 800599e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a2:	4770      	bx	lr

080059a4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b084      	sub	sp, #16
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80059ac:	4b19      	ldr	r3, [pc, #100]	; (8005a14 <HAL_PWREx_ConfigSupply+0x70>)
 80059ae:	68db      	ldr	r3, [r3, #12]
 80059b0:	f003 0304 	and.w	r3, r3, #4
 80059b4:	2b04      	cmp	r3, #4
 80059b6:	d00a      	beq.n	80059ce <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80059b8:	4b16      	ldr	r3, [pc, #88]	; (8005a14 <HAL_PWREx_ConfigSupply+0x70>)
 80059ba:	68db      	ldr	r3, [r3, #12]
 80059bc:	f003 0307 	and.w	r3, r3, #7
 80059c0:	687a      	ldr	r2, [r7, #4]
 80059c2:	429a      	cmp	r2, r3
 80059c4:	d001      	beq.n	80059ca <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80059c6:	2301      	movs	r3, #1
 80059c8:	e01f      	b.n	8005a0a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80059ca:	2300      	movs	r3, #0
 80059cc:	e01d      	b.n	8005a0a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80059ce:	4b11      	ldr	r3, [pc, #68]	; (8005a14 <HAL_PWREx_ConfigSupply+0x70>)
 80059d0:	68db      	ldr	r3, [r3, #12]
 80059d2:	f023 0207 	bic.w	r2, r3, #7
 80059d6:	490f      	ldr	r1, [pc, #60]	; (8005a14 <HAL_PWREx_ConfigSupply+0x70>)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	4313      	orrs	r3, r2
 80059dc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80059de:	f7fc fd4f 	bl	8002480 <HAL_GetTick>
 80059e2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80059e4:	e009      	b.n	80059fa <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80059e6:	f7fc fd4b 	bl	8002480 <HAL_GetTick>
 80059ea:	4602      	mov	r2, r0
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	1ad3      	subs	r3, r2, r3
 80059f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80059f4:	d901      	bls.n	80059fa <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80059f6:	2301      	movs	r3, #1
 80059f8:	e007      	b.n	8005a0a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80059fa:	4b06      	ldr	r3, [pc, #24]	; (8005a14 <HAL_PWREx_ConfigSupply+0x70>)
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005a02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a06:	d1ee      	bne.n	80059e6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005a08:	2300      	movs	r3, #0
}
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	3710      	adds	r7, #16
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}
 8005a12:	bf00      	nop
 8005a14:	58024800 	.word	0x58024800

08005a18 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b08c      	sub	sp, #48	; 0x30
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d101      	bne.n	8005a2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005a26:	2301      	movs	r3, #1
 8005a28:	e3c8      	b.n	80061bc <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f003 0301 	and.w	r3, r3, #1
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	f000 8087 	beq.w	8005b46 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005a38:	4b88      	ldr	r3, [pc, #544]	; (8005c5c <HAL_RCC_OscConfig+0x244>)
 8005a3a:	691b      	ldr	r3, [r3, #16]
 8005a3c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005a40:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005a42:	4b86      	ldr	r3, [pc, #536]	; (8005c5c <HAL_RCC_OscConfig+0x244>)
 8005a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a46:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a4a:	2b10      	cmp	r3, #16
 8005a4c:	d007      	beq.n	8005a5e <HAL_RCC_OscConfig+0x46>
 8005a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a50:	2b18      	cmp	r3, #24
 8005a52:	d110      	bne.n	8005a76 <HAL_RCC_OscConfig+0x5e>
 8005a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a56:	f003 0303 	and.w	r3, r3, #3
 8005a5a:	2b02      	cmp	r3, #2
 8005a5c:	d10b      	bne.n	8005a76 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a5e:	4b7f      	ldr	r3, [pc, #508]	; (8005c5c <HAL_RCC_OscConfig+0x244>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d06c      	beq.n	8005b44 <HAL_RCC_OscConfig+0x12c>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d168      	bne.n	8005b44 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005a72:	2301      	movs	r3, #1
 8005a74:	e3a2      	b.n	80061bc <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a7e:	d106      	bne.n	8005a8e <HAL_RCC_OscConfig+0x76>
 8005a80:	4b76      	ldr	r3, [pc, #472]	; (8005c5c <HAL_RCC_OscConfig+0x244>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4a75      	ldr	r2, [pc, #468]	; (8005c5c <HAL_RCC_OscConfig+0x244>)
 8005a86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a8a:	6013      	str	r3, [r2, #0]
 8005a8c:	e02e      	b.n	8005aec <HAL_RCC_OscConfig+0xd4>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d10c      	bne.n	8005ab0 <HAL_RCC_OscConfig+0x98>
 8005a96:	4b71      	ldr	r3, [pc, #452]	; (8005c5c <HAL_RCC_OscConfig+0x244>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a70      	ldr	r2, [pc, #448]	; (8005c5c <HAL_RCC_OscConfig+0x244>)
 8005a9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005aa0:	6013      	str	r3, [r2, #0]
 8005aa2:	4b6e      	ldr	r3, [pc, #440]	; (8005c5c <HAL_RCC_OscConfig+0x244>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a6d      	ldr	r2, [pc, #436]	; (8005c5c <HAL_RCC_OscConfig+0x244>)
 8005aa8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005aac:	6013      	str	r3, [r2, #0]
 8005aae:	e01d      	b.n	8005aec <HAL_RCC_OscConfig+0xd4>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005ab8:	d10c      	bne.n	8005ad4 <HAL_RCC_OscConfig+0xbc>
 8005aba:	4b68      	ldr	r3, [pc, #416]	; (8005c5c <HAL_RCC_OscConfig+0x244>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4a67      	ldr	r2, [pc, #412]	; (8005c5c <HAL_RCC_OscConfig+0x244>)
 8005ac0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005ac4:	6013      	str	r3, [r2, #0]
 8005ac6:	4b65      	ldr	r3, [pc, #404]	; (8005c5c <HAL_RCC_OscConfig+0x244>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4a64      	ldr	r2, [pc, #400]	; (8005c5c <HAL_RCC_OscConfig+0x244>)
 8005acc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ad0:	6013      	str	r3, [r2, #0]
 8005ad2:	e00b      	b.n	8005aec <HAL_RCC_OscConfig+0xd4>
 8005ad4:	4b61      	ldr	r3, [pc, #388]	; (8005c5c <HAL_RCC_OscConfig+0x244>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4a60      	ldr	r2, [pc, #384]	; (8005c5c <HAL_RCC_OscConfig+0x244>)
 8005ada:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ade:	6013      	str	r3, [r2, #0]
 8005ae0:	4b5e      	ldr	r3, [pc, #376]	; (8005c5c <HAL_RCC_OscConfig+0x244>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4a5d      	ldr	r2, [pc, #372]	; (8005c5c <HAL_RCC_OscConfig+0x244>)
 8005ae6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005aea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d013      	beq.n	8005b1c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005af4:	f7fc fcc4 	bl	8002480 <HAL_GetTick>
 8005af8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005afa:	e008      	b.n	8005b0e <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005afc:	f7fc fcc0 	bl	8002480 <HAL_GetTick>
 8005b00:	4602      	mov	r2, r0
 8005b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b04:	1ad3      	subs	r3, r2, r3
 8005b06:	2b64      	cmp	r3, #100	; 0x64
 8005b08:	d901      	bls.n	8005b0e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005b0a:	2303      	movs	r3, #3
 8005b0c:	e356      	b.n	80061bc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005b0e:	4b53      	ldr	r3, [pc, #332]	; (8005c5c <HAL_RCC_OscConfig+0x244>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d0f0      	beq.n	8005afc <HAL_RCC_OscConfig+0xe4>
 8005b1a:	e014      	b.n	8005b46 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b1c:	f7fc fcb0 	bl	8002480 <HAL_GetTick>
 8005b20:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005b22:	e008      	b.n	8005b36 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b24:	f7fc fcac 	bl	8002480 <HAL_GetTick>
 8005b28:	4602      	mov	r2, r0
 8005b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b2c:	1ad3      	subs	r3, r2, r3
 8005b2e:	2b64      	cmp	r3, #100	; 0x64
 8005b30:	d901      	bls.n	8005b36 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005b32:	2303      	movs	r3, #3
 8005b34:	e342      	b.n	80061bc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005b36:	4b49      	ldr	r3, [pc, #292]	; (8005c5c <HAL_RCC_OscConfig+0x244>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d1f0      	bne.n	8005b24 <HAL_RCC_OscConfig+0x10c>
 8005b42:	e000      	b.n	8005b46 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f003 0302 	and.w	r3, r3, #2
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	f000 808c 	beq.w	8005c6c <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005b54:	4b41      	ldr	r3, [pc, #260]	; (8005c5c <HAL_RCC_OscConfig+0x244>)
 8005b56:	691b      	ldr	r3, [r3, #16]
 8005b58:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005b5c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005b5e:	4b3f      	ldr	r3, [pc, #252]	; (8005c5c <HAL_RCC_OscConfig+0x244>)
 8005b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b62:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005b64:	6a3b      	ldr	r3, [r7, #32]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d007      	beq.n	8005b7a <HAL_RCC_OscConfig+0x162>
 8005b6a:	6a3b      	ldr	r3, [r7, #32]
 8005b6c:	2b18      	cmp	r3, #24
 8005b6e:	d137      	bne.n	8005be0 <HAL_RCC_OscConfig+0x1c8>
 8005b70:	69fb      	ldr	r3, [r7, #28]
 8005b72:	f003 0303 	and.w	r3, r3, #3
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d132      	bne.n	8005be0 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005b7a:	4b38      	ldr	r3, [pc, #224]	; (8005c5c <HAL_RCC_OscConfig+0x244>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f003 0304 	and.w	r3, r3, #4
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d005      	beq.n	8005b92 <HAL_RCC_OscConfig+0x17a>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	68db      	ldr	r3, [r3, #12]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d101      	bne.n	8005b92 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005b8e:	2301      	movs	r3, #1
 8005b90:	e314      	b.n	80061bc <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005b92:	4b32      	ldr	r3, [pc, #200]	; (8005c5c <HAL_RCC_OscConfig+0x244>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f023 0219 	bic.w	r2, r3, #25
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	68db      	ldr	r3, [r3, #12]
 8005b9e:	492f      	ldr	r1, [pc, #188]	; (8005c5c <HAL_RCC_OscConfig+0x244>)
 8005ba0:	4313      	orrs	r3, r2
 8005ba2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ba4:	f7fc fc6c 	bl	8002480 <HAL_GetTick>
 8005ba8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005baa:	e008      	b.n	8005bbe <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005bac:	f7fc fc68 	bl	8002480 <HAL_GetTick>
 8005bb0:	4602      	mov	r2, r0
 8005bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb4:	1ad3      	subs	r3, r2, r3
 8005bb6:	2b02      	cmp	r3, #2
 8005bb8:	d901      	bls.n	8005bbe <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8005bba:	2303      	movs	r3, #3
 8005bbc:	e2fe      	b.n	80061bc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005bbe:	4b27      	ldr	r3, [pc, #156]	; (8005c5c <HAL_RCC_OscConfig+0x244>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f003 0304 	and.w	r3, r3, #4
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d0f0      	beq.n	8005bac <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bca:	4b24      	ldr	r3, [pc, #144]	; (8005c5c <HAL_RCC_OscConfig+0x244>)
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	691b      	ldr	r3, [r3, #16]
 8005bd6:	061b      	lsls	r3, r3, #24
 8005bd8:	4920      	ldr	r1, [pc, #128]	; (8005c5c <HAL_RCC_OscConfig+0x244>)
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005bde:	e045      	b.n	8005c6c <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	68db      	ldr	r3, [r3, #12]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d026      	beq.n	8005c36 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005be8:	4b1c      	ldr	r3, [pc, #112]	; (8005c5c <HAL_RCC_OscConfig+0x244>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f023 0219 	bic.w	r2, r3, #25
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	68db      	ldr	r3, [r3, #12]
 8005bf4:	4919      	ldr	r1, [pc, #100]	; (8005c5c <HAL_RCC_OscConfig+0x244>)
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bfa:	f7fc fc41 	bl	8002480 <HAL_GetTick>
 8005bfe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005c00:	e008      	b.n	8005c14 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c02:	f7fc fc3d 	bl	8002480 <HAL_GetTick>
 8005c06:	4602      	mov	r2, r0
 8005c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c0a:	1ad3      	subs	r3, r2, r3
 8005c0c:	2b02      	cmp	r3, #2
 8005c0e:	d901      	bls.n	8005c14 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8005c10:	2303      	movs	r3, #3
 8005c12:	e2d3      	b.n	80061bc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005c14:	4b11      	ldr	r3, [pc, #68]	; (8005c5c <HAL_RCC_OscConfig+0x244>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f003 0304 	and.w	r3, r3, #4
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d0f0      	beq.n	8005c02 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c20:	4b0e      	ldr	r3, [pc, #56]	; (8005c5c <HAL_RCC_OscConfig+0x244>)
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	691b      	ldr	r3, [r3, #16]
 8005c2c:	061b      	lsls	r3, r3, #24
 8005c2e:	490b      	ldr	r1, [pc, #44]	; (8005c5c <HAL_RCC_OscConfig+0x244>)
 8005c30:	4313      	orrs	r3, r2
 8005c32:	604b      	str	r3, [r1, #4]
 8005c34:	e01a      	b.n	8005c6c <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005c36:	4b09      	ldr	r3, [pc, #36]	; (8005c5c <HAL_RCC_OscConfig+0x244>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a08      	ldr	r2, [pc, #32]	; (8005c5c <HAL_RCC_OscConfig+0x244>)
 8005c3c:	f023 0301 	bic.w	r3, r3, #1
 8005c40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c42:	f7fc fc1d 	bl	8002480 <HAL_GetTick>
 8005c46:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005c48:	e00a      	b.n	8005c60 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c4a:	f7fc fc19 	bl	8002480 <HAL_GetTick>
 8005c4e:	4602      	mov	r2, r0
 8005c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c52:	1ad3      	subs	r3, r2, r3
 8005c54:	2b02      	cmp	r3, #2
 8005c56:	d903      	bls.n	8005c60 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8005c58:	2303      	movs	r3, #3
 8005c5a:	e2af      	b.n	80061bc <HAL_RCC_OscConfig+0x7a4>
 8005c5c:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005c60:	4b96      	ldr	r3, [pc, #600]	; (8005ebc <HAL_RCC_OscConfig+0x4a4>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f003 0304 	and.w	r3, r3, #4
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d1ee      	bne.n	8005c4a <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f003 0310 	and.w	r3, r3, #16
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d06a      	beq.n	8005d4e <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005c78:	4b90      	ldr	r3, [pc, #576]	; (8005ebc <HAL_RCC_OscConfig+0x4a4>)
 8005c7a:	691b      	ldr	r3, [r3, #16]
 8005c7c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005c80:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005c82:	4b8e      	ldr	r3, [pc, #568]	; (8005ebc <HAL_RCC_OscConfig+0x4a4>)
 8005c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c86:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005c88:	69bb      	ldr	r3, [r7, #24]
 8005c8a:	2b08      	cmp	r3, #8
 8005c8c:	d007      	beq.n	8005c9e <HAL_RCC_OscConfig+0x286>
 8005c8e:	69bb      	ldr	r3, [r7, #24]
 8005c90:	2b18      	cmp	r3, #24
 8005c92:	d11b      	bne.n	8005ccc <HAL_RCC_OscConfig+0x2b4>
 8005c94:	697b      	ldr	r3, [r7, #20]
 8005c96:	f003 0303 	and.w	r3, r3, #3
 8005c9a:	2b01      	cmp	r3, #1
 8005c9c:	d116      	bne.n	8005ccc <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005c9e:	4b87      	ldr	r3, [pc, #540]	; (8005ebc <HAL_RCC_OscConfig+0x4a4>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d005      	beq.n	8005cb6 <HAL_RCC_OscConfig+0x29e>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	69db      	ldr	r3, [r3, #28]
 8005cae:	2b80      	cmp	r3, #128	; 0x80
 8005cb0:	d001      	beq.n	8005cb6 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	e282      	b.n	80061bc <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005cb6:	4b81      	ldr	r3, [pc, #516]	; (8005ebc <HAL_RCC_OscConfig+0x4a4>)
 8005cb8:	68db      	ldr	r3, [r3, #12]
 8005cba:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6a1b      	ldr	r3, [r3, #32]
 8005cc2:	061b      	lsls	r3, r3, #24
 8005cc4:	497d      	ldr	r1, [pc, #500]	; (8005ebc <HAL_RCC_OscConfig+0x4a4>)
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005cca:	e040      	b.n	8005d4e <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	69db      	ldr	r3, [r3, #28]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d023      	beq.n	8005d1c <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005cd4:	4b79      	ldr	r3, [pc, #484]	; (8005ebc <HAL_RCC_OscConfig+0x4a4>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a78      	ldr	r2, [pc, #480]	; (8005ebc <HAL_RCC_OscConfig+0x4a4>)
 8005cda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ce0:	f7fc fbce 	bl	8002480 <HAL_GetTick>
 8005ce4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005ce6:	e008      	b.n	8005cfa <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005ce8:	f7fc fbca 	bl	8002480 <HAL_GetTick>
 8005cec:	4602      	mov	r2, r0
 8005cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf0:	1ad3      	subs	r3, r2, r3
 8005cf2:	2b02      	cmp	r3, #2
 8005cf4:	d901      	bls.n	8005cfa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005cf6:	2303      	movs	r3, #3
 8005cf8:	e260      	b.n	80061bc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005cfa:	4b70      	ldr	r3, [pc, #448]	; (8005ebc <HAL_RCC_OscConfig+0x4a4>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d0f0      	beq.n	8005ce8 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005d06:	4b6d      	ldr	r3, [pc, #436]	; (8005ebc <HAL_RCC_OscConfig+0x4a4>)
 8005d08:	68db      	ldr	r3, [r3, #12]
 8005d0a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6a1b      	ldr	r3, [r3, #32]
 8005d12:	061b      	lsls	r3, r3, #24
 8005d14:	4969      	ldr	r1, [pc, #420]	; (8005ebc <HAL_RCC_OscConfig+0x4a4>)
 8005d16:	4313      	orrs	r3, r2
 8005d18:	60cb      	str	r3, [r1, #12]
 8005d1a:	e018      	b.n	8005d4e <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005d1c:	4b67      	ldr	r3, [pc, #412]	; (8005ebc <HAL_RCC_OscConfig+0x4a4>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a66      	ldr	r2, [pc, #408]	; (8005ebc <HAL_RCC_OscConfig+0x4a4>)
 8005d22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d28:	f7fc fbaa 	bl	8002480 <HAL_GetTick>
 8005d2c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005d2e:	e008      	b.n	8005d42 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005d30:	f7fc fba6 	bl	8002480 <HAL_GetTick>
 8005d34:	4602      	mov	r2, r0
 8005d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d38:	1ad3      	subs	r3, r2, r3
 8005d3a:	2b02      	cmp	r3, #2
 8005d3c:	d901      	bls.n	8005d42 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8005d3e:	2303      	movs	r3, #3
 8005d40:	e23c      	b.n	80061bc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005d42:	4b5e      	ldr	r3, [pc, #376]	; (8005ebc <HAL_RCC_OscConfig+0x4a4>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d1f0      	bne.n	8005d30 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f003 0308 	and.w	r3, r3, #8
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d036      	beq.n	8005dc8 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	695b      	ldr	r3, [r3, #20]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d019      	beq.n	8005d96 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005d62:	4b56      	ldr	r3, [pc, #344]	; (8005ebc <HAL_RCC_OscConfig+0x4a4>)
 8005d64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d66:	4a55      	ldr	r2, [pc, #340]	; (8005ebc <HAL_RCC_OscConfig+0x4a4>)
 8005d68:	f043 0301 	orr.w	r3, r3, #1
 8005d6c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d6e:	f7fc fb87 	bl	8002480 <HAL_GetTick>
 8005d72:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005d74:	e008      	b.n	8005d88 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d76:	f7fc fb83 	bl	8002480 <HAL_GetTick>
 8005d7a:	4602      	mov	r2, r0
 8005d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d7e:	1ad3      	subs	r3, r2, r3
 8005d80:	2b02      	cmp	r3, #2
 8005d82:	d901      	bls.n	8005d88 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8005d84:	2303      	movs	r3, #3
 8005d86:	e219      	b.n	80061bc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005d88:	4b4c      	ldr	r3, [pc, #304]	; (8005ebc <HAL_RCC_OscConfig+0x4a4>)
 8005d8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d8c:	f003 0302 	and.w	r3, r3, #2
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d0f0      	beq.n	8005d76 <HAL_RCC_OscConfig+0x35e>
 8005d94:	e018      	b.n	8005dc8 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005d96:	4b49      	ldr	r3, [pc, #292]	; (8005ebc <HAL_RCC_OscConfig+0x4a4>)
 8005d98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d9a:	4a48      	ldr	r2, [pc, #288]	; (8005ebc <HAL_RCC_OscConfig+0x4a4>)
 8005d9c:	f023 0301 	bic.w	r3, r3, #1
 8005da0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005da2:	f7fc fb6d 	bl	8002480 <HAL_GetTick>
 8005da6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005da8:	e008      	b.n	8005dbc <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005daa:	f7fc fb69 	bl	8002480 <HAL_GetTick>
 8005dae:	4602      	mov	r2, r0
 8005db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db2:	1ad3      	subs	r3, r2, r3
 8005db4:	2b02      	cmp	r3, #2
 8005db6:	d901      	bls.n	8005dbc <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8005db8:	2303      	movs	r3, #3
 8005dba:	e1ff      	b.n	80061bc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005dbc:	4b3f      	ldr	r3, [pc, #252]	; (8005ebc <HAL_RCC_OscConfig+0x4a4>)
 8005dbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005dc0:	f003 0302 	and.w	r3, r3, #2
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d1f0      	bne.n	8005daa <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f003 0320 	and.w	r3, r3, #32
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d036      	beq.n	8005e42 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	699b      	ldr	r3, [r3, #24]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d019      	beq.n	8005e10 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005ddc:	4b37      	ldr	r3, [pc, #220]	; (8005ebc <HAL_RCC_OscConfig+0x4a4>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a36      	ldr	r2, [pc, #216]	; (8005ebc <HAL_RCC_OscConfig+0x4a4>)
 8005de2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005de6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005de8:	f7fc fb4a 	bl	8002480 <HAL_GetTick>
 8005dec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005dee:	e008      	b.n	8005e02 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005df0:	f7fc fb46 	bl	8002480 <HAL_GetTick>
 8005df4:	4602      	mov	r2, r0
 8005df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df8:	1ad3      	subs	r3, r2, r3
 8005dfa:	2b02      	cmp	r3, #2
 8005dfc:	d901      	bls.n	8005e02 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8005dfe:	2303      	movs	r3, #3
 8005e00:	e1dc      	b.n	80061bc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005e02:	4b2e      	ldr	r3, [pc, #184]	; (8005ebc <HAL_RCC_OscConfig+0x4a4>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d0f0      	beq.n	8005df0 <HAL_RCC_OscConfig+0x3d8>
 8005e0e:	e018      	b.n	8005e42 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005e10:	4b2a      	ldr	r3, [pc, #168]	; (8005ebc <HAL_RCC_OscConfig+0x4a4>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4a29      	ldr	r2, [pc, #164]	; (8005ebc <HAL_RCC_OscConfig+0x4a4>)
 8005e16:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e1a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005e1c:	f7fc fb30 	bl	8002480 <HAL_GetTick>
 8005e20:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005e22:	e008      	b.n	8005e36 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005e24:	f7fc fb2c 	bl	8002480 <HAL_GetTick>
 8005e28:	4602      	mov	r2, r0
 8005e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e2c:	1ad3      	subs	r3, r2, r3
 8005e2e:	2b02      	cmp	r3, #2
 8005e30:	d901      	bls.n	8005e36 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8005e32:	2303      	movs	r3, #3
 8005e34:	e1c2      	b.n	80061bc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005e36:	4b21      	ldr	r3, [pc, #132]	; (8005ebc <HAL_RCC_OscConfig+0x4a4>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d1f0      	bne.n	8005e24 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f003 0304 	and.w	r3, r3, #4
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	f000 8086 	beq.w	8005f5c <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005e50:	4b1b      	ldr	r3, [pc, #108]	; (8005ec0 <HAL_RCC_OscConfig+0x4a8>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a1a      	ldr	r2, [pc, #104]	; (8005ec0 <HAL_RCC_OscConfig+0x4a8>)
 8005e56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e5a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005e5c:	f7fc fb10 	bl	8002480 <HAL_GetTick>
 8005e60:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005e62:	e008      	b.n	8005e76 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e64:	f7fc fb0c 	bl	8002480 <HAL_GetTick>
 8005e68:	4602      	mov	r2, r0
 8005e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e6c:	1ad3      	subs	r3, r2, r3
 8005e6e:	2b64      	cmp	r3, #100	; 0x64
 8005e70:	d901      	bls.n	8005e76 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8005e72:	2303      	movs	r3, #3
 8005e74:	e1a2      	b.n	80061bc <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005e76:	4b12      	ldr	r3, [pc, #72]	; (8005ec0 <HAL_RCC_OscConfig+0x4a8>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d0f0      	beq.n	8005e64 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	689b      	ldr	r3, [r3, #8]
 8005e86:	2b01      	cmp	r3, #1
 8005e88:	d106      	bne.n	8005e98 <HAL_RCC_OscConfig+0x480>
 8005e8a:	4b0c      	ldr	r3, [pc, #48]	; (8005ebc <HAL_RCC_OscConfig+0x4a4>)
 8005e8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e8e:	4a0b      	ldr	r2, [pc, #44]	; (8005ebc <HAL_RCC_OscConfig+0x4a4>)
 8005e90:	f043 0301 	orr.w	r3, r3, #1
 8005e94:	6713      	str	r3, [r2, #112]	; 0x70
 8005e96:	e032      	b.n	8005efe <HAL_RCC_OscConfig+0x4e6>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	689b      	ldr	r3, [r3, #8]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d111      	bne.n	8005ec4 <HAL_RCC_OscConfig+0x4ac>
 8005ea0:	4b06      	ldr	r3, [pc, #24]	; (8005ebc <HAL_RCC_OscConfig+0x4a4>)
 8005ea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ea4:	4a05      	ldr	r2, [pc, #20]	; (8005ebc <HAL_RCC_OscConfig+0x4a4>)
 8005ea6:	f023 0301 	bic.w	r3, r3, #1
 8005eaa:	6713      	str	r3, [r2, #112]	; 0x70
 8005eac:	4b03      	ldr	r3, [pc, #12]	; (8005ebc <HAL_RCC_OscConfig+0x4a4>)
 8005eae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005eb0:	4a02      	ldr	r2, [pc, #8]	; (8005ebc <HAL_RCC_OscConfig+0x4a4>)
 8005eb2:	f023 0304 	bic.w	r3, r3, #4
 8005eb6:	6713      	str	r3, [r2, #112]	; 0x70
 8005eb8:	e021      	b.n	8005efe <HAL_RCC_OscConfig+0x4e6>
 8005eba:	bf00      	nop
 8005ebc:	58024400 	.word	0x58024400
 8005ec0:	58024800 	.word	0x58024800
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	689b      	ldr	r3, [r3, #8]
 8005ec8:	2b05      	cmp	r3, #5
 8005eca:	d10c      	bne.n	8005ee6 <HAL_RCC_OscConfig+0x4ce>
 8005ecc:	4b83      	ldr	r3, [pc, #524]	; (80060dc <HAL_RCC_OscConfig+0x6c4>)
 8005ece:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ed0:	4a82      	ldr	r2, [pc, #520]	; (80060dc <HAL_RCC_OscConfig+0x6c4>)
 8005ed2:	f043 0304 	orr.w	r3, r3, #4
 8005ed6:	6713      	str	r3, [r2, #112]	; 0x70
 8005ed8:	4b80      	ldr	r3, [pc, #512]	; (80060dc <HAL_RCC_OscConfig+0x6c4>)
 8005eda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005edc:	4a7f      	ldr	r2, [pc, #508]	; (80060dc <HAL_RCC_OscConfig+0x6c4>)
 8005ede:	f043 0301 	orr.w	r3, r3, #1
 8005ee2:	6713      	str	r3, [r2, #112]	; 0x70
 8005ee4:	e00b      	b.n	8005efe <HAL_RCC_OscConfig+0x4e6>
 8005ee6:	4b7d      	ldr	r3, [pc, #500]	; (80060dc <HAL_RCC_OscConfig+0x6c4>)
 8005ee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005eea:	4a7c      	ldr	r2, [pc, #496]	; (80060dc <HAL_RCC_OscConfig+0x6c4>)
 8005eec:	f023 0301 	bic.w	r3, r3, #1
 8005ef0:	6713      	str	r3, [r2, #112]	; 0x70
 8005ef2:	4b7a      	ldr	r3, [pc, #488]	; (80060dc <HAL_RCC_OscConfig+0x6c4>)
 8005ef4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ef6:	4a79      	ldr	r2, [pc, #484]	; (80060dc <HAL_RCC_OscConfig+0x6c4>)
 8005ef8:	f023 0304 	bic.w	r3, r3, #4
 8005efc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	689b      	ldr	r3, [r3, #8]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d015      	beq.n	8005f32 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f06:	f7fc fabb 	bl	8002480 <HAL_GetTick>
 8005f0a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005f0c:	e00a      	b.n	8005f24 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f0e:	f7fc fab7 	bl	8002480 <HAL_GetTick>
 8005f12:	4602      	mov	r2, r0
 8005f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f16:	1ad3      	subs	r3, r2, r3
 8005f18:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d901      	bls.n	8005f24 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8005f20:	2303      	movs	r3, #3
 8005f22:	e14b      	b.n	80061bc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005f24:	4b6d      	ldr	r3, [pc, #436]	; (80060dc <HAL_RCC_OscConfig+0x6c4>)
 8005f26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f28:	f003 0302 	and.w	r3, r3, #2
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d0ee      	beq.n	8005f0e <HAL_RCC_OscConfig+0x4f6>
 8005f30:	e014      	b.n	8005f5c <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f32:	f7fc faa5 	bl	8002480 <HAL_GetTick>
 8005f36:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005f38:	e00a      	b.n	8005f50 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f3a:	f7fc faa1 	bl	8002480 <HAL_GetTick>
 8005f3e:	4602      	mov	r2, r0
 8005f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f42:	1ad3      	subs	r3, r2, r3
 8005f44:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d901      	bls.n	8005f50 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8005f4c:	2303      	movs	r3, #3
 8005f4e:	e135      	b.n	80061bc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005f50:	4b62      	ldr	r3, [pc, #392]	; (80060dc <HAL_RCC_OscConfig+0x6c4>)
 8005f52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f54:	f003 0302 	and.w	r3, r3, #2
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d1ee      	bne.n	8005f3a <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	f000 812a 	beq.w	80061ba <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005f66:	4b5d      	ldr	r3, [pc, #372]	; (80060dc <HAL_RCC_OscConfig+0x6c4>)
 8005f68:	691b      	ldr	r3, [r3, #16]
 8005f6a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005f6e:	2b18      	cmp	r3, #24
 8005f70:	f000 80ba 	beq.w	80060e8 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f78:	2b02      	cmp	r3, #2
 8005f7a:	f040 8095 	bne.w	80060a8 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f7e:	4b57      	ldr	r3, [pc, #348]	; (80060dc <HAL_RCC_OscConfig+0x6c4>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a56      	ldr	r2, [pc, #344]	; (80060dc <HAL_RCC_OscConfig+0x6c4>)
 8005f84:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005f88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f8a:	f7fc fa79 	bl	8002480 <HAL_GetTick>
 8005f8e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005f90:	e008      	b.n	8005fa4 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f92:	f7fc fa75 	bl	8002480 <HAL_GetTick>
 8005f96:	4602      	mov	r2, r0
 8005f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f9a:	1ad3      	subs	r3, r2, r3
 8005f9c:	2b02      	cmp	r3, #2
 8005f9e:	d901      	bls.n	8005fa4 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8005fa0:	2303      	movs	r3, #3
 8005fa2:	e10b      	b.n	80061bc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005fa4:	4b4d      	ldr	r3, [pc, #308]	; (80060dc <HAL_RCC_OscConfig+0x6c4>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d1f0      	bne.n	8005f92 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005fb0:	4b4a      	ldr	r3, [pc, #296]	; (80060dc <HAL_RCC_OscConfig+0x6c4>)
 8005fb2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005fb4:	4b4a      	ldr	r3, [pc, #296]	; (80060e0 <HAL_RCC_OscConfig+0x6c8>)
 8005fb6:	4013      	ands	r3, r2
 8005fb8:	687a      	ldr	r2, [r7, #4]
 8005fba:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005fbc:	687a      	ldr	r2, [r7, #4]
 8005fbe:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005fc0:	0112      	lsls	r2, r2, #4
 8005fc2:	430a      	orrs	r2, r1
 8005fc4:	4945      	ldr	r1, [pc, #276]	; (80060dc <HAL_RCC_OscConfig+0x6c4>)
 8005fc6:	4313      	orrs	r3, r2
 8005fc8:	628b      	str	r3, [r1, #40]	; 0x28
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fce:	3b01      	subs	r3, #1
 8005fd0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fd8:	3b01      	subs	r3, #1
 8005fda:	025b      	lsls	r3, r3, #9
 8005fdc:	b29b      	uxth	r3, r3
 8005fde:	431a      	orrs	r2, r3
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fe4:	3b01      	subs	r3, #1
 8005fe6:	041b      	lsls	r3, r3, #16
 8005fe8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005fec:	431a      	orrs	r2, r3
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ff2:	3b01      	subs	r3, #1
 8005ff4:	061b      	lsls	r3, r3, #24
 8005ff6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005ffa:	4938      	ldr	r1, [pc, #224]	; (80060dc <HAL_RCC_OscConfig+0x6c4>)
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8006000:	4b36      	ldr	r3, [pc, #216]	; (80060dc <HAL_RCC_OscConfig+0x6c4>)
 8006002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006004:	4a35      	ldr	r2, [pc, #212]	; (80060dc <HAL_RCC_OscConfig+0x6c4>)
 8006006:	f023 0301 	bic.w	r3, r3, #1
 800600a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800600c:	4b33      	ldr	r3, [pc, #204]	; (80060dc <HAL_RCC_OscConfig+0x6c4>)
 800600e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006010:	4b34      	ldr	r3, [pc, #208]	; (80060e4 <HAL_RCC_OscConfig+0x6cc>)
 8006012:	4013      	ands	r3, r2
 8006014:	687a      	ldr	r2, [r7, #4]
 8006016:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006018:	00d2      	lsls	r2, r2, #3
 800601a:	4930      	ldr	r1, [pc, #192]	; (80060dc <HAL_RCC_OscConfig+0x6c4>)
 800601c:	4313      	orrs	r3, r2
 800601e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006020:	4b2e      	ldr	r3, [pc, #184]	; (80060dc <HAL_RCC_OscConfig+0x6c4>)
 8006022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006024:	f023 020c 	bic.w	r2, r3, #12
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800602c:	492b      	ldr	r1, [pc, #172]	; (80060dc <HAL_RCC_OscConfig+0x6c4>)
 800602e:	4313      	orrs	r3, r2
 8006030:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006032:	4b2a      	ldr	r3, [pc, #168]	; (80060dc <HAL_RCC_OscConfig+0x6c4>)
 8006034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006036:	f023 0202 	bic.w	r2, r3, #2
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800603e:	4927      	ldr	r1, [pc, #156]	; (80060dc <HAL_RCC_OscConfig+0x6c4>)
 8006040:	4313      	orrs	r3, r2
 8006042:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006044:	4b25      	ldr	r3, [pc, #148]	; (80060dc <HAL_RCC_OscConfig+0x6c4>)
 8006046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006048:	4a24      	ldr	r2, [pc, #144]	; (80060dc <HAL_RCC_OscConfig+0x6c4>)
 800604a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800604e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006050:	4b22      	ldr	r3, [pc, #136]	; (80060dc <HAL_RCC_OscConfig+0x6c4>)
 8006052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006054:	4a21      	ldr	r2, [pc, #132]	; (80060dc <HAL_RCC_OscConfig+0x6c4>)
 8006056:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800605a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800605c:	4b1f      	ldr	r3, [pc, #124]	; (80060dc <HAL_RCC_OscConfig+0x6c4>)
 800605e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006060:	4a1e      	ldr	r2, [pc, #120]	; (80060dc <HAL_RCC_OscConfig+0x6c4>)
 8006062:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006066:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8006068:	4b1c      	ldr	r3, [pc, #112]	; (80060dc <HAL_RCC_OscConfig+0x6c4>)
 800606a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800606c:	4a1b      	ldr	r2, [pc, #108]	; (80060dc <HAL_RCC_OscConfig+0x6c4>)
 800606e:	f043 0301 	orr.w	r3, r3, #1
 8006072:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006074:	4b19      	ldr	r3, [pc, #100]	; (80060dc <HAL_RCC_OscConfig+0x6c4>)
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4a18      	ldr	r2, [pc, #96]	; (80060dc <HAL_RCC_OscConfig+0x6c4>)
 800607a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800607e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006080:	f7fc f9fe 	bl	8002480 <HAL_GetTick>
 8006084:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006086:	e008      	b.n	800609a <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006088:	f7fc f9fa 	bl	8002480 <HAL_GetTick>
 800608c:	4602      	mov	r2, r0
 800608e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006090:	1ad3      	subs	r3, r2, r3
 8006092:	2b02      	cmp	r3, #2
 8006094:	d901      	bls.n	800609a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8006096:	2303      	movs	r3, #3
 8006098:	e090      	b.n	80061bc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800609a:	4b10      	ldr	r3, [pc, #64]	; (80060dc <HAL_RCC_OscConfig+0x6c4>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d0f0      	beq.n	8006088 <HAL_RCC_OscConfig+0x670>
 80060a6:	e088      	b.n	80061ba <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060a8:	4b0c      	ldr	r3, [pc, #48]	; (80060dc <HAL_RCC_OscConfig+0x6c4>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a0b      	ldr	r2, [pc, #44]	; (80060dc <HAL_RCC_OscConfig+0x6c4>)
 80060ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80060b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060b4:	f7fc f9e4 	bl	8002480 <HAL_GetTick>
 80060b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80060ba:	e008      	b.n	80060ce <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060bc:	f7fc f9e0 	bl	8002480 <HAL_GetTick>
 80060c0:	4602      	mov	r2, r0
 80060c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c4:	1ad3      	subs	r3, r2, r3
 80060c6:	2b02      	cmp	r3, #2
 80060c8:	d901      	bls.n	80060ce <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80060ca:	2303      	movs	r3, #3
 80060cc:	e076      	b.n	80061bc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80060ce:	4b03      	ldr	r3, [pc, #12]	; (80060dc <HAL_RCC_OscConfig+0x6c4>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d1f0      	bne.n	80060bc <HAL_RCC_OscConfig+0x6a4>
 80060da:	e06e      	b.n	80061ba <HAL_RCC_OscConfig+0x7a2>
 80060dc:	58024400 	.word	0x58024400
 80060e0:	fffffc0c 	.word	0xfffffc0c
 80060e4:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80060e8:	4b36      	ldr	r3, [pc, #216]	; (80061c4 <HAL_RCC_OscConfig+0x7ac>)
 80060ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060ec:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80060ee:	4b35      	ldr	r3, [pc, #212]	; (80061c4 <HAL_RCC_OscConfig+0x7ac>)
 80060f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060f2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060f8:	2b01      	cmp	r3, #1
 80060fa:	d031      	beq.n	8006160 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80060fc:	693b      	ldr	r3, [r7, #16]
 80060fe:	f003 0203 	and.w	r2, r3, #3
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006106:	429a      	cmp	r2, r3
 8006108:	d12a      	bne.n	8006160 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800610a:	693b      	ldr	r3, [r7, #16]
 800610c:	091b      	lsrs	r3, r3, #4
 800610e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006116:	429a      	cmp	r2, r3
 8006118:	d122      	bne.n	8006160 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006124:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006126:	429a      	cmp	r2, r3
 8006128:	d11a      	bne.n	8006160 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	0a5b      	lsrs	r3, r3, #9
 800612e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006136:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006138:	429a      	cmp	r2, r3
 800613a:	d111      	bne.n	8006160 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	0c1b      	lsrs	r3, r3, #16
 8006140:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006148:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800614a:	429a      	cmp	r2, r3
 800614c:	d108      	bne.n	8006160 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	0e1b      	lsrs	r3, r3, #24
 8006152:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800615a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800615c:	429a      	cmp	r2, r3
 800615e:	d001      	beq.n	8006164 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8006160:	2301      	movs	r3, #1
 8006162:	e02b      	b.n	80061bc <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006164:	4b17      	ldr	r3, [pc, #92]	; (80061c4 <HAL_RCC_OscConfig+0x7ac>)
 8006166:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006168:	08db      	lsrs	r3, r3, #3
 800616a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800616e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006174:	693a      	ldr	r2, [r7, #16]
 8006176:	429a      	cmp	r2, r3
 8006178:	d01f      	beq.n	80061ba <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800617a:	4b12      	ldr	r3, [pc, #72]	; (80061c4 <HAL_RCC_OscConfig+0x7ac>)
 800617c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800617e:	4a11      	ldr	r2, [pc, #68]	; (80061c4 <HAL_RCC_OscConfig+0x7ac>)
 8006180:	f023 0301 	bic.w	r3, r3, #1
 8006184:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006186:	f7fc f97b 	bl	8002480 <HAL_GetTick>
 800618a:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800618c:	bf00      	nop
 800618e:	f7fc f977 	bl	8002480 <HAL_GetTick>
 8006192:	4602      	mov	r2, r0
 8006194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006196:	4293      	cmp	r3, r2
 8006198:	d0f9      	beq.n	800618e <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800619a:	4b0a      	ldr	r3, [pc, #40]	; (80061c4 <HAL_RCC_OscConfig+0x7ac>)
 800619c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800619e:	4b0a      	ldr	r3, [pc, #40]	; (80061c8 <HAL_RCC_OscConfig+0x7b0>)
 80061a0:	4013      	ands	r3, r2
 80061a2:	687a      	ldr	r2, [r7, #4]
 80061a4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80061a6:	00d2      	lsls	r2, r2, #3
 80061a8:	4906      	ldr	r1, [pc, #24]	; (80061c4 <HAL_RCC_OscConfig+0x7ac>)
 80061aa:	4313      	orrs	r3, r2
 80061ac:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80061ae:	4b05      	ldr	r3, [pc, #20]	; (80061c4 <HAL_RCC_OscConfig+0x7ac>)
 80061b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061b2:	4a04      	ldr	r2, [pc, #16]	; (80061c4 <HAL_RCC_OscConfig+0x7ac>)
 80061b4:	f043 0301 	orr.w	r3, r3, #1
 80061b8:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80061ba:	2300      	movs	r3, #0
}
 80061bc:	4618      	mov	r0, r3
 80061be:	3730      	adds	r7, #48	; 0x30
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bd80      	pop	{r7, pc}
 80061c4:	58024400 	.word	0x58024400
 80061c8:	ffff0007 	.word	0xffff0007

080061cc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b086      	sub	sp, #24
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
 80061d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d101      	bne.n	80061e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80061dc:	2301      	movs	r3, #1
 80061de:	e19c      	b.n	800651a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80061e0:	4b8a      	ldr	r3, [pc, #552]	; (800640c <HAL_RCC_ClockConfig+0x240>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f003 030f 	and.w	r3, r3, #15
 80061e8:	683a      	ldr	r2, [r7, #0]
 80061ea:	429a      	cmp	r2, r3
 80061ec:	d910      	bls.n	8006210 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061ee:	4b87      	ldr	r3, [pc, #540]	; (800640c <HAL_RCC_ClockConfig+0x240>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f023 020f 	bic.w	r2, r3, #15
 80061f6:	4985      	ldr	r1, [pc, #532]	; (800640c <HAL_RCC_ClockConfig+0x240>)
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	4313      	orrs	r3, r2
 80061fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80061fe:	4b83      	ldr	r3, [pc, #524]	; (800640c <HAL_RCC_ClockConfig+0x240>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f003 030f 	and.w	r3, r3, #15
 8006206:	683a      	ldr	r2, [r7, #0]
 8006208:	429a      	cmp	r2, r3
 800620a:	d001      	beq.n	8006210 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800620c:	2301      	movs	r3, #1
 800620e:	e184      	b.n	800651a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f003 0304 	and.w	r3, r3, #4
 8006218:	2b00      	cmp	r3, #0
 800621a:	d010      	beq.n	800623e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	691a      	ldr	r2, [r3, #16]
 8006220:	4b7b      	ldr	r3, [pc, #492]	; (8006410 <HAL_RCC_ClockConfig+0x244>)
 8006222:	699b      	ldr	r3, [r3, #24]
 8006224:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006228:	429a      	cmp	r2, r3
 800622a:	d908      	bls.n	800623e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800622c:	4b78      	ldr	r3, [pc, #480]	; (8006410 <HAL_RCC_ClockConfig+0x244>)
 800622e:	699b      	ldr	r3, [r3, #24]
 8006230:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	691b      	ldr	r3, [r3, #16]
 8006238:	4975      	ldr	r1, [pc, #468]	; (8006410 <HAL_RCC_ClockConfig+0x244>)
 800623a:	4313      	orrs	r3, r2
 800623c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f003 0308 	and.w	r3, r3, #8
 8006246:	2b00      	cmp	r3, #0
 8006248:	d010      	beq.n	800626c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	695a      	ldr	r2, [r3, #20]
 800624e:	4b70      	ldr	r3, [pc, #448]	; (8006410 <HAL_RCC_ClockConfig+0x244>)
 8006250:	69db      	ldr	r3, [r3, #28]
 8006252:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006256:	429a      	cmp	r2, r3
 8006258:	d908      	bls.n	800626c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800625a:	4b6d      	ldr	r3, [pc, #436]	; (8006410 <HAL_RCC_ClockConfig+0x244>)
 800625c:	69db      	ldr	r3, [r3, #28]
 800625e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	695b      	ldr	r3, [r3, #20]
 8006266:	496a      	ldr	r1, [pc, #424]	; (8006410 <HAL_RCC_ClockConfig+0x244>)
 8006268:	4313      	orrs	r3, r2
 800626a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f003 0310 	and.w	r3, r3, #16
 8006274:	2b00      	cmp	r3, #0
 8006276:	d010      	beq.n	800629a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	699a      	ldr	r2, [r3, #24]
 800627c:	4b64      	ldr	r3, [pc, #400]	; (8006410 <HAL_RCC_ClockConfig+0x244>)
 800627e:	69db      	ldr	r3, [r3, #28]
 8006280:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006284:	429a      	cmp	r2, r3
 8006286:	d908      	bls.n	800629a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006288:	4b61      	ldr	r3, [pc, #388]	; (8006410 <HAL_RCC_ClockConfig+0x244>)
 800628a:	69db      	ldr	r3, [r3, #28]
 800628c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	699b      	ldr	r3, [r3, #24]
 8006294:	495e      	ldr	r1, [pc, #376]	; (8006410 <HAL_RCC_ClockConfig+0x244>)
 8006296:	4313      	orrs	r3, r2
 8006298:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f003 0320 	and.w	r3, r3, #32
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d010      	beq.n	80062c8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	69da      	ldr	r2, [r3, #28]
 80062aa:	4b59      	ldr	r3, [pc, #356]	; (8006410 <HAL_RCC_ClockConfig+0x244>)
 80062ac:	6a1b      	ldr	r3, [r3, #32]
 80062ae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80062b2:	429a      	cmp	r2, r3
 80062b4:	d908      	bls.n	80062c8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80062b6:	4b56      	ldr	r3, [pc, #344]	; (8006410 <HAL_RCC_ClockConfig+0x244>)
 80062b8:	6a1b      	ldr	r3, [r3, #32]
 80062ba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	69db      	ldr	r3, [r3, #28]
 80062c2:	4953      	ldr	r1, [pc, #332]	; (8006410 <HAL_RCC_ClockConfig+0x244>)
 80062c4:	4313      	orrs	r3, r2
 80062c6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f003 0302 	and.w	r3, r3, #2
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d010      	beq.n	80062f6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	68da      	ldr	r2, [r3, #12]
 80062d8:	4b4d      	ldr	r3, [pc, #308]	; (8006410 <HAL_RCC_ClockConfig+0x244>)
 80062da:	699b      	ldr	r3, [r3, #24]
 80062dc:	f003 030f 	and.w	r3, r3, #15
 80062e0:	429a      	cmp	r2, r3
 80062e2:	d908      	bls.n	80062f6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80062e4:	4b4a      	ldr	r3, [pc, #296]	; (8006410 <HAL_RCC_ClockConfig+0x244>)
 80062e6:	699b      	ldr	r3, [r3, #24]
 80062e8:	f023 020f 	bic.w	r2, r3, #15
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	68db      	ldr	r3, [r3, #12]
 80062f0:	4947      	ldr	r1, [pc, #284]	; (8006410 <HAL_RCC_ClockConfig+0x244>)
 80062f2:	4313      	orrs	r3, r2
 80062f4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f003 0301 	and.w	r3, r3, #1
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d055      	beq.n	80063ae <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006302:	4b43      	ldr	r3, [pc, #268]	; (8006410 <HAL_RCC_ClockConfig+0x244>)
 8006304:	699b      	ldr	r3, [r3, #24]
 8006306:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	689b      	ldr	r3, [r3, #8]
 800630e:	4940      	ldr	r1, [pc, #256]	; (8006410 <HAL_RCC_ClockConfig+0x244>)
 8006310:	4313      	orrs	r3, r2
 8006312:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	685b      	ldr	r3, [r3, #4]
 8006318:	2b02      	cmp	r3, #2
 800631a:	d107      	bne.n	800632c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800631c:	4b3c      	ldr	r3, [pc, #240]	; (8006410 <HAL_RCC_ClockConfig+0x244>)
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006324:	2b00      	cmp	r3, #0
 8006326:	d121      	bne.n	800636c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006328:	2301      	movs	r3, #1
 800632a:	e0f6      	b.n	800651a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	685b      	ldr	r3, [r3, #4]
 8006330:	2b03      	cmp	r3, #3
 8006332:	d107      	bne.n	8006344 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006334:	4b36      	ldr	r3, [pc, #216]	; (8006410 <HAL_RCC_ClockConfig+0x244>)
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800633c:	2b00      	cmp	r3, #0
 800633e:	d115      	bne.n	800636c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006340:	2301      	movs	r3, #1
 8006342:	e0ea      	b.n	800651a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	685b      	ldr	r3, [r3, #4]
 8006348:	2b01      	cmp	r3, #1
 800634a:	d107      	bne.n	800635c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800634c:	4b30      	ldr	r3, [pc, #192]	; (8006410 <HAL_RCC_ClockConfig+0x244>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006354:	2b00      	cmp	r3, #0
 8006356:	d109      	bne.n	800636c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006358:	2301      	movs	r3, #1
 800635a:	e0de      	b.n	800651a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800635c:	4b2c      	ldr	r3, [pc, #176]	; (8006410 <HAL_RCC_ClockConfig+0x244>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f003 0304 	and.w	r3, r3, #4
 8006364:	2b00      	cmp	r3, #0
 8006366:	d101      	bne.n	800636c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006368:	2301      	movs	r3, #1
 800636a:	e0d6      	b.n	800651a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800636c:	4b28      	ldr	r3, [pc, #160]	; (8006410 <HAL_RCC_ClockConfig+0x244>)
 800636e:	691b      	ldr	r3, [r3, #16]
 8006370:	f023 0207 	bic.w	r2, r3, #7
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	685b      	ldr	r3, [r3, #4]
 8006378:	4925      	ldr	r1, [pc, #148]	; (8006410 <HAL_RCC_ClockConfig+0x244>)
 800637a:	4313      	orrs	r3, r2
 800637c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800637e:	f7fc f87f 	bl	8002480 <HAL_GetTick>
 8006382:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006384:	e00a      	b.n	800639c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006386:	f7fc f87b 	bl	8002480 <HAL_GetTick>
 800638a:	4602      	mov	r2, r0
 800638c:	697b      	ldr	r3, [r7, #20]
 800638e:	1ad3      	subs	r3, r2, r3
 8006390:	f241 3288 	movw	r2, #5000	; 0x1388
 8006394:	4293      	cmp	r3, r2
 8006396:	d901      	bls.n	800639c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006398:	2303      	movs	r3, #3
 800639a:	e0be      	b.n	800651a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800639c:	4b1c      	ldr	r3, [pc, #112]	; (8006410 <HAL_RCC_ClockConfig+0x244>)
 800639e:	691b      	ldr	r3, [r3, #16]
 80063a0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	685b      	ldr	r3, [r3, #4]
 80063a8:	00db      	lsls	r3, r3, #3
 80063aa:	429a      	cmp	r2, r3
 80063ac:	d1eb      	bne.n	8006386 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f003 0302 	and.w	r3, r3, #2
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d010      	beq.n	80063dc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	68da      	ldr	r2, [r3, #12]
 80063be:	4b14      	ldr	r3, [pc, #80]	; (8006410 <HAL_RCC_ClockConfig+0x244>)
 80063c0:	699b      	ldr	r3, [r3, #24]
 80063c2:	f003 030f 	and.w	r3, r3, #15
 80063c6:	429a      	cmp	r2, r3
 80063c8:	d208      	bcs.n	80063dc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80063ca:	4b11      	ldr	r3, [pc, #68]	; (8006410 <HAL_RCC_ClockConfig+0x244>)
 80063cc:	699b      	ldr	r3, [r3, #24]
 80063ce:	f023 020f 	bic.w	r2, r3, #15
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	68db      	ldr	r3, [r3, #12]
 80063d6:	490e      	ldr	r1, [pc, #56]	; (8006410 <HAL_RCC_ClockConfig+0x244>)
 80063d8:	4313      	orrs	r3, r2
 80063da:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80063dc:	4b0b      	ldr	r3, [pc, #44]	; (800640c <HAL_RCC_ClockConfig+0x240>)
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f003 030f 	and.w	r3, r3, #15
 80063e4:	683a      	ldr	r2, [r7, #0]
 80063e6:	429a      	cmp	r2, r3
 80063e8:	d214      	bcs.n	8006414 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063ea:	4b08      	ldr	r3, [pc, #32]	; (800640c <HAL_RCC_ClockConfig+0x240>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f023 020f 	bic.w	r2, r3, #15
 80063f2:	4906      	ldr	r1, [pc, #24]	; (800640c <HAL_RCC_ClockConfig+0x240>)
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	4313      	orrs	r3, r2
 80063f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80063fa:	4b04      	ldr	r3, [pc, #16]	; (800640c <HAL_RCC_ClockConfig+0x240>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f003 030f 	and.w	r3, r3, #15
 8006402:	683a      	ldr	r2, [r7, #0]
 8006404:	429a      	cmp	r2, r3
 8006406:	d005      	beq.n	8006414 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006408:	2301      	movs	r3, #1
 800640a:	e086      	b.n	800651a <HAL_RCC_ClockConfig+0x34e>
 800640c:	52002000 	.word	0x52002000
 8006410:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f003 0304 	and.w	r3, r3, #4
 800641c:	2b00      	cmp	r3, #0
 800641e:	d010      	beq.n	8006442 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	691a      	ldr	r2, [r3, #16]
 8006424:	4b3f      	ldr	r3, [pc, #252]	; (8006524 <HAL_RCC_ClockConfig+0x358>)
 8006426:	699b      	ldr	r3, [r3, #24]
 8006428:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800642c:	429a      	cmp	r2, r3
 800642e:	d208      	bcs.n	8006442 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006430:	4b3c      	ldr	r3, [pc, #240]	; (8006524 <HAL_RCC_ClockConfig+0x358>)
 8006432:	699b      	ldr	r3, [r3, #24]
 8006434:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	691b      	ldr	r3, [r3, #16]
 800643c:	4939      	ldr	r1, [pc, #228]	; (8006524 <HAL_RCC_ClockConfig+0x358>)
 800643e:	4313      	orrs	r3, r2
 8006440:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f003 0308 	and.w	r3, r3, #8
 800644a:	2b00      	cmp	r3, #0
 800644c:	d010      	beq.n	8006470 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	695a      	ldr	r2, [r3, #20]
 8006452:	4b34      	ldr	r3, [pc, #208]	; (8006524 <HAL_RCC_ClockConfig+0x358>)
 8006454:	69db      	ldr	r3, [r3, #28]
 8006456:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800645a:	429a      	cmp	r2, r3
 800645c:	d208      	bcs.n	8006470 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800645e:	4b31      	ldr	r3, [pc, #196]	; (8006524 <HAL_RCC_ClockConfig+0x358>)
 8006460:	69db      	ldr	r3, [r3, #28]
 8006462:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	695b      	ldr	r3, [r3, #20]
 800646a:	492e      	ldr	r1, [pc, #184]	; (8006524 <HAL_RCC_ClockConfig+0x358>)
 800646c:	4313      	orrs	r3, r2
 800646e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f003 0310 	and.w	r3, r3, #16
 8006478:	2b00      	cmp	r3, #0
 800647a:	d010      	beq.n	800649e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	699a      	ldr	r2, [r3, #24]
 8006480:	4b28      	ldr	r3, [pc, #160]	; (8006524 <HAL_RCC_ClockConfig+0x358>)
 8006482:	69db      	ldr	r3, [r3, #28]
 8006484:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006488:	429a      	cmp	r2, r3
 800648a:	d208      	bcs.n	800649e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800648c:	4b25      	ldr	r3, [pc, #148]	; (8006524 <HAL_RCC_ClockConfig+0x358>)
 800648e:	69db      	ldr	r3, [r3, #28]
 8006490:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	699b      	ldr	r3, [r3, #24]
 8006498:	4922      	ldr	r1, [pc, #136]	; (8006524 <HAL_RCC_ClockConfig+0x358>)
 800649a:	4313      	orrs	r3, r2
 800649c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f003 0320 	and.w	r3, r3, #32
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d010      	beq.n	80064cc <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	69da      	ldr	r2, [r3, #28]
 80064ae:	4b1d      	ldr	r3, [pc, #116]	; (8006524 <HAL_RCC_ClockConfig+0x358>)
 80064b0:	6a1b      	ldr	r3, [r3, #32]
 80064b2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80064b6:	429a      	cmp	r2, r3
 80064b8:	d208      	bcs.n	80064cc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80064ba:	4b1a      	ldr	r3, [pc, #104]	; (8006524 <HAL_RCC_ClockConfig+0x358>)
 80064bc:	6a1b      	ldr	r3, [r3, #32]
 80064be:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	69db      	ldr	r3, [r3, #28]
 80064c6:	4917      	ldr	r1, [pc, #92]	; (8006524 <HAL_RCC_ClockConfig+0x358>)
 80064c8:	4313      	orrs	r3, r2
 80064ca:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80064cc:	f000 f834 	bl	8006538 <HAL_RCC_GetSysClockFreq>
 80064d0:	4602      	mov	r2, r0
 80064d2:	4b14      	ldr	r3, [pc, #80]	; (8006524 <HAL_RCC_ClockConfig+0x358>)
 80064d4:	699b      	ldr	r3, [r3, #24]
 80064d6:	0a1b      	lsrs	r3, r3, #8
 80064d8:	f003 030f 	and.w	r3, r3, #15
 80064dc:	4912      	ldr	r1, [pc, #72]	; (8006528 <HAL_RCC_ClockConfig+0x35c>)
 80064de:	5ccb      	ldrb	r3, [r1, r3]
 80064e0:	f003 031f 	and.w	r3, r3, #31
 80064e4:	fa22 f303 	lsr.w	r3, r2, r3
 80064e8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80064ea:	4b0e      	ldr	r3, [pc, #56]	; (8006524 <HAL_RCC_ClockConfig+0x358>)
 80064ec:	699b      	ldr	r3, [r3, #24]
 80064ee:	f003 030f 	and.w	r3, r3, #15
 80064f2:	4a0d      	ldr	r2, [pc, #52]	; (8006528 <HAL_RCC_ClockConfig+0x35c>)
 80064f4:	5cd3      	ldrb	r3, [r2, r3]
 80064f6:	f003 031f 	and.w	r3, r3, #31
 80064fa:	693a      	ldr	r2, [r7, #16]
 80064fc:	fa22 f303 	lsr.w	r3, r2, r3
 8006500:	4a0a      	ldr	r2, [pc, #40]	; (800652c <HAL_RCC_ClockConfig+0x360>)
 8006502:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006504:	4a0a      	ldr	r2, [pc, #40]	; (8006530 <HAL_RCC_ClockConfig+0x364>)
 8006506:	693b      	ldr	r3, [r7, #16]
 8006508:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800650a:	4b0a      	ldr	r3, [pc, #40]	; (8006534 <HAL_RCC_ClockConfig+0x368>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4618      	mov	r0, r3
 8006510:	f7fb ff6c 	bl	80023ec <HAL_InitTick>
 8006514:	4603      	mov	r3, r0
 8006516:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006518:	7bfb      	ldrb	r3, [r7, #15]
}
 800651a:	4618      	mov	r0, r3
 800651c:	3718      	adds	r7, #24
 800651e:	46bd      	mov	sp, r7
 8006520:	bd80      	pop	{r7, pc}
 8006522:	bf00      	nop
 8006524:	58024400 	.word	0x58024400
 8006528:	0800b3d8 	.word	0x0800b3d8
 800652c:	24000004 	.word	0x24000004
 8006530:	24000000 	.word	0x24000000
 8006534:	24000008 	.word	0x24000008

08006538 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006538:	b480      	push	{r7}
 800653a:	b089      	sub	sp, #36	; 0x24
 800653c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800653e:	4bb3      	ldr	r3, [pc, #716]	; (800680c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006540:	691b      	ldr	r3, [r3, #16]
 8006542:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006546:	2b18      	cmp	r3, #24
 8006548:	f200 8155 	bhi.w	80067f6 <HAL_RCC_GetSysClockFreq+0x2be>
 800654c:	a201      	add	r2, pc, #4	; (adr r2, 8006554 <HAL_RCC_GetSysClockFreq+0x1c>)
 800654e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006552:	bf00      	nop
 8006554:	080065b9 	.word	0x080065b9
 8006558:	080067f7 	.word	0x080067f7
 800655c:	080067f7 	.word	0x080067f7
 8006560:	080067f7 	.word	0x080067f7
 8006564:	080067f7 	.word	0x080067f7
 8006568:	080067f7 	.word	0x080067f7
 800656c:	080067f7 	.word	0x080067f7
 8006570:	080067f7 	.word	0x080067f7
 8006574:	080065df 	.word	0x080065df
 8006578:	080067f7 	.word	0x080067f7
 800657c:	080067f7 	.word	0x080067f7
 8006580:	080067f7 	.word	0x080067f7
 8006584:	080067f7 	.word	0x080067f7
 8006588:	080067f7 	.word	0x080067f7
 800658c:	080067f7 	.word	0x080067f7
 8006590:	080067f7 	.word	0x080067f7
 8006594:	080065e5 	.word	0x080065e5
 8006598:	080067f7 	.word	0x080067f7
 800659c:	080067f7 	.word	0x080067f7
 80065a0:	080067f7 	.word	0x080067f7
 80065a4:	080067f7 	.word	0x080067f7
 80065a8:	080067f7 	.word	0x080067f7
 80065ac:	080067f7 	.word	0x080067f7
 80065b0:	080067f7 	.word	0x080067f7
 80065b4:	080065eb 	.word	0x080065eb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80065b8:	4b94      	ldr	r3, [pc, #592]	; (800680c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f003 0320 	and.w	r3, r3, #32
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d009      	beq.n	80065d8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80065c4:	4b91      	ldr	r3, [pc, #580]	; (800680c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	08db      	lsrs	r3, r3, #3
 80065ca:	f003 0303 	and.w	r3, r3, #3
 80065ce:	4a90      	ldr	r2, [pc, #576]	; (8006810 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80065d0:	fa22 f303 	lsr.w	r3, r2, r3
 80065d4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80065d6:	e111      	b.n	80067fc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80065d8:	4b8d      	ldr	r3, [pc, #564]	; (8006810 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80065da:	61bb      	str	r3, [r7, #24]
      break;
 80065dc:	e10e      	b.n	80067fc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80065de:	4b8d      	ldr	r3, [pc, #564]	; (8006814 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80065e0:	61bb      	str	r3, [r7, #24]
      break;
 80065e2:	e10b      	b.n	80067fc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80065e4:	4b8c      	ldr	r3, [pc, #560]	; (8006818 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80065e6:	61bb      	str	r3, [r7, #24]
      break;
 80065e8:	e108      	b.n	80067fc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80065ea:	4b88      	ldr	r3, [pc, #544]	; (800680c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80065ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065ee:	f003 0303 	and.w	r3, r3, #3
 80065f2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80065f4:	4b85      	ldr	r3, [pc, #532]	; (800680c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80065f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065f8:	091b      	lsrs	r3, r3, #4
 80065fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80065fe:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006600:	4b82      	ldr	r3, [pc, #520]	; (800680c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006604:	f003 0301 	and.w	r3, r3, #1
 8006608:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800660a:	4b80      	ldr	r3, [pc, #512]	; (800680c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800660c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800660e:	08db      	lsrs	r3, r3, #3
 8006610:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006614:	68fa      	ldr	r2, [r7, #12]
 8006616:	fb02 f303 	mul.w	r3, r2, r3
 800661a:	ee07 3a90 	vmov	s15, r3
 800661e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006622:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	2b00      	cmp	r3, #0
 800662a:	f000 80e1 	beq.w	80067f0 <HAL_RCC_GetSysClockFreq+0x2b8>
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	2b02      	cmp	r3, #2
 8006632:	f000 8083 	beq.w	800673c <HAL_RCC_GetSysClockFreq+0x204>
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	2b02      	cmp	r3, #2
 800663a:	f200 80a1 	bhi.w	8006780 <HAL_RCC_GetSysClockFreq+0x248>
 800663e:	697b      	ldr	r3, [r7, #20]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d003      	beq.n	800664c <HAL_RCC_GetSysClockFreq+0x114>
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	2b01      	cmp	r3, #1
 8006648:	d056      	beq.n	80066f8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800664a:	e099      	b.n	8006780 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800664c:	4b6f      	ldr	r3, [pc, #444]	; (800680c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f003 0320 	and.w	r3, r3, #32
 8006654:	2b00      	cmp	r3, #0
 8006656:	d02d      	beq.n	80066b4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006658:	4b6c      	ldr	r3, [pc, #432]	; (800680c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	08db      	lsrs	r3, r3, #3
 800665e:	f003 0303 	and.w	r3, r3, #3
 8006662:	4a6b      	ldr	r2, [pc, #428]	; (8006810 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006664:	fa22 f303 	lsr.w	r3, r2, r3
 8006668:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	ee07 3a90 	vmov	s15, r3
 8006670:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006674:	693b      	ldr	r3, [r7, #16]
 8006676:	ee07 3a90 	vmov	s15, r3
 800667a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800667e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006682:	4b62      	ldr	r3, [pc, #392]	; (800680c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006686:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800668a:	ee07 3a90 	vmov	s15, r3
 800668e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006692:	ed97 6a02 	vldr	s12, [r7, #8]
 8006696:	eddf 5a61 	vldr	s11, [pc, #388]	; 800681c <HAL_RCC_GetSysClockFreq+0x2e4>
 800669a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800669e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80066a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066ae:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80066b2:	e087      	b.n	80067c4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80066b4:	693b      	ldr	r3, [r7, #16]
 80066b6:	ee07 3a90 	vmov	s15, r3
 80066ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066be:	eddf 6a58 	vldr	s13, [pc, #352]	; 8006820 <HAL_RCC_GetSysClockFreq+0x2e8>
 80066c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066c6:	4b51      	ldr	r3, [pc, #324]	; (800680c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80066c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066ce:	ee07 3a90 	vmov	s15, r3
 80066d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80066da:	eddf 5a50 	vldr	s11, [pc, #320]	; 800681c <HAL_RCC_GetSysClockFreq+0x2e4>
 80066de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80066ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066f2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80066f6:	e065      	b.n	80067c4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80066f8:	693b      	ldr	r3, [r7, #16]
 80066fa:	ee07 3a90 	vmov	s15, r3
 80066fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006702:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006824 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006706:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800670a:	4b40      	ldr	r3, [pc, #256]	; (800680c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800670c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800670e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006712:	ee07 3a90 	vmov	s15, r3
 8006716:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800671a:	ed97 6a02 	vldr	s12, [r7, #8]
 800671e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800681c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006722:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006726:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800672a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800672e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006732:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006736:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800673a:	e043      	b.n	80067c4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800673c:	693b      	ldr	r3, [r7, #16]
 800673e:	ee07 3a90 	vmov	s15, r3
 8006742:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006746:	eddf 6a38 	vldr	s13, [pc, #224]	; 8006828 <HAL_RCC_GetSysClockFreq+0x2f0>
 800674a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800674e:	4b2f      	ldr	r3, [pc, #188]	; (800680c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006752:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006756:	ee07 3a90 	vmov	s15, r3
 800675a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800675e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006762:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800681c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006766:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800676a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800676e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006772:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006776:	ee67 7a27 	vmul.f32	s15, s14, s15
 800677a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800677e:	e021      	b.n	80067c4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006780:	693b      	ldr	r3, [r7, #16]
 8006782:	ee07 3a90 	vmov	s15, r3
 8006786:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800678a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8006824 <HAL_RCC_GetSysClockFreq+0x2ec>
 800678e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006792:	4b1e      	ldr	r3, [pc, #120]	; (800680c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006796:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800679a:	ee07 3a90 	vmov	s15, r3
 800679e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80067a6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800681c <HAL_RCC_GetSysClockFreq+0x2e4>
 80067aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80067b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067be:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80067c2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80067c4:	4b11      	ldr	r3, [pc, #68]	; (800680c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80067c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067c8:	0a5b      	lsrs	r3, r3, #9
 80067ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80067ce:	3301      	adds	r3, #1
 80067d0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	ee07 3a90 	vmov	s15, r3
 80067d8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80067dc:	edd7 6a07 	vldr	s13, [r7, #28]
 80067e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80067e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80067e8:	ee17 3a90 	vmov	r3, s15
 80067ec:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80067ee:	e005      	b.n	80067fc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80067f0:	2300      	movs	r3, #0
 80067f2:	61bb      	str	r3, [r7, #24]
      break;
 80067f4:	e002      	b.n	80067fc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80067f6:	4b07      	ldr	r3, [pc, #28]	; (8006814 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80067f8:	61bb      	str	r3, [r7, #24]
      break;
 80067fa:	bf00      	nop
  }

  return sysclockfreq;
 80067fc:	69bb      	ldr	r3, [r7, #24]
}
 80067fe:	4618      	mov	r0, r3
 8006800:	3724      	adds	r7, #36	; 0x24
 8006802:	46bd      	mov	sp, r7
 8006804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006808:	4770      	bx	lr
 800680a:	bf00      	nop
 800680c:	58024400 	.word	0x58024400
 8006810:	03d09000 	.word	0x03d09000
 8006814:	003d0900 	.word	0x003d0900
 8006818:	007a1200 	.word	0x007a1200
 800681c:	46000000 	.word	0x46000000
 8006820:	4c742400 	.word	0x4c742400
 8006824:	4a742400 	.word	0x4a742400
 8006828:	4af42400 	.word	0x4af42400

0800682c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b082      	sub	sp, #8
 8006830:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006832:	f7ff fe81 	bl	8006538 <HAL_RCC_GetSysClockFreq>
 8006836:	4602      	mov	r2, r0
 8006838:	4b10      	ldr	r3, [pc, #64]	; (800687c <HAL_RCC_GetHCLKFreq+0x50>)
 800683a:	699b      	ldr	r3, [r3, #24]
 800683c:	0a1b      	lsrs	r3, r3, #8
 800683e:	f003 030f 	and.w	r3, r3, #15
 8006842:	490f      	ldr	r1, [pc, #60]	; (8006880 <HAL_RCC_GetHCLKFreq+0x54>)
 8006844:	5ccb      	ldrb	r3, [r1, r3]
 8006846:	f003 031f 	and.w	r3, r3, #31
 800684a:	fa22 f303 	lsr.w	r3, r2, r3
 800684e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006850:	4b0a      	ldr	r3, [pc, #40]	; (800687c <HAL_RCC_GetHCLKFreq+0x50>)
 8006852:	699b      	ldr	r3, [r3, #24]
 8006854:	f003 030f 	and.w	r3, r3, #15
 8006858:	4a09      	ldr	r2, [pc, #36]	; (8006880 <HAL_RCC_GetHCLKFreq+0x54>)
 800685a:	5cd3      	ldrb	r3, [r2, r3]
 800685c:	f003 031f 	and.w	r3, r3, #31
 8006860:	687a      	ldr	r2, [r7, #4]
 8006862:	fa22 f303 	lsr.w	r3, r2, r3
 8006866:	4a07      	ldr	r2, [pc, #28]	; (8006884 <HAL_RCC_GetHCLKFreq+0x58>)
 8006868:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800686a:	4a07      	ldr	r2, [pc, #28]	; (8006888 <HAL_RCC_GetHCLKFreq+0x5c>)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006870:	4b04      	ldr	r3, [pc, #16]	; (8006884 <HAL_RCC_GetHCLKFreq+0x58>)
 8006872:	681b      	ldr	r3, [r3, #0]
}
 8006874:	4618      	mov	r0, r3
 8006876:	3708      	adds	r7, #8
 8006878:	46bd      	mov	sp, r7
 800687a:	bd80      	pop	{r7, pc}
 800687c:	58024400 	.word	0x58024400
 8006880:	0800b3d8 	.word	0x0800b3d8
 8006884:	24000004 	.word	0x24000004
 8006888:	24000000 	.word	0x24000000

0800688c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006890:	f7ff ffcc 	bl	800682c <HAL_RCC_GetHCLKFreq>
 8006894:	4602      	mov	r2, r0
 8006896:	4b06      	ldr	r3, [pc, #24]	; (80068b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006898:	69db      	ldr	r3, [r3, #28]
 800689a:	091b      	lsrs	r3, r3, #4
 800689c:	f003 0307 	and.w	r3, r3, #7
 80068a0:	4904      	ldr	r1, [pc, #16]	; (80068b4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80068a2:	5ccb      	ldrb	r3, [r1, r3]
 80068a4:	f003 031f 	and.w	r3, r3, #31
 80068a8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80068ac:	4618      	mov	r0, r3
 80068ae:	bd80      	pop	{r7, pc}
 80068b0:	58024400 	.word	0x58024400
 80068b4:	0800b3d8 	.word	0x0800b3d8

080068b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80068bc:	f7ff ffb6 	bl	800682c <HAL_RCC_GetHCLKFreq>
 80068c0:	4602      	mov	r2, r0
 80068c2:	4b06      	ldr	r3, [pc, #24]	; (80068dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80068c4:	69db      	ldr	r3, [r3, #28]
 80068c6:	0a1b      	lsrs	r3, r3, #8
 80068c8:	f003 0307 	and.w	r3, r3, #7
 80068cc:	4904      	ldr	r1, [pc, #16]	; (80068e0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80068ce:	5ccb      	ldrb	r3, [r1, r3]
 80068d0:	f003 031f 	and.w	r3, r3, #31
 80068d4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80068d8:	4618      	mov	r0, r3
 80068da:	bd80      	pop	{r7, pc}
 80068dc:	58024400 	.word	0x58024400
 80068e0:	0800b3d8 	.word	0x0800b3d8

080068e4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80068e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80068e8:	b0c6      	sub	sp, #280	; 0x118
 80068ea:	af00      	add	r7, sp, #0
 80068ec:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80068f0:	2300      	movs	r3, #0
 80068f2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80068f6:	2300      	movs	r3, #0
 80068f8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80068fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006904:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8006908:	2500      	movs	r5, #0
 800690a:	ea54 0305 	orrs.w	r3, r4, r5
 800690e:	d049      	beq.n	80069a4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006910:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006914:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006916:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800691a:	d02f      	beq.n	800697c <HAL_RCCEx_PeriphCLKConfig+0x98>
 800691c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006920:	d828      	bhi.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006922:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006926:	d01a      	beq.n	800695e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006928:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800692c:	d822      	bhi.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800692e:	2b00      	cmp	r3, #0
 8006930:	d003      	beq.n	800693a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006932:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006936:	d007      	beq.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006938:	e01c      	b.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800693a:	4bab      	ldr	r3, [pc, #684]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800693c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800693e:	4aaa      	ldr	r2, [pc, #680]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006940:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006944:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006946:	e01a      	b.n	800697e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006948:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800694c:	3308      	adds	r3, #8
 800694e:	2102      	movs	r1, #2
 8006950:	4618      	mov	r0, r3
 8006952:	f001 fc25 	bl	80081a0 <RCCEx_PLL2_Config>
 8006956:	4603      	mov	r3, r0
 8006958:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800695c:	e00f      	b.n	800697e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800695e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006962:	3328      	adds	r3, #40	; 0x28
 8006964:	2102      	movs	r1, #2
 8006966:	4618      	mov	r0, r3
 8006968:	f001 fccc 	bl	8008304 <RCCEx_PLL3_Config>
 800696c:	4603      	mov	r3, r0
 800696e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006972:	e004      	b.n	800697e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006974:	2301      	movs	r3, #1
 8006976:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800697a:	e000      	b.n	800697e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800697c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800697e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006982:	2b00      	cmp	r3, #0
 8006984:	d10a      	bne.n	800699c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006986:	4b98      	ldr	r3, [pc, #608]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006988:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800698a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800698e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006992:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006994:	4a94      	ldr	r2, [pc, #592]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006996:	430b      	orrs	r3, r1
 8006998:	6513      	str	r3, [r2, #80]	; 0x50
 800699a:	e003      	b.n	80069a4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800699c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80069a0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80069a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069ac:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80069b0:	f04f 0900 	mov.w	r9, #0
 80069b4:	ea58 0309 	orrs.w	r3, r8, r9
 80069b8:	d047      	beq.n	8006a4a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80069ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069c0:	2b04      	cmp	r3, #4
 80069c2:	d82a      	bhi.n	8006a1a <HAL_RCCEx_PeriphCLKConfig+0x136>
 80069c4:	a201      	add	r2, pc, #4	; (adr r2, 80069cc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80069c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069ca:	bf00      	nop
 80069cc:	080069e1 	.word	0x080069e1
 80069d0:	080069ef 	.word	0x080069ef
 80069d4:	08006a05 	.word	0x08006a05
 80069d8:	08006a23 	.word	0x08006a23
 80069dc:	08006a23 	.word	0x08006a23
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80069e0:	4b81      	ldr	r3, [pc, #516]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80069e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069e4:	4a80      	ldr	r2, [pc, #512]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80069e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80069ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80069ec:	e01a      	b.n	8006a24 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80069ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069f2:	3308      	adds	r3, #8
 80069f4:	2100      	movs	r1, #0
 80069f6:	4618      	mov	r0, r3
 80069f8:	f001 fbd2 	bl	80081a0 <RCCEx_PLL2_Config>
 80069fc:	4603      	mov	r3, r0
 80069fe:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006a02:	e00f      	b.n	8006a24 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006a04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a08:	3328      	adds	r3, #40	; 0x28
 8006a0a:	2100      	movs	r1, #0
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	f001 fc79 	bl	8008304 <RCCEx_PLL3_Config>
 8006a12:	4603      	mov	r3, r0
 8006a14:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006a18:	e004      	b.n	8006a24 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006a20:	e000      	b.n	8006a24 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8006a22:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a24:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d10a      	bne.n	8006a42 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006a2c:	4b6e      	ldr	r3, [pc, #440]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006a2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a30:	f023 0107 	bic.w	r1, r3, #7
 8006a34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a3a:	4a6b      	ldr	r2, [pc, #428]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006a3c:	430b      	orrs	r3, r1
 8006a3e:	6513      	str	r3, [r2, #80]	; 0x50
 8006a40:	e003      	b.n	8006a4a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a42:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006a46:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006a4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a52:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 8006a56:	f04f 0b00 	mov.w	fp, #0
 8006a5a:	ea5a 030b 	orrs.w	r3, sl, fp
 8006a5e:	d05b      	beq.n	8006b18 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8006a60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a64:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006a68:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8006a6c:	d03b      	beq.n	8006ae6 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8006a6e:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8006a72:	d834      	bhi.n	8006ade <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006a74:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006a78:	d037      	beq.n	8006aea <HAL_RCCEx_PeriphCLKConfig+0x206>
 8006a7a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006a7e:	d82e      	bhi.n	8006ade <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006a80:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006a84:	d033      	beq.n	8006aee <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8006a86:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006a8a:	d828      	bhi.n	8006ade <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006a8c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006a90:	d01a      	beq.n	8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8006a92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006a96:	d822      	bhi.n	8006ade <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d003      	beq.n	8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8006a9c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006aa0:	d007      	beq.n	8006ab2 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8006aa2:	e01c      	b.n	8006ade <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006aa4:	4b50      	ldr	r3, [pc, #320]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aa8:	4a4f      	ldr	r2, [pc, #316]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006aaa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006aae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006ab0:	e01e      	b.n	8006af0 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006ab2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ab6:	3308      	adds	r3, #8
 8006ab8:	2100      	movs	r1, #0
 8006aba:	4618      	mov	r0, r3
 8006abc:	f001 fb70 	bl	80081a0 <RCCEx_PLL2_Config>
 8006ac0:	4603      	mov	r3, r0
 8006ac2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006ac6:	e013      	b.n	8006af0 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006ac8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006acc:	3328      	adds	r3, #40	; 0x28
 8006ace:	2100      	movs	r1, #0
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	f001 fc17 	bl	8008304 <RCCEx_PLL3_Config>
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006adc:	e008      	b.n	8006af0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006ade:	2301      	movs	r3, #1
 8006ae0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006ae4:	e004      	b.n	8006af0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8006ae6:	bf00      	nop
 8006ae8:	e002      	b.n	8006af0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8006aea:	bf00      	nop
 8006aec:	e000      	b.n	8006af0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8006aee:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006af0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d10b      	bne.n	8006b10 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006af8:	4b3b      	ldr	r3, [pc, #236]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006afa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006afc:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8006b00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b04:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006b08:	4a37      	ldr	r2, [pc, #220]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006b0a:	430b      	orrs	r3, r1
 8006b0c:	6593      	str	r3, [r2, #88]	; 0x58
 8006b0e:	e003      	b.n	8006b18 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b10:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006b14:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006b18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b20:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8006b24:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006b28:	2300      	movs	r3, #0
 8006b2a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006b2e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8006b32:	460b      	mov	r3, r1
 8006b34:	4313      	orrs	r3, r2
 8006b36:	d05d      	beq.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8006b38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b3c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006b40:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8006b44:	d03b      	beq.n	8006bbe <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8006b46:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8006b4a:	d834      	bhi.n	8006bb6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006b4c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006b50:	d037      	beq.n	8006bc2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8006b52:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006b56:	d82e      	bhi.n	8006bb6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006b58:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006b5c:	d033      	beq.n	8006bc6 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8006b5e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006b62:	d828      	bhi.n	8006bb6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006b64:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006b68:	d01a      	beq.n	8006ba0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8006b6a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006b6e:	d822      	bhi.n	8006bb6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d003      	beq.n	8006b7c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006b74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006b78:	d007      	beq.n	8006b8a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8006b7a:	e01c      	b.n	8006bb6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b7c:	4b1a      	ldr	r3, [pc, #104]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b80:	4a19      	ldr	r2, [pc, #100]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006b82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b86:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006b88:	e01e      	b.n	8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006b8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b8e:	3308      	adds	r3, #8
 8006b90:	2100      	movs	r1, #0
 8006b92:	4618      	mov	r0, r3
 8006b94:	f001 fb04 	bl	80081a0 <RCCEx_PLL2_Config>
 8006b98:	4603      	mov	r3, r0
 8006b9a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006b9e:	e013      	b.n	8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006ba0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ba4:	3328      	adds	r3, #40	; 0x28
 8006ba6:	2100      	movs	r1, #0
 8006ba8:	4618      	mov	r0, r3
 8006baa:	f001 fbab 	bl	8008304 <RCCEx_PLL3_Config>
 8006bae:	4603      	mov	r3, r0
 8006bb0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006bb4:	e008      	b.n	8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006bbc:	e004      	b.n	8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8006bbe:	bf00      	nop
 8006bc0:	e002      	b.n	8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8006bc2:	bf00      	nop
 8006bc4:	e000      	b.n	8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8006bc6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006bc8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d10d      	bne.n	8006bec <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006bd0:	4b05      	ldr	r3, [pc, #20]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006bd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bd4:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8006bd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bdc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006be0:	4a01      	ldr	r2, [pc, #4]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006be2:	430b      	orrs	r3, r1
 8006be4:	6593      	str	r3, [r2, #88]	; 0x58
 8006be6:	e005      	b.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8006be8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bec:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006bf0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006bf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bfc:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8006c00:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006c04:	2300      	movs	r3, #0
 8006c06:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006c0a:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8006c0e:	460b      	mov	r3, r1
 8006c10:	4313      	orrs	r3, r2
 8006c12:	d03a      	beq.n	8006c8a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8006c14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c1a:	2b30      	cmp	r3, #48	; 0x30
 8006c1c:	d01f      	beq.n	8006c5e <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8006c1e:	2b30      	cmp	r3, #48	; 0x30
 8006c20:	d819      	bhi.n	8006c56 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8006c22:	2b20      	cmp	r3, #32
 8006c24:	d00c      	beq.n	8006c40 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8006c26:	2b20      	cmp	r3, #32
 8006c28:	d815      	bhi.n	8006c56 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d019      	beq.n	8006c62 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8006c2e:	2b10      	cmp	r3, #16
 8006c30:	d111      	bne.n	8006c56 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c32:	4baa      	ldr	r3, [pc, #680]	; (8006edc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c36:	4aa9      	ldr	r2, [pc, #676]	; (8006edc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006c38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c3c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8006c3e:	e011      	b.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006c40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c44:	3308      	adds	r3, #8
 8006c46:	2102      	movs	r1, #2
 8006c48:	4618      	mov	r0, r3
 8006c4a:	f001 faa9 	bl	80081a0 <RCCEx_PLL2_Config>
 8006c4e:	4603      	mov	r3, r0
 8006c50:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8006c54:	e006      	b.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006c56:	2301      	movs	r3, #1
 8006c58:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006c5c:	e002      	b.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8006c5e:	bf00      	nop
 8006c60:	e000      	b.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8006c62:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c64:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d10a      	bne.n	8006c82 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006c6c:	4b9b      	ldr	r3, [pc, #620]	; (8006edc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006c6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c70:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8006c74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c7a:	4a98      	ldr	r2, [pc, #608]	; (8006edc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006c7c:	430b      	orrs	r3, r1
 8006c7e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006c80:	e003      	b.n	8006c8a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c82:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006c86:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006c8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c92:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8006c96:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006ca0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8006ca4:	460b      	mov	r3, r1
 8006ca6:	4313      	orrs	r3, r2
 8006ca8:	d051      	beq.n	8006d4e <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8006caa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cb0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006cb4:	d035      	beq.n	8006d22 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8006cb6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006cba:	d82e      	bhi.n	8006d1a <HAL_RCCEx_PeriphCLKConfig+0x436>
 8006cbc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006cc0:	d031      	beq.n	8006d26 <HAL_RCCEx_PeriphCLKConfig+0x442>
 8006cc2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006cc6:	d828      	bhi.n	8006d1a <HAL_RCCEx_PeriphCLKConfig+0x436>
 8006cc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ccc:	d01a      	beq.n	8006d04 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8006cce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006cd2:	d822      	bhi.n	8006d1a <HAL_RCCEx_PeriphCLKConfig+0x436>
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d003      	beq.n	8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8006cd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cdc:	d007      	beq.n	8006cee <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8006cde:	e01c      	b.n	8006d1a <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ce0:	4b7e      	ldr	r3, [pc, #504]	; (8006edc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ce4:	4a7d      	ldr	r2, [pc, #500]	; (8006edc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006ce6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006cea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006cec:	e01c      	b.n	8006d28 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006cee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cf2:	3308      	adds	r3, #8
 8006cf4:	2100      	movs	r1, #0
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	f001 fa52 	bl	80081a0 <RCCEx_PLL2_Config>
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006d02:	e011      	b.n	8006d28 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006d04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d08:	3328      	adds	r3, #40	; 0x28
 8006d0a:	2100      	movs	r1, #0
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	f001 faf9 	bl	8008304 <RCCEx_PLL3_Config>
 8006d12:	4603      	mov	r3, r0
 8006d14:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006d18:	e006      	b.n	8006d28 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006d20:	e002      	b.n	8006d28 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8006d22:	bf00      	nop
 8006d24:	e000      	b.n	8006d28 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8006d26:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d28:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d10a      	bne.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006d30:	4b6a      	ldr	r3, [pc, #424]	; (8006edc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006d32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d34:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8006d38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d3e:	4a67      	ldr	r2, [pc, #412]	; (8006edc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006d40:	430b      	orrs	r3, r1
 8006d42:	6513      	str	r3, [r2, #80]	; 0x50
 8006d44:	e003      	b.n	8006d4e <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d46:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006d4a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006d4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d56:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8006d5a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006d5e:	2300      	movs	r3, #0
 8006d60:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006d64:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8006d68:	460b      	mov	r3, r1
 8006d6a:	4313      	orrs	r3, r2
 8006d6c:	d053      	beq.n	8006e16 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8006d6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006d78:	d033      	beq.n	8006de2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8006d7a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006d7e:	d82c      	bhi.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006d80:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006d84:	d02f      	beq.n	8006de6 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8006d86:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006d8a:	d826      	bhi.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006d8c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006d90:	d02b      	beq.n	8006dea <HAL_RCCEx_PeriphCLKConfig+0x506>
 8006d92:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006d96:	d820      	bhi.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006d98:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d9c:	d012      	beq.n	8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8006d9e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006da2:	d81a      	bhi.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d022      	beq.n	8006dee <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8006da8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006dac:	d115      	bne.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006dae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006db2:	3308      	adds	r3, #8
 8006db4:	2101      	movs	r1, #1
 8006db6:	4618      	mov	r0, r3
 8006db8:	f001 f9f2 	bl	80081a0 <RCCEx_PLL2_Config>
 8006dbc:	4603      	mov	r3, r0
 8006dbe:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006dc2:	e015      	b.n	8006df0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006dc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006dc8:	3328      	adds	r3, #40	; 0x28
 8006dca:	2101      	movs	r1, #1
 8006dcc:	4618      	mov	r0, r3
 8006dce:	f001 fa99 	bl	8008304 <RCCEx_PLL3_Config>
 8006dd2:	4603      	mov	r3, r0
 8006dd4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006dd8:	e00a      	b.n	8006df0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006dda:	2301      	movs	r3, #1
 8006ddc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006de0:	e006      	b.n	8006df0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006de2:	bf00      	nop
 8006de4:	e004      	b.n	8006df0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006de6:	bf00      	nop
 8006de8:	e002      	b.n	8006df0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006dea:	bf00      	nop
 8006dec:	e000      	b.n	8006df0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006dee:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006df0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d10a      	bne.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006df8:	4b38      	ldr	r3, [pc, #224]	; (8006edc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006dfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dfc:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8006e00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e06:	4a35      	ldr	r2, [pc, #212]	; (8006edc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006e08:	430b      	orrs	r3, r1
 8006e0a:	6513      	str	r3, [r2, #80]	; 0x50
 8006e0c:	e003      	b.n	8006e16 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e0e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006e12:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006e16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e1e:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8006e22:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006e26:	2300      	movs	r3, #0
 8006e28:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006e2c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006e30:	460b      	mov	r3, r1
 8006e32:	4313      	orrs	r3, r2
 8006e34:	d058      	beq.n	8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006e36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e3a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006e3e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006e42:	d033      	beq.n	8006eac <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8006e44:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006e48:	d82c      	bhi.n	8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006e4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e4e:	d02f      	beq.n	8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8006e50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e54:	d826      	bhi.n	8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006e56:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006e5a:	d02b      	beq.n	8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8006e5c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006e60:	d820      	bhi.n	8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006e62:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e66:	d012      	beq.n	8006e8e <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8006e68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e6c:	d81a      	bhi.n	8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d022      	beq.n	8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006e72:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006e76:	d115      	bne.n	8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006e78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e7c:	3308      	adds	r3, #8
 8006e7e:	2101      	movs	r1, #1
 8006e80:	4618      	mov	r0, r3
 8006e82:	f001 f98d 	bl	80081a0 <RCCEx_PLL2_Config>
 8006e86:	4603      	mov	r3, r0
 8006e88:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006e8c:	e015      	b.n	8006eba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006e8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e92:	3328      	adds	r3, #40	; 0x28
 8006e94:	2101      	movs	r1, #1
 8006e96:	4618      	mov	r0, r3
 8006e98:	f001 fa34 	bl	8008304 <RCCEx_PLL3_Config>
 8006e9c:	4603      	mov	r3, r0
 8006e9e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006ea2:	e00a      	b.n	8006eba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006ea4:	2301      	movs	r3, #1
 8006ea6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006eaa:	e006      	b.n	8006eba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006eac:	bf00      	nop
 8006eae:	e004      	b.n	8006eba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006eb0:	bf00      	nop
 8006eb2:	e002      	b.n	8006eba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006eb4:	bf00      	nop
 8006eb6:	e000      	b.n	8006eba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006eb8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006eba:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d10e      	bne.n	8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006ec2:	4b06      	ldr	r3, [pc, #24]	; (8006edc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006ec4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ec6:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8006eca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ece:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006ed2:	4a02      	ldr	r2, [pc, #8]	; (8006edc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006ed4:	430b      	orrs	r3, r1
 8006ed6:	6593      	str	r3, [r2, #88]	; 0x58
 8006ed8:	e006      	b.n	8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8006eda:	bf00      	nop
 8006edc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ee0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006ee4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006ee8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ef0:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8006ef4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006ef8:	2300      	movs	r3, #0
 8006efa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006efe:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8006f02:	460b      	mov	r3, r1
 8006f04:	4313      	orrs	r3, r2
 8006f06:	d037      	beq.n	8006f78 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006f08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f12:	d00e      	beq.n	8006f32 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8006f14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f18:	d816      	bhi.n	8006f48 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d018      	beq.n	8006f50 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8006f1e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006f22:	d111      	bne.n	8006f48 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f24:	4bc4      	ldr	r3, [pc, #784]	; (8007238 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f28:	4ac3      	ldr	r2, [pc, #780]	; (8007238 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006f2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f2e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006f30:	e00f      	b.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006f32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f36:	3308      	adds	r3, #8
 8006f38:	2101      	movs	r1, #1
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	f001 f930 	bl	80081a0 <RCCEx_PLL2_Config>
 8006f40:	4603      	mov	r3, r0
 8006f42:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006f46:	e004      	b.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f48:	2301      	movs	r3, #1
 8006f4a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006f4e:	e000      	b.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8006f50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f52:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d10a      	bne.n	8006f70 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006f5a:	4bb7      	ldr	r3, [pc, #732]	; (8007238 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006f5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f5e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8006f62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f68:	4ab3      	ldr	r2, [pc, #716]	; (8007238 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006f6a:	430b      	orrs	r3, r1
 8006f6c:	6513      	str	r3, [r2, #80]	; 0x50
 8006f6e:	e003      	b.n	8006f78 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f70:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006f74:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006f78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f80:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8006f84:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006f88:	2300      	movs	r3, #0
 8006f8a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006f8e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8006f92:	460b      	mov	r3, r1
 8006f94:	4313      	orrs	r3, r2
 8006f96:	d039      	beq.n	800700c <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006f98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f9e:	2b03      	cmp	r3, #3
 8006fa0:	d81c      	bhi.n	8006fdc <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8006fa2:	a201      	add	r2, pc, #4	; (adr r2, 8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8006fa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fa8:	08006fe5 	.word	0x08006fe5
 8006fac:	08006fb9 	.word	0x08006fb9
 8006fb0:	08006fc7 	.word	0x08006fc7
 8006fb4:	08006fe5 	.word	0x08006fe5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006fb8:	4b9f      	ldr	r3, [pc, #636]	; (8007238 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fbc:	4a9e      	ldr	r2, [pc, #632]	; (8007238 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006fbe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006fc2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006fc4:	e00f      	b.n	8006fe6 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006fc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fca:	3308      	adds	r3, #8
 8006fcc:	2102      	movs	r1, #2
 8006fce:	4618      	mov	r0, r3
 8006fd0:	f001 f8e6 	bl	80081a0 <RCCEx_PLL2_Config>
 8006fd4:	4603      	mov	r3, r0
 8006fd6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006fda:	e004      	b.n	8006fe6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006fdc:	2301      	movs	r3, #1
 8006fde:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006fe2:	e000      	b.n	8006fe6 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8006fe4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006fe6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d10a      	bne.n	8007004 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006fee:	4b92      	ldr	r3, [pc, #584]	; (8007238 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006ff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ff2:	f023 0103 	bic.w	r1, r3, #3
 8006ff6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ffa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ffc:	4a8e      	ldr	r2, [pc, #568]	; (8007238 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006ffe:	430b      	orrs	r3, r1
 8007000:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007002:	e003      	b.n	800700c <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007004:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007008:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800700c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007014:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8007018:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800701c:	2300      	movs	r3, #0
 800701e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007022:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007026:	460b      	mov	r3, r1
 8007028:	4313      	orrs	r3, r2
 800702a:	f000 8099 	beq.w	8007160 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800702e:	4b83      	ldr	r3, [pc, #524]	; (800723c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	4a82      	ldr	r2, [pc, #520]	; (800723c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007034:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007038:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800703a:	f7fb fa21 	bl	8002480 <HAL_GetTick>
 800703e:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007042:	e00b      	b.n	800705c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007044:	f7fb fa1c 	bl	8002480 <HAL_GetTick>
 8007048:	4602      	mov	r2, r0
 800704a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800704e:	1ad3      	subs	r3, r2, r3
 8007050:	2b64      	cmp	r3, #100	; 0x64
 8007052:	d903      	bls.n	800705c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8007054:	2303      	movs	r3, #3
 8007056:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800705a:	e005      	b.n	8007068 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800705c:	4b77      	ldr	r3, [pc, #476]	; (800723c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007064:	2b00      	cmp	r3, #0
 8007066:	d0ed      	beq.n	8007044 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8007068:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800706c:	2b00      	cmp	r3, #0
 800706e:	d173      	bne.n	8007158 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007070:	4b71      	ldr	r3, [pc, #452]	; (8007238 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007072:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007074:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007078:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800707c:	4053      	eors	r3, r2
 800707e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007082:	2b00      	cmp	r3, #0
 8007084:	d015      	beq.n	80070b2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007086:	4b6c      	ldr	r3, [pc, #432]	; (8007238 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007088:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800708a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800708e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007092:	4b69      	ldr	r3, [pc, #420]	; (8007238 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007094:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007096:	4a68      	ldr	r2, [pc, #416]	; (8007238 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007098:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800709c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800709e:	4b66      	ldr	r3, [pc, #408]	; (8007238 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80070a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070a2:	4a65      	ldr	r2, [pc, #404]	; (8007238 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80070a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80070a8:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80070aa:	4a63      	ldr	r2, [pc, #396]	; (8007238 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80070ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80070b0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80070b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070b6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80070ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070be:	d118      	bne.n	80070f2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070c0:	f7fb f9de 	bl	8002480 <HAL_GetTick>
 80070c4:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80070c8:	e00d      	b.n	80070e6 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80070ca:	f7fb f9d9 	bl	8002480 <HAL_GetTick>
 80070ce:	4602      	mov	r2, r0
 80070d0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80070d4:	1ad2      	subs	r2, r2, r3
 80070d6:	f241 3388 	movw	r3, #5000	; 0x1388
 80070da:	429a      	cmp	r2, r3
 80070dc:	d903      	bls.n	80070e6 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80070de:	2303      	movs	r3, #3
 80070e0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 80070e4:	e005      	b.n	80070f2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80070e6:	4b54      	ldr	r3, [pc, #336]	; (8007238 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80070e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070ea:	f003 0302 	and.w	r3, r3, #2
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d0eb      	beq.n	80070ca <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80070f2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d129      	bne.n	800714e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80070fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070fe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007102:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007106:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800710a:	d10e      	bne.n	800712a <HAL_RCCEx_PeriphCLKConfig+0x846>
 800710c:	4b4a      	ldr	r3, [pc, #296]	; (8007238 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800710e:	691b      	ldr	r3, [r3, #16]
 8007110:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8007114:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007118:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800711c:	091a      	lsrs	r2, r3, #4
 800711e:	4b48      	ldr	r3, [pc, #288]	; (8007240 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8007120:	4013      	ands	r3, r2
 8007122:	4a45      	ldr	r2, [pc, #276]	; (8007238 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007124:	430b      	orrs	r3, r1
 8007126:	6113      	str	r3, [r2, #16]
 8007128:	e005      	b.n	8007136 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800712a:	4b43      	ldr	r3, [pc, #268]	; (8007238 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800712c:	691b      	ldr	r3, [r3, #16]
 800712e:	4a42      	ldr	r2, [pc, #264]	; (8007238 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007130:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007134:	6113      	str	r3, [r2, #16]
 8007136:	4b40      	ldr	r3, [pc, #256]	; (8007238 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007138:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800713a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800713e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007142:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007146:	4a3c      	ldr	r2, [pc, #240]	; (8007238 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007148:	430b      	orrs	r3, r1
 800714a:	6713      	str	r3, [r2, #112]	; 0x70
 800714c:	e008      	b.n	8007160 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800714e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007152:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 8007156:	e003      	b.n	8007160 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007158:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800715c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007160:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007168:	f002 0301 	and.w	r3, r2, #1
 800716c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007170:	2300      	movs	r3, #0
 8007172:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007176:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800717a:	460b      	mov	r3, r1
 800717c:	4313      	orrs	r3, r2
 800717e:	f000 808f 	beq.w	80072a0 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8007182:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007186:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007188:	2b28      	cmp	r3, #40	; 0x28
 800718a:	d871      	bhi.n	8007270 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800718c:	a201      	add	r2, pc, #4	; (adr r2, 8007194 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800718e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007192:	bf00      	nop
 8007194:	08007279 	.word	0x08007279
 8007198:	08007271 	.word	0x08007271
 800719c:	08007271 	.word	0x08007271
 80071a0:	08007271 	.word	0x08007271
 80071a4:	08007271 	.word	0x08007271
 80071a8:	08007271 	.word	0x08007271
 80071ac:	08007271 	.word	0x08007271
 80071b0:	08007271 	.word	0x08007271
 80071b4:	08007245 	.word	0x08007245
 80071b8:	08007271 	.word	0x08007271
 80071bc:	08007271 	.word	0x08007271
 80071c0:	08007271 	.word	0x08007271
 80071c4:	08007271 	.word	0x08007271
 80071c8:	08007271 	.word	0x08007271
 80071cc:	08007271 	.word	0x08007271
 80071d0:	08007271 	.word	0x08007271
 80071d4:	0800725b 	.word	0x0800725b
 80071d8:	08007271 	.word	0x08007271
 80071dc:	08007271 	.word	0x08007271
 80071e0:	08007271 	.word	0x08007271
 80071e4:	08007271 	.word	0x08007271
 80071e8:	08007271 	.word	0x08007271
 80071ec:	08007271 	.word	0x08007271
 80071f0:	08007271 	.word	0x08007271
 80071f4:	08007279 	.word	0x08007279
 80071f8:	08007271 	.word	0x08007271
 80071fc:	08007271 	.word	0x08007271
 8007200:	08007271 	.word	0x08007271
 8007204:	08007271 	.word	0x08007271
 8007208:	08007271 	.word	0x08007271
 800720c:	08007271 	.word	0x08007271
 8007210:	08007271 	.word	0x08007271
 8007214:	08007279 	.word	0x08007279
 8007218:	08007271 	.word	0x08007271
 800721c:	08007271 	.word	0x08007271
 8007220:	08007271 	.word	0x08007271
 8007224:	08007271 	.word	0x08007271
 8007228:	08007271 	.word	0x08007271
 800722c:	08007271 	.word	0x08007271
 8007230:	08007271 	.word	0x08007271
 8007234:	08007279 	.word	0x08007279
 8007238:	58024400 	.word	0x58024400
 800723c:	58024800 	.word	0x58024800
 8007240:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007244:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007248:	3308      	adds	r3, #8
 800724a:	2101      	movs	r1, #1
 800724c:	4618      	mov	r0, r3
 800724e:	f000 ffa7 	bl	80081a0 <RCCEx_PLL2_Config>
 8007252:	4603      	mov	r3, r0
 8007254:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007258:	e00f      	b.n	800727a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800725a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800725e:	3328      	adds	r3, #40	; 0x28
 8007260:	2101      	movs	r1, #1
 8007262:	4618      	mov	r0, r3
 8007264:	f001 f84e 	bl	8008304 <RCCEx_PLL3_Config>
 8007268:	4603      	mov	r3, r0
 800726a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800726e:	e004      	b.n	800727a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007270:	2301      	movs	r3, #1
 8007272:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8007276:	e000      	b.n	800727a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8007278:	bf00      	nop
    }

    if (ret == HAL_OK)
 800727a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800727e:	2b00      	cmp	r3, #0
 8007280:	d10a      	bne.n	8007298 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007282:	4bbf      	ldr	r3, [pc, #764]	; (8007580 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007284:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007286:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800728a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800728e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007290:	4abb      	ldr	r2, [pc, #748]	; (8007580 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007292:	430b      	orrs	r3, r1
 8007294:	6553      	str	r3, [r2, #84]	; 0x54
 8007296:	e003      	b.n	80072a0 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007298:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800729c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80072a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072a8:	f002 0302 	and.w	r3, r2, #2
 80072ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80072b0:	2300      	movs	r3, #0
 80072b2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80072b6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80072ba:	460b      	mov	r3, r1
 80072bc:	4313      	orrs	r3, r2
 80072be:	d041      	beq.n	8007344 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80072c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80072c6:	2b05      	cmp	r3, #5
 80072c8:	d824      	bhi.n	8007314 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 80072ca:	a201      	add	r2, pc, #4	; (adr r2, 80072d0 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 80072cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072d0:	0800731d 	.word	0x0800731d
 80072d4:	080072e9 	.word	0x080072e9
 80072d8:	080072ff 	.word	0x080072ff
 80072dc:	0800731d 	.word	0x0800731d
 80072e0:	0800731d 	.word	0x0800731d
 80072e4:	0800731d 	.word	0x0800731d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80072e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072ec:	3308      	adds	r3, #8
 80072ee:	2101      	movs	r1, #1
 80072f0:	4618      	mov	r0, r3
 80072f2:	f000 ff55 	bl	80081a0 <RCCEx_PLL2_Config>
 80072f6:	4603      	mov	r3, r0
 80072f8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80072fc:	e00f      	b.n	800731e <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80072fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007302:	3328      	adds	r3, #40	; 0x28
 8007304:	2101      	movs	r1, #1
 8007306:	4618      	mov	r0, r3
 8007308:	f000 fffc 	bl	8008304 <RCCEx_PLL3_Config>
 800730c:	4603      	mov	r3, r0
 800730e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007312:	e004      	b.n	800731e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007314:	2301      	movs	r3, #1
 8007316:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800731a:	e000      	b.n	800731e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800731c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800731e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007322:	2b00      	cmp	r3, #0
 8007324:	d10a      	bne.n	800733c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007326:	4b96      	ldr	r3, [pc, #600]	; (8007580 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007328:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800732a:	f023 0107 	bic.w	r1, r3, #7
 800732e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007332:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007334:	4a92      	ldr	r2, [pc, #584]	; (8007580 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007336:	430b      	orrs	r3, r1
 8007338:	6553      	str	r3, [r2, #84]	; 0x54
 800733a:	e003      	b.n	8007344 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800733c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007340:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007344:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800734c:	f002 0304 	and.w	r3, r2, #4
 8007350:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007354:	2300      	movs	r3, #0
 8007356:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800735a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800735e:	460b      	mov	r3, r1
 8007360:	4313      	orrs	r3, r2
 8007362:	d044      	beq.n	80073ee <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007364:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007368:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800736c:	2b05      	cmp	r3, #5
 800736e:	d825      	bhi.n	80073bc <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8007370:	a201      	add	r2, pc, #4	; (adr r2, 8007378 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8007372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007376:	bf00      	nop
 8007378:	080073c5 	.word	0x080073c5
 800737c:	08007391 	.word	0x08007391
 8007380:	080073a7 	.word	0x080073a7
 8007384:	080073c5 	.word	0x080073c5
 8007388:	080073c5 	.word	0x080073c5
 800738c:	080073c5 	.word	0x080073c5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007390:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007394:	3308      	adds	r3, #8
 8007396:	2101      	movs	r1, #1
 8007398:	4618      	mov	r0, r3
 800739a:	f000 ff01 	bl	80081a0 <RCCEx_PLL2_Config>
 800739e:	4603      	mov	r3, r0
 80073a0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80073a4:	e00f      	b.n	80073c6 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80073a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073aa:	3328      	adds	r3, #40	; 0x28
 80073ac:	2101      	movs	r1, #1
 80073ae:	4618      	mov	r0, r3
 80073b0:	f000 ffa8 	bl	8008304 <RCCEx_PLL3_Config>
 80073b4:	4603      	mov	r3, r0
 80073b6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80073ba:	e004      	b.n	80073c6 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80073bc:	2301      	movs	r3, #1
 80073be:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80073c2:	e000      	b.n	80073c6 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 80073c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80073c6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d10b      	bne.n	80073e6 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80073ce:	4b6c      	ldr	r3, [pc, #432]	; (8007580 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80073d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073d2:	f023 0107 	bic.w	r1, r3, #7
 80073d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073de:	4a68      	ldr	r2, [pc, #416]	; (8007580 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80073e0:	430b      	orrs	r3, r1
 80073e2:	6593      	str	r3, [r2, #88]	; 0x58
 80073e4:	e003      	b.n	80073ee <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073e6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80073ea:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80073ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073f6:	f002 0320 	and.w	r3, r2, #32
 80073fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80073fe:	2300      	movs	r3, #0
 8007400:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007404:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8007408:	460b      	mov	r3, r1
 800740a:	4313      	orrs	r3, r2
 800740c:	d055      	beq.n	80074ba <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800740e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007412:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007416:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800741a:	d033      	beq.n	8007484 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800741c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007420:	d82c      	bhi.n	800747c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007422:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007426:	d02f      	beq.n	8007488 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8007428:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800742c:	d826      	bhi.n	800747c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800742e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007432:	d02b      	beq.n	800748c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8007434:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007438:	d820      	bhi.n	800747c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800743a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800743e:	d012      	beq.n	8007466 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8007440:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007444:	d81a      	bhi.n	800747c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007446:	2b00      	cmp	r3, #0
 8007448:	d022      	beq.n	8007490 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800744a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800744e:	d115      	bne.n	800747c <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007450:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007454:	3308      	adds	r3, #8
 8007456:	2100      	movs	r1, #0
 8007458:	4618      	mov	r0, r3
 800745a:	f000 fea1 	bl	80081a0 <RCCEx_PLL2_Config>
 800745e:	4603      	mov	r3, r0
 8007460:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007464:	e015      	b.n	8007492 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007466:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800746a:	3328      	adds	r3, #40	; 0x28
 800746c:	2102      	movs	r1, #2
 800746e:	4618      	mov	r0, r3
 8007470:	f000 ff48 	bl	8008304 <RCCEx_PLL3_Config>
 8007474:	4603      	mov	r3, r0
 8007476:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800747a:	e00a      	b.n	8007492 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800747c:	2301      	movs	r3, #1
 800747e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8007482:	e006      	b.n	8007492 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007484:	bf00      	nop
 8007486:	e004      	b.n	8007492 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007488:	bf00      	nop
 800748a:	e002      	b.n	8007492 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800748c:	bf00      	nop
 800748e:	e000      	b.n	8007492 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007490:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007492:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007496:	2b00      	cmp	r3, #0
 8007498:	d10b      	bne.n	80074b2 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800749a:	4b39      	ldr	r3, [pc, #228]	; (8007580 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800749c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800749e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80074a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80074aa:	4a35      	ldr	r2, [pc, #212]	; (8007580 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80074ac:	430b      	orrs	r3, r1
 80074ae:	6553      	str	r3, [r2, #84]	; 0x54
 80074b0:	e003      	b.n	80074ba <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074b2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80074b6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80074ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074c2:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80074c6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80074ca:	2300      	movs	r3, #0
 80074cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80074d0:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80074d4:	460b      	mov	r3, r1
 80074d6:	4313      	orrs	r3, r2
 80074d8:	d058      	beq.n	800758c <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80074da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074de:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80074e2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80074e6:	d033      	beq.n	8007550 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 80074e8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80074ec:	d82c      	bhi.n	8007548 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80074ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074f2:	d02f      	beq.n	8007554 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80074f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074f8:	d826      	bhi.n	8007548 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80074fa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80074fe:	d02b      	beq.n	8007558 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8007500:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007504:	d820      	bhi.n	8007548 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007506:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800750a:	d012      	beq.n	8007532 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800750c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007510:	d81a      	bhi.n	8007548 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007512:	2b00      	cmp	r3, #0
 8007514:	d022      	beq.n	800755c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8007516:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800751a:	d115      	bne.n	8007548 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800751c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007520:	3308      	adds	r3, #8
 8007522:	2100      	movs	r1, #0
 8007524:	4618      	mov	r0, r3
 8007526:	f000 fe3b 	bl	80081a0 <RCCEx_PLL2_Config>
 800752a:	4603      	mov	r3, r0
 800752c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007530:	e015      	b.n	800755e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007532:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007536:	3328      	adds	r3, #40	; 0x28
 8007538:	2102      	movs	r1, #2
 800753a:	4618      	mov	r0, r3
 800753c:	f000 fee2 	bl	8008304 <RCCEx_PLL3_Config>
 8007540:	4603      	mov	r3, r0
 8007542:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007546:	e00a      	b.n	800755e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007548:	2301      	movs	r3, #1
 800754a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800754e:	e006      	b.n	800755e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007550:	bf00      	nop
 8007552:	e004      	b.n	800755e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007554:	bf00      	nop
 8007556:	e002      	b.n	800755e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007558:	bf00      	nop
 800755a:	e000      	b.n	800755e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800755c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800755e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007562:	2b00      	cmp	r3, #0
 8007564:	d10e      	bne.n	8007584 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007566:	4b06      	ldr	r3, [pc, #24]	; (8007580 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007568:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800756a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800756e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007572:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007576:	4a02      	ldr	r2, [pc, #8]	; (8007580 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007578:	430b      	orrs	r3, r1
 800757a:	6593      	str	r3, [r2, #88]	; 0x58
 800757c:	e006      	b.n	800758c <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800757e:	bf00      	nop
 8007580:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007584:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007588:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800758c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007594:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8007598:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800759c:	2300      	movs	r3, #0
 800759e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80075a2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80075a6:	460b      	mov	r3, r1
 80075a8:	4313      	orrs	r3, r2
 80075aa:	d055      	beq.n	8007658 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80075ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80075b4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80075b8:	d033      	beq.n	8007622 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 80075ba:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80075be:	d82c      	bhi.n	800761a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80075c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80075c4:	d02f      	beq.n	8007626 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80075c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80075ca:	d826      	bhi.n	800761a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80075cc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80075d0:	d02b      	beq.n	800762a <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80075d2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80075d6:	d820      	bhi.n	800761a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80075d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80075dc:	d012      	beq.n	8007604 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 80075de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80075e2:	d81a      	bhi.n	800761a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d022      	beq.n	800762e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80075e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80075ec:	d115      	bne.n	800761a <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80075ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075f2:	3308      	adds	r3, #8
 80075f4:	2100      	movs	r1, #0
 80075f6:	4618      	mov	r0, r3
 80075f8:	f000 fdd2 	bl	80081a0 <RCCEx_PLL2_Config>
 80075fc:	4603      	mov	r3, r0
 80075fe:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007602:	e015      	b.n	8007630 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007604:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007608:	3328      	adds	r3, #40	; 0x28
 800760a:	2102      	movs	r1, #2
 800760c:	4618      	mov	r0, r3
 800760e:	f000 fe79 	bl	8008304 <RCCEx_PLL3_Config>
 8007612:	4603      	mov	r3, r0
 8007614:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007618:	e00a      	b.n	8007630 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800761a:	2301      	movs	r3, #1
 800761c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8007620:	e006      	b.n	8007630 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8007622:	bf00      	nop
 8007624:	e004      	b.n	8007630 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8007626:	bf00      	nop
 8007628:	e002      	b.n	8007630 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800762a:	bf00      	nop
 800762c:	e000      	b.n	8007630 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800762e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007630:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007634:	2b00      	cmp	r3, #0
 8007636:	d10b      	bne.n	8007650 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007638:	4ba0      	ldr	r3, [pc, #640]	; (80078bc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800763a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800763c:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8007640:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007644:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007648:	4a9c      	ldr	r2, [pc, #624]	; (80078bc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800764a:	430b      	orrs	r3, r1
 800764c:	6593      	str	r3, [r2, #88]	; 0x58
 800764e:	e003      	b.n	8007658 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007650:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007654:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8007658:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800765c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007660:	f002 0308 	and.w	r3, r2, #8
 8007664:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007668:	2300      	movs	r3, #0
 800766a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800766e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8007672:	460b      	mov	r3, r1
 8007674:	4313      	orrs	r3, r2
 8007676:	d01e      	beq.n	80076b6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8007678:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800767c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007680:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007684:	d10c      	bne.n	80076a0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007686:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800768a:	3328      	adds	r3, #40	; 0x28
 800768c:	2102      	movs	r1, #2
 800768e:	4618      	mov	r0, r3
 8007690:	f000 fe38 	bl	8008304 <RCCEx_PLL3_Config>
 8007694:	4603      	mov	r3, r0
 8007696:	2b00      	cmp	r3, #0
 8007698:	d002      	beq.n	80076a0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800769a:	2301      	movs	r3, #1
 800769c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 80076a0:	4b86      	ldr	r3, [pc, #536]	; (80078bc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80076a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076a4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80076a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80076b0:	4a82      	ldr	r2, [pc, #520]	; (80078bc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80076b2:	430b      	orrs	r3, r1
 80076b4:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80076b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076be:	f002 0310 	and.w	r3, r2, #16
 80076c2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80076c6:	2300      	movs	r3, #0
 80076c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80076cc:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80076d0:	460b      	mov	r3, r1
 80076d2:	4313      	orrs	r3, r2
 80076d4:	d01e      	beq.n	8007714 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80076d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80076de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80076e2:	d10c      	bne.n	80076fe <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80076e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076e8:	3328      	adds	r3, #40	; 0x28
 80076ea:	2102      	movs	r1, #2
 80076ec:	4618      	mov	r0, r3
 80076ee:	f000 fe09 	bl	8008304 <RCCEx_PLL3_Config>
 80076f2:	4603      	mov	r3, r0
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d002      	beq.n	80076fe <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 80076f8:	2301      	movs	r3, #1
 80076fa:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80076fe:	4b6f      	ldr	r3, [pc, #444]	; (80078bc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007700:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007702:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007706:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800770a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800770e:	4a6b      	ldr	r2, [pc, #428]	; (80078bc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007710:	430b      	orrs	r3, r1
 8007712:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007714:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800771c:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8007720:	67bb      	str	r3, [r7, #120]	; 0x78
 8007722:	2300      	movs	r3, #0
 8007724:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007726:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800772a:	460b      	mov	r3, r1
 800772c:	4313      	orrs	r3, r2
 800772e:	d03e      	beq.n	80077ae <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007730:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007734:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007738:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800773c:	d022      	beq.n	8007784 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800773e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007742:	d81b      	bhi.n	800777c <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8007744:	2b00      	cmp	r3, #0
 8007746:	d003      	beq.n	8007750 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8007748:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800774c:	d00b      	beq.n	8007766 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800774e:	e015      	b.n	800777c <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007750:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007754:	3308      	adds	r3, #8
 8007756:	2100      	movs	r1, #0
 8007758:	4618      	mov	r0, r3
 800775a:	f000 fd21 	bl	80081a0 <RCCEx_PLL2_Config>
 800775e:	4603      	mov	r3, r0
 8007760:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007764:	e00f      	b.n	8007786 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007766:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800776a:	3328      	adds	r3, #40	; 0x28
 800776c:	2102      	movs	r1, #2
 800776e:	4618      	mov	r0, r3
 8007770:	f000 fdc8 	bl	8008304 <RCCEx_PLL3_Config>
 8007774:	4603      	mov	r3, r0
 8007776:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800777a:	e004      	b.n	8007786 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800777c:	2301      	movs	r3, #1
 800777e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8007782:	e000      	b.n	8007786 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8007784:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007786:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800778a:	2b00      	cmp	r3, #0
 800778c:	d10b      	bne.n	80077a6 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800778e:	4b4b      	ldr	r3, [pc, #300]	; (80078bc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007790:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007792:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8007796:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800779a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800779e:	4a47      	ldr	r2, [pc, #284]	; (80078bc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80077a0:	430b      	orrs	r3, r1
 80077a2:	6593      	str	r3, [r2, #88]	; 0x58
 80077a4:	e003      	b.n	80077ae <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077a6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80077aa:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80077ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077b6:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80077ba:	673b      	str	r3, [r7, #112]	; 0x70
 80077bc:	2300      	movs	r3, #0
 80077be:	677b      	str	r3, [r7, #116]	; 0x74
 80077c0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80077c4:	460b      	mov	r3, r1
 80077c6:	4313      	orrs	r3, r2
 80077c8:	d03b      	beq.n	8007842 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80077ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80077d2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80077d6:	d01f      	beq.n	8007818 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80077d8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80077dc:	d818      	bhi.n	8007810 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 80077de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80077e2:	d003      	beq.n	80077ec <HAL_RCCEx_PeriphCLKConfig+0xf08>
 80077e4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80077e8:	d007      	beq.n	80077fa <HAL_RCCEx_PeriphCLKConfig+0xf16>
 80077ea:	e011      	b.n	8007810 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80077ec:	4b33      	ldr	r3, [pc, #204]	; (80078bc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80077ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077f0:	4a32      	ldr	r2, [pc, #200]	; (80078bc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80077f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80077f6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80077f8:	e00f      	b.n	800781a <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80077fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077fe:	3328      	adds	r3, #40	; 0x28
 8007800:	2101      	movs	r1, #1
 8007802:	4618      	mov	r0, r3
 8007804:	f000 fd7e 	bl	8008304 <RCCEx_PLL3_Config>
 8007808:	4603      	mov	r3, r0
 800780a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800780e:	e004      	b.n	800781a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007810:	2301      	movs	r3, #1
 8007812:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8007816:	e000      	b.n	800781a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8007818:	bf00      	nop
    }

    if (ret == HAL_OK)
 800781a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800781e:	2b00      	cmp	r3, #0
 8007820:	d10b      	bne.n	800783a <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007822:	4b26      	ldr	r3, [pc, #152]	; (80078bc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007824:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007826:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800782a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800782e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007832:	4a22      	ldr	r2, [pc, #136]	; (80078bc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007834:	430b      	orrs	r3, r1
 8007836:	6553      	str	r3, [r2, #84]	; 0x54
 8007838:	e003      	b.n	8007842 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800783a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800783e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007842:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800784a:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800784e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007850:	2300      	movs	r3, #0
 8007852:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007854:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8007858:	460b      	mov	r3, r1
 800785a:	4313      	orrs	r3, r2
 800785c:	d034      	beq.n	80078c8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800785e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007862:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007864:	2b00      	cmp	r3, #0
 8007866:	d003      	beq.n	8007870 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8007868:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800786c:	d007      	beq.n	800787e <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800786e:	e011      	b.n	8007894 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007870:	4b12      	ldr	r3, [pc, #72]	; (80078bc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007874:	4a11      	ldr	r2, [pc, #68]	; (80078bc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007876:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800787a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800787c:	e00e      	b.n	800789c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800787e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007882:	3308      	adds	r3, #8
 8007884:	2102      	movs	r1, #2
 8007886:	4618      	mov	r0, r3
 8007888:	f000 fc8a 	bl	80081a0 <RCCEx_PLL2_Config>
 800788c:	4603      	mov	r3, r0
 800788e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007892:	e003      	b.n	800789c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8007894:	2301      	movs	r3, #1
 8007896:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800789a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800789c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d10d      	bne.n	80078c0 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80078a4:	4b05      	ldr	r3, [pc, #20]	; (80078bc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80078a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078a8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80078ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078b2:	4a02      	ldr	r2, [pc, #8]	; (80078bc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80078b4:	430b      	orrs	r3, r1
 80078b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80078b8:	e006      	b.n	80078c8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 80078ba:	bf00      	nop
 80078bc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078c0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80078c4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80078c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078d0:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80078d4:	663b      	str	r3, [r7, #96]	; 0x60
 80078d6:	2300      	movs	r3, #0
 80078d8:	667b      	str	r3, [r7, #100]	; 0x64
 80078da:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80078de:	460b      	mov	r3, r1
 80078e0:	4313      	orrs	r3, r2
 80078e2:	d00c      	beq.n	80078fe <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80078e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078e8:	3328      	adds	r3, #40	; 0x28
 80078ea:	2102      	movs	r1, #2
 80078ec:	4618      	mov	r0, r3
 80078ee:	f000 fd09 	bl	8008304 <RCCEx_PLL3_Config>
 80078f2:	4603      	mov	r3, r0
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d002      	beq.n	80078fe <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 80078f8:	2301      	movs	r3, #1
 80078fa:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80078fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007906:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800790a:	65bb      	str	r3, [r7, #88]	; 0x58
 800790c:	2300      	movs	r3, #0
 800790e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007910:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8007914:	460b      	mov	r3, r1
 8007916:	4313      	orrs	r3, r2
 8007918:	d036      	beq.n	8007988 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800791a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800791e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007920:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007924:	d018      	beq.n	8007958 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8007926:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800792a:	d811      	bhi.n	8007950 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800792c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007930:	d014      	beq.n	800795c <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8007932:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007936:	d80b      	bhi.n	8007950 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8007938:	2b00      	cmp	r3, #0
 800793a:	d011      	beq.n	8007960 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800793c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007940:	d106      	bne.n	8007950 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007942:	4bb7      	ldr	r3, [pc, #732]	; (8007c20 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007946:	4ab6      	ldr	r2, [pc, #728]	; (8007c20 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007948:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800794c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800794e:	e008      	b.n	8007962 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007950:	2301      	movs	r3, #1
 8007952:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8007956:	e004      	b.n	8007962 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8007958:	bf00      	nop
 800795a:	e002      	b.n	8007962 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800795c:	bf00      	nop
 800795e:	e000      	b.n	8007962 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8007960:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007962:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007966:	2b00      	cmp	r3, #0
 8007968:	d10a      	bne.n	8007980 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800796a:	4bad      	ldr	r3, [pc, #692]	; (8007c20 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800796c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800796e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007972:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007976:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007978:	4aa9      	ldr	r2, [pc, #676]	; (8007c20 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800797a:	430b      	orrs	r3, r1
 800797c:	6553      	str	r3, [r2, #84]	; 0x54
 800797e:	e003      	b.n	8007988 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007980:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007984:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007988:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800798c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007990:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8007994:	653b      	str	r3, [r7, #80]	; 0x50
 8007996:	2300      	movs	r3, #0
 8007998:	657b      	str	r3, [r7, #84]	; 0x54
 800799a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800799e:	460b      	mov	r3, r1
 80079a0:	4313      	orrs	r3, r2
 80079a2:	d009      	beq.n	80079b8 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80079a4:	4b9e      	ldr	r3, [pc, #632]	; (8007c20 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80079a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079a8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80079ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079b2:	4a9b      	ldr	r2, [pc, #620]	; (8007c20 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80079b4:	430b      	orrs	r3, r1
 80079b6:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80079b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079c0:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80079c4:	64bb      	str	r3, [r7, #72]	; 0x48
 80079c6:	2300      	movs	r3, #0
 80079c8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80079ca:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80079ce:	460b      	mov	r3, r1
 80079d0:	4313      	orrs	r3, r2
 80079d2:	d009      	beq.n	80079e8 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80079d4:	4b92      	ldr	r3, [pc, #584]	; (8007c20 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80079d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079d8:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80079dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80079e2:	4a8f      	ldr	r2, [pc, #572]	; (8007c20 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80079e4:	430b      	orrs	r3, r1
 80079e6:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80079e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079f0:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80079f4:	643b      	str	r3, [r7, #64]	; 0x40
 80079f6:	2300      	movs	r3, #0
 80079f8:	647b      	str	r3, [r7, #68]	; 0x44
 80079fa:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80079fe:	460b      	mov	r3, r1
 8007a00:	4313      	orrs	r3, r2
 8007a02:	d00e      	beq.n	8007a22 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007a04:	4b86      	ldr	r3, [pc, #536]	; (8007c20 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007a06:	691b      	ldr	r3, [r3, #16]
 8007a08:	4a85      	ldr	r2, [pc, #532]	; (8007c20 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007a0a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007a0e:	6113      	str	r3, [r2, #16]
 8007a10:	4b83      	ldr	r3, [pc, #524]	; (8007c20 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007a12:	6919      	ldr	r1, [r3, #16]
 8007a14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a18:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007a1c:	4a80      	ldr	r2, [pc, #512]	; (8007c20 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007a1e:	430b      	orrs	r3, r1
 8007a20:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007a22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a2a:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8007a2e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007a30:	2300      	movs	r3, #0
 8007a32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007a34:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8007a38:	460b      	mov	r3, r1
 8007a3a:	4313      	orrs	r3, r2
 8007a3c:	d009      	beq.n	8007a52 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007a3e:	4b78      	ldr	r3, [pc, #480]	; (8007c20 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007a40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a42:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8007a46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a4c:	4a74      	ldr	r2, [pc, #464]	; (8007c20 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007a4e:	430b      	orrs	r3, r1
 8007a50:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007a52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a5a:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8007a5e:	633b      	str	r3, [r7, #48]	; 0x30
 8007a60:	2300      	movs	r3, #0
 8007a62:	637b      	str	r3, [r7, #52]	; 0x34
 8007a64:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8007a68:	460b      	mov	r3, r1
 8007a6a:	4313      	orrs	r3, r2
 8007a6c:	d00a      	beq.n	8007a84 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007a6e:	4b6c      	ldr	r3, [pc, #432]	; (8007c20 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007a70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a72:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8007a76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a7e:	4a68      	ldr	r2, [pc, #416]	; (8007c20 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007a80:	430b      	orrs	r3, r1
 8007a82:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007a84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a8c:	2100      	movs	r1, #0
 8007a8e:	62b9      	str	r1, [r7, #40]	; 0x28
 8007a90:	f003 0301 	and.w	r3, r3, #1
 8007a94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a96:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8007a9a:	460b      	mov	r3, r1
 8007a9c:	4313      	orrs	r3, r2
 8007a9e:	d011      	beq.n	8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007aa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007aa4:	3308      	adds	r3, #8
 8007aa6:	2100      	movs	r1, #0
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	f000 fb79 	bl	80081a0 <RCCEx_PLL2_Config>
 8007aae:	4603      	mov	r3, r0
 8007ab0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8007ab4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d003      	beq.n	8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007abc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007ac0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007ac4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007acc:	2100      	movs	r1, #0
 8007ace:	6239      	str	r1, [r7, #32]
 8007ad0:	f003 0302 	and.w	r3, r3, #2
 8007ad4:	627b      	str	r3, [r7, #36]	; 0x24
 8007ad6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007ada:	460b      	mov	r3, r1
 8007adc:	4313      	orrs	r3, r2
 8007ade:	d011      	beq.n	8007b04 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007ae0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ae4:	3308      	adds	r3, #8
 8007ae6:	2101      	movs	r1, #1
 8007ae8:	4618      	mov	r0, r3
 8007aea:	f000 fb59 	bl	80081a0 <RCCEx_PLL2_Config>
 8007aee:	4603      	mov	r3, r0
 8007af0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8007af4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d003      	beq.n	8007b04 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007afc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007b00:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007b04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b0c:	2100      	movs	r1, #0
 8007b0e:	61b9      	str	r1, [r7, #24]
 8007b10:	f003 0304 	and.w	r3, r3, #4
 8007b14:	61fb      	str	r3, [r7, #28]
 8007b16:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007b1a:	460b      	mov	r3, r1
 8007b1c:	4313      	orrs	r3, r2
 8007b1e:	d011      	beq.n	8007b44 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007b20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b24:	3308      	adds	r3, #8
 8007b26:	2102      	movs	r1, #2
 8007b28:	4618      	mov	r0, r3
 8007b2a:	f000 fb39 	bl	80081a0 <RCCEx_PLL2_Config>
 8007b2e:	4603      	mov	r3, r0
 8007b30:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8007b34:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d003      	beq.n	8007b44 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b3c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007b40:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007b44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b4c:	2100      	movs	r1, #0
 8007b4e:	6139      	str	r1, [r7, #16]
 8007b50:	f003 0308 	and.w	r3, r3, #8
 8007b54:	617b      	str	r3, [r7, #20]
 8007b56:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007b5a:	460b      	mov	r3, r1
 8007b5c:	4313      	orrs	r3, r2
 8007b5e:	d011      	beq.n	8007b84 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007b60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b64:	3328      	adds	r3, #40	; 0x28
 8007b66:	2100      	movs	r1, #0
 8007b68:	4618      	mov	r0, r3
 8007b6a:	f000 fbcb 	bl	8008304 <RCCEx_PLL3_Config>
 8007b6e:	4603      	mov	r3, r0
 8007b70:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 8007b74:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d003      	beq.n	8007b84 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b7c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007b80:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007b84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b8c:	2100      	movs	r1, #0
 8007b8e:	60b9      	str	r1, [r7, #8]
 8007b90:	f003 0310 	and.w	r3, r3, #16
 8007b94:	60fb      	str	r3, [r7, #12]
 8007b96:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007b9a:	460b      	mov	r3, r1
 8007b9c:	4313      	orrs	r3, r2
 8007b9e:	d011      	beq.n	8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007ba0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ba4:	3328      	adds	r3, #40	; 0x28
 8007ba6:	2101      	movs	r1, #1
 8007ba8:	4618      	mov	r0, r3
 8007baa:	f000 fbab 	bl	8008304 <RCCEx_PLL3_Config>
 8007bae:	4603      	mov	r3, r0
 8007bb0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8007bb4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d003      	beq.n	8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bbc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007bc0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007bc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bcc:	2100      	movs	r1, #0
 8007bce:	6039      	str	r1, [r7, #0]
 8007bd0:	f003 0320 	and.w	r3, r3, #32
 8007bd4:	607b      	str	r3, [r7, #4]
 8007bd6:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007bda:	460b      	mov	r3, r1
 8007bdc:	4313      	orrs	r3, r2
 8007bde:	d011      	beq.n	8007c04 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007be0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007be4:	3328      	adds	r3, #40	; 0x28
 8007be6:	2102      	movs	r1, #2
 8007be8:	4618      	mov	r0, r3
 8007bea:	f000 fb8b 	bl	8008304 <RCCEx_PLL3_Config>
 8007bee:	4603      	mov	r3, r0
 8007bf0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8007bf4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d003      	beq.n	8007c04 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bfc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007c00:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 8007c04:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d101      	bne.n	8007c10 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	e000      	b.n	8007c12 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8007c10:	2301      	movs	r3, #1
}
 8007c12:	4618      	mov	r0, r3
 8007c14:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007c1e:	bf00      	nop
 8007c20:	58024400 	.word	0x58024400

08007c24 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007c28:	f7fe fe00 	bl	800682c <HAL_RCC_GetHCLKFreq>
 8007c2c:	4602      	mov	r2, r0
 8007c2e:	4b06      	ldr	r3, [pc, #24]	; (8007c48 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007c30:	6a1b      	ldr	r3, [r3, #32]
 8007c32:	091b      	lsrs	r3, r3, #4
 8007c34:	f003 0307 	and.w	r3, r3, #7
 8007c38:	4904      	ldr	r1, [pc, #16]	; (8007c4c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007c3a:	5ccb      	ldrb	r3, [r1, r3]
 8007c3c:	f003 031f 	and.w	r3, r3, #31
 8007c40:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007c44:	4618      	mov	r0, r3
 8007c46:	bd80      	pop	{r7, pc}
 8007c48:	58024400 	.word	0x58024400
 8007c4c:	0800b3d8 	.word	0x0800b3d8

08007c50 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007c50:	b480      	push	{r7}
 8007c52:	b089      	sub	sp, #36	; 0x24
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007c58:	4ba1      	ldr	r3, [pc, #644]	; (8007ee0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c5c:	f003 0303 	and.w	r3, r3, #3
 8007c60:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8007c62:	4b9f      	ldr	r3, [pc, #636]	; (8007ee0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c66:	0b1b      	lsrs	r3, r3, #12
 8007c68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007c6c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007c6e:	4b9c      	ldr	r3, [pc, #624]	; (8007ee0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c72:	091b      	lsrs	r3, r3, #4
 8007c74:	f003 0301 	and.w	r3, r3, #1
 8007c78:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8007c7a:	4b99      	ldr	r3, [pc, #612]	; (8007ee0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c7e:	08db      	lsrs	r3, r3, #3
 8007c80:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007c84:	693a      	ldr	r2, [r7, #16]
 8007c86:	fb02 f303 	mul.w	r3, r2, r3
 8007c8a:	ee07 3a90 	vmov	s15, r3
 8007c8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c92:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007c96:	697b      	ldr	r3, [r7, #20]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	f000 8111 	beq.w	8007ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007c9e:	69bb      	ldr	r3, [r7, #24]
 8007ca0:	2b02      	cmp	r3, #2
 8007ca2:	f000 8083 	beq.w	8007dac <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007ca6:	69bb      	ldr	r3, [r7, #24]
 8007ca8:	2b02      	cmp	r3, #2
 8007caa:	f200 80a1 	bhi.w	8007df0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007cae:	69bb      	ldr	r3, [r7, #24]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d003      	beq.n	8007cbc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007cb4:	69bb      	ldr	r3, [r7, #24]
 8007cb6:	2b01      	cmp	r3, #1
 8007cb8:	d056      	beq.n	8007d68 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007cba:	e099      	b.n	8007df0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007cbc:	4b88      	ldr	r3, [pc, #544]	; (8007ee0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f003 0320 	and.w	r3, r3, #32
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d02d      	beq.n	8007d24 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007cc8:	4b85      	ldr	r3, [pc, #532]	; (8007ee0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	08db      	lsrs	r3, r3, #3
 8007cce:	f003 0303 	and.w	r3, r3, #3
 8007cd2:	4a84      	ldr	r2, [pc, #528]	; (8007ee4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007cd4:	fa22 f303 	lsr.w	r3, r2, r3
 8007cd8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007cda:	68bb      	ldr	r3, [r7, #8]
 8007cdc:	ee07 3a90 	vmov	s15, r3
 8007ce0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ce4:	697b      	ldr	r3, [r7, #20]
 8007ce6:	ee07 3a90 	vmov	s15, r3
 8007cea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007cf2:	4b7b      	ldr	r3, [pc, #492]	; (8007ee0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cfa:	ee07 3a90 	vmov	s15, r3
 8007cfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d02:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d06:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007ee8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007d0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d1e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007d22:	e087      	b.n	8007e34 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007d24:	697b      	ldr	r3, [r7, #20]
 8007d26:	ee07 3a90 	vmov	s15, r3
 8007d2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d2e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007eec <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007d32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d36:	4b6a      	ldr	r3, [pc, #424]	; (8007ee0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d3e:	ee07 3a90 	vmov	s15, r3
 8007d42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d46:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d4a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007ee8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007d4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007d66:	e065      	b.n	8007e34 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007d68:	697b      	ldr	r3, [r7, #20]
 8007d6a:	ee07 3a90 	vmov	s15, r3
 8007d6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d72:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007ef0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007d76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d7a:	4b59      	ldr	r3, [pc, #356]	; (8007ee0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d82:	ee07 3a90 	vmov	s15, r3
 8007d86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d8e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007ee8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007d92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007da2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007da6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007daa:	e043      	b.n	8007e34 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007dac:	697b      	ldr	r3, [r7, #20]
 8007dae:	ee07 3a90 	vmov	s15, r3
 8007db2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007db6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007ef4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007dba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007dbe:	4b48      	ldr	r3, [pc, #288]	; (8007ee0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007dc6:	ee07 3a90 	vmov	s15, r3
 8007dca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007dce:	ed97 6a03 	vldr	s12, [r7, #12]
 8007dd2:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007ee8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007dd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007dda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007dde:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007de2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007de6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007dea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007dee:	e021      	b.n	8007e34 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007df0:	697b      	ldr	r3, [r7, #20]
 8007df2:	ee07 3a90 	vmov	s15, r3
 8007df6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dfa:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007ef0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007dfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e02:	4b37      	ldr	r3, [pc, #220]	; (8007ee0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e0a:	ee07 3a90 	vmov	s15, r3
 8007e0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e12:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e16:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007ee8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007e1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e2e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007e32:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007e34:	4b2a      	ldr	r3, [pc, #168]	; (8007ee0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e38:	0a5b      	lsrs	r3, r3, #9
 8007e3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e3e:	ee07 3a90 	vmov	s15, r3
 8007e42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e46:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007e4a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007e4e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007e52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e5a:	ee17 2a90 	vmov	r2, s15
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8007e62:	4b1f      	ldr	r3, [pc, #124]	; (8007ee0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e66:	0c1b      	lsrs	r3, r3, #16
 8007e68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e6c:	ee07 3a90 	vmov	s15, r3
 8007e70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e74:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007e78:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007e7c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007e80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e88:	ee17 2a90 	vmov	r2, s15
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007e90:	4b13      	ldr	r3, [pc, #76]	; (8007ee0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e94:	0e1b      	lsrs	r3, r3, #24
 8007e96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e9a:	ee07 3a90 	vmov	s15, r3
 8007e9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ea2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007ea6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007eaa:	edd7 6a07 	vldr	s13, [r7, #28]
 8007eae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007eb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007eb6:	ee17 2a90 	vmov	r2, s15
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007ebe:	e008      	b.n	8007ed2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	2200      	movs	r2, #0
 8007eca:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2200      	movs	r2, #0
 8007ed0:	609a      	str	r2, [r3, #8]
}
 8007ed2:	bf00      	nop
 8007ed4:	3724      	adds	r7, #36	; 0x24
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007edc:	4770      	bx	lr
 8007ede:	bf00      	nop
 8007ee0:	58024400 	.word	0x58024400
 8007ee4:	03d09000 	.word	0x03d09000
 8007ee8:	46000000 	.word	0x46000000
 8007eec:	4c742400 	.word	0x4c742400
 8007ef0:	4a742400 	.word	0x4a742400
 8007ef4:	4af42400 	.word	0x4af42400

08007ef8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007ef8:	b480      	push	{r7}
 8007efa:	b089      	sub	sp, #36	; 0x24
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007f00:	4ba1      	ldr	r3, [pc, #644]	; (8008188 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f04:	f003 0303 	and.w	r3, r3, #3
 8007f08:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8007f0a:	4b9f      	ldr	r3, [pc, #636]	; (8008188 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f0e:	0d1b      	lsrs	r3, r3, #20
 8007f10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007f14:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007f16:	4b9c      	ldr	r3, [pc, #624]	; (8008188 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f1a:	0a1b      	lsrs	r3, r3, #8
 8007f1c:	f003 0301 	and.w	r3, r3, #1
 8007f20:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8007f22:	4b99      	ldr	r3, [pc, #612]	; (8008188 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f26:	08db      	lsrs	r3, r3, #3
 8007f28:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007f2c:	693a      	ldr	r2, [r7, #16]
 8007f2e:	fb02 f303 	mul.w	r3, r2, r3
 8007f32:	ee07 3a90 	vmov	s15, r3
 8007f36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f3a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007f3e:	697b      	ldr	r3, [r7, #20]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	f000 8111 	beq.w	8008168 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007f46:	69bb      	ldr	r3, [r7, #24]
 8007f48:	2b02      	cmp	r3, #2
 8007f4a:	f000 8083 	beq.w	8008054 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007f4e:	69bb      	ldr	r3, [r7, #24]
 8007f50:	2b02      	cmp	r3, #2
 8007f52:	f200 80a1 	bhi.w	8008098 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007f56:	69bb      	ldr	r3, [r7, #24]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d003      	beq.n	8007f64 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007f5c:	69bb      	ldr	r3, [r7, #24]
 8007f5e:	2b01      	cmp	r3, #1
 8007f60:	d056      	beq.n	8008010 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007f62:	e099      	b.n	8008098 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007f64:	4b88      	ldr	r3, [pc, #544]	; (8008188 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	f003 0320 	and.w	r3, r3, #32
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d02d      	beq.n	8007fcc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007f70:	4b85      	ldr	r3, [pc, #532]	; (8008188 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	08db      	lsrs	r3, r3, #3
 8007f76:	f003 0303 	and.w	r3, r3, #3
 8007f7a:	4a84      	ldr	r2, [pc, #528]	; (800818c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007f7c:	fa22 f303 	lsr.w	r3, r2, r3
 8007f80:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007f82:	68bb      	ldr	r3, [r7, #8]
 8007f84:	ee07 3a90 	vmov	s15, r3
 8007f88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f8c:	697b      	ldr	r3, [r7, #20]
 8007f8e:	ee07 3a90 	vmov	s15, r3
 8007f92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f9a:	4b7b      	ldr	r3, [pc, #492]	; (8008188 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fa2:	ee07 3a90 	vmov	s15, r3
 8007fa6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007faa:	ed97 6a03 	vldr	s12, [r7, #12]
 8007fae:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008190 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007fb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007fb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007fba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007fbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007fc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007fc6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007fca:	e087      	b.n	80080dc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007fcc:	697b      	ldr	r3, [r7, #20]
 8007fce:	ee07 3a90 	vmov	s15, r3
 8007fd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fd6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008194 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007fda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007fde:	4b6a      	ldr	r3, [pc, #424]	; (8008188 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fe2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fe6:	ee07 3a90 	vmov	s15, r3
 8007fea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fee:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ff2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008190 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007ff6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ffa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ffe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008002:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008006:	ee67 7a27 	vmul.f32	s15, s14, s15
 800800a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800800e:	e065      	b.n	80080dc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008010:	697b      	ldr	r3, [r7, #20]
 8008012:	ee07 3a90 	vmov	s15, r3
 8008016:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800801a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008198 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800801e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008022:	4b59      	ldr	r3, [pc, #356]	; (8008188 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008026:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800802a:	ee07 3a90 	vmov	s15, r3
 800802e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008032:	ed97 6a03 	vldr	s12, [r7, #12]
 8008036:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008190 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800803a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800803e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008042:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008046:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800804a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800804e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008052:	e043      	b.n	80080dc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008054:	697b      	ldr	r3, [r7, #20]
 8008056:	ee07 3a90 	vmov	s15, r3
 800805a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800805e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800819c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008062:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008066:	4b48      	ldr	r3, [pc, #288]	; (8008188 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800806a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800806e:	ee07 3a90 	vmov	s15, r3
 8008072:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008076:	ed97 6a03 	vldr	s12, [r7, #12]
 800807a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008190 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800807e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008082:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008086:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800808a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800808e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008092:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008096:	e021      	b.n	80080dc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008098:	697b      	ldr	r3, [r7, #20]
 800809a:	ee07 3a90 	vmov	s15, r3
 800809e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080a2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008198 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80080a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80080aa:	4b37      	ldr	r3, [pc, #220]	; (8008188 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80080ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080b2:	ee07 3a90 	vmov	s15, r3
 80080b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80080be:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008190 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80080c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80080c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80080ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80080ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80080d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80080da:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80080dc:	4b2a      	ldr	r3, [pc, #168]	; (8008188 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80080de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080e0:	0a5b      	lsrs	r3, r3, #9
 80080e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080e6:	ee07 3a90 	vmov	s15, r3
 80080ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80080f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80080f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80080fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80080fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008102:	ee17 2a90 	vmov	r2, s15
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800810a:	4b1f      	ldr	r3, [pc, #124]	; (8008188 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800810c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800810e:	0c1b      	lsrs	r3, r3, #16
 8008110:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008114:	ee07 3a90 	vmov	s15, r3
 8008118:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800811c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008120:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008124:	edd7 6a07 	vldr	s13, [r7, #28]
 8008128:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800812c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008130:	ee17 2a90 	vmov	r2, s15
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008138:	4b13      	ldr	r3, [pc, #76]	; (8008188 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800813a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800813c:	0e1b      	lsrs	r3, r3, #24
 800813e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008142:	ee07 3a90 	vmov	s15, r3
 8008146:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800814a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800814e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008152:	edd7 6a07 	vldr	s13, [r7, #28]
 8008156:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800815a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800815e:	ee17 2a90 	vmov	r2, s15
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008166:	e008      	b.n	800817a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2200      	movs	r2, #0
 800816c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2200      	movs	r2, #0
 8008172:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2200      	movs	r2, #0
 8008178:	609a      	str	r2, [r3, #8]
}
 800817a:	bf00      	nop
 800817c:	3724      	adds	r7, #36	; 0x24
 800817e:	46bd      	mov	sp, r7
 8008180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008184:	4770      	bx	lr
 8008186:	bf00      	nop
 8008188:	58024400 	.word	0x58024400
 800818c:	03d09000 	.word	0x03d09000
 8008190:	46000000 	.word	0x46000000
 8008194:	4c742400 	.word	0x4c742400
 8008198:	4a742400 	.word	0x4a742400
 800819c:	4af42400 	.word	0x4af42400

080081a0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b084      	sub	sp, #16
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
 80081a8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80081aa:	2300      	movs	r3, #0
 80081ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80081ae:	4b53      	ldr	r3, [pc, #332]	; (80082fc <RCCEx_PLL2_Config+0x15c>)
 80081b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081b2:	f003 0303 	and.w	r3, r3, #3
 80081b6:	2b03      	cmp	r3, #3
 80081b8:	d101      	bne.n	80081be <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80081ba:	2301      	movs	r3, #1
 80081bc:	e099      	b.n	80082f2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80081be:	4b4f      	ldr	r3, [pc, #316]	; (80082fc <RCCEx_PLL2_Config+0x15c>)
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	4a4e      	ldr	r2, [pc, #312]	; (80082fc <RCCEx_PLL2_Config+0x15c>)
 80081c4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80081c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80081ca:	f7fa f959 	bl	8002480 <HAL_GetTick>
 80081ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80081d0:	e008      	b.n	80081e4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80081d2:	f7fa f955 	bl	8002480 <HAL_GetTick>
 80081d6:	4602      	mov	r2, r0
 80081d8:	68bb      	ldr	r3, [r7, #8]
 80081da:	1ad3      	subs	r3, r2, r3
 80081dc:	2b02      	cmp	r3, #2
 80081de:	d901      	bls.n	80081e4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80081e0:	2303      	movs	r3, #3
 80081e2:	e086      	b.n	80082f2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80081e4:	4b45      	ldr	r3, [pc, #276]	; (80082fc <RCCEx_PLL2_Config+0x15c>)
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d1f0      	bne.n	80081d2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80081f0:	4b42      	ldr	r3, [pc, #264]	; (80082fc <RCCEx_PLL2_Config+0x15c>)
 80081f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081f4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	031b      	lsls	r3, r3, #12
 80081fe:	493f      	ldr	r1, [pc, #252]	; (80082fc <RCCEx_PLL2_Config+0x15c>)
 8008200:	4313      	orrs	r3, r2
 8008202:	628b      	str	r3, [r1, #40]	; 0x28
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	685b      	ldr	r3, [r3, #4]
 8008208:	3b01      	subs	r3, #1
 800820a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	689b      	ldr	r3, [r3, #8]
 8008212:	3b01      	subs	r3, #1
 8008214:	025b      	lsls	r3, r3, #9
 8008216:	b29b      	uxth	r3, r3
 8008218:	431a      	orrs	r2, r3
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	68db      	ldr	r3, [r3, #12]
 800821e:	3b01      	subs	r3, #1
 8008220:	041b      	lsls	r3, r3, #16
 8008222:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008226:	431a      	orrs	r2, r3
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	691b      	ldr	r3, [r3, #16]
 800822c:	3b01      	subs	r3, #1
 800822e:	061b      	lsls	r3, r3, #24
 8008230:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008234:	4931      	ldr	r1, [pc, #196]	; (80082fc <RCCEx_PLL2_Config+0x15c>)
 8008236:	4313      	orrs	r3, r2
 8008238:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800823a:	4b30      	ldr	r3, [pc, #192]	; (80082fc <RCCEx_PLL2_Config+0x15c>)
 800823c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800823e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	695b      	ldr	r3, [r3, #20]
 8008246:	492d      	ldr	r1, [pc, #180]	; (80082fc <RCCEx_PLL2_Config+0x15c>)
 8008248:	4313      	orrs	r3, r2
 800824a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800824c:	4b2b      	ldr	r3, [pc, #172]	; (80082fc <RCCEx_PLL2_Config+0x15c>)
 800824e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008250:	f023 0220 	bic.w	r2, r3, #32
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	699b      	ldr	r3, [r3, #24]
 8008258:	4928      	ldr	r1, [pc, #160]	; (80082fc <RCCEx_PLL2_Config+0x15c>)
 800825a:	4313      	orrs	r3, r2
 800825c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800825e:	4b27      	ldr	r3, [pc, #156]	; (80082fc <RCCEx_PLL2_Config+0x15c>)
 8008260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008262:	4a26      	ldr	r2, [pc, #152]	; (80082fc <RCCEx_PLL2_Config+0x15c>)
 8008264:	f023 0310 	bic.w	r3, r3, #16
 8008268:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800826a:	4b24      	ldr	r3, [pc, #144]	; (80082fc <RCCEx_PLL2_Config+0x15c>)
 800826c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800826e:	4b24      	ldr	r3, [pc, #144]	; (8008300 <RCCEx_PLL2_Config+0x160>)
 8008270:	4013      	ands	r3, r2
 8008272:	687a      	ldr	r2, [r7, #4]
 8008274:	69d2      	ldr	r2, [r2, #28]
 8008276:	00d2      	lsls	r2, r2, #3
 8008278:	4920      	ldr	r1, [pc, #128]	; (80082fc <RCCEx_PLL2_Config+0x15c>)
 800827a:	4313      	orrs	r3, r2
 800827c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800827e:	4b1f      	ldr	r3, [pc, #124]	; (80082fc <RCCEx_PLL2_Config+0x15c>)
 8008280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008282:	4a1e      	ldr	r2, [pc, #120]	; (80082fc <RCCEx_PLL2_Config+0x15c>)
 8008284:	f043 0310 	orr.w	r3, r3, #16
 8008288:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d106      	bne.n	800829e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008290:	4b1a      	ldr	r3, [pc, #104]	; (80082fc <RCCEx_PLL2_Config+0x15c>)
 8008292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008294:	4a19      	ldr	r2, [pc, #100]	; (80082fc <RCCEx_PLL2_Config+0x15c>)
 8008296:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800829a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800829c:	e00f      	b.n	80082be <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	2b01      	cmp	r3, #1
 80082a2:	d106      	bne.n	80082b2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80082a4:	4b15      	ldr	r3, [pc, #84]	; (80082fc <RCCEx_PLL2_Config+0x15c>)
 80082a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082a8:	4a14      	ldr	r2, [pc, #80]	; (80082fc <RCCEx_PLL2_Config+0x15c>)
 80082aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80082ae:	62d3      	str	r3, [r2, #44]	; 0x2c
 80082b0:	e005      	b.n	80082be <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80082b2:	4b12      	ldr	r3, [pc, #72]	; (80082fc <RCCEx_PLL2_Config+0x15c>)
 80082b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082b6:	4a11      	ldr	r2, [pc, #68]	; (80082fc <RCCEx_PLL2_Config+0x15c>)
 80082b8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80082bc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80082be:	4b0f      	ldr	r3, [pc, #60]	; (80082fc <RCCEx_PLL2_Config+0x15c>)
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	4a0e      	ldr	r2, [pc, #56]	; (80082fc <RCCEx_PLL2_Config+0x15c>)
 80082c4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80082c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80082ca:	f7fa f8d9 	bl	8002480 <HAL_GetTick>
 80082ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80082d0:	e008      	b.n	80082e4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80082d2:	f7fa f8d5 	bl	8002480 <HAL_GetTick>
 80082d6:	4602      	mov	r2, r0
 80082d8:	68bb      	ldr	r3, [r7, #8]
 80082da:	1ad3      	subs	r3, r2, r3
 80082dc:	2b02      	cmp	r3, #2
 80082de:	d901      	bls.n	80082e4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80082e0:	2303      	movs	r3, #3
 80082e2:	e006      	b.n	80082f2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80082e4:	4b05      	ldr	r3, [pc, #20]	; (80082fc <RCCEx_PLL2_Config+0x15c>)
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d0f0      	beq.n	80082d2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80082f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80082f2:	4618      	mov	r0, r3
 80082f4:	3710      	adds	r7, #16
 80082f6:	46bd      	mov	sp, r7
 80082f8:	bd80      	pop	{r7, pc}
 80082fa:	bf00      	nop
 80082fc:	58024400 	.word	0x58024400
 8008300:	ffff0007 	.word	0xffff0007

08008304 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b084      	sub	sp, #16
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
 800830c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800830e:	2300      	movs	r3, #0
 8008310:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008312:	4b53      	ldr	r3, [pc, #332]	; (8008460 <RCCEx_PLL3_Config+0x15c>)
 8008314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008316:	f003 0303 	and.w	r3, r3, #3
 800831a:	2b03      	cmp	r3, #3
 800831c:	d101      	bne.n	8008322 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800831e:	2301      	movs	r3, #1
 8008320:	e099      	b.n	8008456 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008322:	4b4f      	ldr	r3, [pc, #316]	; (8008460 <RCCEx_PLL3_Config+0x15c>)
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	4a4e      	ldr	r2, [pc, #312]	; (8008460 <RCCEx_PLL3_Config+0x15c>)
 8008328:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800832c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800832e:	f7fa f8a7 	bl	8002480 <HAL_GetTick>
 8008332:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008334:	e008      	b.n	8008348 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008336:	f7fa f8a3 	bl	8002480 <HAL_GetTick>
 800833a:	4602      	mov	r2, r0
 800833c:	68bb      	ldr	r3, [r7, #8]
 800833e:	1ad3      	subs	r3, r2, r3
 8008340:	2b02      	cmp	r3, #2
 8008342:	d901      	bls.n	8008348 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008344:	2303      	movs	r3, #3
 8008346:	e086      	b.n	8008456 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008348:	4b45      	ldr	r3, [pc, #276]	; (8008460 <RCCEx_PLL3_Config+0x15c>)
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008350:	2b00      	cmp	r3, #0
 8008352:	d1f0      	bne.n	8008336 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008354:	4b42      	ldr	r3, [pc, #264]	; (8008460 <RCCEx_PLL3_Config+0x15c>)
 8008356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008358:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	051b      	lsls	r3, r3, #20
 8008362:	493f      	ldr	r1, [pc, #252]	; (8008460 <RCCEx_PLL3_Config+0x15c>)
 8008364:	4313      	orrs	r3, r2
 8008366:	628b      	str	r3, [r1, #40]	; 0x28
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	685b      	ldr	r3, [r3, #4]
 800836c:	3b01      	subs	r3, #1
 800836e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	689b      	ldr	r3, [r3, #8]
 8008376:	3b01      	subs	r3, #1
 8008378:	025b      	lsls	r3, r3, #9
 800837a:	b29b      	uxth	r3, r3
 800837c:	431a      	orrs	r2, r3
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	68db      	ldr	r3, [r3, #12]
 8008382:	3b01      	subs	r3, #1
 8008384:	041b      	lsls	r3, r3, #16
 8008386:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800838a:	431a      	orrs	r2, r3
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	691b      	ldr	r3, [r3, #16]
 8008390:	3b01      	subs	r3, #1
 8008392:	061b      	lsls	r3, r3, #24
 8008394:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008398:	4931      	ldr	r1, [pc, #196]	; (8008460 <RCCEx_PLL3_Config+0x15c>)
 800839a:	4313      	orrs	r3, r2
 800839c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800839e:	4b30      	ldr	r3, [pc, #192]	; (8008460 <RCCEx_PLL3_Config+0x15c>)
 80083a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083a2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	695b      	ldr	r3, [r3, #20]
 80083aa:	492d      	ldr	r1, [pc, #180]	; (8008460 <RCCEx_PLL3_Config+0x15c>)
 80083ac:	4313      	orrs	r3, r2
 80083ae:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80083b0:	4b2b      	ldr	r3, [pc, #172]	; (8008460 <RCCEx_PLL3_Config+0x15c>)
 80083b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083b4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	699b      	ldr	r3, [r3, #24]
 80083bc:	4928      	ldr	r1, [pc, #160]	; (8008460 <RCCEx_PLL3_Config+0x15c>)
 80083be:	4313      	orrs	r3, r2
 80083c0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80083c2:	4b27      	ldr	r3, [pc, #156]	; (8008460 <RCCEx_PLL3_Config+0x15c>)
 80083c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083c6:	4a26      	ldr	r2, [pc, #152]	; (8008460 <RCCEx_PLL3_Config+0x15c>)
 80083c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80083cc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80083ce:	4b24      	ldr	r3, [pc, #144]	; (8008460 <RCCEx_PLL3_Config+0x15c>)
 80083d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80083d2:	4b24      	ldr	r3, [pc, #144]	; (8008464 <RCCEx_PLL3_Config+0x160>)
 80083d4:	4013      	ands	r3, r2
 80083d6:	687a      	ldr	r2, [r7, #4]
 80083d8:	69d2      	ldr	r2, [r2, #28]
 80083da:	00d2      	lsls	r2, r2, #3
 80083dc:	4920      	ldr	r1, [pc, #128]	; (8008460 <RCCEx_PLL3_Config+0x15c>)
 80083de:	4313      	orrs	r3, r2
 80083e0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80083e2:	4b1f      	ldr	r3, [pc, #124]	; (8008460 <RCCEx_PLL3_Config+0x15c>)
 80083e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083e6:	4a1e      	ldr	r2, [pc, #120]	; (8008460 <RCCEx_PLL3_Config+0x15c>)
 80083e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80083ec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d106      	bne.n	8008402 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80083f4:	4b1a      	ldr	r3, [pc, #104]	; (8008460 <RCCEx_PLL3_Config+0x15c>)
 80083f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083f8:	4a19      	ldr	r2, [pc, #100]	; (8008460 <RCCEx_PLL3_Config+0x15c>)
 80083fa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80083fe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008400:	e00f      	b.n	8008422 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	2b01      	cmp	r3, #1
 8008406:	d106      	bne.n	8008416 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008408:	4b15      	ldr	r3, [pc, #84]	; (8008460 <RCCEx_PLL3_Config+0x15c>)
 800840a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800840c:	4a14      	ldr	r2, [pc, #80]	; (8008460 <RCCEx_PLL3_Config+0x15c>)
 800840e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008412:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008414:	e005      	b.n	8008422 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008416:	4b12      	ldr	r3, [pc, #72]	; (8008460 <RCCEx_PLL3_Config+0x15c>)
 8008418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800841a:	4a11      	ldr	r2, [pc, #68]	; (8008460 <RCCEx_PLL3_Config+0x15c>)
 800841c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008420:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008422:	4b0f      	ldr	r3, [pc, #60]	; (8008460 <RCCEx_PLL3_Config+0x15c>)
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	4a0e      	ldr	r2, [pc, #56]	; (8008460 <RCCEx_PLL3_Config+0x15c>)
 8008428:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800842c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800842e:	f7fa f827 	bl	8002480 <HAL_GetTick>
 8008432:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008434:	e008      	b.n	8008448 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008436:	f7fa f823 	bl	8002480 <HAL_GetTick>
 800843a:	4602      	mov	r2, r0
 800843c:	68bb      	ldr	r3, [r7, #8]
 800843e:	1ad3      	subs	r3, r2, r3
 8008440:	2b02      	cmp	r3, #2
 8008442:	d901      	bls.n	8008448 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008444:	2303      	movs	r3, #3
 8008446:	e006      	b.n	8008456 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008448:	4b05      	ldr	r3, [pc, #20]	; (8008460 <RCCEx_PLL3_Config+0x15c>)
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008450:	2b00      	cmp	r3, #0
 8008452:	d0f0      	beq.n	8008436 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008454:	7bfb      	ldrb	r3, [r7, #15]
}
 8008456:	4618      	mov	r0, r3
 8008458:	3710      	adds	r7, #16
 800845a:	46bd      	mov	sp, r7
 800845c:	bd80      	pop	{r7, pc}
 800845e:	bf00      	nop
 8008460:	58024400 	.word	0x58024400
 8008464:	ffff0007 	.word	0xffff0007

08008468 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b084      	sub	sp, #16
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d101      	bne.n	800847a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008476:	2301      	movs	r3, #1
 8008478:	e10f      	b.n	800869a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2200      	movs	r2, #0
 800847e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	4a87      	ldr	r2, [pc, #540]	; (80086a4 <HAL_SPI_Init+0x23c>)
 8008486:	4293      	cmp	r3, r2
 8008488:	d00f      	beq.n	80084aa <HAL_SPI_Init+0x42>
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	4a86      	ldr	r2, [pc, #536]	; (80086a8 <HAL_SPI_Init+0x240>)
 8008490:	4293      	cmp	r3, r2
 8008492:	d00a      	beq.n	80084aa <HAL_SPI_Init+0x42>
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	4a84      	ldr	r2, [pc, #528]	; (80086ac <HAL_SPI_Init+0x244>)
 800849a:	4293      	cmp	r3, r2
 800849c:	d005      	beq.n	80084aa <HAL_SPI_Init+0x42>
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	68db      	ldr	r3, [r3, #12]
 80084a2:	2b0f      	cmp	r3, #15
 80084a4:	d901      	bls.n	80084aa <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80084a6:	2301      	movs	r3, #1
 80084a8:	e0f7      	b.n	800869a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80084aa:	6878      	ldr	r0, [r7, #4]
 80084ac:	f000 fba6 	bl	8008bfc <SPI_GetPacketSize>
 80084b0:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	4a7b      	ldr	r2, [pc, #492]	; (80086a4 <HAL_SPI_Init+0x23c>)
 80084b8:	4293      	cmp	r3, r2
 80084ba:	d00c      	beq.n	80084d6 <HAL_SPI_Init+0x6e>
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	4a79      	ldr	r2, [pc, #484]	; (80086a8 <HAL_SPI_Init+0x240>)
 80084c2:	4293      	cmp	r3, r2
 80084c4:	d007      	beq.n	80084d6 <HAL_SPI_Init+0x6e>
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	4a78      	ldr	r2, [pc, #480]	; (80086ac <HAL_SPI_Init+0x244>)
 80084cc:	4293      	cmp	r3, r2
 80084ce:	d002      	beq.n	80084d6 <HAL_SPI_Init+0x6e>
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	2b08      	cmp	r3, #8
 80084d4:	d811      	bhi.n	80084fa <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80084da:	4a72      	ldr	r2, [pc, #456]	; (80086a4 <HAL_SPI_Init+0x23c>)
 80084dc:	4293      	cmp	r3, r2
 80084de:	d009      	beq.n	80084f4 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	4a70      	ldr	r2, [pc, #448]	; (80086a8 <HAL_SPI_Init+0x240>)
 80084e6:	4293      	cmp	r3, r2
 80084e8:	d004      	beq.n	80084f4 <HAL_SPI_Init+0x8c>
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	4a6f      	ldr	r2, [pc, #444]	; (80086ac <HAL_SPI_Init+0x244>)
 80084f0:	4293      	cmp	r3, r2
 80084f2:	d104      	bne.n	80084fe <HAL_SPI_Init+0x96>
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	2b10      	cmp	r3, #16
 80084f8:	d901      	bls.n	80084fe <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80084fa:	2301      	movs	r3, #1
 80084fc:	e0cd      	b.n	800869a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008504:	b2db      	uxtb	r3, r3
 8008506:	2b00      	cmp	r3, #0
 8008508:	d106      	bne.n	8008518 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	2200      	movs	r2, #0
 800850e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008512:	6878      	ldr	r0, [r7, #4]
 8008514:	f7f8 fdba 	bl	800108c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2202      	movs	r2, #2
 800851c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	681a      	ldr	r2, [r3, #0]
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	f022 0201 	bic.w	r2, r2, #1
 800852e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	689b      	ldr	r3, [r3, #8]
 8008536:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800853a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	699b      	ldr	r3, [r3, #24]
 8008540:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008544:	d119      	bne.n	800857a <HAL_SPI_Init+0x112>
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	685b      	ldr	r3, [r3, #4]
 800854a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800854e:	d103      	bne.n	8008558 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008554:	2b00      	cmp	r3, #0
 8008556:	d008      	beq.n	800856a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800855c:	2b00      	cmp	r3, #0
 800855e:	d10c      	bne.n	800857a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008564:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008568:	d107      	bne.n	800857a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	681a      	ldr	r2, [r3, #0]
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008578:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	685b      	ldr	r3, [r3, #4]
 800857e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008582:	2b00      	cmp	r3, #0
 8008584:	d00f      	beq.n	80085a6 <HAL_SPI_Init+0x13e>
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	68db      	ldr	r3, [r3, #12]
 800858a:	2b06      	cmp	r3, #6
 800858c:	d90b      	bls.n	80085a6 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	430a      	orrs	r2, r1
 80085a2:	601a      	str	r2, [r3, #0]
 80085a4:	e007      	b.n	80085b6 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	681a      	ldr	r2, [r3, #0]
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80085b4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	69da      	ldr	r2, [r3, #28]
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085be:	431a      	orrs	r2, r3
 80085c0:	68bb      	ldr	r3, [r7, #8]
 80085c2:	431a      	orrs	r2, r3
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085c8:	ea42 0103 	orr.w	r1, r2, r3
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	68da      	ldr	r2, [r3, #12]
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	430a      	orrs	r2, r1
 80085d6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085e0:	431a      	orrs	r2, r3
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085e6:	431a      	orrs	r2, r3
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	699b      	ldr	r3, [r3, #24]
 80085ec:	431a      	orrs	r2, r3
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	691b      	ldr	r3, [r3, #16]
 80085f2:	431a      	orrs	r2, r3
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	695b      	ldr	r3, [r3, #20]
 80085f8:	431a      	orrs	r2, r3
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	6a1b      	ldr	r3, [r3, #32]
 80085fe:	431a      	orrs	r2, r3
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	685b      	ldr	r3, [r3, #4]
 8008604:	431a      	orrs	r2, r3
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800860a:	431a      	orrs	r2, r3
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	689b      	ldr	r3, [r3, #8]
 8008610:	431a      	orrs	r2, r3
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008616:	ea42 0103 	orr.w	r1, r2, r3
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	430a      	orrs	r2, r1
 8008624:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	685b      	ldr	r3, [r3, #4]
 800862a:	2b00      	cmp	r3, #0
 800862c:	d113      	bne.n	8008656 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	689b      	ldr	r3, [r3, #8]
 8008634:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008640:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	689b      	ldr	r3, [r3, #8]
 8008648:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008654:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	f022 0201 	bic.w	r2, r2, #1
 8008664:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	685b      	ldr	r3, [r3, #4]
 800866a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800866e:	2b00      	cmp	r3, #0
 8008670:	d00a      	beq.n	8008688 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	68db      	ldr	r3, [r3, #12]
 8008678:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	430a      	orrs	r2, r1
 8008686:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2200      	movs	r2, #0
 800868c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2201      	movs	r2, #1
 8008694:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8008698:	2300      	movs	r3, #0
}
 800869a:	4618      	mov	r0, r3
 800869c:	3710      	adds	r7, #16
 800869e:	46bd      	mov	sp, r7
 80086a0:	bd80      	pop	{r7, pc}
 80086a2:	bf00      	nop
 80086a4:	40013000 	.word	0x40013000
 80086a8:	40003800 	.word	0x40003800
 80086ac:	40003c00 	.word	0x40003c00

080086b0 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b08a      	sub	sp, #40	; 0x28
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	691b      	ldr	r3, [r3, #16]
 80086be:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	695b      	ldr	r3, [r3, #20]
 80086c6:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 80086c8:	6a3a      	ldr	r2, [r7, #32]
 80086ca:	69fb      	ldr	r3, [r7, #28]
 80086cc:	4013      	ands	r3, r2
 80086ce:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	689b      	ldr	r3, [r3, #8]
 80086d6:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 80086d8:	2300      	movs	r3, #0
 80086da:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80086e2:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	3330      	adds	r3, #48	; 0x30
 80086ea:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 80086ec:	69fb      	ldr	r3, [r7, #28]
 80086ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d010      	beq.n	8008718 <HAL_SPI_IRQHandler+0x68>
 80086f6:	6a3b      	ldr	r3, [r7, #32]
 80086f8:	f003 0308 	and.w	r3, r3, #8
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d00b      	beq.n	8008718 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	699a      	ldr	r2, [r3, #24]
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800870e:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 8008710:	6878      	ldr	r0, [r7, #4]
 8008712:	f000 f9af 	bl	8008a74 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 8008716:	e192      	b.n	8008a3e <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8008718:	69bb      	ldr	r3, [r7, #24]
 800871a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800871e:	2b00      	cmp	r3, #0
 8008720:	d113      	bne.n	800874a <HAL_SPI_IRQHandler+0x9a>
 8008722:	69bb      	ldr	r3, [r7, #24]
 8008724:	f003 0320 	and.w	r3, r3, #32
 8008728:	2b00      	cmp	r3, #0
 800872a:	d10e      	bne.n	800874a <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800872c:	69bb      	ldr	r3, [r7, #24]
 800872e:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8008732:	2b00      	cmp	r3, #0
 8008734:	d009      	beq.n	800874a <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800873a:	6878      	ldr	r0, [r7, #4]
 800873c:	4798      	blx	r3
    hspi->RxISR(hspi);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008742:	6878      	ldr	r0, [r7, #4]
 8008744:	4798      	blx	r3
    handled = 1UL;
 8008746:	2301      	movs	r3, #1
 8008748:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800874a:	69bb      	ldr	r3, [r7, #24]
 800874c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008750:	2b00      	cmp	r3, #0
 8008752:	d10f      	bne.n	8008774 <HAL_SPI_IRQHandler+0xc4>
 8008754:	69bb      	ldr	r3, [r7, #24]
 8008756:	f003 0301 	and.w	r3, r3, #1
 800875a:	2b00      	cmp	r3, #0
 800875c:	d00a      	beq.n	8008774 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800875e:	69bb      	ldr	r3, [r7, #24]
 8008760:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8008764:	2b00      	cmp	r3, #0
 8008766:	d105      	bne.n	8008774 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800876c:	6878      	ldr	r0, [r7, #4]
 800876e:	4798      	blx	r3
    handled = 1UL;
 8008770:	2301      	movs	r3, #1
 8008772:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8008774:	69bb      	ldr	r3, [r7, #24]
 8008776:	f003 0320 	and.w	r3, r3, #32
 800877a:	2b00      	cmp	r3, #0
 800877c:	d10f      	bne.n	800879e <HAL_SPI_IRQHandler+0xee>
 800877e:	69bb      	ldr	r3, [r7, #24]
 8008780:	f003 0302 	and.w	r3, r3, #2
 8008784:	2b00      	cmp	r3, #0
 8008786:	d00a      	beq.n	800879e <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8008788:	69bb      	ldr	r3, [r7, #24]
 800878a:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800878e:	2b00      	cmp	r3, #0
 8008790:	d105      	bne.n	800879e <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008796:	6878      	ldr	r0, [r7, #4]
 8008798:	4798      	blx	r3
    handled = 1UL;
 800879a:	2301      	movs	r3, #1
 800879c:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 800879e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	f040 8147 	bne.w	8008a34 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 80087a6:	69bb      	ldr	r3, [r7, #24]
 80087a8:	f003 0308 	and.w	r3, r3, #8
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	f000 808b 	beq.w	80088c8 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	699a      	ldr	r2, [r3, #24]
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	f042 0208 	orr.w	r2, r2, #8
 80087c0:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	699a      	ldr	r2, [r3, #24]
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	f042 0210 	orr.w	r2, r2, #16
 80087d0:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	699a      	ldr	r2, [r3, #24]
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80087e0:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	691a      	ldr	r2, [r3, #16]
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	f022 0208 	bic.w	r2, r2, #8
 80087f0:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	689b      	ldr	r3, [r3, #8]
 80087f8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d13d      	bne.n	800887c <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8008800:	e036      	b.n	8008870 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	68db      	ldr	r3, [r3, #12]
 8008806:	2b0f      	cmp	r3, #15
 8008808:	d90b      	bls.n	8008822 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681a      	ldr	r2, [r3, #0]
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008812:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008814:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800881a:	1d1a      	adds	r2, r3, #4
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	665a      	str	r2, [r3, #100]	; 0x64
 8008820:	e01d      	b.n	800885e <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	68db      	ldr	r3, [r3, #12]
 8008826:	2b07      	cmp	r3, #7
 8008828:	d90b      	bls.n	8008842 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800882e:	68fa      	ldr	r2, [r7, #12]
 8008830:	8812      	ldrh	r2, [r2, #0]
 8008832:	b292      	uxth	r2, r2
 8008834:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800883a:	1c9a      	adds	r2, r3, #2
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	665a      	str	r2, [r3, #100]	; 0x64
 8008840:	e00d      	b.n	800885e <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800884e:	7812      	ldrb	r2, [r2, #0]
 8008850:	b2d2      	uxtb	r2, r2
 8008852:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008858:	1c5a      	adds	r2, r3, #1
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	665a      	str	r2, [r3, #100]	; 0x64
        }

        hspi->RxXferCount--;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008864:	b29b      	uxth	r3, r3
 8008866:	3b01      	subs	r3, #1
 8008868:	b29a      	uxth	r2, r3
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008876:	b29b      	uxth	r3, r3
 8008878:	2b00      	cmp	r3, #0
 800887a:	d1c2      	bne.n	8008802 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 800887c:	6878      	ldr	r0, [r7, #4]
 800887e:	f000 f91d 	bl	8008abc <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	2201      	movs	r2, #1
 8008886:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008890:	2b00      	cmp	r3, #0
 8008892:	d003      	beq.n	800889c <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8008894:	6878      	ldr	r0, [r7, #4]
 8008896:	f000 f8e3 	bl	8008a60 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800889a:	e0d0      	b.n	8008a3e <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800889c:	7cfb      	ldrb	r3, [r7, #19]
 800889e:	2b05      	cmp	r3, #5
 80088a0:	d103      	bne.n	80088aa <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 80088a2:	6878      	ldr	r0, [r7, #4]
 80088a4:	f000 f8d2 	bl	8008a4c <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 80088a8:	e0c6      	b.n	8008a38 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 80088aa:	7cfb      	ldrb	r3, [r7, #19]
 80088ac:	2b04      	cmp	r3, #4
 80088ae:	d103      	bne.n	80088b8 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 80088b0:	6878      	ldr	r0, [r7, #4]
 80088b2:	f7f8 fa7b 	bl	8000dac <HAL_SPI_RxCpltCallback>
    return;
 80088b6:	e0bf      	b.n	8008a38 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 80088b8:	7cfb      	ldrb	r3, [r7, #19]
 80088ba:	2b03      	cmp	r3, #3
 80088bc:	f040 80bc 	bne.w	8008a38 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 80088c0:	6878      	ldr	r0, [r7, #4]
 80088c2:	f7f8 fa61 	bl	8000d88 <HAL_SPI_TxCpltCallback>
    return;
 80088c6:	e0b7      	b.n	8008a38 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 80088c8:	69bb      	ldr	r3, [r7, #24]
 80088ca:	f403 7358 	and.w	r3, r3, #864	; 0x360
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	f000 80b5 	beq.w	8008a3e <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 80088d4:	69bb      	ldr	r3, [r7, #24]
 80088d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d00f      	beq.n	80088fe <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80088e4:	f043 0204 	orr.w	r2, r3, #4
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	699a      	ldr	r2, [r3, #24]
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80088fc:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 80088fe:	69bb      	ldr	r3, [r7, #24]
 8008900:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008904:	2b00      	cmp	r3, #0
 8008906:	d00f      	beq.n	8008928 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800890e:	f043 0201 	orr.w	r2, r3, #1
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	699a      	ldr	r2, [r3, #24]
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008926:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8008928:	69bb      	ldr	r3, [r7, #24]
 800892a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800892e:	2b00      	cmp	r3, #0
 8008930:	d00f      	beq.n	8008952 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008938:	f043 0208 	orr.w	r2, r3, #8
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	699a      	ldr	r2, [r3, #24]
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008950:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8008952:	69bb      	ldr	r3, [r7, #24]
 8008954:	f003 0320 	and.w	r3, r3, #32
 8008958:	2b00      	cmp	r3, #0
 800895a:	d00f      	beq.n	800897c <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008962:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	699a      	ldr	r2, [r3, #24]
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	f042 0220 	orr.w	r2, r2, #32
 800897a:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008982:	2b00      	cmp	r3, #0
 8008984:	d05a      	beq.n	8008a3c <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	681a      	ldr	r2, [r3, #0]
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	f022 0201 	bic.w	r2, r2, #1
 8008994:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	6919      	ldr	r1, [r3, #16]
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681a      	ldr	r2, [r3, #0]
 80089a0:	4b28      	ldr	r3, [pc, #160]	; (8008a44 <HAL_SPI_IRQHandler+0x394>)
 80089a2:	400b      	ands	r3, r1
 80089a4:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80089a6:	697b      	ldr	r3, [r7, #20]
 80089a8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80089ac:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80089b0:	d138      	bne.n	8008a24 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	689a      	ldr	r2, [r3, #8]
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80089c0:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d013      	beq.n	80089f2 <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80089ce:	4a1e      	ldr	r2, [pc, #120]	; (8008a48 <HAL_SPI_IRQHandler+0x398>)
 80089d0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80089d6:	4618      	mov	r0, r3
 80089d8:	f7fa fc68 	bl	80032ac <HAL_DMA_Abort_IT>
 80089dc:	4603      	mov	r3, r0
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d007      	beq.n	80089f2 <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80089e8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d020      	beq.n	8008a3c <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80089fe:	4a12      	ldr	r2, [pc, #72]	; (8008a48 <HAL_SPI_IRQHandler+0x398>)
 8008a00:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008a06:	4618      	mov	r0, r3
 8008a08:	f7fa fc50 	bl	80032ac <HAL_DMA_Abort_IT>
 8008a0c:	4603      	mov	r3, r0
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d014      	beq.n	8008a3c <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008a18:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8008a22:	e00b      	b.n	8008a3c <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2201      	movs	r2, #1
 8008a28:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 8008a2c:	6878      	ldr	r0, [r7, #4]
 8008a2e:	f000 f817 	bl	8008a60 <HAL_SPI_ErrorCallback>
    return;
 8008a32:	e003      	b.n	8008a3c <HAL_SPI_IRQHandler+0x38c>
    return;
 8008a34:	bf00      	nop
 8008a36:	e002      	b.n	8008a3e <HAL_SPI_IRQHandler+0x38e>
    return;
 8008a38:	bf00      	nop
 8008a3a:	e000      	b.n	8008a3e <HAL_SPI_IRQHandler+0x38e>
    return;
 8008a3c:	bf00      	nop
  }
}
 8008a3e:	3728      	adds	r7, #40	; 0x28
 8008a40:	46bd      	mov	sp, r7
 8008a42:	bd80      	pop	{r7, pc}
 8008a44:	fffffc94 	.word	0xfffffc94
 8008a48:	08008a89 	.word	0x08008a89

08008a4c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008a4c:	b480      	push	{r7}
 8008a4e:	b083      	sub	sp, #12
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8008a54:	bf00      	nop
 8008a56:	370c      	adds	r7, #12
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5e:	4770      	bx	lr

08008a60 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8008a60:	b480      	push	{r7}
 8008a62:	b083      	sub	sp, #12
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8008a68:	bf00      	nop
 8008a6a:	370c      	adds	r7, #12
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a72:	4770      	bx	lr

08008a74 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi)
{
 8008a74:	b480      	push	{r7}
 8008a76:	b083      	sub	sp, #12
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 8008a7c:	bf00      	nop
 8008a7e:	370c      	adds	r7, #12
 8008a80:	46bd      	mov	sp, r7
 8008a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a86:	4770      	bx	lr

08008a88 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b084      	sub	sp, #16
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a94:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	2200      	movs	r2, #0
 8008a9a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	2201      	movs	r2, #1
 8008aaa:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8008aae:	68f8      	ldr	r0, [r7, #12]
 8008ab0:	f7ff ffd6 	bl	8008a60 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008ab4:	bf00      	nop
 8008ab6:	3710      	adds	r7, #16
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	bd80      	pop	{r7, pc}

08008abc <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8008abc:	b480      	push	{r7}
 8008abe:	b085      	sub	sp, #20
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	695b      	ldr	r3, [r3, #20]
 8008aca:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	699a      	ldr	r2, [r3, #24]
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	f042 0208 	orr.w	r2, r2, #8
 8008ada:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	699a      	ldr	r2, [r3, #24]
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	f042 0210 	orr.w	r2, r2, #16
 8008aea:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	681a      	ldr	r2, [r3, #0]
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	f022 0201 	bic.w	r2, r2, #1
 8008afa:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	6919      	ldr	r1, [r3, #16]
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681a      	ldr	r2, [r3, #0]
 8008b06:	4b3c      	ldr	r3, [pc, #240]	; (8008bf8 <SPI_CloseTransfer+0x13c>)
 8008b08:	400b      	ands	r3, r1
 8008b0a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	689a      	ldr	r2, [r3, #8]
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8008b1a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008b22:	b2db      	uxtb	r3, r3
 8008b24:	2b04      	cmp	r3, #4
 8008b26:	d014      	beq.n	8008b52 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	f003 0320 	and.w	r3, r3, #32
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d00f      	beq.n	8008b52 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008b38:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	699a      	ldr	r2, [r3, #24]
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	f042 0220 	orr.w	r2, r2, #32
 8008b50:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008b58:	b2db      	uxtb	r3, r3
 8008b5a:	2b03      	cmp	r3, #3
 8008b5c:	d014      	beq.n	8008b88 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d00f      	beq.n	8008b88 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008b6e:	f043 0204 	orr.w	r2, r3, #4
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	699a      	ldr	r2, [r3, #24]
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008b86:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d00f      	beq.n	8008bb2 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008b98:	f043 0201 	orr.w	r2, r3, #1
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	699a      	ldr	r2, [r3, #24]
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008bb0:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d00f      	beq.n	8008bdc <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008bc2:	f043 0208 	orr.w	r2, r3, #8
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	699a      	ldr	r2, [r3, #24]
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008bda:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	2200      	movs	r2, #0
 8008be0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	2200      	movs	r2, #0
 8008be8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8008bec:	bf00      	nop
 8008bee:	3714      	adds	r7, #20
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf6:	4770      	bx	lr
 8008bf8:	fffffc90 	.word	0xfffffc90

08008bfc <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8008bfc:	b480      	push	{r7}
 8008bfe:	b085      	sub	sp, #20
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c08:	095b      	lsrs	r3, r3, #5
 8008c0a:	3301      	adds	r3, #1
 8008c0c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	68db      	ldr	r3, [r3, #12]
 8008c12:	3301      	adds	r3, #1
 8008c14:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8008c16:	68bb      	ldr	r3, [r7, #8]
 8008c18:	3307      	adds	r3, #7
 8008c1a:	08db      	lsrs	r3, r3, #3
 8008c1c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8008c1e:	68bb      	ldr	r3, [r7, #8]
 8008c20:	68fa      	ldr	r2, [r7, #12]
 8008c22:	fb02 f303 	mul.w	r3, r2, r3
}
 8008c26:	4618      	mov	r0, r3
 8008c28:	3714      	adds	r7, #20
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c30:	4770      	bx	lr

08008c32 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008c32:	b580      	push	{r7, lr}
 8008c34:	b082      	sub	sp, #8
 8008c36:	af00      	add	r7, sp, #0
 8008c38:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d101      	bne.n	8008c44 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008c40:	2301      	movs	r3, #1
 8008c42:	e049      	b.n	8008cd8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c4a:	b2db      	uxtb	r3, r3
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d106      	bne.n	8008c5e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2200      	movs	r2, #0
 8008c54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008c58:	6878      	ldr	r0, [r7, #4]
 8008c5a:	f7f9 f923 	bl	8001ea4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	2202      	movs	r2, #2
 8008c62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681a      	ldr	r2, [r3, #0]
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	3304      	adds	r3, #4
 8008c6e:	4619      	mov	r1, r3
 8008c70:	4610      	mov	r0, r2
 8008c72:	f000 fb59 	bl	8009328 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	2201      	movs	r2, #1
 8008c7a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	2201      	movs	r2, #1
 8008c82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	2201      	movs	r2, #1
 8008c8a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	2201      	movs	r2, #1
 8008c92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	2201      	movs	r2, #1
 8008c9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	2201      	movs	r2, #1
 8008ca2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	2201      	movs	r2, #1
 8008caa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	2201      	movs	r2, #1
 8008cb2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	2201      	movs	r2, #1
 8008cba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	2201      	movs	r2, #1
 8008cc2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	2201      	movs	r2, #1
 8008cca:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	2201      	movs	r2, #1
 8008cd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008cd6:	2300      	movs	r3, #0
}
 8008cd8:	4618      	mov	r0, r3
 8008cda:	3708      	adds	r7, #8
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	bd80      	pop	{r7, pc}

08008ce0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b082      	sub	sp, #8
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d101      	bne.n	8008cf2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008cee:	2301      	movs	r3, #1
 8008cf0:	e049      	b.n	8008d86 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008cf8:	b2db      	uxtb	r3, r3
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d106      	bne.n	8008d0c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	2200      	movs	r2, #0
 8008d02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008d06:	6878      	ldr	r0, [r7, #4]
 8008d08:	f7f9 f8ac 	bl	8001e64 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	2202      	movs	r2, #2
 8008d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681a      	ldr	r2, [r3, #0]
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	3304      	adds	r3, #4
 8008d1c:	4619      	mov	r1, r3
 8008d1e:	4610      	mov	r0, r2
 8008d20:	f000 fb02 	bl	8009328 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2201      	movs	r2, #1
 8008d28:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2201      	movs	r2, #1
 8008d30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	2201      	movs	r2, #1
 8008d38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2201      	movs	r2, #1
 8008d40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	2201      	movs	r2, #1
 8008d48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	2201      	movs	r2, #1
 8008d50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	2201      	movs	r2, #1
 8008d58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	2201      	movs	r2, #1
 8008d60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	2201      	movs	r2, #1
 8008d68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	2201      	movs	r2, #1
 8008d70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	2201      	movs	r2, #1
 8008d78:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	2201      	movs	r2, #1
 8008d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008d84:	2300      	movs	r3, #0
}
 8008d86:	4618      	mov	r0, r3
 8008d88:	3708      	adds	r7, #8
 8008d8a:	46bd      	mov	sp, r7
 8008d8c:	bd80      	pop	{r7, pc}
	...

08008d90 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b084      	sub	sp, #16
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	6078      	str	r0, [r7, #4]
 8008d98:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d109      	bne.n	8008db4 <HAL_TIM_PWM_Start+0x24>
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008da6:	b2db      	uxtb	r3, r3
 8008da8:	2b01      	cmp	r3, #1
 8008daa:	bf14      	ite	ne
 8008dac:	2301      	movne	r3, #1
 8008dae:	2300      	moveq	r3, #0
 8008db0:	b2db      	uxtb	r3, r3
 8008db2:	e03c      	b.n	8008e2e <HAL_TIM_PWM_Start+0x9e>
 8008db4:	683b      	ldr	r3, [r7, #0]
 8008db6:	2b04      	cmp	r3, #4
 8008db8:	d109      	bne.n	8008dce <HAL_TIM_PWM_Start+0x3e>
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008dc0:	b2db      	uxtb	r3, r3
 8008dc2:	2b01      	cmp	r3, #1
 8008dc4:	bf14      	ite	ne
 8008dc6:	2301      	movne	r3, #1
 8008dc8:	2300      	moveq	r3, #0
 8008dca:	b2db      	uxtb	r3, r3
 8008dcc:	e02f      	b.n	8008e2e <HAL_TIM_PWM_Start+0x9e>
 8008dce:	683b      	ldr	r3, [r7, #0]
 8008dd0:	2b08      	cmp	r3, #8
 8008dd2:	d109      	bne.n	8008de8 <HAL_TIM_PWM_Start+0x58>
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008dda:	b2db      	uxtb	r3, r3
 8008ddc:	2b01      	cmp	r3, #1
 8008dde:	bf14      	ite	ne
 8008de0:	2301      	movne	r3, #1
 8008de2:	2300      	moveq	r3, #0
 8008de4:	b2db      	uxtb	r3, r3
 8008de6:	e022      	b.n	8008e2e <HAL_TIM_PWM_Start+0x9e>
 8008de8:	683b      	ldr	r3, [r7, #0]
 8008dea:	2b0c      	cmp	r3, #12
 8008dec:	d109      	bne.n	8008e02 <HAL_TIM_PWM_Start+0x72>
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008df4:	b2db      	uxtb	r3, r3
 8008df6:	2b01      	cmp	r3, #1
 8008df8:	bf14      	ite	ne
 8008dfa:	2301      	movne	r3, #1
 8008dfc:	2300      	moveq	r3, #0
 8008dfe:	b2db      	uxtb	r3, r3
 8008e00:	e015      	b.n	8008e2e <HAL_TIM_PWM_Start+0x9e>
 8008e02:	683b      	ldr	r3, [r7, #0]
 8008e04:	2b10      	cmp	r3, #16
 8008e06:	d109      	bne.n	8008e1c <HAL_TIM_PWM_Start+0x8c>
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008e0e:	b2db      	uxtb	r3, r3
 8008e10:	2b01      	cmp	r3, #1
 8008e12:	bf14      	ite	ne
 8008e14:	2301      	movne	r3, #1
 8008e16:	2300      	moveq	r3, #0
 8008e18:	b2db      	uxtb	r3, r3
 8008e1a:	e008      	b.n	8008e2e <HAL_TIM_PWM_Start+0x9e>
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008e22:	b2db      	uxtb	r3, r3
 8008e24:	2b01      	cmp	r3, #1
 8008e26:	bf14      	ite	ne
 8008e28:	2301      	movne	r3, #1
 8008e2a:	2300      	moveq	r3, #0
 8008e2c:	b2db      	uxtb	r3, r3
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d001      	beq.n	8008e36 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8008e32:	2301      	movs	r3, #1
 8008e34:	e0ab      	b.n	8008f8e <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008e36:	683b      	ldr	r3, [r7, #0]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d104      	bne.n	8008e46 <HAL_TIM_PWM_Start+0xb6>
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2202      	movs	r2, #2
 8008e40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008e44:	e023      	b.n	8008e8e <HAL_TIM_PWM_Start+0xfe>
 8008e46:	683b      	ldr	r3, [r7, #0]
 8008e48:	2b04      	cmp	r3, #4
 8008e4a:	d104      	bne.n	8008e56 <HAL_TIM_PWM_Start+0xc6>
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	2202      	movs	r2, #2
 8008e50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008e54:	e01b      	b.n	8008e8e <HAL_TIM_PWM_Start+0xfe>
 8008e56:	683b      	ldr	r3, [r7, #0]
 8008e58:	2b08      	cmp	r3, #8
 8008e5a:	d104      	bne.n	8008e66 <HAL_TIM_PWM_Start+0xd6>
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	2202      	movs	r2, #2
 8008e60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008e64:	e013      	b.n	8008e8e <HAL_TIM_PWM_Start+0xfe>
 8008e66:	683b      	ldr	r3, [r7, #0]
 8008e68:	2b0c      	cmp	r3, #12
 8008e6a:	d104      	bne.n	8008e76 <HAL_TIM_PWM_Start+0xe6>
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2202      	movs	r2, #2
 8008e70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008e74:	e00b      	b.n	8008e8e <HAL_TIM_PWM_Start+0xfe>
 8008e76:	683b      	ldr	r3, [r7, #0]
 8008e78:	2b10      	cmp	r3, #16
 8008e7a:	d104      	bne.n	8008e86 <HAL_TIM_PWM_Start+0xf6>
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	2202      	movs	r2, #2
 8008e80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008e84:	e003      	b.n	8008e8e <HAL_TIM_PWM_Start+0xfe>
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	2202      	movs	r2, #2
 8008e8a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	2201      	movs	r2, #1
 8008e94:	6839      	ldr	r1, [r7, #0]
 8008e96:	4618      	mov	r0, r3
 8008e98:	f000 ff2b 	bl	8009cf2 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	4a3d      	ldr	r2, [pc, #244]	; (8008f98 <HAL_TIM_PWM_Start+0x208>)
 8008ea2:	4293      	cmp	r3, r2
 8008ea4:	d013      	beq.n	8008ece <HAL_TIM_PWM_Start+0x13e>
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	4a3c      	ldr	r2, [pc, #240]	; (8008f9c <HAL_TIM_PWM_Start+0x20c>)
 8008eac:	4293      	cmp	r3, r2
 8008eae:	d00e      	beq.n	8008ece <HAL_TIM_PWM_Start+0x13e>
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	4a3a      	ldr	r2, [pc, #232]	; (8008fa0 <HAL_TIM_PWM_Start+0x210>)
 8008eb6:	4293      	cmp	r3, r2
 8008eb8:	d009      	beq.n	8008ece <HAL_TIM_PWM_Start+0x13e>
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	4a39      	ldr	r2, [pc, #228]	; (8008fa4 <HAL_TIM_PWM_Start+0x214>)
 8008ec0:	4293      	cmp	r3, r2
 8008ec2:	d004      	beq.n	8008ece <HAL_TIM_PWM_Start+0x13e>
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	4a37      	ldr	r2, [pc, #220]	; (8008fa8 <HAL_TIM_PWM_Start+0x218>)
 8008eca:	4293      	cmp	r3, r2
 8008ecc:	d101      	bne.n	8008ed2 <HAL_TIM_PWM_Start+0x142>
 8008ece:	2301      	movs	r3, #1
 8008ed0:	e000      	b.n	8008ed4 <HAL_TIM_PWM_Start+0x144>
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d007      	beq.n	8008ee8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008ee6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	4a2a      	ldr	r2, [pc, #168]	; (8008f98 <HAL_TIM_PWM_Start+0x208>)
 8008eee:	4293      	cmp	r3, r2
 8008ef0:	d02c      	beq.n	8008f4c <HAL_TIM_PWM_Start+0x1bc>
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008efa:	d027      	beq.n	8008f4c <HAL_TIM_PWM_Start+0x1bc>
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	4a2a      	ldr	r2, [pc, #168]	; (8008fac <HAL_TIM_PWM_Start+0x21c>)
 8008f02:	4293      	cmp	r3, r2
 8008f04:	d022      	beq.n	8008f4c <HAL_TIM_PWM_Start+0x1bc>
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	4a29      	ldr	r2, [pc, #164]	; (8008fb0 <HAL_TIM_PWM_Start+0x220>)
 8008f0c:	4293      	cmp	r3, r2
 8008f0e:	d01d      	beq.n	8008f4c <HAL_TIM_PWM_Start+0x1bc>
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	4a27      	ldr	r2, [pc, #156]	; (8008fb4 <HAL_TIM_PWM_Start+0x224>)
 8008f16:	4293      	cmp	r3, r2
 8008f18:	d018      	beq.n	8008f4c <HAL_TIM_PWM_Start+0x1bc>
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	4a1f      	ldr	r2, [pc, #124]	; (8008f9c <HAL_TIM_PWM_Start+0x20c>)
 8008f20:	4293      	cmp	r3, r2
 8008f22:	d013      	beq.n	8008f4c <HAL_TIM_PWM_Start+0x1bc>
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	4a23      	ldr	r2, [pc, #140]	; (8008fb8 <HAL_TIM_PWM_Start+0x228>)
 8008f2a:	4293      	cmp	r3, r2
 8008f2c:	d00e      	beq.n	8008f4c <HAL_TIM_PWM_Start+0x1bc>
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	4a1b      	ldr	r2, [pc, #108]	; (8008fa0 <HAL_TIM_PWM_Start+0x210>)
 8008f34:	4293      	cmp	r3, r2
 8008f36:	d009      	beq.n	8008f4c <HAL_TIM_PWM_Start+0x1bc>
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	4a1f      	ldr	r2, [pc, #124]	; (8008fbc <HAL_TIM_PWM_Start+0x22c>)
 8008f3e:	4293      	cmp	r3, r2
 8008f40:	d004      	beq.n	8008f4c <HAL_TIM_PWM_Start+0x1bc>
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	4a1e      	ldr	r2, [pc, #120]	; (8008fc0 <HAL_TIM_PWM_Start+0x230>)
 8008f48:	4293      	cmp	r3, r2
 8008f4a:	d115      	bne.n	8008f78 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	689a      	ldr	r2, [r3, #8]
 8008f52:	4b1c      	ldr	r3, [pc, #112]	; (8008fc4 <HAL_TIM_PWM_Start+0x234>)
 8008f54:	4013      	ands	r3, r2
 8008f56:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	2b06      	cmp	r3, #6
 8008f5c:	d015      	beq.n	8008f8a <HAL_TIM_PWM_Start+0x1fa>
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f64:	d011      	beq.n	8008f8a <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	681a      	ldr	r2, [r3, #0]
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	f042 0201 	orr.w	r2, r2, #1
 8008f74:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f76:	e008      	b.n	8008f8a <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	681a      	ldr	r2, [r3, #0]
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	f042 0201 	orr.w	r2, r2, #1
 8008f86:	601a      	str	r2, [r3, #0]
 8008f88:	e000      	b.n	8008f8c <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f8a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008f8c:	2300      	movs	r3, #0
}
 8008f8e:	4618      	mov	r0, r3
 8008f90:	3710      	adds	r7, #16
 8008f92:	46bd      	mov	sp, r7
 8008f94:	bd80      	pop	{r7, pc}
 8008f96:	bf00      	nop
 8008f98:	40010000 	.word	0x40010000
 8008f9c:	40010400 	.word	0x40010400
 8008fa0:	40014000 	.word	0x40014000
 8008fa4:	40014400 	.word	0x40014400
 8008fa8:	40014800 	.word	0x40014800
 8008fac:	40000400 	.word	0x40000400
 8008fb0:	40000800 	.word	0x40000800
 8008fb4:	40000c00 	.word	0x40000c00
 8008fb8:	40001800 	.word	0x40001800
 8008fbc:	4000e000 	.word	0x4000e000
 8008fc0:	4000e400 	.word	0x4000e400
 8008fc4:	00010007 	.word	0x00010007

08008fc8 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b082      	sub	sp, #8
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
 8008fd0:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d101      	bne.n	8008fdc <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8008fd8:	2301      	movs	r3, #1
 8008fda:	e041      	b.n	8009060 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008fe2:	b2db      	uxtb	r3, r3
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d106      	bne.n	8008ff6 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	2200      	movs	r2, #0
 8008fec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8008ff0:	6878      	ldr	r0, [r7, #4]
 8008ff2:	f000 f839 	bl	8009068 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	2202      	movs	r2, #2
 8008ffa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681a      	ldr	r2, [r3, #0]
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	3304      	adds	r3, #4
 8009006:	4619      	mov	r1, r3
 8009008:	4610      	mov	r0, r2
 800900a:	f000 f98d 	bl	8009328 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	681a      	ldr	r2, [r3, #0]
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	f022 0208 	bic.w	r2, r2, #8
 800901c:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	6819      	ldr	r1, [r3, #0]
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	683a      	ldr	r2, [r7, #0]
 800902a:	430a      	orrs	r2, r1
 800902c:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	2201      	movs	r2, #1
 8009032:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	2201      	movs	r2, #1
 800903a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	2201      	movs	r2, #1
 8009042:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	2201      	movs	r2, #1
 800904a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	2201      	movs	r2, #1
 8009052:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	2201      	movs	r2, #1
 800905a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800905e:	2300      	movs	r3, #0
}
 8009060:	4618      	mov	r0, r3
 8009062:	3708      	adds	r7, #8
 8009064:	46bd      	mov	sp, r7
 8009066:	bd80      	pop	{r7, pc}

08009068 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8009068:	b480      	push	{r7}
 800906a:	b083      	sub	sp, #12
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8009070:	bf00      	nop
 8009072:	370c      	adds	r7, #12
 8009074:	46bd      	mov	sp, r7
 8009076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907a:	4770      	bx	lr

0800907c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b086      	sub	sp, #24
 8009080:	af00      	add	r7, sp, #0
 8009082:	60f8      	str	r0, [r7, #12]
 8009084:	60b9      	str	r1, [r7, #8]
 8009086:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009088:	2300      	movs	r3, #0
 800908a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009092:	2b01      	cmp	r3, #1
 8009094:	d101      	bne.n	800909a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009096:	2302      	movs	r3, #2
 8009098:	e0ff      	b.n	800929a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	2201      	movs	r2, #1
 800909e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	2b14      	cmp	r3, #20
 80090a6:	f200 80f0 	bhi.w	800928a <HAL_TIM_PWM_ConfigChannel+0x20e>
 80090aa:	a201      	add	r2, pc, #4	; (adr r2, 80090b0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80090ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090b0:	08009105 	.word	0x08009105
 80090b4:	0800928b 	.word	0x0800928b
 80090b8:	0800928b 	.word	0x0800928b
 80090bc:	0800928b 	.word	0x0800928b
 80090c0:	08009145 	.word	0x08009145
 80090c4:	0800928b 	.word	0x0800928b
 80090c8:	0800928b 	.word	0x0800928b
 80090cc:	0800928b 	.word	0x0800928b
 80090d0:	08009187 	.word	0x08009187
 80090d4:	0800928b 	.word	0x0800928b
 80090d8:	0800928b 	.word	0x0800928b
 80090dc:	0800928b 	.word	0x0800928b
 80090e0:	080091c7 	.word	0x080091c7
 80090e4:	0800928b 	.word	0x0800928b
 80090e8:	0800928b 	.word	0x0800928b
 80090ec:	0800928b 	.word	0x0800928b
 80090f0:	08009209 	.word	0x08009209
 80090f4:	0800928b 	.word	0x0800928b
 80090f8:	0800928b 	.word	0x0800928b
 80090fc:	0800928b 	.word	0x0800928b
 8009100:	08009249 	.word	0x08009249
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	68b9      	ldr	r1, [r7, #8]
 800910a:	4618      	mov	r0, r3
 800910c:	f000 f9b2 	bl	8009474 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	699a      	ldr	r2, [r3, #24]
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	f042 0208 	orr.w	r2, r2, #8
 800911e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	699a      	ldr	r2, [r3, #24]
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	f022 0204 	bic.w	r2, r2, #4
 800912e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	6999      	ldr	r1, [r3, #24]
 8009136:	68bb      	ldr	r3, [r7, #8]
 8009138:	691a      	ldr	r2, [r3, #16]
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	430a      	orrs	r2, r1
 8009140:	619a      	str	r2, [r3, #24]
      break;
 8009142:	e0a5      	b.n	8009290 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	68b9      	ldr	r1, [r7, #8]
 800914a:	4618      	mov	r0, r3
 800914c:	f000 fa22 	bl	8009594 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	699a      	ldr	r2, [r3, #24]
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800915e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	699a      	ldr	r2, [r3, #24]
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800916e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	6999      	ldr	r1, [r3, #24]
 8009176:	68bb      	ldr	r3, [r7, #8]
 8009178:	691b      	ldr	r3, [r3, #16]
 800917a:	021a      	lsls	r2, r3, #8
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	430a      	orrs	r2, r1
 8009182:	619a      	str	r2, [r3, #24]
      break;
 8009184:	e084      	b.n	8009290 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	68b9      	ldr	r1, [r7, #8]
 800918c:	4618      	mov	r0, r3
 800918e:	f000 fa8b 	bl	80096a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	69da      	ldr	r2, [r3, #28]
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	f042 0208 	orr.w	r2, r2, #8
 80091a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	69da      	ldr	r2, [r3, #28]
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	f022 0204 	bic.w	r2, r2, #4
 80091b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	69d9      	ldr	r1, [r3, #28]
 80091b8:	68bb      	ldr	r3, [r7, #8]
 80091ba:	691a      	ldr	r2, [r3, #16]
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	430a      	orrs	r2, r1
 80091c2:	61da      	str	r2, [r3, #28]
      break;
 80091c4:	e064      	b.n	8009290 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	68b9      	ldr	r1, [r7, #8]
 80091cc:	4618      	mov	r0, r3
 80091ce:	f000 faf3 	bl	80097b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	69da      	ldr	r2, [r3, #28]
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80091e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	69da      	ldr	r2, [r3, #28]
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80091f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	69d9      	ldr	r1, [r3, #28]
 80091f8:	68bb      	ldr	r3, [r7, #8]
 80091fa:	691b      	ldr	r3, [r3, #16]
 80091fc:	021a      	lsls	r2, r3, #8
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	430a      	orrs	r2, r1
 8009204:	61da      	str	r2, [r3, #28]
      break;
 8009206:	e043      	b.n	8009290 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	68b9      	ldr	r1, [r7, #8]
 800920e:	4618      	mov	r0, r3
 8009210:	f000 fb3c 	bl	800988c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	f042 0208 	orr.w	r2, r2, #8
 8009222:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	f022 0204 	bic.w	r2, r2, #4
 8009232:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800923a:	68bb      	ldr	r3, [r7, #8]
 800923c:	691a      	ldr	r2, [r3, #16]
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	430a      	orrs	r2, r1
 8009244:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009246:	e023      	b.n	8009290 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	68b9      	ldr	r1, [r7, #8]
 800924e:	4618      	mov	r0, r3
 8009250:	f000 fb80 	bl	8009954 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009262:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009272:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800927a:	68bb      	ldr	r3, [r7, #8]
 800927c:	691b      	ldr	r3, [r3, #16]
 800927e:	021a      	lsls	r2, r3, #8
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	430a      	orrs	r2, r1
 8009286:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009288:	e002      	b.n	8009290 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800928a:	2301      	movs	r3, #1
 800928c:	75fb      	strb	r3, [r7, #23]
      break;
 800928e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	2200      	movs	r2, #0
 8009294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009298:	7dfb      	ldrb	r3, [r7, #23]
}
 800929a:	4618      	mov	r0, r3
 800929c:	3718      	adds	r7, #24
 800929e:	46bd      	mov	sp, r7
 80092a0:	bd80      	pop	{r7, pc}
 80092a2:	bf00      	nop

080092a4 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80092a4:	b580      	push	{r7, lr}
 80092a6:	b082      	sub	sp, #8
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
 80092ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80092b4:	2b01      	cmp	r3, #1
 80092b6:	d101      	bne.n	80092bc <HAL_TIM_SlaveConfigSynchro+0x18>
 80092b8:	2302      	movs	r3, #2
 80092ba:	e031      	b.n	8009320 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	2201      	movs	r2, #1
 80092c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	2202      	movs	r2, #2
 80092c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80092cc:	6839      	ldr	r1, [r7, #0]
 80092ce:	6878      	ldr	r0, [r7, #4]
 80092d0:	f000 fba6 	bl	8009a20 <TIM_SlaveTimer_SetConfig>
 80092d4:	4603      	mov	r3, r0
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d009      	beq.n	80092ee <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	2201      	movs	r2, #1
 80092de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	2200      	movs	r2, #0
 80092e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80092ea:	2301      	movs	r3, #1
 80092ec:	e018      	b.n	8009320 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	68da      	ldr	r2, [r3, #12]
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80092fc:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	68da      	ldr	r2, [r3, #12]
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800930c:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	2201      	movs	r2, #1
 8009312:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	2200      	movs	r2, #0
 800931a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800931e:	2300      	movs	r3, #0
}
 8009320:	4618      	mov	r0, r3
 8009322:	3708      	adds	r7, #8
 8009324:	46bd      	mov	sp, r7
 8009326:	bd80      	pop	{r7, pc}

08009328 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009328:	b480      	push	{r7}
 800932a:	b085      	sub	sp, #20
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
 8009330:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	4a44      	ldr	r2, [pc, #272]	; (800944c <TIM_Base_SetConfig+0x124>)
 800933c:	4293      	cmp	r3, r2
 800933e:	d013      	beq.n	8009368 <TIM_Base_SetConfig+0x40>
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009346:	d00f      	beq.n	8009368 <TIM_Base_SetConfig+0x40>
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	4a41      	ldr	r2, [pc, #260]	; (8009450 <TIM_Base_SetConfig+0x128>)
 800934c:	4293      	cmp	r3, r2
 800934e:	d00b      	beq.n	8009368 <TIM_Base_SetConfig+0x40>
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	4a40      	ldr	r2, [pc, #256]	; (8009454 <TIM_Base_SetConfig+0x12c>)
 8009354:	4293      	cmp	r3, r2
 8009356:	d007      	beq.n	8009368 <TIM_Base_SetConfig+0x40>
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	4a3f      	ldr	r2, [pc, #252]	; (8009458 <TIM_Base_SetConfig+0x130>)
 800935c:	4293      	cmp	r3, r2
 800935e:	d003      	beq.n	8009368 <TIM_Base_SetConfig+0x40>
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	4a3e      	ldr	r2, [pc, #248]	; (800945c <TIM_Base_SetConfig+0x134>)
 8009364:	4293      	cmp	r3, r2
 8009366:	d108      	bne.n	800937a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800936e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009370:	683b      	ldr	r3, [r7, #0]
 8009372:	685b      	ldr	r3, [r3, #4]
 8009374:	68fa      	ldr	r2, [r7, #12]
 8009376:	4313      	orrs	r3, r2
 8009378:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	4a33      	ldr	r2, [pc, #204]	; (800944c <TIM_Base_SetConfig+0x124>)
 800937e:	4293      	cmp	r3, r2
 8009380:	d027      	beq.n	80093d2 <TIM_Base_SetConfig+0xaa>
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009388:	d023      	beq.n	80093d2 <TIM_Base_SetConfig+0xaa>
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	4a30      	ldr	r2, [pc, #192]	; (8009450 <TIM_Base_SetConfig+0x128>)
 800938e:	4293      	cmp	r3, r2
 8009390:	d01f      	beq.n	80093d2 <TIM_Base_SetConfig+0xaa>
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	4a2f      	ldr	r2, [pc, #188]	; (8009454 <TIM_Base_SetConfig+0x12c>)
 8009396:	4293      	cmp	r3, r2
 8009398:	d01b      	beq.n	80093d2 <TIM_Base_SetConfig+0xaa>
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	4a2e      	ldr	r2, [pc, #184]	; (8009458 <TIM_Base_SetConfig+0x130>)
 800939e:	4293      	cmp	r3, r2
 80093a0:	d017      	beq.n	80093d2 <TIM_Base_SetConfig+0xaa>
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	4a2d      	ldr	r2, [pc, #180]	; (800945c <TIM_Base_SetConfig+0x134>)
 80093a6:	4293      	cmp	r3, r2
 80093a8:	d013      	beq.n	80093d2 <TIM_Base_SetConfig+0xaa>
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	4a2c      	ldr	r2, [pc, #176]	; (8009460 <TIM_Base_SetConfig+0x138>)
 80093ae:	4293      	cmp	r3, r2
 80093b0:	d00f      	beq.n	80093d2 <TIM_Base_SetConfig+0xaa>
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	4a2b      	ldr	r2, [pc, #172]	; (8009464 <TIM_Base_SetConfig+0x13c>)
 80093b6:	4293      	cmp	r3, r2
 80093b8:	d00b      	beq.n	80093d2 <TIM_Base_SetConfig+0xaa>
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	4a2a      	ldr	r2, [pc, #168]	; (8009468 <TIM_Base_SetConfig+0x140>)
 80093be:	4293      	cmp	r3, r2
 80093c0:	d007      	beq.n	80093d2 <TIM_Base_SetConfig+0xaa>
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	4a29      	ldr	r2, [pc, #164]	; (800946c <TIM_Base_SetConfig+0x144>)
 80093c6:	4293      	cmp	r3, r2
 80093c8:	d003      	beq.n	80093d2 <TIM_Base_SetConfig+0xaa>
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	4a28      	ldr	r2, [pc, #160]	; (8009470 <TIM_Base_SetConfig+0x148>)
 80093ce:	4293      	cmp	r3, r2
 80093d0:	d108      	bne.n	80093e4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80093d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80093da:	683b      	ldr	r3, [r7, #0]
 80093dc:	68db      	ldr	r3, [r3, #12]
 80093de:	68fa      	ldr	r2, [r7, #12]
 80093e0:	4313      	orrs	r3, r2
 80093e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80093ea:	683b      	ldr	r3, [r7, #0]
 80093ec:	695b      	ldr	r3, [r3, #20]
 80093ee:	4313      	orrs	r3, r2
 80093f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	68fa      	ldr	r2, [r7, #12]
 80093f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80093f8:	683b      	ldr	r3, [r7, #0]
 80093fa:	689a      	ldr	r2, [r3, #8]
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009400:	683b      	ldr	r3, [r7, #0]
 8009402:	681a      	ldr	r2, [r3, #0]
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	4a10      	ldr	r2, [pc, #64]	; (800944c <TIM_Base_SetConfig+0x124>)
 800940c:	4293      	cmp	r3, r2
 800940e:	d00f      	beq.n	8009430 <TIM_Base_SetConfig+0x108>
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	4a12      	ldr	r2, [pc, #72]	; (800945c <TIM_Base_SetConfig+0x134>)
 8009414:	4293      	cmp	r3, r2
 8009416:	d00b      	beq.n	8009430 <TIM_Base_SetConfig+0x108>
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	4a11      	ldr	r2, [pc, #68]	; (8009460 <TIM_Base_SetConfig+0x138>)
 800941c:	4293      	cmp	r3, r2
 800941e:	d007      	beq.n	8009430 <TIM_Base_SetConfig+0x108>
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	4a10      	ldr	r2, [pc, #64]	; (8009464 <TIM_Base_SetConfig+0x13c>)
 8009424:	4293      	cmp	r3, r2
 8009426:	d003      	beq.n	8009430 <TIM_Base_SetConfig+0x108>
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	4a0f      	ldr	r2, [pc, #60]	; (8009468 <TIM_Base_SetConfig+0x140>)
 800942c:	4293      	cmp	r3, r2
 800942e:	d103      	bne.n	8009438 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009430:	683b      	ldr	r3, [r7, #0]
 8009432:	691a      	ldr	r2, [r3, #16]
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	2201      	movs	r2, #1
 800943c:	615a      	str	r2, [r3, #20]
}
 800943e:	bf00      	nop
 8009440:	3714      	adds	r7, #20
 8009442:	46bd      	mov	sp, r7
 8009444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009448:	4770      	bx	lr
 800944a:	bf00      	nop
 800944c:	40010000 	.word	0x40010000
 8009450:	40000400 	.word	0x40000400
 8009454:	40000800 	.word	0x40000800
 8009458:	40000c00 	.word	0x40000c00
 800945c:	40010400 	.word	0x40010400
 8009460:	40014000 	.word	0x40014000
 8009464:	40014400 	.word	0x40014400
 8009468:	40014800 	.word	0x40014800
 800946c:	4000e000 	.word	0x4000e000
 8009470:	4000e400 	.word	0x4000e400

08009474 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009474:	b480      	push	{r7}
 8009476:	b087      	sub	sp, #28
 8009478:	af00      	add	r7, sp, #0
 800947a:	6078      	str	r0, [r7, #4]
 800947c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	6a1b      	ldr	r3, [r3, #32]
 8009482:	f023 0201 	bic.w	r2, r3, #1
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	6a1b      	ldr	r3, [r3, #32]
 800948e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	685b      	ldr	r3, [r3, #4]
 8009494:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	699b      	ldr	r3, [r3, #24]
 800949a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800949c:	68fa      	ldr	r2, [r7, #12]
 800949e:	4b37      	ldr	r3, [pc, #220]	; (800957c <TIM_OC1_SetConfig+0x108>)
 80094a0:	4013      	ands	r3, r2
 80094a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	f023 0303 	bic.w	r3, r3, #3
 80094aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80094ac:	683b      	ldr	r3, [r7, #0]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	68fa      	ldr	r2, [r7, #12]
 80094b2:	4313      	orrs	r3, r2
 80094b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80094b6:	697b      	ldr	r3, [r7, #20]
 80094b8:	f023 0302 	bic.w	r3, r3, #2
 80094bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80094be:	683b      	ldr	r3, [r7, #0]
 80094c0:	689b      	ldr	r3, [r3, #8]
 80094c2:	697a      	ldr	r2, [r7, #20]
 80094c4:	4313      	orrs	r3, r2
 80094c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	4a2d      	ldr	r2, [pc, #180]	; (8009580 <TIM_OC1_SetConfig+0x10c>)
 80094cc:	4293      	cmp	r3, r2
 80094ce:	d00f      	beq.n	80094f0 <TIM_OC1_SetConfig+0x7c>
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	4a2c      	ldr	r2, [pc, #176]	; (8009584 <TIM_OC1_SetConfig+0x110>)
 80094d4:	4293      	cmp	r3, r2
 80094d6:	d00b      	beq.n	80094f0 <TIM_OC1_SetConfig+0x7c>
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	4a2b      	ldr	r2, [pc, #172]	; (8009588 <TIM_OC1_SetConfig+0x114>)
 80094dc:	4293      	cmp	r3, r2
 80094de:	d007      	beq.n	80094f0 <TIM_OC1_SetConfig+0x7c>
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	4a2a      	ldr	r2, [pc, #168]	; (800958c <TIM_OC1_SetConfig+0x118>)
 80094e4:	4293      	cmp	r3, r2
 80094e6:	d003      	beq.n	80094f0 <TIM_OC1_SetConfig+0x7c>
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	4a29      	ldr	r2, [pc, #164]	; (8009590 <TIM_OC1_SetConfig+0x11c>)
 80094ec:	4293      	cmp	r3, r2
 80094ee:	d10c      	bne.n	800950a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80094f0:	697b      	ldr	r3, [r7, #20]
 80094f2:	f023 0308 	bic.w	r3, r3, #8
 80094f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80094f8:	683b      	ldr	r3, [r7, #0]
 80094fa:	68db      	ldr	r3, [r3, #12]
 80094fc:	697a      	ldr	r2, [r7, #20]
 80094fe:	4313      	orrs	r3, r2
 8009500:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009502:	697b      	ldr	r3, [r7, #20]
 8009504:	f023 0304 	bic.w	r3, r3, #4
 8009508:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	4a1c      	ldr	r2, [pc, #112]	; (8009580 <TIM_OC1_SetConfig+0x10c>)
 800950e:	4293      	cmp	r3, r2
 8009510:	d00f      	beq.n	8009532 <TIM_OC1_SetConfig+0xbe>
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	4a1b      	ldr	r2, [pc, #108]	; (8009584 <TIM_OC1_SetConfig+0x110>)
 8009516:	4293      	cmp	r3, r2
 8009518:	d00b      	beq.n	8009532 <TIM_OC1_SetConfig+0xbe>
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	4a1a      	ldr	r2, [pc, #104]	; (8009588 <TIM_OC1_SetConfig+0x114>)
 800951e:	4293      	cmp	r3, r2
 8009520:	d007      	beq.n	8009532 <TIM_OC1_SetConfig+0xbe>
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	4a19      	ldr	r2, [pc, #100]	; (800958c <TIM_OC1_SetConfig+0x118>)
 8009526:	4293      	cmp	r3, r2
 8009528:	d003      	beq.n	8009532 <TIM_OC1_SetConfig+0xbe>
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	4a18      	ldr	r2, [pc, #96]	; (8009590 <TIM_OC1_SetConfig+0x11c>)
 800952e:	4293      	cmp	r3, r2
 8009530:	d111      	bne.n	8009556 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009532:	693b      	ldr	r3, [r7, #16]
 8009534:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009538:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800953a:	693b      	ldr	r3, [r7, #16]
 800953c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009540:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009542:	683b      	ldr	r3, [r7, #0]
 8009544:	695b      	ldr	r3, [r3, #20]
 8009546:	693a      	ldr	r2, [r7, #16]
 8009548:	4313      	orrs	r3, r2
 800954a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800954c:	683b      	ldr	r3, [r7, #0]
 800954e:	699b      	ldr	r3, [r3, #24]
 8009550:	693a      	ldr	r2, [r7, #16]
 8009552:	4313      	orrs	r3, r2
 8009554:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	693a      	ldr	r2, [r7, #16]
 800955a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	68fa      	ldr	r2, [r7, #12]
 8009560:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009562:	683b      	ldr	r3, [r7, #0]
 8009564:	685a      	ldr	r2, [r3, #4]
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	697a      	ldr	r2, [r7, #20]
 800956e:	621a      	str	r2, [r3, #32]
}
 8009570:	bf00      	nop
 8009572:	371c      	adds	r7, #28
 8009574:	46bd      	mov	sp, r7
 8009576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957a:	4770      	bx	lr
 800957c:	fffeff8f 	.word	0xfffeff8f
 8009580:	40010000 	.word	0x40010000
 8009584:	40010400 	.word	0x40010400
 8009588:	40014000 	.word	0x40014000
 800958c:	40014400 	.word	0x40014400
 8009590:	40014800 	.word	0x40014800

08009594 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009594:	b480      	push	{r7}
 8009596:	b087      	sub	sp, #28
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]
 800959c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	6a1b      	ldr	r3, [r3, #32]
 80095a2:	f023 0210 	bic.w	r2, r3, #16
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	6a1b      	ldr	r3, [r3, #32]
 80095ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	685b      	ldr	r3, [r3, #4]
 80095b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	699b      	ldr	r3, [r3, #24]
 80095ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80095bc:	68fa      	ldr	r2, [r7, #12]
 80095be:	4b34      	ldr	r3, [pc, #208]	; (8009690 <TIM_OC2_SetConfig+0xfc>)
 80095c0:	4013      	ands	r3, r2
 80095c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80095ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80095cc:	683b      	ldr	r3, [r7, #0]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	021b      	lsls	r3, r3, #8
 80095d2:	68fa      	ldr	r2, [r7, #12]
 80095d4:	4313      	orrs	r3, r2
 80095d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80095d8:	697b      	ldr	r3, [r7, #20]
 80095da:	f023 0320 	bic.w	r3, r3, #32
 80095de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80095e0:	683b      	ldr	r3, [r7, #0]
 80095e2:	689b      	ldr	r3, [r3, #8]
 80095e4:	011b      	lsls	r3, r3, #4
 80095e6:	697a      	ldr	r2, [r7, #20]
 80095e8:	4313      	orrs	r3, r2
 80095ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	4a29      	ldr	r2, [pc, #164]	; (8009694 <TIM_OC2_SetConfig+0x100>)
 80095f0:	4293      	cmp	r3, r2
 80095f2:	d003      	beq.n	80095fc <TIM_OC2_SetConfig+0x68>
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	4a28      	ldr	r2, [pc, #160]	; (8009698 <TIM_OC2_SetConfig+0x104>)
 80095f8:	4293      	cmp	r3, r2
 80095fa:	d10d      	bne.n	8009618 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80095fc:	697b      	ldr	r3, [r7, #20]
 80095fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009602:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009604:	683b      	ldr	r3, [r7, #0]
 8009606:	68db      	ldr	r3, [r3, #12]
 8009608:	011b      	lsls	r3, r3, #4
 800960a:	697a      	ldr	r2, [r7, #20]
 800960c:	4313      	orrs	r3, r2
 800960e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009610:	697b      	ldr	r3, [r7, #20]
 8009612:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009616:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	4a1e      	ldr	r2, [pc, #120]	; (8009694 <TIM_OC2_SetConfig+0x100>)
 800961c:	4293      	cmp	r3, r2
 800961e:	d00f      	beq.n	8009640 <TIM_OC2_SetConfig+0xac>
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	4a1d      	ldr	r2, [pc, #116]	; (8009698 <TIM_OC2_SetConfig+0x104>)
 8009624:	4293      	cmp	r3, r2
 8009626:	d00b      	beq.n	8009640 <TIM_OC2_SetConfig+0xac>
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	4a1c      	ldr	r2, [pc, #112]	; (800969c <TIM_OC2_SetConfig+0x108>)
 800962c:	4293      	cmp	r3, r2
 800962e:	d007      	beq.n	8009640 <TIM_OC2_SetConfig+0xac>
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	4a1b      	ldr	r2, [pc, #108]	; (80096a0 <TIM_OC2_SetConfig+0x10c>)
 8009634:	4293      	cmp	r3, r2
 8009636:	d003      	beq.n	8009640 <TIM_OC2_SetConfig+0xac>
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	4a1a      	ldr	r2, [pc, #104]	; (80096a4 <TIM_OC2_SetConfig+0x110>)
 800963c:	4293      	cmp	r3, r2
 800963e:	d113      	bne.n	8009668 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009640:	693b      	ldr	r3, [r7, #16]
 8009642:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009646:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009648:	693b      	ldr	r3, [r7, #16]
 800964a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800964e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009650:	683b      	ldr	r3, [r7, #0]
 8009652:	695b      	ldr	r3, [r3, #20]
 8009654:	009b      	lsls	r3, r3, #2
 8009656:	693a      	ldr	r2, [r7, #16]
 8009658:	4313      	orrs	r3, r2
 800965a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800965c:	683b      	ldr	r3, [r7, #0]
 800965e:	699b      	ldr	r3, [r3, #24]
 8009660:	009b      	lsls	r3, r3, #2
 8009662:	693a      	ldr	r2, [r7, #16]
 8009664:	4313      	orrs	r3, r2
 8009666:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	693a      	ldr	r2, [r7, #16]
 800966c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	68fa      	ldr	r2, [r7, #12]
 8009672:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009674:	683b      	ldr	r3, [r7, #0]
 8009676:	685a      	ldr	r2, [r3, #4]
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	697a      	ldr	r2, [r7, #20]
 8009680:	621a      	str	r2, [r3, #32]
}
 8009682:	bf00      	nop
 8009684:	371c      	adds	r7, #28
 8009686:	46bd      	mov	sp, r7
 8009688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968c:	4770      	bx	lr
 800968e:	bf00      	nop
 8009690:	feff8fff 	.word	0xfeff8fff
 8009694:	40010000 	.word	0x40010000
 8009698:	40010400 	.word	0x40010400
 800969c:	40014000 	.word	0x40014000
 80096a0:	40014400 	.word	0x40014400
 80096a4:	40014800 	.word	0x40014800

080096a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80096a8:	b480      	push	{r7}
 80096aa:	b087      	sub	sp, #28
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	6078      	str	r0, [r7, #4]
 80096b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	6a1b      	ldr	r3, [r3, #32]
 80096b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	6a1b      	ldr	r3, [r3, #32]
 80096c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	685b      	ldr	r3, [r3, #4]
 80096c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	69db      	ldr	r3, [r3, #28]
 80096ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80096d0:	68fa      	ldr	r2, [r7, #12]
 80096d2:	4b33      	ldr	r3, [pc, #204]	; (80097a0 <TIM_OC3_SetConfig+0xf8>)
 80096d4:	4013      	ands	r3, r2
 80096d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	f023 0303 	bic.w	r3, r3, #3
 80096de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80096e0:	683b      	ldr	r3, [r7, #0]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	68fa      	ldr	r2, [r7, #12]
 80096e6:	4313      	orrs	r3, r2
 80096e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80096ea:	697b      	ldr	r3, [r7, #20]
 80096ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80096f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80096f2:	683b      	ldr	r3, [r7, #0]
 80096f4:	689b      	ldr	r3, [r3, #8]
 80096f6:	021b      	lsls	r3, r3, #8
 80096f8:	697a      	ldr	r2, [r7, #20]
 80096fa:	4313      	orrs	r3, r2
 80096fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	4a28      	ldr	r2, [pc, #160]	; (80097a4 <TIM_OC3_SetConfig+0xfc>)
 8009702:	4293      	cmp	r3, r2
 8009704:	d003      	beq.n	800970e <TIM_OC3_SetConfig+0x66>
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	4a27      	ldr	r2, [pc, #156]	; (80097a8 <TIM_OC3_SetConfig+0x100>)
 800970a:	4293      	cmp	r3, r2
 800970c:	d10d      	bne.n	800972a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800970e:	697b      	ldr	r3, [r7, #20]
 8009710:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009714:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009716:	683b      	ldr	r3, [r7, #0]
 8009718:	68db      	ldr	r3, [r3, #12]
 800971a:	021b      	lsls	r3, r3, #8
 800971c:	697a      	ldr	r2, [r7, #20]
 800971e:	4313      	orrs	r3, r2
 8009720:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009722:	697b      	ldr	r3, [r7, #20]
 8009724:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009728:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	4a1d      	ldr	r2, [pc, #116]	; (80097a4 <TIM_OC3_SetConfig+0xfc>)
 800972e:	4293      	cmp	r3, r2
 8009730:	d00f      	beq.n	8009752 <TIM_OC3_SetConfig+0xaa>
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	4a1c      	ldr	r2, [pc, #112]	; (80097a8 <TIM_OC3_SetConfig+0x100>)
 8009736:	4293      	cmp	r3, r2
 8009738:	d00b      	beq.n	8009752 <TIM_OC3_SetConfig+0xaa>
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	4a1b      	ldr	r2, [pc, #108]	; (80097ac <TIM_OC3_SetConfig+0x104>)
 800973e:	4293      	cmp	r3, r2
 8009740:	d007      	beq.n	8009752 <TIM_OC3_SetConfig+0xaa>
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	4a1a      	ldr	r2, [pc, #104]	; (80097b0 <TIM_OC3_SetConfig+0x108>)
 8009746:	4293      	cmp	r3, r2
 8009748:	d003      	beq.n	8009752 <TIM_OC3_SetConfig+0xaa>
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	4a19      	ldr	r2, [pc, #100]	; (80097b4 <TIM_OC3_SetConfig+0x10c>)
 800974e:	4293      	cmp	r3, r2
 8009750:	d113      	bne.n	800977a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009752:	693b      	ldr	r3, [r7, #16]
 8009754:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009758:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800975a:	693b      	ldr	r3, [r7, #16]
 800975c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009760:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009762:	683b      	ldr	r3, [r7, #0]
 8009764:	695b      	ldr	r3, [r3, #20]
 8009766:	011b      	lsls	r3, r3, #4
 8009768:	693a      	ldr	r2, [r7, #16]
 800976a:	4313      	orrs	r3, r2
 800976c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800976e:	683b      	ldr	r3, [r7, #0]
 8009770:	699b      	ldr	r3, [r3, #24]
 8009772:	011b      	lsls	r3, r3, #4
 8009774:	693a      	ldr	r2, [r7, #16]
 8009776:	4313      	orrs	r3, r2
 8009778:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	693a      	ldr	r2, [r7, #16]
 800977e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	68fa      	ldr	r2, [r7, #12]
 8009784:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009786:	683b      	ldr	r3, [r7, #0]
 8009788:	685a      	ldr	r2, [r3, #4]
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	697a      	ldr	r2, [r7, #20]
 8009792:	621a      	str	r2, [r3, #32]
}
 8009794:	bf00      	nop
 8009796:	371c      	adds	r7, #28
 8009798:	46bd      	mov	sp, r7
 800979a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800979e:	4770      	bx	lr
 80097a0:	fffeff8f 	.word	0xfffeff8f
 80097a4:	40010000 	.word	0x40010000
 80097a8:	40010400 	.word	0x40010400
 80097ac:	40014000 	.word	0x40014000
 80097b0:	40014400 	.word	0x40014400
 80097b4:	40014800 	.word	0x40014800

080097b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80097b8:	b480      	push	{r7}
 80097ba:	b087      	sub	sp, #28
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]
 80097c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	6a1b      	ldr	r3, [r3, #32]
 80097c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	6a1b      	ldr	r3, [r3, #32]
 80097d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	685b      	ldr	r3, [r3, #4]
 80097d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	69db      	ldr	r3, [r3, #28]
 80097de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80097e0:	68fa      	ldr	r2, [r7, #12]
 80097e2:	4b24      	ldr	r3, [pc, #144]	; (8009874 <TIM_OC4_SetConfig+0xbc>)
 80097e4:	4013      	ands	r3, r2
 80097e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80097ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80097f0:	683b      	ldr	r3, [r7, #0]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	021b      	lsls	r3, r3, #8
 80097f6:	68fa      	ldr	r2, [r7, #12]
 80097f8:	4313      	orrs	r3, r2
 80097fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80097fc:	693b      	ldr	r3, [r7, #16]
 80097fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009802:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009804:	683b      	ldr	r3, [r7, #0]
 8009806:	689b      	ldr	r3, [r3, #8]
 8009808:	031b      	lsls	r3, r3, #12
 800980a:	693a      	ldr	r2, [r7, #16]
 800980c:	4313      	orrs	r3, r2
 800980e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	4a19      	ldr	r2, [pc, #100]	; (8009878 <TIM_OC4_SetConfig+0xc0>)
 8009814:	4293      	cmp	r3, r2
 8009816:	d00f      	beq.n	8009838 <TIM_OC4_SetConfig+0x80>
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	4a18      	ldr	r2, [pc, #96]	; (800987c <TIM_OC4_SetConfig+0xc4>)
 800981c:	4293      	cmp	r3, r2
 800981e:	d00b      	beq.n	8009838 <TIM_OC4_SetConfig+0x80>
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	4a17      	ldr	r2, [pc, #92]	; (8009880 <TIM_OC4_SetConfig+0xc8>)
 8009824:	4293      	cmp	r3, r2
 8009826:	d007      	beq.n	8009838 <TIM_OC4_SetConfig+0x80>
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	4a16      	ldr	r2, [pc, #88]	; (8009884 <TIM_OC4_SetConfig+0xcc>)
 800982c:	4293      	cmp	r3, r2
 800982e:	d003      	beq.n	8009838 <TIM_OC4_SetConfig+0x80>
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	4a15      	ldr	r2, [pc, #84]	; (8009888 <TIM_OC4_SetConfig+0xd0>)
 8009834:	4293      	cmp	r3, r2
 8009836:	d109      	bne.n	800984c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009838:	697b      	ldr	r3, [r7, #20]
 800983a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800983e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009840:	683b      	ldr	r3, [r7, #0]
 8009842:	695b      	ldr	r3, [r3, #20]
 8009844:	019b      	lsls	r3, r3, #6
 8009846:	697a      	ldr	r2, [r7, #20]
 8009848:	4313      	orrs	r3, r2
 800984a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	697a      	ldr	r2, [r7, #20]
 8009850:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	68fa      	ldr	r2, [r7, #12]
 8009856:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009858:	683b      	ldr	r3, [r7, #0]
 800985a:	685a      	ldr	r2, [r3, #4]
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	693a      	ldr	r2, [r7, #16]
 8009864:	621a      	str	r2, [r3, #32]
}
 8009866:	bf00      	nop
 8009868:	371c      	adds	r7, #28
 800986a:	46bd      	mov	sp, r7
 800986c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009870:	4770      	bx	lr
 8009872:	bf00      	nop
 8009874:	feff8fff 	.word	0xfeff8fff
 8009878:	40010000 	.word	0x40010000
 800987c:	40010400 	.word	0x40010400
 8009880:	40014000 	.word	0x40014000
 8009884:	40014400 	.word	0x40014400
 8009888:	40014800 	.word	0x40014800

0800988c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800988c:	b480      	push	{r7}
 800988e:	b087      	sub	sp, #28
 8009890:	af00      	add	r7, sp, #0
 8009892:	6078      	str	r0, [r7, #4]
 8009894:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	6a1b      	ldr	r3, [r3, #32]
 800989a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	6a1b      	ldr	r3, [r3, #32]
 80098a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	685b      	ldr	r3, [r3, #4]
 80098ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80098b4:	68fa      	ldr	r2, [r7, #12]
 80098b6:	4b21      	ldr	r3, [pc, #132]	; (800993c <TIM_OC5_SetConfig+0xb0>)
 80098b8:	4013      	ands	r3, r2
 80098ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80098bc:	683b      	ldr	r3, [r7, #0]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	68fa      	ldr	r2, [r7, #12]
 80098c2:	4313      	orrs	r3, r2
 80098c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80098c6:	693b      	ldr	r3, [r7, #16]
 80098c8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80098cc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80098ce:	683b      	ldr	r3, [r7, #0]
 80098d0:	689b      	ldr	r3, [r3, #8]
 80098d2:	041b      	lsls	r3, r3, #16
 80098d4:	693a      	ldr	r2, [r7, #16]
 80098d6:	4313      	orrs	r3, r2
 80098d8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	4a18      	ldr	r2, [pc, #96]	; (8009940 <TIM_OC5_SetConfig+0xb4>)
 80098de:	4293      	cmp	r3, r2
 80098e0:	d00f      	beq.n	8009902 <TIM_OC5_SetConfig+0x76>
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	4a17      	ldr	r2, [pc, #92]	; (8009944 <TIM_OC5_SetConfig+0xb8>)
 80098e6:	4293      	cmp	r3, r2
 80098e8:	d00b      	beq.n	8009902 <TIM_OC5_SetConfig+0x76>
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	4a16      	ldr	r2, [pc, #88]	; (8009948 <TIM_OC5_SetConfig+0xbc>)
 80098ee:	4293      	cmp	r3, r2
 80098f0:	d007      	beq.n	8009902 <TIM_OC5_SetConfig+0x76>
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	4a15      	ldr	r2, [pc, #84]	; (800994c <TIM_OC5_SetConfig+0xc0>)
 80098f6:	4293      	cmp	r3, r2
 80098f8:	d003      	beq.n	8009902 <TIM_OC5_SetConfig+0x76>
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	4a14      	ldr	r2, [pc, #80]	; (8009950 <TIM_OC5_SetConfig+0xc4>)
 80098fe:	4293      	cmp	r3, r2
 8009900:	d109      	bne.n	8009916 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009902:	697b      	ldr	r3, [r7, #20]
 8009904:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009908:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800990a:	683b      	ldr	r3, [r7, #0]
 800990c:	695b      	ldr	r3, [r3, #20]
 800990e:	021b      	lsls	r3, r3, #8
 8009910:	697a      	ldr	r2, [r7, #20]
 8009912:	4313      	orrs	r3, r2
 8009914:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	697a      	ldr	r2, [r7, #20]
 800991a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	68fa      	ldr	r2, [r7, #12]
 8009920:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009922:	683b      	ldr	r3, [r7, #0]
 8009924:	685a      	ldr	r2, [r3, #4]
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	693a      	ldr	r2, [r7, #16]
 800992e:	621a      	str	r2, [r3, #32]
}
 8009930:	bf00      	nop
 8009932:	371c      	adds	r7, #28
 8009934:	46bd      	mov	sp, r7
 8009936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993a:	4770      	bx	lr
 800993c:	fffeff8f 	.word	0xfffeff8f
 8009940:	40010000 	.word	0x40010000
 8009944:	40010400 	.word	0x40010400
 8009948:	40014000 	.word	0x40014000
 800994c:	40014400 	.word	0x40014400
 8009950:	40014800 	.word	0x40014800

08009954 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009954:	b480      	push	{r7}
 8009956:	b087      	sub	sp, #28
 8009958:	af00      	add	r7, sp, #0
 800995a:	6078      	str	r0, [r7, #4]
 800995c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	6a1b      	ldr	r3, [r3, #32]
 8009962:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	6a1b      	ldr	r3, [r3, #32]
 800996e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	685b      	ldr	r3, [r3, #4]
 8009974:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800997a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800997c:	68fa      	ldr	r2, [r7, #12]
 800997e:	4b22      	ldr	r3, [pc, #136]	; (8009a08 <TIM_OC6_SetConfig+0xb4>)
 8009980:	4013      	ands	r3, r2
 8009982:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009984:	683b      	ldr	r3, [r7, #0]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	021b      	lsls	r3, r3, #8
 800998a:	68fa      	ldr	r2, [r7, #12]
 800998c:	4313      	orrs	r3, r2
 800998e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009990:	693b      	ldr	r3, [r7, #16]
 8009992:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009996:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009998:	683b      	ldr	r3, [r7, #0]
 800999a:	689b      	ldr	r3, [r3, #8]
 800999c:	051b      	lsls	r3, r3, #20
 800999e:	693a      	ldr	r2, [r7, #16]
 80099a0:	4313      	orrs	r3, r2
 80099a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	4a19      	ldr	r2, [pc, #100]	; (8009a0c <TIM_OC6_SetConfig+0xb8>)
 80099a8:	4293      	cmp	r3, r2
 80099aa:	d00f      	beq.n	80099cc <TIM_OC6_SetConfig+0x78>
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	4a18      	ldr	r2, [pc, #96]	; (8009a10 <TIM_OC6_SetConfig+0xbc>)
 80099b0:	4293      	cmp	r3, r2
 80099b2:	d00b      	beq.n	80099cc <TIM_OC6_SetConfig+0x78>
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	4a17      	ldr	r2, [pc, #92]	; (8009a14 <TIM_OC6_SetConfig+0xc0>)
 80099b8:	4293      	cmp	r3, r2
 80099ba:	d007      	beq.n	80099cc <TIM_OC6_SetConfig+0x78>
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	4a16      	ldr	r2, [pc, #88]	; (8009a18 <TIM_OC6_SetConfig+0xc4>)
 80099c0:	4293      	cmp	r3, r2
 80099c2:	d003      	beq.n	80099cc <TIM_OC6_SetConfig+0x78>
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	4a15      	ldr	r2, [pc, #84]	; (8009a1c <TIM_OC6_SetConfig+0xc8>)
 80099c8:	4293      	cmp	r3, r2
 80099ca:	d109      	bne.n	80099e0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80099cc:	697b      	ldr	r3, [r7, #20]
 80099ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80099d2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80099d4:	683b      	ldr	r3, [r7, #0]
 80099d6:	695b      	ldr	r3, [r3, #20]
 80099d8:	029b      	lsls	r3, r3, #10
 80099da:	697a      	ldr	r2, [r7, #20]
 80099dc:	4313      	orrs	r3, r2
 80099de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	697a      	ldr	r2, [r7, #20]
 80099e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	68fa      	ldr	r2, [r7, #12]
 80099ea:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80099ec:	683b      	ldr	r3, [r7, #0]
 80099ee:	685a      	ldr	r2, [r3, #4]
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	693a      	ldr	r2, [r7, #16]
 80099f8:	621a      	str	r2, [r3, #32]
}
 80099fa:	bf00      	nop
 80099fc:	371c      	adds	r7, #28
 80099fe:	46bd      	mov	sp, r7
 8009a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a04:	4770      	bx	lr
 8009a06:	bf00      	nop
 8009a08:	feff8fff 	.word	0xfeff8fff
 8009a0c:	40010000 	.word	0x40010000
 8009a10:	40010400 	.word	0x40010400
 8009a14:	40014000 	.word	0x40014000
 8009a18:	40014400 	.word	0x40014400
 8009a1c:	40014800 	.word	0x40014800

08009a20 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8009a20:	b580      	push	{r7, lr}
 8009a22:	b086      	sub	sp, #24
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	6078      	str	r0, [r7, #4]
 8009a28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	689b      	ldr	r3, [r3, #8]
 8009a34:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009a36:	693a      	ldr	r2, [r7, #16]
 8009a38:	4b65      	ldr	r3, [pc, #404]	; (8009bd0 <TIM_SlaveTimer_SetConfig+0x1b0>)
 8009a3a:	4013      	ands	r3, r2
 8009a3c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8009a3e:	683b      	ldr	r3, [r7, #0]
 8009a40:	685b      	ldr	r3, [r3, #4]
 8009a42:	693a      	ldr	r2, [r7, #16]
 8009a44:	4313      	orrs	r3, r2
 8009a46:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8009a48:	693a      	ldr	r2, [r7, #16]
 8009a4a:	4b62      	ldr	r3, [pc, #392]	; (8009bd4 <TIM_SlaveTimer_SetConfig+0x1b4>)
 8009a4c:	4013      	ands	r3, r2
 8009a4e:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8009a50:	683b      	ldr	r3, [r7, #0]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	693a      	ldr	r2, [r7, #16]
 8009a56:	4313      	orrs	r3, r2
 8009a58:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	693a      	ldr	r2, [r7, #16]
 8009a60:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8009a62:	683b      	ldr	r3, [r7, #0]
 8009a64:	685b      	ldr	r3, [r3, #4]
 8009a66:	4a5c      	ldr	r2, [pc, #368]	; (8009bd8 <TIM_SlaveTimer_SetConfig+0x1b8>)
 8009a68:	4293      	cmp	r3, r2
 8009a6a:	f000 80ab 	beq.w	8009bc4 <TIM_SlaveTimer_SetConfig+0x1a4>
 8009a6e:	4a5a      	ldr	r2, [pc, #360]	; (8009bd8 <TIM_SlaveTimer_SetConfig+0x1b8>)
 8009a70:	4293      	cmp	r3, r2
 8009a72:	f200 80a4 	bhi.w	8009bbe <TIM_SlaveTimer_SetConfig+0x19e>
 8009a76:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009a7a:	f000 80a3 	beq.w	8009bc4 <TIM_SlaveTimer_SetConfig+0x1a4>
 8009a7e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009a82:	f200 809c 	bhi.w	8009bbe <TIM_SlaveTimer_SetConfig+0x19e>
 8009a86:	4a55      	ldr	r2, [pc, #340]	; (8009bdc <TIM_SlaveTimer_SetConfig+0x1bc>)
 8009a88:	4293      	cmp	r3, r2
 8009a8a:	f000 809b 	beq.w	8009bc4 <TIM_SlaveTimer_SetConfig+0x1a4>
 8009a8e:	4a53      	ldr	r2, [pc, #332]	; (8009bdc <TIM_SlaveTimer_SetConfig+0x1bc>)
 8009a90:	4293      	cmp	r3, r2
 8009a92:	f200 8094 	bhi.w	8009bbe <TIM_SlaveTimer_SetConfig+0x19e>
 8009a96:	4a52      	ldr	r2, [pc, #328]	; (8009be0 <TIM_SlaveTimer_SetConfig+0x1c0>)
 8009a98:	4293      	cmp	r3, r2
 8009a9a:	f000 8093 	beq.w	8009bc4 <TIM_SlaveTimer_SetConfig+0x1a4>
 8009a9e:	4a50      	ldr	r2, [pc, #320]	; (8009be0 <TIM_SlaveTimer_SetConfig+0x1c0>)
 8009aa0:	4293      	cmp	r3, r2
 8009aa2:	f200 808c 	bhi.w	8009bbe <TIM_SlaveTimer_SetConfig+0x19e>
 8009aa6:	4a4f      	ldr	r2, [pc, #316]	; (8009be4 <TIM_SlaveTimer_SetConfig+0x1c4>)
 8009aa8:	4293      	cmp	r3, r2
 8009aaa:	f000 808b 	beq.w	8009bc4 <TIM_SlaveTimer_SetConfig+0x1a4>
 8009aae:	4a4d      	ldr	r2, [pc, #308]	; (8009be4 <TIM_SlaveTimer_SetConfig+0x1c4>)
 8009ab0:	4293      	cmp	r3, r2
 8009ab2:	f200 8084 	bhi.w	8009bbe <TIM_SlaveTimer_SetConfig+0x19e>
 8009ab6:	4a4c      	ldr	r2, [pc, #304]	; (8009be8 <TIM_SlaveTimer_SetConfig+0x1c8>)
 8009ab8:	4293      	cmp	r3, r2
 8009aba:	f000 8083 	beq.w	8009bc4 <TIM_SlaveTimer_SetConfig+0x1a4>
 8009abe:	4a4a      	ldr	r2, [pc, #296]	; (8009be8 <TIM_SlaveTimer_SetConfig+0x1c8>)
 8009ac0:	4293      	cmp	r3, r2
 8009ac2:	d87c      	bhi.n	8009bbe <TIM_SlaveTimer_SetConfig+0x19e>
 8009ac4:	4a49      	ldr	r2, [pc, #292]	; (8009bec <TIM_SlaveTimer_SetConfig+0x1cc>)
 8009ac6:	4293      	cmp	r3, r2
 8009ac8:	d07c      	beq.n	8009bc4 <TIM_SlaveTimer_SetConfig+0x1a4>
 8009aca:	4a48      	ldr	r2, [pc, #288]	; (8009bec <TIM_SlaveTimer_SetConfig+0x1cc>)
 8009acc:	4293      	cmp	r3, r2
 8009ace:	d876      	bhi.n	8009bbe <TIM_SlaveTimer_SetConfig+0x19e>
 8009ad0:	4a47      	ldr	r2, [pc, #284]	; (8009bf0 <TIM_SlaveTimer_SetConfig+0x1d0>)
 8009ad2:	4293      	cmp	r3, r2
 8009ad4:	d076      	beq.n	8009bc4 <TIM_SlaveTimer_SetConfig+0x1a4>
 8009ad6:	4a46      	ldr	r2, [pc, #280]	; (8009bf0 <TIM_SlaveTimer_SetConfig+0x1d0>)
 8009ad8:	4293      	cmp	r3, r2
 8009ada:	d870      	bhi.n	8009bbe <TIM_SlaveTimer_SetConfig+0x19e>
 8009adc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009ae0:	d070      	beq.n	8009bc4 <TIM_SlaveTimer_SetConfig+0x1a4>
 8009ae2:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009ae6:	d86a      	bhi.n	8009bbe <TIM_SlaveTimer_SetConfig+0x19e>
 8009ae8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009aec:	d06a      	beq.n	8009bc4 <TIM_SlaveTimer_SetConfig+0x1a4>
 8009aee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009af2:	d864      	bhi.n	8009bbe <TIM_SlaveTimer_SetConfig+0x19e>
 8009af4:	2b70      	cmp	r3, #112	; 0x70
 8009af6:	d01a      	beq.n	8009b2e <TIM_SlaveTimer_SetConfig+0x10e>
 8009af8:	2b70      	cmp	r3, #112	; 0x70
 8009afa:	d860      	bhi.n	8009bbe <TIM_SlaveTimer_SetConfig+0x19e>
 8009afc:	2b60      	cmp	r3, #96	; 0x60
 8009afe:	d054      	beq.n	8009baa <TIM_SlaveTimer_SetConfig+0x18a>
 8009b00:	2b60      	cmp	r3, #96	; 0x60
 8009b02:	d85c      	bhi.n	8009bbe <TIM_SlaveTimer_SetConfig+0x19e>
 8009b04:	2b50      	cmp	r3, #80	; 0x50
 8009b06:	d046      	beq.n	8009b96 <TIM_SlaveTimer_SetConfig+0x176>
 8009b08:	2b50      	cmp	r3, #80	; 0x50
 8009b0a:	d858      	bhi.n	8009bbe <TIM_SlaveTimer_SetConfig+0x19e>
 8009b0c:	2b40      	cmp	r3, #64	; 0x40
 8009b0e:	d019      	beq.n	8009b44 <TIM_SlaveTimer_SetConfig+0x124>
 8009b10:	2b40      	cmp	r3, #64	; 0x40
 8009b12:	d854      	bhi.n	8009bbe <TIM_SlaveTimer_SetConfig+0x19e>
 8009b14:	2b30      	cmp	r3, #48	; 0x30
 8009b16:	d055      	beq.n	8009bc4 <TIM_SlaveTimer_SetConfig+0x1a4>
 8009b18:	2b30      	cmp	r3, #48	; 0x30
 8009b1a:	d850      	bhi.n	8009bbe <TIM_SlaveTimer_SetConfig+0x19e>
 8009b1c:	2b20      	cmp	r3, #32
 8009b1e:	d051      	beq.n	8009bc4 <TIM_SlaveTimer_SetConfig+0x1a4>
 8009b20:	2b20      	cmp	r3, #32
 8009b22:	d84c      	bhi.n	8009bbe <TIM_SlaveTimer_SetConfig+0x19e>
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d04d      	beq.n	8009bc4 <TIM_SlaveTimer_SetConfig+0x1a4>
 8009b28:	2b10      	cmp	r3, #16
 8009b2a:	d04b      	beq.n	8009bc4 <TIM_SlaveTimer_SetConfig+0x1a4>
 8009b2c:	e047      	b.n	8009bbe <TIM_SlaveTimer_SetConfig+0x19e>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8009b32:	683b      	ldr	r3, [r7, #0]
 8009b34:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8009b36:	683b      	ldr	r3, [r7, #0]
 8009b38:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8009b3a:	683b      	ldr	r3, [r7, #0]
 8009b3c:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8009b3e:	f000 f8b8 	bl	8009cb2 <TIM_ETR_SetConfig>
      break;
 8009b42:	e040      	b.n	8009bc6 <TIM_SlaveTimer_SetConfig+0x1a6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8009b44:	683b      	ldr	r3, [r7, #0]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	2b05      	cmp	r3, #5
 8009b4a:	d101      	bne.n	8009b50 <TIM_SlaveTimer_SetConfig+0x130>
      {
        return HAL_ERROR;
 8009b4c:	2301      	movs	r3, #1
 8009b4e:	e03b      	b.n	8009bc8 <TIM_SlaveTimer_SetConfig+0x1a8>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	6a1b      	ldr	r3, [r3, #32]
 8009b56:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	6a1a      	ldr	r2, [r3, #32]
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	f022 0201 	bic.w	r2, r2, #1
 8009b66:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	699b      	ldr	r3, [r3, #24]
 8009b6e:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009b70:	68bb      	ldr	r3, [r7, #8]
 8009b72:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009b76:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8009b78:	683b      	ldr	r3, [r7, #0]
 8009b7a:	691b      	ldr	r3, [r3, #16]
 8009b7c:	011b      	lsls	r3, r3, #4
 8009b7e:	68ba      	ldr	r2, [r7, #8]
 8009b80:	4313      	orrs	r3, r2
 8009b82:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	68ba      	ldr	r2, [r7, #8]
 8009b8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	68fa      	ldr	r2, [r7, #12]
 8009b92:	621a      	str	r2, [r3, #32]
      break;
 8009b94:	e017      	b.n	8009bc6 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8009b9a:	683b      	ldr	r3, [r7, #0]
 8009b9c:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8009b9e:	683b      	ldr	r3, [r7, #0]
 8009ba0:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009ba2:	461a      	mov	r2, r3
 8009ba4:	f000 f826 	bl	8009bf4 <TIM_TI1_ConfigInputStage>
      break;
 8009ba8:	e00d      	b.n	8009bc6 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8009bae:	683b      	ldr	r3, [r7, #0]
 8009bb0:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8009bb2:	683b      	ldr	r3, [r7, #0]
 8009bb4:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009bb6:	461a      	mov	r2, r3
 8009bb8:	f000 f84b 	bl	8009c52 <TIM_TI2_ConfigInputStage>
      break;
 8009bbc:	e003      	b.n	8009bc6 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8009bbe:	2301      	movs	r3, #1
 8009bc0:	75fb      	strb	r3, [r7, #23]
      break;
 8009bc2:	e000      	b.n	8009bc6 <TIM_SlaveTimer_SetConfig+0x1a6>
      break;
 8009bc4:	bf00      	nop
  }

  return status;
 8009bc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8009bc8:	4618      	mov	r0, r3
 8009bca:	3718      	adds	r7, #24
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	bd80      	pop	{r7, pc}
 8009bd0:	ffcfff8f 	.word	0xffcfff8f
 8009bd4:	fffefff8 	.word	0xfffefff8
 8009bd8:	00200010 	.word	0x00200010
 8009bdc:	00100070 	.word	0x00100070
 8009be0:	00100060 	.word	0x00100060
 8009be4:	00100050 	.word	0x00100050
 8009be8:	00100040 	.word	0x00100040
 8009bec:	00100030 	.word	0x00100030
 8009bf0:	00100020 	.word	0x00100020

08009bf4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009bf4:	b480      	push	{r7}
 8009bf6:	b087      	sub	sp, #28
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	60f8      	str	r0, [r7, #12]
 8009bfc:	60b9      	str	r1, [r7, #8]
 8009bfe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	6a1b      	ldr	r3, [r3, #32]
 8009c04:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	6a1b      	ldr	r3, [r3, #32]
 8009c0a:	f023 0201 	bic.w	r2, r3, #1
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	699b      	ldr	r3, [r3, #24]
 8009c16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009c18:	693b      	ldr	r3, [r7, #16]
 8009c1a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009c1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	011b      	lsls	r3, r3, #4
 8009c24:	693a      	ldr	r2, [r7, #16]
 8009c26:	4313      	orrs	r3, r2
 8009c28:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009c2a:	697b      	ldr	r3, [r7, #20]
 8009c2c:	f023 030a 	bic.w	r3, r3, #10
 8009c30:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009c32:	697a      	ldr	r2, [r7, #20]
 8009c34:	68bb      	ldr	r3, [r7, #8]
 8009c36:	4313      	orrs	r3, r2
 8009c38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	693a      	ldr	r2, [r7, #16]
 8009c3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	697a      	ldr	r2, [r7, #20]
 8009c44:	621a      	str	r2, [r3, #32]
}
 8009c46:	bf00      	nop
 8009c48:	371c      	adds	r7, #28
 8009c4a:	46bd      	mov	sp, r7
 8009c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c50:	4770      	bx	lr

08009c52 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009c52:	b480      	push	{r7}
 8009c54:	b087      	sub	sp, #28
 8009c56:	af00      	add	r7, sp, #0
 8009c58:	60f8      	str	r0, [r7, #12]
 8009c5a:	60b9      	str	r1, [r7, #8]
 8009c5c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	6a1b      	ldr	r3, [r3, #32]
 8009c62:	f023 0210 	bic.w	r2, r3, #16
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	699b      	ldr	r3, [r3, #24]
 8009c6e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	6a1b      	ldr	r3, [r3, #32]
 8009c74:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009c76:	697b      	ldr	r3, [r7, #20]
 8009c78:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009c7c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	031b      	lsls	r3, r3, #12
 8009c82:	697a      	ldr	r2, [r7, #20]
 8009c84:	4313      	orrs	r3, r2
 8009c86:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009c88:	693b      	ldr	r3, [r7, #16]
 8009c8a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009c8e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009c90:	68bb      	ldr	r3, [r7, #8]
 8009c92:	011b      	lsls	r3, r3, #4
 8009c94:	693a      	ldr	r2, [r7, #16]
 8009c96:	4313      	orrs	r3, r2
 8009c98:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	697a      	ldr	r2, [r7, #20]
 8009c9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	693a      	ldr	r2, [r7, #16]
 8009ca4:	621a      	str	r2, [r3, #32]
}
 8009ca6:	bf00      	nop
 8009ca8:	371c      	adds	r7, #28
 8009caa:	46bd      	mov	sp, r7
 8009cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb0:	4770      	bx	lr

08009cb2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009cb2:	b480      	push	{r7}
 8009cb4:	b087      	sub	sp, #28
 8009cb6:	af00      	add	r7, sp, #0
 8009cb8:	60f8      	str	r0, [r7, #12]
 8009cba:	60b9      	str	r1, [r7, #8]
 8009cbc:	607a      	str	r2, [r7, #4]
 8009cbe:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	689b      	ldr	r3, [r3, #8]
 8009cc4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009cc6:	697b      	ldr	r3, [r7, #20]
 8009cc8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009ccc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009cce:	683b      	ldr	r3, [r7, #0]
 8009cd0:	021a      	lsls	r2, r3, #8
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	431a      	orrs	r2, r3
 8009cd6:	68bb      	ldr	r3, [r7, #8]
 8009cd8:	4313      	orrs	r3, r2
 8009cda:	697a      	ldr	r2, [r7, #20]
 8009cdc:	4313      	orrs	r3, r2
 8009cde:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	697a      	ldr	r2, [r7, #20]
 8009ce4:	609a      	str	r2, [r3, #8]
}
 8009ce6:	bf00      	nop
 8009ce8:	371c      	adds	r7, #28
 8009cea:	46bd      	mov	sp, r7
 8009cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf0:	4770      	bx	lr

08009cf2 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009cf2:	b480      	push	{r7}
 8009cf4:	b087      	sub	sp, #28
 8009cf6:	af00      	add	r7, sp, #0
 8009cf8:	60f8      	str	r0, [r7, #12]
 8009cfa:	60b9      	str	r1, [r7, #8]
 8009cfc:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009cfe:	68bb      	ldr	r3, [r7, #8]
 8009d00:	f003 031f 	and.w	r3, r3, #31
 8009d04:	2201      	movs	r2, #1
 8009d06:	fa02 f303 	lsl.w	r3, r2, r3
 8009d0a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	6a1a      	ldr	r2, [r3, #32]
 8009d10:	697b      	ldr	r3, [r7, #20]
 8009d12:	43db      	mvns	r3, r3
 8009d14:	401a      	ands	r2, r3
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	6a1a      	ldr	r2, [r3, #32]
 8009d1e:	68bb      	ldr	r3, [r7, #8]
 8009d20:	f003 031f 	and.w	r3, r3, #31
 8009d24:	6879      	ldr	r1, [r7, #4]
 8009d26:	fa01 f303 	lsl.w	r3, r1, r3
 8009d2a:	431a      	orrs	r2, r3
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	621a      	str	r2, [r3, #32]
}
 8009d30:	bf00      	nop
 8009d32:	371c      	adds	r7, #28
 8009d34:	46bd      	mov	sp, r7
 8009d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d3a:	4770      	bx	lr

08009d3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009d3c:	b480      	push	{r7}
 8009d3e:	b085      	sub	sp, #20
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	6078      	str	r0, [r7, #4]
 8009d44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009d4c:	2b01      	cmp	r3, #1
 8009d4e:	d101      	bne.n	8009d54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009d50:	2302      	movs	r3, #2
 8009d52:	e077      	b.n	8009e44 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	2201      	movs	r2, #1
 8009d58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	2202      	movs	r2, #2
 8009d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	685b      	ldr	r3, [r3, #4]
 8009d6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	689b      	ldr	r3, [r3, #8]
 8009d72:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	4a35      	ldr	r2, [pc, #212]	; (8009e50 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009d7a:	4293      	cmp	r3, r2
 8009d7c:	d004      	beq.n	8009d88 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	4a34      	ldr	r2, [pc, #208]	; (8009e54 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009d84:	4293      	cmp	r3, r2
 8009d86:	d108      	bne.n	8009d9a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009d8e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009d90:	683b      	ldr	r3, [r7, #0]
 8009d92:	685b      	ldr	r3, [r3, #4]
 8009d94:	68fa      	ldr	r2, [r7, #12]
 8009d96:	4313      	orrs	r3, r2
 8009d98:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009da0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009da2:	683b      	ldr	r3, [r7, #0]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	68fa      	ldr	r2, [r7, #12]
 8009da8:	4313      	orrs	r3, r2
 8009daa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	68fa      	ldr	r2, [r7, #12]
 8009db2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	4a25      	ldr	r2, [pc, #148]	; (8009e50 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009dba:	4293      	cmp	r3, r2
 8009dbc:	d02c      	beq.n	8009e18 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009dc6:	d027      	beq.n	8009e18 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	4a22      	ldr	r2, [pc, #136]	; (8009e58 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8009dce:	4293      	cmp	r3, r2
 8009dd0:	d022      	beq.n	8009e18 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	4a21      	ldr	r2, [pc, #132]	; (8009e5c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8009dd8:	4293      	cmp	r3, r2
 8009dda:	d01d      	beq.n	8009e18 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	4a1f      	ldr	r2, [pc, #124]	; (8009e60 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8009de2:	4293      	cmp	r3, r2
 8009de4:	d018      	beq.n	8009e18 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	4a1a      	ldr	r2, [pc, #104]	; (8009e54 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009dec:	4293      	cmp	r3, r2
 8009dee:	d013      	beq.n	8009e18 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	4a1b      	ldr	r2, [pc, #108]	; (8009e64 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8009df6:	4293      	cmp	r3, r2
 8009df8:	d00e      	beq.n	8009e18 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	4a1a      	ldr	r2, [pc, #104]	; (8009e68 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8009e00:	4293      	cmp	r3, r2
 8009e02:	d009      	beq.n	8009e18 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	4a18      	ldr	r2, [pc, #96]	; (8009e6c <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8009e0a:	4293      	cmp	r3, r2
 8009e0c:	d004      	beq.n	8009e18 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	4a17      	ldr	r2, [pc, #92]	; (8009e70 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8009e14:	4293      	cmp	r3, r2
 8009e16:	d10c      	bne.n	8009e32 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009e18:	68bb      	ldr	r3, [r7, #8]
 8009e1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009e1e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009e20:	683b      	ldr	r3, [r7, #0]
 8009e22:	689b      	ldr	r3, [r3, #8]
 8009e24:	68ba      	ldr	r2, [r7, #8]
 8009e26:	4313      	orrs	r3, r2
 8009e28:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	68ba      	ldr	r2, [r7, #8]
 8009e30:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	2201      	movs	r2, #1
 8009e36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	2200      	movs	r2, #0
 8009e3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009e42:	2300      	movs	r3, #0
}
 8009e44:	4618      	mov	r0, r3
 8009e46:	3714      	adds	r7, #20
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4e:	4770      	bx	lr
 8009e50:	40010000 	.word	0x40010000
 8009e54:	40010400 	.word	0x40010400
 8009e58:	40000400 	.word	0x40000400
 8009e5c:	40000800 	.word	0x40000800
 8009e60:	40000c00 	.word	0x40000c00
 8009e64:	40001800 	.word	0x40001800
 8009e68:	40014000 	.word	0x40014000
 8009e6c:	4000e000 	.word	0x4000e000
 8009e70:	4000e400 	.word	0x4000e400

08009e74 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009e74:	b480      	push	{r7}
 8009e76:	b085      	sub	sp, #20
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	6078      	str	r0, [r7, #4]
 8009e7c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009e7e:	2300      	movs	r3, #0
 8009e80:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009e88:	2b01      	cmp	r3, #1
 8009e8a:	d101      	bne.n	8009e90 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009e8c:	2302      	movs	r3, #2
 8009e8e:	e087      	b.n	8009fa0 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	2201      	movs	r2, #1
 8009e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009e9e:	683b      	ldr	r3, [r7, #0]
 8009ea0:	68db      	ldr	r3, [r3, #12]
 8009ea2:	4313      	orrs	r3, r2
 8009ea4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009eac:	683b      	ldr	r3, [r7, #0]
 8009eae:	689b      	ldr	r3, [r3, #8]
 8009eb0:	4313      	orrs	r3, r2
 8009eb2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009eba:	683b      	ldr	r3, [r7, #0]
 8009ebc:	685b      	ldr	r3, [r3, #4]
 8009ebe:	4313      	orrs	r3, r2
 8009ec0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009ec8:	683b      	ldr	r3, [r7, #0]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	4313      	orrs	r3, r2
 8009ece:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009ed6:	683b      	ldr	r3, [r7, #0]
 8009ed8:	691b      	ldr	r3, [r3, #16]
 8009eda:	4313      	orrs	r3, r2
 8009edc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009ee4:	683b      	ldr	r3, [r7, #0]
 8009ee6:	695b      	ldr	r3, [r3, #20]
 8009ee8:	4313      	orrs	r3, r2
 8009eea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009ef2:	683b      	ldr	r3, [r7, #0]
 8009ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ef6:	4313      	orrs	r3, r2
 8009ef8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8009f00:	683b      	ldr	r3, [r7, #0]
 8009f02:	699b      	ldr	r3, [r3, #24]
 8009f04:	041b      	lsls	r3, r3, #16
 8009f06:	4313      	orrs	r3, r2
 8009f08:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	4a27      	ldr	r2, [pc, #156]	; (8009fac <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8009f10:	4293      	cmp	r3, r2
 8009f12:	d004      	beq.n	8009f1e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	4a25      	ldr	r2, [pc, #148]	; (8009fb0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8009f1a:	4293      	cmp	r3, r2
 8009f1c:	d106      	bne.n	8009f2c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8009f24:	683b      	ldr	r3, [r7, #0]
 8009f26:	69db      	ldr	r3, [r3, #28]
 8009f28:	4313      	orrs	r3, r2
 8009f2a:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	4a1e      	ldr	r2, [pc, #120]	; (8009fac <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8009f32:	4293      	cmp	r3, r2
 8009f34:	d004      	beq.n	8009f40 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	4a1d      	ldr	r2, [pc, #116]	; (8009fb0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8009f3c:	4293      	cmp	r3, r2
 8009f3e:	d126      	bne.n	8009f8e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8009f46:	683b      	ldr	r3, [r7, #0]
 8009f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f4a:	051b      	lsls	r3, r3, #20
 8009f4c:	4313      	orrs	r3, r2
 8009f4e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009f56:	683b      	ldr	r3, [r7, #0]
 8009f58:	6a1b      	ldr	r3, [r3, #32]
 8009f5a:	4313      	orrs	r3, r2
 8009f5c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8009f64:	683b      	ldr	r3, [r7, #0]
 8009f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f68:	4313      	orrs	r3, r2
 8009f6a:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	4a0e      	ldr	r2, [pc, #56]	; (8009fac <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8009f72:	4293      	cmp	r3, r2
 8009f74:	d004      	beq.n	8009f80 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	4a0d      	ldr	r2, [pc, #52]	; (8009fb0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8009f7c:	4293      	cmp	r3, r2
 8009f7e:	d106      	bne.n	8009f8e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8009f86:	683b      	ldr	r3, [r7, #0]
 8009f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f8a:	4313      	orrs	r3, r2
 8009f8c:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	68fa      	ldr	r2, [r7, #12]
 8009f94:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	2200      	movs	r2, #0
 8009f9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009f9e:	2300      	movs	r3, #0
}
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	3714      	adds	r7, #20
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009faa:	4770      	bx	lr
 8009fac:	40010000 	.word	0x40010000
 8009fb0:	40010400 	.word	0x40010400

08009fb4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009fb4:	b580      	push	{r7, lr}
 8009fb6:	b082      	sub	sp, #8
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d101      	bne.n	8009fc6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009fc2:	2301      	movs	r3, #1
 8009fc4:	e042      	b.n	800a04c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d106      	bne.n	8009fde <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009fd8:	6878      	ldr	r0, [r7, #4]
 8009fda:	f7f8 f92f 	bl	800223c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	2224      	movs	r2, #36	; 0x24
 8009fe2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	681a      	ldr	r2, [r3, #0]
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	f022 0201 	bic.w	r2, r2, #1
 8009ff4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009ff6:	6878      	ldr	r0, [r7, #4]
 8009ff8:	f000 f82c 	bl	800a054 <UART_SetConfig>
 8009ffc:	4603      	mov	r3, r0
 8009ffe:	2b01      	cmp	r3, #1
 800a000:	d101      	bne.n	800a006 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800a002:	2301      	movs	r3, #1
 800a004:	e022      	b.n	800a04c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d002      	beq.n	800a014 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800a00e:	6878      	ldr	r0, [r7, #4]
 800a010:	f000 fe8c 	bl	800ad2c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	685a      	ldr	r2, [r3, #4]
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a022:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	689a      	ldr	r2, [r3, #8]
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a032:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	681a      	ldr	r2, [r3, #0]
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	f042 0201 	orr.w	r2, r2, #1
 800a042:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a044:	6878      	ldr	r0, [r7, #4]
 800a046:	f000 ff13 	bl	800ae70 <UART_CheckIdleState>
 800a04a:	4603      	mov	r3, r0
}
 800a04c:	4618      	mov	r0, r3
 800a04e:	3708      	adds	r7, #8
 800a050:	46bd      	mov	sp, r7
 800a052:	bd80      	pop	{r7, pc}

0800a054 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a054:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a058:	b092      	sub	sp, #72	; 0x48
 800a05a:	af00      	add	r7, sp, #0
 800a05c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a05e:	2300      	movs	r3, #0
 800a060:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a064:	697b      	ldr	r3, [r7, #20]
 800a066:	689a      	ldr	r2, [r3, #8]
 800a068:	697b      	ldr	r3, [r7, #20]
 800a06a:	691b      	ldr	r3, [r3, #16]
 800a06c:	431a      	orrs	r2, r3
 800a06e:	697b      	ldr	r3, [r7, #20]
 800a070:	695b      	ldr	r3, [r3, #20]
 800a072:	431a      	orrs	r2, r3
 800a074:	697b      	ldr	r3, [r7, #20]
 800a076:	69db      	ldr	r3, [r3, #28]
 800a078:	4313      	orrs	r3, r2
 800a07a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a07c:	697b      	ldr	r3, [r7, #20]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	681a      	ldr	r2, [r3, #0]
 800a082:	4bbe      	ldr	r3, [pc, #760]	; (800a37c <UART_SetConfig+0x328>)
 800a084:	4013      	ands	r3, r2
 800a086:	697a      	ldr	r2, [r7, #20]
 800a088:	6812      	ldr	r2, [r2, #0]
 800a08a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a08c:	430b      	orrs	r3, r1
 800a08e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a090:	697b      	ldr	r3, [r7, #20]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	685b      	ldr	r3, [r3, #4]
 800a096:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a09a:	697b      	ldr	r3, [r7, #20]
 800a09c:	68da      	ldr	r2, [r3, #12]
 800a09e:	697b      	ldr	r3, [r7, #20]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	430a      	orrs	r2, r1
 800a0a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a0a6:	697b      	ldr	r3, [r7, #20]
 800a0a8:	699b      	ldr	r3, [r3, #24]
 800a0aa:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a0ac:	697b      	ldr	r3, [r7, #20]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	4ab3      	ldr	r2, [pc, #716]	; (800a380 <UART_SetConfig+0x32c>)
 800a0b2:	4293      	cmp	r3, r2
 800a0b4:	d004      	beq.n	800a0c0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a0b6:	697b      	ldr	r3, [r7, #20]
 800a0b8:	6a1b      	ldr	r3, [r3, #32]
 800a0ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a0bc:	4313      	orrs	r3, r2
 800a0be:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a0c0:	697b      	ldr	r3, [r7, #20]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	689a      	ldr	r2, [r3, #8]
 800a0c6:	4baf      	ldr	r3, [pc, #700]	; (800a384 <UART_SetConfig+0x330>)
 800a0c8:	4013      	ands	r3, r2
 800a0ca:	697a      	ldr	r2, [r7, #20]
 800a0cc:	6812      	ldr	r2, [r2, #0]
 800a0ce:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a0d0:	430b      	orrs	r3, r1
 800a0d2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a0d4:	697b      	ldr	r3, [r7, #20]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0da:	f023 010f 	bic.w	r1, r3, #15
 800a0de:	697b      	ldr	r3, [r7, #20]
 800a0e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a0e2:	697b      	ldr	r3, [r7, #20]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	430a      	orrs	r2, r1
 800a0e8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a0ea:	697b      	ldr	r3, [r7, #20]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	4aa6      	ldr	r2, [pc, #664]	; (800a388 <UART_SetConfig+0x334>)
 800a0f0:	4293      	cmp	r3, r2
 800a0f2:	d177      	bne.n	800a1e4 <UART_SetConfig+0x190>
 800a0f4:	4ba5      	ldr	r3, [pc, #660]	; (800a38c <UART_SetConfig+0x338>)
 800a0f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0f8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a0fc:	2b28      	cmp	r3, #40	; 0x28
 800a0fe:	d86d      	bhi.n	800a1dc <UART_SetConfig+0x188>
 800a100:	a201      	add	r2, pc, #4	; (adr r2, 800a108 <UART_SetConfig+0xb4>)
 800a102:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a106:	bf00      	nop
 800a108:	0800a1ad 	.word	0x0800a1ad
 800a10c:	0800a1dd 	.word	0x0800a1dd
 800a110:	0800a1dd 	.word	0x0800a1dd
 800a114:	0800a1dd 	.word	0x0800a1dd
 800a118:	0800a1dd 	.word	0x0800a1dd
 800a11c:	0800a1dd 	.word	0x0800a1dd
 800a120:	0800a1dd 	.word	0x0800a1dd
 800a124:	0800a1dd 	.word	0x0800a1dd
 800a128:	0800a1b5 	.word	0x0800a1b5
 800a12c:	0800a1dd 	.word	0x0800a1dd
 800a130:	0800a1dd 	.word	0x0800a1dd
 800a134:	0800a1dd 	.word	0x0800a1dd
 800a138:	0800a1dd 	.word	0x0800a1dd
 800a13c:	0800a1dd 	.word	0x0800a1dd
 800a140:	0800a1dd 	.word	0x0800a1dd
 800a144:	0800a1dd 	.word	0x0800a1dd
 800a148:	0800a1bd 	.word	0x0800a1bd
 800a14c:	0800a1dd 	.word	0x0800a1dd
 800a150:	0800a1dd 	.word	0x0800a1dd
 800a154:	0800a1dd 	.word	0x0800a1dd
 800a158:	0800a1dd 	.word	0x0800a1dd
 800a15c:	0800a1dd 	.word	0x0800a1dd
 800a160:	0800a1dd 	.word	0x0800a1dd
 800a164:	0800a1dd 	.word	0x0800a1dd
 800a168:	0800a1c5 	.word	0x0800a1c5
 800a16c:	0800a1dd 	.word	0x0800a1dd
 800a170:	0800a1dd 	.word	0x0800a1dd
 800a174:	0800a1dd 	.word	0x0800a1dd
 800a178:	0800a1dd 	.word	0x0800a1dd
 800a17c:	0800a1dd 	.word	0x0800a1dd
 800a180:	0800a1dd 	.word	0x0800a1dd
 800a184:	0800a1dd 	.word	0x0800a1dd
 800a188:	0800a1cd 	.word	0x0800a1cd
 800a18c:	0800a1dd 	.word	0x0800a1dd
 800a190:	0800a1dd 	.word	0x0800a1dd
 800a194:	0800a1dd 	.word	0x0800a1dd
 800a198:	0800a1dd 	.word	0x0800a1dd
 800a19c:	0800a1dd 	.word	0x0800a1dd
 800a1a0:	0800a1dd 	.word	0x0800a1dd
 800a1a4:	0800a1dd 	.word	0x0800a1dd
 800a1a8:	0800a1d5 	.word	0x0800a1d5
 800a1ac:	2301      	movs	r3, #1
 800a1ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a1b2:	e326      	b.n	800a802 <UART_SetConfig+0x7ae>
 800a1b4:	2304      	movs	r3, #4
 800a1b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a1ba:	e322      	b.n	800a802 <UART_SetConfig+0x7ae>
 800a1bc:	2308      	movs	r3, #8
 800a1be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a1c2:	e31e      	b.n	800a802 <UART_SetConfig+0x7ae>
 800a1c4:	2310      	movs	r3, #16
 800a1c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a1ca:	e31a      	b.n	800a802 <UART_SetConfig+0x7ae>
 800a1cc:	2320      	movs	r3, #32
 800a1ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a1d2:	e316      	b.n	800a802 <UART_SetConfig+0x7ae>
 800a1d4:	2340      	movs	r3, #64	; 0x40
 800a1d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a1da:	e312      	b.n	800a802 <UART_SetConfig+0x7ae>
 800a1dc:	2380      	movs	r3, #128	; 0x80
 800a1de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a1e2:	e30e      	b.n	800a802 <UART_SetConfig+0x7ae>
 800a1e4:	697b      	ldr	r3, [r7, #20]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	4a69      	ldr	r2, [pc, #420]	; (800a390 <UART_SetConfig+0x33c>)
 800a1ea:	4293      	cmp	r3, r2
 800a1ec:	d130      	bne.n	800a250 <UART_SetConfig+0x1fc>
 800a1ee:	4b67      	ldr	r3, [pc, #412]	; (800a38c <UART_SetConfig+0x338>)
 800a1f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a1f2:	f003 0307 	and.w	r3, r3, #7
 800a1f6:	2b05      	cmp	r3, #5
 800a1f8:	d826      	bhi.n	800a248 <UART_SetConfig+0x1f4>
 800a1fa:	a201      	add	r2, pc, #4	; (adr r2, 800a200 <UART_SetConfig+0x1ac>)
 800a1fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a200:	0800a219 	.word	0x0800a219
 800a204:	0800a221 	.word	0x0800a221
 800a208:	0800a229 	.word	0x0800a229
 800a20c:	0800a231 	.word	0x0800a231
 800a210:	0800a239 	.word	0x0800a239
 800a214:	0800a241 	.word	0x0800a241
 800a218:	2300      	movs	r3, #0
 800a21a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a21e:	e2f0      	b.n	800a802 <UART_SetConfig+0x7ae>
 800a220:	2304      	movs	r3, #4
 800a222:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a226:	e2ec      	b.n	800a802 <UART_SetConfig+0x7ae>
 800a228:	2308      	movs	r3, #8
 800a22a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a22e:	e2e8      	b.n	800a802 <UART_SetConfig+0x7ae>
 800a230:	2310      	movs	r3, #16
 800a232:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a236:	e2e4      	b.n	800a802 <UART_SetConfig+0x7ae>
 800a238:	2320      	movs	r3, #32
 800a23a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a23e:	e2e0      	b.n	800a802 <UART_SetConfig+0x7ae>
 800a240:	2340      	movs	r3, #64	; 0x40
 800a242:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a246:	e2dc      	b.n	800a802 <UART_SetConfig+0x7ae>
 800a248:	2380      	movs	r3, #128	; 0x80
 800a24a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a24e:	e2d8      	b.n	800a802 <UART_SetConfig+0x7ae>
 800a250:	697b      	ldr	r3, [r7, #20]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	4a4f      	ldr	r2, [pc, #316]	; (800a394 <UART_SetConfig+0x340>)
 800a256:	4293      	cmp	r3, r2
 800a258:	d130      	bne.n	800a2bc <UART_SetConfig+0x268>
 800a25a:	4b4c      	ldr	r3, [pc, #304]	; (800a38c <UART_SetConfig+0x338>)
 800a25c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a25e:	f003 0307 	and.w	r3, r3, #7
 800a262:	2b05      	cmp	r3, #5
 800a264:	d826      	bhi.n	800a2b4 <UART_SetConfig+0x260>
 800a266:	a201      	add	r2, pc, #4	; (adr r2, 800a26c <UART_SetConfig+0x218>)
 800a268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a26c:	0800a285 	.word	0x0800a285
 800a270:	0800a28d 	.word	0x0800a28d
 800a274:	0800a295 	.word	0x0800a295
 800a278:	0800a29d 	.word	0x0800a29d
 800a27c:	0800a2a5 	.word	0x0800a2a5
 800a280:	0800a2ad 	.word	0x0800a2ad
 800a284:	2300      	movs	r3, #0
 800a286:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a28a:	e2ba      	b.n	800a802 <UART_SetConfig+0x7ae>
 800a28c:	2304      	movs	r3, #4
 800a28e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a292:	e2b6      	b.n	800a802 <UART_SetConfig+0x7ae>
 800a294:	2308      	movs	r3, #8
 800a296:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a29a:	e2b2      	b.n	800a802 <UART_SetConfig+0x7ae>
 800a29c:	2310      	movs	r3, #16
 800a29e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a2a2:	e2ae      	b.n	800a802 <UART_SetConfig+0x7ae>
 800a2a4:	2320      	movs	r3, #32
 800a2a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a2aa:	e2aa      	b.n	800a802 <UART_SetConfig+0x7ae>
 800a2ac:	2340      	movs	r3, #64	; 0x40
 800a2ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a2b2:	e2a6      	b.n	800a802 <UART_SetConfig+0x7ae>
 800a2b4:	2380      	movs	r3, #128	; 0x80
 800a2b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a2ba:	e2a2      	b.n	800a802 <UART_SetConfig+0x7ae>
 800a2bc:	697b      	ldr	r3, [r7, #20]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	4a35      	ldr	r2, [pc, #212]	; (800a398 <UART_SetConfig+0x344>)
 800a2c2:	4293      	cmp	r3, r2
 800a2c4:	d130      	bne.n	800a328 <UART_SetConfig+0x2d4>
 800a2c6:	4b31      	ldr	r3, [pc, #196]	; (800a38c <UART_SetConfig+0x338>)
 800a2c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2ca:	f003 0307 	and.w	r3, r3, #7
 800a2ce:	2b05      	cmp	r3, #5
 800a2d0:	d826      	bhi.n	800a320 <UART_SetConfig+0x2cc>
 800a2d2:	a201      	add	r2, pc, #4	; (adr r2, 800a2d8 <UART_SetConfig+0x284>)
 800a2d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2d8:	0800a2f1 	.word	0x0800a2f1
 800a2dc:	0800a2f9 	.word	0x0800a2f9
 800a2e0:	0800a301 	.word	0x0800a301
 800a2e4:	0800a309 	.word	0x0800a309
 800a2e8:	0800a311 	.word	0x0800a311
 800a2ec:	0800a319 	.word	0x0800a319
 800a2f0:	2300      	movs	r3, #0
 800a2f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a2f6:	e284      	b.n	800a802 <UART_SetConfig+0x7ae>
 800a2f8:	2304      	movs	r3, #4
 800a2fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a2fe:	e280      	b.n	800a802 <UART_SetConfig+0x7ae>
 800a300:	2308      	movs	r3, #8
 800a302:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a306:	e27c      	b.n	800a802 <UART_SetConfig+0x7ae>
 800a308:	2310      	movs	r3, #16
 800a30a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a30e:	e278      	b.n	800a802 <UART_SetConfig+0x7ae>
 800a310:	2320      	movs	r3, #32
 800a312:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a316:	e274      	b.n	800a802 <UART_SetConfig+0x7ae>
 800a318:	2340      	movs	r3, #64	; 0x40
 800a31a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a31e:	e270      	b.n	800a802 <UART_SetConfig+0x7ae>
 800a320:	2380      	movs	r3, #128	; 0x80
 800a322:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a326:	e26c      	b.n	800a802 <UART_SetConfig+0x7ae>
 800a328:	697b      	ldr	r3, [r7, #20]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	4a1b      	ldr	r2, [pc, #108]	; (800a39c <UART_SetConfig+0x348>)
 800a32e:	4293      	cmp	r3, r2
 800a330:	d142      	bne.n	800a3b8 <UART_SetConfig+0x364>
 800a332:	4b16      	ldr	r3, [pc, #88]	; (800a38c <UART_SetConfig+0x338>)
 800a334:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a336:	f003 0307 	and.w	r3, r3, #7
 800a33a:	2b05      	cmp	r3, #5
 800a33c:	d838      	bhi.n	800a3b0 <UART_SetConfig+0x35c>
 800a33e:	a201      	add	r2, pc, #4	; (adr r2, 800a344 <UART_SetConfig+0x2f0>)
 800a340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a344:	0800a35d 	.word	0x0800a35d
 800a348:	0800a365 	.word	0x0800a365
 800a34c:	0800a36d 	.word	0x0800a36d
 800a350:	0800a375 	.word	0x0800a375
 800a354:	0800a3a1 	.word	0x0800a3a1
 800a358:	0800a3a9 	.word	0x0800a3a9
 800a35c:	2300      	movs	r3, #0
 800a35e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a362:	e24e      	b.n	800a802 <UART_SetConfig+0x7ae>
 800a364:	2304      	movs	r3, #4
 800a366:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a36a:	e24a      	b.n	800a802 <UART_SetConfig+0x7ae>
 800a36c:	2308      	movs	r3, #8
 800a36e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a372:	e246      	b.n	800a802 <UART_SetConfig+0x7ae>
 800a374:	2310      	movs	r3, #16
 800a376:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a37a:	e242      	b.n	800a802 <UART_SetConfig+0x7ae>
 800a37c:	cfff69f3 	.word	0xcfff69f3
 800a380:	58000c00 	.word	0x58000c00
 800a384:	11fff4ff 	.word	0x11fff4ff
 800a388:	40011000 	.word	0x40011000
 800a38c:	58024400 	.word	0x58024400
 800a390:	40004400 	.word	0x40004400
 800a394:	40004800 	.word	0x40004800
 800a398:	40004c00 	.word	0x40004c00
 800a39c:	40005000 	.word	0x40005000
 800a3a0:	2320      	movs	r3, #32
 800a3a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a3a6:	e22c      	b.n	800a802 <UART_SetConfig+0x7ae>
 800a3a8:	2340      	movs	r3, #64	; 0x40
 800a3aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a3ae:	e228      	b.n	800a802 <UART_SetConfig+0x7ae>
 800a3b0:	2380      	movs	r3, #128	; 0x80
 800a3b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a3b6:	e224      	b.n	800a802 <UART_SetConfig+0x7ae>
 800a3b8:	697b      	ldr	r3, [r7, #20]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	4ab1      	ldr	r2, [pc, #708]	; (800a684 <UART_SetConfig+0x630>)
 800a3be:	4293      	cmp	r3, r2
 800a3c0:	d176      	bne.n	800a4b0 <UART_SetConfig+0x45c>
 800a3c2:	4bb1      	ldr	r3, [pc, #708]	; (800a688 <UART_SetConfig+0x634>)
 800a3c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a3ca:	2b28      	cmp	r3, #40	; 0x28
 800a3cc:	d86c      	bhi.n	800a4a8 <UART_SetConfig+0x454>
 800a3ce:	a201      	add	r2, pc, #4	; (adr r2, 800a3d4 <UART_SetConfig+0x380>)
 800a3d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3d4:	0800a479 	.word	0x0800a479
 800a3d8:	0800a4a9 	.word	0x0800a4a9
 800a3dc:	0800a4a9 	.word	0x0800a4a9
 800a3e0:	0800a4a9 	.word	0x0800a4a9
 800a3e4:	0800a4a9 	.word	0x0800a4a9
 800a3e8:	0800a4a9 	.word	0x0800a4a9
 800a3ec:	0800a4a9 	.word	0x0800a4a9
 800a3f0:	0800a4a9 	.word	0x0800a4a9
 800a3f4:	0800a481 	.word	0x0800a481
 800a3f8:	0800a4a9 	.word	0x0800a4a9
 800a3fc:	0800a4a9 	.word	0x0800a4a9
 800a400:	0800a4a9 	.word	0x0800a4a9
 800a404:	0800a4a9 	.word	0x0800a4a9
 800a408:	0800a4a9 	.word	0x0800a4a9
 800a40c:	0800a4a9 	.word	0x0800a4a9
 800a410:	0800a4a9 	.word	0x0800a4a9
 800a414:	0800a489 	.word	0x0800a489
 800a418:	0800a4a9 	.word	0x0800a4a9
 800a41c:	0800a4a9 	.word	0x0800a4a9
 800a420:	0800a4a9 	.word	0x0800a4a9
 800a424:	0800a4a9 	.word	0x0800a4a9
 800a428:	0800a4a9 	.word	0x0800a4a9
 800a42c:	0800a4a9 	.word	0x0800a4a9
 800a430:	0800a4a9 	.word	0x0800a4a9
 800a434:	0800a491 	.word	0x0800a491
 800a438:	0800a4a9 	.word	0x0800a4a9
 800a43c:	0800a4a9 	.word	0x0800a4a9
 800a440:	0800a4a9 	.word	0x0800a4a9
 800a444:	0800a4a9 	.word	0x0800a4a9
 800a448:	0800a4a9 	.word	0x0800a4a9
 800a44c:	0800a4a9 	.word	0x0800a4a9
 800a450:	0800a4a9 	.word	0x0800a4a9
 800a454:	0800a499 	.word	0x0800a499
 800a458:	0800a4a9 	.word	0x0800a4a9
 800a45c:	0800a4a9 	.word	0x0800a4a9
 800a460:	0800a4a9 	.word	0x0800a4a9
 800a464:	0800a4a9 	.word	0x0800a4a9
 800a468:	0800a4a9 	.word	0x0800a4a9
 800a46c:	0800a4a9 	.word	0x0800a4a9
 800a470:	0800a4a9 	.word	0x0800a4a9
 800a474:	0800a4a1 	.word	0x0800a4a1
 800a478:	2301      	movs	r3, #1
 800a47a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a47e:	e1c0      	b.n	800a802 <UART_SetConfig+0x7ae>
 800a480:	2304      	movs	r3, #4
 800a482:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a486:	e1bc      	b.n	800a802 <UART_SetConfig+0x7ae>
 800a488:	2308      	movs	r3, #8
 800a48a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a48e:	e1b8      	b.n	800a802 <UART_SetConfig+0x7ae>
 800a490:	2310      	movs	r3, #16
 800a492:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a496:	e1b4      	b.n	800a802 <UART_SetConfig+0x7ae>
 800a498:	2320      	movs	r3, #32
 800a49a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a49e:	e1b0      	b.n	800a802 <UART_SetConfig+0x7ae>
 800a4a0:	2340      	movs	r3, #64	; 0x40
 800a4a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a4a6:	e1ac      	b.n	800a802 <UART_SetConfig+0x7ae>
 800a4a8:	2380      	movs	r3, #128	; 0x80
 800a4aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a4ae:	e1a8      	b.n	800a802 <UART_SetConfig+0x7ae>
 800a4b0:	697b      	ldr	r3, [r7, #20]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	4a75      	ldr	r2, [pc, #468]	; (800a68c <UART_SetConfig+0x638>)
 800a4b6:	4293      	cmp	r3, r2
 800a4b8:	d130      	bne.n	800a51c <UART_SetConfig+0x4c8>
 800a4ba:	4b73      	ldr	r3, [pc, #460]	; (800a688 <UART_SetConfig+0x634>)
 800a4bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4be:	f003 0307 	and.w	r3, r3, #7
 800a4c2:	2b05      	cmp	r3, #5
 800a4c4:	d826      	bhi.n	800a514 <UART_SetConfig+0x4c0>
 800a4c6:	a201      	add	r2, pc, #4	; (adr r2, 800a4cc <UART_SetConfig+0x478>)
 800a4c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4cc:	0800a4e5 	.word	0x0800a4e5
 800a4d0:	0800a4ed 	.word	0x0800a4ed
 800a4d4:	0800a4f5 	.word	0x0800a4f5
 800a4d8:	0800a4fd 	.word	0x0800a4fd
 800a4dc:	0800a505 	.word	0x0800a505
 800a4e0:	0800a50d 	.word	0x0800a50d
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a4ea:	e18a      	b.n	800a802 <UART_SetConfig+0x7ae>
 800a4ec:	2304      	movs	r3, #4
 800a4ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a4f2:	e186      	b.n	800a802 <UART_SetConfig+0x7ae>
 800a4f4:	2308      	movs	r3, #8
 800a4f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a4fa:	e182      	b.n	800a802 <UART_SetConfig+0x7ae>
 800a4fc:	2310      	movs	r3, #16
 800a4fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a502:	e17e      	b.n	800a802 <UART_SetConfig+0x7ae>
 800a504:	2320      	movs	r3, #32
 800a506:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a50a:	e17a      	b.n	800a802 <UART_SetConfig+0x7ae>
 800a50c:	2340      	movs	r3, #64	; 0x40
 800a50e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a512:	e176      	b.n	800a802 <UART_SetConfig+0x7ae>
 800a514:	2380      	movs	r3, #128	; 0x80
 800a516:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a51a:	e172      	b.n	800a802 <UART_SetConfig+0x7ae>
 800a51c:	697b      	ldr	r3, [r7, #20]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	4a5b      	ldr	r2, [pc, #364]	; (800a690 <UART_SetConfig+0x63c>)
 800a522:	4293      	cmp	r3, r2
 800a524:	d130      	bne.n	800a588 <UART_SetConfig+0x534>
 800a526:	4b58      	ldr	r3, [pc, #352]	; (800a688 <UART_SetConfig+0x634>)
 800a528:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a52a:	f003 0307 	and.w	r3, r3, #7
 800a52e:	2b05      	cmp	r3, #5
 800a530:	d826      	bhi.n	800a580 <UART_SetConfig+0x52c>
 800a532:	a201      	add	r2, pc, #4	; (adr r2, 800a538 <UART_SetConfig+0x4e4>)
 800a534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a538:	0800a551 	.word	0x0800a551
 800a53c:	0800a559 	.word	0x0800a559
 800a540:	0800a561 	.word	0x0800a561
 800a544:	0800a569 	.word	0x0800a569
 800a548:	0800a571 	.word	0x0800a571
 800a54c:	0800a579 	.word	0x0800a579
 800a550:	2300      	movs	r3, #0
 800a552:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a556:	e154      	b.n	800a802 <UART_SetConfig+0x7ae>
 800a558:	2304      	movs	r3, #4
 800a55a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a55e:	e150      	b.n	800a802 <UART_SetConfig+0x7ae>
 800a560:	2308      	movs	r3, #8
 800a562:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a566:	e14c      	b.n	800a802 <UART_SetConfig+0x7ae>
 800a568:	2310      	movs	r3, #16
 800a56a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a56e:	e148      	b.n	800a802 <UART_SetConfig+0x7ae>
 800a570:	2320      	movs	r3, #32
 800a572:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a576:	e144      	b.n	800a802 <UART_SetConfig+0x7ae>
 800a578:	2340      	movs	r3, #64	; 0x40
 800a57a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a57e:	e140      	b.n	800a802 <UART_SetConfig+0x7ae>
 800a580:	2380      	movs	r3, #128	; 0x80
 800a582:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a586:	e13c      	b.n	800a802 <UART_SetConfig+0x7ae>
 800a588:	697b      	ldr	r3, [r7, #20]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	4a41      	ldr	r2, [pc, #260]	; (800a694 <UART_SetConfig+0x640>)
 800a58e:	4293      	cmp	r3, r2
 800a590:	f040 8082 	bne.w	800a698 <UART_SetConfig+0x644>
 800a594:	4b3c      	ldr	r3, [pc, #240]	; (800a688 <UART_SetConfig+0x634>)
 800a596:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a598:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a59c:	2b28      	cmp	r3, #40	; 0x28
 800a59e:	d86d      	bhi.n	800a67c <UART_SetConfig+0x628>
 800a5a0:	a201      	add	r2, pc, #4	; (adr r2, 800a5a8 <UART_SetConfig+0x554>)
 800a5a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5a6:	bf00      	nop
 800a5a8:	0800a64d 	.word	0x0800a64d
 800a5ac:	0800a67d 	.word	0x0800a67d
 800a5b0:	0800a67d 	.word	0x0800a67d
 800a5b4:	0800a67d 	.word	0x0800a67d
 800a5b8:	0800a67d 	.word	0x0800a67d
 800a5bc:	0800a67d 	.word	0x0800a67d
 800a5c0:	0800a67d 	.word	0x0800a67d
 800a5c4:	0800a67d 	.word	0x0800a67d
 800a5c8:	0800a655 	.word	0x0800a655
 800a5cc:	0800a67d 	.word	0x0800a67d
 800a5d0:	0800a67d 	.word	0x0800a67d
 800a5d4:	0800a67d 	.word	0x0800a67d
 800a5d8:	0800a67d 	.word	0x0800a67d
 800a5dc:	0800a67d 	.word	0x0800a67d
 800a5e0:	0800a67d 	.word	0x0800a67d
 800a5e4:	0800a67d 	.word	0x0800a67d
 800a5e8:	0800a65d 	.word	0x0800a65d
 800a5ec:	0800a67d 	.word	0x0800a67d
 800a5f0:	0800a67d 	.word	0x0800a67d
 800a5f4:	0800a67d 	.word	0x0800a67d
 800a5f8:	0800a67d 	.word	0x0800a67d
 800a5fc:	0800a67d 	.word	0x0800a67d
 800a600:	0800a67d 	.word	0x0800a67d
 800a604:	0800a67d 	.word	0x0800a67d
 800a608:	0800a665 	.word	0x0800a665
 800a60c:	0800a67d 	.word	0x0800a67d
 800a610:	0800a67d 	.word	0x0800a67d
 800a614:	0800a67d 	.word	0x0800a67d
 800a618:	0800a67d 	.word	0x0800a67d
 800a61c:	0800a67d 	.word	0x0800a67d
 800a620:	0800a67d 	.word	0x0800a67d
 800a624:	0800a67d 	.word	0x0800a67d
 800a628:	0800a66d 	.word	0x0800a66d
 800a62c:	0800a67d 	.word	0x0800a67d
 800a630:	0800a67d 	.word	0x0800a67d
 800a634:	0800a67d 	.word	0x0800a67d
 800a638:	0800a67d 	.word	0x0800a67d
 800a63c:	0800a67d 	.word	0x0800a67d
 800a640:	0800a67d 	.word	0x0800a67d
 800a644:	0800a67d 	.word	0x0800a67d
 800a648:	0800a675 	.word	0x0800a675
 800a64c:	2301      	movs	r3, #1
 800a64e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a652:	e0d6      	b.n	800a802 <UART_SetConfig+0x7ae>
 800a654:	2304      	movs	r3, #4
 800a656:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a65a:	e0d2      	b.n	800a802 <UART_SetConfig+0x7ae>
 800a65c:	2308      	movs	r3, #8
 800a65e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a662:	e0ce      	b.n	800a802 <UART_SetConfig+0x7ae>
 800a664:	2310      	movs	r3, #16
 800a666:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a66a:	e0ca      	b.n	800a802 <UART_SetConfig+0x7ae>
 800a66c:	2320      	movs	r3, #32
 800a66e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a672:	e0c6      	b.n	800a802 <UART_SetConfig+0x7ae>
 800a674:	2340      	movs	r3, #64	; 0x40
 800a676:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a67a:	e0c2      	b.n	800a802 <UART_SetConfig+0x7ae>
 800a67c:	2380      	movs	r3, #128	; 0x80
 800a67e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a682:	e0be      	b.n	800a802 <UART_SetConfig+0x7ae>
 800a684:	40011400 	.word	0x40011400
 800a688:	58024400 	.word	0x58024400
 800a68c:	40007800 	.word	0x40007800
 800a690:	40007c00 	.word	0x40007c00
 800a694:	40011800 	.word	0x40011800
 800a698:	697b      	ldr	r3, [r7, #20]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	4aad      	ldr	r2, [pc, #692]	; (800a954 <UART_SetConfig+0x900>)
 800a69e:	4293      	cmp	r3, r2
 800a6a0:	d176      	bne.n	800a790 <UART_SetConfig+0x73c>
 800a6a2:	4bad      	ldr	r3, [pc, #692]	; (800a958 <UART_SetConfig+0x904>)
 800a6a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a6aa:	2b28      	cmp	r3, #40	; 0x28
 800a6ac:	d86c      	bhi.n	800a788 <UART_SetConfig+0x734>
 800a6ae:	a201      	add	r2, pc, #4	; (adr r2, 800a6b4 <UART_SetConfig+0x660>)
 800a6b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6b4:	0800a759 	.word	0x0800a759
 800a6b8:	0800a789 	.word	0x0800a789
 800a6bc:	0800a789 	.word	0x0800a789
 800a6c0:	0800a789 	.word	0x0800a789
 800a6c4:	0800a789 	.word	0x0800a789
 800a6c8:	0800a789 	.word	0x0800a789
 800a6cc:	0800a789 	.word	0x0800a789
 800a6d0:	0800a789 	.word	0x0800a789
 800a6d4:	0800a761 	.word	0x0800a761
 800a6d8:	0800a789 	.word	0x0800a789
 800a6dc:	0800a789 	.word	0x0800a789
 800a6e0:	0800a789 	.word	0x0800a789
 800a6e4:	0800a789 	.word	0x0800a789
 800a6e8:	0800a789 	.word	0x0800a789
 800a6ec:	0800a789 	.word	0x0800a789
 800a6f0:	0800a789 	.word	0x0800a789
 800a6f4:	0800a769 	.word	0x0800a769
 800a6f8:	0800a789 	.word	0x0800a789
 800a6fc:	0800a789 	.word	0x0800a789
 800a700:	0800a789 	.word	0x0800a789
 800a704:	0800a789 	.word	0x0800a789
 800a708:	0800a789 	.word	0x0800a789
 800a70c:	0800a789 	.word	0x0800a789
 800a710:	0800a789 	.word	0x0800a789
 800a714:	0800a771 	.word	0x0800a771
 800a718:	0800a789 	.word	0x0800a789
 800a71c:	0800a789 	.word	0x0800a789
 800a720:	0800a789 	.word	0x0800a789
 800a724:	0800a789 	.word	0x0800a789
 800a728:	0800a789 	.word	0x0800a789
 800a72c:	0800a789 	.word	0x0800a789
 800a730:	0800a789 	.word	0x0800a789
 800a734:	0800a779 	.word	0x0800a779
 800a738:	0800a789 	.word	0x0800a789
 800a73c:	0800a789 	.word	0x0800a789
 800a740:	0800a789 	.word	0x0800a789
 800a744:	0800a789 	.word	0x0800a789
 800a748:	0800a789 	.word	0x0800a789
 800a74c:	0800a789 	.word	0x0800a789
 800a750:	0800a789 	.word	0x0800a789
 800a754:	0800a781 	.word	0x0800a781
 800a758:	2301      	movs	r3, #1
 800a75a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a75e:	e050      	b.n	800a802 <UART_SetConfig+0x7ae>
 800a760:	2304      	movs	r3, #4
 800a762:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a766:	e04c      	b.n	800a802 <UART_SetConfig+0x7ae>
 800a768:	2308      	movs	r3, #8
 800a76a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a76e:	e048      	b.n	800a802 <UART_SetConfig+0x7ae>
 800a770:	2310      	movs	r3, #16
 800a772:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a776:	e044      	b.n	800a802 <UART_SetConfig+0x7ae>
 800a778:	2320      	movs	r3, #32
 800a77a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a77e:	e040      	b.n	800a802 <UART_SetConfig+0x7ae>
 800a780:	2340      	movs	r3, #64	; 0x40
 800a782:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a786:	e03c      	b.n	800a802 <UART_SetConfig+0x7ae>
 800a788:	2380      	movs	r3, #128	; 0x80
 800a78a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a78e:	e038      	b.n	800a802 <UART_SetConfig+0x7ae>
 800a790:	697b      	ldr	r3, [r7, #20]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	4a71      	ldr	r2, [pc, #452]	; (800a95c <UART_SetConfig+0x908>)
 800a796:	4293      	cmp	r3, r2
 800a798:	d130      	bne.n	800a7fc <UART_SetConfig+0x7a8>
 800a79a:	4b6f      	ldr	r3, [pc, #444]	; (800a958 <UART_SetConfig+0x904>)
 800a79c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a79e:	f003 0307 	and.w	r3, r3, #7
 800a7a2:	2b05      	cmp	r3, #5
 800a7a4:	d826      	bhi.n	800a7f4 <UART_SetConfig+0x7a0>
 800a7a6:	a201      	add	r2, pc, #4	; (adr r2, 800a7ac <UART_SetConfig+0x758>)
 800a7a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7ac:	0800a7c5 	.word	0x0800a7c5
 800a7b0:	0800a7cd 	.word	0x0800a7cd
 800a7b4:	0800a7d5 	.word	0x0800a7d5
 800a7b8:	0800a7dd 	.word	0x0800a7dd
 800a7bc:	0800a7e5 	.word	0x0800a7e5
 800a7c0:	0800a7ed 	.word	0x0800a7ed
 800a7c4:	2302      	movs	r3, #2
 800a7c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a7ca:	e01a      	b.n	800a802 <UART_SetConfig+0x7ae>
 800a7cc:	2304      	movs	r3, #4
 800a7ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a7d2:	e016      	b.n	800a802 <UART_SetConfig+0x7ae>
 800a7d4:	2308      	movs	r3, #8
 800a7d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a7da:	e012      	b.n	800a802 <UART_SetConfig+0x7ae>
 800a7dc:	2310      	movs	r3, #16
 800a7de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a7e2:	e00e      	b.n	800a802 <UART_SetConfig+0x7ae>
 800a7e4:	2320      	movs	r3, #32
 800a7e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a7ea:	e00a      	b.n	800a802 <UART_SetConfig+0x7ae>
 800a7ec:	2340      	movs	r3, #64	; 0x40
 800a7ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a7f2:	e006      	b.n	800a802 <UART_SetConfig+0x7ae>
 800a7f4:	2380      	movs	r3, #128	; 0x80
 800a7f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a7fa:	e002      	b.n	800a802 <UART_SetConfig+0x7ae>
 800a7fc:	2380      	movs	r3, #128	; 0x80
 800a7fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a802:	697b      	ldr	r3, [r7, #20]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	4a55      	ldr	r2, [pc, #340]	; (800a95c <UART_SetConfig+0x908>)
 800a808:	4293      	cmp	r3, r2
 800a80a:	f040 80f8 	bne.w	800a9fe <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a80e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a812:	2b20      	cmp	r3, #32
 800a814:	dc46      	bgt.n	800a8a4 <UART_SetConfig+0x850>
 800a816:	2b02      	cmp	r3, #2
 800a818:	db75      	blt.n	800a906 <UART_SetConfig+0x8b2>
 800a81a:	3b02      	subs	r3, #2
 800a81c:	2b1e      	cmp	r3, #30
 800a81e:	d872      	bhi.n	800a906 <UART_SetConfig+0x8b2>
 800a820:	a201      	add	r2, pc, #4	; (adr r2, 800a828 <UART_SetConfig+0x7d4>)
 800a822:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a826:	bf00      	nop
 800a828:	0800a8ab 	.word	0x0800a8ab
 800a82c:	0800a907 	.word	0x0800a907
 800a830:	0800a8b3 	.word	0x0800a8b3
 800a834:	0800a907 	.word	0x0800a907
 800a838:	0800a907 	.word	0x0800a907
 800a83c:	0800a907 	.word	0x0800a907
 800a840:	0800a8c3 	.word	0x0800a8c3
 800a844:	0800a907 	.word	0x0800a907
 800a848:	0800a907 	.word	0x0800a907
 800a84c:	0800a907 	.word	0x0800a907
 800a850:	0800a907 	.word	0x0800a907
 800a854:	0800a907 	.word	0x0800a907
 800a858:	0800a907 	.word	0x0800a907
 800a85c:	0800a907 	.word	0x0800a907
 800a860:	0800a8d3 	.word	0x0800a8d3
 800a864:	0800a907 	.word	0x0800a907
 800a868:	0800a907 	.word	0x0800a907
 800a86c:	0800a907 	.word	0x0800a907
 800a870:	0800a907 	.word	0x0800a907
 800a874:	0800a907 	.word	0x0800a907
 800a878:	0800a907 	.word	0x0800a907
 800a87c:	0800a907 	.word	0x0800a907
 800a880:	0800a907 	.word	0x0800a907
 800a884:	0800a907 	.word	0x0800a907
 800a888:	0800a907 	.word	0x0800a907
 800a88c:	0800a907 	.word	0x0800a907
 800a890:	0800a907 	.word	0x0800a907
 800a894:	0800a907 	.word	0x0800a907
 800a898:	0800a907 	.word	0x0800a907
 800a89c:	0800a907 	.word	0x0800a907
 800a8a0:	0800a8f9 	.word	0x0800a8f9
 800a8a4:	2b40      	cmp	r3, #64	; 0x40
 800a8a6:	d02a      	beq.n	800a8fe <UART_SetConfig+0x8aa>
 800a8a8:	e02d      	b.n	800a906 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a8aa:	f7fd f9bb 	bl	8007c24 <HAL_RCCEx_GetD3PCLK1Freq>
 800a8ae:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a8b0:	e02f      	b.n	800a912 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a8b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a8b6:	4618      	mov	r0, r3
 800a8b8:	f7fd f9ca 	bl	8007c50 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a8bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a8c0:	e027      	b.n	800a912 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a8c2:	f107 0318 	add.w	r3, r7, #24
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	f7fd fb16 	bl	8007ef8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a8cc:	69fb      	ldr	r3, [r7, #28]
 800a8ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a8d0:	e01f      	b.n	800a912 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a8d2:	4b21      	ldr	r3, [pc, #132]	; (800a958 <UART_SetConfig+0x904>)
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	f003 0320 	and.w	r3, r3, #32
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d009      	beq.n	800a8f2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a8de:	4b1e      	ldr	r3, [pc, #120]	; (800a958 <UART_SetConfig+0x904>)
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	08db      	lsrs	r3, r3, #3
 800a8e4:	f003 0303 	and.w	r3, r3, #3
 800a8e8:	4a1d      	ldr	r2, [pc, #116]	; (800a960 <UART_SetConfig+0x90c>)
 800a8ea:	fa22 f303 	lsr.w	r3, r2, r3
 800a8ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a8f0:	e00f      	b.n	800a912 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800a8f2:	4b1b      	ldr	r3, [pc, #108]	; (800a960 <UART_SetConfig+0x90c>)
 800a8f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a8f6:	e00c      	b.n	800a912 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a8f8:	4b1a      	ldr	r3, [pc, #104]	; (800a964 <UART_SetConfig+0x910>)
 800a8fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a8fc:	e009      	b.n	800a912 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a8fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a902:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a904:	e005      	b.n	800a912 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800a906:	2300      	movs	r3, #0
 800a908:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a90a:	2301      	movs	r3, #1
 800a90c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a910:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a912:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a914:	2b00      	cmp	r3, #0
 800a916:	f000 81ee 	beq.w	800acf6 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a91a:	697b      	ldr	r3, [r7, #20]
 800a91c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a91e:	4a12      	ldr	r2, [pc, #72]	; (800a968 <UART_SetConfig+0x914>)
 800a920:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a924:	461a      	mov	r2, r3
 800a926:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a928:	fbb3 f3f2 	udiv	r3, r3, r2
 800a92c:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a92e:	697b      	ldr	r3, [r7, #20]
 800a930:	685a      	ldr	r2, [r3, #4]
 800a932:	4613      	mov	r3, r2
 800a934:	005b      	lsls	r3, r3, #1
 800a936:	4413      	add	r3, r2
 800a938:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a93a:	429a      	cmp	r2, r3
 800a93c:	d305      	bcc.n	800a94a <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a93e:	697b      	ldr	r3, [r7, #20]
 800a940:	685b      	ldr	r3, [r3, #4]
 800a942:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a944:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a946:	429a      	cmp	r2, r3
 800a948:	d910      	bls.n	800a96c <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800a94a:	2301      	movs	r3, #1
 800a94c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a950:	e1d1      	b.n	800acf6 <UART_SetConfig+0xca2>
 800a952:	bf00      	nop
 800a954:	40011c00 	.word	0x40011c00
 800a958:	58024400 	.word	0x58024400
 800a95c:	58000c00 	.word	0x58000c00
 800a960:	03d09000 	.word	0x03d09000
 800a964:	003d0900 	.word	0x003d0900
 800a968:	0800b3f0 	.word	0x0800b3f0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a96c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a96e:	2200      	movs	r2, #0
 800a970:	60bb      	str	r3, [r7, #8]
 800a972:	60fa      	str	r2, [r7, #12]
 800a974:	697b      	ldr	r3, [r7, #20]
 800a976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a978:	4ac0      	ldr	r2, [pc, #768]	; (800ac7c <UART_SetConfig+0xc28>)
 800a97a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a97e:	b29b      	uxth	r3, r3
 800a980:	2200      	movs	r2, #0
 800a982:	603b      	str	r3, [r7, #0]
 800a984:	607a      	str	r2, [r7, #4]
 800a986:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a98a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a98e:	f7f5 fcbd 	bl	800030c <__aeabi_uldivmod>
 800a992:	4602      	mov	r2, r0
 800a994:	460b      	mov	r3, r1
 800a996:	4610      	mov	r0, r2
 800a998:	4619      	mov	r1, r3
 800a99a:	f04f 0200 	mov.w	r2, #0
 800a99e:	f04f 0300 	mov.w	r3, #0
 800a9a2:	020b      	lsls	r3, r1, #8
 800a9a4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a9a8:	0202      	lsls	r2, r0, #8
 800a9aa:	6979      	ldr	r1, [r7, #20]
 800a9ac:	6849      	ldr	r1, [r1, #4]
 800a9ae:	0849      	lsrs	r1, r1, #1
 800a9b0:	2000      	movs	r0, #0
 800a9b2:	460c      	mov	r4, r1
 800a9b4:	4605      	mov	r5, r0
 800a9b6:	eb12 0804 	adds.w	r8, r2, r4
 800a9ba:	eb43 0905 	adc.w	r9, r3, r5
 800a9be:	697b      	ldr	r3, [r7, #20]
 800a9c0:	685b      	ldr	r3, [r3, #4]
 800a9c2:	2200      	movs	r2, #0
 800a9c4:	469a      	mov	sl, r3
 800a9c6:	4693      	mov	fp, r2
 800a9c8:	4652      	mov	r2, sl
 800a9ca:	465b      	mov	r3, fp
 800a9cc:	4640      	mov	r0, r8
 800a9ce:	4649      	mov	r1, r9
 800a9d0:	f7f5 fc9c 	bl	800030c <__aeabi_uldivmod>
 800a9d4:	4602      	mov	r2, r0
 800a9d6:	460b      	mov	r3, r1
 800a9d8:	4613      	mov	r3, r2
 800a9da:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a9dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a9e2:	d308      	bcc.n	800a9f6 <UART_SetConfig+0x9a2>
 800a9e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a9ea:	d204      	bcs.n	800a9f6 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800a9ec:	697b      	ldr	r3, [r7, #20]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a9f2:	60da      	str	r2, [r3, #12]
 800a9f4:	e17f      	b.n	800acf6 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800a9f6:	2301      	movs	r3, #1
 800a9f8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a9fc:	e17b      	b.n	800acf6 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a9fe:	697b      	ldr	r3, [r7, #20]
 800aa00:	69db      	ldr	r3, [r3, #28]
 800aa02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aa06:	f040 80bd 	bne.w	800ab84 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800aa0a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800aa0e:	2b20      	cmp	r3, #32
 800aa10:	dc48      	bgt.n	800aaa4 <UART_SetConfig+0xa50>
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	db7b      	blt.n	800ab0e <UART_SetConfig+0xaba>
 800aa16:	2b20      	cmp	r3, #32
 800aa18:	d879      	bhi.n	800ab0e <UART_SetConfig+0xaba>
 800aa1a:	a201      	add	r2, pc, #4	; (adr r2, 800aa20 <UART_SetConfig+0x9cc>)
 800aa1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa20:	0800aaab 	.word	0x0800aaab
 800aa24:	0800aab3 	.word	0x0800aab3
 800aa28:	0800ab0f 	.word	0x0800ab0f
 800aa2c:	0800ab0f 	.word	0x0800ab0f
 800aa30:	0800aabb 	.word	0x0800aabb
 800aa34:	0800ab0f 	.word	0x0800ab0f
 800aa38:	0800ab0f 	.word	0x0800ab0f
 800aa3c:	0800ab0f 	.word	0x0800ab0f
 800aa40:	0800aacb 	.word	0x0800aacb
 800aa44:	0800ab0f 	.word	0x0800ab0f
 800aa48:	0800ab0f 	.word	0x0800ab0f
 800aa4c:	0800ab0f 	.word	0x0800ab0f
 800aa50:	0800ab0f 	.word	0x0800ab0f
 800aa54:	0800ab0f 	.word	0x0800ab0f
 800aa58:	0800ab0f 	.word	0x0800ab0f
 800aa5c:	0800ab0f 	.word	0x0800ab0f
 800aa60:	0800aadb 	.word	0x0800aadb
 800aa64:	0800ab0f 	.word	0x0800ab0f
 800aa68:	0800ab0f 	.word	0x0800ab0f
 800aa6c:	0800ab0f 	.word	0x0800ab0f
 800aa70:	0800ab0f 	.word	0x0800ab0f
 800aa74:	0800ab0f 	.word	0x0800ab0f
 800aa78:	0800ab0f 	.word	0x0800ab0f
 800aa7c:	0800ab0f 	.word	0x0800ab0f
 800aa80:	0800ab0f 	.word	0x0800ab0f
 800aa84:	0800ab0f 	.word	0x0800ab0f
 800aa88:	0800ab0f 	.word	0x0800ab0f
 800aa8c:	0800ab0f 	.word	0x0800ab0f
 800aa90:	0800ab0f 	.word	0x0800ab0f
 800aa94:	0800ab0f 	.word	0x0800ab0f
 800aa98:	0800ab0f 	.word	0x0800ab0f
 800aa9c:	0800ab0f 	.word	0x0800ab0f
 800aaa0:	0800ab01 	.word	0x0800ab01
 800aaa4:	2b40      	cmp	r3, #64	; 0x40
 800aaa6:	d02e      	beq.n	800ab06 <UART_SetConfig+0xab2>
 800aaa8:	e031      	b.n	800ab0e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aaaa:	f7fb feef 	bl	800688c <HAL_RCC_GetPCLK1Freq>
 800aaae:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800aab0:	e033      	b.n	800ab1a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800aab2:	f7fb ff01 	bl	80068b8 <HAL_RCC_GetPCLK2Freq>
 800aab6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800aab8:	e02f      	b.n	800ab1a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aaba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aabe:	4618      	mov	r0, r3
 800aac0:	f7fd f8c6 	bl	8007c50 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800aac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aac6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aac8:	e027      	b.n	800ab1a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aaca:	f107 0318 	add.w	r3, r7, #24
 800aace:	4618      	mov	r0, r3
 800aad0:	f7fd fa12 	bl	8007ef8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800aad4:	69fb      	ldr	r3, [r7, #28]
 800aad6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aad8:	e01f      	b.n	800ab1a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aada:	4b69      	ldr	r3, [pc, #420]	; (800ac80 <UART_SetConfig+0xc2c>)
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	f003 0320 	and.w	r3, r3, #32
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d009      	beq.n	800aafa <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800aae6:	4b66      	ldr	r3, [pc, #408]	; (800ac80 <UART_SetConfig+0xc2c>)
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	08db      	lsrs	r3, r3, #3
 800aaec:	f003 0303 	and.w	r3, r3, #3
 800aaf0:	4a64      	ldr	r2, [pc, #400]	; (800ac84 <UART_SetConfig+0xc30>)
 800aaf2:	fa22 f303 	lsr.w	r3, r2, r3
 800aaf6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800aaf8:	e00f      	b.n	800ab1a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800aafa:	4b62      	ldr	r3, [pc, #392]	; (800ac84 <UART_SetConfig+0xc30>)
 800aafc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aafe:	e00c      	b.n	800ab1a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ab00:	4b61      	ldr	r3, [pc, #388]	; (800ac88 <UART_SetConfig+0xc34>)
 800ab02:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ab04:	e009      	b.n	800ab1a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ab06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ab0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ab0c:	e005      	b.n	800ab1a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800ab0e:	2300      	movs	r3, #0
 800ab10:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800ab12:	2301      	movs	r3, #1
 800ab14:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800ab18:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ab1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	f000 80ea 	beq.w	800acf6 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ab22:	697b      	ldr	r3, [r7, #20]
 800ab24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab26:	4a55      	ldr	r2, [pc, #340]	; (800ac7c <UART_SetConfig+0xc28>)
 800ab28:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ab2c:	461a      	mov	r2, r3
 800ab2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab30:	fbb3 f3f2 	udiv	r3, r3, r2
 800ab34:	005a      	lsls	r2, r3, #1
 800ab36:	697b      	ldr	r3, [r7, #20]
 800ab38:	685b      	ldr	r3, [r3, #4]
 800ab3a:	085b      	lsrs	r3, r3, #1
 800ab3c:	441a      	add	r2, r3
 800ab3e:	697b      	ldr	r3, [r7, #20]
 800ab40:	685b      	ldr	r3, [r3, #4]
 800ab42:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab46:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ab48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab4a:	2b0f      	cmp	r3, #15
 800ab4c:	d916      	bls.n	800ab7c <UART_SetConfig+0xb28>
 800ab4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ab54:	d212      	bcs.n	800ab7c <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ab56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab58:	b29b      	uxth	r3, r3
 800ab5a:	f023 030f 	bic.w	r3, r3, #15
 800ab5e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ab60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab62:	085b      	lsrs	r3, r3, #1
 800ab64:	b29b      	uxth	r3, r3
 800ab66:	f003 0307 	and.w	r3, r3, #7
 800ab6a:	b29a      	uxth	r2, r3
 800ab6c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ab6e:	4313      	orrs	r3, r2
 800ab70:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800ab72:	697b      	ldr	r3, [r7, #20]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800ab78:	60da      	str	r2, [r3, #12]
 800ab7a:	e0bc      	b.n	800acf6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800ab7c:	2301      	movs	r3, #1
 800ab7e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800ab82:	e0b8      	b.n	800acf6 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ab84:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ab88:	2b20      	cmp	r3, #32
 800ab8a:	dc4b      	bgt.n	800ac24 <UART_SetConfig+0xbd0>
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	f2c0 8087 	blt.w	800aca0 <UART_SetConfig+0xc4c>
 800ab92:	2b20      	cmp	r3, #32
 800ab94:	f200 8084 	bhi.w	800aca0 <UART_SetConfig+0xc4c>
 800ab98:	a201      	add	r2, pc, #4	; (adr r2, 800aba0 <UART_SetConfig+0xb4c>)
 800ab9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab9e:	bf00      	nop
 800aba0:	0800ac2b 	.word	0x0800ac2b
 800aba4:	0800ac33 	.word	0x0800ac33
 800aba8:	0800aca1 	.word	0x0800aca1
 800abac:	0800aca1 	.word	0x0800aca1
 800abb0:	0800ac3b 	.word	0x0800ac3b
 800abb4:	0800aca1 	.word	0x0800aca1
 800abb8:	0800aca1 	.word	0x0800aca1
 800abbc:	0800aca1 	.word	0x0800aca1
 800abc0:	0800ac4b 	.word	0x0800ac4b
 800abc4:	0800aca1 	.word	0x0800aca1
 800abc8:	0800aca1 	.word	0x0800aca1
 800abcc:	0800aca1 	.word	0x0800aca1
 800abd0:	0800aca1 	.word	0x0800aca1
 800abd4:	0800aca1 	.word	0x0800aca1
 800abd8:	0800aca1 	.word	0x0800aca1
 800abdc:	0800aca1 	.word	0x0800aca1
 800abe0:	0800ac5b 	.word	0x0800ac5b
 800abe4:	0800aca1 	.word	0x0800aca1
 800abe8:	0800aca1 	.word	0x0800aca1
 800abec:	0800aca1 	.word	0x0800aca1
 800abf0:	0800aca1 	.word	0x0800aca1
 800abf4:	0800aca1 	.word	0x0800aca1
 800abf8:	0800aca1 	.word	0x0800aca1
 800abfc:	0800aca1 	.word	0x0800aca1
 800ac00:	0800aca1 	.word	0x0800aca1
 800ac04:	0800aca1 	.word	0x0800aca1
 800ac08:	0800aca1 	.word	0x0800aca1
 800ac0c:	0800aca1 	.word	0x0800aca1
 800ac10:	0800aca1 	.word	0x0800aca1
 800ac14:	0800aca1 	.word	0x0800aca1
 800ac18:	0800aca1 	.word	0x0800aca1
 800ac1c:	0800aca1 	.word	0x0800aca1
 800ac20:	0800ac93 	.word	0x0800ac93
 800ac24:	2b40      	cmp	r3, #64	; 0x40
 800ac26:	d037      	beq.n	800ac98 <UART_SetConfig+0xc44>
 800ac28:	e03a      	b.n	800aca0 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ac2a:	f7fb fe2f 	bl	800688c <HAL_RCC_GetPCLK1Freq>
 800ac2e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ac30:	e03c      	b.n	800acac <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ac32:	f7fb fe41 	bl	80068b8 <HAL_RCC_GetPCLK2Freq>
 800ac36:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ac38:	e038      	b.n	800acac <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ac3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ac3e:	4618      	mov	r0, r3
 800ac40:	f7fd f806 	bl	8007c50 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ac44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ac48:	e030      	b.n	800acac <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ac4a:	f107 0318 	add.w	r3, r7, #24
 800ac4e:	4618      	mov	r0, r3
 800ac50:	f7fd f952 	bl	8007ef8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ac54:	69fb      	ldr	r3, [r7, #28]
 800ac56:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ac58:	e028      	b.n	800acac <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ac5a:	4b09      	ldr	r3, [pc, #36]	; (800ac80 <UART_SetConfig+0xc2c>)
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	f003 0320 	and.w	r3, r3, #32
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d012      	beq.n	800ac8c <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ac66:	4b06      	ldr	r3, [pc, #24]	; (800ac80 <UART_SetConfig+0xc2c>)
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	08db      	lsrs	r3, r3, #3
 800ac6c:	f003 0303 	and.w	r3, r3, #3
 800ac70:	4a04      	ldr	r2, [pc, #16]	; (800ac84 <UART_SetConfig+0xc30>)
 800ac72:	fa22 f303 	lsr.w	r3, r2, r3
 800ac76:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ac78:	e018      	b.n	800acac <UART_SetConfig+0xc58>
 800ac7a:	bf00      	nop
 800ac7c:	0800b3f0 	.word	0x0800b3f0
 800ac80:	58024400 	.word	0x58024400
 800ac84:	03d09000 	.word	0x03d09000
 800ac88:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800ac8c:	4b24      	ldr	r3, [pc, #144]	; (800ad20 <UART_SetConfig+0xccc>)
 800ac8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ac90:	e00c      	b.n	800acac <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ac92:	4b24      	ldr	r3, [pc, #144]	; (800ad24 <UART_SetConfig+0xcd0>)
 800ac94:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ac96:	e009      	b.n	800acac <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ac98:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ac9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ac9e:	e005      	b.n	800acac <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800aca0:	2300      	movs	r3, #0
 800aca2:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800aca4:	2301      	movs	r3, #1
 800aca6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800acaa:	bf00      	nop
    }

    if (pclk != 0U)
 800acac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d021      	beq.n	800acf6 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800acb2:	697b      	ldr	r3, [r7, #20]
 800acb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acb6:	4a1c      	ldr	r2, [pc, #112]	; (800ad28 <UART_SetConfig+0xcd4>)
 800acb8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800acbc:	461a      	mov	r2, r3
 800acbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800acc0:	fbb3 f2f2 	udiv	r2, r3, r2
 800acc4:	697b      	ldr	r3, [r7, #20]
 800acc6:	685b      	ldr	r3, [r3, #4]
 800acc8:	085b      	lsrs	r3, r3, #1
 800acca:	441a      	add	r2, r3
 800accc:	697b      	ldr	r3, [r7, #20]
 800acce:	685b      	ldr	r3, [r3, #4]
 800acd0:	fbb2 f3f3 	udiv	r3, r2, r3
 800acd4:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800acd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acd8:	2b0f      	cmp	r3, #15
 800acda:	d909      	bls.n	800acf0 <UART_SetConfig+0xc9c>
 800acdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ace2:	d205      	bcs.n	800acf0 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ace4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ace6:	b29a      	uxth	r2, r3
 800ace8:	697b      	ldr	r3, [r7, #20]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	60da      	str	r2, [r3, #12]
 800acee:	e002      	b.n	800acf6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800acf0:	2301      	movs	r3, #1
 800acf2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800acf6:	697b      	ldr	r3, [r7, #20]
 800acf8:	2201      	movs	r2, #1
 800acfa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800acfe:	697b      	ldr	r3, [r7, #20]
 800ad00:	2201      	movs	r2, #1
 800ad02:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ad06:	697b      	ldr	r3, [r7, #20]
 800ad08:	2200      	movs	r2, #0
 800ad0a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800ad0c:	697b      	ldr	r3, [r7, #20]
 800ad0e:	2200      	movs	r2, #0
 800ad10:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800ad12:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800ad16:	4618      	mov	r0, r3
 800ad18:	3748      	adds	r7, #72	; 0x48
 800ad1a:	46bd      	mov	sp, r7
 800ad1c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ad20:	03d09000 	.word	0x03d09000
 800ad24:	003d0900 	.word	0x003d0900
 800ad28:	0800b3f0 	.word	0x0800b3f0

0800ad2c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ad2c:	b480      	push	{r7}
 800ad2e:	b083      	sub	sp, #12
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad38:	f003 0301 	and.w	r3, r3, #1
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d00a      	beq.n	800ad56 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	685b      	ldr	r3, [r3, #4]
 800ad46:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	430a      	orrs	r2, r1
 800ad54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad5a:	f003 0302 	and.w	r3, r3, #2
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d00a      	beq.n	800ad78 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	685b      	ldr	r3, [r3, #4]
 800ad68:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	430a      	orrs	r2, r1
 800ad76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad7c:	f003 0304 	and.w	r3, r3, #4
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d00a      	beq.n	800ad9a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	685b      	ldr	r3, [r3, #4]
 800ad8a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	430a      	orrs	r2, r1
 800ad98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad9e:	f003 0308 	and.w	r3, r3, #8
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d00a      	beq.n	800adbc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	685b      	ldr	r3, [r3, #4]
 800adac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	430a      	orrs	r2, r1
 800adba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adc0:	f003 0310 	and.w	r3, r3, #16
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d00a      	beq.n	800adde <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	689b      	ldr	r3, [r3, #8]
 800adce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	430a      	orrs	r2, r1
 800addc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ade2:	f003 0320 	and.w	r3, r3, #32
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d00a      	beq.n	800ae00 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	689b      	ldr	r3, [r3, #8]
 800adf0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	430a      	orrs	r2, r1
 800adfe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d01a      	beq.n	800ae42 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	685b      	ldr	r3, [r3, #4]
 800ae12:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	430a      	orrs	r2, r1
 800ae20:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ae2a:	d10a      	bne.n	800ae42 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	685b      	ldr	r3, [r3, #4]
 800ae32:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	430a      	orrs	r2, r1
 800ae40:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d00a      	beq.n	800ae64 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	685b      	ldr	r3, [r3, #4]
 800ae54:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	430a      	orrs	r2, r1
 800ae62:	605a      	str	r2, [r3, #4]
  }
}
 800ae64:	bf00      	nop
 800ae66:	370c      	adds	r7, #12
 800ae68:	46bd      	mov	sp, r7
 800ae6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6e:	4770      	bx	lr

0800ae70 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ae70:	b580      	push	{r7, lr}
 800ae72:	b098      	sub	sp, #96	; 0x60
 800ae74:	af02      	add	r7, sp, #8
 800ae76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	2200      	movs	r2, #0
 800ae7c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ae80:	f7f7 fafe 	bl	8002480 <HAL_GetTick>
 800ae84:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	f003 0308 	and.w	r3, r3, #8
 800ae90:	2b08      	cmp	r3, #8
 800ae92:	d12f      	bne.n	800aef4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ae94:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ae98:	9300      	str	r3, [sp, #0]
 800ae9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ae9c:	2200      	movs	r2, #0
 800ae9e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800aea2:	6878      	ldr	r0, [r7, #4]
 800aea4:	f000 f88e 	bl	800afc4 <UART_WaitOnFlagUntilTimeout>
 800aea8:	4603      	mov	r3, r0
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d022      	beq.n	800aef4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aeb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aeb6:	e853 3f00 	ldrex	r3, [r3]
 800aeba:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800aebc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aebe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aec2:	653b      	str	r3, [r7, #80]	; 0x50
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	461a      	mov	r2, r3
 800aeca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aecc:	647b      	str	r3, [r7, #68]	; 0x44
 800aece:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aed0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800aed2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800aed4:	e841 2300 	strex	r3, r2, [r1]
 800aed8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800aeda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d1e6      	bne.n	800aeae <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	2220      	movs	r2, #32
 800aee4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	2200      	movs	r2, #0
 800aeec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800aef0:	2303      	movs	r3, #3
 800aef2:	e063      	b.n	800afbc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	f003 0304 	and.w	r3, r3, #4
 800aefe:	2b04      	cmp	r3, #4
 800af00:	d149      	bne.n	800af96 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800af02:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800af06:	9300      	str	r3, [sp, #0]
 800af08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800af0a:	2200      	movs	r2, #0
 800af0c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800af10:	6878      	ldr	r0, [r7, #4]
 800af12:	f000 f857 	bl	800afc4 <UART_WaitOnFlagUntilTimeout>
 800af16:	4603      	mov	r3, r0
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d03c      	beq.n	800af96 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af24:	e853 3f00 	ldrex	r3, [r3]
 800af28:	623b      	str	r3, [r7, #32]
   return(result);
 800af2a:	6a3b      	ldr	r3, [r7, #32]
 800af2c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800af30:	64fb      	str	r3, [r7, #76]	; 0x4c
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	461a      	mov	r2, r3
 800af38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800af3a:	633b      	str	r3, [r7, #48]	; 0x30
 800af3c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af3e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800af40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800af42:	e841 2300 	strex	r3, r2, [r1]
 800af46:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800af48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d1e6      	bne.n	800af1c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	3308      	adds	r3, #8
 800af54:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af56:	693b      	ldr	r3, [r7, #16]
 800af58:	e853 3f00 	ldrex	r3, [r3]
 800af5c:	60fb      	str	r3, [r7, #12]
   return(result);
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	f023 0301 	bic.w	r3, r3, #1
 800af64:	64bb      	str	r3, [r7, #72]	; 0x48
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	3308      	adds	r3, #8
 800af6c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800af6e:	61fa      	str	r2, [r7, #28]
 800af70:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af72:	69b9      	ldr	r1, [r7, #24]
 800af74:	69fa      	ldr	r2, [r7, #28]
 800af76:	e841 2300 	strex	r3, r2, [r1]
 800af7a:	617b      	str	r3, [r7, #20]
   return(result);
 800af7c:	697b      	ldr	r3, [r7, #20]
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d1e5      	bne.n	800af4e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	2220      	movs	r2, #32
 800af86:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	2200      	movs	r2, #0
 800af8e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800af92:	2303      	movs	r3, #3
 800af94:	e012      	b.n	800afbc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	2220      	movs	r2, #32
 800af9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	2220      	movs	r2, #32
 800afa2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	2200      	movs	r2, #0
 800afaa:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	2200      	movs	r2, #0
 800afb0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	2200      	movs	r2, #0
 800afb6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800afba:	2300      	movs	r3, #0
}
 800afbc:	4618      	mov	r0, r3
 800afbe:	3758      	adds	r7, #88	; 0x58
 800afc0:	46bd      	mov	sp, r7
 800afc2:	bd80      	pop	{r7, pc}

0800afc4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800afc4:	b580      	push	{r7, lr}
 800afc6:	b084      	sub	sp, #16
 800afc8:	af00      	add	r7, sp, #0
 800afca:	60f8      	str	r0, [r7, #12]
 800afcc:	60b9      	str	r1, [r7, #8]
 800afce:	603b      	str	r3, [r7, #0]
 800afd0:	4613      	mov	r3, r2
 800afd2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800afd4:	e049      	b.n	800b06a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800afd6:	69bb      	ldr	r3, [r7, #24]
 800afd8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800afdc:	d045      	beq.n	800b06a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800afde:	f7f7 fa4f 	bl	8002480 <HAL_GetTick>
 800afe2:	4602      	mov	r2, r0
 800afe4:	683b      	ldr	r3, [r7, #0]
 800afe6:	1ad3      	subs	r3, r2, r3
 800afe8:	69ba      	ldr	r2, [r7, #24]
 800afea:	429a      	cmp	r2, r3
 800afec:	d302      	bcc.n	800aff4 <UART_WaitOnFlagUntilTimeout+0x30>
 800afee:	69bb      	ldr	r3, [r7, #24]
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d101      	bne.n	800aff8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800aff4:	2303      	movs	r3, #3
 800aff6:	e048      	b.n	800b08a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	f003 0304 	and.w	r3, r3, #4
 800b002:	2b00      	cmp	r3, #0
 800b004:	d031      	beq.n	800b06a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	69db      	ldr	r3, [r3, #28]
 800b00c:	f003 0308 	and.w	r3, r3, #8
 800b010:	2b08      	cmp	r3, #8
 800b012:	d110      	bne.n	800b036 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	2208      	movs	r2, #8
 800b01a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800b01c:	68f8      	ldr	r0, [r7, #12]
 800b01e:	f000 f839 	bl	800b094 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	2208      	movs	r2, #8
 800b026:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	2200      	movs	r2, #0
 800b02e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800b032:	2301      	movs	r3, #1
 800b034:	e029      	b.n	800b08a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	69db      	ldr	r3, [r3, #28]
 800b03c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b040:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b044:	d111      	bne.n	800b06a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b04e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b050:	68f8      	ldr	r0, [r7, #12]
 800b052:	f000 f81f 	bl	800b094 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	2220      	movs	r2, #32
 800b05a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	2200      	movs	r2, #0
 800b062:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800b066:	2303      	movs	r3, #3
 800b068:	e00f      	b.n	800b08a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	69da      	ldr	r2, [r3, #28]
 800b070:	68bb      	ldr	r3, [r7, #8]
 800b072:	4013      	ands	r3, r2
 800b074:	68ba      	ldr	r2, [r7, #8]
 800b076:	429a      	cmp	r2, r3
 800b078:	bf0c      	ite	eq
 800b07a:	2301      	moveq	r3, #1
 800b07c:	2300      	movne	r3, #0
 800b07e:	b2db      	uxtb	r3, r3
 800b080:	461a      	mov	r2, r3
 800b082:	79fb      	ldrb	r3, [r7, #7]
 800b084:	429a      	cmp	r2, r3
 800b086:	d0a6      	beq.n	800afd6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b088:	2300      	movs	r3, #0
}
 800b08a:	4618      	mov	r0, r3
 800b08c:	3710      	adds	r7, #16
 800b08e:	46bd      	mov	sp, r7
 800b090:	bd80      	pop	{r7, pc}
	...

0800b094 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b094:	b480      	push	{r7}
 800b096:	b095      	sub	sp, #84	; 0x54
 800b098:	af00      	add	r7, sp, #0
 800b09a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0a4:	e853 3f00 	ldrex	r3, [r3]
 800b0a8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b0aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b0b0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	461a      	mov	r2, r3
 800b0b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b0ba:	643b      	str	r3, [r7, #64]	; 0x40
 800b0bc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0be:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b0c0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b0c2:	e841 2300 	strex	r3, r2, [r1]
 800b0c6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b0c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d1e6      	bne.n	800b09c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	3308      	adds	r3, #8
 800b0d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0d6:	6a3b      	ldr	r3, [r7, #32]
 800b0d8:	e853 3f00 	ldrex	r3, [r3]
 800b0dc:	61fb      	str	r3, [r7, #28]
   return(result);
 800b0de:	69fa      	ldr	r2, [r7, #28]
 800b0e0:	4b1e      	ldr	r3, [pc, #120]	; (800b15c <UART_EndRxTransfer+0xc8>)
 800b0e2:	4013      	ands	r3, r2
 800b0e4:	64bb      	str	r3, [r7, #72]	; 0x48
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	3308      	adds	r3, #8
 800b0ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b0ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b0f0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b0f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b0f6:	e841 2300 	strex	r3, r2, [r1]
 800b0fa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b0fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d1e5      	bne.n	800b0ce <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b106:	2b01      	cmp	r3, #1
 800b108:	d118      	bne.n	800b13c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	e853 3f00 	ldrex	r3, [r3]
 800b116:	60bb      	str	r3, [r7, #8]
   return(result);
 800b118:	68bb      	ldr	r3, [r7, #8]
 800b11a:	f023 0310 	bic.w	r3, r3, #16
 800b11e:	647b      	str	r3, [r7, #68]	; 0x44
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	461a      	mov	r2, r3
 800b126:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b128:	61bb      	str	r3, [r7, #24]
 800b12a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b12c:	6979      	ldr	r1, [r7, #20]
 800b12e:	69ba      	ldr	r2, [r7, #24]
 800b130:	e841 2300 	strex	r3, r2, [r1]
 800b134:	613b      	str	r3, [r7, #16]
   return(result);
 800b136:	693b      	ldr	r3, [r7, #16]
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d1e6      	bne.n	800b10a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	2220      	movs	r2, #32
 800b140:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	2200      	movs	r2, #0
 800b148:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	2200      	movs	r2, #0
 800b14e:	675a      	str	r2, [r3, #116]	; 0x74
}
 800b150:	bf00      	nop
 800b152:	3754      	adds	r7, #84	; 0x54
 800b154:	46bd      	mov	sp, r7
 800b156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b15a:	4770      	bx	lr
 800b15c:	effffffe 	.word	0xeffffffe

0800b160 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b160:	b480      	push	{r7}
 800b162:	b085      	sub	sp, #20
 800b164:	af00      	add	r7, sp, #0
 800b166:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b16e:	2b01      	cmp	r3, #1
 800b170:	d101      	bne.n	800b176 <HAL_UARTEx_DisableFifoMode+0x16>
 800b172:	2302      	movs	r3, #2
 800b174:	e027      	b.n	800b1c6 <HAL_UARTEx_DisableFifoMode+0x66>
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	2201      	movs	r2, #1
 800b17a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	2224      	movs	r2, #36	; 0x24
 800b182:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	681a      	ldr	r2, [r3, #0]
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	f022 0201 	bic.w	r2, r2, #1
 800b19c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b1a4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	2200      	movs	r2, #0
 800b1aa:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	68fa      	ldr	r2, [r7, #12]
 800b1b2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	2220      	movs	r2, #32
 800b1b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	2200      	movs	r2, #0
 800b1c0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b1c4:	2300      	movs	r3, #0
}
 800b1c6:	4618      	mov	r0, r3
 800b1c8:	3714      	adds	r7, #20
 800b1ca:	46bd      	mov	sp, r7
 800b1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d0:	4770      	bx	lr

0800b1d2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b1d2:	b580      	push	{r7, lr}
 800b1d4:	b084      	sub	sp, #16
 800b1d6:	af00      	add	r7, sp, #0
 800b1d8:	6078      	str	r0, [r7, #4]
 800b1da:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b1e2:	2b01      	cmp	r3, #1
 800b1e4:	d101      	bne.n	800b1ea <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b1e6:	2302      	movs	r3, #2
 800b1e8:	e02d      	b.n	800b246 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	2201      	movs	r2, #1
 800b1ee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	2224      	movs	r2, #36	; 0x24
 800b1f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	681a      	ldr	r2, [r3, #0]
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	f022 0201 	bic.w	r2, r2, #1
 800b210:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	689b      	ldr	r3, [r3, #8]
 800b218:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	683a      	ldr	r2, [r7, #0]
 800b222:	430a      	orrs	r2, r1
 800b224:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b226:	6878      	ldr	r0, [r7, #4]
 800b228:	f000 f850 	bl	800b2cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	68fa      	ldr	r2, [r7, #12]
 800b232:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	2220      	movs	r2, #32
 800b238:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	2200      	movs	r2, #0
 800b240:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b244:	2300      	movs	r3, #0
}
 800b246:	4618      	mov	r0, r3
 800b248:	3710      	adds	r7, #16
 800b24a:	46bd      	mov	sp, r7
 800b24c:	bd80      	pop	{r7, pc}

0800b24e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b24e:	b580      	push	{r7, lr}
 800b250:	b084      	sub	sp, #16
 800b252:	af00      	add	r7, sp, #0
 800b254:	6078      	str	r0, [r7, #4]
 800b256:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b25e:	2b01      	cmp	r3, #1
 800b260:	d101      	bne.n	800b266 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b262:	2302      	movs	r3, #2
 800b264:	e02d      	b.n	800b2c2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	2201      	movs	r2, #1
 800b26a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	2224      	movs	r2, #36	; 0x24
 800b272:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	681a      	ldr	r2, [r3, #0]
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	f022 0201 	bic.w	r2, r2, #1
 800b28c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	689b      	ldr	r3, [r3, #8]
 800b294:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	683a      	ldr	r2, [r7, #0]
 800b29e:	430a      	orrs	r2, r1
 800b2a0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b2a2:	6878      	ldr	r0, [r7, #4]
 800b2a4:	f000 f812 	bl	800b2cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	68fa      	ldr	r2, [r7, #12]
 800b2ae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	2220      	movs	r2, #32
 800b2b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	2200      	movs	r2, #0
 800b2bc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b2c0:	2300      	movs	r3, #0
}
 800b2c2:	4618      	mov	r0, r3
 800b2c4:	3710      	adds	r7, #16
 800b2c6:	46bd      	mov	sp, r7
 800b2c8:	bd80      	pop	{r7, pc}
	...

0800b2cc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b2cc:	b480      	push	{r7}
 800b2ce:	b085      	sub	sp, #20
 800b2d0:	af00      	add	r7, sp, #0
 800b2d2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d108      	bne.n	800b2ee <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	2201      	movs	r2, #1
 800b2e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	2201      	movs	r2, #1
 800b2e8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b2ec:	e031      	b.n	800b352 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b2ee:	2310      	movs	r3, #16
 800b2f0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b2f2:	2310      	movs	r3, #16
 800b2f4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	689b      	ldr	r3, [r3, #8]
 800b2fc:	0e5b      	lsrs	r3, r3, #25
 800b2fe:	b2db      	uxtb	r3, r3
 800b300:	f003 0307 	and.w	r3, r3, #7
 800b304:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	689b      	ldr	r3, [r3, #8]
 800b30c:	0f5b      	lsrs	r3, r3, #29
 800b30e:	b2db      	uxtb	r3, r3
 800b310:	f003 0307 	and.w	r3, r3, #7
 800b314:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b316:	7bbb      	ldrb	r3, [r7, #14]
 800b318:	7b3a      	ldrb	r2, [r7, #12]
 800b31a:	4911      	ldr	r1, [pc, #68]	; (800b360 <UARTEx_SetNbDataToProcess+0x94>)
 800b31c:	5c8a      	ldrb	r2, [r1, r2]
 800b31e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b322:	7b3a      	ldrb	r2, [r7, #12]
 800b324:	490f      	ldr	r1, [pc, #60]	; (800b364 <UARTEx_SetNbDataToProcess+0x98>)
 800b326:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b328:	fb93 f3f2 	sdiv	r3, r3, r2
 800b32c:	b29a      	uxth	r2, r3
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b334:	7bfb      	ldrb	r3, [r7, #15]
 800b336:	7b7a      	ldrb	r2, [r7, #13]
 800b338:	4909      	ldr	r1, [pc, #36]	; (800b360 <UARTEx_SetNbDataToProcess+0x94>)
 800b33a:	5c8a      	ldrb	r2, [r1, r2]
 800b33c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b340:	7b7a      	ldrb	r2, [r7, #13]
 800b342:	4908      	ldr	r1, [pc, #32]	; (800b364 <UARTEx_SetNbDataToProcess+0x98>)
 800b344:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b346:	fb93 f3f2 	sdiv	r3, r3, r2
 800b34a:	b29a      	uxth	r2, r3
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b352:	bf00      	nop
 800b354:	3714      	adds	r7, #20
 800b356:	46bd      	mov	sp, r7
 800b358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b35c:	4770      	bx	lr
 800b35e:	bf00      	nop
 800b360:	0800b408 	.word	0x0800b408
 800b364:	0800b410 	.word	0x0800b410

0800b368 <memset>:
 800b368:	4402      	add	r2, r0
 800b36a:	4603      	mov	r3, r0
 800b36c:	4293      	cmp	r3, r2
 800b36e:	d100      	bne.n	800b372 <memset+0xa>
 800b370:	4770      	bx	lr
 800b372:	f803 1b01 	strb.w	r1, [r3], #1
 800b376:	e7f9      	b.n	800b36c <memset+0x4>

0800b378 <__libc_init_array>:
 800b378:	b570      	push	{r4, r5, r6, lr}
 800b37a:	4d0d      	ldr	r5, [pc, #52]	; (800b3b0 <__libc_init_array+0x38>)
 800b37c:	4c0d      	ldr	r4, [pc, #52]	; (800b3b4 <__libc_init_array+0x3c>)
 800b37e:	1b64      	subs	r4, r4, r5
 800b380:	10a4      	asrs	r4, r4, #2
 800b382:	2600      	movs	r6, #0
 800b384:	42a6      	cmp	r6, r4
 800b386:	d109      	bne.n	800b39c <__libc_init_array+0x24>
 800b388:	4d0b      	ldr	r5, [pc, #44]	; (800b3b8 <__libc_init_array+0x40>)
 800b38a:	4c0c      	ldr	r4, [pc, #48]	; (800b3bc <__libc_init_array+0x44>)
 800b38c:	f000 f818 	bl	800b3c0 <_init>
 800b390:	1b64      	subs	r4, r4, r5
 800b392:	10a4      	asrs	r4, r4, #2
 800b394:	2600      	movs	r6, #0
 800b396:	42a6      	cmp	r6, r4
 800b398:	d105      	bne.n	800b3a6 <__libc_init_array+0x2e>
 800b39a:	bd70      	pop	{r4, r5, r6, pc}
 800b39c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b3a0:	4798      	blx	r3
 800b3a2:	3601      	adds	r6, #1
 800b3a4:	e7ee      	b.n	800b384 <__libc_init_array+0xc>
 800b3a6:	f855 3b04 	ldr.w	r3, [r5], #4
 800b3aa:	4798      	blx	r3
 800b3ac:	3601      	adds	r6, #1
 800b3ae:	e7f2      	b.n	800b396 <__libc_init_array+0x1e>
 800b3b0:	0800b420 	.word	0x0800b420
 800b3b4:	0800b420 	.word	0x0800b420
 800b3b8:	0800b420 	.word	0x0800b420
 800b3bc:	0800b424 	.word	0x0800b424

0800b3c0 <_init>:
 800b3c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3c2:	bf00      	nop
 800b3c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b3c6:	bc08      	pop	{r3}
 800b3c8:	469e      	mov	lr, r3
 800b3ca:	4770      	bx	lr

0800b3cc <_fini>:
 800b3cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3ce:	bf00      	nop
 800b3d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b3d2:	bc08      	pop	{r3}
 800b3d4:	469e      	mov	lr, r3
 800b3d6:	4770      	bx	lr
